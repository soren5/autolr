[{"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [6, 8, 0, 2, 0, 8, 5, 9, 0], [1, 0, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 3, 0, 1, 3, 3], [48, 57]], "fitness": -0.8108571171760559, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 8, 2, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.4808550978443797, 2.2861816957405985, 2.1623205095942875, 1.7582808047584209, 1.3648859055727827, 1.0530772072181505, 0.8899261152440405, 0.8028191602807933, 0.7827222928977551, 0.7116567486344296, 0.7029606519972312, 0.6723385995263516, 0.6372886971948075, 0.631416301969146, 0.6205570362168784, 0.6119884890005368, 0.5776173930441494, 0.5857318008123938, 0.5528236099474182, 0.5592933958626348, 0.5401550271507614, 0.530903465011573, 0.5393838626384861, 0.5314258699797526, 0.49051490624457017, 0.5140829259583097, 0.4811511183569161, 0.48031007006750637, 0.47232885079502884, 0.46402193535635455], "accuracy": [0.23140932619571686, 0.14621582627296448, 0.2542596757411957, 0.35926562547683716, 0.5062739253044128, 0.6021661758422852, 0.6645092964172363, 0.6935675740242004, 0.6997754573822021, 0.7271166443824768, 0.7301545143127441, 0.7400607466697693, 0.7547219395637512, 0.7606657147407532, 0.7662131786346436, 0.7630431652069092, 0.7836481332778931, 0.7770439982414246, 0.7893276810646057, 0.7882710099220276, 0.7952714562416077, 0.8016114234924316, 0.7975168228149414, 0.7976489067077637, 0.8161405324935913, 0.8037247657775879, 0.8183859586715698, 0.8232730031013489, 0.828820526599884, 0.8253863453865051], "val_loss": [1.9738304955618722, 1.8168187141418457, 1.7301798548017229, 1.676321268081665, 0.9316673278808594, 0.7638746840613229, 0.6575022254671369, 0.6055874143327985, 0.5759057317461286, 0.5282631090709141, 0.5550638437271118, 0.5326324871608189, 0.5028361592973981, 0.5012331349509103, 0.5027231999805996, 0.4590819903782436, 0.48752784729003906, 0.44940165110996794, 0.45124404770987375, 0.4386716229575021, 0.4681692974908011, 0.43837404251098633, 0.41249059779303415, 0.4120299390384129, 0.4209910035133362, 0.4282778075763157, 0.4067195398466928, 0.4017814653260367, 0.41697887011936735, 0.44226251329694477], "val_accuracy": [0.10133333504199982, 0.39899998903274536, 0.26733332872390747, 0.28566667437553406, 0.5706666707992554, 0.6363333463668823, 0.6959999799728394, 0.7239999771118164, 0.7406666874885559, 0.7549999952316284, 0.7473333477973938, 0.762666642665863, 0.7743333578109741, 0.7720000147819519, 0.7680000066757202, 0.7953333258628845, 0.7820000052452087, 0.8080000281333923, 0.8023333549499512, 0.7979999780654907, 0.7940000295639038, 0.8050000071525574, 0.8213333487510681, 0.8233333230018616, 0.8246666789054871, 0.8063333630561829, 0.8186666369438171, 0.8213333487510681, 0.8163333535194397, 0.8029999732971191]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 2, 2, 6, 5, 1, 9], [0, 4, 3, 0, 0], [50, 7, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.7991428375244141, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 8, 4, 4, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.2553324752936605, 2.059278608549383, 1.629392101764364, 1.2673453586669314, 1.0811366152690938, 0.9925694555544095, 0.93244227712275, 0.8866750981120889, 0.8561754402955604, 0.8185370171688897, 0.7885031769099631, 0.7701881800849188, 0.7572369615100457, 0.7355606443673203, 0.7210174115137764, 0.7048424342919051, 0.7001670924522275, 0.6802903950930806, 0.6716408482506102, 0.6744966152920117, 0.6718833161193964, 0.6501377015743022, 0.6475625926272712, 0.6599355533358884, 0.6285447210699355, 0.6370624596054496, 0.6235867604020879], "accuracy": [0.20697398483753204, 0.3929467797279358, 0.4846123456954956, 0.5684850215911865, 0.6190727949142456, 0.6453573107719421, 0.6618676781654358, 0.687491774559021, 0.6954167485237122, 0.700700044631958, 0.7106062769889832, 0.7156254053115845, 0.7199841737747192, 0.7326641082763672, 0.7331924438476562, 0.7397965788841248, 0.7416457533836365, 0.7486461400985718, 0.7478536367416382, 0.7481178045272827, 0.7557786107063293, 0.7640998363494873, 0.7648923397064209, 0.7576277852058411, 0.7681944370269775, 0.7640998363494873, 0.7663452625274658], "val_loss": [1.851686886378697, 1.5219496999468123, 1.0676496710096086, 0.8454815149307251, 0.7467170102255685, 0.7210866723741803, 0.655532717704773, 0.6367771966116769, 0.6167065245764596, 0.6109304428100586, 0.5764418499810355, 0.5678122554506574, 0.5632341248648507, 0.5544623136520386, 0.5521363530840192, 0.5326570272445679, 0.532146521977016, 0.5253179584230695, 0.5186530011040824, 0.5217047589165824, 0.5065563746861049, 0.5016684702464512, 0.4981605495725359, 0.4952536310468401, 0.49644841466631207, 0.49352686745779856, 0.4874622481209891], "val_accuracy": [0.43166667222976685, 0.5536666512489319, 0.640999972820282, 0.6606666445732117, 0.7073333263397217, 0.6783333420753479, 0.7296666502952576, 0.7279999852180481, 0.7273333072662354, 0.7326666712760925, 0.7486666440963745, 0.7613333463668823, 0.7620000243186951, 0.7673333287239075, 0.7553333044052124, 0.7636666893959045, 0.7766666412353516, 0.7736666798591614, 0.7786666750907898, 0.7746666669845581, 0.7793333530426025, 0.7913333177566528, 0.7856666445732117, 0.7873333096504211, 0.7873333096504211, 0.7836666703224182, 0.7863333225250244]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.7985714077949524, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 8, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.280521500112201, 2.137071594523086, 1.6768202717907912, 1.3125951583627005, 1.0232214058835856, 0.8916443758290504, 0.8218186621684219, 0.7790292992315997, 0.7398875582770837, 0.7092714125154954, 0.6834591593583026, 0.670748869103054, 0.6407236387905679, 0.6273099883688188, 0.5955264810179959, 0.5832202026101151, 0.57321401688527, 0.5559607435447381, 0.5404691808038872, 0.5316727638496557, 0.5128771667042114, 0.4978662078855469, 0.49396555075524523, 0.4846950927391312, 0.4768567685012757, 0.46776769665395734, 0.4475432599870961, 0.44962562831432873, 0.4375506458958268, 0.4288761289939117, 0.42300905731486105, 0.41002960063604676, 0.40331096166018815, 0.39878826976027143, 0.3853509954733226, 0.38393030059084116, 0.37367426453170804], "accuracy": [0.15242372453212738, 0.3553031384944916, 0.45330867171287537, 0.5453705191612244, 0.6351869106292725, 0.6719059348106384, 0.6930392384529114, 0.7008321285247803, 0.7165499925613403, 0.7276449799537659, 0.7409853339195251, 0.7489103078842163, 0.7506273984909058, 0.7597411274909973, 0.7734777331352234, 0.7815347909927368, 0.7796856164932251, 0.7895918488502502, 0.7944789528846741, 0.7961959838867188, 0.8055738806724548, 0.8141592741012573, 0.8156121969223022, 0.8197067975997925, 0.8235371708869934, 0.8269713521003723, 0.8342359066009521, 0.8363492488861084, 0.837141752243042, 0.8432175517082214, 0.8412362933158875, 0.8462554216384888, 0.8477083444595337, 0.8495575189590454, 0.8558974862098694, 0.8589354157447815, 0.8622375130653381], "val_loss": [1.9016722270420618, 1.624269655772618, 0.9582280431474958, 0.7606345074517387, 0.6842568431581769, 0.6470365013395037, 0.5958688770021711, 0.5805915083203997, 0.5653020824704852, 0.5540269953863961, 0.5419748340334211, 0.52281539780753, 0.5067488636289325, 0.4980249915804182, 0.4804604394095285, 0.46611920424870085, 0.45722923960004536, 0.45309540203639437, 0.43962340695517405, 0.4314560719898769, 0.42277737174715313, 0.41310614347457886, 0.40641504526138306, 0.4014201760292053, 0.39499356916972567, 0.38889477934156147, 0.38190711396081106, 0.37709392820085796, 0.3727688789367676, 0.3683415310723441, 0.36608357088906424, 0.36492161239896503, 0.360846962247576, 0.35694282395499094, 0.35335456473486765, 0.3528113876070295, 0.3471086621284485], "val_accuracy": [0.3630000054836273, 0.4846666753292084, 0.6326666474342346, 0.6859999895095825, 0.6866666674613953, 0.7166666388511658, 0.7336666584014893, 0.7440000176429749, 0.7463333606719971, 0.7480000257492065, 0.7689999938011169, 0.7710000276565552, 0.7726666927337646, 0.7799999713897705, 0.7870000004768372, 0.7946666479110718, 0.7996666431427002, 0.8023333549499512, 0.8046666383743286, 0.8113333582878113, 0.8083333373069763, 0.8243333101272583, 0.8289999961853027, 0.8259999752044678, 0.8306666612625122, 0.8373333215713501, 0.8370000123977661, 0.8393333554267883, 0.8433333039283752, 0.843999981880188, 0.8426666855812073, 0.8519999980926514, 0.8479999899864197, 0.8506666421890259, 0.8519999980926514, 0.8496666550636292, 0.8479999899864197]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 8, 1, 0, 6, 5, 9, 0], [0, 4, 3, 0, 0], [9, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.795714259147644, "mapping_values": [1, 6, 6, 5, 1, 2, 12, 12, 7, 5, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.negative(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), grad))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2552861406850053, 2.0575070319127224, 1.6194437029906206, 1.2551349158520713, 1.070756923851635, 0.9920142129459212, 0.9305729454676268, 0.8844387721879969, 0.8578659080164764, 0.8152865267322678, 0.7860300909920203, 0.7668762720571203, 0.7547459851449995, 0.7332265082052465, 0.7202636287622071, 0.702264449599869, 0.698275249380052, 0.6784047228375824, 0.6707142952127448, 0.6715158661437498, 0.6699502447718689, 0.6482651132350711, 0.6466374527178326, 0.6606749418688457, 0.6274936995911261, 0.6364376462760808, 0.6228373044312764], "accuracy": [0.20684190094470978, 0.39426758885383606, 0.4854048490524292, 0.570202112197876, 0.6193369626998901, 0.6454893946647644, 0.6617355942726135, 0.6863030195236206, 0.6944921612739563, 0.700171709060669, 0.707568347454071, 0.7161537408828735, 0.7191916704177856, 0.7313432693481445, 0.7317395210266113, 0.7409853339195251, 0.7415136694908142, 0.7471932172775269, 0.750759482383728, 0.7483819723129272, 0.7561748623847961, 0.7600052952766418, 0.763439416885376, 0.7559106945991516, 0.7689869403839111, 0.7618544697761536, 0.7675340175628662], "val_loss": [1.8513531684875488, 1.5156565734318324, 1.0521299157823836, 0.8348652805600848, 0.7397037403924125, 0.7268130438668388, 0.654012850352696, 0.6382348707744053, 0.6126993724278041, 0.6116537707192558, 0.5758071967533657, 0.5624751363481794, 0.563807657786778, 0.5562782287597656, 0.5516264268330165, 0.5307150568280902, 0.5327637365886143, 0.5271104574203491, 0.5168125799724034, 0.5184916428157261, 0.5043665170669556, 0.5026081800460815, 0.500829781804766, 0.495998672076634, 0.49660812105451313, 0.49604783739362446, 0.4868372849055699], "val_accuracy": [0.4313333332538605, 0.5553333163261414, 0.643666684627533, 0.6610000133514404, 0.7086666822433472, 0.675000011920929, 0.7263333201408386, 0.7200000286102295, 0.7300000190734863, 0.7260000109672546, 0.7473333477973938, 0.7596666812896729, 0.7616666555404663, 0.7630000114440918, 0.7586666941642761, 0.7646666765213013, 0.7763333320617676, 0.7773333191871643, 0.7806666493415833, 0.7763333320617676, 0.781333327293396, 0.7883333563804626, 0.7853333353996277, 0.784333348274231, 0.7850000262260437, 0.777999997138977, 0.7879999876022339]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [20, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.7954285740852356, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 8, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.sqrt(alpha))), tf.math.square(tf.math.add(beta, grad))))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2822026732480913, 2.142162295427651, 1.6754108255471, 1.3256839284681452, 1.0341987411627256, 0.9162089671000293, 0.8405805962543289, 0.798367789951786, 0.7474962576599862, 0.7212411046831159, 0.7044672679120145, 0.6784697381055996, 0.6613944972337685, 0.637618300968614, 0.6218398278572965, 0.5981061853642603, 0.5857732725527623, 0.5725782123208439, 0.5544955671550008, 0.5353970604172126, 0.5302148292707398, 0.5222410789145109, 0.5124259057802028, 0.4910822284731804, 0.4881369668801919, 0.47591479576699974, 0.47261683716277686, 0.4575983762835562, 0.44733926117727235, 0.4428747085579603, 0.4396699247870699, 0.4180141936487226, 0.4142286377205998, 0.40543905272932257, 0.39778789226027245, 0.3853676969293968, 0.3925640113822001, 0.38206603437792025, 0.3742401788594023, 0.37225568056767877, 0.3616591798371139, 0.35685369320801297, 0.3606351077076372, 0.3387778906057917, 0.34772696804534237, 0.3357629901374635, 0.3342467742337212, 0.3349463080867029, 0.31891191285583304, 0.3198059263710868, 0.31734745265659386, 0.31098889628689225, 0.31010523716362004, 0.2993249593984339, 0.29921598811395855, 0.29155479005661306, 0.28586335007650915], "accuracy": [0.15176330506801605, 0.34500065445899963, 0.4519878625869751, 0.5363888740539551, 0.6299035549163818, 0.6645092964172363, 0.687887966632843, 0.6985867023468018, 0.7180029153823853, 0.7281733155250549, 0.7366266250610352, 0.7478536367416382, 0.7572315335273743, 0.7561748623847961, 0.767930269241333, 0.7738739848136902, 0.7795535326004028, 0.7884030938148499, 0.7915731072425842, 0.7997622489929199, 0.7991018295288086, 0.8047813773155212, 0.8083476424217224, 0.8148196935653687, 0.8206313848495483, 0.8274996876716614, 0.8244617581367493, 0.832650899887085, 0.8362171649932861, 0.8341038227081299, 0.8364813327789307, 0.8477083444595337, 0.8448025584220886, 0.8510104417800903, 0.8531237840652466, 0.8568220734596252, 0.8561616539955139, 0.8582749962806702, 0.8650112152099609, 0.8619733452796936, 0.8664641380310059, 0.8651432991027832, 0.8683133125305176, 0.8692378997802734, 0.8739928603172302, 0.8710870146751404, 0.8776912093162537, 0.8721436858177185, 0.8824461698532104, 0.8767666220664978, 0.8762382864952087, 0.882710337638855, 0.8813894987106323, 0.8854840993881226, 0.8870691061019897, 0.8879936337471008, 0.8930128216743469], "val_loss": [1.9027258328029089, 1.6240743568965368, 0.9473504338945661, 0.7760155711855207, 0.7068514823913574, 0.6506176846367973, 0.6009001561573574, 0.5793232917785645, 0.5592859472547259, 0.5541759729385376, 0.5325237342289516, 0.5122449568339756, 0.5012127331324986, 0.4861139399664743, 0.4733578988483974, 0.46585679054260254, 0.4623595305851528, 0.4462123428072248, 0.43614931617464336, 0.42440313952309744, 0.4151709335190909, 0.40914624077933176, 0.40428632497787476, 0.3996469293321882, 0.3923561913626535, 0.3812901633126395, 0.3808877638408116, 0.3795467359679086, 0.37682890040533884, 0.3701713000025068, 0.3649197050503322, 0.3647150312151228, 0.35577623333249775, 0.3549688032695225, 0.354341242994581, 0.3504766310964312, 0.35087344476154875, 0.345590923513685, 0.34465084757123676, 0.3417688012123108, 0.341824540070125, 0.34046688250132967, 0.3384720853396824, 0.333746143749782, 0.33090671471187044, 0.33261680603027344, 0.3309993488448007, 0.3305410657610212, 0.3316907116344997, 0.32890546321868896, 0.3251633048057556, 0.32344395773751394, 0.3213647518839155, 0.3241345797266279, 0.32378157547542025, 0.324915417603084, 0.31979074648448397], "val_accuracy": [0.38100001215934753, 0.4866666793823242, 0.653333306312561, 0.6809999942779541, 0.6856666803359985, 0.7210000157356262, 0.7223333120346069, 0.7366666793823242, 0.7483333349227905, 0.7583333253860474, 0.7546666860580444, 0.7683333158493042, 0.7760000228881836, 0.784333348274231, 0.7866666913032532, 0.7903333306312561, 0.7950000166893005, 0.79666668176651, 0.8063333630561829, 0.8130000233650208, 0.8176666498184204, 0.812333345413208, 0.8233333230018616, 0.8266666531562805, 0.8259999752044678, 0.8379999995231628, 0.8373333215713501, 0.8316666483879089, 0.8413333296775818, 0.843666672706604, 0.8433333039283752, 0.8386666774749756, 0.846666693687439, 0.8523333072662354, 0.8493333458900452, 0.8513333201408386, 0.8493333458900452, 0.8533333539962769, 0.8556666374206543, 0.8546666502952576, 0.8533333539962769, 0.8569999933242798, 0.859666645526886, 0.8533333539962769, 0.8569999933242798, 0.8606666922569275, 0.8579999804496765, 0.8603333234786987, 0.8619999885559082, 0.8616666793823242, 0.8636666536331177, 0.8686666488647461, 0.8663333058357239, 0.859666645526886, 0.8663333058357239, 0.8656666874885559, 0.8686666488647461]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 0, 0, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.7882857322692871, "mapping_values": [1, 5, 5, 3, 2, 2, 10, 10, 8, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.296532325677868, 2.2766664016516045, 2.2601795633313775, 2.239287847950474, 2.2157668937009953, 2.189054309794333, 2.1528070892529985, 2.109688127580934, 2.0555857671423516, 1.9869111309969791, 1.9133003313685326, 1.8255724045484294, 1.736551689748924, 1.6492787414553804, 1.571409710614657, 1.4844441004968385, 1.4253268899100096, 1.3572135555934692, 1.3116511310238046, 1.2571847763484763, 1.216735497079647, 1.1900025811004538, 1.152675559381846, 1.1174011489797373, 1.0992266239349664, 1.0768025195074276, 1.0530727743834805, 1.0389816200319077, 1.0133687554412214, 1.000927609459536, 0.9788295245520143, 0.974126720771719, 0.9526990414878176, 0.9379941328027545, 0.9194921742120454, 0.9160240547547739, 0.9009758156005024, 0.8942423726132738, 0.8901864616248303, 0.8796939969283243, 0.8797761886945852, 0.868336055005121, 0.8607717039972138, 0.8604336788531197, 0.8442402427474568, 0.8316453379048584, 0.8309823540790348, 0.8249981286755296, 0.8156700727647054, 0.8244964900569137, 0.8155917579141102, 0.8104304252456853, 0.8115851241898905, 0.7937640669150297, 0.7917553761049174, 0.7975853807607174, 0.7801577981122024, 0.7837372136279781, 0.7814748465125241, 0.7738269808710905, 0.7725565786122992, 0.7681845087086158, 0.7790986042547975, 0.7689076245279832, 0.7628840835591065, 0.7436687584645114, 0.7531352901282391, 0.748651773631061, 0.7349372723036124, 0.7436950652039739, 0.7387978532657238, 0.7379354604829524, 0.7305486060372905, 0.7208290014599513, 0.7273456529776781, 0.7243469509670937, 0.7166655395150956, 0.7210491595408699, 0.7204905713490996, 0.7152161103638959, 0.7109046573053812, 0.7178040154543, 0.7137678494432647, 0.7037633289718955, 0.6993156290246416, 0.7028859237543801, 0.6964197325086109, 0.6961111258742454, 0.6984699535379321, 0.6990877305433152, 0.7011770189572099, 0.6959861907992365, 0.6863762506042348, 0.686975858065399, 0.681402211490954, 0.679721440471883, 0.6773839419024448, 0.6731154461814554, 0.6778195493681997, 0.6748675315009447], "accuracy": [0.10460969805717468, 0.16114120185375214, 0.20433232188224792, 0.24395720660686493, 0.2863558232784271, 0.31422534584999084, 0.33800026774406433, 0.36547350883483887, 0.39004093408584595, 0.413419634103775, 0.4341566562652588, 0.4600449204444885, 0.47325319051742554, 0.4823669195175171, 0.5036323070526123, 0.525029718875885, 0.5321621894836426, 0.544181764125824, 0.5550125241279602, 0.5727116465568542, 0.5827499628067017, 0.585919976234436, 0.5967507362365723, 0.6090344786643982, 0.6115440726280212, 0.6198652982711792, 0.629111111164093, 0.6313564777374268, 0.6424514651298523, 0.6493197679519653, 0.6571126580238342, 0.6601505875587463, 0.6647734642028809, 0.6568484902381897, 0.6712455153465271, 0.6715096831321716, 0.6757363677024841, 0.6750759482383728, 0.6860388517379761, 0.6882842183113098, 0.6823405027389526, 0.6890767216682434, 0.6931713223457336, 0.6914542317390442, 0.6993792057037354, 0.7054550051689148, 0.7012283802032471, 0.703209638595581, 0.702681303024292, 0.700700044631958, 0.7049266695976257, 0.7049266695976257, 0.7014925479888916, 0.7124554514884949, 0.7046625018119812, 0.7104741930961609, 0.7172104120254517, 0.7173424959182739, 0.715889573097229, 0.7153612375259399, 0.7108704447746277, 0.7199841737747192, 0.7165499925613403, 0.7201162576675415, 0.7195879220962524, 0.7292299270629883, 0.7236824631690979, 0.7244749665260315, 0.7259278893470764, 0.7264562249183655, 0.7252674698829651, 0.7314753532409668, 0.7312111854553223, 0.7347774505615234, 0.7300224304199219, 0.7305507659912109, 0.7382115721702576, 0.7321357727050781, 0.7375511527061462, 0.7351737022399902, 0.7396644949913025, 0.735041618347168, 0.737022876739502, 0.7382115721702576, 0.7461365461349487, 0.7404569983482361, 0.7420420050621033, 0.739928662776947, 0.737947404384613, 0.743891179561615, 0.739928662776947, 0.7413815855979919, 0.7429665923118591, 0.7449478507041931, 0.7449478507041931, 0.7467969655990601, 0.7440232634544373, 0.7485140562057495, 0.7461365461349487, 0.7508915662765503], "val_loss": [1.9548162051609583, 1.9382003375462122, 1.9203495979309082, 1.8995206696646554, 1.8750087193080358, 1.844970703125, 1.807156767163958, 1.7604281561715263, 1.7032323224203927, 1.634836060660226, 1.5560449872698103, 1.469564403806414, 1.3791632992880685, 1.2908343247004919, 1.2078570638384138, 1.132777520588466, 1.067779847553798, 1.0126574380057198, 0.9659827096121651, 0.9249929700578962, 0.8906473091670445, 0.8617221968514579, 0.8359362057277134, 0.8124259029115949, 0.7934863226754325, 0.7745669398988996, 0.7593548468181065, 0.7447901623589652, 0.7313372918537685, 0.7186269419533866, 0.708462119102478, 0.6989175421851022, 0.6899569886071342, 0.6820880004337856, 0.6743085724966866, 0.6669681753431048, 0.6602848257337298, 0.6543630191258022, 0.6493796791349139, 0.6433133908680507, 0.6394011633736747, 0.634266870362418, 0.6298693759100777, 0.6255137579781669, 0.6200284787586757, 0.6155907937458583, 0.6127521991729736, 0.6079098326819283, 0.6043766736984253, 0.6014684609004429, 0.5994757584163121, 0.5952914953231812, 0.5932947397232056, 0.5906939847128732, 0.5879766089575631, 0.5851473637989589, 0.5814508199691772, 0.5786885704313006, 0.577197756086077, 0.5741426604134696, 0.5715320621218, 0.5698307241712298, 0.5675497736249652, 0.5655360051563808, 0.5625586339405605, 0.5604794025421143, 0.5586287294115339, 0.5578158242361886, 0.5571256535393851, 0.554705125944955, 0.5516766650336129, 0.5525239195142474, 0.5475779601505825, 0.5461310829435077, 0.5450522388730731, 0.5429357801164899, 0.5413614170891898, 0.5406149114881244, 0.5398719481059483, 0.5371582337788173, 0.5351900373186383, 0.5340607166290283, 0.5331031424658639, 0.5320801224027362, 0.5295656749180385, 0.5283818244934082, 0.528088024684361, 0.5270423548562186, 0.5245922292981829, 0.5243910891669137, 0.5230535439082554, 0.5223783084324428, 0.5206159012658256, 0.5188415561403547, 0.5198261737823486, 0.5174579450062343, 0.5165008136204311, 0.5144456624984741, 0.5134406770978656, 0.5130095822470528], "val_accuracy": [0.15933333337306976, 0.30033332109451294, 0.3683333396911621, 0.38999998569488525, 0.4243333339691162, 0.44699999690055847, 0.46700000762939453, 0.49566665291786194, 0.5183333158493042, 0.5393333435058594, 0.5523333549499512, 0.5696666836738586, 0.5796666741371155, 0.5870000123977661, 0.6169999837875366, 0.6299999952316284, 0.6476666927337646, 0.6589999794960022, 0.6696666479110718, 0.668666660785675, 0.6759999990463257, 0.6790000200271606, 0.6850000023841858, 0.6886666417121887, 0.6949999928474426, 0.6959999799728394, 0.6926666498184204, 0.6963333487510681, 0.7086666822433472, 0.706333339214325, 0.7136666774749756, 0.7139999866485596, 0.7153333425521851, 0.7193333506584167, 0.7193333506584167, 0.7239999771118164, 0.7250000238418579, 0.7303333282470703, 0.7283333539962769, 0.7293333411216736, 0.7289999723434448, 0.7316666841506958, 0.7316666841506958, 0.7356666922569275, 0.7379999756813049, 0.7350000143051147, 0.7393333315849304, 0.7393333315849304, 0.7409999966621399, 0.7426666617393494, 0.7403333187103271, 0.7476666569709778, 0.7459999918937683, 0.7490000128746033, 0.7486666440963745, 0.7506666779518127, 0.7493333220481873, 0.7519999742507935, 0.7516666650772095, 0.749666690826416, 0.7526666522026062, 0.7546666860580444, 0.7553333044052124, 0.7573333382606506, 0.7599999904632568, 0.7603333592414856, 0.7613333463668823, 0.7580000162124634, 0.7576666474342346, 0.7593333125114441, 0.7633333206176758, 0.7609999775886536, 0.765333354473114, 0.765333354473114, 0.7670000195503235, 0.7649999856948853, 0.7670000195503235, 0.7676666378974915, 0.7673333287239075, 0.7699999809265137, 0.7699999809265137, 0.7696666717529297, 0.7713333368301392, 0.7699999809265137, 0.7710000276565552, 0.7723333239555359, 0.7699999809265137, 0.7733333110809326, 0.7753333449363708, 0.7706666588783264, 0.7743333578109741, 0.7753333449363708, 0.7733333110809326, 0.7756666541099548, 0.7760000228881836, 0.7773333191871643, 0.7756666541099548, 0.7749999761581421, 0.7756666541099548, 0.7766666412353516]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 31, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 5, 0, 2, 0, 8, 5, 9, 0], [1, 0, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [63, 57]], "fitness": -0.7737143039703369, "mapping_values": [1, 6, 6, 5, 1, 2, 9, 9, 6, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))), tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.256714153724371, 1.7979615411706777, 1.2495946689225805, 0.9424570396339825, 0.8434683589210379, 0.7954402151770359, 0.7595083574656057, 0.7186594219208393, 0.6796902555909847, 0.642370236430107, 0.6256417197999135, 0.600302578664144, 0.5760347542352113, 0.564127438418885, 0.5571040245819369, 0.5398220543013651, 0.5201767557222515, 0.5248074679956649, 0.508804052111621, 0.5001491643080008, 0.4865001599550279, 0.4830840320209896, 0.4745250354865287, 0.4552775611966876, 0.4582180837008144, 0.45251582858348643, 0.4433461598251883, 0.43056442410151374, 0.42618454229704156, 0.43178338001763517, 0.40898941703885694, 0.41437786908087365, 0.4146917899877419, 0.4067700549737731, 0.409277841533416, 0.3951669854494905, 0.3994101401900162, 0.39686258251184264, 0.38104529520775965, 0.38731362369428646, 0.3765880071318554, 0.3648986655172182, 0.365745011030675, 0.3725809923779963, 0.36339368318774523, 0.36373176005191776, 0.3563792758795091, 0.36226795110106075, 0.3622977395437775, 0.34345346650647735, 0.35443221032816297, 0.3499931732677056, 0.34993288624776336, 0.34347798375248234], "accuracy": [0.19918107986450195, 0.439439982175827, 0.5688812732696533, 0.6568484902381897, 0.6812838315963745, 0.6930392384529114, 0.7059833407402039, 0.7197200059890747, 0.7314753532409668, 0.7495707273483276, 0.7601373791694641, 0.7646281719207764, 0.7757231593132019, 0.7786290049552917, 0.7799497842788696, 0.7873464822769165, 0.7947431206703186, 0.789988100528717, 0.805177628993988, 0.805177628993988, 0.8117818236351013, 0.8133667707443237, 0.8150838613510132, 0.8220842480659485, 0.8215559124946594, 0.8212917447090149, 0.8248580098152161, 0.8298771381378174, 0.8319904804229736, 0.8284242749214172, 0.8429533839225769, 0.8401796221733093, 0.8367455005645752, 0.8428213000297546, 0.8418967127799988, 0.843481719493866, 0.8363492488861084, 0.8412362933158875, 0.8496896028518677, 0.8479725122451782, 0.852331280708313, 0.8560295701026917, 0.8543124794960022, 0.846387505531311, 0.8541803956031799, 0.8557654023170471, 0.856689989566803, 0.8574824929237366, 0.8594637513160706, 0.8607845902442932, 0.8610487580299377, 0.8626337051391602, 0.8636903762817383, 0.8646149635314941], "val_loss": [1.8055480548313685, 0.9252535956246513, 0.7057162012372699, 0.6257568768092564, 0.6096955026899066, 0.6008755309241158, 0.5604299136570522, 0.5368948323386056, 0.5143964120319912, 0.49699154921940397, 0.4883876698357718, 0.46983563899993896, 0.45289032799857004, 0.4413498980658395, 0.4371569667543684, 0.4336760384695871, 0.42387583426066805, 0.41517840112958637, 0.40882180418287006, 0.4034931829997471, 0.4004583954811096, 0.3912108199937003, 0.392465455191476, 0.3888455884797232, 0.38454817874091013, 0.3766523429325649, 0.3740824886730739, 0.3719560333660671, 0.3717887657029288, 0.3674088546207973, 0.37431730542864117, 0.3578433649880545, 0.3555548701967512, 0.3587687611579895, 0.36108135325568064, 0.351600570338113, 0.35984322854450773, 0.3491307326725551, 0.35686502286366056, 0.3541434236935207, 0.3498872433389936, 0.3482917972973415, 0.3475721393312727, 0.34413245746067594, 0.35163283348083496, 0.3473462462425232, 0.35437301227024626, 0.34032825912748066, 0.34389915636607576, 0.3437583191054208, 0.3437822035380772, 0.34896611315863474, 0.33944753238133024, 0.3471534252166748], "val_accuracy": [0.4480000138282776, 0.6456666588783264, 0.7066666483879089, 0.718999981880188, 0.7173333168029785, 0.7333333492279053, 0.7523333430290222, 0.7519999742507935, 0.7760000228881836, 0.7786666750907898, 0.7860000133514404, 0.7933333516120911, 0.7979999780654907, 0.7986666560173035, 0.8050000071525574, 0.800000011920929, 0.8100000023841858, 0.815666675567627, 0.8233333230018616, 0.8220000267028809, 0.828000009059906, 0.8293333053588867, 0.8323333263397217, 0.8333333134651184, 0.8323333263397217, 0.840666651725769, 0.8450000286102295, 0.8443333506584167, 0.8426666855812073, 0.8433333039283752, 0.8433333039283752, 0.8460000157356262, 0.8533333539962769, 0.8536666631698608, 0.8519999980926514, 0.8489999771118164, 0.8446666598320007, 0.8556666374206543, 0.8569999933242798, 0.8573333621025085, 0.8553333282470703, 0.8553333282470703, 0.8573333621025085, 0.8576666712760925, 0.8539999723434448, 0.8529999852180481, 0.8519999980926514, 0.8553333282470703, 0.862333357334137, 0.8560000061988831, 0.8526666760444641, 0.8610000014305115, 0.8519999980926514, 0.8539999723434448]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [6, 9, 1, 9, 3, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [15, 57]], "fitness": -0.5657142996788025, "mapping_values": [1, 5, 5, 3, 2, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030034375937074, 2.298839599638095, 2.2985163046746537, 2.2962317701973824, 2.294050398472514, 2.293414239696996, 2.2901058841957753, 2.2891843893335575, 2.287669792371797, 2.2840192449280234, 2.282845075434981, 2.2801683969375497, 2.278864629170079, 2.2749179739757475, 2.2754953297736105, 2.2717605590064527, 2.271791001541456, 2.2673561912816766, 2.2672287098342054, 2.2640361164885583, 2.2615933093286507, 2.2606745862123154, 2.2554321828503823, 2.254155838730439, 2.2537040201554195, 2.2513129753034193, 2.2502605842955123, 2.247028671030859, 2.2446340536476046, 2.2421855023665875, 2.2400394549789904, 2.236971885426453, 2.234078687526263, 2.2306333839334376, 2.2272752728901204, 2.2262693201593358, 2.223301935473044, 2.220430878127933, 2.219001288742138, 2.2149864270655297, 2.2102922686590825, 2.2105128449881004, 2.2062530645116794, 2.2025205116891717, 2.1985908091863418, 2.19405238623034, 2.189374258772981, 2.189285577107194, 2.1850076087351566, 2.1808628998160473, 2.176912789048142, 2.1739686997244467, 2.1706145505044816, 2.163315990455808, 2.1589339568614645, 2.1571905624597236, 2.150771597735146, 2.146191207283382, 2.145959223833035, 2.1390264190151833, 2.132009881252248, 2.1275784268969353, 2.1239390452902285, 2.1176565334608273, 2.1154112697135754, 2.105815306756601, 2.101816987348916, 2.0962358449097747, 2.0893948338271415, 2.0822291709586, 2.0791921351075944, 2.072697362753662, 2.062800511991375, 2.0558458667279487, 2.0503759056963484, 2.04323946864393, 2.0378409240381545, 2.029026169456338, 2.0233164370855117, 2.013039506295763, 2.0079760471465424, 2.0046208102894245, 1.9951401181649917, 1.986736474224857, 1.9775986718684297, 1.9684446591900135, 1.9586509415470708, 1.9491279173079987, 1.9421843284345683, 1.9323165015521822, 1.927999248373636, 1.916270936437649, 1.907400116015419, 1.898526463715187, 1.8872662227167318, 1.879104795598902, 1.869013614721302, 1.8553266419301242, 1.8501351436588034, 1.8378660090611108], "accuracy": [0.09192973375320435, 0.10289261490106583, 0.10381719470024109, 0.10302469879388809, 0.11174217611551285, 0.11398758739233017, 0.12481838464736938, 0.1254788041114807, 0.12851670384407043, 0.13974376022815704, 0.14542332291603088, 0.15374454855918884, 0.15453705191612244, 0.1608770340681076, 0.15863162279129028, 0.16682076454162598, 0.16840575635433197, 0.18518029153347015, 0.186104878783226, 0.19759608805179596, 0.20274733006954193, 0.2016906589269638, 0.21872936189174652, 0.21635186672210693, 0.2207106053829193, 0.21925769746303558, 0.21754062175750732, 0.2250693440437317, 0.23484347760677338, 0.2432967871427536, 0.2475234419107437, 0.2584863305091858, 0.2534671723842621, 0.2620525658130646, 0.2642979919910431, 0.26799631118774414, 0.270109623670578, 0.27618545293807983, 0.2728833854198456, 0.2879408299922943, 0.2930920720100403, 0.2845066785812378, 0.29745081067085266, 0.3008849620819092, 0.3074890971183777, 0.3156782388687134, 0.3249240517616272, 0.3131686747074127, 0.3163386583328247, 0.325320303440094, 0.3280940353870392, 0.3276977837085724, 0.3354906737804413, 0.3419627547264099, 0.34420815110206604, 0.334169864654541, 0.35041606426239014, 0.351340651512146, 0.3461894094944, 0.35807687044143677, 0.36283186078071594, 0.3625676929950714, 0.3681151866912842, 0.36943599581718445, 0.3599260449409485, 0.3700964152812958, 0.37141725420951843, 0.37062475085258484, 0.37564390897750854, 0.3870030343532562, 0.381719708442688, 0.3879276216030121, 0.3949280083179474, 0.39690926671028137, 0.395720511674881, 0.4007396697998047, 0.40166425704956055, 0.4033813178539276, 0.40509840846061707, 0.40681546926498413, 0.40866464376449585, 0.4087967276573181, 0.4041738212108612, 0.409721314907074, 0.4181746244430542, 0.4171179533004761, 0.4105137884616852, 0.4251750111579895, 0.42425042390823364, 0.43085458874702454, 0.42543917894363403, 0.43230748176574707, 0.4364020526409149, 0.4360058009624481, 0.4379870593547821, 0.4395720660686493, 0.44168537855148315, 0.44630828499794006, 0.44908201694488525, 0.45845991373062134], "val_loss": [1.969369615827288, 1.9675147192818778, 1.9656927245003837, 1.9638495445251465, 1.9620298658098494, 1.9602293287004744, 1.9584236145019531, 1.9566081592014857, 1.9548029218401228, 1.952972071511405, 1.9511472157069616, 1.9492979730878557, 1.9474550655909948, 1.9456148828778947, 1.9437452725001745, 1.9418747084481376, 1.9400050299508231, 1.9380873952593123, 1.9361790248325892, 1.9342338017054967, 1.9322686195373535, 1.9302833420889718, 1.9282357352120536, 1.9261395590645927, 1.924050739833287, 1.9219237736293249, 1.9197697639465332, 1.9175722258431571, 1.9153447832380022, 1.9130796704973494, 1.9107600620814733, 1.908409799848284, 1.906006131853376, 1.9035499436514718, 1.901014736720494, 1.898470742361886, 1.8958693913051061, 1.8932278496878487, 1.8905014991760254, 1.8877076421465193, 1.8848333358764648, 1.8819354602268763, 1.8789548873901367, 1.8759004047938757, 1.8727659497942244, 1.8695300647190638, 1.8662139347621374, 1.8628367696489607, 1.8593663488115584, 1.855823040008545, 1.8521810259137834, 1.8484552928379603, 1.8446369852338518, 1.8407038961138045, 1.836646216256278, 1.8325582912990026, 1.8282577650887626, 1.8238963399614607, 1.8194898196629115, 1.8149373190743583, 1.8102242606026786, 1.8054183551243372, 1.8005409240722656, 1.7955602237156458, 1.7904493468148368, 1.785201072692871, 1.7798352922712053, 1.7743584769112724, 1.7686808449881417, 1.7629036903381348, 1.7570256505693709, 1.7510525839669364, 1.7448342868259974, 1.738457475389753, 1.7320122037615096, 1.725409712110247, 1.7187024525233678, 1.7118244171142578, 1.7048450197492326, 1.6976889542170934, 1.690448454448155, 1.683091061455863, 1.6755570343562536, 1.6679042407444544, 1.6600865295955114, 1.6520859854561942, 1.6439976011003767, 1.6357077189854212, 1.6273574829101562, 1.6188017981392997, 1.6102351120540075, 1.6014940398080009, 1.592639344079154, 1.5837137699127197, 1.5745529106685094, 1.5653987952641077, 1.5560370513371058, 1.546516043799264, 1.5369665963309151, 1.5273914337158203], "val_accuracy": [0.05233333259820938, 0.06199999898672104, 0.07133333384990692, 0.08666666597127914, 0.0963333323597908, 0.11266666650772095, 0.12800000607967377, 0.1446666717529297, 0.1589999943971634, 0.17866666615009308, 0.19633333384990692, 0.21566666662693024, 0.23266667127609253, 0.24533332884311676, 0.2590000033378601, 0.27799999713897705, 0.2916666567325592, 0.3023333251476288, 0.31200000643730164, 0.32366666197776794, 0.3306666612625122, 0.3400000035762787, 0.3453333377838135, 0.35366666316986084, 0.35633334517478943, 0.359333336353302, 0.3623333275318146, 0.367000013589859, 0.36899998784065247, 0.37299999594688416, 0.37533333897590637, 0.3779999911785126, 0.382999986410141, 0.3869999945163727, 0.39133334159851074, 0.3946666717529297, 0.39766666293144226, 0.40166667103767395, 0.4050000011920929, 0.4090000092983246, 0.41333332657814026, 0.41733333468437195, 0.42133334279060364, 0.4259999990463257, 0.4283333420753479, 0.43166667222976685, 0.4326666593551636, 0.4350000023841858, 0.4386666715145111, 0.44066667556762695, 0.44466665387153625, 0.44733333587646484, 0.45133334398269653, 0.45366665720939636, 0.4556666612625122, 0.4573333263397217, 0.4596666693687439, 0.46166667342185974, 0.4650000035762787, 0.4673333466053009, 0.4716666638851166, 0.4749999940395355, 0.4790000021457672, 0.4833333194255829, 0.484333336353302, 0.4866666793823242, 0.4909999966621399, 0.49399998784065247, 0.4959999918937683, 0.49799999594688416, 0.49900001287460327, 0.5036666393280029, 0.5073333382606506, 0.5096666812896729, 0.512666642665863, 0.5146666765213013, 0.5176666378974915, 0.5226666927337646, 0.5239999890327454, 0.5276666879653931, 0.531000018119812, 0.5339999794960022, 0.5360000133514404, 0.5373333096504211, 0.5396666526794434, 0.5403333306312561, 0.5419999957084656, 0.5446666479110718, 0.5460000038146973, 0.5463333129882812, 0.5460000038146973, 0.5479999780654907, 0.5486666560173035, 0.5509999990463257, 0.5543333292007446, 0.5546666383743286, 0.5576666593551636, 0.559333324432373, 0.5609999895095825, 0.562333345413208]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [1, 0, 3, 0, 3, 0, 2, 5, 2], [38, 31, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [15, 57]], "fitness": -0.5631428360939026, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303015695130269, 2.2988816955542726, 2.2985873575995326, 2.2963318284696923, 2.2941795352459144, 2.2935717036585217, 2.2902926050550696, 2.2894016823764205, 2.28791806165962, 2.2843020357208292, 2.2831569300855485, 2.2805175132849715, 2.2792453555823977, 2.275331585965593, 2.275947051072842, 2.2722485296289445, 2.2723102665627715, 2.2679219092864242, 2.267827582853723, 2.264681218653276, 2.262280903283269, 2.2614035552219707, 2.2562257877320127, 2.254999189675366, 2.254586868187881, 2.2522477932641407, 2.251249068133851, 2.2480838514511157, 2.2457453626384036, 2.243364833302234, 2.2412860102861973, 2.238290111134632, 2.235469255811424, 2.2321080365090906, 2.22884087861096, 2.2278993481485014, 2.22501416736039, 2.2222308336294967, 2.220898035132827, 2.216984943580854, 2.2124100367564092, 2.212704284048477, 2.2085735505645334, 2.204952021064602, 2.201166918815922, 2.1967731214328574, 2.1922429725557286, 2.192246400007813, 2.1881282128646564, 2.184131418032149, 2.1803629198692827, 2.177552755120534, 2.174380423858606, 2.1672962754236598, 2.1631050779992376, 2.161501149459837, 2.1553753678509904, 2.1509859155370985, 2.150894275068717, 2.144221312586248, 2.137491372598082, 2.133283429630145, 2.1298382343664586, 2.1238356932137603, 2.121826704388297, 2.1125668361753505, 2.1088170665775734, 2.103525886729629, 2.0970873074713574, 2.090198517947889, 2.0874845866655645, 2.081259990648555, 2.071832917322651, 2.065296988681858, 2.0601006949251794, 2.053379312939002, 2.0483127500969642, 2.039922137758625, 2.0345053805997577, 2.0247569622978983, 2.0200017166175486, 2.0169356000925713, 2.00795405080463, 1.9999741547773102, 1.9913403231312554, 1.9826803251327445, 1.9733529241093555, 1.9643225477135744, 1.9577014792187497, 1.9484616270816053, 1.944381012467503, 1.9331534788073519, 1.92476803200545, 1.916301046553352, 1.9056148925997152, 1.897797209617248, 1.8883044778741724, 1.8752667503176805, 1.870365197900075, 1.8584079021129625], "accuracy": [0.09179764986038208, 0.10289261490106583, 0.10368511080741882, 0.10302469879388809, 0.11134592443704605, 0.11372341960668564, 0.12415797263383865, 0.12481838464736938, 0.1278562992811203, 0.13921542465686798, 0.14515915513038635, 0.15242372453212738, 0.15242372453212738, 0.15995244681835175, 0.15797120332717896, 0.16523577272891998, 0.1670849323272705, 0.18359529972076416, 0.18412363529205322, 0.19601109623908997, 0.19997358322143555, 0.1990489959716797, 0.21701228618621826, 0.21397437155246735, 0.21793685853481293, 0.216880202293396, 0.21595561504364014, 0.22361643612384796, 0.23378682136535645, 0.24157971143722534, 0.24580636620521545, 0.2561088502407074, 0.25056135654449463, 0.2599392533302307, 0.26297715306282043, 0.26482629776000977, 0.26839256286621094, 0.2747325301170349, 0.270109623670578, 0.2860916554927826, 0.29163914918899536, 0.28358209133148193, 0.2946770489215851, 0.2975828945636749, 0.3059041202068329, 0.3139611780643463, 0.32082948088645935, 0.31145158410072327, 0.3144895136356354, 0.3222824037075043, 0.32505613565444946, 0.32465988397598267, 0.33139610290527344, 0.3387927711009979, 0.3409060835838318, 0.33047154545783997, 0.3477744162082672, 0.3467177450656891, 0.3431515097618103, 0.35583147406578064, 0.35926562547683716, 0.3603222966194153, 0.36520934104919434, 0.36824727058410645, 0.35583147406578064, 0.3663980960845947, 0.3679831027984619, 0.3691718280315399, 0.37247392535209656, 0.38488972187042236, 0.37802138924598694, 0.38541802763938904, 0.39228636026382446, 0.3933430314064026, 0.39189010858535767, 0.3975696861743927, 0.39981508255004883, 0.401400089263916, 0.4023246467113495, 0.4031171500682831, 0.40404173731803894, 0.40549466013908386, 0.4006075859069824, 0.4072117209434509, 0.4143442213535309, 0.4143442213535309, 0.40826839208602905, 0.42187294363975525, 0.42147669196128845, 0.42808082699775696, 0.4225333631038666, 0.42926958203315735, 0.43270373344421387, 0.43309998512268066, 0.4336283206939697, 0.43666622042655945, 0.4377228915691376, 0.4414212107658386, 0.44630828499794006, 0.45528993010520935], "val_loss": [1.9693972723824638, 1.9675702367510115, 1.9657744680132185, 1.963959080832345, 1.9621666499546595, 1.9603939056396484, 1.9586168016706194, 1.9568307059151786, 1.95505462374006, 1.9532537460327148, 1.9514586584908622, 1.9496419770377023, 1.947831085750035, 1.9460223061697823, 1.9441876411437988, 1.9423527717590332, 1.940518583570208, 1.9386374609810966, 1.93676723752703, 1.9348627499171667, 1.932941164289202, 1.9309999602181571, 1.9289982659476144, 1.9269510677882604, 1.9249110903058733, 1.9228346688406808, 1.9207348142351424, 1.9185926573617118, 1.916423729487828, 1.914220196860177, 1.911966323852539, 1.9096814564296178, 1.907345908028739, 1.9049653325762068, 1.902508054460798, 1.9000392641339983, 1.8975230625697546, 1.894970485142299, 1.8923355511256628, 1.8896378789629256, 1.8868637766156877, 1.8840712819780623, 1.8812018121991838, 1.8782646996634347, 1.8752532005310059, 1.8721465383257185, 1.8689656938825334, 1.8657266071864538, 1.8624059132167272, 1.8590129443577357, 1.855529512677874, 1.851970604487828, 1.8483161245073592, 1.8445611681256975, 1.8406901359558105, 1.8367975779942103, 1.832699980054583, 1.8285463878086634, 1.824347700391497, 1.8200069155011858, 1.8155244418552943, 1.8109581811087472, 1.8063276835850306, 1.8015960965837752, 1.796743665422712, 1.791764191218785, 1.7866811752319336, 1.781491483960833, 1.7761195727757044, 1.7706566538129533, 1.7651000022888184, 1.759451253073556, 1.7535751887730189, 1.74755825315203, 1.7414703369140625, 1.7352391651698522, 1.7289089475359236, 1.722416537148612, 1.7158297470637731, 1.709087814603533, 1.7022583825247628, 1.695314986365182, 1.688211441040039, 1.680997473852975, 1.6736263547624861, 1.6660833699362618, 1.6584538732256209, 1.650635072163173, 1.6427526814596993, 1.6346770014081682, 1.6265819753919328, 1.6183134487697057, 1.6099401882716589, 1.6014994553157262, 1.592818089893886, 1.584137201309204, 1.5752627508980888, 1.5662392207554408, 1.5571716172354562, 1.5480598040989466], "val_accuracy": [0.052000001072883606, 0.061666667461395264, 0.07066666334867477, 0.08566666394472122, 0.0949999988079071, 0.10999999940395355, 0.12733332812786102, 0.14266666769981384, 0.15733332931995392, 0.17666666209697723, 0.19233334064483643, 0.20999999344348907, 0.2290000021457672, 0.24133333563804626, 0.2553333342075348, 0.27533334493637085, 0.289000004529953, 0.2993333339691162, 0.3083333373069763, 0.32100000977516174, 0.32733333110809326, 0.33933332562446594, 0.3423333466053009, 0.351666659116745, 0.3553333282470703, 0.35899999737739563, 0.36033332347869873, 0.36500000953674316, 0.3683333396911621, 0.37066665291786194, 0.37433332204818726, 0.3763333261013031, 0.3803333342075348, 0.3856666684150696, 0.3889999985694885, 0.39266666769981384, 0.3970000147819519, 0.39933332800865173, 0.40299999713897705, 0.40533334016799927, 0.41066667437553406, 0.41366666555404663, 0.41966667771339417, 0.42233332991600037, 0.4269999861717224, 0.4300000071525574, 0.4320000112056732, 0.4336666762828827, 0.4363333284854889, 0.43833333253860474, 0.44200000166893005, 0.44433334469795227, 0.4480000138282776, 0.45133334398269653, 0.45366665720939636, 0.4556666612625122, 0.45633333921432495, 0.4593333303928375, 0.4633333384990692, 0.4650000035762787, 0.46700000762939453, 0.4723333418369293, 0.4740000069141388, 0.47866666316986084, 0.48100000619888306, 0.48366665840148926, 0.4856666624546051, 0.49000000953674316, 0.4950000047683716, 0.49566665291786194, 0.49666666984558105, 0.49933332204818726, 0.503333330154419, 0.5059999823570251, 0.5070000290870667, 0.5096666812896729, 0.5136666893959045, 0.5163333415985107, 0.5193333625793457, 0.5226666927337646, 0.5256666541099548, 0.5303333401679993, 0.531000018119812, 0.5350000262260437, 0.5373333096504211, 0.5376666784286499, 0.5406666398048401, 0.5416666865348816, 0.5426666736602783, 0.5450000166893005, 0.5456666946411133, 0.5450000166893005, 0.54666668176651, 0.5479999780654907, 0.5493333339691162, 0.5516666769981384, 0.5529999732971191, 0.5556666851043701, 0.5576666593551636, 0.5586666464805603]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [6, 2, 0, 2, 2, 8, 5, 9, 0], [1, 3, 0, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [3, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.43857142329216003, "mapping_values": [1, 5, 5, 3, 2, 1, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2613572114494263, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2226918488740921, 0.1604807823896408, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.185051236833845, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.18433333933353424, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [41, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 0, 2, 0, 3, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [56, 0, 47], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4, 0], [1, 0, 0, 1, 0, 3], [35, 62, 35]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 12, 12, 8, 4, 2, 3, 2, 1, 1, 0, 13, 8, 5, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.negative(tf.math.multiply(alpha, tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), grad)), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), alpha))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 8, 0, 2, 6, 5, 1, 9], [1, 4, 3, 0, 0], [9, 2, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 2, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [6, 4, 2, 5, 6, 3, 5, 9, 2], [1, 0, 3, 0, 3, 0, 2, 5, 2], [38, 83, 8], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [15, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 10, 10, 5, 5, 2, 1, 1, 0, 1, 0, 8, 4, 4, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.302978574450242, 2.3025841534082616, 2.3025856072230977, 2.302588687266152, 2.3025858211731474, 2.3025865671326375], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736451421465193, 1.973644733428955, 1.9736416680472237, 1.9736389432634627, 1.9736342430114746, 1.973630632672991], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 1, 6, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 2, 2, 0, 2, 9, 9, 0], [1, 1, 3, 3, 3, 0, 2, 5, 2], [56, 40, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 9, 4, 2, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(alpha)))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3131261678372455, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08281600475311279, 0.09760929644107819, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.02960661479405, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 0, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 1, 3], [63, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 12, 12, 9, 3, 1, 1, 1, 0, 1, 0, 10, 6, 4, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 6, 1, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 31, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [6, 9, 0, 2, 6, 8, 5, 9, 0], [1, 0, 3, 0, 3, 0, 2, 5, 2], [13, 87, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 2], [15, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 9, 9, 6, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 5, 0, 3, 1, 2, 5, 9, 0], [3, 4, 0, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [324425844.51744527, 6105087435.31898, 28766675749.025494, 78451520099.8843, 169564001254.1667, 312062861185.40326], "accuracy": [0.09721305221319199, 0.09642054885625839, 0.09602430462837219, 0.10672302544116974, 0.09708096832036972, 0.09708096832036972], "val_loss": [1231427949.7142856, 9846805065.142857, 33227882496.0, 78755629348.57143, 153812374089.14285, 265779487890.2857], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 9, 5, 2, 7], [0, 4, 3, 0, 3, 4], [56, 20, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(grad))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.899949486922311, 44165.92346126056, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.16549994051456451, 0.13881917297840118, 0.09840179979801178, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.0430060795375278, 1966790078889984.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.10000000149011612, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 5, 0, 2, 1, 8, 5, 9, 0], [0, 0, 3, 0, 0], [9, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 8, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [58, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 5, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 2, 0, 2, 8, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [96, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [2, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 8, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 11, 11, 8, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(beta), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]