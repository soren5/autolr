[{"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.8274285793304443, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), grad), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9668819186961757, 1.3897469204493391, 1.0149983553728328, 0.8966253148235618, 0.8374969853527904, 0.7697343240167172, 0.7306643649335425, 0.7036702970960247, 0.6955624221968156, 0.6817951529112002, 0.6395214451475701, 0.6408320181421112, 0.6395248776697101, 0.5970682014862875, 0.6117987792253525, 0.589974355121346, 0.5813934705623026, 0.5768130107987842, 0.5692671053933273, 0.541121122741334, 0.5573810943365569, 0.5224971445111267, 0.5551636981737376, 0.5148229353526453, 0.5027276006837358, 0.4924723009793293, 0.5059131038006286, 0.4879965010753413, 0.48748926892965194, 0.484102714212894, 0.460366856865265, 0.46719611370095865], "accuracy": [0.34301942586898804, 0.522520124912262, 0.629111111164093, 0.6629242897033691, 0.6754721999168396, 0.7117950320243835, 0.7209087014198303, 0.7280412316322327, 0.7308149337768555, 0.7427024245262146, 0.7534011602401733, 0.7561748623847961, 0.7540615797042847, 0.7754589915275574, 0.7721568942070007, 0.7759873270988464, 0.7839123010635376, 0.7844406366348267, 0.7836481332778931, 0.7968564033508301, 0.7943468689918518, 0.8047813773155212, 0.7932901978492737, 0.8080834746360779, 0.8128384351730347, 0.8142913579940796, 0.806630551815033, 0.819442629814148, 0.8201030492782593, 0.821820080280304, 0.8302733898162842, 0.8277638554573059], "val_loss": [1.5951106207711356, 0.9009499209267753, 0.6817557982036045, 0.729585085596357, 0.6039407253265381, 0.6757300921848842, 0.5494132552828107, 0.5762190989085606, 0.580984081540789, 0.5111911467143467, 0.5447969266346523, 0.5513680151530674, 0.48929968902042936, 0.5362835100718907, 0.49605504104069303, 0.4808208772114345, 0.48735896178654264, 0.45692319529397146, 0.4635965313230242, 0.4695924861090524, 0.4445523534502302, 0.5145342350006104, 0.4246071321623666, 0.42652701480048044, 0.418477509702955, 0.42941492795944214, 0.4043181283133371, 0.41723800557000296, 0.4073223727090018, 0.40147661311285837, 0.39742164952414377, 0.3956871713910784], "val_accuracy": [0.3763333261013031, 0.5933333039283752, 0.7059999704360962, 0.6549999713897705, 0.7383333444595337, 0.6819999814033508, 0.762333333492279, 0.734666645526886, 0.7239999771118164, 0.778333306312561, 0.7486666440963745, 0.7446666955947876, 0.7836666703224182, 0.7473333477973938, 0.7710000276565552, 0.7879999876022339, 0.7706666588783264, 0.8100000023841858, 0.7856666445732117, 0.7943333387374878, 0.8113333582878113, 0.7720000147819519, 0.8180000185966492, 0.8083333373069763, 0.8199999928474426, 0.8090000152587891, 0.8299999833106995, 0.8136666417121887, 0.8289999961853027, 0.8293333053588867, 0.8289999961853027, 0.8203333616256714]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 2, 0, 2, 7, 2, 5, 9], [0, 4, 3, 3, 3, 2], [24, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.3100000023841858, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), grad)))), tf.math.add(beta, tf.math.add(grad, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.727079204328308, 2.30515973464987, 2.28349561232145, 2.2850012925669123, 2.256185551298104, 2.3106603231317946, 2.3038713617441977, 2.302130028461783], "accuracy": [0.23893804848194122, 0.1072513535618782, 0.13247919082641602, 0.17633073031902313, 0.13115836679935455, 0.10896842926740646, 0.09774138033390045, 0.10474177449941635], "val_loss": [1.9785379001072474, 1.9724557059151786, 1.7822504043579102, 1.9707739012581962, 1.8661509241376604, 1.9739990234375, 1.9734415326799666, 1.970926080431257], "val_accuracy": [0.09933333098888397, 0.09966666996479034, 0.3296666741371155, 0.16599999368190765, 0.2809999883174896, 0.10066666454076767, 0.10066666454076767, 0.0963333323597908]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 0, 0, 2, 0, 0, 5, 9], [0, 4, 3, 0, 3], [47, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [79, 57]], "fitness": -0.26257142424583435, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 6, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.716029632833136, 2.3052413573181307, 2.2890076362666294, 2.1858032738858557, 2.311423054082818, 2.300273312868585, 2.304378749640579, 2.303314800669315, 2.30301467954459], "accuracy": [0.2401268035173416, 0.10051512718200684, 0.12679962813854218, 0.18240654468536377, 0.11993131786584854, 0.14119666814804077, 0.09760929644107819, 0.09536388516426086, 0.09509972482919693], "val_loss": [1.979738439832415, 1.9731245722089494, 1.8284729548863001, 1.7054696083068848, 1.9402843884059362, 1.9761273520333427, 1.9741685731070382, 1.9742657797677177, 1.9738313129970007], "val_accuracy": [0.09933333098888397, 0.09966666996479034, 0.1276666671037674, 0.2540000081062317, 0.11966666579246521, 0.09966666996479034, 0.10000000149011612, 0.09799999743700027, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 5, 7, 8, 4], [3, 0, 0, 1, 3, 3], [1, 57, 72]], "fitness": -0.10542856901884079, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302809833582791, 2.303631416857912, 2.3031263605573034, 2.3012718473836777, 2.303475695987813, 2.3028010912008288, 2.302227797966119, 2.302490071692345, 2.301314722419399, 2.301274142260911, 2.3014044459028926, 2.301987634909986, 2.3011575220692757, 2.3018605727655634, 2.3004305525195123, 2.3004349173335603, 2.3005530075894023, 2.3012567923100806, 2.3005642691277055, 2.3008369296029447, 2.2996370493853964, 2.299825415052616, 2.2994475510803434, 2.299776620900138, 2.298208950658941, 2.2992768461804083, 2.2996504341118436, 2.3011586915516125, 2.2999182232398367, 2.300343455891678, 2.299967278673381, 2.2992855425224863, 2.300238809250507, 2.2985476854848605, 2.2992805250253756, 2.297350547222681, 2.2982848180897593, 2.2988668814815187, 2.2999820946670875, 2.298138803164122, 2.298820070854472, 2.298251077467818, 2.2981584365924337, 2.2975252951613316, 2.2975026318551746, 2.296526149184933, 2.2974311173662865, 2.297905163128205, 2.2986619573589864, 2.2972093163826495, 2.297550309713664, 2.296764392421986, 2.2969478348447443, 2.295742337163004, 2.2973323454080306, 2.296911933213933, 2.296598816623368, 2.294885845484121, 2.29689598294486, 2.295320255125613, 2.295479552116943, 2.2957976928807176, 2.2944165277852675, 2.29443824267611, 2.2959444424920568, 2.294302563987876, 2.29532736740596, 2.2965608856476782, 2.293287396446715, 2.2931717034454406, 2.2949385451854827, 2.2945778980829523, 2.29391294198974, 2.2945177563586805, 2.293211089086224, 2.294798421633006, 2.2931393812109278, 2.2923973673574993, 2.293898261124038, 2.293670891298358, 2.2928057610949253, 2.2926749750418733, 2.2935845392444083, 2.2956969763829234, 2.292698894966044, 2.292550474346243, 2.292581485829664, 2.2921617185718364, 2.292521919761399, 2.291691856802478, 2.291306550555367, 2.291685798621338, 2.291511577968474, 2.2931922607890463, 2.292251509509114, 2.2916066327256894, 2.2920495761210784, 2.2910468253981024, 2.2915606315125565, 2.2911323613935317], "accuracy": [0.09140139818191528, 0.0870426595211029, 0.08889182657003403, 0.0952318087220192, 0.09417514503002167, 0.0944393053650856, 0.08849557489156723, 0.09047681838274002, 0.0944393053650856, 0.09536388516426086, 0.09338264167308807, 0.09008057415485382, 0.09721305221319199, 0.09853387624025345, 0.09708096832036972, 0.09430722147226334, 0.0940430611371994, 0.09668471664190292, 0.09377889335155487, 0.09853387624025345, 0.09866596013307571, 0.10196803510189056, 0.09853387624025345, 0.09932637959718704, 0.09655263274908066, 0.09906221181154251, 0.10051512718200684, 0.09853387624025345, 0.09100515395402908, 0.09377889335155487, 0.09747721254825592, 0.09615638852119446, 0.09602430462837219, 0.1002509593963623, 0.09879804402589798, 0.10566636174917221, 0.10038304328918457, 0.09959053993225098, 0.09311848133802414, 0.10791176557540894, 0.10355303436517715, 0.1006472036242485, 0.1010434553027153, 0.10421344637870789, 0.09800554811954498, 0.10566636174917221, 0.10091137140989304, 0.09998679161071777, 0.09893012791872025, 0.10289261490106583, 0.09906221181154251, 0.10381719470024109, 0.107647605240345, 0.10989301651716232, 0.10091137140989304, 0.1022322028875351, 0.11253467202186584, 0.10910051316022873, 0.107647605240345, 0.10289261490106583, 0.11094967275857925, 0.10394927859306335, 0.11266675591468811, 0.1088363528251648, 0.10276053100824356, 0.11187426000833511, 0.11596883088350296, 0.10619468986988068, 0.109232597053051, 0.1142517477273941, 0.10513802617788315, 0.11372341960668564, 0.10949676483869553, 0.11161009222269058, 0.1146479994058609, 0.11451591551303864, 0.11438383162021637, 0.11094967275857925, 0.11240258812904358, 0.11094967275857925, 0.11596883088350296, 0.11861048638820648, 0.11253467202186584, 0.10910051316022873, 0.11596883088350296, 0.12151630967855453, 0.11834631860256195, 0.11610091477632523, 0.11610091477632523, 0.11596883088350296, 0.12574297189712524, 0.11821424216032028, 0.10976093262434006, 0.10989301651716232, 0.11755382269620895, 0.11359133571386337, 0.1150442510843277, 0.12138422578573227, 0.11768590658903122, 0.11728965491056442], "val_loss": [1.9711241722106934, 1.9710162707737513, 1.970907347542899, 1.9707984924316406, 1.9706907953534807, 1.9705824170793806, 1.9704739706856864, 1.9703664098467146, 1.9702580996922083, 1.9701508794512068, 1.9700432504926408, 1.9699358940124512, 1.9698278563363212, 1.969719478062221, 1.969611576625279, 1.9695044926234655, 1.9693970680236816, 1.9692893028259277, 1.969181673867362, 1.9690745898655482, 1.9689668246677943, 1.9688595363071986, 1.9687517711094447, 1.968644687107631, 1.968536376953125, 1.9684282030378069, 1.968320574079241, 1.9682133538382394, 1.9681065423148019, 1.9679993901933943, 1.9678911481584822, 1.9677824974060059, 1.9676760946001326, 1.967569146837507, 1.967461381639753, 1.9673535483224052, 1.967247690473284, 1.9671408108302526, 1.9670335905892509, 1.9669274602617537, 1.9668200356619698, 1.9667128835405623, 1.9666057995387487, 1.9664981024605888, 1.9663914271763392, 1.9662846156529017, 1.9661776678902763, 1.9660705838884627, 1.9659628186907088, 1.965855257851737, 1.965747697012765, 1.9656415666852678, 1.9655351638793945, 1.9654278755187988, 1.9653209277561732, 1.965212277003697, 1.9651045118059431, 1.9649981771196638, 1.9648917061941964, 1.9647849627903529, 1.96467924118042, 1.9645719528198242, 1.9644640513828822, 1.9643577166966029, 1.964251926967076, 1.964146341596331, 1.9640402112688338, 1.9639343534197127, 1.9638282230922155, 1.9637229783194405, 1.9636157580784388, 1.9635096958705358, 1.9634038380214147, 1.963299070085798, 1.963193416595459, 1.963087558746338, 1.9629812921796526, 1.9628755705697196, 1.9627702576773507, 1.9626637867518835, 1.9625590869358607, 1.9624525478907995, 1.9623474393572127, 1.9622433526175362, 1.9621367454528809, 1.9620302745274134, 1.9619244166782923, 1.9618184907095773, 1.961712224142892, 1.9616050720214844, 1.9614992822919572, 1.9613917895725794, 1.9612859317234583, 1.9611796651567732, 1.9610740797860282, 1.9609686306544714, 1.960862364087786, 1.9607557569231306, 1.9606498309544154, 1.9605439049857003], "val_accuracy": [0.0403333343565464, 0.04066666588187218, 0.04233333468437195, 0.043666668236255646, 0.044333335012197495, 0.04466666653752327, 0.04533333331346512, 0.04600000008940697, 0.046666666865348816, 0.04766666516661644, 0.04833333194255829, 0.04933333396911621, 0.050999999046325684, 0.050999999046325684, 0.050999999046325684, 0.05133333429694176, 0.052000001072883606, 0.052666667848825455, 0.05366666615009308, 0.05400000140070915, 0.05433333292603493, 0.054999999701976776, 0.0560000017285347, 0.05666666850447655, 0.0573333315551281, 0.057999998331069946, 0.05833333358168602, 0.05900000035762787, 0.060333333909511566, 0.06133333221077919, 0.061000000685453415, 0.061666667461395264, 0.061666667461395264, 0.061666667461395264, 0.06199999898672104, 0.06233333423733711, 0.06266666948795319, 0.06366666406393051, 0.06400000303983688, 0.06400000303983688, 0.06466666609048843, 0.06466666609048843, 0.06533333659172058, 0.06533333659172058, 0.06533333659172058, 0.06666667014360428, 0.06733333319425583, 0.06833333522081375, 0.07000000029802322, 0.07133333384990692, 0.0716666653752327, 0.07233333587646484, 0.0729999989271164, 0.0729999989271164, 0.07400000095367432, 0.07500000298023224, 0.07566666603088379, 0.07633333653211594, 0.07766667008399963, 0.07833333313465118, 0.07999999821186066, 0.0806666687130928, 0.08166666328907013, 0.0833333358168602, 0.0833333358168602, 0.0846666693687439, 0.0860000029206276, 0.0860000029206276, 0.08666666597127914, 0.08799999952316284, 0.08799999952316284, 0.08866667002439499, 0.08900000154972076, 0.08966666460037231, 0.09033333510160446, 0.09133332967758179, 0.09166666865348816, 0.09166666865348816, 0.09233333170413971, 0.09233333170413971, 0.09333333373069763, 0.09433333575725555, 0.09399999678134918, 0.09466666728258133, 0.09566666930913925, 0.09566666930913925, 0.09666666388511658, 0.0976666659116745, 0.09799999743700027, 0.0989999994635582, 0.1003333330154419, 0.10133333504199982, 0.10199999809265137, 0.10333333164453506, 0.10466666519641876, 0.10499999672174454, 0.10733333230018616, 0.10833333432674408, 0.10966666787862778, 0.11033333092927933]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [6, 4, 0, 2, 7, 3, 2, 1, 3], [0, 4, 3, 0, 3, 0, 3, 0], [24, 0, 19, 42], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [0, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 1, 16, 16, 8, 8, 4, 1, 1, 0, 1, 1, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.subtract(grad, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023744994591664, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [8, 0, 2, 8, 2, 0, 5, 9, 7], [5, 4, 3, 0, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 5, 7, 8, 4], [0, 0, 0, 1, 3, 3], [42, 57, 72]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 12, 12, 9, 3, 1, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), grad)))), tf.math.add(beta, tf.math.add(grad, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023744994591664, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 5, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 0, 0, 2, 7, 1, 2, 9], [2, 3, 3, 0, 3], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [79, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), grad)), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 9, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [24, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 2, 3, 2, 3, 3, 5, 9], [0, 3, 3, 0, 3, 4], [56, 0, 19], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [2, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 4, 4, 7, 8, 4, 0], [3, 2, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 14, 14, 8, 6, 3, 3, 3, 1, 2, 0, 14, 8, 6, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.multiply(grad, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(sigma, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), alpha))), sigma)), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [4, 2, 0, 2, 7, 5, 5, 9, 3], [5, 4, 3, 0, 0], [24, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 0, 7, 8, 4], [3, 0, 0, 1, 3, 3], [1, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.square(grad))), tf.math.add(beta, grad))))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 4, 9, 5, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [5, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 0, 0, 2, 7, 5, 5, 9], [5, 4, 3, 0], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 4, 7, 8, 4], [3, 1, 0, 1, 3, 3], [72, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, alpha))", "other_info": {"loss": [2.4456223069464196, 3.1858291747531933, 5.233732263724786, 1.0190918456782864e+20, 1.2852909336689218e+24, 2.308946027731804], "accuracy": [0.19099193811416626, 0.11081759631633759, 0.10553427785634995, 0.09192973375320435, 0.09694888442754745, 0.0936468094587326], "val_loss": [1.9753781727382116, 2.014493533543178, 1.9787509100777763, 2.0083439690726146, 1.9822245325360979, 1.975226674761091], "val_accuracy": [0.1066666692495346, 0.09966666996479034, 0.10066666454076767, 0.09833333641290665, 0.09833333641290665, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 0, 2, 7, 2, 5, 9], [0, 4, 3, 0, 3, 1], [24, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023744994591664, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 2, 0, 8, 7, 5, 5, 9, 3], [3, 4, 3, 0, 0], [56, 0, 79], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [45, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 11, 11, 8, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.square(grad)), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08717474341392517, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 4, 9, 5, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [83, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 0, 0, 2, 7, 5, 5, 9], [5, 4, 3, 0], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [9, 1, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [72, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023744994591664, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 2, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [6, 3, 0, 2, 6, 3, 1, 9], [0, 3, 0, 0, 3, 3], [30, 0, 74, 52], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [0, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 14, 14, 8, 6, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.subtract(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.237045782872982, 103.15523797608228, 236.78439726279694, 311.9296257070436, 420.16939612698354, 4442.865451525042], "accuracy": [0.1006472036242485, 0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [23.541628701346262, 183.45338221958704, 225.02913120814733, 312.55262974330356, 398.55999755859375, 22457.383370535714], "val_accuracy": [0.10199999809265137, 0.09799999743700027, 0.09799999743700027, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [84, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [6, 3, 4, 2, 6, 5, 5, 8, 0], [0, 1, 3, 0, 3, 5], [56, 0, 47], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 9, 6, 2, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.square(alpha))), tf.math.add(beta, tf.math.sqrt(grad)))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), grad), tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [6.133951061106692, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11200633645057678, 0.11015717685222626, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [84010.72098214286, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 3, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93, 41], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [6, 0, 0, 2, 7, 5, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 5, 7, 8, 4], [3, 2, 0, 1, 3, 3], [1, 57, 72]], "fitness": -0.0908571407198906, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), beta))", "other_info": {"loss": [2.301602273018227, 2.2994628686001746, 2.299333595155709, 2.2994750359149387, 2.3016974194458273, 2.3010387285242873, 2.3011898297864244], "accuracy": [0.09100515395402908, 0.10553427785634995, 0.1026284471154213, 0.10051512718200684, 0.08519349992275238, 0.09008057415485382, 0.09126931428909302], "val_loss": [1.9687953676496233, 1.968545641217913, 1.971123491014753, 1.9720076833452498, 1.972372259412493, 1.9724603380475725, 1.9723680359976632], "val_accuracy": [0.06133333221077919, 0.09566666930913925, 0.08366666734218597, 0.06733333319425583, 0.07699999958276749, 0.09033333510160446, 0.07699999958276749]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [24, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 0, 0, 2, 7, 5, 5, 9], [0, 4, 3, 0, 3, 4], [56, 0, 19], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [3, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 9, 4, 7, 8, 4], [3, 0, 0, 2, 3, 3], [79, 57]], "fitness": -0.06685714423656464, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 1, 3, 3, 1, 2, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302336530032931, 2.302415333750257, 2.301359800976879, 2.299513641585921, 2.3014903089956382, 2.3008917859044327, 2.3001437781745446, 2.3006020397195854, 2.2993079918785937, 2.29925835090086, 2.2995877232549686, 2.299764912787556, 2.299331045547544, 2.3002285758628034], "accuracy": [0.09140139818191528, 0.09100515395402908, 0.09153348207473755, 0.10170386731624603, 0.09747721254825592, 0.1014397069811821, 0.09576013684272766, 0.09602430462837219, 0.10434553027153015, 0.10381719470024109, 0.10500594228506088, 0.10249637067317963, 0.10381719470024109, 0.1014397069811821], "val_loss": [1.9704383441380091, 1.969996792929513, 1.9696811267307825, 1.9696863038199288, 1.969719750540597, 1.9697185243879045, 1.9696578298296248, 1.9695611681256975, 1.96951505116054, 1.9695734296526228, 1.9696167537144251, 1.9697497912815638, 1.9699921607971191, 1.9702553067888533], "val_accuracy": [0.043666668236255646, 0.04933333396911621, 0.05700000002980232, 0.05900000035762787, 0.061666667461395264, 0.0663333311676979, 0.07199999690055847, 0.07633333653211594, 0.07999999821186066, 0.07733333110809326, 0.07833333313465118, 0.07800000160932541, 0.07800000160932541, 0.07833333313465118]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3, 0, 3], [21, 0, 19], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [47, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 5, 5, 4, 1, 1, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028580364912035, 2.3037964536245896, 2.30341014709644, 2.3016748032502496, 2.3039953025608266, 2.3034399776662804], "accuracy": [0.09140139818191528, 0.0866464152932167, 0.08809932321310043, 0.0948355570435524, 0.09351472556591034, 0.09311848133802414], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 5, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [6, 2, 6, 2, 3, 3, 5, 9], [0, 3, 3, 0, 3, 4], [56, 0, 19], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [2, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [79, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 3, 3, 2, 1, 0, 14, 14, 8, 6, 3, 1, 0, 0, 0, 0, 10, 6, 4, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.square(alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), grad)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), tf.math.pow(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))))", "other_info": {"loss": [2.3028580364912035, 2.3037964536245896, 2.30341014709644, 2.3016748032502496, 2.3039953025608266, 2.3034399776662804], "accuracy": [0.09140139818191528, 0.0866464152932167, 0.08809932321310043, 0.0948355570435524, 0.09351472556591034, 0.09311848133802414], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [6, 2, 0, 8, 0, 5, 5, 4, 6, 1, 5], [2, 4, 3, 0, 3, 0], [56, 84, 19], [1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [4, 3, 9, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [80, 61]], "fitness": -0.03685714304447174, "mapping_values": [1, 2, 2, 1, 1, 0, 14, 14, 9, 5, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.square(beta))))))), tf.math.square(grad)), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3028580364912035, 2.3037964536245896, 2.30341014709644, 2.3016748032502496, 2.3039953025608266, 2.3034399776662804], "accuracy": [0.09140139818191528, 0.0866464152932167, 0.08809932321310043, 0.0948355570435524, 0.09351472556591034, 0.09311848133802414], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]