[{"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 2, 4, 6, 6, 5, 5, 9, 2], [2, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.8097142577171326, "mapping_values": [1, 6, 6, 5, 1, 2, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.square(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9487002677196965, 1.5583058265946277, 1.1290734377614007, 0.8960366154847569, 0.8215566130598317, 0.7731258352875725, 0.7594388589379085, 0.7142470205433223, 0.6878737965595012, 0.6873038369965921, 0.6904176870089607, 0.6299421832923955, 0.6123961414076539, 0.6167178464335789, 0.5791431592203891, 0.6264187189975609, 0.5845674196364715, 0.5748521355259388, 0.5502290417843837, 0.5562742119294588, 0.5299833746020033, 0.5254181755091363, 0.5316134365699893, 0.5140460172247153, 0.5175870115872561, 0.4923880238417133, 0.4998263086483479, 0.47618332681182257, 0.47669071977825966, 0.5036109771159788], "accuracy": [0.3517369031906128, 0.47549861669540405, 0.6065248847007751, 0.6647734642028809, 0.6890767216682434, 0.698718786239624, 0.7088891863822937, 0.7250033020973206, 0.7358341217041016, 0.7390040755271912, 0.7412495017051697, 0.7630431652069092, 0.7718927264213562, 0.7626469135284424, 0.7827235460281372, 0.7618544697761536, 0.7778365015983582, 0.7876105904579163, 0.7926297783851624, 0.7873464822769165, 0.8009510040283203, 0.8041210174560547, 0.8050455451011658, 0.8113855719566345, 0.8018755912780762, 0.8216879963874817, 0.8109893202781677, 0.8226125836372375, 0.8257825970649719, 0.8101968169212341], "val_loss": [1.6725592272622245, 0.7789953776768276, 0.7215920686721802, 0.7377308777400425, 0.614898681640625, 0.7337054184504918, 0.5479375634874616, 0.5434572356087821, 0.5816480602536883, 0.5194523845400129, 0.5319127355303083, 0.49848221029554096, 0.49600662503923687, 0.4847830193383353, 0.4965963363647461, 0.4759702512196132, 0.481357250894819, 0.4875321388244629, 0.46682439531598774, 0.46425756386348177, 0.4408317634037563, 0.45717123576572966, 0.45378092357090544, 0.42601133244378225, 0.4139758433614458, 0.437204224722726, 0.41224256583622526, 0.41471533264432636, 0.4029547316687448, 0.428542469229017], "val_accuracy": [0.4009999930858612, 0.6816666722297668, 0.6863333582878113, 0.656000018119812, 0.7236666679382324, 0.6663333177566528, 0.7583333253860474, 0.7649999856948853, 0.7329999804496765, 0.7763333320617676, 0.7699999809265137, 0.7763333320617676, 0.7833333611488342, 0.7833333611488342, 0.7616666555404663, 0.7919999957084656, 0.7853333353996277, 0.7743333578109741, 0.7933333516120911, 0.7910000085830688, 0.8103333115577698, 0.8050000071525574, 0.7946666479110718, 0.8106666803359985, 0.8296666741371155, 0.8073333501815796, 0.8230000138282776, 0.8223333358764648, 0.8243333101272583, 0.8149999976158142]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.8088571429252625, "mapping_values": [1, 5, 5, 3, 2, 2, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9486783773450962, 1.560334370294031, 1.134374575096272, 0.8875173407223844, 0.8353702513974152, 0.7780823822365367, 0.7568665977246127, 0.7182486296613313, 0.6795491188461471, 0.6842084252728825, 0.6805440379155862, 0.6318653705743295, 0.6125304966460382, 0.6150654583653722, 0.5808573423863528, 0.6311341303135851, 0.587249308293128, 0.5694398208301238, 0.5441459599597469, 0.5646625250999119, 0.5288880271855567, 0.5412582851136444, 0.5212802298710473, 0.5181341264163184, 0.5090062937102282, 0.4992251521513494, 0.49803691021896324, 0.4749869073638669, 0.4718965273869587, 0.508053428138551, 0.4646430798391577, 0.4696463603526846, 0.44992069836463344, 0.4541191094193429, 0.4503908050672773, 0.43164355422858125, 0.4309491531889216, 0.4257194464980745, 0.4183604667734996, 0.42422556880285334, 0.4029479002664433, 0.4093555383332071, 0.4155037689005867, 0.40780734742684466], "accuracy": [0.3517369031906128, 0.4756307005882263, 0.6079778075218201, 0.6742834448814392, 0.6812838315963745, 0.6979262828826904, 0.7082287669181824, 0.7264562249183655, 0.7387399077415466, 0.7391361594200134, 0.7457403540611267, 0.7629110813140869, 0.7709681391716003, 0.763967752456665, 0.7827235460281372, 0.7613261342048645, 0.7741381525993347, 0.791969358921051, 0.7992339134216309, 0.7868181467056274, 0.8020076751708984, 0.7967243194580078, 0.8120459914207458, 0.809140145778656, 0.8080834746360779, 0.8178576231002808, 0.8140271902084351, 0.8240655064582825, 0.8248580098152161, 0.806630551815033, 0.8308017253875732, 0.8224804997444153, 0.8296129703521729, 0.8300092220306396, 0.8313300609588623, 0.8422929644584656, 0.8405758738517761, 0.8404437899589539, 0.8470479249954224, 0.8448025584220886, 0.8531237840652466, 0.8521991968154907, 0.8457271456718445, 0.8449346423149109], "val_loss": [1.6743976048060827, 0.7814233813967023, 0.7245894840785435, 0.7135401453290667, 0.5909461634499686, 0.6630168982914516, 0.5516225440161568, 0.5422854423522949, 0.5781306028366089, 0.5067922558103289, 0.5340065104620797, 0.5074069499969482, 0.4953911815370832, 0.488515990121024, 0.49363650594438824, 0.4836998496736799, 0.4864322117396763, 0.4815504550933838, 0.46125926290239605, 0.4567702497754778, 0.44881721905299593, 0.46245862756456646, 0.44857066018240793, 0.4240229214940752, 0.4125753470829555, 0.440037659236363, 0.4161245652607509, 0.4068741628101894, 0.40468658719744, 0.4302112204687936, 0.39727334465299335, 0.42993348836898804, 0.4114711284637451, 0.40878851073128836, 0.38569772243499756, 0.3887045979499817, 0.374249313558851, 0.3689800671168736, 0.37243172952107023, 0.3690394418580191, 0.36354040248053415, 0.3630043693951198, 0.37763640710285734, 0.36210979734148296], "val_accuracy": [0.40066665410995483, 0.6783333420753479, 0.6846666932106018, 0.671999990940094, 0.7350000143051147, 0.6966666579246521, 0.762666642665863, 0.7603333592414856, 0.734000027179718, 0.7770000100135803, 0.7676666378974915, 0.7743333578109741, 0.7823333144187927, 0.7803333401679993, 0.7696666717529297, 0.7853333353996277, 0.7820000052452087, 0.7766666412353516, 0.7963333129882812, 0.7986666560173035, 0.8036666512489319, 0.7990000247955322, 0.7973333597183228, 0.8130000233650208, 0.824999988079071, 0.800000011920929, 0.8169999718666077, 0.8276666402816772, 0.8236666917800903, 0.8163333535194397, 0.8326666951179504, 0.800000011920929, 0.8163333535194397, 0.8190000057220459, 0.8339999914169312, 0.8333333134651184, 0.8330000042915344, 0.8383333086967468, 0.8420000076293945, 0.8376666903495789, 0.8420000076293945, 0.8349999785423279, 0.8333333134651184, 0.8383333086967468]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3], [9, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.7842857241630554, "mapping_values": [1, 5, 5, 3, 2, 2, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2605313897337567, 2.0691685435983245, 1.6474818350569354, 1.2784518416311133, 1.08824082668573, 0.9992549259822288, 0.9163378532048403, 0.8764622027469963, 0.8380895752507493, 0.801828112584599, 0.7752113636411365, 0.77430700089843, 0.7587370402179043, 0.7384067343572789, 0.7249159817178535, 0.7093267608957993, 0.6905862886860638, 0.6889329874252583, 0.6770968793043449, 0.6678899774587921, 0.6704432929921003, 0.6482647131730411], "accuracy": [0.19138818979263306, 0.3831726312637329, 0.4799894392490387, 0.5610883831977844, 0.6160348653793335, 0.6464139223098755, 0.6704530715942383, 0.6840575933456421, 0.6956809163093567, 0.707040011882782, 0.7161537408828735, 0.7150970697402954, 0.719852089881897, 0.7264562249183655, 0.7304186820983887, 0.7341170310974121, 0.7498348951339722, 0.7442874312400818, 0.7436270117759705, 0.750231146812439, 0.7515519857406616, 0.759080708026886], "val_loss": [1.8582722800118583, 1.5380162170955114, 1.070488521030971, 0.8471776076725551, 0.7663878202438354, 0.6965622561318534, 0.6527738741465977, 0.6323757682527814, 0.609113233430045, 0.5987599236624581, 0.5867831196103778, 0.5957971640995571, 0.5641974891935077, 0.5588484151022775, 0.5401973724365234, 0.5273027079445975, 0.5273031166621617, 0.5200718130384173, 0.5251952580043248, 0.5106760944638934, 0.5199590410505023, 0.507149474961417], "val_accuracy": [0.4273333251476288, 0.5726666450500488, 0.6226666569709778, 0.6819999814033508, 0.6773333549499512, 0.7053333520889282, 0.7179999947547913, 0.7179999947547913, 0.7353333234786987, 0.7400000095367432, 0.7566666603088379, 0.7269999980926514, 0.7463333606719971, 0.7463333606719971, 0.7590000033378601, 0.7683333158493042, 0.7789999842643738, 0.7773333191871643, 0.7689999938011169, 0.7726666927337646, 0.7726666927337646, 0.7666666507720947]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 1, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 9, 5, 2], [0, 4, 3, 0, 3], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.7822856903076172, "mapping_values": [1, 8, 8, 5, 3, 2, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.259607793317731, 2.064292145521728, 1.638043293391142, 1.2732445040808504, 1.0878926397802775, 1.0028697678740817, 0.9174887011583691, 0.8815543459249352, 0.8384417356705983, 0.8018098615652157, 0.7778380775196583, 0.7790922042621582, 0.7602512012887168, 0.7419924947563935, 0.7267216628159294, 0.7131355291171206, 0.6909079931084947, 0.6896813620098862, 0.6774857299297304, 0.6695238095563653, 0.6725645072786737, 0.6493259718499683], "accuracy": [0.19284109771251678, 0.38528597354888916, 0.48131024837493896, 0.5649187564849854, 0.6145819425582886, 0.6441685557365417, 0.6680755615234375, 0.6816800832748413, 0.6966054439544678, 0.7062475085258484, 0.7143045663833618, 0.7117950320243835, 0.7182670831680298, 0.726192057132721, 0.7296261787414551, 0.7339849472045898, 0.7506273984909058, 0.7436270117759705, 0.7460044622421265, 0.7475894689559937, 0.7489103078842163, 0.7581561207771301], "val_loss": [1.8560692923409599, 1.5290253843579973, 1.0630408695765905, 0.8452862160546439, 0.759004933493478, 0.697240778378078, 0.6533169916697911, 0.6395364148276192, 0.6088931730815342, 0.6019657679966518, 0.5904826266424996, 0.607329283441816, 0.5672339711870465, 0.562241928918021, 0.5458651270185199, 0.5291994639805385, 0.5283588000706264, 0.5212904725755964, 0.5299949475697109, 0.5108052662440709, 0.5258122682571411, 0.5087259326662336], "val_accuracy": [0.43033334612846375, 0.5763333439826965, 0.6236666440963745, 0.6809999942779541, 0.6803333163261414, 0.7049999833106995, 0.7179999947547913, 0.7149999737739563, 0.7369999885559082, 0.737666666507721, 0.7536666393280029, 0.7200000286102295, 0.7440000176429749, 0.7400000095367432, 0.7516666650772095, 0.768666684627533, 0.7776666879653931, 0.7753333449363708, 0.7670000195503235, 0.7739999890327454, 0.7703333497047424, 0.765999972820282]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [3, 4, 3, 2, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.7748571634292603, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.square(grad)), tf.math.add(beta, beta))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9791759426378697, 1.4686410170756532, 1.0187920971931388, 0.9313625583417537, 0.8452124683816971, 0.7691005151883691, 0.7560706153569079, 0.7167382245885068, 0.7029299204848021, 0.6924498085852202, 0.6513890569881756, 0.6396318706050919, 0.6750058503183061], "accuracy": [0.3416985869407654, 0.5079910159111023, 0.6312243938446045, 0.650640606880188, 0.6876237988471985, 0.7169462442398071, 0.7189275026321411, 0.7338528633117676, 0.7372870445251465, 0.7458723783493042, 0.7526086568832397, 0.76106196641922, 0.7445515990257263], "val_loss": [1.608412572315761, 0.9156020368848529, 0.7620882987976074, 0.6321284260068621, 0.6509299789156232, 0.6299546105521066, 0.589738164629255, 0.5399135521480015, 0.55727790083204, 0.536751389503479, 0.5020440816879272, 0.556685038975307, 0.5443470307758876], "val_accuracy": [0.44333332777023315, 0.6233333349227905, 0.643666684627533, 0.7293333411216736, 0.6936666369438171, 0.7070000171661377, 0.7160000205039978, 0.7646666765213013, 0.7463333606719971, 0.75, 0.7639999985694885, 0.7393333315849304, 0.7379999756813049]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [6, 2, 0, 2, 6, 8, 5, 9], [0, 4, 3, 3, 3], [36, 0, 9], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.5731428861618042, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.282320639271825, 2.2268619725354957, 2.14399629850996, 1.9948815770546648, 1.7791907780237517, 1.578859479735005, 1.5793106170016162, 1.5016431790364337, 1.3972217018704105], "accuracy": [0.13842293620109558, 0.26561880111694336, 0.34024566411972046, 0.4060229957103729, 0.46083739399909973, 0.47932901978492737, 0.43204331398010254, 0.46229031682014465, 0.5008585453033447], "val_loss": [1.9251668793814523, 1.8608429772513253, 1.7500063351222448, 1.5704203333173479, 1.3329497746058874, 1.2411718027932304, 1.2470804963793074, 1.1200019632067, 1.0412612983158656], "val_accuracy": [0.34200000762939453, 0.46933332085609436, 0.5166666507720947, 0.5733333230018616, 0.5686666369438171, 0.48233333230018616, 0.48233333230018616, 0.5370000004768372, 0.5553333163261414]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [54, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 1, 0, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [60, 57]], "fitness": -0.41999998688697815, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad))), tf.math.add(grad, tf.math.divide_no_nan(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3160984881754643, 2.8184579526900992, 2.3042007981195676, 2.294016023873181, 2.321299105146542, 2.254884462472454, 2.363516342465148, 2.3089918072166036, 2.3026890629995234, 2.248308444870241, 2.207978594651107], "accuracy": [0.22097477316856384, 0.12429005652666092, 0.09708096832036972, 0.13789460062980652, 0.1640470176935196, 0.1674811840057373, 0.3007528781890869, 0.10170386731624603, 0.11398758739233017, 0.1838594675064087, 0.18597279489040375], "val_loss": [1.8420884949820382, 1.975802285330636, 1.9725703511919295, 1.8847898755754744, 1.9691534723554338, 1.6595274720873152, 1.983097757611956, 1.9750587599618095, 1.9598048073904855, 1.6733544213431222, 1.6902775423867362], "val_accuracy": [0.2473333328962326, 0.10366666316986084, 0.10000000149011612, 0.2529999911785126, 0.18533332645893097, 0.4036666750907898, 0.09799999743700027, 0.10000000149011612, 0.2866666615009308, 0.39366665482521057, 0.2980000078678131]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 0, 4, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 2, 2, 6, 5, 5, 9], [3, 4, 3, 2, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [4, 3, 0, 4, 7, 8, 4], [3, 0, 1, 1, 3, 3], [43, 48]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 8, 4, 4, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(alpha, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 15, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 1, 6, 5, 5, 9], [0, 4, 3, 0, 3], [38, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 12, 12, 7, 5, 2, 3, 2, 1, 1, 0, 4, 2, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(beta, grad)))), tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [6471235.625407393, 124672965.59609035, 584596457.1507066, 1620193492.6852462, 3474021781.2854314, 6356384933.076212], "accuracy": [0.09893012791872025, 0.10328886657953262, 0.09840179979801178, 0.09668471664190292, 0.10011887550354004, 0.1022322028875351], "val_loss": [25246238.285714287, 201619021.7142857, 680072576.0, 1611562496.0, 3147040036.571429, 5437468964.571428], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 1, 3, 6, 5, 5, 9], [0, 4, 3, 0, 3, 0, 2, 5, 2], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 3, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), grad)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0758156105875969, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 8, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 94, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 1, 2, 6, 5, 5, 9], [0, 3, 3, 0, 3, 0, 2, 5, 2], [56, 17, 9], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [95, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 47, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9, 0], [0, 4, 3, 0, 3, 0, 2, 5, 2], [38, 58, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 2, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 13, 13, 9, 4, 3, 1, 1, 0, 1, 0, 12, 7, 5, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(grad))))), grad), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), tf.math.pow(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [91, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 4, 0, 2, 0, 6, 5, 9], [2, 3, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, grad))))), tf.math.divide_no_nan(grad, tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [2.3706595124884715, 2.634107373661731, 4.572807433441126, 23.442237876677446, 202.04960612774588, 1926.4375935802527, 18522.980942391197, 184834.19495443138, 1852626.625544842, 18532370.241711795], "accuracy": [0.021397437900304794, 0.019019944593310356, 0.03011491149663925, 0.059173159301280975, 0.09047681838274002, 0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.094876902444022, 2.599095276423863, 7.370038713727679, 54.69440460205078, 502.57332938058033, 4895.009486607143, 47212.5859375, 475077.0535714286, 4791390.0, 48103589.71428572], "val_accuracy": [0.007333333138376474, 0.023333333432674408, 0.03400000184774399, 0.07566666603088379, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 61, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [8, 2, 0, 9, 6, 5, 5, 9], [0, 4, 3, 0, 3, 0], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [95, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1227077346.0729952, 23699316771.706776, 111209552613.99762, 308316583077.6849, 661222284012.4897, 1209974850635.336], "accuracy": [0.09893012791872025, 0.10328886657953262, 0.09840179979801178, 0.09668471664190292, 0.10011887550354004, 0.1022322028875351], "val_loss": [4794515748.571428, 38344780068.57143, 129400668160.0, 306712430884.5714, 599034729033.1428, 1035122020937.1428], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0], [89, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 2, 0, 2, 6, 6, 5, 3], [5, 3, 3, 0, 3, 2], [56, 89, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [2, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 0, 7, 8, 4], [3, 1, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 1, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 7, 4, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))))), grad))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, alpha), tf.math.negative(tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 2, 5, 9], [0, 4, 3, 0, 3], [55, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [33, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), grad))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30259887181127, 2.302596906330198, 2.3025883864323538, 2.302596705700853, 2.302601361051133, 2.3025891526090847, 2.3025631697391082], "accuracy": [0.0952318087220192, 0.09959053993225098, 0.1018359512090683, 0.10117553919553757, 0.10236428678035736, 0.09602430462837219, 0.10394927859306335], "val_loss": [1.973646777016776, 1.9736441203526087, 1.9736437797546387, 1.9736456871032715, 1.9736437797546387, 1.9736463682992118, 1.9736441203526087], "val_accuracy": [0.09833333641290665, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.09799999743700027, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 8, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [23, 72, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 2, 0, 0, 0], [9, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 3, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(beta))))), tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.322259777840244, 2.1650458914137725e+18, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1150442510843277, 0.0948355570435524, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [5.033012935093471, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.043666668236255646, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3], [38, 99, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0758156105875969, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 0, 3, 0, 3], [0, 0, 47, 61], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 6, 6, 5, 1, 2, 12, 12, 8, 4, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3040257768387873, 2.302455096716548, 2.3053928245375137, 2.302016547705283, 2.301955698723995, 2.30260446962506], "accuracy": [0.08268392831087112, 0.09628847241401672, 0.09074098616838455, 0.09272222965955734, 0.08928807079792023, 0.09166556596755981], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [23, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 0, 0, 2, 6, 2, 5, 9], [0, 4, 3, 0, 3, 0], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [3, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 3, 0, 1, 3, 3], [35, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 5, 5, 2, 3, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3040257768387873, 2.302455096716548, 2.3053928245375137, 2.302016547705283, 2.301955698723995, 2.30260446962506], "accuracy": [0.08268392831087112, 0.09628847241401672, 0.09074098616838455, 0.09272222965955734, 0.08928807079792023, 0.09166556596755981], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]