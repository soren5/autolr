[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8362857103347778, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), beta)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0539905048553515, 1.6575390746360126, 1.155250498096248, 0.9357293539547319, 0.8415467119991599, 0.7871985389351482, 0.7078509337441355, 0.6957004553118181, 0.6910016309662329, 0.6110229793792828, 0.6108766179736013, 0.6126836585708818, 0.5854341088111579, 0.5596634658879419, 0.5383877306408996, 0.5527013843526551, 0.5147287619545349, 0.5294371281616786, 0.505437555802481, 0.4999828437347422, 0.498504694182686, 0.47040669887514003, 0.4758657938918228, 0.4544276244108782, 0.45161405060080617, 0.4423922813721242, 0.4057537494649221, 0.4384774647573391, 0.41983849260123995, 0.42399826166400223, 0.4050743268615046], "accuracy": [0.3155461549758911, 0.42187294363975525, 0.5811649560928345, 0.6446968913078308, 0.6890767216682434, 0.7003037929534912, 0.7294940948486328, 0.7342491149902344, 0.7339849472045898, 0.7692511081695557, 0.7685906887054443, 0.7623828053474426, 0.7761194109916687, 0.7839123010635376, 0.7972526550292969, 0.7864218950271606, 0.8054417967796326, 0.7993659973144531, 0.8088759779930115, 0.8161405324935913, 0.8146876096725464, 0.8236692547798157, 0.8235371708869934, 0.8329150676727295, 0.8315942287445068, 0.8339717388153076, 0.8540483713150024, 0.835160493850708, 0.8413683772087097, 0.8457271456718445, 0.8462554216384888], "val_loss": [1.8327586310250419, 1.0458084515162878, 0.9230682168688092, 0.6115555252347674, 0.5999141080038888, 0.6114801679338727, 0.5899628060204642, 0.6441769259316581, 0.5128021580832345, 0.5829416172845023, 0.5306629112788609, 0.4868574483054025, 0.4519057103565761, 0.46625915595463346, 0.4925120047160557, 0.4369099055017744, 0.4585169724055699, 0.4354264054979597, 0.39990716321127756, 0.4842916897365025, 0.4328141638210842, 0.4065761481012617, 0.38272179876055035, 0.41830654655184063, 0.39813984291894094, 0.3642304965427944, 0.4027886135237558, 0.3922527773039682, 0.419062648500715, 0.37239672456468853, 0.36506091696875437], "val_accuracy": [0.2720000147819519, 0.5486666560173035, 0.5799999833106995, 0.7323333621025085, 0.7239999771118164, 0.7136666774749756, 0.718999981880188, 0.6963333487510681, 0.7670000195503235, 0.7363333106040955, 0.7636666893959045, 0.7699999809265137, 0.7933333516120911, 0.7906666398048401, 0.7506666779518127, 0.8006666898727417, 0.7979999780654907, 0.7996666431427002, 0.824999988079071, 0.7820000052452087, 0.8059999942779541, 0.8259999752044678, 0.8323333263397217, 0.8113333582878113, 0.8226666450500488, 0.8450000286102295, 0.8183333277702332, 0.8299999833106995, 0.8153333067893982, 0.8420000076293945, 0.8410000205039978]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 6, 3, 1, 7, 5, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 3, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8251428604125977, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), beta)))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0539664664619304, 1.6534704163782727, 1.1944873357855208, 0.9428857250881862, 0.826567324475999, 0.8026067141796289, 0.7020730737288237, 0.687948191485558, 0.6592640454160413, 0.6339014832212342, 0.6192998841548593, 0.6011688467329205, 0.5923865519069395, 0.5531826526174581, 0.5519456922370272, 0.5428526611879848, 0.5143168240828899, 0.5115647769371091, 0.5112573308573738, 0.49973776825131555, 0.5060219141620104, 0.46699831829315414, 0.4627236445125509, 0.45650901407172667, 0.45922695931473806, 0.4462652658789527, 0.42724955096504297, 0.43516122952759023, 0.41783709878997716, 0.41785173752461885, 0.4166005070238475, 0.3967722582110104, 0.3881694115841031, 0.39713634995579045, 0.39645218255576237, 0.3823940999133791, 0.3717164518322691, 0.3737402982550243, 0.3534765943969482, 0.369465426553305, 0.3402036543472521, 0.3673684310801293, 0.3349806811429758, 0.3307508640340637, 0.33412074204669606, 0.33291564471040497, 0.3228770035361223, 0.3276575153191422], "accuracy": [0.3155461549758911, 0.4267600178718567, 0.5629374980926514, 0.6560559868812561, 0.6948884129524231, 0.6993792057037354, 0.7347774505615234, 0.7368907928466797, 0.7478536367416382, 0.7535332441329956, 0.7623828053474426, 0.7663452625274658, 0.7708360552787781, 0.7852331399917603, 0.7886672616004944, 0.7891955971717834, 0.8061022162437439, 0.8045172095298767, 0.8076872229576111, 0.8175934553146362, 0.8072909712791443, 0.8251221776008606, 0.8277638554573059, 0.8327829837799072, 0.8278959393501282, 0.8308017253875732, 0.8450667262077332, 0.837141752243042, 0.8438779711723328, 0.8474441766738892, 0.8448025584220886, 0.8524633646011353, 0.8564258217811584, 0.8516708612442017, 0.8490291833877563, 0.8598600029945374, 0.8631620407104492, 0.8618412613868713, 0.868049144744873, 0.8602562546730042, 0.873860776424408, 0.857218325138092, 0.8745211958885193, 0.8780874609947205, 0.8802007436752319, 0.8712190985679626, 0.8784837126731873, 0.8778232932090759], "val_loss": [1.832411766052246, 1.0981322697230749, 0.8632162639072963, 0.629346353667123, 0.6214347226279122, 0.6061653239386422, 0.5564311231885638, 0.5345368555613926, 0.5288942200796944, 0.5744424036570958, 0.48875256947108675, 0.4898078271320888, 0.4518568686076573, 0.45871845313480925, 0.48269050461905344, 0.46505183832986013, 0.45675599575042725, 0.4241368430001395, 0.4213255388396127, 0.48278794969831196, 0.40835911887032644, 0.42811416728155954, 0.40952924319675993, 0.4008997934205191, 0.3973786745752607, 0.38163099118641447, 0.41823454414095196, 0.39024646793093, 0.40983660731996807, 0.38833852325166973, 0.37304275376456125, 0.3732824240412031, 0.37122092076710295, 0.39189342090061735, 0.35144432953425814, 0.3911284719194685, 0.355039690222059, 0.37928684268678936, 0.3389842425073896, 0.35058810881205965, 0.3696214641843523, 0.3436637009893145, 0.3310943331037249, 0.32746113198144094, 0.3735021097319467, 0.3457960827010019, 0.36455858605248587, 0.33780574798583984], "val_accuracy": [0.2720000147819519, 0.5433333516120911, 0.6213333606719971, 0.7356666922569275, 0.7146666646003723, 0.7170000076293945, 0.7566666603088379, 0.7596666812896729, 0.7519999742507935, 0.7353333234786987, 0.7816666960716248, 0.7689999938011169, 0.79666668176651, 0.7923333048820496, 0.7583333253860474, 0.7766666412353516, 0.7953333258628845, 0.8163333535194397, 0.812666654586792, 0.7863333225250244, 0.824999988079071, 0.8130000233650208, 0.8173333406448364, 0.8186666369438171, 0.8253333568572998, 0.8309999704360962, 0.8143333196640015, 0.8316666483879089, 0.8180000185966492, 0.8309999704360962, 0.8413333296775818, 0.8360000252723694, 0.8256666660308838, 0.8253333568572998, 0.843999981880188, 0.8410000205039978, 0.8550000190734863, 0.8330000042915344, 0.856333315372467, 0.843999981880188, 0.8356666564941406, 0.8479999899864197, 0.8566666841506958, 0.856333315372467, 0.8330000042915344, 0.8523333072662354, 0.843999981880188, 0.8483333587646484]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 3, 3, 2, 7, 2, 1, 6, 6, 3, 4, 9, 1, 1, 8, 8], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0, 1, 0, 5], [59, 2, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.822857141494751, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 16, 13, 6, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(beta, beta)))))), tf.math.add(beta, grad)), beta)), tf.math.add(beta, tf.math.sqrt(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0539834964796535, 1.6561703453950751, 1.2139002184086252, 0.9303968448790703, 0.8054395555001302, 0.7922530727080381, 0.7044840142585503, 0.716785909571841, 0.648857051190006, 0.6320212360118689, 0.6179294461555894, 0.6095240246334789, 0.5925839650490816, 0.5653578471104546, 0.5483702798844518, 0.5463419732652588, 0.5126343315319378, 0.5213224407688438, 0.525742574138664, 0.4954396790013321, 0.4983983298318576, 0.4671340778267316, 0.47081968221745046, 0.4502019344020466, 0.460410133549377, 0.44427915897824116, 0.41952036692954137, 0.4365697564654866, 0.4102252251625439, 0.4232599127286335, 0.4171368975161309, 0.40025249125147855, 0.39763830788556564, 0.3909294701420856, 0.3973966088466294, 0.38595760470100476, 0.3860402864243738, 0.35732925465283, 0.35388014142492175, 0.3687037650730474, 0.3388008960777223, 0.36194472274114553, 0.34288254588066924, 0.3385379563516645, 0.33138537693883385, 0.3386834676924509, 0.32615909138611987, 0.32754345032139354], "accuracy": [0.3155461549758911, 0.42306166887283325, 0.5552766919136047, 0.6538106203079224, 0.6903975605964661, 0.6955488324165344, 0.7323999404907227, 0.7290979027748108, 0.7481178045272827, 0.7621186375617981, 0.7644960880279541, 0.7647602558135986, 0.7741381525993347, 0.7808743715286255, 0.7898560166358948, 0.7866860628128052, 0.8045172095298767, 0.8013472557067871, 0.7985734939575195, 0.8191784620285034, 0.8164047002792358, 0.8236692547798157, 0.8230088353157043, 0.8356888294219971, 0.8272355198860168, 0.8360850811004639, 0.8485008478164673, 0.835160493850708, 0.8481045961380005, 0.8450667262077332, 0.8432175517082214, 0.8486329317092896, 0.8510104417800903, 0.8553691506385803, 0.8487650156021118, 0.8584070801734924, 0.8564258217811584, 0.8705587387084961, 0.863558292388916, 0.8584070801734924, 0.8746532797813416, 0.863558292388916, 0.8712190985679626, 0.8746532797813416, 0.8779553771018982, 0.8716153502464294, 0.876370370388031, 0.8778232932090759], "val_loss": [1.8324620383126395, 1.1052381651742118, 0.8593690735953194, 0.6348413399287632, 0.6643621240343366, 0.5790029423577445, 0.6070597171783447, 0.519296475819179, 0.5136265073503766, 0.5909941707338605, 0.495604191507612, 0.503067033631461, 0.44939359596797396, 0.4711590664727347, 0.4820094789777483, 0.4658559731074742, 0.45889035293034147, 0.4319414326122829, 0.4341074228286743, 0.40172646726880756, 0.4088911328996931, 0.4168475014822824, 0.39176026412418913, 0.3982836263520377, 0.3868394834654672, 0.3709326556750706, 0.4481066124779837, 0.3980417847633362, 0.4165838786533901, 0.39039428744997295, 0.3669221656663077, 0.37785141808646067, 0.36293221371514456, 0.3961256572178432, 0.35483986139297485, 0.3778483271598816, 0.35196030139923096, 0.36421420744487215, 0.34915522166660856, 0.34658294916152954, 0.3722682510103498, 0.3472903711455209, 0.32680814606802805, 0.3256094285420009, 0.38016341413770405, 0.35073821033750263, 0.3682590297290257, 0.3578804390771048], "val_accuracy": [0.2720000147819519, 0.5406666398048401, 0.6213333606719971, 0.703000009059906, 0.6723333597183228, 0.7326666712760925, 0.7096666693687439, 0.7616666555404663, 0.7683333158493042, 0.7286666631698608, 0.7773333191871643, 0.7599999904632568, 0.7940000295639038, 0.7846666574478149, 0.7563333511352539, 0.7730000019073486, 0.7913333177566528, 0.8026666641235352, 0.8023333549499512, 0.8286666870117188, 0.8273333311080933, 0.8183333277702332, 0.8240000009536743, 0.8223333358764648, 0.8309999704360962, 0.8370000123977661, 0.8033333420753479, 0.8289999961853027, 0.8190000057220459, 0.8270000219345093, 0.8433333039283752, 0.8309999704360962, 0.8316666483879089, 0.8289999961853027, 0.8433333039283752, 0.8450000286102295, 0.8483333587646484, 0.8376666903495789, 0.846666693687439, 0.8426666855812073, 0.8343333601951599, 0.8493333458900452, 0.8600000143051147, 0.8586666584014893, 0.8236666917800903, 0.8489999771118164, 0.8370000123977661, 0.8416666388511658]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 9, 7, 5, 1, 2, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [36, 47, 64, 35, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.8088571429252625, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9983345465086328, 2.12887007660161, 1.4988532721988435, 1.1472056588760031, 0.895544994280496, 0.8369799839932259, 0.7666686272828995, 0.6992661382748608, 0.6794389758631538, 0.6358860576976292, 0.6203386472311033, 0.6041024482371454, 0.5998425273973361, 0.5630423998820107, 0.5363291133868775, 0.5575745987177304, 0.5187254386838748, 0.5128605636182384, 0.4888482698989881, 0.46959848336067495, 0.5221985844085087, 0.47290997800573836, 0.47765249117427516, 0.4616436643835702, 0.4420249497633821, 0.4450342241271675, 0.4261313793429641, 0.415842114414726, 0.41044767943150995, 0.4204871701747041, 0.4069192648374834, 0.3926114237595071, 0.3859039977194847, 0.3819378699412073, 0.3689304188990149, 0.38774242485440275, 0.37884386814958493], "accuracy": [0.32941487431526184, 0.3271694481372833, 0.5079910159111023, 0.598599910736084, 0.6634526252746582, 0.6877558827400208, 0.7017567157745361, 0.7353057861328125, 0.7411174178123474, 0.7537974119186401, 0.7560427784919739, 0.769911527633667, 0.776251494884491, 0.7847048044204712, 0.8020076751708984, 0.7857614755630493, 0.8075551390647888, 0.8083476424217224, 0.8238013386726379, 0.833179235458374, 0.8055738806724548, 0.8227446675300598, 0.8211596608161926, 0.8308017253875732, 0.8407079577445984, 0.8343679904937744, 0.8407079577445984, 0.8448025584220886, 0.8469158411026001, 0.8448025584220886, 0.8496896028518677, 0.8541803956031799, 0.8585391640663147, 0.8553691506385803, 0.8658037185668945, 0.8537842035293579, 0.8617091774940491], "val_loss": [1.9551206997462682, 1.4147873265402657, 0.9989784785679409, 0.7277739899499076, 0.682138340813773, 0.6322948251451764, 0.6255325930459159, 0.5362201588494437, 0.5064207826341901, 0.5505882842200143, 0.49386022772107807, 0.48652635301862446, 0.4540078810283116, 0.47345670631953646, 0.4957091808319092, 0.4773740938731602, 0.4371988432747977, 0.4129781893321446, 0.4071697933333261, 0.5538156373160226, 0.40762254170009066, 0.4150915486471994, 0.37753922598702566, 0.41835752555302214, 0.3900596925190517, 0.37772384711674284, 0.39868651969092234, 0.39030061449323383, 0.39680478402546476, 0.45059878485543386, 0.35603890248707365, 0.3615769488470895, 0.38333687611988615, 0.3848336509295872, 0.36714810132980347, 0.43252004044396536, 0.3444125992911203], "val_accuracy": [0.21066667139530182, 0.5653333067893982, 0.5889999866485596, 0.6923333406448364, 0.6803333163261414, 0.7149999737739563, 0.7223333120346069, 0.7739999890327454, 0.7703333497047424, 0.746666669845581, 0.7866666913032532, 0.7749999761581421, 0.8086666464805603, 0.7903333306312561, 0.7390000224113464, 0.781000018119812, 0.8006666898727417, 0.8196666836738586, 0.8236666917800903, 0.765666663646698, 0.8266666531562805, 0.8106666803359985, 0.8383333086967468, 0.809333324432373, 0.8263333439826965, 0.8413333296775818, 0.8240000009536743, 0.8303333520889282, 0.8263333439826965, 0.79666668176651, 0.8483333587646484, 0.8496666550636292, 0.82833331823349, 0.8339999914169312, 0.8403333425521851, 0.8289999961853027, 0.8483333587646484]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 6, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [36, 47, 64, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.8048571348190308, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), beta)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9982364824372134, 2.131741172082357, 1.5161418231597052, 1.1220984582210718, 0.9521068432359112, 0.8299407962212205, 0.7573592402537926, 0.6845592172343292, 0.6795266423762639, 0.6115544610696777, 0.6187427703966759, 0.6091587646935579, 0.5691863755665876, 0.5944693859825517, 0.5468401776139825, 0.5409456747492402, 0.5176299559426046, 0.5207677633928317, 0.4944332411591214, 0.48205969526058867, 0.4906938641598165, 0.47095865221417826, 0.4763967213007469, 0.44046334137990256, 0.4428895887854927, 0.44238327414667317, 0.42091987654123925, 0.4200085059266915, 0.41652920297375917, 0.40881601560936154, 0.4128093180670919, 0.3938457161845501, 0.38094601267758077, 0.3881516733843149, 0.36935563740351135, 0.3821559997479425, 0.3791072204159928, 0.3573495675079606, 0.3513113078920203, 0.35645364953731234, 0.3269962065719957, 0.34489408861675974, 0.3165046321544287, 0.32846712250877064, 0.3170750661257503, 0.33216618158325717, 0.31437057924702055], "accuracy": [0.32967904210090637, 0.3255844712257385, 0.486989825963974, 0.6016378402709961, 0.6415268778800964, 0.691850483417511, 0.7083608508110046, 0.7428345084190369, 0.7428345084190369, 0.7701756954193115, 0.7688548564910889, 0.7744023203849792, 0.7835160493850708, 0.7720248103141785, 0.7922335267066956, 0.7913089394569397, 0.8082155585289001, 0.8061022162437439, 0.8197067975997925, 0.8252542614936829, 0.8170651197433472, 0.8247259259223938, 0.8249900937080383, 0.8362171649932861, 0.837537944316864, 0.8333113193511963, 0.8445383906364441, 0.8441421389579773, 0.8438779711723328, 0.8486329317092896, 0.8466516733169556, 0.8544445633888245, 0.863558292388916, 0.8535200357437134, 0.8639545440673828, 0.8578787446022034, 0.8610487580299377, 0.8669924736022949, 0.8689737319946289, 0.8659358024597168, 0.8813894987106323, 0.8679170608520508, 0.8848236799240112, 0.8815215826034546, 0.8795403242111206, 0.8735966086387634, 0.8819178342819214], "val_loss": [1.9617468288966589, 1.4168077196393694, 0.887577976499285, 0.7662565197263446, 0.64743401323046, 0.6286648682185582, 0.6056382145200457, 0.6325862577983311, 0.5077097245625087, 0.5246714523860386, 0.5588385377611432, 0.4535366807665144, 0.4676999705178397, 0.4577950750078474, 0.48530190331595285, 0.4504688467298235, 0.451362098966326, 0.40782950605664936, 0.4030901108469282, 0.4380678279059274, 0.4326263495853969, 0.4082621676581247, 0.3819326843534197, 0.42685405697141376, 0.40010338170187815, 0.36426516090120586, 0.4079803228378296, 0.37026909419468473, 0.36422314814158846, 0.45171662739345003, 0.3682856559753418, 0.3622855714389256, 0.3691601668085371, 0.36750872646059307, 0.36063442059925627, 0.423281158719744, 0.3503774404525757, 0.3737104024205889, 0.3393023610115051, 0.34702943904059275, 0.3544020652770996, 0.3331632358687265, 0.3687806044306074, 0.3355629103524344, 0.37826182161058697, 0.3455177800995963, 0.36858991214207243], "val_accuracy": [0.21033333241939545, 0.5569999814033508, 0.606333315372467, 0.6496666669845581, 0.734333336353302, 0.7123333215713501, 0.7273333072662354, 0.7256666421890259, 0.765999972820282, 0.7649999856948853, 0.7536666393280029, 0.8013333082199097, 0.7910000085830688, 0.7979999780654907, 0.7739999890327454, 0.7983333468437195, 0.8046666383743286, 0.8259999752044678, 0.8243333101272583, 0.7990000247955322, 0.8053333163261414, 0.8196666836738586, 0.8339999914169312, 0.8116666674613953, 0.8266666531562805, 0.8423333168029785, 0.8176666498184204, 0.8336666822433472, 0.8450000286102295, 0.79666668176651, 0.843999981880188, 0.8420000076293945, 0.8360000252723694, 0.8453333377838135, 0.8456666469573975, 0.8276666402816772, 0.8496666550636292, 0.8373333215713501, 0.8560000061988831, 0.8486666679382324, 0.843999981880188, 0.8656666874885559, 0.8473333120346069, 0.8569999933242798, 0.8360000252723694, 0.8519999980926514, 0.8383333086967468]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 3, 5, 3, 8, 6, 5, 4, 9], [3, 2, 5, 3, 2, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.7917143106460571, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 1, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, beta))), beta)), tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.541678157102761, 1.9450269212276865, 2.2900758344168834, 1.7977499270310036, 2.0362660311405545, 2.2118282231514903, 1.9333404680331936, 2.307925246033009, 1.9237214278834702, 1.2509722164231143, 0.9229045803473531, 0.8213017639262313, 0.7816356944842597, 0.7003604559897747, 0.6487853484162565, 0.647178022207412, 0.6433803210121812, 0.6293229950165563, 0.6144152671795449, 0.5856294057876552, 0.5790926969959878, 0.5657456757417366, 0.5797559535538027, 0.5473338597958602, 0.5397347259861588, 0.5318932545309478, 0.5547079722312275, 0.5066095405739092, 0.518359516385272, 0.5307449122083626, 0.49400405108479933, 0.49645891758854266, 0.5061196599339198, 0.47735750127257515, 0.4712253797717177, 0.4848030865263268, 0.47806599964523644], "accuracy": [0.23999471962451935, 0.3195086419582367, 0.21820102632045746, 0.41209879517555237, 0.3323206901550293, 0.20816272497177124, 0.38105931878089905, 0.10011887550354004, 0.3459252417087555, 0.5791836977005005, 0.6671509742736816, 0.6996433734893799, 0.71100252866745, 0.7395324110984802, 0.7576277852058411, 0.7559106945991516, 0.7601373791694641, 0.7648923397064209, 0.769911527633667, 0.7791573405265808, 0.7810064554214478, 0.7903843522071838, 0.7810064554214478, 0.7950072884559631, 0.7968564033508301, 0.7984414100646973, 0.7948752045631409, 0.8137630224227905, 0.8047813773155212, 0.800290584564209, 0.8138951063156128, 0.8064984679222107, 0.8064984679222107, 0.8157442808151245, 0.8230088353157043, 0.8150838613510132, 0.8161405324935913], "val_loss": [1.6751744747161865, 1.4992557593754359, 1.6195354121071952, 1.4360924788883753, 1.8895679201398576, 1.7196042878287179, 1.9831349509102958, 1.9621267999921526, 0.9290407044546944, 0.6872133527483258, 0.5891816786357335, 0.5647844587053571, 0.5122248956135341, 0.49759793281555176, 0.507197380065918, 0.48131346702575684, 0.473110488482884, 0.48640923840659006, 0.4423152208328247, 0.43392843859536306, 0.4526881490434919, 0.4732402563095093, 0.42836884941373554, 0.452304550579616, 0.42241564818790983, 0.45227103573935373, 0.41959577798843384, 0.4409438371658325, 0.40401495354516165, 0.4093743477548872, 0.43629961354391916, 0.389117385659899, 0.39932399136679514, 0.39418292897088186, 0.41603502205439974, 0.39440873691013884, 0.40149626561573576], "val_accuracy": [0.2446666657924652, 0.45533332228660583, 0.4283333420753479, 0.4596666693687439, 0.1469999998807907, 0.3869999945163727, 0.10366666316986084, 0.1393333375453949, 0.597000002861023, 0.7120000123977661, 0.737333357334137, 0.7453333139419556, 0.7670000195503235, 0.7756666541099548, 0.7636666893959045, 0.7776666879653931, 0.7866666913032532, 0.7753333449363708, 0.8019999861717224, 0.7993333339691162, 0.7976666688919067, 0.7699999809265137, 0.8059999942779541, 0.7846666574478149, 0.8109999895095825, 0.7906666398048401, 0.8083333373069763, 0.7956666946411133, 0.8186666369438171, 0.8059999942779541, 0.7913333177566528, 0.8286666870117188, 0.8166666626930237, 0.8206666707992554, 0.8006666898727417, 0.8203333616256714, 0.8180000185966492]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 6, 3, 2, 7, 2, 1, 9, 6, 5, 8, 9], [3, 2, 5, 0, 2, 0, 0, 4, 2, 0], [99, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.37314286828041077, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.6578810517625127, 2.305590589111665, 2.3019187752407904, 2.2744998418266085, 2.2501644371774896, 2.3075022296882843, 2.279718793095095, 2.190406742065716, 2.304949478907214, 2.3040135612797665, 2.303793630359384, 2.303262936897313], "accuracy": [0.21595561504364014, 0.09536388516426086, 0.10381719470024109, 0.14238542318344116, 0.18095363676548004, 0.10355303436517715, 0.13710209727287292, 0.20618148148059845, 0.10130762308835983, 0.10038304328918457, 0.09470347315073013, 0.10117553919553757], "val_loss": [1.9770194462367467, 1.9735334260123116, 1.9709593909127372, 1.7080437796456474, 1.983238628932408, 1.9736644881112235, 1.6181342601776123, 1.9782511166163854, 1.974559920174735, 1.9738575390407018, 1.9737926891871862, 1.9735901015145438], "val_accuracy": [0.1003333330154419, 0.09799999743700027, 0.09966666996479034, 0.23800000548362732, 0.09799999743700027, 0.09799999743700027, 0.3356666564941406, 0.09966666996479034, 0.09966666996479034, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 6, 2, 9, 6, 5, 8, 9, 0], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.15000000596046448, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 13, 7, 5, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))), beta)), tf.math.add(beta, tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.045212513955514, 3.458002276755028, 2.746299847761685, 2.205297233878566, 2.1316909148251897, 1.9075384690477832, 2.243596241222538, 2.6639751518848094, 2.499133985213568, 2.4752960163195055, 2.436360295296597], "accuracy": [0.3121120035648346, 0.18082155287265778, 0.1340641975402832, 0.21555937826633453, 0.2491084337234497, 0.2793554365634918, 0.30260202288627625, 0.16431118547916412, 0.10130762308835983, 0.09628847241401672, 0.09668471664190292], "val_loss": [1.8417202404567175, 2.970501354762486, 1.8707340104239327, 1.7937792369297572, 1.5762320927211217, 1.2383333614894323, 1.4244969912937708, 2.171394552503313, 2.069558688572475, 2.164426871708461, 2.1169164521353587], "val_accuracy": [0.2006666660308838, 0.3036666810512543, 0.1863333284854889, 0.30399999022483826, 0.2993333339691162, 0.44566667079925537, 0.33033332228660583, 0.09799999743700027, 0.10199999809265137, 0.09933333098888397, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 9, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 3, 2, 4, 2, 0], [99, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.13657142221927643, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.653944980199106, 2.305706294362949, 2.3016834312567953, 2.30393351146243, 2.30626702560583, 2.3027662795375066], "accuracy": [0.21555937826633453, 0.09668471664190292, 0.10368511080741882, 0.16140536963939667, 0.09826971590518951, 0.10289261490106583], "val_loss": [1.977057933807373, 1.9735719135829382, 1.9693546976361955, 1.9815083231244768, 1.9744175502232142, 1.9709922245570592], "val_accuracy": [0.10599999874830246, 0.09799999743700027, 0.09966666996479034, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 3, 3, 6, 9, 5, 9, 8, 6, 5, 8, 9], [0, 0, 5, 0, 0, 2, 2, 4, 2, 0], [57, 16, 79, 81, 53, 45], [0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1], [1, 3, 6, 9, 7], [4, 6], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 2, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 6, 3, 5, 7, 2, 3, 8, 6, 2, 8, 9, 1, 2, 3, 3, 0, 5, 7, 5, 5], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0, 2, 1, 2], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 34, 34, 21, 13, 5, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.subtract(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), beta)))))), tf.math.add(beta, beta))), grad)), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.square(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(alpha)))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3020291688372634, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 6, 3, 2, 6, 6, 1, 9, 4, 1, 8, 9, 4], [3, 3, 5, 3, 2, 2, 2, 4, 2, 0], [36, 47, 64, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), beta), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), beta)), tf.math.pow(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 7, 5, 3, 8, 6, 5, 8, 9], [3, 2, 5, 3, 2, 2, 2, 4, 2, 0], [89, 47, 64, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 9, 7, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.divide_no_nan(grad, beta))))), tf.math.add(beta, beta))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 3, 8, 9], [1, 3, 0, 0, 0, 2, 0, 4, 2, 0], [60, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 9, 0, 4, 2, 1, 2, 3], [1, 1, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 4, 7, 5, 4, 1, 1, 2, 2, 0, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [95845493.60076289, 1812960088.455422, 8520571673.799499, 23359359405.022324, 50053151947.82618, 93944469397.6912], "accuracy": [0.09879804402589798, 0.09747721254825592, 0.10196803510189056, 0.10170386731624603, 0.1014397069811821, 0.09430722147226334], "val_loss": [368101211.4285714, 2942741211.428571, 9929427529.142857, 23533703168.0, 45960715117.71429, 79416751835.42857], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 8, 3, 2, 7, 5, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 0, 4, 2, 0], [36, 47, 64, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 9, 0, 4, 2, 1, 2, 3], [1, 3, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 4, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [95845493.60076289, 1812960088.455422, 8520571673.799499, 23359359405.022324, 50053151947.82618, 93944469397.6912], "accuracy": [0.09879804402589798, 0.09747721254825592, 0.10196803510189056, 0.10170386731624603, 0.1014397069811821, 0.09430722147226334], "val_loss": [368101211.4285714, 2942741211.428571, 9929427529.142857, 23533703168.0, 45960715117.71429, 79416751835.42857], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 7, 4, 3, 9, 6, 5, 8, 9], [3, 2, 5, 3, 2, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 18, 18, 11, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, beta))))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.sqrt(beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 9, 6, 5, 3, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 3, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), beta)), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 6, 2, 7, 5, 1, 8, 6, 3, 0, 9, 6], [3, 2, 5, 0, 2, 2, 1, 4, 2, 0], [60, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.divide_no_nan(tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(beta))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026761081886016, 2.302483831650514, 2.3036098365912174, 2.3014593235238068, 2.3035619793913193, 2.3036498863463075], "accuracy": [0.09140139818191528, 0.08994849026203156, 0.08836349099874496, 0.09074098616838455, 0.09232597798109055, 0.09179764986038208], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 2, 5, 1, 8, 6, 3, 8, 9], [3, 2, 5, 3, 2, 2, 2, 4, 2, 0], [46, 47, 79, 81, 53, 45], [0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(grad, beta))), tf.math.add(beta, beta))))), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3026761081886016, 2.302483831650514, 2.3036098365912174, 2.3014593235238068, 2.3035619793913193, 2.3036498863463075], "accuracy": [0.09140139818191528, 0.08994849026203156, 0.08836349099874496, 0.09074098616838455, 0.09232597798109055, 0.09179764986038208], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [8, 5, 3, 1, 7, 5, 1, 2, 6, 8, 8, 9], [3, 2, 5, 0, 2, 2, 2, 0, 2, 0], [60, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.03342857211828232, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 12, 6, 2, 5, 5, 4, 1, 1, 3, 2, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(beta))), grad))), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), beta)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3032230004469447, 2.304688752681635, 2.307875840828608, 2.3076129022008, 2.3131409917352, 2.317141881157237], "accuracy": [0.08902391046285629, 0.08585391938686371, 0.08400475233793259, 0.08070268481969833, 0.07753269374370575, 0.0734381154179573], "val_loss": [1.9724046843392509, 1.9737155778067452, 1.9753029687064034, 1.9770692416599818, 1.9795381682259696, 1.9824773924691337], "val_accuracy": [0.03500000014901161, 0.03033333271741867, 0.024666666984558105, 0.023666666820645332, 0.024666666984558105, 0.03200000151991844]}}]