[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 2, 2, 4, 1, 5, 1, 3, 6, 0, 2, 9, 0, 9, 8, 6, 7], [3, 3, 3, 3, 0, 2, 2, 4, 2, 0], [45, 62, 0, 81, 53, 45], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8225714564323425, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.276147505106817, 2.0235977806451064, 1.784633638600254, 1.2689948692896174, 1.1678950042457565, 0.9909386168680706, 0.8394167269335888, 0.8969448786118185, 0.7877585452388007, 0.7350078537211898, 0.6927470472258599, 0.6689639055119561, 0.6423052662808614, 0.6353858027160916, 0.6150141631009132, 0.6058369168925358, 0.5826868724514386, 0.5744803679727875, 0.5380241500073263, 0.571849451435398, 0.5319109441046512, 0.5181738438780723, 0.516811079683557, 0.4951980987623021, 0.5050074125498262, 0.49480460008468297, 0.4820189642246452, 0.46468833539590165, 0.4751024360134617, 0.4590416261194373, 0.44555771714581976, 0.46615984884739364, 0.4360307539183277, 0.4353097147984732, 0.43599348543909294], "accuracy": [0.24963676929473877, 0.3337736129760742, 0.41183462738990784, 0.5543521046638489, 0.5851274728775024, 0.6306960582733154, 0.6827367544174194, 0.6749438643455505, 0.7030775547027588, 0.7149649858474731, 0.7378153204917908, 0.746268630027771, 0.7578919529914856, 0.7619865536689758, 0.7744023203849792, 0.7775723338127136, 0.7812706232070923, 0.7803460359573364, 0.8000264167785645, 0.7839123010635376, 0.7994980812072754, 0.8058380484580994, 0.8076872229576111, 0.8133667707443237, 0.8137630224227905, 0.8169330358505249, 0.8203672170639038, 0.8267071843147278, 0.8249900937080383, 0.828820526599884, 0.8367455005645752, 0.8256505131721497, 0.8350284099578857, 0.8383304476737976, 0.8400475382804871], "val_loss": [1.755434853690011, 1.2996388162885393, 1.1429469244820731, 1.2026458127158028, 0.7355528218405587, 0.6724581377846854, 0.6708731821605137, 0.6056312492915562, 0.5895048720496041, 0.5760845627103534, 0.5854124001094273, 0.4978236811501639, 0.5214165960039411, 0.4806064878191267, 0.49485317298344206, 0.45932906014578684, 0.4432506390980312, 0.4540738378252302, 0.513526167188372, 0.43508163520268034, 0.4320889711380005, 0.4172699877193996, 0.43683631079537527, 0.42272513253348215, 0.42873536688940866, 0.4224603772163391, 0.4131772347858974, 0.4285556844302586, 0.42224559613636564, 0.38626798561641146, 0.38480131115232197, 0.37912183148520334, 0.3962517465863909, 0.3906076209885733, 0.3796476892062596], "val_accuracy": [0.34933334589004517, 0.4569999873638153, 0.5063333511352539, 0.49033331871032715, 0.6786666512489319, 0.7080000042915344, 0.7170000076293945, 0.7459999918937683, 0.7323333621025085, 0.7609999775886536, 0.7256666421890259, 0.7746666669845581, 0.7680000066757202, 0.7850000262260437, 0.7663333415985107, 0.7986666560173035, 0.8033333420753479, 0.7960000038146973, 0.7633333206176758, 0.8159999847412109, 0.8180000185966492, 0.8159999847412109, 0.8019999861717224, 0.8190000057220459, 0.8076666593551636, 0.8226666450500488, 0.8143333196640015, 0.7910000085830688, 0.8133333325386047, 0.8386666774749756, 0.8293333053588867, 0.8346666693687439, 0.8316666483879089, 0.8309999704360962, 0.8386666774749756]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [6, 8, 6, 0, 2, 5, 1, 2, 2, 0, 8, 9], [3, 3, 0, 3, 0, 2, 2, 4, 2, 0], [45, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8208571672439575, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2761498850098283, 2.037012864066121, 1.7572293302024344, 1.2548934206939282, 0.9925312897186269, 1.027117146240832, 0.8492833287362268, 0.8301496099975398, 0.8104045890294298, 0.7180711851537566, 0.710176878877052, 0.6846129944484782, 0.6474125072893419, 0.628063190646254, 0.6173882637088798, 0.5981680078277215, 0.6055725425651061, 0.5829664144250207, 0.5525438767760548, 0.525418144584946, 0.528859718199246, 0.5235771834771584, 0.5207189794906835, 0.5014906377052949, 0.4971296244947083, 0.5134311207155463, 0.49332962456459317, 0.4617824912850631, 0.49599348964188567, 0.46617859276829615, 0.461205099563809, 0.46708692163288035, 0.45329352962562924, 0.43105933755112674, 0.4356147413437377, 0.4364810627189531, 0.4340019058108944], "accuracy": [0.24976885318756104, 0.33060362935066223, 0.4189670979976654, 0.5528992414474487, 0.6284506916999817, 0.6166952848434448, 0.6745476126670837, 0.6839255094528198, 0.6902654767036438, 0.7213049530982971, 0.7264562249183655, 0.7387399077415466, 0.7503632307052612, 0.7607977986335754, 0.7705719470977783, 0.7769119143486023, 0.7716285586357117, 0.7788931727409363, 0.793422281742096, 0.8082155585289001, 0.7988376617431641, 0.8005547523498535, 0.8067626357078552, 0.811649739742279, 0.8145555257797241, 0.8094043135643005, 0.8132346868515015, 0.8276317715644836, 0.8171972036361694, 0.8267071843147278, 0.8348963260650635, 0.8234050869941711, 0.828292191028595, 0.8393871188163757, 0.8408400416374207, 0.8413683772087097, 0.8409721255302429], "val_loss": [1.7552793366568429, 1.2723174435751778, 1.1900765895843506, 0.7533704893929618, 0.6514417103358677, 0.7190639461789813, 0.6342426197869437, 0.7277967418943133, 0.5985041516167777, 0.6536068916320801, 0.5364546605518886, 0.52134941305433, 0.5008203983306885, 0.4792983702250889, 0.5254528863089425, 0.4999117170061384, 0.4861152001789638, 0.47741726466587614, 0.4555654525756836, 0.4239560535975865, 0.44283224855150494, 0.4206527726990836, 0.4347075734819685, 0.42254169498171124, 0.4528456245149885, 0.4212266802787781, 0.4176412309919085, 0.44074723550251554, 0.4233070697103228, 0.3912886381149292, 0.3848570840699332, 0.3720459427152361, 0.4067445397377014, 0.3884198580469404, 0.3961515171187265, 0.3940785697528294, 0.37678143807819914], "val_accuracy": [0.3490000069141388, 0.4606666564941406, 0.5423333048820496, 0.6703333258628845, 0.7210000157356262, 0.684333324432373, 0.7283333539962769, 0.6766666769981384, 0.737666666507721, 0.7149999737739563, 0.7603333592414856, 0.7580000162124634, 0.7733333110809326, 0.7839999794960022, 0.753000020980835, 0.7693333625793457, 0.784333348274231, 0.7753333449363708, 0.8090000152587891, 0.8163333535194397, 0.8096666932106018, 0.8180000185966492, 0.7979999780654907, 0.8190000057220459, 0.7916666865348816, 0.8226666450500488, 0.8159999847412109, 0.8043333292007446, 0.815666675567627, 0.8363333344459534, 0.8379999995231628, 0.8410000205039978, 0.8226666450500488, 0.8320000171661377, 0.8270000219345093, 0.831333339214325, 0.8326666951179504]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 3, 1, 2, 6, 6, 1, 3, 2, 0, 8, 9], [0, 3, 3, 3, 0, 3, 2, 3, 2, 2], [52, 47, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 1, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.7919999957084656, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 3, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(grad, tf.math.add(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0466823504034397, 1.9771916461485315, 2.203920084393146, 1.592290913817779, 1.145437263526055, 0.9520578943994996, 0.8505690493414887, 0.8044115443743609, 0.7688963037865462, 0.7330378344376735, 0.6959737783425582, 0.6737246480222392, 0.6519041177445808, 0.647872634260583, 0.596206938042664, 0.6090948139167874, 0.5883709985849926, 0.573357307096876, 0.5490595206151848, 0.5680052375654896], "accuracy": [0.3218861520290375, 0.3556993901729584, 0.2915070652961731, 0.4344208240509033, 0.5690133571624756, 0.6516972780227661, 0.6745476126670837, 0.695813000202179, 0.7136441469192505, 0.722229540348053, 0.739928662776947, 0.7479857206344604, 0.7481178045272827, 0.7536653280258179, 0.7810064554214478, 0.7695152759552002, 0.7804781198501587, 0.7854973077774048, 0.8004226684570312, 0.7852331399917603], "val_loss": [1.1483808244977678, 3.0746396609715054, 1.321681192943028, 0.9389276504516602, 0.8442085470472064, 0.6789384739739555, 0.6673234701156616, 0.565988370350429, 0.6419644185474941, 0.5577742542539325, 0.5492210899080548, 0.5134575026375907, 0.4964914321899414, 0.4760725327900478, 0.45111215114593506, 0.46808000973292757, 0.4837007522583008, 0.4694286584854126, 0.4383170689855303, 0.44463987009865896], "val_accuracy": [0.49433332681655884, 0.2653333246707916, 0.41200000047683716, 0.5483333468437195, 0.6036666631698608, 0.6803333163261414, 0.6786666512489319, 0.7436666488647461, 0.6940000057220459, 0.7483333349227905, 0.7369999885559082, 0.7696666717529297, 0.7766666412353516, 0.7876666784286499, 0.7946666479110718, 0.7879999876022339, 0.7726666927337646, 0.781333327293396, 0.7906666398048401, 0.7900000214576721]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 3, 1, 2, 6, 2, 1, 3, 2, 0, 8, 9], [0, 3, 1, 3, 0, 2, 0, 1, 1, 0], [21, 62, 0, 81, 53, 45], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1], [1, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [26, 57]], "fitness": -0.7714285850524902, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 4, 4, 2, 2, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(alpha, tf.math.add(grad, tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.sqrt(alpha)))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.negative(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2955164399523036, 2.27717906303567, 2.260109153138396, 2.2380776091683825, 2.215145845202848, 2.184837430018822, 2.149708942698765, 2.1026296769906625, 2.050040445842952, 1.9782761874341883, 1.9077413762643936, 1.820904405204265, 1.7313230440931833, 1.6414904102531516, 1.5493861835835208, 1.4831318275535805, 1.4113991263677668, 1.3549811336043458, 1.3070632449828905, 1.2516125539479364, 1.224248868190003, 1.1854875873911572, 1.156228379031151, 1.1206967684224676, 1.0847433578257926, 1.0792667663265858, 1.0406666734766226, 1.0352210290774284, 1.0086720908212468, 0.9941465482420815, 0.9827802451436923, 0.964353528461751, 0.957903353435142, 0.9371903401245578, 0.9271165481994276, 0.9128473627883776, 0.9169585194570072, 0.9081970105995009, 0.8907763878619902, 0.8847590663949213, 0.8726509100079867, 0.8618828859846936, 0.8677012511940995, 0.8496038048589518, 0.8539784380142889, 0.8377752662051419, 0.8467961109041963, 0.8258443690640594, 0.8247551197042681, 0.8198597063603827, 0.7996412678370151, 0.8045952043135278, 0.8019188818615409, 0.795720156756028, 0.7915685300451654, 0.7849145811609604, 0.7913480441898734, 0.7866203808718354, 0.7733928278657376, 0.7659943616306777, 0.768696259702784, 0.7495056842343683, 0.7607479367147836, 0.7600045318002667, 0.7617536245509067, 0.7649807046354408, 0.7571822433518286, 0.7488638028776042, 0.7465421822266005, 0.7373955661374123], "accuracy": [0.11055342853069305, 0.1516312211751938, 0.20221899449825287, 0.2452780306339264, 0.28503501415252686, 0.31898030638694763, 0.35279354453086853, 0.3778893053531647, 0.389380544424057, 0.42108044028282166, 0.4373266398906708, 0.45489367842674255, 0.46664905548095703, 0.48685774207115173, 0.5083872675895691, 0.5145951509475708, 0.5388984084129333, 0.5456346869468689, 0.5564654469490051, 0.5688812732696533, 0.5818253755569458, 0.5885615944862366, 0.5921278595924377, 0.6159027814865112, 0.6188086271286011, 0.6231673359870911, 0.6304318904876709, 0.6406022906303406, 0.6400739550590515, 0.6469422578811646, 0.6505085229873657, 0.6585655808448792, 0.654999315738678, 0.6668868064880371, 0.6682076454162598, 0.6737551093101501, 0.6672830581665039, 0.6734909415245056, 0.6781138777732849, 0.6799629926681519, 0.6861709356307983, 0.6857746839523315, 0.6865671873092651, 0.6922467350959778, 0.6923788189888, 0.6931713223457336, 0.693831741809845, 0.7025492191314697, 0.705058753490448, 0.7003037929534912, 0.7022850513458252, 0.7079645991325378, 0.7051908373832703, 0.7096816897392273, 0.7082287669181824, 0.7160216569900513, 0.7091533541679382, 0.7152291536331177, 0.7152291536331177, 0.7173424959182739, 0.7209087014198303, 0.7268524765968323, 0.7153612375259399, 0.7195879220962524, 0.72672039270401, 0.7164179086685181, 0.7185312509536743, 0.7218332886695862, 0.724739134311676, 0.7257958054542542], "val_loss": [1.9547993115016393, 1.9381383487156458, 1.920135770525251, 1.8992484637669154, 1.8741813387189592, 1.8428130831037248, 1.8042152268545968, 1.7562909126281738, 1.6985059465680803, 1.62858932358878, 1.5501792090279716, 1.4634793485913957, 1.373912743159703, 1.285543441772461, 1.20095614024571, 1.1274678707122803, 1.0632274832044328, 1.0084524154663086, 0.9627418177468436, 0.9220345360892159, 0.8882610116686139, 0.8585381167275565, 0.8331592082977295, 0.811134764126369, 0.7894102334976196, 0.7735455717359271, 0.7567826168877738, 0.7435036897659302, 0.7308834791183472, 0.720170089176723, 0.7088394505637032, 0.7000738212040493, 0.6909595557621547, 0.6831654821123395, 0.674645185470581, 0.6664106164659772, 0.6619678565434047, 0.6564019237245832, 0.6505542142050607, 0.6441355092184884, 0.63887619972229, 0.6344418866293771, 0.6290108476366315, 0.6242477553231376, 0.6202950988497052, 0.6158787863595145, 0.6138927255358014, 0.6092274018696376, 0.6053668601172311, 0.6022108622959682, 0.5981671639851162, 0.5947551386696952, 0.5919843060629708, 0.5888301645006452, 0.5865244013922555, 0.5833276510238647, 0.5806341171264648, 0.5780718326568604, 0.575947608266558, 0.5735034431729998, 0.5714285373687744, 0.5680682148252215, 0.5660890511104039, 0.5632944277354649, 0.5616068158830915, 0.5608652830123901, 0.5576536655426025, 0.555184006690979, 0.5539640017918178, 0.551729849406651], "val_accuracy": [0.15933333337306976, 0.2983333468437195, 0.3633333444595337, 0.39533331990242004, 0.43066665530204773, 0.45500001311302185, 0.4790000021457672, 0.5046666860580444, 0.5346666574478149, 0.54666668176651, 0.5573333501815796, 0.5703333616256714, 0.5823333263397217, 0.5963333249092102, 0.6073333621025085, 0.6306666731834412, 0.6473333239555359, 0.6543333530426025, 0.6629999876022339, 0.6729999780654907, 0.6740000247955322, 0.6776666641235352, 0.6840000152587891, 0.6869999766349792, 0.6909999847412109, 0.6916666626930237, 0.6959999799728394, 0.6980000138282776, 0.7043333053588867, 0.706333339214325, 0.7096666693687439, 0.7089999914169312, 0.7123333215713501, 0.7179999947547913, 0.7200000286102295, 0.7229999899864197, 0.7253333330154419, 0.7266666889190674, 0.7269999980926514, 0.7283333539962769, 0.7289999723434448, 0.7326666712760925, 0.7350000143051147, 0.7366666793823242, 0.737666666507721, 0.7383333444595337, 0.737666666507721, 0.7406666874885559, 0.7433333396911621, 0.7440000176429749, 0.7453333139419556, 0.7436666488647461, 0.7456666827201843, 0.7456666827201843, 0.7486666440963745, 0.7486666440963745, 0.7513333559036255, 0.7506666779518127, 0.7506666779518127, 0.7516666650772095, 0.7556666731834412, 0.753333330154419, 0.7559999823570251, 0.7566666603088379, 0.7613333463668823, 0.7553333044052124, 0.7580000162124634, 0.7590000033378601, 0.7586666941642761, 0.7593333125114441]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 9, 2, 6, 8, 1, 3, 2, 2, 8, 9, 6, 4, 1, 6, 4, 5, 5], [3, 1, 3, 1, 0, 2, 3, 5, 2, 5, 1, 3], [52, 47, 0, 81, 53, 45], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [87, 57]], "fitness": -0.3134285807609558, "mapping_values": [1, 1, 1, 0, 1, 0, 31, 31, 19, 12, 3, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad), alpha)), tf.math.add(beta, grad)), alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, beta)), tf.math.add(beta, grad)))))), tf.math.square(tf.math.square(tf.math.add(beta, alpha)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.0778404743664174, 2.277720231358653, 3.0276153787661535, 2.303842917189008, 2.3029667853742244, 2.3033456858107284, 2.303057047543257], "accuracy": [0.17276449501514435, 0.14700831472873688, 0.14132875204086304, 0.09932637959718704, 0.10130762308835983, 0.09642054885625839, 0.09787346422672272], "val_loss": [1.9763354573931013, 1.58606903893607, 1.975111961364746, 1.9738598551068987, 1.9735283851623535, 1.973527090890067, 1.973442758832659], "val_accuracy": [0.11666666716337204, 0.30566665530204773, 0.09833333641290665, 0.09833333641290665, 0.10366666316986084, 0.10000000149011612, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [2, 2, 2, 4, 6, 5, 1, 3, 2, 0, 8, 9], [3, 1, 3, 3, 3, 2, 3, 2, 2], [45, 62, 0, 81, 53, 45], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [7, 57]], "fitness": -0.18628571927547455, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(grad)))), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.464835500106237, 2.2496538248516864, 2.274870082734047, 2.3410744954881224, 2.3064119178133082, 2.303799450909221, 2.303417615981197, 2.3026218757873766], "accuracy": [0.2106723040342331, 0.15215955674648285, 0.12653546035289764, 0.11979923397302628, 0.1018359512090683, 0.10011887550354004, 0.09879804402589798, 0.10777968913316727], "val_loss": [1.9834143774850028, 1.9731995037623815, 1.768597194126674, 1.978152070726667, 1.9744157109941756, 1.9736815180097307, 1.9736700057983398, 1.9736693246023995], "val_accuracy": [0.10366666316986084, 0.10000000149011612, 0.1886666715145111, 0.1003333330154419, 0.09933333098888397, 0.10199999809265137, 0.10300000011920929, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [2, 9, 2, 4, 6, 5, 1, 3, 2, 0, 8, 9], [3, 1, 3, 1, 0, 2, 3, 2, 2], [68, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [29, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 4, 3, 9, 5, 4, 3, 2, 0, 2, 9, 0, 6, 8, 6], [3, 1, 3, 1, 0, 2, 3, 2, 2], [76, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 10, 10, 6, 4, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.multiply(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.square(tf.math.add(beta, grad)))), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 2, 2, 4, 1, 5, 1, 3, 6, 0, 2, 9, 0, 9, 8, 6, 7], [3, 3, 3, 3, 0, 2, 2, 4, 2, 0], [68, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [9, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028985101785233, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [4, 2, 2, 0, 5, 5, 1, 3, 2, 0, 2, 5, 0, 6, 8, 6], [3, 3, 3, 3, 0, 2, 2, 4, 2, 0], [75, 47, 0, 81, 53, 45], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 9, 0, 4, 2, 1, 2, 3], [1, 1, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 16, 10, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.add(grad, grad)))), grad), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))))), tf.math.square(tf.math.add(beta, tf.math.negative(beta)))), tf.math.divide_no_nan(beta, tf.math.add(beta, grad)))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [95797017.95376538, 1862911538.8212917, 8434529999.410381, 23552826785.255318, 50965041338.649055, 92691781874.10277], "accuracy": [0.10421344637870789, 0.09826971590518951, 0.1014397069811821, 0.09959053993225098, 0.09774138033390045, 0.0948355570435524], "val_loss": [368101211.4285714, 2942741211.428571, 9929427529.142857, 23533703168.0, 45960715117.71429, 79416751835.42857], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 3, 9, 2, 6, 8, 1, 8, 2, 0, 8, 9], [3, 3, 0, 1, 0, 3, 2, 2, 2, 2], [68, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [29, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), alpha)))))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08294808864593506, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 2, 4, 9, 5, 1, 3, 6, 0, 2, 9, 0, 9, 8, 6, 7], [3, 3, 3, 3, 0, 3, 2, 2, 3, 2], [52, 47, 37, 81, 53, 45], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [2, 0, 0, 1, 3, 3], [40, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 13, 7, 3, 3, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(beta)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3033949626891874, 2.3034689662919745, 2.305005887747913, 2.3056596121248267, 2.307309190311515, 2.3067849019672484, 2.3090445519186455, 2.3056262376175862, 2.310863311563768, 2.3133828940723458], "accuracy": [0.0940430611371994, 0.09893012791872025, 0.09655263274908066, 0.09602430462837219, 0.09602430462837219, 0.1010434553027153, 0.09351472556591034, 0.09694888442754745, 0.09919429570436478, 0.09813763201236725], "val_loss": [1.9739766802106584, 1.9737927573067802, 1.9746219771248954, 1.9754273550851005, 1.9767358643668038, 1.9795498166765486, 1.977860382625035, 1.9769898823329382, 1.9753929546901159, 1.9789059502737862], "val_accuracy": [0.09933333098888397, 0.09966666996479034, 0.09799999743700027, 0.09933333098888397, 0.10066666454076767, 0.09933333098888397, 0.1003333330154419, 0.09799999743700027, 0.10000000149011612, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [4, 3, 1, 2, 6, 8, 1, 3, 2, 0, 8, 9, 2], [3, 3, 0, 3, 0, 3, 2, 2, 2, 2], [52, 47, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [29, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08294808864593506, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 8, 2, 3, 1, 5, 1, 3, 6, 0, 2, 9, 0, 9, 8, 6, 7], [3, 3, 3, 3, 0, 3, 2, 4, 2, 0], [45, 62, 66, 81, 53, 45], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 2, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, sigma), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0816272646188736, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 2, 2, 4, 1, 5, 1, 3, 9, 0, 2, 9, 0, 4, 8, 6, 7], [2, 3, 0, 3, 0, 3, 2, 4, 2, 3], [31, 62, 0, 81, 53, 45], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 14, 8, 4, 3, 2, 2, 0, 0, 8, 4, 4, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), grad)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(beta, grad), beta))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 2, 4, 1, 5, 1, 3, 6, 0, 2, 9, 0, 9, 8, 6, 7, 2, 4, 6, 6, 8, 3, 3], [3, 3, 3, 3, 0, 3, 3, 4, 2, 0, 2, 0, 0, 1, 0, 1], [52, 47, 0, 31, 53, 45, 62], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1], [5, 2, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 40, 40, 24, 16, 7, 5, 4, 4, 0, 1, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), grad), tf.math.add(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.negative(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), grad)), tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)))), tf.math.multiply(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08294808864593506, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [8, 2, 2, 4, 1, 5, 1, 3, 6, 0, 2, 9, 0, 9, 8, 6, 7], [3, 1, 3, 3, 0, 2, 0, 2, 2], [68, 62, 0, 81, 53, 45], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 2, 1, 2, 3], [2, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 8, 6, 0, 8, 5, 1, 2, 2, 0, 8, 9], [3, 3, 0, 1, 0, 3, 2, 2, 2, 2], [75, 47, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [29, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))))))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08294808864593506, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [4, 3, 9, 2, 6, 8, 1, 3, 2, 0, 8, 9], [3, 3, 3, 1, 1, 2, 1, 4, 2, 2], [57, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 4, 2, 1, 2, 3], [1, 2, 0, 1, 3, 3], [87, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [2, 5, 2, 0, 1, 5, 1, 3, 2, 0, 2, 9, 0, 6, 8, 6], [3, 3, 3, 3, 3, 0, 2, 3, 2, 0], [52, 47, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.08742856979370117, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 2, 2, 2, 1, 1, 0, 4, 3, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(grad, tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.negative(alpha)))", "other_info": {"loss": [2.30345239766506, 2.304788700735344, 2.307758044478538, 2.308351518739059, 2.3116864170522393, 2.314392892046218, 2.320476575880916, 2.3240408462823705, 2.333291491024908, 2.3416848372254218, 2.377951768127651, 2.6298890194507843e+17, 3.3521421087605368, 7.540422875662962, 13.27915703631537, 19.017078867237], "accuracy": [0.09153348207473755, 0.08796724677085876, 0.08070268481969833, 0.08334434032440186, 0.07977809756994247, 0.07898560166358948, 0.06921146810054779, 0.0742306187748909, 0.07106062769889832, 0.07726852595806122, 0.07832518965005875, 0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.972388403756278, 1.9738499096461706, 1.9754319190979004, 1.9772032329014368, 1.979442732674735, 1.9818361827305384, 1.9848600796290807, 1.9885482106889998, 1.9950335366385323, 2.0074009895324707, 2.060870034354074, 2.3481567927769254, 4.491367340087891, 9.34529413495745, 14.280025482177734, 19.224310193743026], "val_accuracy": [0.03333333507180214, 0.029666665941476822, 0.02566666714847088, 0.02666666731238365, 0.03166666626930237, 0.03700000047683716, 0.04899999871850014, 0.06700000166893005, 0.0820000022649765, 0.09799999743700027, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]