[{"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.8028571605682373, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 8, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2822717966231623, 2.1407856645207475, 1.679174273430695, 1.3434011596242088, 1.0171521264076107, 0.9119464699319167, 0.8144605248249313, 0.7823472091345787, 0.7487322522381183, 0.7200333639032663, 0.6909519753058069, 0.6740371262896503, 0.6459999828369484, 0.6369869153198234, 0.6045443919813156, 0.5874188132195378, 0.5754416880039507, 0.5613203073583968, 0.539627919202121, 0.5337996944507604, 0.5183689016290329, 0.5090667643582958, 0.5060132742479193, 0.49328775288028615, 0.4764609885348022, 0.4724554276075881, 0.45518585868310685, 0.45640761402178875, 0.4400174413036283, 0.4338482904388542, 0.4229885622172103, 0.41816456500392124, 0.4050863072612676, 0.40504556586477564, 0.39199018672850655, 0.3898179779719085, 0.3819244822113033, 0.37161867216813993, 0.376956035105654, 0.36672335770608505, 0.36207451593716855, 0.3578057186147871, 0.3535692414681925, 0.3501844011191065, 0.33204215321369523, 0.3349898366951089, 0.327144858658731], "accuracy": [0.14951789379119873, 0.35226520895957947, 0.4492141008377075, 0.5274072289466858, 0.6305639743804932, 0.6633205413818359, 0.6960771083831787, 0.7030775547027588, 0.7107383608818054, 0.72672039270401, 0.741909921169281, 0.7433628439903259, 0.7532690763473511, 0.7609298825263977, 0.7670056819915771, 0.7750627398490906, 0.7857614755630493, 0.7921014428138733, 0.791969358921051, 0.7997622489929199, 0.8038568496704102, 0.8084797263145447, 0.8105930685997009, 0.8175934553146362, 0.8253863453865051, 0.8226125836372375, 0.829216718673706, 0.8327829837799072, 0.8354246616363525, 0.8413683772087097, 0.8453308939933777, 0.8487650156021118, 0.8540483713150024, 0.8521991968154907, 0.8560295701026917, 0.8552370667457581, 0.8618412613868713, 0.8622375130653381, 0.8603883385658264, 0.8614450097084045, 0.8654074668884277, 0.8709549307823181, 0.8676528930664062, 0.86553955078125, 0.8768987059593201, 0.8737286925315857, 0.8782195448875427], "val_loss": [1.9035872731889998, 1.6337676048278809, 0.9640006678444999, 0.7428009680339268, 0.6914346729006086, 0.6442941767828805, 0.6030058009283883, 0.5882892608642578, 0.5667362042835781, 0.5480074882507324, 0.5377775260380336, 0.5227177143096924, 0.5081821339471, 0.4934871196746826, 0.48676371574401855, 0.47843475001198904, 0.46140417030879427, 0.4505448511668614, 0.4430500268936157, 0.4292741332735334, 0.42029151746204924, 0.420916702066149, 0.41012708629880634, 0.40205428430012297, 0.3957274726458958, 0.38926221643175396, 0.38793277740478516, 0.3814253807067871, 0.3770982027053833, 0.3761411990438189, 0.36663717882973806, 0.3603894965989249, 0.3610001121248518, 0.35852187871932983, 0.35517983777182444, 0.35220785651888165, 0.35050186089106966, 0.34968481745038715, 0.34668861968176706, 0.342434755393437, 0.3491560220718384, 0.3443257638386318, 0.34226085458483013, 0.3435233575957162, 0.33763228143964497, 0.33618963616234915, 0.33770839657102314], "val_accuracy": [0.3696666657924652, 0.48633334040641785, 0.6493333578109741, 0.6833333373069763, 0.7003333568572998, 0.7223333120346069, 0.7403333187103271, 0.7459999918937683, 0.7453333139419556, 0.7573333382606506, 0.762666642665863, 0.7706666588783264, 0.7749999761581421, 0.7863333225250244, 0.7806666493415833, 0.7889999747276306, 0.7940000295639038, 0.8003333210945129, 0.8133333325386047, 0.8083333373069763, 0.8169999718666077, 0.8196666836738586, 0.8220000267028809, 0.8230000138282776, 0.8330000042915344, 0.8339999914169312, 0.8336666822433472, 0.8346666693687439, 0.8373333215713501, 0.8379999995231628, 0.843666672706604, 0.8476666808128357, 0.847000002861023, 0.8479999899864197, 0.8486666679382324, 0.8510000109672546, 0.8496666550636292, 0.8519999980926514, 0.8519999980926514, 0.8539999723434448, 0.8543333411216736, 0.859333336353302, 0.8583333492279053, 0.8579999804496765, 0.8569999933242798, 0.8579999804496765, 0.8569999933242798]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 0, 2, 6, 5, 1, 9], [0, 4, 3, 0, 0], [9, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.800000011920929, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 7, 5, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.square(grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2576804156033212, 2.0622100991469647, 1.6249447440616112, 1.2734817413527337, 1.0830015202539156, 0.9813713747921905, 0.9234453527651222, 0.8825488684042302, 0.8512855777021223, 0.8093614805297388, 0.7843142065074796, 0.7759958285980567, 0.7633081510822456, 0.7444937495098233, 0.719530914445768, 0.71936118803508, 0.708492636971895, 0.6977645834565178, 0.6713461245937496, 0.678266451036327, 0.6580387751313879, 0.6607581229572677, 0.6615606714957709, 0.6469314296357997, 0.6381547310096933, 0.6365380506347971, 0.6187765548620021, 0.6199481951766845, 0.6090244333253734, 0.6121692314848309], "accuracy": [0.20116232335567474, 0.3875313699245453, 0.4876502454280853, 0.5565975308418274, 0.6207898855209351, 0.6572447419166565, 0.6688680648803711, 0.6844538450241089, 0.691850483417511, 0.7086250185966492, 0.7078325152397156, 0.7156254053115845, 0.7195879220962524, 0.7224937081336975, 0.7322678565979004, 0.7314753532409668, 0.7395324110984802, 0.7424382567405701, 0.7512878179550171, 0.7500990629196167, 0.7556465268135071, 0.7523444890975952, 0.7549861073493958, 0.7594769597053528, 0.765949010848999, 0.7604015469551086, 0.7714964747428894, 0.7680623531341553, 0.7693831920623779, 0.7708360552787781], "val_loss": [1.8554622105189733, 1.5259272371019637, 1.0609534808567591, 0.8524359124047416, 0.7402724368231637, 0.6858762332371303, 0.7012400286538261, 0.634650434766497, 0.6199263504573277, 0.5967076846531459, 0.5809460878372192, 0.5801143816539219, 0.5666254758834839, 0.5511577980858939, 0.5422477551868984, 0.5331945759909493, 0.5254144327981132, 0.5264240333012172, 0.5287351778575352, 0.5251331159046718, 0.5144791432789394, 0.5073533569063459, 0.5031533581869942, 0.4973894698279245, 0.4956892047609602, 0.4923914670944214, 0.48443099430629183, 0.5035472427095685, 0.4868302345275879, 0.4736521244049072], "val_accuracy": [0.4560000002384186, 0.5400000214576721, 0.6439999938011169, 0.6710000038146973, 0.7049999833106995, 0.721666693687439, 0.699999988079071, 0.734666645526886, 0.7403333187103271, 0.7483333349227905, 0.7493333220481873, 0.7486666440963745, 0.7590000033378601, 0.7559999823570251, 0.7703333497047424, 0.7683333158493042, 0.7739999890327454, 0.7773333191871643, 0.7643333077430725, 0.7753333449363708, 0.7689999938011169, 0.781333327293396, 0.778333306312561, 0.7863333225250244, 0.7950000166893005, 0.7933333516120911, 0.7906666398048401, 0.7829999923706055, 0.793666660785675, 0.7923333048820496]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [6, 9, 0, 2, 1, 8, 5, 9, 0], [1, 0, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [15, 57]], "fitness": -0.7197142839431763, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 6, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3017306962364055, 2.2879106846341934, 2.2565006391955813, 2.2118277095328107, 2.140623582116428, 2.027608441922328, 1.8301202209004321, 1.6042744840975403, 1.4622834083536722, 1.4011254618905082, 1.3353874751243293, 1.1926232886399417, 1.0305537522791746, 0.9556222345850739, 0.9351216816647083, 0.9284012979362714, 0.8875073952256665, 0.8532480956572489, 0.852409079452437, 0.8562343448396561, 0.8538680399224712, 0.8184578689948175, 0.8023978569220716, 0.776867353267453, 0.7577192349330608, 0.7573650026790627, 0.7469224988461611, 0.7371327327604953, 0.7377866370141656, 0.7135724945547652, 0.6981732514335683, 0.6942597493566716, 0.6949640962945598, 0.6857718360532686, 0.6780466532521418, 0.6694104433563549, 0.6553484509256081, 0.6561204877118267, 0.6470705336268552, 0.627580050141379, 0.6280398469449286, 0.6201716468334513, 0.6129975818671318, 0.6013935978748638, 0.5984292997502695, 0.5886485296674393, 0.5837421994703069, 0.5819600704339486, 0.5766206677358983, 0.5716642607566844, 0.5669253381283339, 0.5556490645590019, 0.5524941781500563, 0.5446735828339447, 0.5305436567906864, 0.5413836837287246, 0.536081008387752, 0.540678624290564, 0.5198266145150423, 0.5089819836751928, 0.5145637688855957, 0.5106172775508957, 0.5065316977423447, 0.5005364967705693, 0.4987385439173641, 0.49038647224858706, 0.4841208372291179, 0.4788941527441146, 0.4813852960627864, 0.4829589954582676, 0.47549356488094446, 0.47900010379487185, 0.46757849053054235, 0.4701922728778853, 0.4705429803095379, 0.45803693473425683, 0.4547102942466421, 0.46167040304217466, 0.45314204885723125, 0.44295379919398653, 0.4500143240117252, 0.4441439721405136, 0.4400875639087252, 0.4300776441312028, 0.44297144293643387, 0.4307795157403899, 0.43409003421079684, 0.429929123657286, 0.4216155643240178, 0.42286407187425573, 0.4243264773801774], "accuracy": [0.09034473448991776, 0.12957337498664856, 0.21635186672210693, 0.3031303584575653, 0.3619072735309601, 0.389380544424057, 0.4209483563899994, 0.4525161683559418, 0.48831066489219666, 0.5147272348403931, 0.5600317120552063, 0.6034870147705078, 0.6297714710235596, 0.6326773166656494, 0.639809787273407, 0.6520935297012329, 0.6684718132019043, 0.6760005354881287, 0.6765288710594177, 0.6762647032737732, 0.681547999382019, 0.6983225345611572, 0.6956809163093567, 0.7098137736320496, 0.7112666964530945, 0.7038700580596924, 0.71100252866745, 0.7195879220962524, 0.7166820764541626, 0.728701651096344, 0.7331924438476562, 0.737022876739502, 0.7331924438476562, 0.7384757399559021, 0.7403249144554138, 0.739928662776947, 0.739400327205658, 0.7436270117759705, 0.746268630027771, 0.7572315335273743, 0.7592127919197083, 0.7597411274909973, 0.7631752490997314, 0.7712323069572449, 0.7712323069572449, 0.7714964747428894, 0.7800818681716919, 0.7769119143486023, 0.783119797706604, 0.7817989587783813, 0.7844406366348267, 0.7865539789199829, 0.785101056098938, 0.7921014428138733, 0.7947431206703186, 0.7905164361000061, 0.7930260300636292, 0.7881389260292053, 0.8042530417442322, 0.8033285140991211, 0.8061022162437439, 0.8018755912780762, 0.8113855719566345, 0.8083476424217224, 0.8076872229576111, 0.8125742673873901, 0.8146876096725464, 0.8198388814926147, 0.8183859586715698, 0.8206313848495483, 0.8190463781356812, 0.8193105459213257, 0.8189142942428589, 0.819970965385437, 0.8211596608161926, 0.8227446675300598, 0.8256505131721497, 0.8245938420295715, 0.8255184292793274, 0.8333113193511963, 0.8301413059234619, 0.8341038227081299, 0.8335754871368408, 0.8345000743865967, 0.8330471515655518, 0.8362171649932861, 0.8333113193511963, 0.8308017253875732, 0.8325188159942627, 0.8392550349235535, 0.8347642421722412], "val_loss": [1.9630787031991142, 1.9414746420724052, 1.9077435220990862, 1.8576479639325822, 1.772616182054792, 1.6172430855887276, 1.3627081939152308, 1.081932204110282, 0.8887500422341483, 0.8335241760526385, 0.7710531098502023, 0.747242944581168, 0.6879722390856061, 0.7078383990696498, 0.7161353826522827, 0.688455445425851, 0.6437590292521885, 0.637863312448774, 0.629233717918396, 0.6332661083766392, 0.6211407354899815, 0.6081841843468803, 0.5994606528963361, 0.5766545874731881, 0.5730721950531006, 0.5714086294174194, 0.570088369505746, 0.5717535189219883, 0.5620702164513725, 0.5463685648781913, 0.5346345049994332, 0.5343753440039498, 0.5376286336353847, 0.5291408981595721, 0.5189765862056187, 0.5132315669740949, 0.5078306709017072, 0.5020272391183036, 0.495945794241769, 0.492277775491987, 0.49164979798453196, 0.49038818904331755, 0.48669443811689106, 0.4798905849456787, 0.4711066314152309, 0.46023174694606234, 0.4509684017726353, 0.4460846015385219, 0.44445585353033884, 0.4437367745808193, 0.4435625842639378, 0.44450857809611727, 0.44331763471875874, 0.44004816668374197, 0.4359252282551357, 0.43437592472348896, 0.43363205024174284, 0.42867718424115864, 0.4267914039748056, 0.4298409989901951, 0.4310216563088553, 0.4269025070326669, 0.42106111560549053, 0.414935256753649, 0.4120998041970389, 0.4086911082267761, 0.40516344138554167, 0.4007581387247358, 0.4013203893389021, 0.4067202891622271, 0.41549197265080046, 0.4159711939947946, 0.41064222369875225, 0.4063302533967154, 0.40682510818753925, 0.41144308873585295, 0.40885827371052336, 0.4064199669020517, 0.4080292752810887, 0.4106125405856541, 0.4111200826508658, 0.4040190151759556, 0.39743891784123014, 0.3958293454987662, 0.4004233734948294, 0.39451741320746286, 0.3902142473629543, 0.39249476364680697, 0.4046875068119594, 0.4068924103464399, 0.39925267015184673], "val_accuracy": [0.09099999815225601, 0.28333333134651184, 0.37533333897590637, 0.4166666567325592, 0.45533332228660583, 0.4909999966621399, 0.5479999780654907, 0.6293333172798157, 0.6523333191871643, 0.6209999918937683, 0.6796666383743286, 0.6856666803359985, 0.7056666612625122, 0.6710000038146973, 0.7083333134651184, 0.7113333344459534, 0.722000002861023, 0.7176666855812073, 0.7183333039283752, 0.7126666903495789, 0.7233333587646484, 0.7416666746139526, 0.7419999837875366, 0.7416666746139526, 0.7409999966621399, 0.7459999918937683, 0.753000020980835, 0.7549999952316284, 0.7563333511352539, 0.7609999775886536, 0.7673333287239075, 0.7693333625793457, 0.7673333287239075, 0.7753333449363708, 0.7760000228881836, 0.7716666460037231, 0.7696666717529297, 0.7776666879653931, 0.7856666445732117, 0.7866666913032532, 0.7866666913032532, 0.7873333096504211, 0.7929999828338623, 0.7910000085830688, 0.7979999780654907, 0.7973333597183228, 0.800000011920929, 0.7993333339691162, 0.7953333258628845, 0.7973333597183228, 0.7986666560173035, 0.8016666769981384, 0.8046666383743286, 0.8090000152587891, 0.809333324432373, 0.8133333325386047, 0.812333345413208, 0.8146666884422302, 0.8176666498184204, 0.8193333148956299, 0.8226666450500488, 0.8206666707992554, 0.8216666579246521, 0.8276666402816772, 0.8270000219345093, 0.8263333439826965, 0.8316666483879089, 0.8333333134651184, 0.8343333601951599, 0.8346666693687439, 0.8363333344459534, 0.8366666436195374, 0.8363333344459534, 0.8360000252723694, 0.8353333473205566, 0.8370000123977661, 0.8366666436195374, 0.8370000123977661, 0.840666651725769, 0.8423333168029785, 0.840666651725769, 0.8416666388511658, 0.8416666388511658, 0.8426666855812073, 0.8389999866485596, 0.8446666598320007, 0.8416666388511658, 0.840666651725769, 0.8433333039283752, 0.8443333506584167, 0.843999981880188]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [6, 4, 2, 6, 6, 5, 5, 9, 2], [2, 3, 3, 3, 3, 0, 2, 5, 2], [56, 40, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.682285726070404, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1669267019213403, 1.3765236184329657, 0.9367307554052144, 0.8657294545096806, 0.7909029709302423, 0.7086866442096893, 0.6644084997354104, 0.6356128296517047, 0.5947407071364633, 0.5879312701559716, 0.5480309022636525, 0.5556722356816167, 0.5272911790103456, 0.5208836365857727, 0.5272451165314159, 0.5081210303158572, 0.4799228906670833, 0.48374815323585535, 0.491361355095838, 0.46655948113897583, 0.47033052533183983, 0.4385818891348289, 0.4336059548520708, 0.4471878256457372, 0.446527452918249, 0.44934185254118775, 0.43688249233344983, 0.4637568927184387, 0.44997681194938266, 0.4682501719423399, 0.48393224745599145, 0.495401890742985], "accuracy": [0.2623167335987091, 0.5352001190185547, 0.6513010263442993, 0.6808875799179077, 0.700700044631958, 0.7250033020973206, 0.7500990629196167, 0.759609043598175, 0.7670056819915771, 0.7814027070999146, 0.7854973077774048, 0.7779685854911804, 0.7954035401344299, 0.8058380484580994, 0.7956677079200745, 0.8045172095298767, 0.8127063512802124, 0.8140271902084351, 0.8104609847068787, 0.8197067975997925, 0.8234050869941711, 0.83119797706604, 0.8355567455291748, 0.8277638554573059, 0.8305375576019287, 0.8281601071357727, 0.8339717388153076, 0.8300092220306396, 0.8314621448516846, 0.8181217908859253, 0.8261788487434387, 0.8079513907432556], "val_loss": [1.289322784968785, 0.7051041637148175, 0.6396288701466152, 0.6333079508372715, 0.5454198122024536, 0.5174263715744019, 0.5080210821969169, 0.48197812693459646, 0.4667071785245623, 0.44739567381995066, 0.4424694095339094, 0.4533959286553519, 0.4394063268389021, 0.4432335581098284, 0.41187440497534616, 0.4251304268836975, 0.42234849078314646, 0.40385819332940237, 0.4260569555418832, 0.4260370305606297, 0.42870387009211947, 0.4233714853014265, 0.45855283737182617, 0.43435568468911306, 0.4539750984736851, 0.42291557788848877, 0.5068609373910087, 0.43736005680901663, 0.4449468510491507, 0.46229067019053866, 0.44621922288622173, 0.4806540012359619], "val_accuracy": [0.5753333568572998, 0.6919999718666077, 0.7273333072662354, 0.7200000286102295, 0.7519999742507935, 0.7720000147819519, 0.7663333415985107, 0.7789999842643738, 0.7879999876022339, 0.8026666641235352, 0.8006666898727417, 0.8080000281333923, 0.8143333196640015, 0.8050000071525574, 0.8246666789054871, 0.8296666741371155, 0.8273333311080933, 0.8356666564941406, 0.824999988079071, 0.8336666822433472, 0.8339999914169312, 0.8330000042915344, 0.8360000252723694, 0.8339999914169312, 0.8399999737739563, 0.8420000076293945, 0.8423333168029785, 0.8323333263397217, 0.8410000205039978, 0.8383333086967468, 0.8373333215713501, 0.8323333263397217]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 4, 0, 2, 6, 9, 5, 2], [0, 4, 3, 0, 3], [38, 73, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [10, 57]], "fitness": -0.40685713291168213, "mapping_values": [1, 5, 5, 3, 2, 1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3037616111630417, 2.304160971478417, 2.3010510964998874, 2.300118901238009, 2.298543551972419, 2.300019210277059, 2.298095033783183, 2.29851558645876, 2.2980674370294705, 2.294555729752786, 2.296964363005687, 2.2956765499475247, 2.2942446624409207, 2.2947795030825393, 2.2911039110125015, 2.291562498111798, 2.291137577126669, 2.2906480008396004, 2.2893876067053105, 2.2894423135188844, 2.288919247750829, 2.286923740644182, 2.2869214459873857, 2.285233607019463, 2.284880762291685, 2.285036590892594, 2.2849642566922257, 2.2832590600896614, 2.282519147317675, 2.2819767468452077, 2.2805547172902614, 2.280507296083657, 2.2790106530706598, 2.2785092529414777, 2.2796519897270984, 2.27642071358894, 2.277547190044818, 2.2765268081246335, 2.274930274843965, 2.2753857073924326, 2.273832985501736, 2.2747887215987803, 2.272445220894361, 2.2714962446615603, 2.2730673237121524, 2.2709684873915243, 2.271684156732001, 2.267512264851298, 2.2687567030166385, 2.268328627984537, 2.265841502334621, 2.2662787955151478, 2.2660304534515574, 2.2639949010930374, 2.2630952390555645, 2.262784571774238, 2.2630785900635444, 2.2627382454162324, 2.2602127713455484, 2.2610194184571966, 2.2567802223121927, 2.2596852063597344, 2.2592288507147393, 2.2563406571799014, 2.2548309766920314, 2.2559945048625836, 2.2539168629805646, 2.253243239391056, 2.254339699794934, 2.254003547485305, 2.2506384003699305, 2.251286145923097, 2.2491152859351353, 2.248544570461571, 2.2468173388303656, 2.245654561374449, 2.2459636369102336, 2.247175813555765, 2.244866451929274, 2.2463727866842795, 2.244269539950593, 2.2429162765994692, 2.24219985786698, 2.241376077021905, 2.2397818407598598, 2.239019674317019, 2.2368552172424896, 2.2351982264455126, 2.2347396204515992, 2.2351801534291695, 2.232633340061144, 2.23354911246808, 2.2321887748462808, 2.2310758936343773, 2.2294255038608948, 2.229883900313503, 2.2286778779912226, 2.2269413724409794, 2.2257857535257317, 2.2253608437828998], "accuracy": [0.08625016361474991, 0.08902391046285629, 0.09087307006120682, 0.10130762308835983, 0.09932637959718704, 0.09681680053472519, 0.09879804402589798, 0.1026284471154213, 0.107647605240345, 0.10632677376270294, 0.10751552134752274, 0.10711926966905594, 0.10711926966905594, 0.10645885765552521, 0.11728965491056442, 0.1216483935713768, 0.12561088800430298, 0.12138422578573227, 0.12653546035289764, 0.12442214041948318, 0.12574297189712524, 0.1258750557899475, 0.13459251821041107, 0.14000792801380157, 0.1348566859960556, 0.13419628143310547, 0.13538502156734467, 0.13142253458499908, 0.14555540680885315, 0.14093250036239624, 0.1484612375497818, 0.1434420794248581, 0.15440496802330017, 0.15519747138023376, 0.14898955821990967, 0.1562541276216507, 0.1566503793001175, 0.160084530711174, 0.16193369030952454, 0.15215955674648285, 0.1674811840057373, 0.1578391194343567, 0.17316074669361115, 0.17580240964889526, 0.17276449501514435, 0.17210407555103302, 0.17421740293502808, 0.17910447716712952, 0.17910447716712952, 0.17857614159584045, 0.18901069462299347, 0.18319904804229736, 0.18702945113182068, 0.20063400268554688, 0.19442610442638397, 0.19838859140872955, 0.18597279489040375, 0.1950865089893341, 0.19931316375732422, 0.19812442362308502, 0.21278563141822815, 0.20737022161483765, 0.19852067530155182, 0.21555937826633453, 0.2098798006772995, 0.2106723040342331, 0.21265354752540588, 0.21635186672210693, 0.21423853933811188, 0.2160876989364624, 0.21423853933811188, 0.2211068570613861, 0.22903183102607727, 0.22797517478466034, 0.2382776439189911, 0.24303261935710907, 0.228899747133255, 0.2277110069990158, 0.23946638405323029, 0.2316734939813614, 0.22797517478466034, 0.2405230551958084, 0.24342887103557587, 0.244485542178154, 0.24501386284828186, 0.24541011452674866, 0.251750111579895, 0.251750111579895, 0.2553163468837738, 0.25042927265167236, 0.26099589467048645, 0.25980716943740845, 0.26059964299201965, 0.26535463333129883, 0.2645621597766876, 0.2596750855445862, 0.2603355050086975, 0.2678642272949219, 0.28080835938453674, 0.2694492042064667], "val_loss": [1.9705639566693987, 1.9699044908796037, 1.9692443438938685, 1.968578474862235, 1.9679128783089774, 1.9672540255955286, 1.9666002137320382, 1.9659341403416224, 1.9652818271092005, 1.9646147319248743, 1.9639562198093958, 1.963310650416783, 1.9626588821411133, 1.9620088849748885, 1.9613526889256068, 1.9606949942452567, 1.9600427491324288, 1.9593919345310755, 1.9587451389857702, 1.9580913271222795, 1.9574439185006278, 1.9567875180925642, 1.956127302987235, 1.9554712431771415, 1.9548209054129464, 1.954167366027832, 1.9535187312534876, 1.9528639657156808, 1.9522096088954382, 1.9515525954110282, 1.9508884974888392, 1.9502301897321428, 1.9495628901890345, 1.9489050592694963, 1.948242255619594, 1.947568620954241, 1.9468958718436105, 1.9462249619620187, 1.9455649512154716, 1.944903986794608, 1.944236891610282, 1.943570954459054, 1.9429062434605189, 1.9422282491411482, 1.941556453704834, 1.9408813204084123, 1.9402082306998116, 1.9395178386143275, 1.9388324873788017, 1.9381467274257116, 1.9374544961111886, 1.9367579051426478, 1.9360664912632533, 1.9353540965488978, 1.9346483094351632, 1.9339370046343123, 1.9332289014543806, 1.9325289726257324, 1.9318101065499442, 1.9310894012451172, 1.9303575243268694, 1.9296362059456962, 1.9289109366280692, 1.9281789234706335, 1.9274380547659737, 1.9266941887991769, 1.9259493691580636, 1.9251929691859655, 1.9244433811732702, 1.9236858912876673, 1.9229177747453963, 1.9221585818699427, 1.9213899203709193, 1.9206133569989885, 1.9198249408176966, 1.9190400668552943, 1.9182398659842355, 1.917463779449463, 1.9166688237871443, 1.9158802713666643, 1.915074280330113, 1.914267131260463, 1.9134620257786341, 1.9126433644975935, 1.9118188449314661, 1.9109879221235002, 1.91014221736363, 1.9092869758605957, 1.9084303038460868, 1.9075779914855957, 1.9067066737583704, 1.9058451652526855, 1.9049717358180456, 1.9040960584368025, 1.9031954492841447, 1.9022957938058036, 1.901395525251116, 1.9004883766174316, 1.8995757784162248, 1.8986483301435197], "val_accuracy": [0.04500000178813934, 0.050333332270383835, 0.052666667848825455, 0.0573333315551281, 0.06133333221077919, 0.06300000101327896, 0.06499999761581421, 0.06933332979679108, 0.07400000095367432, 0.07966666668653488, 0.08666666597127914, 0.08966666460037231, 0.09266666322946548, 0.09600000083446503, 0.10166666656732559, 0.10899999737739563, 0.11566666513681412, 0.12066666781902313, 0.12600000202655792, 0.1313333362340927, 0.13733333349227905, 0.14300000667572021, 0.1496666669845581, 0.1536666601896286, 0.1586666703224182, 0.164000004529953, 0.17299999296665192, 0.179666668176651, 0.1850000023841858, 0.19200000166893005, 0.1979999989271164, 0.20466665923595428, 0.21066667139530182, 0.21699999272823334, 0.2253333330154419, 0.22966666519641876, 0.234333336353302, 0.23733332753181458, 0.24266666173934937, 0.25033333897590637, 0.25433334708213806, 0.2593333423137665, 0.26899999380111694, 0.2736666798591614, 0.2800000011920929, 0.2840000092983246, 0.2876666784286499, 0.29366666078567505, 0.2966666519641876, 0.30000001192092896, 0.30300000309944153, 0.3059999942779541, 0.3100000023841858, 0.3149999976158142, 0.3190000057220459, 0.32499998807907104, 0.32733333110809326, 0.3293333351612091, 0.3316666781902313, 0.3356666564941406, 0.3396666646003723, 0.34066668152809143, 0.3423333466053009, 0.34599998593330383, 0.3503333330154419, 0.35199999809265137, 0.3540000021457672, 0.3556666672229767, 0.3556666672229767, 0.35733333230018616, 0.3580000102519989, 0.359333336353302, 0.3610000014305115, 0.36133334040641785, 0.3623333275318146, 0.3643333315849304, 0.3656666576862335, 0.36666667461395264, 0.3686666786670685, 0.37033334374427795, 0.3709999918937683, 0.3720000088214874, 0.3736666738986969, 0.3736666738986969, 0.37533333897590637, 0.3763333261013031, 0.37700000405311584, 0.37833333015441895, 0.3786666691303253, 0.38199999928474426, 0.382999986410141, 0.3843333423137665, 0.38600000739097595, 0.3880000114440918, 0.38866665959358215, 0.3903333246707916, 0.390666663646698, 0.3919999897480011, 0.39399999380111694, 0.39500001072883606]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [6, 2, 0, 2, 6, 9, 5, 2], [0, 4, 3, 0, 3], [56, 7, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.11057142913341522, "mapping_values": [1, 5, 5, 3, 2, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.690741275516027, 2.3495340637952236, 2.3053446181965795, 2.3026323449484125, 2.2948948289299085, 2.6423801236133126, 2.3077072417652604, 2.290126412032287, 2.305223543504446, 2.3034211709089663, 2.3032436913440035, 2.3031745122298117], "accuracy": [0.17619864642620087, 0.16140536963939667, 0.10038304328918457, 0.1026284471154213, 0.11028926074504852, 0.13591335713863373, 0.09734513610601425, 0.11306300014257431, 0.09959053993225098, 0.10196803510189056, 0.09734513610601425, 0.1014397069811821], "val_loss": [1.9768801416669572, 1.976388726915632, 1.973888737814767, 1.9717277799333846, 1.8991965566362654, 1.9805143220084054, 1.9737012045724052, 1.9791126251220703, 1.9741020883832658, 1.9738486834934779, 1.9737815175737654, 1.9737305641174316], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1589999943971634, 0.13366666436195374, 0.10066666454076767, 0.16599999368190765, 0.09799999743700027, 0.09799999743700027, 0.1003333330154419, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [6, 2, 2, 2, 6, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), grad)), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026762878449207, 2.3039142868191638, 2.3061206232775566, 2.309444101180194, 2.314145102902111, 2.321867530151617], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.974430969783238, 1.9761817795889718, 1.9788177353995187, 1.982565062386649, 1.9882301603044783, 1.9982331820896693], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [4, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [6, 2, 4, 2, 6, 9, 5, 2], [0, 4, 1, 0, 3], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 1, 6, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 2, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 13, 13, 9, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(grad)))), grad)), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023078959332386, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 0, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 12, 12, 9, 3, 1, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 8, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 3, 0, 1, 3, 3], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 7, 5, 1, 3, 2, 1, 1, 0, 4, 2, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, sigma))", "other_info": {"loss": [2.3044203718687015, Infinity, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08506141602993011, 0.10513802617788315, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9660306658063615, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.047333333641290665, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 80, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0], [4, 2, 2, 6, 6, 5, 9, 9, 2], [0, 3, 3, 0, 1, 0], [9, 0, 19, 64], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 12, 12, 7, 5, 3, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 0, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 2, 6, 6, 5, 0, 9, 2], [0, 4, 3, 0, 3, 3], [56, 3, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [41, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 9, 5, 2], [0, 4, 3, 0, 3], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0], [3, 2, 2, 6, 6, 4, 5, 9, 2], [2, 3, 3, 0, 3, 0, 2, 5, 2], [89, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08096684515476227, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 31, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [2, 4, 1, 0, 1, 3, 2, 5, 2], [38, 0, 19], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 7, 8, 3], [1, 0, 0, 1, 3, 2], [63, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.302313541204009, 2.302565537518073, 2.3025971201542834, 2.3026075042895418, 2.3026659223523516, 2.3027019752975564, 2.302814547789804, 2.3029628030502125], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.10091137140989304, 0.10500594228506088, 0.09998679161071777, 0.10672302544116974, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736411912100655, 1.9736408506120955, 1.9736384664263045, 1.9736594472612654, 1.9737037249973841, 1.9737804957798548, 1.973883765084403, 1.9740311077662878], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.10199999809265137, 0.1003333330154419, 0.1003333330154419, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [6, 0, 2, 2, 6, 5, 1, 9], [5, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 7, 8, 4], [3, 1, 0, 1, 3, 3], [35, 57]], "fitness": -0.08085714280605316, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, alpha)", "other_info": {"loss": [2.3040367973132643, 2.304999557232356, 2.302365084617775, 2.3018373604448104, 2.3006619765947147, 2.3022873196635247, 2.300929928688782, 2.301421540083587, 2.3015811590706874, 2.298719003105743, 2.3010806051684316, 2.3003532230546995, 2.2999471612279567, 2.3007979486533725, 2.2984477171509288, 2.2991010476065634, 2.2989867772440067, 2.29894058185719, 2.2983676834255085, 2.2989282682351053, 2.299466917275784, 2.2980954652732595, 2.298680129288651, 2.2978184610199794, 2.298372508197523, 2.299153598292377, 2.299678918030819, 2.3002850407260427, 2.2996271609189316], "accuracy": [0.08558975160121918, 0.0878351628780365, 0.08875974267721176, 0.09668471664190292, 0.09391097724437714, 0.09113723784685135, 0.09232597798109055, 0.0944393053650856, 0.09721305221319199, 0.09747721254825592, 0.09602430462837219, 0.09747721254825592, 0.09655263274908066, 0.09272222965955734, 0.10011887550354004, 0.10355303436517715, 0.10711926966905594, 0.10196803510189056, 0.1022322028875351, 0.10632677376270294, 0.09959053993225098, 0.10579843819141388, 0.10527011007070541, 0.109232597053051, 0.10632677376270294, 0.10236428678035736, 0.09853387624025345, 0.09681680053472519, 0.10447761416435242], "val_loss": [1.971167836870466, 1.9709815979003906, 1.9707330295017786, 1.970425742013114, 1.9701330321175712, 1.9697847366333008, 1.9695521082196916, 1.9692623955862862, 1.9690837860107422, 1.968991483960833, 1.9688592638288225, 1.9687919616699219, 1.9687704358782088, 1.9686918939862932, 1.9686430522373743, 1.9685807909284319, 1.9684817450387138, 1.9684333120073592, 1.9684553146362305, 1.9685053825378418, 1.968613828931536, 1.968742915562221, 1.9688975470406669, 1.9690724100385393, 1.969280787876674, 1.9694853510175432, 1.969672748020717, 1.969853469303676, 1.9700229508536202], "val_accuracy": [0.0403333343565464, 0.0416666679084301, 0.04333333298563957, 0.04466666653752327, 0.04800000041723251, 0.05133333429694176, 0.052666667848825455, 0.05666666850447655, 0.05999999865889549, 0.059333331882953644, 0.06199999898672104, 0.06533333659172058, 0.06933332979679108, 0.07233333587646484, 0.07533333450555801, 0.0793333351612091, 0.07999999821186066, 0.08233333379030228, 0.08500000089406967, 0.08500000089406967, 0.08366666734218597, 0.08299999684095383, 0.08433333039283752, 0.08533333241939545, 0.0833333358168602, 0.08399999886751175, 0.0820000022649765, 0.08133333176374435, 0.0806666687130928]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 2, 6, 0, 5, 2, 9, 2], [0, 4, 3, 0, 3, 0], [69, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.04028571397066116, "mapping_values": [1, 2, 2, 1, 1, 0, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3039868597215305, 2.3047220802672426, 2.3022537300725574, 2.302841228595452, 2.304266142665655, 2.307072892936623, 2.30678076609298, 2.3073991410657637], "accuracy": [0.08545766770839691, 0.08730682730674744, 0.0886276587843895, 0.09100515395402908, 0.0886276587843895, 0.07674019038677216, 0.07898560166358948, 0.07713644206523895], "val_loss": [1.9710383415222168, 1.9708843231201172, 1.9712187222072057, 1.9730224609375, 1.9748101234436035, 1.9758636610848563, 1.976294721875872, 1.977365493774414], "val_accuracy": [0.041333332657814026, 0.041999999433755875, 0.04266666620969772, 0.03566666692495346, 0.03166666626930237, 0.026333333924412727, 0.028333334252238274, 0.03233333304524422]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [6, 2, 2, 6, 6, 5, 5, 9, 2], [0, 4, 3, 0, 3, 3], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.04028571397066116, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303986891212559, 2.3047220802672426, 2.3022537300725574, 2.302841547977466, 2.3042662866111474, 2.3070731763558823, 2.306781108022571, 2.307401390155041], "accuracy": [0.08545766770839691, 0.08730682730674744, 0.0886276587843895, 0.09100515395402908, 0.0886276587843895, 0.07674019038677216, 0.07898560166358948, 0.07713644206523895], "val_loss": [1.9710383415222168, 1.9708842550005232, 1.9712188584463937, 1.9730225971766882, 1.9748101234436035, 1.9758635929652624, 1.976294721875872, 1.9773684910365514], "val_accuracy": [0.041333332657814026, 0.041999999433755875, 0.04266666620969772, 0.03566666692495346, 0.03166666626930237, 0.026333333924412727, 0.028333334252238274, 0.03233333304524422]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [1, 1, 3, 0, 3, 0, 2, 5, 2], [9, 0, 19], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [46, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 6, 6, 5, 1, 2, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.negative(tf.math.add(beta, tf.math.add(alpha, grad))))), tf.math.negative(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.304058531854509, 2.305172258820973, 2.302776281970005, 2.302581238472671, 2.3017376456766425, 2.303885810206107], "accuracy": [0.08558975160121918, 0.0874389111995697, 0.08717474341392517, 0.09549596905708313, 0.09272222965955734, 0.08915598690509796], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]