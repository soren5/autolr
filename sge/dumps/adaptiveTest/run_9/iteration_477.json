[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 8, 2, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [38, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.8097142577171326, "mapping_values": [1, 7, 7, 5, 2, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1290740966796875, 1.6240952014923096, 1.3481320142745972, 1.1723731756210327, 0.9899395108222961, 0.8850070238113403, 0.8227066993713379, 0.7485847473144531, 0.7656089663505554, 0.7063302397727966, 0.6774435639381409, 0.6479554772377014, 0.6665347814559937, 0.6228444576263428, 0.6184360384941101, 0.5778216123580933, 0.5868901610374451, 0.6089855432510376, 0.5684946775436401, 0.5619729161262512, 0.5342954993247986, 0.518048107624054, 0.5252137184143066, 0.5085048675537109, 0.4926641285419464, 0.47514599561691284, 0.4745747447013855, 0.4750078618526459, 0.46347540616989136, 0.47393056750297546, 0.4555087387561798, 0.4360870122909546, 0.4430677890777588, 0.4347227215766907, 0.4178778827190399, 0.4087822139263153], "accuracy": [0.320169061422348, 0.4703473746776581, 0.5449742674827576, 0.5865803956985474, 0.6336019039154053, 0.6736230254173279, 0.6913221478462219, 0.7177387475967407, 0.713908314704895, 0.7396644949913025, 0.7427024245262146, 0.7478536367416382, 0.7473253011703491, 0.7671377658843994, 0.7544577717781067, 0.7843085527420044, 0.7808743715286255, 0.7771760821342468, 0.7865539789199829, 0.7915731072425842, 0.8014793395996094, 0.8113855719566345, 0.8012151718139648, 0.8104609847068787, 0.8173292875289917, 0.824329674243927, 0.8257825970649719, 0.8253863453865051, 0.8310658931732178, 0.828820526599884, 0.8278959393501282, 0.841500461101532, 0.8372738361358643, 0.8399154543876648, 0.8446704745292664, 0.8552370667457581], "val_loss": [1.4276981353759766, 1.6090190410614014, 0.9690925478935242, 1.1661834716796875, 0.7780981659889221, 0.7589297890663147, 0.6432439684867859, 0.7223367691040039, 0.6656202673912048, 0.6183379292488098, 0.5638233423233032, 0.563201904296875, 0.5347660183906555, 0.5912624597549438, 0.5012887120246887, 0.5568100810050964, 0.5613115429878235, 0.5045318007469177, 0.5177001357078552, 0.4814158082008362, 0.49825435876846313, 0.5158355832099915, 0.4380935728549957, 0.4844187796115875, 0.44458818435668945, 0.41698145866394043, 0.4559890925884247, 0.4271027147769928, 0.40864381194114685, 0.4075396656990051, 0.39783674478530884, 0.42631077766418457, 0.41635823249816895, 0.4189433157444, 0.4134993851184845, 0.42567554116249084], "val_accuracy": [0.6050000190734863, 0.43033334612846375, 0.6520000100135803, 0.5600000023841858, 0.6980000138282776, 0.7113333344459534, 0.7463333606719971, 0.7066666483879089, 0.7329999804496765, 0.7429999709129333, 0.781000018119812, 0.7863333225250244, 0.7976666688919067, 0.7456666827201843, 0.8096666932106018, 0.7516666650772095, 0.7726666927337646, 0.8026666641235352, 0.7943333387374878, 0.8169999718666077, 0.8069999814033508, 0.7860000133514404, 0.8386666774749756, 0.8153333067893982, 0.8289999961853027, 0.846666693687439, 0.828000009059906, 0.8349999785423279, 0.8479999899864197, 0.8423333168029785, 0.8556666374206543, 0.8410000205039978, 0.8379999995231628, 0.8420000076293945, 0.8493333458900452, 0.8416666388511658]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 8, 2, 0, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 40, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [3, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.8082857131958008, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.129117488861084, 1.6235222816467285, 1.3124094009399414, 1.1076769828796387, 0.9833437204360962, 0.839501142501831, 0.8115739226341248, 0.7486709952354431, 0.7499554753303528, 0.7116699814796448, 0.682885468006134, 0.6481668949127197, 0.657194972038269, 0.6202916502952576, 0.629587709903717, 0.5823867917060852, 0.5873802900314331, 0.5827988386154175, 0.5654776096343994, 0.5586062073707581, 0.5275261998176575, 0.5269866585731506, 0.5076746940612793, 0.5269020199775696, 0.4893950819969177, 0.4807019531726837, 0.4685443341732025, 0.49028316140174866, 0.47749900817871094, 0.4621480107307434, 0.4593319594860077, 0.43168967962265015], "accuracy": [0.3203011453151703, 0.4703473746776581, 0.5502575635910034, 0.6078457236289978, 0.6464139223098755, 0.6826046705245972, 0.6942279934883118, 0.7120591998100281, 0.7107383608818054, 0.7360982894897461, 0.7428345084190369, 0.7555144429206848, 0.7510236501693726, 0.7676661014556885, 0.7613261342048645, 0.7800818681716919, 0.7804781198501587, 0.7837802171707153, 0.7907806038856506, 0.7897239327430725, 0.8083476424217224, 0.8055738806724548, 0.8115176558494568, 0.7997622489929199, 0.8210275769233704, 0.8224804997444153, 0.8235371708869934, 0.8183859586715698, 0.8212917447090149, 0.8294808864593506, 0.8294808864593506, 0.8445383906364441], "val_loss": [1.4275473356246948, 1.5846902132034302, 0.8968428373336792, 0.921486496925354, 0.7216771841049194, 0.7246922850608826, 0.6534906625747681, 0.6308955550193787, 0.7346964478492737, 0.6565576195716858, 0.5828536748886108, 0.5868409872055054, 0.5593951940536499, 0.5438477993011475, 0.5308256149291992, 0.5404615998268127, 0.5732158422470093, 0.49229127168655396, 0.5143486857414246, 0.48854967951774597, 0.4923074245452881, 0.49075019359588623, 0.5117162466049194, 0.45059579610824585, 0.4535512626171112, 0.49994245171546936, 0.420775443315506, 0.4748391807079315, 0.4189630448818207, 0.4328610301017761, 0.4076066017150879, 0.45501044392585754], "val_accuracy": [0.6050000190734863, 0.4350000023841858, 0.6650000214576721, 0.6320000290870667, 0.7193333506584167, 0.7086666822433472, 0.7319999933242798, 0.7563333511352539, 0.7206666469573975, 0.7406666874885559, 0.7770000100135803, 0.7733333110809326, 0.7903333306312561, 0.7889999747276306, 0.7963333129882812, 0.7689999938011169, 0.7706666588783264, 0.8199999928474426, 0.7929999828338623, 0.8149999976158142, 0.8113333582878113, 0.8356666564941406, 0.8033333420753479, 0.8346666693687439, 0.8246666789054871, 0.7906666398048401, 0.8503333330154419, 0.8193333148956299, 0.8460000157356262, 0.831333339214325, 0.8496666550636292, 0.8270000219345093]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 6, 3, 8, 8, 1, 4, 9, 3, 3, 0, 6, 3, 2, 3, 4, 6, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [2, 0, 2, 2, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 70, 16, 56, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 1], [4, 6, 9, 9, 7], [0, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.8025714159011841, "mapping_values": [1, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 5, 4, 2, 2, 2, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad)))))), grad)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.129218101501465, 1.621935486793518, 1.3306220769882202, 1.0908366441726685, 0.9911561012268066, 0.8522623181343079, 0.8066287636756897, 0.7821940183639526, 0.7494463324546814, 0.7033563256263733, 0.6769677400588989, 0.694180965423584, 0.6840670108795166, 0.631991446018219, 0.6062317490577698, 0.5848065614700317, 0.6046690344810486, 0.5680368542671204, 0.561954915523529, 0.5400351881980896, 0.5353847146034241, 0.5273565053939819, 0.5279057025909424, 0.5132175087928772, 0.497001051902771, 0.48040875792503357, 0.48209989070892334, 0.4964510202407837], "accuracy": [0.32043322920799255, 0.4690265357494354, 0.5428609251976013, 0.6120724081993103, 0.6260731816291809, 0.6856426000595093, 0.6976621150970459, 0.700700044631958, 0.7153612375259399, 0.7309470176696777, 0.7412495017051697, 0.7412495017051697, 0.739400327205658, 0.7594769597053528, 0.7642319202423096, 0.7848368883132935, 0.772288978099823, 0.7860256433486938, 0.7932901978492737, 0.7972526550292969, 0.8021397590637207, 0.8054417967796326, 0.8050455451011658, 0.8058380484580994, 0.817461371421814, 0.8220842480659485, 0.8183859586715698, 0.8168009519577026], "val_loss": [1.4277424812316895, 1.5850807428359985, 0.9027447700500488, 0.9478579163551331, 0.8155069947242737, 0.7399404048919678, 0.7237780094146729, 0.6247730255126953, 0.688279926776886, 0.5971713662147522, 0.5911032557487488, 0.6076711416244507, 0.5650126338005066, 0.573193371295929, 0.5274341106414795, 0.5361371040344238, 0.5378340482711792, 0.5059747099876404, 0.49138376116752625, 0.5139181613922119, 0.49361205101013184, 0.4944961667060852, 0.44363459944725037, 0.4730962812900543, 0.45818665623664856, 0.47598615288734436, 0.469628244638443, 0.4504072964191437], "val_accuracy": [0.6053333282470703, 0.44600000977516174, 0.6496666669845581, 0.6110000014305115, 0.6819999814033508, 0.7203333377838135, 0.7059999704360962, 0.7726666927337646, 0.7193333506584167, 0.7793333530426025, 0.762666642665863, 0.7816666960716248, 0.7846666574478149, 0.7563333511352539, 0.8019999861717224, 0.7689999938011169, 0.7873333096504211, 0.796999990940094, 0.8113333582878113, 0.7996666431427002, 0.8053333163261414, 0.8356666564941406, 0.8360000252723694, 0.8169999718666077, 0.8230000138282776, 0.7986666560173035, 0.8213333487510681, 0.8293333053588867]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 9, 6, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 27, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [3, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.5811428427696228, "mapping_values": [1, 6, 6, 5, 1, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), beta))", "other_info": {"loss": [2.1005125045776367, 1.8536492586135864, NaN, NaN, NaN, NaN], "accuracy": [0.29441288113594055, 0.38845595717430115, 0.16338661313056946, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.352183222770691, 2.0565311908721924, NaN, NaN, NaN, NaN], "val_accuracy": [0.5953333377838135, 0.375, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 6, 3, 8, 8, 1, 8, 9, 3, 9, 6, 2, 3, 4, 3, 4, 5, 4, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 70, 16, 25, 98, 52, 94, 1, 97, 93, 42, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [0, 0, 6], [24, 44], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.5785714387893677, "mapping_values": [1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), grad)), grad)), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), beta))", "other_info": {"loss": [2.1010518074035645, 2.0126802921295166, 5.094680189964271e+20, 2.3130667209625244, 2.307270050048828, 2.304924488067627], "accuracy": [0.294148713350296, 0.33681151270866394, 0.17157575488090515, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.3622610569000244, 1.9793914556503296, 2.3175556659698486, 2.309339761734009, 2.305820941925049, 2.304319143295288], "val_accuracy": [0.5923333168029785, 0.2409999966621399, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 3, 8, 5, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [38, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [60, 57, 40, 62]], "fitness": -0.350857138633728, "mapping_values": [1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.square(grad)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.583521842956543, 2.2778444290161133, 2.3181755542755127, 2.4627437591552734, 2.305837869644165, 2.303591728210449, 2.3019180297851562], "accuracy": [0.18993528187274933, 0.14898955821990967, 0.1950865089893341, 0.16140536963939667, 0.09113723784685135, 0.09747721254825592, 0.09866596013307571], "val_loss": [2.306001901626587, 1.992525339126587, 1.8929669857025146, 2.3052027225494385, 2.303138494491577, 2.3024466037750244, 2.2870562076568604], "val_accuracy": [0.09933333098888397, 0.4246666729450226, 0.3163333237171173, 0.09866666793823242, 0.10199999809265137, 0.09933333098888397, 0.11733333021402359]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 3, 6, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.21057142317295074, "mapping_values": [1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.6034111976623535, 2.2698416709899902, 2.6537840366363525, 2.304994583129883, 2.303340196609497, 2.3031599521636963, 2.3030810356140137], "accuracy": [0.20816272497177124, 0.1328754425048828, 0.10474177449941635, 0.09760929644107819, 0.09985470771789551, 0.09259014576673508, 0.09206181764602661], "val_loss": [2.308495044708252, 4.214803695678711, 2.306325674057007, 2.3033676147460938, 2.3027875423431396, 2.30281662940979, 2.302673101425171], "val_accuracy": [0.09933333098888397, 0.164000004529953, 0.09933333098888397, 0.09933333098888397, 0.10233332961797714, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 3, 3, 6, 5, 1, 4, 9, 3, 3, 2, 2, 3, 1, 3, 4, 5, 6, 7, 5, 7, 1, 1, 2, 6, 0, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 70, 16, 64, 98, 52, 94, 79, 28, 93, 55, 1, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [2, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 2, 4, 2, 1, 2, 3], [0, 2, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.13342857360839844, "mapping_values": [1, 13, 13, 8, 5, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [3.126742215756189e+23, 3.5679804076639774e+23, 3.643157014659837e+23, 3.648176906948489e+23, 3.685432484505949e+23, 3.593693799808442e+23], "accuracy": [0.1026284471154213, 0.10685510188341141, 0.11200633645057678, 0.10659094154834747, 0.10593052208423615, 0.10315678268671036], "val_loss": [2.0920931636994355e+23, 2.0920931636994355e+23, 2.0920931636994355e+23, 2.0920931636994355e+23, 2.0920931636994355e+23, 2.0920931636994355e+23], "val_accuracy": [0.13733333349227905, 0.13733333349227905, 0.13733333349227905, 0.13733333349227905, 0.13733333349227905, 0.13733333349227905]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 6, 3, 8, 8, 1, 4, 9, 3, 3, 0, 2, 1, 3, 3, 4, 5, 1, 7, 3, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 85, 72, 25, 98, 52, 94, 1, 75, 93, 55, 41, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1], [9, 6, 1, 9, 7], [0, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 5, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.10028571635484695, "mapping_values": [1, 33, 33, 19, 14, 8, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 2, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad)))))), grad), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.square(grad)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.square(beta))", "other_info": {"loss": [2.3029842376708984, 2.302708387374878, 2.302706480026245, 2.302882194519043, 2.3028438091278076, 2.302966594696045, 2.3029489517211914, 2.3029799461364746], "accuracy": [0.1010434553027153, 0.10011887550354004, 0.09985470771789551, 0.09800554811954498, 0.09998679161071777, 0.09879804402589798, 0.09998679161071777, 0.1002509593963623], "val_loss": [2.3026859760284424, 2.3026859760284424, 2.3027472496032715, 2.302921772003174, 2.3028573989868164, 2.302727460861206, 2.302999258041382, 2.3029539585113525], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.10199999809265137, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 3, 6, 0, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 3, 5, 1, 7, 5, 7, 1, 1, 5, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [2, 0, 1, 1, 0, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16, 70], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [0, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 50, 50, 31, 19, 14, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.303213119506836, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 6, 4, 6, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [38, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1], [9, 6, 1, 9, 7], [0, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [0, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 3, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 4, 2, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [37087992.0, 687278208.0, 3192006912.0, 8960788480.0, 19291824128.0, 35400044544.0], "accuracy": [0.09774138033390045, 0.09932637959718704, 0.09932637959718704, 0.09734513610601425, 0.10777968913316727, 0.09972262382507324], "val_loss": [164082336.0, 1311383680.0, 4424495616.0, 10486008832.0, 20478515200.0, 35384668160.0], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 6, 3, 8, 8, 1, 4, 1, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 3], [47, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1], [4, 6, 1, 9, 7], [0, 0, 6], [24, 44], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [9, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 53, 53, 31, 22, 11, 1, 1, 0, 1, 0, 7, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad)))))), grad), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.square(grad)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(alpha, tf.math.square(grad))))), grad), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(grad))))))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), sigma)), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07396645098924637, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 6, 8, 5, 9, 2, 6, 0, 3, 3, 2, 2, 3, 2, 5, 4, 2, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 0, 6, 0, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 50, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [3, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [7, 6, 1, 9, 7], [4, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [0, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [37087992.0, 687278208.0, 3192006912.0, 8960788480.0, 19291824128.0, 35400044544.0], "accuracy": [0.09774138033390045, 0.09932637959718704, 0.09932637959718704, 0.09734513610601425, 0.10777968913316727, 0.09972262382507324], "val_loss": [164082336.0, 1311383680.0, 4424495616.0, 10486008832.0, 20478515200.0, 35384668160.0], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 8, 2, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [38, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 2, 0, 2, 3, 3, 2], [82, 57, 40, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 3, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 8, 4, 4, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.add(tf.math.pow(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 5, 2, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [38, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [3, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 3, 6, 6, 1, 3, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 4, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 2, 0, 2, 1, 2, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [38, 70, 16, 25, 98, 77, 61, 1, 97, 93, 55, 76, 16], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 8, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 17, 14, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 4, 3, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad))))), grad)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 8, 2, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [0, 70, 42, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [9, 6, 1, 9, 7], [0, 0, 6], [55, 44], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(grad, tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07396645098924637, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 3, 6, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 70, 2, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [59, 57, 40, 62]], "fitness": -0.0705714300274849, "mapping_values": [1, 10, 10, 6, 4, 3, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), beta))", "other_info": {"loss": [2.3028454780578613, 2.3013312816619873, 2.3007569313049316, 2.2997705936431885, 2.300555944442749, 2.302342414855957, 2.301340103149414, 2.3007519245147705, 2.3005518913269043, 2.2996864318847656, 2.2999069690704346, 2.299957752227783, 2.2998623847961426, 2.3002209663391113, 2.3005964756011963, 2.300809383392334], "accuracy": [0.08638224750757217, 0.09694888442754745, 0.09694888442754745, 0.09457138925790787, 0.09919429570436478, 0.09034473448991776, 0.0936468094587326, 0.09470347315073013, 0.09457138925790787, 0.09893012791872025, 0.09985470771789551, 0.10394927859306335, 0.10157178342342377, 0.09602430462837219, 0.10038304328918457, 0.09272222965955734], "val_loss": [2.2990591526031494, 2.2987353801727295, 2.298617362976074, 2.298696517944336, 2.2987513542175293, 2.29870867729187, 2.2985637187957764, 2.2983248233795166, 2.2982654571533203, 2.298203229904175, 2.2981181144714355, 2.298150062561035, 2.2983245849609375, 2.2985222339630127, 2.2987658977508545, 2.298985481262207], "val_accuracy": [0.050333332270383835, 0.05166666582226753, 0.056333333253860474, 0.057999998331069946, 0.059333331882953644, 0.061666667461395264, 0.07133333384990692, 0.07533333450555801, 0.07666666805744171, 0.07999999821186066, 0.0833333358168602, 0.0833333358168602, 0.08299999684095383, 0.08100000023841858, 0.07733333110809326, 0.07633333653211594]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 6, 3, 8, 8, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [47, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1], [9, 6, 1, 9, 7], [0, 0, 6], [24, 44], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.0674285739660263, "mapping_values": [1, 9, 9, 5, 4, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 1, 8, 4, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), beta))", "other_info": {"loss": [2.3030569553375244, 2.3017399311065674, 2.3011651039123535, 2.299971580505371, 2.300783634185791, 2.302492618560791, 2.301492691040039, 2.301173448562622, 2.301039218902588, 2.300239324569702, 2.300755739212036, 2.300935983657837, 2.3006536960601807, 2.3010671138763428, 2.301248788833618, 2.301276206970215, 2.3000218868255615, 2.3011996746063232, 2.3000357151031494, 2.298616409301758, 2.3013010025024414, 2.3001210689544678, 2.2993526458740234, 2.299318552017212, 2.3010241985321045, 2.2996816635131836], "accuracy": [0.08558975160121918, 0.09615638852119446, 0.09655263274908066, 0.09311848133802414, 0.09708096832036972, 0.08836349099874496, 0.09153348207473755, 0.09113723784685135, 0.09087307006120682, 0.09787346422672272, 0.09232597798109055, 0.10117553919553757, 0.09893012791872025, 0.09391097724437714, 0.09642054885625839, 0.08994849026203156, 0.09496764093637466, 0.09245806187391281, 0.09774138033390045, 0.10394927859306335, 0.09285431355237961, 0.1002509593963623, 0.09893012791872025, 0.1010434553027153, 0.09457138925790787, 0.10368511080741882], "val_loss": [2.2994508743286133, 2.299189329147339, 2.2989985942840576, 2.298884391784668, 2.2987418174743652, 2.2986514568328857, 2.298633098602295, 2.2986299991607666, 2.2986319065093994, 2.29868483543396, 2.2987217903137207, 2.298737049102783, 2.2987277507781982, 2.2986395359039307, 2.2985117435455322, 2.2983791828155518, 2.2983062267303467, 2.2982232570648193, 2.2982051372528076, 2.2982068061828613, 2.298144817352295, 2.2981536388397217, 2.2981815338134766, 2.2982177734375, 2.298241138458252, 2.2983312606811523], "val_accuracy": [0.047333333641290665, 0.04866666719317436, 0.050999999046325684, 0.05133333429694176, 0.054999999701976776, 0.056333333253860474, 0.05766666680574417, 0.058666665107011795, 0.06066666543483734, 0.061000000685453415, 0.06266666948795319, 0.06566666811704636, 0.06733333319425583, 0.07133333384990692, 0.07100000232458115, 0.07333333045244217, 0.07400000095367432, 0.07666666805744171, 0.07633333653211594, 0.0793333351612091, 0.08033332973718643, 0.07900000363588333, 0.0793333351612091, 0.08033332973718643, 0.07999999821186066, 0.07833333313465118]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [5, 6, 8, 2, 9, 1, 4, 9, 3, 3, 2, 2, 3, 4, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 0, 9, 9, 5, 6, 2, 7, 0], [0, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3], [58, 70, 16, 25, 98, 52, 94, 1, 97, 93, 55, 76, 16], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 0, 0, 3, 9, 8, 9, 6, 9, 6, 8, 9], [4, 5, 2, 3, 3, 0, 0, 0, 0, 3, 1, 0, 5, 0], [82, 9, 67, 81, 53, 45], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [4, 6, 9, 9, 7], [4, 0, 6], [24, 44], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 2, 4, 2, 1, 2, 3], [2, 2, 0, 2, 3, 3, 2], [47, 57, 40, 62]], "fitness": -0.03685714304447174, "mapping_values": [1, 7, 7, 5, 2, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, beta))", "other_info": {"loss": [2.303875207901001, 2.3043699264526367, 2.3057022094726562, 2.3067634105682373, 2.31076717376709, 2.316471815109253], "accuracy": [0.08440100401639938, 0.0940430611371994, 0.08902391046285629, 0.08149518072605133, 0.08017434924840927, 0.0758156105875969], "val_loss": [2.3014533519744873, 2.30295991897583, 2.304751396179199, 2.3070263862609863, 2.309788703918457, 2.312800884246826], "val_accuracy": [0.03766666725277901, 0.029666665941476822, 0.027666667476296425, 0.026333333924412727, 0.027666667476296425, 0.032999999821186066]}}]