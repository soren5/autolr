[{"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [67, 27, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [3, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [24, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.8191428780555725, "mapping_values": [1, 5, 5, 3, 2, 1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.pow(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0281582025095393, 1.508060588482081, 1.1323239870153918, 0.9375084544437405, 0.8359006279258995, 0.8041059514865616, 0.762719569307324, 0.7135602693831081, 0.7030753410723798, 0.7016346160336697, 0.6621754710952351, 0.6710916781595527, 0.6531298377211257, 0.6234495116341399, 0.6069969832857822, 0.6212396873711059, 0.595389063536861, 0.5763029134457751, 0.5894846848020653, 0.5773075705096706, 0.5657719647517498, 0.5612282939653795, 0.5444969398832717, 0.5375356396207279, 0.5472516048664682, 0.5206207935096188, 0.550552215590028, 0.5070938294936228, 0.4997306758654258, 0.5051796762241962, 0.4883761256756075, 0.485535632649181, 0.49408472084633787, 0.4781170689773093, 0.4759911683414748, 0.47112969065528143, 0.4566044189540733, 0.44867341292611423, 0.44469358236593515, 0.45140226744878026, 0.45185146002233495, 0.4384549385670579, 0.43715434703198974, 0.42773393947907157, 0.42456583942656567, 0.4306778993155931, 0.4120810353256818, 0.4209176950553279, 0.4087729403930428, 0.4100341595056869, 0.39748457534721643, 0.4022853016506931], "accuracy": [0.3331131935119629, 0.4912164807319641, 0.5956941246986389, 0.6479989290237427, 0.6812838315963745, 0.6947563290596008, 0.7157574892044067, 0.7294940948486328, 0.7318716049194336, 0.7313432693481445, 0.7518161535263062, 0.744419515132904, 0.7544577717781067, 0.7619865536689758, 0.767401933670044, 0.7597411274909973, 0.7726852297782898, 0.7807422876358032, 0.776251494884491, 0.7794214487075806, 0.7860256433486938, 0.7873464822769165, 0.7991018295288086, 0.7980451583862305, 0.7942147850990295, 0.8034605979919434, 0.7952714562416077, 0.8083476424217224, 0.816008448600769, 0.8119139075279236, 0.8186501264572144, 0.8219521641731262, 0.8206313848495483, 0.8193105459213257, 0.8212917447090149, 0.828292191028595, 0.832650899887085, 0.8372738361358643, 0.834632158279419, 0.8327829837799072, 0.8366134166717529, 0.8400475382804871, 0.8364813327789307, 0.8381983637809753, 0.8449346423149109, 0.8401796221733093, 0.8450667262077332, 0.8412362933158875, 0.8473120927810669, 0.8490291833877563, 0.859199583530426, 0.8525954484939575], "val_loss": [1.2184857300349645, 1.2432271071842738, 0.7366912024361747, 0.6851076398577008, 0.6200856651578631, 0.5717744486672538, 0.5612687383379255, 0.5729253121784755, 0.5354357957839966, 0.5386951310294015, 0.5247070448739188, 0.5090826920100621, 0.5067641394478934, 0.4947310856410435, 0.49390348366328646, 0.506453445979527, 0.4869421550205776, 0.4896313122340611, 0.4766521624156407, 0.46366957255772184, 0.4541494676045009, 0.44531539508274626, 0.45884261812482563, 0.4597627265112741, 0.43517797333853586, 0.42779754740851267, 0.4251686675207956, 0.44101044109889437, 0.4139766352517264, 0.43400187151772635, 0.41141897439956665, 0.43433300086430143, 0.4085844670023237, 0.41496180636542185, 0.413844815322331, 0.3852081298828125, 0.39497071504592896, 0.39250304869243074, 0.383731484413147, 0.38330007450921194, 0.38099925007138935, 0.3842613101005554, 0.38961493968963623, 0.3780825563839504, 0.39171854087284635, 0.3740580252238682, 0.36658757073538645, 0.36984894956861225, 0.4006038137844631, 0.3790849447250366, 0.37704896926879883, 0.38133926902498516], "val_accuracy": [0.49533334374427795, 0.4480000138282776, 0.6650000214576721, 0.6899999976158142, 0.7233333587646484, 0.7473333477973938, 0.7556666731834412, 0.7536666393280029, 0.7599999904632568, 0.7526666522026062, 0.7509999871253967, 0.7763333320617676, 0.7826666831970215, 0.777999997138977, 0.7820000052452087, 0.777999997138977, 0.7829999923706055, 0.784333348274231, 0.7833333611488342, 0.7940000295639038, 0.800000011920929, 0.7993333339691162, 0.800000011920929, 0.7940000295639038, 0.812333345413208, 0.812333345413208, 0.809333324432373, 0.8100000023841858, 0.8180000185966492, 0.812666654586792, 0.8240000009536743, 0.8053333163261414, 0.8176666498184204, 0.8220000267028809, 0.815666675567627, 0.831333339214325, 0.8309999704360962, 0.831333339214325, 0.82833331823349, 0.8299999833106995, 0.8383333086967468, 0.8320000171661377, 0.8346666693687439, 0.8316666483879089, 0.8243333101272583, 0.8410000205039978, 0.8426666855812073, 0.8363333344459534, 0.8263333439826965, 0.8266666531562805, 0.831333339214325, 0.8309999704360962]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 9, 5, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 0, 2, 7, 5, 5, 9], [4, 4, 3, 0, 0], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.8057143092155457, "mapping_values": [1, 6, 6, 5, 1, 3, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(grad))), grad))), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9801942342465437, 1.5371427863674898, 1.0714643887713946, 0.9103772578742038, 0.8569555770152627, 0.7809122478909984, 0.7429544317912842, 0.6997841676905517, 0.6908320358967532, 0.6786013278963071, 0.666341012715506, 0.6457299002566909, 0.6286424149013293, 0.614198605893956, 0.5845441221954675, 0.6151102516062587, 0.5708494522017007, 0.5546553319770552, 0.5698258815314303, 0.5605973282100943, 0.5423148553904572, 0.5309782845862805, 0.5218699021724237, 0.5070692800008043, 0.5268128461699838, 0.4908706613929123, 0.5266566715928872, 0.48410172652039374, 0.4744459839584238, 0.4854721657320682, 0.4659516984059779, 0.4588769984094143, 0.4579531688062569, 0.4560379685034227, 0.4483480596224299, 0.4386716727819331, 0.43988882487617886, 0.4202147665206137, 0.42111552553232934, 0.42088275120053953, 0.43117157125107725, 0.42114864945364444, 0.4142364612888147, 0.4041403138469066, 0.4061908223420842, 0.4051441822297947], "accuracy": [0.342491090297699, 0.4679698944091797, 0.611940324306488, 0.6667547225952148, 0.6692643165588379, 0.7057191729545593, 0.7152291536331177, 0.7386078238487244, 0.7366266250610352, 0.7390040755271912, 0.7493065595626831, 0.7500990629196167, 0.76106196641922, 0.7635715007781982, 0.778761088848114, 0.7646281719207764, 0.7825914621353149, 0.7926297783851624, 0.787082314491272, 0.7898560166358948, 0.7968564033508301, 0.8059701323509216, 0.8075551390647888, 0.8127063512802124, 0.8062343001365662, 0.8186501264572144, 0.8045172095298767, 0.8186501264572144, 0.8280280232429504, 0.819970965385437, 0.8277638554573059, 0.8358209133148193, 0.8350284099578857, 0.8277638554573059, 0.830669641494751, 0.8408400416374207, 0.8392550349235535, 0.8499537706375122, 0.8436138033866882, 0.8449346423149109, 0.8475762605667114, 0.8442742228507996, 0.8438779711723328, 0.8465195894241333, 0.8510104417800903, 0.8512746095657349], "val_loss": [1.6201624529702323, 1.1295825753893172, 0.7765670163290841, 0.6719419956207275, 0.6616083213261196, 0.568739652633667, 0.5476263931819371, 0.5455507210322789, 0.5355954510825021, 0.5375171899795532, 0.5014212642397199, 0.4862586941037859, 0.49752889360700336, 0.49056548731667654, 0.4828759602137974, 0.4889460972377232, 0.46243904318128315, 0.4787775959287371, 0.4625344617026193, 0.44988417625427246, 0.4413052797317505, 0.4262095434325082, 0.4526985543114798, 0.447364262172154, 0.41832571370261057, 0.4318525620869228, 0.41486291374479023, 0.4169162171227591, 0.39414059264319284, 0.426207891532353, 0.39729495559419903, 0.4053407907485962, 0.39190463508878437, 0.4035734789712088, 0.39540683371680124, 0.3688127228191921, 0.3758434738431658, 0.3796800374984741, 0.37068544966833933, 0.37244698831013273, 0.3719644035611834, 0.3744847433907645, 0.3827607035636902, 0.37272229364940096, 0.373893073626927, 0.36211650712149485], "val_accuracy": [0.34299999475479126, 0.4986666738986969, 0.6506666541099548, 0.6859999895095825, 0.7013333439826965, 0.7393333315849304, 0.7599999904632568, 0.7590000033378601, 0.7723333239555359, 0.7546666860580444, 0.7766666412353516, 0.7803333401679993, 0.7786666750907898, 0.7786666750907898, 0.7833333611488342, 0.7879999876022339, 0.79666668176651, 0.7846666574478149, 0.7956666946411133, 0.7990000247955322, 0.8046666383743286, 0.8086666464805603, 0.8009999990463257, 0.7963333129882812, 0.8233333230018616, 0.8069999814033508, 0.8206666707992554, 0.8253333568572998, 0.8253333568572998, 0.812666654586792, 0.8286666870117188, 0.8196666836738586, 0.8326666951179504, 0.8253333568572998, 0.8266666531562805, 0.8393333554267883, 0.8393333554267883, 0.8356666564941406, 0.8366666436195374, 0.8366666436195374, 0.8399999737739563, 0.8396666646003723, 0.8333333134651184, 0.8360000252723694, 0.8393333554267883, 0.8399999737739563]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [5, 4, 2, 8, 7, 0, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.801714301109314, "mapping_values": [1, 7, 7, 5, 2, 1, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(grad, tf.math.negative(tf.math.add(beta, grad))))), tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.979969674396855, 1.5403010960756403, 1.0831634756942798, 0.9111299738986632, 0.8331084345089619, 0.805813585014517, 0.7240839755656366, 0.720491318702068, 0.6886646222240024, 0.6746105986059681, 0.6574624236139245, 0.648804149292621, 0.6217364126491887, 0.6169778336119485, 0.5844155548507228, 0.6218280809871304, 0.5702716224953451, 0.5615481002896674, 0.5616511342122712, 0.5567276184317332, 0.543655211348276, 0.5305960365983048, 0.5201158237306118, 0.5114295111198813, 0.5198669166313643, 0.4887527017907664, 0.5253079607423428, 0.4817513250372492, 0.4766106337265584, 0.49166091350343294, 0.46196725513830855, 0.4618682475208748, 0.4606588097878923, 0.45649248959129796, 0.4464387103527481, 0.44130542541712253, 0.4345838120939111, 0.42377721491805975, 0.42373239737790824, 0.41800045318780493, 0.4258039193170072, 0.41847122480777654, 0.4162403480913094, 0.40346284772993596, 0.40126137390364713, 0.40498961118769417, 0.3888377645279926, 0.38763006118704, 0.38112464832544735, 0.38259586360806946, 0.37101956627640065, 0.36782369140416027, 0.3856779033828169, 0.3708095656976787, 0.36769477811078227, 0.36687991325771174], "accuracy": [0.3423590064048767, 0.4678378105163574, 0.6111478209495544, 0.6593580842018127, 0.6831330060958862, 0.6959450244903564, 0.726192057132721, 0.7260599732398987, 0.7405890822410583, 0.7461365461349487, 0.7526086568832397, 0.7486461400985718, 0.7656848430633545, 0.7600052952766418, 0.7740060687065125, 0.7619865536689758, 0.7849689722061157, 0.7865539789199829, 0.7936864495277405, 0.7891955971717834, 0.7943468689918518, 0.8047813773155212, 0.806630551815033, 0.8117818236351013, 0.8068947196006775, 0.8168009519577026, 0.8049134612083435, 0.8186501264572144, 0.8259146809577942, 0.8186501264572144, 0.8285563588142395, 0.8302733898162842, 0.8313300609588623, 0.826310932636261, 0.83119797706604, 0.8407079577445984, 0.8409721255302429, 0.8482366800308228, 0.8416325449943542, 0.8466516733169556, 0.8445383906364441, 0.8482366800308228, 0.8413683772087097, 0.8495575189590454, 0.8536521196365356, 0.8510104417800903, 0.8570862412452698, 0.8589354157447815, 0.8601241707801819, 0.8577466607093811, 0.8669924736022949, 0.8648791313171387, 0.86118084192276, 0.8644828796386719, 0.8646149635314941, 0.8623695969581604], "val_loss": [1.6268610954284668, 1.1561365127563477, 0.7236167703356061, 0.6702182292938232, 0.7241065161568778, 0.5776806899479457, 0.5898188352584839, 0.5551518712724958, 0.5180667638778687, 0.5315072877066476, 0.4992189577647618, 0.48371526173182894, 0.49373292922973633, 0.4909832307270595, 0.48858652796064106, 0.4953867197036743, 0.4697192396436419, 0.5048824548721313, 0.46090568814958843, 0.45283055305480957, 0.4429950884410313, 0.4280552353177752, 0.4561107839856829, 0.44909422738211496, 0.4149245023727417, 0.42871436902454924, 0.4130596433367048, 0.4131460360118321, 0.39531757150377544, 0.41996064356395174, 0.40332173449652536, 0.40238321678979055, 0.3892155715397426, 0.40064187560762676, 0.40032805715288433, 0.3677372932434082, 0.3743071130343846, 0.38679479701178415, 0.3656938076019287, 0.37142262288502287, 0.3669243965830122, 0.3827578680855887, 0.38710663999829975, 0.36605073724474224, 0.37788946287972586, 0.36153487648282734, 0.3550661291394915, 0.3594856858253479, 0.39209955079214914, 0.3727439727102007, 0.350711464881897, 0.39048036507197786, 0.34116183859961374, 0.3475593158176967, 0.37147228206907, 0.34254075799669537], "val_accuracy": [0.33899998664855957, 0.4866666793823242, 0.6833333373069763, 0.6833333373069763, 0.6866666674613953, 0.7429999709129333, 0.7283333539962769, 0.7616666555404663, 0.7736666798591614, 0.7556666731834412, 0.7816666960716248, 0.7799999713897705, 0.7846666574478149, 0.7799999713897705, 0.7789999842643738, 0.7836666703224182, 0.7889999747276306, 0.7639999985694885, 0.7960000038146973, 0.7983333468437195, 0.8006666898727417, 0.8029999732971191, 0.79666668176651, 0.7933333516120911, 0.8220000267028809, 0.8080000281333923, 0.8213333487510681, 0.8256666660308838, 0.8236666917800903, 0.812666654586792, 0.8259999752044678, 0.8153333067893982, 0.8303333520889282, 0.8259999752044678, 0.8243333101272583, 0.8389999866485596, 0.8393333554267883, 0.8353333473205566, 0.8389999866485596, 0.8363333344459534, 0.8399999737739563, 0.8370000123977661, 0.8309999704360962, 0.8389999866485596, 0.8333333134651184, 0.8429999947547913, 0.8489999771118164, 0.8433333039283752, 0.8286666870117188, 0.8343333601951599, 0.8496666550636292, 0.8253333568572998, 0.8463333249092102, 0.8483333587646484, 0.8396666646003723, 0.8486666679382324]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [2, 3, 3, 3], [70, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.7785714268684387, "mapping_values": [1, 5, 5, 3, 2, 1, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(alpha, alpha)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(grad, tf.math.square(grad))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9972323581700344, 1.391426478126943, 1.0243524384142748, 0.9248594221358979, 0.7788538398712445, 0.776486723430247, 0.7402280031918315, 0.7078359555716307, 0.6929418117992787, 0.6675350988356823, 0.6270439230203786, 0.6487432003430623, 0.6209054838837949], "accuracy": [0.3280940353870392, 0.5155197381973267, 0.6268656849861145, 0.6494518518447876, 0.7025492191314697, 0.7073041796684265, 0.7170783281326294, 0.7240787148475647, 0.7338528633117676, 0.7437590956687927, 0.7611940503120422, 0.7470611333847046, 0.7589486241340637], "val_loss": [1.43595290184021, 0.8126693623406547, 0.854316166469029, 0.6254150186266217, 0.5752811772482735, 0.5973128591264997, 0.6009682587214878, 0.5370806115014213, 0.5702034745897565, 0.5402060406548637, 0.5330648762839181, 0.5129663603646415, 0.5104728085654122], "val_accuracy": [0.37166666984558105, 0.6583333611488342, 0.5833333134651184, 0.7093333601951599, 0.7416666746139526, 0.7336666584014893, 0.7160000205039978, 0.765999972820282, 0.7283333539962769, 0.7369999885559082, 0.7603333592414856, 0.7606666684150696, 0.7639999985694885]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 8, 5, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 8, 7, 8, 7, 0, 5, 9], [4, 4, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3, 2], [43, 57]], "fitness": -0.7717142701148987, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9973063543566845, 1.3904899606741241, 1.0197509789290509, 0.9095324015714993, 0.8078865445899359, 0.7725557137348114, 0.7355328960394139, 0.7039163623975961, 0.6864162363144448, 0.6671958240094737, 0.6313523752987582, 0.6556422266631378, 0.6234931044842447], "accuracy": [0.3280940353870392, 0.5159159898757935, 0.6328094005584717, 0.651168942451477, 0.6935675740242004, 0.7055870890617371, 0.7153612375259399, 0.7238145470619202, 0.7312111854553223, 0.7436270117759705, 0.7582882046699524, 0.7446836829185486, 0.76106196641922], "val_loss": [1.4387635162898473, 0.8325825078146798, 0.7716753142220634, 0.6293302774429321, 0.5998350722449166, 0.5904519217354911, 0.566315736089434, 0.5404270887374878, 0.5764476571764264, 0.539998071534293, 0.554961017199925, 0.5111520971570697, 0.5209029061453683], "val_accuracy": [0.3713333308696747, 0.6636666655540466, 0.6353333592414856, 0.7070000171661377, 0.7269999980926514, 0.722000002861023, 0.7286666631698608, 0.768666684627533, 0.7253333330154419, 0.7423333525657654, 0.7509999871253967, 0.7609999775886536, 0.7513333559036255]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 9, 8, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 9, 1, 1, 7, 5, 5, 9], [0, 4, 3, 2], [8, 79, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [22, 57]], "fitness": -0.7459999918937683, "mapping_values": [1, 6, 6, 4, 2, 2, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.square(tf.math.add(beta, grad)))))), tf.math.square(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3001173006119964, 2.291745983078936, 2.283531529288392, 2.2763329173879003, 2.2667809931231435, 2.2588805456392014, 2.2508658361378253, 2.24029738568296, 2.2301414096360164, 2.2201598691052262, 2.206715955836284, 2.1927199165944837, 2.1798806256936794, 2.1629804451672503, 2.144232138887042, 2.12384682885093, 2.105283284499078, 2.0822802271116774, 2.054498767966151, 2.0250861524606596, 1.995816706445916, 1.9635909252855772, 1.929382557031926, 1.8936102685202791, 1.8564461036648623, 1.8116153387928273, 1.7724620416856887, 1.7328504833956562, 1.697974048947551, 1.6617655422016457, 1.6129445091702792, 1.5766385788174984, 1.5474723107338328, 1.5123681488951608, 1.4808726967475385, 1.4410798150345854, 1.4141777518906882, 1.3856905473143024, 1.3637538451749132, 1.3377959410811398, 1.3164675101281598, 1.295372129793511, 1.2718057435469905, 1.255001838385799, 1.2382756826537806, 1.2205100822694361, 1.2049893353199836, 1.1904960136844371, 1.1603310828384643, 1.157123621869569, 1.1456228789085285, 1.1383084706532058, 1.1278599148271515, 1.105472279955383, 1.099767552658457, 1.0938715597484499, 1.074777795402145, 1.0711829855677915, 1.054229594823187, 1.0468475654565774, 1.0425416523549598, 1.0259845387335735, 1.027963990147056, 1.0086665744275118, 0.9974716036563158, 0.9925616140599264, 0.9974619420276043, 0.9841352713153725, 0.9773476431792076, 0.9807507173811298, 0.9654761647992304, 0.9578319551560227, 0.951025151612815, 0.9418565226253061, 0.9454081894274102, 0.9444287812720831, 0.9258846302609386, 0.931958678998117, 0.9238750873193324, 0.90959424781856, 0.9143288485708805, 0.9080089347284735, 0.8994588864052757, 0.8969778799976041, 0.8870571962657495, 0.8894804046925867, 0.8942489786753329, 0.8734500395418741, 0.8810464068332038, 0.8732005486068252, 0.8786537674250872, 0.865917072509022, 0.869840131554196, 0.866204163212865, 0.8624747936058952, 0.863013115407548, 0.8583721566146721, 0.8445398111022805, 0.8402564929791603, 0.8473132956990036], "accuracy": [0.09470347315073013, 0.1162329912185669, 0.13617752492427826, 0.15797120332717896, 0.18676528334617615, 0.201294407248497, 0.22295601665973663, 0.2405230551958084, 0.2587504982948303, 0.2769779562950134, 0.2934883236885071, 0.31422534584999084, 0.32360321283340454, 0.33839651942253113, 0.34460440278053284, 0.36626601219177246, 0.36626601219177246, 0.3773609697818756, 0.3921542763710022, 0.3971734344959259, 0.41685378551483154, 0.4287412464618683, 0.4352133274078369, 0.4373266398906708, 0.4418174624443054, 0.45225200057029724, 0.4651961326599121, 0.47246071696281433, 0.4873860776424408, 0.48131024837493896, 0.4971602261066437, 0.5071985125541687, 0.5074626803398132, 0.5160480737686157, 0.5189539194107056, 0.5299167633056641, 0.538237988948822, 0.5385021567344666, 0.5453705191612244, 0.5517104864120483, 0.5480121374130249, 0.5620129704475403, 0.5688812732696533, 0.5723153948783875, 0.5713908076286316, 0.5810328722000122, 0.588297426700592, 0.5893540978431702, 0.5926561951637268, 0.59661865234375, 0.6038832664489746, 0.6078457236289978, 0.6053361296653748, 0.6145819425582886, 0.6140536069869995, 0.6108836531639099, 0.6211860775947571, 0.6256769299507141, 0.6264694333076477, 0.6345264911651611, 0.6297714710235596, 0.643772304058075, 0.6363756656646729, 0.6419231295585632, 0.6457535624504089, 0.6449610590934753, 0.6491876840591431, 0.6560559868812561, 0.6524897813796997, 0.6481310129165649, 0.6583014130592346, 0.6626601219177246, 0.659490168094635, 0.6597543358802795, 0.6635847091674805, 0.6674151420593262, 0.6690001487731934, 0.6666226387023926, 0.6667547225952148, 0.6709813475608826, 0.6778497099876404, 0.6791704893112183, 0.6744155287742615, 0.6824725866317749, 0.6848500967025757, 0.6782459616661072, 0.6741513609886169, 0.6881521344184875, 0.6844538450241089, 0.6893408894538879, 0.6806234121322632, 0.6900013089179993, 0.683529257774353, 0.6881521344184875, 0.6919825673103333, 0.6897371411323547, 0.6890767216682434, 0.6936996579170227, 0.7004358768463135, 0.6959450244903564], "val_loss": [1.9637419155665807, 1.956427846636091, 1.9490430014474052, 1.9415140833173479, 1.9337516512189592, 1.925591196332659, 1.9169326509748186, 1.90781341280256, 1.8978868893214635, 1.8870288303920202, 1.8752776554652624, 1.862142494746617, 1.8478122438703264, 1.8317638805934362, 1.8139920234680176, 1.7945622035435267, 1.7732713563101632, 1.750105721609933, 1.7245301519121443, 1.6967090197971888, 1.6668076855795724, 1.6345741748809814, 1.6003015041351318, 1.5643370151519775, 1.52676180430821, 1.4875867707388741, 1.4476615020206995, 1.4072459765842982, 1.3669123308999198, 1.32762234551566, 1.2880253791809082, 1.249985831124442, 1.2139147009168352, 1.1793169294084822, 1.1464388370513916, 1.1150164944784982, 1.0856965269361223, 1.0585789339882987, 1.0333875928606306, 1.0094376632145472, 0.9874156202588763, 0.9673422404697963, 0.9478187561035156, 0.9303848743438721, 0.9142283030918666, 0.8987486362457275, 0.8841662066323417, 0.8707852363586426, 0.8578733376094273, 0.8456809180123466, 0.8348972967692784, 0.8246507474354335, 0.8149504661560059, 0.8056775501796177, 0.7970592635018485, 0.7891325099127633, 0.7807616676603045, 0.7730369397572109, 0.7658122607639858, 0.758770227432251, 0.7526697601590838, 0.746183088847569, 0.7403672933578491, 0.7342794111796788, 0.728441766330174, 0.7231296130589077, 0.7182023184640067, 0.7137053694043841, 0.7089032275336129, 0.7050802537373134, 0.7003076928002494, 0.6959385190691266, 0.6915861368179321, 0.6880199228014264, 0.6844464710780552, 0.6808339527675084, 0.677263787814549, 0.6741790090288434, 0.6712984868458339, 0.6676305532455444, 0.6648357084819249, 0.6618424313408988, 0.6589620794568744, 0.6560922690800258, 0.6531205347606114, 0.650182843208313, 0.6482143231800624, 0.6452807188034058, 0.6432488645826068, 0.6409189871379307, 0.6386339834758213, 0.6365276745387486, 0.6341551712581089, 0.6324925763266427, 0.6302379369735718, 0.6282916239329747, 0.6258966752461025, 0.6239835875374931, 0.6216766493661063, 0.6203709500176566], "val_accuracy": [0.08733333647251129, 0.14533333480358124, 0.2150000035762787, 0.2763333320617676, 0.32600000500679016, 0.3529999852180481, 0.3700000047683716, 0.382666677236557, 0.3973333239555359, 0.41333332657814026, 0.4246666729450226, 0.437666654586792, 0.44966667890548706, 0.4596666693687439, 0.47066667675971985, 0.4860000014305115, 0.4959999918937683, 0.5059999823570251, 0.5146666765213013, 0.5323333144187927, 0.5386666655540466, 0.5443333387374878, 0.550000011920929, 0.5566666722297668, 0.562666654586792, 0.5663333535194397, 0.5703333616256714, 0.5796666741371155, 0.5846666693687439, 0.5913333296775818, 0.5993333458900452, 0.6036666631698608, 0.6116666793823242, 0.6196666955947876, 0.628333330154419, 0.6359999775886536, 0.6433333158493042, 0.6499999761581421, 0.6520000100135803, 0.6610000133514404, 0.6629999876022339, 0.6650000214576721, 0.6669999957084656, 0.6650000214576721, 0.6676666736602783, 0.6736666560173035, 0.6746666431427002, 0.6769999861717224, 0.6796666383743286, 0.6836666464805603, 0.684333324432373, 0.6866666674613953, 0.687666654586792, 0.6886666417121887, 0.6909999847412109, 0.6930000185966492, 0.6913333535194397, 0.6956666707992554, 0.6973333358764648, 0.6983333230018616, 0.6990000009536743, 0.7009999752044678, 0.7026666402816772, 0.7046666741371155, 0.7053333520889282, 0.7049999833106995, 0.7083333134651184, 0.7093333601951599, 0.7086666822433472, 0.7103333473205566, 0.7149999737739563, 0.715666651725769, 0.7166666388511658, 0.7163333296775818, 0.715666651725769, 0.718999981880188, 0.7193333506584167, 0.7226666808128357, 0.7213333249092102, 0.7239999771118164, 0.7246666550636292, 0.7260000109672546, 0.7269999980926514, 0.7276666760444641, 0.7276666760444641, 0.7296666502952576, 0.7289999723434448, 0.7300000190734863, 0.7303333282470703, 0.7310000061988831, 0.7319999933242798, 0.7323333621025085, 0.734333336353302, 0.7353333234786987, 0.734000027179718, 0.7360000014305115, 0.7350000143051147, 0.7363333106040955, 0.737333357334137, 0.7383333444595337]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 2, 8, 7, 0, 5, 9], [4, 4, 3, 2, 0, 5], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3, 2], [43, 57]], "fitness": -0.45971429347991943, "mapping_values": [1, 7, 7, 5, 2, 1, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(grad, grad)))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.489007200405598, 2.294302521097095, 2.303500843117376, 2.302512286597743, 2.277620880815725, 2.308509892004041, 2.3036983993468803, 2.2972713608263726, 2.2259947983438564, 2.300846866282175, 2.377143266225897, 2.303391811885791, 2.301746612337712, 2.1724246965029677, 2.1444478377595537, 2.200459616736272, 2.2665636204394684, 2.2822700654353447, 2.150202494539274], "accuracy": [0.2094835489988327, 0.149649977684021, 0.09760929644107819, 0.10130762308835983, 0.16470743715763092, 0.10276053100824356, 0.10474177449941635, 0.13274335861206055, 0.2110685557126999, 0.11042134463787079, 0.17778365314006805, 0.09932637959718704, 0.10447761416435242, 0.2211068570613861, 0.24382512271404266, 0.2522784173488617, 0.1690661758184433, 0.12613920867443085, 0.27116629481315613], "val_loss": [1.9656373432704382, 1.9746020180838448, 1.9735918045043945, 1.9711147717067175, 1.9822630882263184, 1.9750678198678153, 1.9726567949567522, 1.914158821105957, 1.9754880496433802, 1.9096590450831823, 1.9744153703962053, 1.9727016176496233, 1.9668502126421248, 1.3600663117000036, 1.9690965243748255, 2.0299978937421526, 1.9768082754952567, 1.8487819262913294, 1.9959517206464494], "val_accuracy": [0.09866666793823242, 0.10366666316986084, 0.09799999743700027, 0.09799999743700027, 0.09833333641290665, 0.10100000351667404, 0.13333334028720856, 0.2486666738986969, 0.10066666454076767, 0.3799999952316284, 0.10000000149011612, 0.10533333569765091, 0.10733333230018616, 0.4983333349227905, 0.10133333504199982, 0.04766666516661644, 0.09966666996479034, 0.28333333134651184, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [1, 8, 7, 8, 7, 0, 5, 9], [4, 4, 3, 3], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.3085714280605316, "mapping_values": [1, 5, 5, 3, 2, 1, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, alpha)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(grad, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5005137011233636, 2.308304756356268, 2.3039797941738698, 2.298489914121818, 2.1378673440854876, 2.190274858676274, 2.3015056906626947, 2.3048754017098925, 2.302783043188363], "accuracy": [0.21621978282928467, 0.1010434553027153, 0.10447761416435242, 0.13934750854969025, 0.2530709207057953, 0.2024831622838974, 0.12838461995124817, 0.10196803510189056, 0.1018359512090683], "val_loss": [1.9812438147408622, 1.9754750388009208, 1.9729198047092982, 1.954437255859375, 1.9384691374642509, 1.7222914014543806, 1.9755221094403947, 1.9741204125540597, 1.97389132635934], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.11166666448116302, 0.2983333468437195, 0.13899999856948853, 0.27433332800865173, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 5, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1], [3, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [24, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3, 2], [43, 57]], "fitness": -0.2720000147819519, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.488994009348978, 2.289796543820439, 2.3034359468460837, 2.302080802283881, 2.3427774932296, 2.3066498565636038, 2.3030970446768375, 2.254612226275846, 2.3075234850305435], "accuracy": [0.2094835489988327, 0.14978206157684326, 0.09853387624025345, 0.10698718577623367, 0.175670325756073, 0.09760929644107819, 0.10091137140989304, 0.2094835489988327, 0.10157178342342377], "val_loss": [1.9657160214015417, 1.9746086938040597, 1.9735941886901855, 1.9668083190917969, 1.978921822139195, 1.9741418021065849, 1.9696225438799178, 1.9876439911978585, 1.9750355992998396], "val_accuracy": [0.09833333641290665, 0.10366666316986084, 0.09733333438634872, 0.2056666612625122, 0.1003333330154419, 0.1003333330154419, 0.18299999833106995, 0.09933333098888397, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 3, 3, 1], [69, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [88, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 0, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1], [1, 8, 7, 8, 7, 0, 5, 9], [0, 4, 3], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 8, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 8, 7, 8, 7, 0, 5, 9], [4, 4, 3, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3, 2], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(sigma), tf.math.pow(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 0, 8, 9, 1, 0, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 8, 7, 8, 7, 0, 5, 9], [4, 4, 3, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 2, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.sqrt(grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07317395508289337, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 0, 9, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 8, 7, 8, 7, 0, 5, 9], [4, 2, 3, 0], [8, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07317395508289337, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 5, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 8, 7, 8, 0, 0, 5, 9], [4, 4, 3, 3, 0, 5], [21, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3544054329475.371, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1138555034995079, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [4, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [24, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028533205521846, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09615638852119446, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 8, 7, 8, 6, 0, 5, 9], [4, 4, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 11, 11, 7, 4, 1, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, alpha)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.negative(grad))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [7.100829040904984, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11636507511138916, 0.09853387624025345, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [135526.13392857142, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, alpha)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302655462418187, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [67, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [8, 0, 19], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, alpha)), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303496258432965, 2.3030383760084203, 2.3028017391287467, 2.3035559934191085, 2.302107575956573, 2.3026618044594604], "accuracy": [0.08625016361474991, 0.09008057415485382, 0.08955223858356476, 0.08902391046285629, 0.09311848133802414, 0.08677849918603897], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 0, 8, 9, 1, 0, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [16, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1], [3, 9, 7, 1, 7, 5, 5, 9], [1, 4, 3, 0, 0, 5], [56, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3, 2], [42, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.303496258432965, 2.3030383760084203, 2.3028017391287467, 2.3035559934191085, 2.302107575956573, 2.3026618044594604], "accuracy": [0.08625016361474991, 0.09008057415485382, 0.08955223858356476, 0.08902391046285629, 0.09311848133802414, 0.08677849918603897], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]