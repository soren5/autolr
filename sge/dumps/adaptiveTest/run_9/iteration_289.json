[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 5, 3, 2, 5, 5, 1, 6, 6, 5, 8, 9], [1, 3, 3, 0, 1, 3, 3, 4, 0, 0, 4, 3, 5], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8342857360839844, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(grad), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), grad)))))))))), tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1236830394596486, 1.7482277876067045, 1.6029635858164173, 1.086083561752797, 0.8927775252181872, 0.8535336162735049, 0.7677087451189485, 0.7401010654212272, 0.6908982116879095, 0.6779099427760946, 0.6135932704035979, 0.6254049785432247, 0.6284965691376262, 0.5907382484141153, 0.5915862797997993, 0.5725532476109378, 0.5420656808851386, 0.5286588058684559, 0.5246499348326036, 0.5157714109410699, 0.5134487845059699, 0.49091748181366884, 0.48495614186191066, 0.49021725855514814, 0.4754801855315905, 0.4816497572897101, 0.4488795444422457, 0.4358166021567609, 0.4499777790113227, 0.42268844606806777, 0.43661859449284063, 0.4156903166733776, 0.4087612015727709, 0.4032175962155946, 0.4043124876340713, 0.3964332369505658], "accuracy": [0.3106590807437897, 0.3789459764957428, 0.44947826862335205, 0.6001849174499512, 0.6623960137367249, 0.6807554960250854, 0.711530864238739, 0.7288337349891663, 0.7372870445251465, 0.7421740889549255, 0.7685906887054443, 0.7604015469551086, 0.7613261342048645, 0.7765156626701355, 0.7777044177055359, 0.7853652238845825, 0.7924976944923401, 0.7972526550292969, 0.8025360107421875, 0.8121780753135681, 0.8068947196006775, 0.8187822103500366, 0.8203672170639038, 0.8161405324935913, 0.8249900937080383, 0.822348415851593, 0.8356888294219971, 0.8393871188163757, 0.8366134166717529, 0.842028796672821, 0.8379341959953308, 0.8462554216384888, 0.8508783578872681, 0.8498216867446899, 0.8481045961380005, 0.8551049828529358], "val_loss": [1.5211223193577357, 1.067530529839652, 0.9334877899714878, 0.7712720462254116, 0.6460661888122559, 0.671770487512861, 0.6804299524852208, 0.5900424378258842, 0.5303022691181728, 0.5107524054391044, 0.5390152760914394, 0.5234460490090507, 0.47540884358542307, 0.4690514462334769, 0.4909290756498064, 0.448006272315979, 0.4685722930090768, 0.4329500879560198, 0.4756706953048706, 0.4205774664878845, 0.40749130078724455, 0.41301125288009644, 0.4083157011440822, 0.42016673939568655, 0.4342042974063328, 0.39606369393212454, 0.3732371841158186, 0.3940018926348005, 0.3866457428250994, 0.39201052699770245, 0.3642903821808951, 0.3708665200642177, 0.38073050124304636, 0.35671208586011616, 0.3782530426979065, 0.3804853217942374], "val_accuracy": [0.30266666412353516, 0.47200000286102295, 0.6183333396911621, 0.6206666827201843, 0.6956666707992554, 0.6909999847412109, 0.7243333458900452, 0.7450000047683716, 0.7596666812896729, 0.7753333449363708, 0.749666690826416, 0.7683333158493042, 0.7850000262260437, 0.8016666769981384, 0.778333306312561, 0.8096666932106018, 0.7796666622161865, 0.8090000152587891, 0.7983333468437195, 0.8169999718666077, 0.8216666579246521, 0.8213333487510681, 0.824999988079071, 0.8186666369438171, 0.8143333196640015, 0.8343333601951599, 0.8426666855812073, 0.8220000267028809, 0.8363333344459534, 0.8309999704360962, 0.8489999771118164, 0.8376666903495789, 0.8296666741371155, 0.8483333587646484, 0.8349999785423279, 0.8343333601951599]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [3, 3, 3, 8, 2, 2, 1, 4, 6, 3, 4, 9, 1, 1, 8, 8], [1, 2, 0, 0, 3, 2, 3, 0, 2, 3, 1, 0, 5], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8317142724990845, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 12, 10, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(alpha, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, beta)))), grad)), tf.math.multiply(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1236832154000265, 1.7911268281520965, 1.3624496815967018, 1.0581001632989218, 0.87892819622394, 0.8417193197445106, 0.7705125373824713, 0.7017193426781673, 0.7157561554097543, 0.6677921402802353, 0.6406155199170696, 0.639075702994869, 0.6011856830493255, 0.6025365726775529, 0.5892697628919616, 0.5856211965015741, 0.5201298240200718, 0.5327461169474885, 0.5229028613969493, 0.5146742269245231, 0.5052206523587534, 0.4955726617583352, 0.4838282368666838, 0.4854876536892201, 0.4864082214319317, 0.4636801231247543, 0.4382879798359733, 0.4289843168209541, 0.44246916652607515, 0.417729002200318, 0.43069300418044315, 0.4055610409801379, 0.41795168713713365, 0.3956630888309272, 0.4011559702260163, 0.3986524920445612, 0.3872999011871916, 0.4003477093447878, 0.37642809211727557], "accuracy": [0.3106590807437897, 0.38383305072784424, 0.50785893201828, 0.5937128663063049, 0.6671509742736816, 0.6865671873092651, 0.7107383608818054, 0.7357020378112793, 0.7276449799537659, 0.743891179561615, 0.7621186375617981, 0.7604015469551086, 0.7701756954193115, 0.7733456492424011, 0.7753269076347351, 0.7783648371696472, 0.8083476424217224, 0.7988376617431641, 0.8020076751708984, 0.8113855719566345, 0.81112140417099, 0.8178576231002808, 0.821820080280304, 0.8224804997444153, 0.8236692547798157, 0.8313300609588623, 0.8399154543876648, 0.8436138033866882, 0.8411042094230652, 0.8459912538528442, 0.8399154543876648, 0.8518029451370239, 0.8446704745292664, 0.8512746095657349, 0.8507462739944458, 0.8529917001724243, 0.8553691506385803, 0.8494254350662231, 0.8603883385658264], "val_loss": [1.5230566433497839, 1.5500869750976562, 0.8006444147654942, 0.7353411061423165, 0.6578244652066912, 0.5824987207140241, 0.5948255573000226, 0.5440328802381244, 0.5389710494450161, 0.5469808237893241, 0.5212708030428205, 0.5072362422943115, 0.4991989646639143, 0.5416969912392753, 0.48284213883536203, 0.4432952914919172, 0.4469905069896153, 0.43778722626822336, 0.4548348699297224, 0.4143681100436619, 0.43214534861700876, 0.4030112794467381, 0.40621686833245413, 0.42697417736053467, 0.40128848382404875, 0.3814138684953962, 0.37702350105558124, 0.3938120348112924, 0.396438683782305, 0.39232763222285677, 0.3615727254322597, 0.374481771673475, 0.36318940775735037, 0.35649703230176655, 0.36687737703323364, 0.37753125599452425, 0.4040190747806004, 0.34864853961127146, 0.34162708691188265], "val_accuracy": [0.3023333251476288, 0.38733333349227905, 0.6340000033378601, 0.6586666703224182, 0.7046666741371155, 0.7333333492279053, 0.7266666889190674, 0.7590000033378601, 0.7603333592414856, 0.7546666860580444, 0.7776666879653931, 0.7580000162124634, 0.7760000228881836, 0.746666669845581, 0.7820000052452087, 0.8146666884422302, 0.8040000200271606, 0.8086666464805603, 0.812666654586792, 0.8169999718666077, 0.8029999732971191, 0.8273333311080933, 0.8263333439826965, 0.8100000023841858, 0.8296666741371155, 0.8363333344459534, 0.8366666436195374, 0.828000009059906, 0.8270000219345093, 0.8299999833106995, 0.8460000157356262, 0.8399999737739563, 0.8420000076293945, 0.8510000109672546, 0.8399999737739563, 0.8346666693687439, 0.8063333630561829, 0.8473333120346069, 0.8493333458900452]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 8, 1, 9, 6, 5, 8, 9], [1, 1, 0, 0, 1, 2, 1, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8271428346633911, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(beta, beta)))), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1236569778621, 1.7661266700230442, 1.358621501935204, 1.1186832405982032, 0.8824780353024777, 0.8449802671315223, 0.76358627201528, 0.7052202111836107, 0.6897584124641837, 0.662008170052731, 0.6489879577907164, 0.626653718359482, 0.6192425182703039, 0.5895237506199601, 0.5900628014625481, 0.5834506148391979, 0.5242143365858474, 0.5214102257512044, 0.5174724701656689, 0.5110647508166234, 0.48405859285278907, 0.4948383156594473, 0.48270501041487934, 0.4812686412310194, 0.4697358543610513, 0.47763674005053186, 0.44151181388430355, 0.4305670227097199, 0.43258542008230544, 0.4191116690871864, 0.4258353698719699, 0.39586147803750726, 0.41773934277561064, 0.39716137306187305, 0.39423953675952933, 0.39200087965692054, 0.37619998699181806, 0.3909934153449439, 0.3634770421060069, 0.3670212984352757, 0.37714017927449817, 0.3663935891239792, 0.36551881272637565, 0.3424024027470254], "accuracy": [0.31079116463661194, 0.3843613862991333, 0.5234447121620178, 0.5844670534133911, 0.6571126580238342, 0.6790384650230408, 0.71100252866745, 0.7374191284179688, 0.7391361594200134, 0.7465327978134155, 0.7567031979560852, 0.7677981853485107, 0.7623828053474426, 0.7796856164932251, 0.7737419009208679, 0.7819310426712036, 0.8067626357078552, 0.8013472557067871, 0.8062343001365662, 0.8148196935653687, 0.8208954930305481, 0.8141592741012573, 0.8181217908859253, 0.8215559124946594, 0.8255184292793274, 0.8267071843147278, 0.8412362933158875, 0.842028796672821, 0.843481719493866, 0.8412362933158875, 0.8413683772087097, 0.8532558679580688, 0.841500461101532, 0.8515387773513794, 0.8525954484939575, 0.8516708612442017, 0.859199583530426, 0.8543124794960022, 0.8656716346740723, 0.8574824929237366, 0.8560295701026917, 0.8650112152099609, 0.8622375130653381, 0.8745211958885193], "val_loss": [1.5220445564814977, 1.407841784613473, 0.9662445953914097, 0.7864382437297276, 0.664250373840332, 0.5794832536152431, 0.6326534066881452, 0.569953203201294, 0.5369862999234881, 0.5268741505486625, 0.5227257694516864, 0.5568698985236031, 0.4734372241156442, 0.52313004221235, 0.4634883063180106, 0.4396406752722604, 0.4570323739733015, 0.4226899487631662, 0.4433329275676182, 0.4156770961625235, 0.4270703111376081, 0.403170713356563, 0.398802067552294, 0.4140865547316415, 0.42671591894967215, 0.3876360399382455, 0.3684351444244385, 0.38429259402411325, 0.3914760776928493, 0.38915095158985685, 0.3578465836388724, 0.3763366086142404, 0.350925156048366, 0.35319084780556814, 0.3654656835964748, 0.3602782998766218, 0.3737383655139378, 0.3506194693701608, 0.33678669588906424, 0.35395017692020964, 0.3375048467091152, 0.3498990365437099, 0.3520904523985727, 0.3324687566076006], "val_accuracy": [0.30300000309944153, 0.45266667008399963, 0.5483333468437195, 0.6073333621025085, 0.6913333535194397, 0.7369999885559082, 0.6953333616256714, 0.7493333220481873, 0.7516666650772095, 0.7710000276565552, 0.7646666765213013, 0.7323333621025085, 0.7886666655540466, 0.7613333463668823, 0.8043333292007446, 0.8100000023841858, 0.7919999957084656, 0.8163333535194397, 0.8063333630561829, 0.8199999928474426, 0.8069999814033508, 0.8240000009536743, 0.8299999833106995, 0.8146666884422302, 0.8130000233650208, 0.8360000252723694, 0.8413333296775818, 0.8289999961853027, 0.8330000042915344, 0.8330000042915344, 0.8463333249092102, 0.8379999995231628, 0.8483333587646484, 0.8493333458900452, 0.8370000123977661, 0.843999981880188, 0.8276666402816772, 0.8460000157356262, 0.8536666631698608, 0.843999981880188, 0.8503333330154419, 0.8496666550636292, 0.8500000238418579, 0.8536666631698608]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 3, 5, 2, 7, 2, 1, 9, 6, 2, 4, 9, 2, 4, 8, 8], [1, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [73, 58, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8197143077850342, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2324146121452983, 2.0589261731734885, 1.7423976234488436, 1.5399498762377124, 1.1253022045239545, 0.9486550767707346, 0.8680173598890213, 0.7932540938098748, 0.7337343350786968, 0.7130701743049581, 0.6810673953063138, 0.636067661272615, 0.6439192119590705, 0.5943849795388351, 0.5998561446299218, 0.5869512000356005, 0.5445041354810085, 0.5207427926445208, 0.5343355248790328, 0.540792600519039, 0.5085809162783821, 0.5039428529635774, 0.48726331438166104, 0.5013654636763594, 0.502080863870886, 0.4694113530943879, 0.45614122467396234, 0.4276748380176364, 0.44974442702778233, 0.4131460160375224, 0.43426266401561336, 0.4293555289274666, 0.40665602330534195, 0.3952182105243828, 0.40013760457012426, 0.39074473881513655, 0.37604484033701113, 0.3945731976131139, 0.3771168624901296, 0.34331773235860547], "accuracy": [0.3073570132255554, 0.30841368436813354, 0.3807951509952545, 0.4815744161605835, 0.5653150081634521, 0.6394135355949402, 0.6737551093101501, 0.7029454708099365, 0.7238145470619202, 0.7269845604896545, 0.7396644949913025, 0.7637035846710205, 0.7593448758125305, 0.7773081660270691, 0.767401933670044, 0.7734777331352234, 0.7981772422790527, 0.8137630224227905, 0.8017435073852539, 0.7996301651000977, 0.8128384351730347, 0.8088759779930115, 0.8138951063156128, 0.8105930685997009, 0.8169330358505249, 0.8293488025665283, 0.8323867321014404, 0.8385946154594421, 0.8318583965301514, 0.8498216867446899, 0.8385946154594421, 0.834632158279419, 0.8485008478164673, 0.8565579056739807, 0.8518029451370239, 0.8544445633888245, 0.8603883385658264, 0.8492933511734009, 0.8632941246032715, 0.869502067565918], "val_loss": [1.4019389152526855, 1.2561383247375488, 1.412081582205636, 0.8311704567500523, 0.7486214808055333, 0.6852929592132568, 0.7020721435546875, 0.6184569426945278, 0.5408661706107003, 0.5429584128516061, 0.535203048161098, 0.6145959070750645, 0.4932492971420288, 0.4786601577486311, 0.49006407601492746, 0.44524666241237093, 0.45154901913234163, 0.46109589508601595, 0.48159945011138916, 0.4226436529840742, 0.4156694837978908, 0.39810619183949064, 0.39833363464900423, 0.42292640038899015, 0.39739123412540983, 0.3889581731387547, 0.3716670104435512, 0.3831303375107901, 0.38064490045819965, 0.37801797900881084, 0.36023755584444317, 0.3563984973090036, 0.35671476806913105, 0.3782897932188852, 0.3500115530831473, 0.37185291733060566, 0.3954043814114162, 0.3873661756515503, 0.33924730334963116, 0.3460438421794346], "val_accuracy": [0.35633334517478943, 0.559333324432373, 0.5056666731834412, 0.6006666421890259, 0.6433333158493042, 0.6756666898727417, 0.675000011920929, 0.7223333120346069, 0.7576666474342346, 0.7676666378974915, 0.7603333592414856, 0.7166666388511658, 0.7756666541099548, 0.7753333449363708, 0.7773333191871643, 0.8059999942779541, 0.8073333501815796, 0.7873333096504211, 0.7863333225250244, 0.8136666417121887, 0.8163333535194397, 0.8263333439826965, 0.824999988079071, 0.812666654586792, 0.8286666870117188, 0.8370000123977661, 0.8416666388511658, 0.8286666870117188, 0.8373333215713501, 0.82833331823349, 0.8416666388511658, 0.8450000286102295, 0.8443333506584167, 0.8346666693687439, 0.8476666808128357, 0.8416666388511658, 0.8173333406448364, 0.8333333134651184, 0.8473333120346069, 0.8446666598320007]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 3, 8, 7, 2, 1, 4, 6, 3, 4, 9, 1, 1, 8, 8], [1, 1, 3, 0, 1, 2, 3, 4, 0, 0, 4, 3, 5], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.7931428551673889, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 12, 10, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(alpha, tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), beta), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.112133915209263, 2.067520792237709, 2.1522875788535867, 2.105090980280376, 1.642745927497774, 1.529394120934491, 1.2252227243982239, 1.011340189564261, 0.9013574950258257, 0.8351329899089306, 0.7867610940387173, 0.8061772491544261, 0.7545771214625366, 0.7213365166666895, 0.7320162169354829, 0.6986843164665288, 0.6778670526325522, 0.6710299571680591, 0.677325797276238, 0.6630420473903288, 0.6658770960036396, 0.6209172013964493, 0.6075657479216032, 0.6098984692862257, 0.5916844068217854, 0.6053509739852616, 0.553171775147679, 0.5592069958872122], "accuracy": [0.2876766622066498, 0.3331131935119629, 0.2779025137424469, 0.3008849620819092, 0.44908201694488525, 0.47272488474845886, 0.5728437304496765, 0.6260731816291809, 0.6679434776306152, 0.6865671873092651, 0.700171709060669, 0.6934354901313782, 0.7148329019546509, 0.7273808121681213, 0.7190595865249634, 0.739400327205658, 0.7433628439903259, 0.7481178045272827, 0.7429665923118591, 0.7461365461349487, 0.7486461400985718, 0.7605336308479309, 0.7676661014556885, 0.7717606425285339, 0.7799497842788696, 0.7662131786346436, 0.7931581139564514, 0.7869502305984497], "val_loss": [1.3917389256613595, 1.882134165082659, 1.8285786764962333, 1.3812362807137626, 0.9315376622336251, 1.3468636785234724, 0.818190336227417, 0.7587205341884068, 0.7280413082667759, 0.6441023860658918, 0.6264882598604474, 0.5890651430402484, 0.5716983931405204, 0.5636409861700875, 0.5787604876926967, 0.5319697856903076, 0.525157264300755, 0.510997976575579, 0.5155426604407174, 0.5062624386378697, 0.49536934920719694, 0.4803034748349871, 0.4666893482208252, 0.47192091601235525, 0.5328001635415214, 0.45585901396615164, 0.48544466495513916, 0.44883724621364046], "val_accuracy": [0.4129999876022339, 0.4573333263397217, 0.3266666531562805, 0.4793333411216736, 0.6359999775886536, 0.5133333206176758, 0.6863333582878113, 0.6663333177566528, 0.6539999842643738, 0.7059999704360962, 0.7200000286102295, 0.7336666584014893, 0.7353333234786987, 0.7400000095367432, 0.7546666860580444, 0.7583333253860474, 0.765333354473114, 0.7556666731834412, 0.7753333449363708, 0.7746666669845581, 0.7770000100135803, 0.7873333096504211, 0.8033333420753479, 0.7906666398048401, 0.75, 0.7953333258628845, 0.7766666412353516, 0.7979999780654907]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [3, 3, 3, 8, 7, 2, 1, 4, 6, 3, 4, 9, 1, 1, 8, 8], [1, 3, 3, 0, 1, 2, 3, 4, 0, 0, 4, 3, 5], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 56]], "fitness": -0.7822856903076172, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 14, 12, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.subtract(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1120071103622915, 2.0530805717826506, 2.107107977542139, 1.9450649306002925, 1.5262937040030444, 1.2626758823935162, 1.1420510478732042, 0.899745856317405, 0.8365513247867947, 0.8235038054964058, 0.7546569301688109, 0.7475729370712368, 0.7291177796681386, 0.6770099087823352, 0.6697444923801696, 0.6600266775009797, 0.6467327575453079, 0.6322020212767256, 0.627763981155322, 0.6220881602688866, 0.6213061196960558, 0.6000658671507321], "accuracy": [0.2876766622066498, 0.33258485794067383, 0.3329811096191406, 0.3409060835838318, 0.502971887588501, 0.5620129704475403, 0.575089156627655, 0.6616035103797913, 0.6843217611312866, 0.6881521344184875, 0.7199841737747192, 0.718399167060852, 0.7246070504188538, 0.7446836829185486, 0.7433628439903259, 0.7503632307052612, 0.7574957013130188, 0.7630431652069092, 0.7606657147407532, 0.7630431652069092, 0.7647602558135986, 0.7751948237419128], "val_loss": [1.3901465620313371, 1.8873675210135323, 1.714958599635533, 1.1921473571232386, 1.0575354439871651, 1.1972641604287284, 0.7926277092524937, 0.6721077816826957, 0.627129316329956, 0.5765665939876011, 0.6316975695746285, 0.5441667693001884, 0.5521423816680908, 0.5200345005307879, 0.5044795615332467, 0.6052529811859131, 0.4689450093678066, 0.509748101234436, 0.46978259086608887, 0.515967845916748, 0.47650507518223356, 0.5045847552163261], "val_accuracy": [0.41366666555404663, 0.4729999899864197, 0.33933332562446594, 0.5816666483879089, 0.5210000276565552, 0.4493333399295807, 0.6240000128746033, 0.6899999976158142, 0.7116666436195374, 0.7453333139419556, 0.7120000123977661, 0.7566666603088379, 0.7366666793823242, 0.7663333415985107, 0.7630000114440918, 0.7269999980926514, 0.7919999957084656, 0.7639999985694885, 0.7816666960716248, 0.7563333511352539, 0.7820000052452087, 0.7603333592414856]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 5, 2, 2, 2, 1, 9, 6, 2, 4, 9, 2, 4, 8, 8], [0, 3, 0, 3, 3, 0, 3, 4, 2, 0, 1, 0, 5], [40, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 9, 0, 4, 2, 1, 2, 3], [1, 1, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.1322857141494751, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 5, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(grad, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [1.477161883775045e+24, 1.7999876645190681e+24, 1.9129890449230484e+24, 1.8904552073449432e+24, 1.5521717760047598e+24, 1.72660745823461e+24], "accuracy": [0.1026284471154213, 0.11174217611551285, 0.10566636174917221, 0.10170386731624603, 0.10130762308835983, 0.10672302544116974], "val_loss": [1.5705822664544692e+24, 1.5705822664544692e+24, 1.5705822664544692e+24, 1.5705822664544692e+24, 1.5705822664544692e+24, 1.5705822664544692e+24], "val_accuracy": [0.11433333158493042, 0.11433333158493042, 0.11433333158493042, 0.11433333158493042, 0.11433333158493042, 0.11433333158493042]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 2, 2, 5, 4, 5, 8, 1, 9, 1, 4, 9, 9, 4, 5], [1, 2, 3, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [59, 58, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 5, 4, 2, 1, 2, 3], [1, 0, 2, 2, 3, 3, 2], [8, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.square(beta))", "other_info": {"loss": [2.3048720485451453, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0870426595211029, 0.0936468094587326, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9750770841326033, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.023333333432674408, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 8, 1, 9, 6, 5, 8, 9], [1, 3, 3, 0, 2, 2, 3, 4, 0, 0, 4, 3, 5], [59, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 6, 4, 2, 2, 7, 4, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), sigma)))), tf.math.add(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1.2543072075522903e+25, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [3, 3, 2, 5, 7, 0, 1, 4, 6, 3, 9, 9, 1, 1, 8, 8], [1, 3, 3, 0, 1, 2, 3, 4, 0, 0, 4, 3, 5], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 15, 15, 8, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(grad))), grad)), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.pow(alpha, beta), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 6, 5, 4, 5, 8, 1, 9, 1, 4, 9, 9, 4, 5], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [48, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 7, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 12, 5, 4, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(alpha), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 3, 3, 2, 7, 2, 1, 5, 6, 3, 4, 9, 1, 1, 8, 8], [1, 3, 3, 0, 0, 2, 2, 4, 2, 2, 3], [59, 47, 25, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 9, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [49, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 11, 11, 2, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), beta)), tf.math.add(beta, tf.math.pow(beta, grad))))), tf.math.add(beta, beta))))), beta)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [133645687.99787772, 2564764597.2727513, 11881882201.06406, 32833521776.80095, 70862198814.02615, 129245739560.64351], "accuracy": [0.09734513610601425, 0.09826971590518951, 0.09919429570436478, 0.09721305221319199, 0.09800554811954498, 0.1026284471154213], "val_loss": [513740672.0, 4107348992.0, 13859373348.571428, 32848465334.857143, 64153138907.42857, 110851939181.71428], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 8, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 1, 2, 1, 4, 2, 0], [59, 58, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 18, 18, 12, 6, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, alpha))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 3, 2, 7, 2, 1, 4, 6, 5, 4, 9, 0, 1, 8, 8], [0, 3, 0, 3, 3, 2, 3, 4, 2, 0, 1, 0, 5], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 2, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 25, 25, 15, 10, 4, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.negative(grad))))), tf.math.add(beta, tf.math.subtract(beta, grad))), tf.math.add(beta, grad)), beta)))))), tf.math.add(beta, tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2084117.1126084405, 2.3152187944733944, 2.305133999708763, 2.3034013304271403, 2.3031505547368436, 2.3032237969180454, 2.3031967203016563, 2.303091193517721], "accuracy": [0.09232597798109055, 0.09721305221319199, 0.09298639744520187, 0.09549596905708313, 0.09694888442754745, 0.09232597798109055, 0.09628847241401672, 0.09298639744520187], "val_loss": [1.9921067782810755, 1.9771204675946916, 1.974111488887242, 1.9736760003226144, 1.9737488201686315, 1.9738317898341589, 1.9738332884652274, 1.9737424850463867], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10366666316986084, 0.10366666316986084, 0.10199999809265137, 0.10000000149011612, 0.09799999743700027, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 3, 8, 1, 9, 6, 0, 8, 9], [2, 2, 5, 3, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 12, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.multiply(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), grad))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07766477018594742, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 4, 5, 8, 8, 9, 5, 4, 9], [3, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [59, 58, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [0, 0, 1, 2, 3, 3, 2], [48, 57, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.303202374673334, 2.3026180615624763, 2.3026261532138195, 2.3026140838046634, 2.3026244355041623, 2.302624422120475, 2.302626128556344, 2.302619545073352, 2.30262023034963, 2.302613130161838], "accuracy": [0.09430722147226334, 0.09417514503002167, 0.0952318087220192, 0.09998679161071777, 0.09866596013307571, 0.0940430611371994, 0.09602430462837219, 0.09417514503002167, 0.09615638852119446, 0.09998679161071777], "val_loss": [1.9736425536019462, 1.9736452783857072, 1.9736337661743164, 1.973635469164167, 1.973637308393206, 1.973642008645194, 1.973646572657994, 1.9736454827444894, 1.9736433710370744, 1.9736437116350447], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.10066666454076767, 0.1003333330154419, 0.10199999809265137, 0.10199999809265137, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [5, 3, 3, 8, 9, 2, 1, 4, 6, 3, 4, 9, 5, 1, 8, 8], [1, 3, 3, 0, 1, 2, 3, 4, 0, 0, 4, 3, 5], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 19, 19, 12, 7, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303159318879107, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 6, 8, 1, 9, 2, 6, 3, 9], [1, 3, 0, 0, 1, 2, 2, 4, 2, 0], [36, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 4, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))))), beta)))), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07766477018594742, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 3, 5, 4, 5, 8, 1, 9, 1, 4, 2, 9, 4, 5, 7, 3], [0, 1, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [85, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 4, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 17, 10, 6, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(alpha, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))))), beta), tf.math.add(beta, grad)))))), grad)))), tf.math.add(beta, beta))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 4, 5, 8, 8, 9, 5, 4, 9], [1, 2, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [43, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [0, 2, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]