[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 2, 0, 6, 2, 1, 9, 2, 0, 8, 9], [3, 2, 3, 1, 0, 2, 2], [57, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8305714130401611, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(beta)))))))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.323448947927404, 2.0315295345731905, 1.535207887131068, 1.1793162668181165, 1.0202514248092052, 0.8595443320012978, 0.7992799844582477, 0.7853050910014171, 0.7545466460981358, 0.7132615214483125, 0.7163975645034321, 0.6749990014761603, 0.6630664374361956, 0.6289566984234579, 0.608861482768499, 0.5976329464418635, 0.593261289731969, 0.5695590693338782, 0.551480614923294, 0.5683077632349559, 0.5350722534356415, 0.5251195318057096, 0.5297808101416233, 0.5066725915417679, 0.5107932728531338, 0.48059933359722784, 0.4742517750481447, 0.46985833665493565, 0.4725281096539241, 0.4539370955123153, 0.44148626745243147, 0.43451321917029895, 0.4303396293641774, 0.43751268457853093, 0.4106359905444589, 0.42209744030663116, 0.43320919823857534, 0.4219790047831492, 0.40193749486557667, 0.42123562741540976, 0.3986748060719086, 0.3996990498432378, 0.3802797238800929, 0.37415242300230706, 0.39010143859464225], "accuracy": [0.20816272497177124, 0.2900541424751282, 0.4563465714454651, 0.565711259841919, 0.6141856908798218, 0.6741513609886169, 0.700700044631958, 0.6971337795257568, 0.7024171352386475, 0.7273808121681213, 0.7214370369911194, 0.7325320243835449, 0.7450799345970154, 0.7588165402412415, 0.7693831920623779, 0.772288978099823, 0.772288978099823, 0.7827235460281372, 0.7903843522071838, 0.7877426743507385, 0.7961959838867188, 0.8033285140991211, 0.7967243194580078, 0.805177628993988, 0.8049134612083435, 0.8228767514228821, 0.8247259259223938, 0.8265751004219055, 0.8226125836372375, 0.8278959393501282, 0.8352925777435303, 0.8370096683502197, 0.8432175517082214, 0.8339717388153076, 0.8499537706375122, 0.8416325449943542, 0.8356888294219971, 0.8376700282096863, 0.8485008478164673, 0.8405758738517761, 0.8525954484939575, 0.8531237840652466, 0.8543124794960022, 0.8598600029945374, 0.848368763923645], "val_loss": [1.9593946593148368, 1.5441583905901228, 1.1141291005270821, 0.9045453412192208, 0.6779851913452148, 0.6624526977539062, 0.6197703565870013, 0.6170418603079659, 0.564311180795942, 0.593415447643825, 0.5386640514646258, 0.530205317905971, 0.5110514504568917, 0.4981388875416347, 0.48333210604531424, 0.47633838653564453, 0.4794157402856009, 0.47999283245631624, 0.5407285009111676, 0.4213800685746329, 0.4216517039707729, 0.41469469240733553, 0.41523888281413485, 0.41901532241276335, 0.4098995838846479, 0.42422247784478323, 0.4101014903613499, 0.4097553406442915, 0.3904510566166469, 0.3806859254837036, 0.37805536815098356, 0.3758432524544852, 0.4144572104726519, 0.37906242268426077, 0.4016594205583845, 0.3642553687095642, 0.3589035613196237, 0.36891218594142366, 0.3817514862333025, 0.3658263768468584, 0.3549186757632664, 0.3521870289530073, 0.36307724033083233, 0.3709269165992737, 0.34986003807612825], "val_accuracy": [0.20200000703334808, 0.38733333349227905, 0.5080000162124634, 0.578000009059906, 0.6859999895095825, 0.7023333311080933, 0.7126666903495789, 0.7206666469573975, 0.7516666650772095, 0.7236666679382324, 0.7620000243186951, 0.7566666603088379, 0.7680000066757202, 0.7829999923706055, 0.7839999794960022, 0.7770000100135803, 0.7866666913032532, 0.7896666526794434, 0.7350000143051147, 0.8143333196640015, 0.8146666884422302, 0.8130000233650208, 0.8163333535194397, 0.8183333277702332, 0.8133333325386047, 0.8036666512489319, 0.8230000138282776, 0.8233333230018616, 0.8299999833106995, 0.8293333053588867, 0.8363333344459534, 0.8353333473205566, 0.8130000233650208, 0.8339999914169312, 0.8233333230018616, 0.8416666388511658, 0.8446666598320007, 0.8413333296775818, 0.8373333215713501, 0.8486666679382324, 0.843666672706604, 0.8479999899864197, 0.8416666388511658, 0.8429999947547913, 0.843999981880188]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [2, 5, 0, 0, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [1, 0, 3, 3, 0, 1, 2], [83, 56, 47], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8285714387893677, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3234215362149775, 2.0320336302872017, 1.5084653802598866, 1.2264117603808378, 0.9579709542504612, 0.9213501147354095, 0.8055720981148964, 0.7768571425611632, 0.7358275191532921, 0.7152292984839774, 0.6985056578853206, 0.675579715910337, 0.6566931159898448, 0.6207694256578092, 0.6064622342358207, 0.5959365532981122, 0.5762082262833388, 0.5688934101247202, 0.551450808688146, 0.5873145173648093, 0.5420195138717387, 0.5282539537577754, 0.5300601153656508, 0.5052960234240392, 0.5054457556609354, 0.4745813458941443, 0.501892483824075, 0.4735310958431948, 0.46849425258873917, 0.4494257133241028, 0.4474979385904837, 0.4425881191007591, 0.4315242319137917, 0.43384669785879987, 0.41232609630748973, 0.4274969628781155, 0.43256818397548047, 0.4346238415923967, 0.4137960301847222, 0.4185801443446188, 0.40238471479385035, 0.4036218048189106], "accuracy": [0.20816272497177124, 0.29124289751052856, 0.46189406514167786, 0.5600317120552063, 0.6386210322380066, 0.654999315738678, 0.6902654767036438, 0.6976621150970459, 0.7234182953834534, 0.724210798740387, 0.7364945411682129, 0.7383436560630798, 0.7512878179550171, 0.7644960880279541, 0.7683265209197998, 0.772288978099823, 0.7758552432060242, 0.7857614755630493, 0.7950072884559631, 0.7803460359573364, 0.7944789528846741, 0.8025360107421875, 0.7975168228149414, 0.8047813773155212, 0.8088759779930115, 0.824329674243927, 0.8120459914207458, 0.8220842480659485, 0.8277638554573059, 0.8309338092803955, 0.8302733898162842, 0.830669641494751, 0.8399154543876648, 0.8388587832450867, 0.8535200357437134, 0.8391229510307312, 0.8370096683502197, 0.8354246616363525, 0.8387266993522644, 0.8422929644584656, 0.8500858545303345, 0.8514066934585571], "val_loss": [1.9593727929251534, 1.5080345017569405, 1.2674692017691476, 0.8458937406539917, 0.811390791620527, 0.6480778966631208, 0.612657938684736, 0.6445335830960955, 0.5549352509634835, 0.5489671230316162, 0.5811679363250732, 0.5141700846808297, 0.5051094463893345, 0.49476994786943707, 0.47319410528455463, 0.4641357149396624, 0.48960052217756, 0.46681952476501465, 0.5526373386383057, 0.433326746736254, 0.45166834763118197, 0.4234799061502729, 0.41633147852761404, 0.412997909954616, 0.39967373439243864, 0.40968762976782663, 0.4077724814414978, 0.4065680503845215, 0.3931065968104771, 0.3932147707257952, 0.392971864768437, 0.36990414346967426, 0.41254061460494995, 0.37256745781217304, 0.3593952826091221, 0.4030812978744507, 0.3507641468729292, 0.3746022496904646, 0.3732955881527492, 0.3662935325077602, 0.3770352857453482, 0.35837086609431673], "val_accuracy": [0.20233333110809326, 0.37066665291786194, 0.5116666555404663, 0.6236666440963745, 0.6299999952316284, 0.6993333101272583, 0.7139999866485596, 0.6940000057220459, 0.7576666474342346, 0.746999979019165, 0.7580000162124634, 0.7680000066757202, 0.7753333449363708, 0.7796666622161865, 0.7873333096504211, 0.7950000166893005, 0.7823333144187927, 0.7926666736602783, 0.7333333492279053, 0.8113333582878113, 0.7883333563804626, 0.8113333582878113, 0.812333345413208, 0.8190000057220459, 0.8203333616256714, 0.8213333487510681, 0.8213333487510681, 0.8220000267028809, 0.82833331823349, 0.8240000009536743, 0.8270000219345093, 0.8416666388511658, 0.8176666498184204, 0.8360000252723694, 0.8386666774749756, 0.8246666789054871, 0.8523333072662354, 0.8433333039283752, 0.8370000123977661, 0.8443333506584167, 0.8276666402816772, 0.843999981880188]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 8, 6, 0, 6, 2, 1, 2, 2, 8, 8, 9, 4, 9, 5, 3, 5, 1, 4, 7, 9, 0, 3, 5, 3, 8, 0], [3, 2, 3, 3, 0, 1, 2, 2, 3, 1, 5, 0], [57, 49, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8162857294082642, "mapping_values": [1, 1, 1, 0, 1, 0, 39, 39, 27, 12, 5, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad))), tf.math.add(beta, grad)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.multiply(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, beta))))))))))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(beta))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.add(beta, grad))))))))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.329787483619677, 2.1025048366957777, 1.7859730042990534, 1.3150232833185374, 1.130930715729264, 0.9670012883537906, 0.8878524654482522, 0.8292282485864292, 0.8234632701890154, 0.7655197646025543, 0.7470431485668606, 0.7065665153637696, 0.6959033846115125, 0.6469772648439747, 0.6536702852144596, 0.6214011581881549, 0.6050857570838651, 0.6092342538698836, 0.5879217648880908, 0.5732603994075255, 0.575668932959829, 0.5663064298864684, 0.5568584149712978, 0.5344342508446412, 0.5376507773328183, 0.5230122907381205, 0.5071095187807946, 0.5149828759300679, 0.49625779035903556, 0.5028241327953313, 0.4766863649744226, 0.48835942361726736, 0.46906751365536287, 0.471512602647345, 0.4846311493273251, 0.45128034404586603, 0.48068213958813294], "accuracy": [0.20921939611434937, 0.28780874609947205, 0.3895126283168793, 0.5330867767333984, 0.5812970399856567, 0.6424514651298523, 0.6684718132019043, 0.6831330060958862, 0.6886804699897766, 0.7045304179191589, 0.709021270275116, 0.7288337349891663, 0.735041618347168, 0.7555144429206848, 0.7490423917770386, 0.759080708026886, 0.7662131786346436, 0.7755910754203796, 0.7807422876358032, 0.7887993454933167, 0.7795535326004028, 0.7853652238845825, 0.7861577272415161, 0.8001585006713867, 0.7965922355651855, 0.807158887386322, 0.8150838613510132, 0.8026680946350098, 0.8171972036361694, 0.8079513907432556, 0.8189142942428589, 0.8182538747787476, 0.8227446675300598, 0.8259146809577942, 0.816008448600769, 0.8318583965301514, 0.8157442808151245], "val_loss": [1.9505955832345145, 1.6307202407291956, 1.053462096623012, 0.9206631524222237, 0.6679629768644061, 0.7576438529150826, 0.6860251426696777, 0.6852724211556571, 0.6098947695323399, 0.5673172644206456, 0.575515730040414, 0.5475309406008039, 0.5222182273864746, 0.5240057195935931, 0.5022297416414533, 0.47704241956983295, 0.49205214636666433, 0.5169906275612968, 0.48305041449410574, 0.4507226603371756, 0.44229352474212646, 0.43673387595585417, 0.4352607471602304, 0.432173490524292, 0.4393359763281686, 0.41229517119271414, 0.41516869408743723, 0.4071549688066755, 0.40807861941201345, 0.38930630683898926, 0.42240616253444124, 0.3878934553691319, 0.4496915170124599, 0.41790424074445454, 0.42589385168892996, 0.4380552513258798, 0.3701523627553667], "val_accuracy": [0.25833332538604736, 0.4476666748523712, 0.5776666402816772, 0.5826666951179504, 0.7110000252723694, 0.6650000214576721, 0.6943333148956299, 0.6693333387374878, 0.7170000076293945, 0.7266666889190674, 0.7646666765213013, 0.7609999775886536, 0.7766666412353516, 0.753000020980835, 0.7760000228881836, 0.7889999747276306, 0.7733333110809326, 0.7739999890327454, 0.7703333497047424, 0.7986666560173035, 0.8013333082199097, 0.8046666383743286, 0.8043333292007446, 0.8193333148956299, 0.8006666898727417, 0.8193333148956299, 0.8246666789054871, 0.8246666789054871, 0.824999988079071, 0.8263333439826965, 0.8213333487510681, 0.843999981880188, 0.8006666898727417, 0.8140000104904175, 0.8036666512489319, 0.8106666803359985, 0.8413333296775818]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 8, 6, 0, 6, 2, 1, 9, 2, 0, 8, 9], [3, 2, 3, 3, 0, 1, 2], [57, 49, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8154285550117493, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 2, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, beta))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.3297886207922183, 2.086236913930691, 1.787163800945088, 1.3065783074503294, 1.0650064598268538, 0.8640630080983025, 0.8512289838122654, 0.7864674628843736, 0.759631912029021, 0.7203832336735527, 0.7310810684764139, 0.6915027967942877, 0.6892430028344158, 0.6416872180983564, 0.6350567910523541, 0.6009334067091604, 0.5841025958176476, 0.5746612080320344, 0.5774598073697975, 0.5942637958483784, 0.5575327608547883, 0.551881470086316, 0.5388510778453829, 0.5239212937311584, 0.5375634486318469, 0.5002302500345388, 0.4969546371888113, 0.5039225119790853, 0.47953323331239467, 0.47991673851671346, 0.4873524697788041, 0.47499460127170706, 0.46132864368401183, 0.4610336367496016], "accuracy": [0.20895522832870483, 0.292959988117218, 0.3704926669597626, 0.5217276215553284, 0.6009774208068848, 0.6744155287742615, 0.6814159154891968, 0.6972658634185791, 0.709549605846405, 0.7320036888122559, 0.7145687341690063, 0.7364945411682129, 0.7400607466697693, 0.7537974119186401, 0.7644960880279541, 0.7701756954193115, 0.7769119143486023, 0.7829877138137817, 0.7841764688491821, 0.7817989587783813, 0.7887993454933167, 0.7911768555641174, 0.7960638999938965, 0.8004226684570312, 0.7973847389221191, 0.8142913579940796, 0.8121780753135681, 0.8131026029586792, 0.8267071843147278, 0.8132346868515015, 0.8153480291366577, 0.8208954930305481, 0.8290846943855286, 0.8267071843147278], "val_loss": [1.9506957871573312, 1.5950597013745988, 1.1204299586159843, 0.765574608530317, 0.7160147598811558, 0.6477362258093697, 0.641252909387861, 0.5933763810566494, 0.5580111060823713, 0.5611068861825126, 0.6366660084043231, 0.5406091894422259, 0.5001862559999738, 0.4898696116038731, 0.47115414483206614, 0.48530868121555876, 0.49146311623709543, 0.501246418271746, 0.5356909036636353, 0.4509139912469046, 0.42244636160986765, 0.4245925801140921, 0.4282810091972351, 0.41931213651384625, 0.44857009819575716, 0.44141560792922974, 0.4048645666667393, 0.4092992629323687, 0.386372515133449, 0.39337724447250366, 0.40034864630017963, 0.4044484921864101, 0.4135193739618574, 0.3859125631196158], "val_accuracy": [0.2593333423137665, 0.4466666579246521, 0.5496666431427002, 0.6629999876022339, 0.6683333516120911, 0.7056666612625122, 0.7049999833106995, 0.731333315372467, 0.7516666650772095, 0.7476666569709778, 0.7433333396911621, 0.7543333172798157, 0.7760000228881836, 0.7883333563804626, 0.7916666865348816, 0.7850000262260437, 0.7723333239555359, 0.7876666784286499, 0.7319999933242798, 0.8009999990463257, 0.8153333067893982, 0.8143333196640015, 0.8100000023841858, 0.8173333406448364, 0.8050000071525574, 0.8040000200271606, 0.8270000219345093, 0.8183333277702332, 0.8383333086967468, 0.8226666450500488, 0.8289999961853027, 0.8320000171661377, 0.8190000057220459, 0.8289999961853027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [7, 9, 7, 0, 6, 4, 1, 2, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [2, 0, 3, 3, 3, 2, 2, 1, 3, 0, 4, 0, 2], [45, 62, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [3, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8128571510314941, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.323448945691541, 2.030366858061767, 1.5249832280638542, 1.1432701573946913, 0.9297527586543061, 0.8406069820441464, 0.7977467044910436, 0.7680739240639435, 0.7469157112619392, 0.7239782957589197, 0.7319704942998633, 0.6744774774537662, 0.6646628280625037, 0.6304773496850891, 0.6122669266231024, 0.609263008611707, 0.5857581699513299, 0.5897675851364146, 0.553571620464262, 0.595335387456151, 0.5286274783095789, 0.5381117479959577, 0.5399276661346963, 0.5132123580965872, 0.5229169995698789, 0.47911647804157215, 0.4844258796143699, 0.4846751755176046, 0.4720801445376903, 0.4557934659480923, 0.4590662731793358, 0.45162693853265556, 0.43515111859668876, 0.4391012324546511, 0.4429859496173826, 0.41962403625450617, 0.4407458955018811, 0.4240288720068253, 0.4135999581707058, 0.41199386544971417, 0.399484320996759, 0.41417929484481747, 0.381565944070845, 0.37901625900441127, 0.39785352685054404], "accuracy": [0.20816272497177124, 0.2900541424751282, 0.46453574299812317, 0.5721833109855652, 0.6535464525222778, 0.6819442510604858, 0.703209638595581, 0.7029454708099365, 0.7144366502761841, 0.7187954187393188, 0.7214370369911194, 0.7331924438476562, 0.7453441023826599, 0.7611940503120422, 0.7633073329925537, 0.76542067527771, 0.7730814814567566, 0.7757231593132019, 0.7903843522071838, 0.7786290049552917, 0.7968564033508301, 0.7984414100646973, 0.7917051911354065, 0.8038568496704102, 0.7973847389221191, 0.8220842480659485, 0.8202351331710815, 0.8145555257797241, 0.8267071843147278, 0.8251221776008606, 0.8272355198860168, 0.8260467648506165, 0.8403117060661316, 0.8356888294219971, 0.830669641494751, 0.8428213000297546, 0.8342359066009521, 0.8339717388153076, 0.8445383906364441, 0.8502179384231567, 0.8492933511734009, 0.8430854678153992, 0.8570862412452698, 0.8578787446022034, 0.8477083444595337], "val_loss": [1.9593934331621443, 1.5430556706019811, 0.9569898332868304, 0.8407698018210275, 0.6409660066877093, 0.6374323878969465, 0.6704877104078021, 0.6276928527014596, 0.5514952455248151, 0.5504868371146066, 0.536806549344744, 0.5339473826544625, 0.5174786533628192, 0.5062381880623954, 0.4865310362407139, 0.46581028188977924, 0.5022256714957101, 0.4880410262516567, 0.46716529982430594, 0.44314730167388916, 0.4262034296989441, 0.46454157148088726, 0.4409980518477304, 0.42365585054670063, 0.4096300346510751, 0.40637322834559847, 0.40123862879616873, 0.4184743421418326, 0.39358778510774883, 0.4070969138826643, 0.3900059972490583, 0.37094765050070627, 0.4055777703012739, 0.3907828501292637, 0.3771563598087856, 0.4086791106632778, 0.3610430785587856, 0.3764997124671936, 0.38827459301267353, 0.36164502586637226, 0.39107504912785124, 0.3624399985585894, 0.3625599571636745, 0.37376412323543, 0.3434695431164333], "val_accuracy": [0.20200000703334808, 0.3856666684150696, 0.5706666707992554, 0.6206666827201843, 0.722000002861023, 0.7200000286102295, 0.6883333325386047, 0.7046666741371155, 0.7639999985694885, 0.7446666955947876, 0.7580000162124634, 0.7590000033378601, 0.7563333511352539, 0.7746666669845581, 0.7820000052452087, 0.7976666688919067, 0.7706666588783264, 0.7850000262260437, 0.7866666913032532, 0.8053333163261414, 0.8116666674613953, 0.7753333449363708, 0.8016666769981384, 0.812333345413208, 0.8149999976158142, 0.8149999976158142, 0.8286666870117188, 0.8190000057220459, 0.8263333439826965, 0.8100000023841858, 0.8353333473205566, 0.8416666388511658, 0.8193333148956299, 0.8256666660308838, 0.8323333263397217, 0.8190000057220459, 0.8460000157356262, 0.8399999737739563, 0.831333339214325, 0.8516666889190674, 0.8230000138282776, 0.8420000076293945, 0.8399999737739563, 0.8356666564941406, 0.8493333458900452]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [3, 8, 2, 1, 6, 2, 1, 9, 2, 0, 8, 9], [1, 0, 3, 3, 0, 1, 2], [57, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8040000200271606, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(grad, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.sqrt(beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3234195164118807, 2.0315060706233714, 1.4869359037139553, 1.2250672545431156, 0.9931261864682829, 0.8485714404212328, 0.7825175482819597, 0.7697097234848137, 0.7402279642216832, 0.7191311956680115, 0.7003749183785913, 0.6695090056788321, 0.656648483817698, 0.6240660214169056, 0.6140241147410269, 0.5941451965006918, 0.571791326239156, 0.5923617549576166, 0.553263264781905, 0.564130383428408, 0.5345890367775861, 0.5413120669412291, 0.524107408781786, 0.5107194180690758, 0.5078162966056696, 0.4776442503223739, 0.4941620752481091, 0.4797830157480881, 0.4583661630680816, 0.4518237873201341, 0.455812372150139, 0.4477099667623956, 0.4396517939886255, 0.4296773121561971, 0.438427725315031, 0.42284426443832834, 0.43483452801423506, 0.41544207493626856, 0.397635834714, 0.41429256128912134, 0.40019538495141, 0.4025296749274776, 0.3710193605809369, 0.3770738771019705, 0.3873110771250054, 0.35430314327196405, 0.3936822380505974, 0.3721855750228467, 0.35305446831148063, 0.3661316060245218, 0.34179942392717183, 0.32684116075146297, 0.32515589324647975], "accuracy": [0.20816272497177124, 0.29203540086746216, 0.46770572662353516, 0.5591071248054504, 0.6316206455230713, 0.6828688383102417, 0.7116629481315613, 0.700171709060669, 0.720380425453186, 0.7290979027748108, 0.737022876739502, 0.7368907928466797, 0.7493065595626831, 0.7582882046699524, 0.7687227725982666, 0.7750627398490906, 0.7799497842788696, 0.7777044177055359, 0.7906485199928284, 0.7928939461708069, 0.7944789528846741, 0.7947431206703186, 0.8010830879211426, 0.8033285140991211, 0.8070268034934998, 0.8219521641731262, 0.8138951063156128, 0.8241975903511047, 0.8289526104927063, 0.8330471515655518, 0.8305375576019287, 0.8277638554573059, 0.8396512866020203, 0.8450667262077332, 0.834632158279419, 0.8412362933158875, 0.8396512866020203, 0.8396512866020203, 0.8512746095657349, 0.8455950617790222, 0.8482366800308228, 0.8536521196365356, 0.8619733452796936, 0.8610487580299377, 0.8536521196365356, 0.8692378997802734, 0.8561616539955139, 0.8615770936012268, 0.8713511824607849, 0.8646149635314941, 0.8733324408531189, 0.8768987059593201, 0.8771628737449646], "val_loss": [1.9593887329101562, 1.473003285271781, 1.2366346291133337, 0.9414519582475934, 0.6856314284460885, 0.6881158011300224, 0.6081691128867013, 0.565312419618879, 0.5503741843359811, 0.55663343838283, 0.5845198460987636, 0.5356216771262032, 0.5083020074026925, 0.49918551104409353, 0.48713936124529156, 0.4647178479603359, 0.49601171697889057, 0.4899614027568272, 0.5059909650257656, 0.45156494208744596, 0.4330111401421683, 0.42791675669806345, 0.4467758366039821, 0.41878122091293335, 0.40674906969070435, 0.4453528438295637, 0.4168176395552499, 0.4073082719530378, 0.38638300555092947, 0.40767695222582134, 0.3838851196425302, 0.38704991340637207, 0.3851208601679121, 0.37293013504573275, 0.3832873787198748, 0.4053283078329904, 0.3668008191244943, 0.3801515868731907, 0.38577633244650705, 0.36595591476985384, 0.3835261975015913, 0.36162385770252775, 0.36529978684016634, 0.3467610052653721, 0.34722027608326506, 0.35804993765694754, 0.3718044672693525, 0.3448675956044878, 0.35350026403154644, 0.36772200039454866, 0.34177394424165997, 0.33904246773038593, 0.3589239546230861], "val_accuracy": [0.20266667008399963, 0.37033334374427795, 0.4566666781902313, 0.5846666693687439, 0.7020000219345093, 0.706333339214325, 0.715666651725769, 0.7443333268165588, 0.7586666941642761, 0.7506666779518127, 0.7570000290870667, 0.7566666603088379, 0.7689999938011169, 0.7796666622161865, 0.7836666703224182, 0.7943333387374878, 0.7720000147819519, 0.7793333530426025, 0.7609999775886536, 0.8009999990463257, 0.8103333115577698, 0.8090000152587891, 0.7940000295639038, 0.8143333196640015, 0.8180000185966492, 0.8059999942779541, 0.8209999799728394, 0.8199999928474426, 0.8376666903495789, 0.8149999976158142, 0.8299999833106995, 0.8349999785423279, 0.8293333053588867, 0.8413333296775818, 0.8309999704360962, 0.8236666917800903, 0.843666672706604, 0.8356666564941406, 0.8389999866485596, 0.8489999771118164, 0.8286666870117188, 0.8453333377838135, 0.8420000076293945, 0.8519999980926514, 0.8513333201408386, 0.8479999899864197, 0.8363333344459534, 0.8543333411216736, 0.8489999771118164, 0.8489999771118164, 0.8500000238418579, 0.8543333411216736, 0.8473333120346069]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [3, 5, 2, 0, 6, 2, 1, 9, 2, 0, 8, 9], [1, 0, 5, 3, 0, 1, 2], [23, 73, 47], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.36228570342063904, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4799954632033665, 3.2312305476199117, 2.3982430161927213, 2.225734576604559, 2.3799383027473886, 2.508139409818638], "accuracy": [0.2661471366882324, 0.19574692845344543, 0.1072513535618782, 0.19204860925674438, 0.22123894095420837, 0.13340377807617188], "val_loss": [1.7155404431479317, 2.0478075572422574, 1.9555484226771764, 1.7485765729631697, 1.9815593447004045, 2.070465632847377], "val_accuracy": [0.3763333261013031, 0.09933333098888397, 0.18933333456516266, 0.25966668128967285, 0.19699999690055847, 0.12966667115688324]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 9, 7, 0, 6, 4, 1, 2, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [2, 0, 3, 3, 3, 2, 2, 1, 3, 0, 4, 0, 2], [76, 73, 47], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.3619999885559082, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 3, 0, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.sqrt(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4800025868834665, 13.61157468621442, 2.466337921030218, 9.117273588725967, NaN, NaN], "accuracy": [0.2661471366882324, 0.20657773315906525, 0.11940298229455948, 0.12019548565149307, 0.09642054885625839, 0.10011887550354004], "val_loss": [1.7134527478899275, 2.1741981506347656, 2.0405611991882324, 2.040505954197475, NaN, NaN], "val_accuracy": [0.3763333261013031, 0.09799999743700027, 0.09866666793823242, 0.10100000351667404, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [2, 5, 0, 0, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [1, 0, 3, 3, 0, 1, 2], [57, 62, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.2851428687572479, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 3, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.438529974213523, 2.2344567313438017, 2.2422987051832677, 2.305210523633059, 2.3033179677220823, 2.3031076168450286], "accuracy": [0.21555937826633453, 0.18293488025665283, 0.20301149785518646, 0.09945846349000931, 0.09945846349000931, 0.09206181764602661], "val_loss": [1.7173803193228585, 1.9759113448006767, 1.9793353080749512, 1.973973069872175, 1.9736945288521903, 1.9736157826014928], "val_accuracy": [0.29100000858306885, 0.09833333641290665, 0.09833333641290665, 0.10000000149011612, 0.09833333641290665, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [7, 9, 7, 0, 6, 4, 1, 2, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [2, 0, 3, 3, 3, 2, 2, 1, 3, 0, 4, 0, 2], [57, 62, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [3, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, sigma), sigma)))))", "other_info": {"loss": [2.303008222435097, 2.3029708245710343, 2.3028783035505054, 2.3029040133932623, 2.3029326747641856, 2.302947567375565], "accuracy": [0.0936468094587326, 0.09774138033390045, 0.09060890227556229, 0.09100515395402908, 0.09272222965955734, 0.09338264167308807], "val_loss": [1.973625591823033, 1.9736766133989607, 1.9737074715750558, 1.9737266131809779, 1.973681926727295, 1.9736411230904716], "val_accuracy": [0.10066666454076767, 0.09799999743700027, 0.1003333330154419, 0.09799999743700027, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 2, 0, 0, 2, 1, 9, 2, 0, 8, 9], [3, 2, 3, 3, 0, 1, 2], [20, 56, 47], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [2, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 1, 6, 6, 4, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [4916967395094155.0, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11042134463787079, 0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [Infinity, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [2, 5, 0, 0, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [3, 2, 3, 3, 0, 2, 2, 4], [57, 20, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 4, 2, 1, 2, 3], [2, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 15, 8, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(beta, tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.square(grad))), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, beta), beta))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [3, 8, 6, 0, 6, 2, 1, 9, 2, 0, 8, 9], [2, 0, 3, 3, 3, 2, 2, 1, 3, 0, 4, 0, 2], [23, 73, 47], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [3, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 13, 7, 6, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, sigma), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 2, 0, 6, 2, 1, 9, 2, 0, 8, 9], [2, 2, 3, 3, 3, 2, 2, 1, 3, 0, 4, 0, 2], [23, 73, 47], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(beta), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, beta)), tf.math.divide_no_nan(tf.math.add(grad, tf.math.subtract(grad, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 4, 7, 0, 6, 4, 1, 2, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [2, 0, 3, 3, 3, 2, 2, 1, 3, 0, 4, 0, 2], [23, 73, 47], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [3, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.math.subtract(tf.math.add(beta, tf.math.add(beta, tf.math.square(beta))), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07568352669477463, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [2, 8, 2, 0, 6, 2, 1, 9, 2, 8, 8, 9], [1, 0, 3, 3, 3, 3, 2], [57, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 0, 0, 0, 2, 1, 2, 3], [1, 0, 3, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [341424851688931.9, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15295206010341644, 0.09708096832036972, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 2, 0, 6, 2, 1, 9, 2, 0, 8, 9], [1, 0, 4, 3, 0, 1, 2], [23, 73, 47], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [3, 7], [88, 19], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 4, 2, 1, 2, 3, 6, 8, 0, 9, 3, 0, 4], [1, 0, 0, 1, 3, 3, 2, 0, 1, 1], [48, 57, 16, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 11, 6, 3, 1, 0, 0, 0, 0, 25, 15, 10, 4], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.add(tf.math.subtract(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha), sigma)), sigma)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.negative(beta), tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 9, 7, 0, 6, 4, 1, 2, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [3, 2, 3, 3, 0, 1, 2], [57, 49, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [3, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3, 0], [48, 57, 80]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 14, 7, 7, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, sigma), sigma)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 6, 0, 6, 2, 2, 9, 2, 0, 8, 9], [3, 2, 3, 3, 0, 1, 2], [57, 49, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 0, 3, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, beta))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07568352669477463, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 6, 2, 0, 6, 2, 1, 9, 2, 0, 8, 9], [1, 0, 5, 3, 0, 1, 2], [57, 62, 0, 81, 53, 45], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 3, 0, 1, 3, 3], [48, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, sigma))", "other_info": {"loss": [2.3029069164882263, 2.3026052418165768, 2.302377941397124, 2.3032805883117624, 2.3028095634212553, 2.3025665962779525], "accuracy": [0.09060890227556229, 0.09179764986038208, 0.08598599582910538, 0.09417514503002167, 0.08730682730674744, 0.09496764093637466], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]