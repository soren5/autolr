[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 8, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 1, 2, 1, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8322857022285461, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, alpha))))), beta)), tf.math.add(beta, tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.065744258724168, 1.8473489336633033, 1.451114797100903, 1.1317765246828266, 0.9419181011907491, 0.8490230827488369, 0.7877367968336308, 0.7111256992764965, 0.6871889922219245, 0.6726364490142226, 0.6349901472021638, 0.6457602584429736, 0.5836041802900847, 0.5795777430230159, 0.5537453483061437, 0.5464314997330034, 0.561469575590729, 0.5285195324635383, 0.5308244303075503, 0.5080340180800433, 0.486935656662898, 0.4906806913994842, 0.48747972211329504, 0.48419120425183493, 0.44637659881738795, 0.4620427036715253, 0.44808571972567973, 0.441396370587206, 0.4313543467214, 0.4048763173343861, 0.42264145497380784, 0.40863932920894164, 0.4048984375856241, 0.3937021581692986, 0.38693981663646354, 0.37462908945551576, 0.38711036643127267, 0.35703730993361565, 0.37380823919707284, 0.3823053259001495, 0.3575902885300152, 0.36263364719173075, 0.34085076603718156], "accuracy": [0.2813366651535034, 0.40087175369262695, 0.5123497843742371, 0.6020340919494629, 0.6433760523796082, 0.6800950765609741, 0.7057191729545593, 0.7259278893470764, 0.7289658188819885, 0.7448157668113708, 0.7582882046699524, 0.7568352818489075, 0.7765156626701355, 0.7847048044204712, 0.7910447716712952, 0.8013472557067871, 0.7833839654922485, 0.8074230551719666, 0.8006868362426758, 0.8109893202781677, 0.8166688680648804, 0.8204993009567261, 0.8215559124946594, 0.8232730031013489, 0.834632158279419, 0.8276317715644836, 0.8319904804229736, 0.8354246616363525, 0.8404437899589539, 0.8473120927810669, 0.8389908671379089, 0.8521991968154907, 0.8479725122451782, 0.8564258217811584, 0.8580108284950256, 0.8605204224586487, 0.8553691506385803, 0.8710870146751404, 0.8651432991027832, 0.856689989566803, 0.867520809173584, 0.8658037185668945, 0.8733324408531189], "val_loss": [1.3421450683048792, 1.452359676361084, 0.806997401373727, 0.7863904748644147, 0.8596728529248919, 0.6883264098848615, 0.5672616447721209, 0.5594087839126587, 0.5266968863351005, 0.499775767326355, 0.49826940468379427, 0.5011840718133109, 0.4777035542896816, 0.4546100071498326, 0.4404717172895159, 0.4599986587251936, 0.4329230955668858, 0.5143258912222726, 0.4406510591506958, 0.40339004141943796, 0.4052162596157619, 0.413436370236533, 0.4610621929168701, 0.38003590277263094, 0.43561639956065584, 0.39317446095602854, 0.40179172583988737, 0.3705412234578814, 0.3661686437470572, 0.3719448021480015, 0.37042767660958426, 0.35534375054495676, 0.3604239821434021, 0.36437080587659565, 0.34507029397147043, 0.33913122756140573, 0.3413538762501308, 0.34833833149501253, 0.3536703756877354, 0.34674101216452463, 0.35369535854884554, 0.3904599632535662, 0.3495753492627825], "val_accuracy": [0.5753333568572998, 0.4830000102519989, 0.6470000147819519, 0.6539999842643738, 0.6296666860580444, 0.6743333339691162, 0.7480000257492065, 0.7463333606719971, 0.7636666893959045, 0.781000018119812, 0.7820000052452087, 0.7850000262260437, 0.7933333516120911, 0.7950000166893005, 0.8063333630561829, 0.7866666913032532, 0.8146666884422302, 0.7683333158493042, 0.8033333420753479, 0.8203333616256714, 0.8246666789054871, 0.8186666369438171, 0.79666668176651, 0.8336666822433472, 0.8029999732971191, 0.828000009059906, 0.8263333439826965, 0.8346666693687439, 0.8416666388511658, 0.8379999995231628, 0.840666651725769, 0.8496666550636292, 0.8450000286102295, 0.843999981880188, 0.8513333201408386, 0.8546666502952576, 0.8539999723434448, 0.856333315372467, 0.8486666679382324, 0.8510000109672546, 0.8373333215713501, 0.8366666436195374, 0.8489999771118164]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 4, 5, 8, 8, 9, 5, 4, 9], [2, 2, 5, 3, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8222857117652893, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.049927278233242, 1.8886297911921228, 1.398656527049128, 1.0197844188510308, 0.8953450282000123, 0.813475422398793, 0.7589949345890998, 0.6888714172994109, 0.6531497971996766, 0.6334214405597177, 0.6371948994886071, 0.6118589233350697, 0.5882571347794906, 0.5996626034121173, 0.5877198234147336, 0.5245726544465592, 0.5389243996044144, 0.526292718034678, 0.5129876347297313, 0.5012119280750316, 0.4872662449525474, 0.47026076420045343, 0.46731393032731505, 0.45961621947701675, 0.4529406338508937, 0.44708888573795186, 0.41917729551340877, 0.42841406197060433, 0.4169697499923923, 0.4060274765019435, 0.4000043167319705, 0.38981387498214687, 0.39869517053689907, 0.4032881456737143, 0.38977744044046425, 0.3759662482275892, 0.3807382532996335, 0.34781495177939487, 0.3520149220887775, 0.3594429249839697, 0.3506438729588571], "accuracy": [0.3011491298675537, 0.3796063959598541, 0.5354642868041992, 0.6248844265937805, 0.6601505875587463, 0.6915863156318665, 0.7069079279899597, 0.739400327205658, 0.7479857206344604, 0.7617223858833313, 0.7539294958114624, 0.7644960880279541, 0.7784969210624695, 0.7795535326004028, 0.7771760821342468, 0.8030643463134766, 0.7947431206703186, 0.8112534880638123, 0.8086118102073669, 0.8127063512802124, 0.8197067975997925, 0.829216718673706, 0.8251221776008606, 0.82683926820755, 0.8302733898162842, 0.8317263126373291, 0.8471800088882446, 0.837141752243042, 0.8448025584220886, 0.8481045961380005, 0.8515387773513794, 0.8564258217811584, 0.8537842035293579, 0.8495575189590454, 0.8557654023170471, 0.859199583530426, 0.8548408150672913, 0.8697662353515625, 0.8669924736022949, 0.8642187118530273, 0.870030403137207], "val_loss": [1.7439492089407784, 1.2077069282531738, 0.9384120873042515, 0.8493265083857945, 0.6411199569702148, 0.6305488858904157, 0.5617777109146118, 0.5559497901371547, 0.499569228717259, 0.5193524871553693, 0.5137253488813128, 0.511696628161839, 0.4650775875364031, 0.5523233243397304, 0.4499321494783674, 0.43699937207358225, 0.41560893399374826, 0.4393701808793204, 0.43668207100459505, 0.394459000655583, 0.3955121466091701, 0.3915955764906747, 0.39166758741651264, 0.37698120730263845, 0.38815254824502127, 0.3759370190756662, 0.3771186215536935, 0.3768469861575535, 0.3918374947139195, 0.3639727660587856, 0.3850815807070051, 0.3551272749900818, 0.36613787923540386, 0.3614330291748047, 0.3445063999720982, 0.3405729957989284, 0.34861046075820923, 0.35214043515069143, 0.3412057416779654, 0.344498200075967, 0.35636327947889057], "val_accuracy": [0.2693333327770233, 0.4816666543483734, 0.5956666469573975, 0.6549999713897705, 0.722000002861023, 0.7139999866485596, 0.749666690826416, 0.7323333621025085, 0.7879999876022339, 0.7586666941642761, 0.7646666765213013, 0.7850000262260437, 0.8040000200271606, 0.7483333349227905, 0.7996666431427002, 0.8046666383743286, 0.8289999961853027, 0.8113333582878113, 0.8119999766349792, 0.8330000042915344, 0.8330000042915344, 0.8330000042915344, 0.8346666693687439, 0.8379999995231628, 0.8330000042915344, 0.8403333425521851, 0.8399999737739563, 0.8333333134651184, 0.8226666450500488, 0.8413333296775818, 0.8323333263397217, 0.8476666808128357, 0.8493333458900452, 0.8500000238418579, 0.8486666679382324, 0.8550000190734863, 0.8516666889190674, 0.8463333249092102, 0.8513333201408386, 0.8516666889190674, 0.843999981880188]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 4, 5, 8, 8, 9, 5, 4, 9], [3, 2, 5, 3, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8151428699493408, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 9, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0502104996028847, 1.839594591200832, 1.3250712348548508, 1.111915926482337, 0.9136754211071318, 0.7977041474281128, 0.8070183868075028, 0.6976882825910518, 0.6724303953635962, 0.6559244713778856, 0.6295489747573703, 0.6197193867463351, 0.5815913110455785, 0.5919076187924591, 0.563005755503794, 0.534146804378773, 0.5477465578609406, 0.5133128143997555, 0.493134048809827, 0.5052598706640824, 0.4817815811059982, 0.46774704734867495, 0.47082866651349614, 0.4523470585710888, 0.45209540080132976, 0.43826348800322856, 0.4224625265026735, 0.43213315431499494, 0.4170142953240908], "accuracy": [0.30101704597473145, 0.39730551838874817, 0.5464271306991577, 0.6052040457725525, 0.6568484902381897, 0.6950204968452454, 0.7042662501335144, 0.7412495017051697, 0.741909921169281, 0.7520803213119507, 0.7623828053474426, 0.7650244235992432, 0.7800818681716919, 0.7784969210624695, 0.7890635132789612, 0.8000264167785645, 0.791969358921051, 0.8132346868515015, 0.8177255392074585, 0.8101968169212341, 0.822348415851593, 0.8245938420295715, 0.8289526104927063, 0.8285563588142395, 0.8310658931732178, 0.834632158279419, 0.8455950617790222, 0.837537944316864, 0.8445383906364441], "val_loss": [1.7437261172703333, 0.9735904080527169, 0.8351013830729893, 0.7210801839828491, 0.6781576360974994, 0.6725862196513585, 0.5616905859538487, 0.5462703534535, 0.5434448889323643, 0.49161514214106966, 0.4883321864264352, 0.5094731364931379, 0.4782517807824271, 0.4948435000010899, 0.4651452473231724, 0.4467367615018572, 0.4145848665918623, 0.43219317708696636, 0.4736793211528233, 0.3915346009390695, 0.40529902492250713, 0.40022346803120207, 0.38431611231395174, 0.3775278074400766, 0.3968303033283779, 0.38242506980895996, 0.40055091040475027, 0.37861502170562744, 0.38266195569719585], "val_accuracy": [0.2736666798591614, 0.5586666464805603, 0.6296666860580444, 0.6936666369438171, 0.7250000238418579, 0.6893333196640015, 0.7559999823570251, 0.7543333172798157, 0.7519999742507935, 0.7786666750907898, 0.7889999747276306, 0.7873333096504211, 0.7893333435058594, 0.7570000290870667, 0.7850000262260437, 0.7963333129882812, 0.8233333230018616, 0.8159999847412109, 0.7786666750907898, 0.8316666483879089, 0.8293333053588867, 0.8273333311080933, 0.8320000171661377, 0.8376666903495789, 0.8273333311080933, 0.8346666693687439, 0.8273333311080933, 0.8323333263397217, 0.8296666741371155]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 5, 2, 7, 2, 1, 9, 6, 2, 4, 9, 2, 1, 8, 8], [0, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [59, 47, 31, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8125714063644409, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 16, 10, 6, 4, 3, 2, 1, 0, 6, 3, 3, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))))), beta)), tf.math.add(beta, grad))), grad)), tf.math.sqrt(beta)))), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.296780968953149, 2.3481028236811894, 2.264277130463781, 2.1274805471425076, 1.8372231356582118, 1.2549678338217998, 1.176318816741255, 0.9332342628773886, 0.8472672597197746, 0.913043056355019, 0.7222409265593389, 0.7245183267991431, 0.6708616133631181, 0.6895945113978413, 0.6336837341410373, 0.6133673734763169, 0.6044950613240524, 0.5592025408434941, 0.5721584381271174, 0.5523752345621248, 0.5308556647002185, 0.5382251080158538, 0.5063426155912374, 0.5264748633183414, 0.48755759013768246, 0.4950954223101118, 0.48528133471880325, 0.47337613662299133, 0.4612297552325675], "accuracy": [0.23339056968688965, 0.23444722592830658, 0.2436930388212204, 0.26324132084846497, 0.3774930536746979, 0.5435213446617126, 0.5937128663063049, 0.6688680648803711, 0.6940959095954895, 0.6676793098449707, 0.7317395210266113, 0.7228899598121643, 0.7511557340621948, 0.7417778372764587, 0.7578919529914856, 0.7656848430633545, 0.7738739848136902, 0.7869502305984497, 0.7812706232070923, 0.7942147850990295, 0.7989697456359863, 0.7960638999938965, 0.8100647330284119, 0.8004226684570312, 0.8187822103500366, 0.813498854637146, 0.8197067975997925, 0.8235371708869934, 0.8308017253875732], "val_loss": [1.9671677180698939, 1.9526878084455217, 1.9197626113891602, 1.8644027709960938, 0.9790911333901542, 0.9169752938406808, 0.6875653266906738, 0.6589120285851615, 0.7377888815743583, 0.572256360735212, 0.6491996049880981, 0.5279862369809832, 0.4973087651388986, 0.5242573874337333, 0.480959381375994, 0.48347197260175434, 0.453358667237418, 0.46683086667742046, 0.46947646141052246, 0.4492086001804897, 0.41741956983293804, 0.4180265409605844, 0.49442616530827116, 0.39130101033619474, 0.4130679454122271, 0.40974834987095426, 0.4317442774772644, 0.3930447357041495, 0.38123408385685514], "val_accuracy": [0.1626666635274887, 0.1586666703224182, 0.2626666724681854, 0.2619999945163727, 0.5613333582878113, 0.6166666746139526, 0.7200000286102295, 0.6926666498184204, 0.6723333597183228, 0.7426666617393494, 0.7236666679382324, 0.7666666507720947, 0.7873333096504211, 0.7786666750907898, 0.7760000228881836, 0.7673333287239075, 0.7940000295639038, 0.7879999876022339, 0.7806666493415833, 0.7919999957084656, 0.8243333101272583, 0.8186666369438171, 0.7720000147819519, 0.8336666822433472, 0.8143333196640015, 0.8149999976158142, 0.8133333325386047, 0.8296666741371155, 0.82833331823349]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 3, 2, 7, 2, 1, 4, 6, 3, 4, 9, 1, 1, 8, 8], [1, 3, 3, 0, 0, 2, 2, 4, 0, 0, 4, 3, 5], [51, 47, 64, 35, 85, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.800000011920929, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 15, 13, 5, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, beta), beta))))), tf.math.add(beta, grad)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), grad))), grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.296209668470742, 2.3237933005324254, 2.2556154777061797, 2.304713916973809, 2.293410960095292, 2.2312641336838834, 2.2297621678997417, 2.3048766510534784, 2.2947089370719476, 2.0576036862567464, 1.985933020980587, 1.5665555348595954, 1.1275890961834594, 0.925696049053372, 0.8394760254462004, 0.781953783689347, 0.7489988918727053, 0.740953044766338, 0.6911776595426793, 0.6581959556264175, 0.6517645037878049, 0.6513232602072965, 0.6529999888332182, 0.5948520946370424, 0.5817625747931836, 0.5856234957875514, 0.5526980045150064, 0.5683320944477082, 0.5373666401174578], "accuracy": [0.23352265357971191, 0.2487121969461441, 0.2413155436515808, 0.10328886657953262, 0.12217672914266586, 0.1776515692472458, 0.2090873122215271, 0.09787346422672272, 0.13300752639770508, 0.31581032276153564, 0.2975828945636749, 0.4702152907848358, 0.6104874014854431, 0.6627922058105469, 0.6905296444892883, 0.7107383608818054, 0.7205125093460083, 0.7251353859901428, 0.7416457533836365, 0.7556465268135071, 0.7564390301704407, 0.7564390301704407, 0.7515519857406616, 0.7773081660270691, 0.7779685854911804, 0.7740060687065125, 0.7881389260292053, 0.7845727205276489, 0.7901201844215393], "val_loss": [1.9671408108302526, 1.9662362507411413, 1.9771969658987862, 1.972416945866176, 1.9363604954310827, 1.8840898786272322, 1.9752746309552873, 1.9718599319458008, 1.9328551973615373, 1.9590221813746862, 1.4549315656934465, 0.7970083781651088, 0.7598273583820888, 0.5975752217429025, 0.6001415252685547, 0.5499858685902187, 0.5645217554909843, 0.5324700219290597, 0.5458040578024728, 0.48844202927180697, 0.4879275219781058, 0.5173219272068569, 0.46933618613651823, 0.44389162744794575, 0.5264088256018502, 0.44851769719805035, 0.44938341208866667, 0.4469817025320871, 0.4309225593294416], "val_accuracy": [0.16066665947437286, 0.1823333352804184, 0.10733333230018616, 0.1589999943971634, 0.2163333296775818, 0.23499999940395355, 0.10366666316986084, 0.10366666316986084, 0.26366665959358215, 0.1379999965429306, 0.3659999966621399, 0.6613333225250244, 0.6663333177566528, 0.7386666536331177, 0.7193333506584167, 0.7473333477973938, 0.7446666955947876, 0.7536666393280029, 0.7269999980926514, 0.7786666750907898, 0.7820000052452087, 0.7673333287239075, 0.796999990940094, 0.8066666722297668, 0.7356666922569275, 0.7983333468437195, 0.8019999861717224, 0.7953333258628845, 0.8006666898727417]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 0, 9, 7, 5, 1, 2, 6, 5, 8, 9], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [36, 47, 64, 35, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [29, 57, 26]], "fitness": -0.7985714077949524, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2902303277351885, 2.257932667404102, 2.2170162236197686, 2.1613761337914124, 2.0791269495282205, 1.9583978390161467, 1.8124006362780762, 1.6443967765364207, 1.4934111474732115, 1.3768158858368158, 1.2964802968456384, 1.206672674141162, 1.1553094659924208, 1.109013622116655, 1.066209049304211, 1.0297250391832038, 0.9976125375123277, 0.9738058738500025, 0.9515416608148357, 0.9221293793819237, 0.9088355247622641, 0.882091945133441, 0.8698797891829952, 0.8540490885704201, 0.8496557572703273, 0.8395876105687307, 0.8288638772682317, 0.813961844072051, 0.8122165728679753, 0.798462830687621, 0.7909552731990751, 0.7845249955507081, 0.77030013537662, 0.7813337665696296, 0.759234775830537, 0.7512893265563704, 0.7516266306346323, 0.7496756821685794, 0.7421912520143727, 0.7448175741602416, 0.7279449159269871, 0.7314788743316253, 0.7287855219170245, 0.723585164022641, 0.7124073195057522, 0.7146490401422437, 0.7155688496282182, 0.6915400382266651, 0.7011765134710882, 0.6944466807098751, 0.6977321977045998, 0.6855739664014273, 0.6873302554032428, 0.6878562950344763, 0.6801224636710347, 0.6767812503909926, 0.676286282485518, 0.6732478170835142, 0.6670987406474189, 0.6605890127787768, 0.6568716423480959, 0.6550222650935952, 0.6562280724896038, 0.6542478342727663, 0.6435391723188537, 0.6474232453522728, 0.642897365273045, 0.6402562928237557, 0.6404501272624021, 0.6395926577240926, 0.6414541405866867, 0.6384591772146606, 0.6349966343777165, 0.6362768446512667, 0.6278097125926841, 0.6251227169571583, 0.6260240472869913, 0.6227460231259514, 0.6192586020849573, 0.6245294408539361], "accuracy": [0.12336547672748566, 0.21701228618621826, 0.2805441915988922, 0.3339056968688965, 0.38805970549583435, 0.41923126578330994, 0.44630828499794006, 0.48487651348114014, 0.5168405771255493, 0.54220050573349, 0.5576542019844055, 0.5889578461647034, 0.5968828201293945, 0.615770697593689, 0.6252806782722473, 0.635451078414917, 0.6446968913078308, 0.6501122713088989, 0.6581693291664124, 0.6675472259521484, 0.6777176260948181, 0.6844538450241089, 0.6880200505256653, 0.6926429867744446, 0.6980583667755127, 0.696209192276001, 0.698190450668335, 0.7036058902740479, 0.7051908373832703, 0.7066437602043152, 0.709549605846405, 0.7144366502761841, 0.7136441469192505, 0.7148329019546509, 0.726192057132721, 0.7302865982055664, 0.7234182953834534, 0.7255316376686096, 0.722757875919342, 0.7265883088111877, 0.7321357727050781, 0.7297582626342773, 0.7298903465270996, 0.7316074371337891, 0.733060359954834, 0.7323999404907227, 0.7329282760620117, 0.7388719916343689, 0.7346453666687012, 0.7407211661338806, 0.7396644949913025, 0.7483819723129272, 0.7474573850631714, 0.7467969655990601, 0.7437590956687927, 0.7497028112411499, 0.7478536367416382, 0.7478536367416382, 0.7523444890975952, 0.7519482374191284, 0.7539294958114624, 0.7512878179550171, 0.7531369924545288, 0.7512878179550171, 0.7656848430633545, 0.7543256878852844, 0.7625148296356201, 0.7631752490997314, 0.759080708026886, 0.7588165402412415, 0.7563069462776184, 0.7627789974212646, 0.7609298825263977, 0.7581561207771301, 0.7648923397064209, 0.7655527591705322, 0.7623828053474426, 0.7611940503120422, 0.7652885913848877, 0.7606657147407532], "val_loss": [1.941173485347203, 1.907843794141497, 1.862602710723877, 1.7958871296473913, 1.6991723264966692, 1.5663013117653983, 1.4100700446537562, 1.2515034335000175, 1.1120873859950475, 1.0074975831168038, 0.9295814377920968, 0.8681873594011579, 0.8233719212668282, 0.7875738995415824, 0.7584412779126849, 0.734096884727478, 0.71311012336186, 0.6956283875874111, 0.6816039936883109, 0.6682195663452148, 0.6570683377129691, 0.6456383807318551, 0.6349038566861834, 0.6281516551971436, 0.6184777872903007, 0.6117482355662754, 0.6078938245773315, 0.5990963322775704, 0.5951998574393136, 0.5920769998005458, 0.5838402850287301, 0.5794052055903843, 0.5758867263793945, 0.572165676525661, 0.569035393851144, 0.5625161273138863, 0.5593388591493879, 0.556070259639195, 0.5522191524505615, 0.5516052416392735, 0.5474328824451992, 0.5435303279331752, 0.5401245525905064, 0.5395516157150269, 0.5368999923978534, 0.5336815970284599, 0.5309039865221296, 0.5294951541083199, 0.5270717314311436, 0.5239104373114449, 0.521449054990496, 0.5197675228118896, 0.5214997700282505, 0.5218625238963536, 0.5145357166017804, 0.5125621727534703, 0.5116217647280011, 0.5082908187593732, 0.5065788541521344, 0.5038482121058873, 0.5035578693662371, 0.5002549375806536, 0.5013830832072667, 0.4981062241962978, 0.4971820626940046, 0.4967453309467861, 0.49592273575919016, 0.49281643118177143, 0.4925429480416434, 0.49159300327301025, 0.4902765580586025, 0.4878206253051758, 0.48781274046216694, 0.48645334584372385, 0.48493528366088867, 0.4816796949931553, 0.4817629541669573, 0.47895346369062153, 0.4796873501368931, 0.47726290566580637], "val_accuracy": [0.2916666567325592, 0.37933334708213806, 0.43966665863990784, 0.4846666753292084, 0.5213333368301392, 0.5543333292007446, 0.5816666483879089, 0.6056666374206543, 0.6393333077430725, 0.6470000147819519, 0.6673333048820496, 0.6790000200271606, 0.6869999766349792, 0.6899999976158142, 0.6996666789054871, 0.7046666741371155, 0.7066666483879089, 0.7133333086967468, 0.7193333506584167, 0.7246666550636292, 0.7266666889190674, 0.7316666841506958, 0.7289999723434448, 0.734000027179718, 0.7379999756813049, 0.7406666874885559, 0.734000027179718, 0.7426666617393494, 0.7450000047683716, 0.7413333058357239, 0.749666690826416, 0.753333330154419, 0.75, 0.7580000162124634, 0.7526666522026062, 0.7586666941642761, 0.7620000243186951, 0.7556666731834412, 0.765999972820282, 0.7630000114440918, 0.7663333415985107, 0.7693333625793457, 0.7696666717529297, 0.7620000243186951, 0.7663333415985107, 0.7689999938011169, 0.7706666588783264, 0.7680000066757202, 0.768666684627533, 0.7736666798591614, 0.7746666669845581, 0.7733333110809326, 0.7726666927337646, 0.7703333497047424, 0.7749999761581421, 0.7763333320617676, 0.7739999890327454, 0.7826666831970215, 0.7833333611488342, 0.7799999713897705, 0.778333306312561, 0.7786666750907898, 0.7786666750907898, 0.7846666574478149, 0.7789999842643738, 0.7823333144187927, 0.777999997138977, 0.7836666703224182, 0.7853333353996277, 0.7860000133514404, 0.7873333096504211, 0.7836666703224182, 0.7826666831970215, 0.7863333225250244, 0.7896666526794434, 0.7889999747276306, 0.7883333563804626, 0.7870000004768372, 0.7870000004768372, 0.7889999747276306]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 3, 2, 7, 2, 1, 9, 6, 3, 4, 9, 1, 1, 8, 8], [0, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [59, 50, 79, 52, 26, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.7865714430809021, "mapping_values": [1, 1, 1, 0, 1, 0, 25, 25, 14, 11, 6, 4, 3, 2, 1, 0, 6, 3, 3, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, grad))), tf.math.add(beta, grad)))), beta)), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2446954034307236, 2.1143794569278263, 1.9215570937184263, 1.615846883320081, 1.0761204377031282, 0.8434955001491455, 0.7739567690521671, 0.6976882260725278, 0.657606106156513, 0.6600513745292681, 0.6234697079331002, 0.6076155103838533, 0.5945698346412728, 0.5825096819819933, 0.5663249316610413, 0.5506178269714113], "accuracy": [0.24276845157146454, 0.27618545293807983, 0.3181878328323364, 0.44868576526641846, 0.6156386137008667, 0.6798309087753296, 0.7140403985977173, 0.7312111854553223, 0.7498348951339722, 0.7436270117759705, 0.759080708026886, 0.7663452625274658, 0.78113853931427, 0.7779685854911804, 0.7880068421363831, 0.7921014428138733], "val_loss": [1.9679262297494071, 1.9383982930864607, 1.373354469026838, 0.8276994909558978, 0.7341693469456264, 0.655406083379473, 0.5247985124588013, 0.4965437820979527, 0.5008240256990705, 0.4699519872665405, 0.4587911708014352, 0.4874969720840454, 0.46104514598846436, 0.48294389247894287, 0.46261354855128695, 0.44188524995531353], "val_accuracy": [0.09866666793823242, 0.20266667008399963, 0.4620000123977661, 0.6740000247955322, 0.6446666717529297, 0.7013333439826965, 0.7583333253860474, 0.7639999985694885, 0.7703333497047424, 0.7856666445732117, 0.7926666736602783, 0.781000018119812, 0.7863333225250244, 0.7666666507720947, 0.7870000004768372, 0.7919999957084656]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 8, 4, 5, 8, 2, 9, 5, 4, 9], [0, 2, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.7685714364051819, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3092164134525777, 2.176025167448079, 1.64858624230066, 1.2980556431668169, 1.0398382946894138, 0.99958247203774, 0.8877869443477121, 0.7849456106887407, 0.7705208063361793, 0.6918233615721316, 0.6889710502223946, 0.6919165013756309, 0.6721708257326502, 0.6544490206306164], "accuracy": [0.2565050721168518, 0.29124289751052856, 0.439439982175827, 0.520142674446106, 0.6159027814865112, 0.6269977688789368, 0.6639809608459473, 0.71100252866745, 0.7041342258453369, 0.7382115721702576, 0.7415136694908142, 0.7396644949913025, 0.7493065595626831, 0.752740740776062], "val_loss": [1.7315611158098494, 1.5613604613712855, 1.063152756009783, 0.8431007521493095, 0.7351658514567784, 0.6631142922810146, 0.5941945144108364, 0.6192892619541713, 0.5393684932163784, 0.5773085185459682, 0.5267379624502999, 0.5999928883143834, 0.5292626789637974, 0.5059944561549595], "val_accuracy": [0.40833333134651184, 0.5533333420753479, 0.5239999890327454, 0.6036666631698608, 0.6793333292007446, 0.7296666502952576, 0.7386666536331177, 0.7110000252723694, 0.765333354473114, 0.7273333072662354, 0.7570000290870667, 0.7300000190734863, 0.7480000257492065, 0.7553333044052124]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 9, 8, 5, 1, 3, 6, 5, 8, 9, 2], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [36, 47, 76, 35, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.3182857036590576, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 12, 5, 4, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.21494475624675, 2.1255153049299698, 2.2901017399763846, 2.2458660605088863, 2.2858887471700498, 2.0503028580037403], "accuracy": [0.2587504982948303, 0.2847708463668823, 0.12468630075454712, 0.2735437750816345, 0.1414608359336853, 0.2793554365634918], "val_loss": [1.7474376814705985, 1.9750176157270158, 1.8210867473057337, 1.9784280913216727, 1.8553927285330636, 1.9188706534249442], "val_accuracy": [0.37566667795181274, 0.1003333330154419, 0.25333333015441895, 0.1003333330154419, 0.35899999737739563, 0.2563333213329315]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 3, 2, 7, 2, 1, 6, 6, 3, 4, 9, 1, 1, 8, 8], [3, 3, 0, 0, 0, 2, 2, 4, 2, 0, 1, 0, 5], [99, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.28542858362197876, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.538407581766693, 2.327532616872136, 2.3020362295353056, 2.1736746771838513, 2.3043453184809777, 2.2879328474219385], "accuracy": [0.20631356537342072, 0.12112006545066833, 0.10368511080741882, 0.21291771531105042, 0.10130762308835983, 0.14674416184425354], "val_loss": [1.9312951905386788, 1.974391051701137, 1.9657934052603585, 1.9770639283316476, 1.9701707022530692, 1.9746417318071638], "val_accuracy": [0.2823333442211151, 0.1003333330154419, 0.10166666656732559, 0.1003333330154419, 0.09933333098888397, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 3, 2, 3, 2, 1, 9, 6, 3, 4, 9, 1, 1, 8, 8], [3, 2, 3, 3, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [44, 57]], "fitness": -0.2848571538925171, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 3, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), beta))), tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), grad), beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.53836342170805, 2.3254740082938925, 2.3018700164842283, 2.1174695441090217, 2.3051976827566794, 2.303028613632035], "accuracy": [0.20618148148059845, 0.1216483935713768, 0.10619468986988068, 0.24342887103557587, 0.09853387624025345, 0.10117553919553757], "val_loss": [1.9200401306152344, 1.9743174825395857, 1.964712347303118, 1.9761172022138322, 1.9741365568978446, 1.9738127163478307], "val_accuracy": [0.28166666626930237, 0.1003333330154419, 0.09700000286102295, 0.09933333098888397, 0.09933333098888397, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 3, 2, 7, 2, 1, 9, 6, 3, 4, 9, 1, 1, 8, 8], [3, 3, 0, 3, 0, 2, 3, 4, 2, 2, 1, 0, 5], [59, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.28457143902778625, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 15, 11, 4, 4, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(beta, grad)))))), tf.math.add(beta, grad)), beta)))), tf.math.add(beta, tf.math.sqrt(beta))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.5382562893855023, 2.3286848297177083, 2.3019855229011568, 2.2602880319127507, 2.30565343128613, 2.3029462220788144], "accuracy": [0.20657773315906525, 0.12230881303548813, 0.10434553027153015, 0.18042530119419098, 0.10170386731624603, 0.09747721254825592], "val_loss": [1.9359874044145857, 1.9743876457214355, 1.965430464063372, 1.976104804447719, 1.9737606729779924, 1.97332729612078], "val_accuracy": [0.281333327293396, 0.1003333330154419, 0.1146666631102562, 0.10199999809265137, 0.10199999809265137, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 0, 9, 7, 5, 1, 2, 6, 5, 8, 9], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [36, 47, 64, 35, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [29, 57, 26]], "fitness": -0.1388571411371231, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.498222824730783, 2.306223967166357, 3.5274128683994883, 227.3318546186459, 2.317377218087241, 2.305611756310534, 2.30345658042947, 2.302995187416525], "accuracy": [0.22956016659736633, 0.10038304328918457, 0.18531237542629242, 0.10381719470024109, 0.09998679161071777, 0.09998679161071777, 0.09985470771789551, 0.09259014576673508], "val_loss": [1.9825960568019323, 1.9639416422162737, 9.826193673270089, 1.9958910942077637, 1.978198460170201, 1.9745630536760603, 1.9739106723240443, 1.9738080160958427], "val_accuracy": [0.09833333641290665, 0.09799999743700027, 0.1379999965429306, 0.10066666454076767, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 4, 5, 8, 8, 9, 5, 4, 9], [3, 3, 5, 3, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 13, 13, 9, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad), tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 2, 7, 2, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 3, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)), tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.square(beta))))), tf.math.add(beta, beta))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07634394615888596, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 6, 0, 9, 7, 5, 1, 2, 6, 5, 8, 9, 9, 7, 7], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [99, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [29, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 15, 6, 5, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(alpha, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.sqrt(grad))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), grad))))))), tf.math.add(beta, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.4328613853127083, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.035001982003450394, 0.07687227427959442, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [3.1038220269339427, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004333333112299442, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 4, 5, 8, 8, 9, 5, 4, 9], [3, 2, 5, 3, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.square(tf.math.add(beta, grad))), tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.sqrt(grad))), tf.math.sqrt(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [329.2280562944605, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18016114830970764, 0.08915598690509796, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [500.94717843191967, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.028999999165534973, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 3, 2, 7, 2, 1, 9, 6, 3, 4, 9, 1, 1, 8, 8], [0, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [59, 22, 4, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 2, 2, 3, 3, 2], [48, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 13, 10, 6, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.pow(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))), beta)), tf.math.add(beta, tf.math.subtract(grad, grad))))), beta)), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(beta))", "other_info": {"loss": [2.3035545406749676, 2.3038809222945793, 2.3030696675415605, 2.303765478513307, 2.304015677193483, 2.3023383891687983], "accuracy": [0.09166556596755981, 0.08981640636920929, 0.08413683623075485, 0.08730682730674744, 0.09021265059709549, 0.08889182657003403], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [3, 3, 2, 2, 1, 2, 1, 9, 6, 3, 5, 9, 1, 1, 8, 8, 1], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0, 4], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 17, 11, 6, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, beta))), tf.math.add(beta, beta)), grad))), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, beta), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3035545406749676, 2.3038809222945793, 2.3030696675415605, 2.303765478513307, 2.304015677193483, 2.3023383891687983], "accuracy": [0.09166556596755981, 0.08981640636920929, 0.08413683623075485, 0.08730682730674744, 0.09021265059709549, 0.08889182657003403], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 3, 3, 1, 7, 4, 1, 9, 6, 2, 4, 9, 1, 1, 8, 8, 8], [0, 3, 0, 3, 0, 2, 3, 3, 2, 0, 1, 0, 5], [59, 47, 70, 81, 53, 26], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 3, 2, 3, 3, 2], [48, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 17, 11, 6, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), beta), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, beta)))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(sigma))", "other_info": {"loss": [2.3035545406749676, 2.3038809222945793, 2.3030696675415605, 2.303765478513307, 2.304015677193483, 2.3023383891687983], "accuracy": [0.09166556596755981, 0.08981640636920929, 0.08413683623075485, 0.08730682730674744, 0.09021265059709549, 0.08889182657003403], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]