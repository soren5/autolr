[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8291428685188293, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 4, 6, 5, 4, 1, 1, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5185031638626, 2.251858347584275, 1.8769940851292417, 1.4697458459212718, 1.2521246704427307, 1.152973709483078, 0.984621529156553, 0.9122142280412466, 0.8775742195459043, 0.8172074528874785, 0.7789161443757564, 0.773135895458872, 0.7274441614268777, 0.7285303526534979, 0.7083681642245528, 0.6791574222977608, 0.6827589685355415, 0.6585371482798987, 0.6314967891496359, 0.655684343764905, 0.5999558626101742, 0.5957481839228237, 0.5862571015302547, 0.5947888631232426, 0.560571603007588, 0.529787591246566, 0.5336486258448202, 0.5209492657438418, 0.5557669392115152, 0.5375331410437748, 0.5268349366110266, 0.4812260051334791], "accuracy": [0.22084268927574158, 0.18491612374782562, 0.39902257919311523, 0.5097081065177917, 0.5518425703048706, 0.5779950022697449, 0.6432439684867859, 0.6585655808448792, 0.6774534583091736, 0.6972658634185791, 0.7020208835601807, 0.7098137736320496, 0.7239466309547424, 0.7305507659912109, 0.7283053994178772, 0.7403249144554138, 0.7416457533836365, 0.7475894689559937, 0.7564390301704407, 0.7584202885627747, 0.7779685854911804, 0.772288978099823, 0.7763835787773132, 0.7798177003860474, 0.7861577272415161, 0.8053097128868103, 0.7960638999938965, 0.8099326491355896, 0.7884030938148499, 0.8034605979919434, 0.7965922355651855, 0.8251221776008606], "val_loss": [1.9740870339529855, 1.4604720728737968, 1.302781649998256, 1.0375914914267403, 0.8911182539803642, 0.7798589297703334, 0.7975676230021885, 0.6714463404246739, 0.6773980174745832, 0.5908717427934919, 0.6276118585041591, 0.5851047549928937, 0.5994758605957031, 0.5797075884682792, 0.5272946357727051, 0.5530329602105277, 0.5416564260210309, 0.5343554701123919, 0.5226542779377529, 0.4971542698996408, 0.4843245915004185, 0.4807112898145403, 0.46574221338544575, 0.47831034660339355, 0.4487178495952061, 0.43692924295152935, 0.4213733502796718, 0.455379707472665, 0.4803919110979353, 0.482716475214277, 0.4171643427440098, 0.4319659812109811], "val_accuracy": [0.10366666316986084, 0.47999998927116394, 0.4866666793823242, 0.5709999799728394, 0.5950000286102295, 0.6846666932106018, 0.6496666669845581, 0.6973333358764648, 0.70333331823349, 0.7426666617393494, 0.7366666793823242, 0.7336666584014893, 0.7456666827201843, 0.7490000128746033, 0.7670000195503235, 0.7643333077430725, 0.7543333172798157, 0.7403333187103271, 0.7706666588783264, 0.7806666493415833, 0.7829999923706055, 0.7789999842643738, 0.7993333339691162, 0.7820000052452087, 0.8100000023841858, 0.8059999942779541, 0.8230000138282776, 0.8050000071525574, 0.7823333144187927, 0.7856666445732117, 0.8220000267028809, 0.8180000185966492]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8288571238517761, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(beta))), beta)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5184156239985347, 2.250445586059544, 1.832726651084516, 1.5636367642443336, 1.3805194518758541, 1.0795365562685855, 0.9891914848039934, 0.8716060970012522, 0.8542184363723415, 0.832531512751949, 0.790775714816828, 0.7422496448213776, 0.7257664477143384, 0.7182338420882783, 0.6892126704786495, 0.6621160805579647, 0.7314105606302688, 0.6299538664877014, 0.6114622509600763, 0.6313218626647247, 0.5752506286177448, 0.570647938982717, 0.5699863820075359, 0.5514175747489853, 0.5446204731115151, 0.5222316898091626, 0.5113037568687401, 0.5163004302180219, 0.5182473648099883, 0.5287856748232894, 0.5071274469580869, 0.47832291706237245, 0.4987917670626068, 0.47634141088681464, 0.4691128747582262, 0.46566129209043927, 0.44840383874489853, 0.4416121950616863, 0.43997921999246214, 0.4283904249539638, 0.4245173089996447, 0.4504443771173736, 0.40307553625220177, 0.40247762263836784, 0.4177310635755091, 0.41235307764383494, 0.39008706885243233, 0.3914833809319835], "accuracy": [0.22097477316856384, 0.18544445931911469, 0.4037775695323944, 0.4799894392490387, 0.5036323070526123, 0.6096948981285095, 0.6283186078071594, 0.6775855422019958, 0.685510516166687, 0.6925109028816223, 0.698718786239624, 0.7149649858474731, 0.7235503792762756, 0.7296261787414551, 0.7421740889549255, 0.7555144429206848, 0.7220974564552307, 0.7622507214546204, 0.7724210619926453, 0.7582882046699524, 0.7874785661697388, 0.7873464822769165, 0.7843085527420044, 0.8010830879211426, 0.7938185334205627, 0.8054417967796326, 0.8095363974571228, 0.8084797263145447, 0.804649293422699, 0.8075551390647888, 0.8117818236351013, 0.8219521641731262, 0.8137630224227905, 0.824329674243927, 0.8238013386726379, 0.8182538747787476, 0.8338396549224854, 0.8356888294219971, 0.8366134166717529, 0.841500461101532, 0.8454629778862, 0.8294808864593506, 0.8511425256729126, 0.8518029451370239, 0.8430854678153992, 0.8490291833877563, 0.8544445633888245, 0.8543124794960022], "val_loss": [1.9740945271083288, 1.4506033488682337, 1.1711081096104212, 1.0639726775033134, 0.7632246698651995, 0.7153057370867048, 0.7985810722623553, 0.6335185595921108, 0.6290995563779559, 0.6574572324752808, 0.574394873210362, 0.6443303993770054, 0.6124588932309832, 0.5899549552372524, 0.5277646950313023, 0.5576199633734567, 0.4999124663216727, 0.5420037848608834, 0.516141380582537, 0.47114014625549316, 0.48964531081063406, 0.47211800302777973, 0.45021300656454905, 0.4972649812698364, 0.42334353072302683, 0.43309537853513447, 0.4466652529580252, 0.42580312490463257, 0.4931214877537319, 0.46489105905805317, 0.4052791254861014, 0.4148554801940918, 0.42496022156306673, 0.39612877368927, 0.43289283343723844, 0.382397072655814, 0.3882925936153957, 0.36551363127572195, 0.3706920998437064, 0.38939649718148367, 0.4043441755431039, 0.37830881561551777, 0.3564031720161438, 0.3792293071746826, 0.3755140560013907, 0.3685740147318159, 0.3519397292818342, 0.36361786297389437], "val_accuracy": [0.10366666316986084, 0.48399999737739563, 0.5120000243186951, 0.5073333382606506, 0.6600000262260437, 0.6763333082199097, 0.6603333353996277, 0.718999981880188, 0.7213333249092102, 0.7153333425521851, 0.7480000257492065, 0.7203333377838135, 0.7310000061988831, 0.734000027179718, 0.7633333206176758, 0.7406666874885559, 0.7823333144187927, 0.7523333430290222, 0.777999997138977, 0.7950000166893005, 0.781333327293396, 0.7893333435058594, 0.8073333501815796, 0.7770000100135803, 0.8233333230018616, 0.8240000009536743, 0.8050000071525574, 0.8116666674613953, 0.7870000004768372, 0.7863333225250244, 0.8266666531562805, 0.8339999914169312, 0.8143333196640015, 0.831333339214325, 0.8026666641235352, 0.8396666646003723, 0.828000009059906, 0.840666651725769, 0.8433333039283752, 0.8246666789054871, 0.8133333325386047, 0.8453333377838135, 0.8516666889190674, 0.8330000042915344, 0.8379999995231628, 0.8320000171661377, 0.8506666421890259, 0.8476666808128357]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8282856941223145, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 1, 5, 5, 4, 1, 1, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(alpha, grad)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), beta), beta)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5186828031138093, 2.250490813915992, 1.8452180468442496, 1.4450389952502782, 1.2348992261337393, 1.1441776701220274, 0.9479815565741467, 0.8856177196495127, 0.8241267552103081, 0.8772079673866475, 0.8030930955679881, 0.7824138918132074, 0.7514057271453163, 0.7508281991072713, 0.6985886510510282, 0.6737692971995415, 0.6984035497674727, 0.6408532544008068, 0.6497007378844096, 0.6307595604839987, 0.5951529321984182, 0.5918594508312162, 0.5735080494872489, 0.5817602822541592, 0.5701080047616617, 0.5498464514220065, 0.5141678525354129, 0.5511403192838957, 0.5243812479071881, 0.5255484399132961, 0.5200188765436383, 0.48359161747240387, 0.4802337784604027, 0.47084984272273617, 0.4635679501591893, 0.4672298720129855, 0.45850366842493234, 0.45539970386376266, 0.440917205576726, 0.4275746103117825, 0.422644058915807, 0.4835625848143785, 0.42732149710146317, 0.41415495659382023, 0.4445914599039236, 0.41816247896731823, 0.40676025649292313, 0.406549275771675, 0.3961934363207466, 0.3710562420078729, 0.3953037293335828, 0.36788446400789393, 0.38185722799018357, 0.3652150486918835, 0.3579683413146242, 0.3452363657504182, 0.34005643926307966, 0.34238951834610754, 0.3548553629542512, 0.34392885932077144, 0.3238226195659305], "accuracy": [0.22097477316856384, 0.18478403985500336, 0.40364548563957214, 0.5135384798049927, 0.5497292280197144, 0.6056002974510193, 0.6510368585586548, 0.6680755615234375, 0.6870955228805542, 0.6831330060958862, 0.6947563290596008, 0.7107383608818054, 0.7164179086685181, 0.7127195596694946, 0.7357020378112793, 0.7453441023826599, 0.7347774505615234, 0.7578919529914856, 0.7526086568832397, 0.7607977986335754, 0.7788931727409363, 0.7721568942070007, 0.7837802171707153, 0.785101056098938, 0.7887993454933167, 0.7913089394569397, 0.8054417967796326, 0.7975168228149414, 0.800290584564209, 0.8132346868515015, 0.8026680946350098, 0.8244617581367493, 0.8220842480659485, 0.8272355198860168, 0.8321225643157959, 0.8178576231002808, 0.8297450542449951, 0.8304054737091064, 0.8342359066009521, 0.8436138033866882, 0.8470479249954224, 0.8169330358505249, 0.8425571322441101, 0.8471800088882446, 0.8339717388153076, 0.8428213000297546, 0.8481045961380005, 0.8470479249954224, 0.8515387773513794, 0.8651432991027832, 0.8551049828529358, 0.8652753829956055, 0.8578787446022034, 0.8613129258155823, 0.8614450097084045, 0.8648791313171387, 0.8737286925315857, 0.8766345381736755, 0.8673887252807617, 0.8698983192443848, 0.8770307898521423], "val_loss": [1.9741015434265137, 1.4519366196223669, 1.3338163920811243, 1.0762270518711634, 1.1689440863473075, 0.7075830868312291, 0.7956433636801583, 0.6265289272580828, 0.6823976380484444, 0.6042316811425346, 0.6385360104697091, 0.6302549839019775, 0.6565836838313511, 0.5680798803056989, 0.5386862754821777, 0.5506796325956073, 0.5187041078295026, 0.5457390376499721, 0.5778416054589408, 0.5189282042639596, 0.537826486996242, 0.4824478455952236, 0.48344041619982037, 0.46630632877349854, 0.4586930274963379, 0.4553652490888323, 0.4406741516930716, 0.45499941280909945, 0.47218496458871023, 0.48195457458496094, 0.40824924196515766, 0.4071094478879656, 0.4128319706235613, 0.3815546546663557, 0.41572022438049316, 0.39008710214069914, 0.39983345781053814, 0.36858940976006643, 0.36977901629039217, 0.36661291122436523, 0.41831538506916593, 0.4057542681694031, 0.3621015804154532, 0.37399983406066895, 0.37752399274281095, 0.36341549668993267, 0.3530483501298087, 0.36427174295697895, 0.35190277440207346, 0.3637695142201015, 0.3518983040537153, 0.4068752867834909, 0.3407553093773978, 0.34355839661189486, 0.3458025796072824, 0.3335517474583217, 0.3395234090941293, 0.3482756870133536, 0.3382886052131653, 0.35984853335789274, 0.3412603735923767], "val_accuracy": [0.10366666316986084, 0.47999998927116394, 0.47833332419395447, 0.5216666460037231, 0.5873333215713501, 0.6926666498184204, 0.6330000162124634, 0.7293333411216736, 0.6949999928474426, 0.7336666584014893, 0.7419999837875366, 0.7179999947547913, 0.7103333473205566, 0.7423333525657654, 0.768666684627533, 0.7360000014305115, 0.7693333625793457, 0.7406666874885559, 0.7386666536331177, 0.7663333415985107, 0.753000020980835, 0.7863333225250244, 0.7766666412353516, 0.7860000133514404, 0.7963333129882812, 0.8050000071525574, 0.8106666803359985, 0.809333324432373, 0.7916666865348816, 0.7803333401679993, 0.82833331823349, 0.8289999961853027, 0.8246666789054871, 0.8356666564941406, 0.8193333148956299, 0.828000009059906, 0.8193333148956299, 0.8393333554267883, 0.8370000123977661, 0.840666651725769, 0.8119999766349792, 0.8289999961853027, 0.8483333587646484, 0.8429999947547913, 0.8413333296775818, 0.8413333296775818, 0.8500000238418579, 0.8446666598320007, 0.8539999723434448, 0.8426666855812073, 0.8513333201408386, 0.8176666498184204, 0.8546666502952576, 0.8529999852180481, 0.846666693687439, 0.8663333058357239, 0.8529999852180481, 0.8550000190734863, 0.8606666922569275, 0.8443333506584167, 0.8533333539962769]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 6, 5, 2, 7, 5, 1, 8, 6, 5, 8, 9], [0, 3, 5, 3, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [4, 0, 8, 9, 7], [3, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.8214285969734192, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 1, 5, 4, 4, 0, 1, 6, 3, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, grad))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2484895471316664, 2.1810373173193325, 2.057624368304826, 2.1894909737368677, 2.0942481602376652, 2.0751046785478815, 1.714922446789538, 1.3135096554931884, 1.1471895768484655, 0.847417252096187, 0.750835517984513, 0.7331661508619006, 0.6686222206300764, 0.6343553573574137, 0.6562040152173111, 0.5985549223452921, 0.6187042844782038, 0.5816885951078327, 0.5703084186918117, 0.557805282415227, 0.5515414620702292, 0.5194449723317969, 0.5356380023685161, 0.4993139936419809, 0.5226152955170997, 0.47799526188651004, 0.4822542612988164, 0.46958147737847944, 0.4874041667073993, 0.47214728797730704, 0.4622076923238477, 0.4596368368110322, 0.44714775955073977, 0.41823970443694475, 0.4395067925190866, 0.4261439819464106, 0.42304989027151924, 0.4118611736343899, 0.39660018669883446, 0.4036895549568156, 0.41104997601396986, 0.41617642782540953, 0.38946079814186846, 0.38373477353695096], "accuracy": [0.23233389854431152, 0.20472857356071472, 0.2965262234210968, 0.22454100847244263, 0.27618545293807983, 0.3069607615470886, 0.41962751746177673, 0.5408796668052673, 0.5927882790565491, 0.6791704893112183, 0.7162858247756958, 0.7298903465270996, 0.7466648817062378, 0.7584202885627747, 0.7559106945991516, 0.7758552432060242, 0.7633073329925537, 0.7802139520645142, 0.783119797706604, 0.7878747582435608, 0.7946110367774963, 0.8078193068504333, 0.7968564033508301, 0.8158763647079468, 0.7991018295288086, 0.8191784620285034, 0.8142913579940796, 0.8265751004219055, 0.8164047002792358, 0.8239334225654602, 0.8321225643157959, 0.8235371708869934, 0.8354246616363525, 0.8429533839225769, 0.8345000743865967, 0.8403117060661316, 0.8441421389579773, 0.850350022315979, 0.8557654023170471, 0.8487650156021118, 0.8438779711723328, 0.8405758738517761, 0.8565579056739807, 0.8558974862098694], "val_loss": [1.6847405433654785, 1.9206199645996094, 1.9709527151925224, 1.580028806413923, 1.9457395417349679, 1.873946189880371, 1.2952245303562708, 0.8345882041113717, 0.8342165606362479, 0.674064006124224, 0.5531072786876133, 0.5175391946520124, 0.5080926248005458, 0.47991931438446045, 0.4783221994127546, 0.4951291765485491, 0.4713346106665475, 0.4969920941761562, 0.4909707818712507, 0.43230208328792025, 0.45024088450840544, 0.4246424606868199, 0.4416474274226597, 0.4317389300891331, 0.4030153155326843, 0.4039304852485657, 0.3810115456581116, 0.39147870029721943, 0.4371361902781895, 0.394898133618491, 0.3904335243361337, 0.38407609292439054, 0.3895421198436192, 0.36778018304279875, 0.3932369521686009, 0.37606621640069143, 0.3845162051064627, 0.355053927217211, 0.36421744312558857, 0.40099077565329416, 0.417786751474653, 0.3877196652548654, 0.35765349864959717, 0.37872245482036043], "val_accuracy": [0.3073333203792572, 0.2303333282470703, 0.09799999743700027, 0.32466667890548706, 0.1133333370089531, 0.3633333444595337, 0.5373333096504211, 0.5923333168029785, 0.6243333220481873, 0.6683333516120911, 0.7516666650772095, 0.7620000243186951, 0.7799999713897705, 0.7803333401679993, 0.7856666445732117, 0.7823333144187927, 0.7853333353996277, 0.7736666798591614, 0.7616666555404663, 0.7963333129882812, 0.79666668176651, 0.8056666851043701, 0.8086666464805603, 0.8016666769981384, 0.8289999961853027, 0.8213333487510681, 0.8326666951179504, 0.8263333439826965, 0.7993333339691162, 0.8346666693687439, 0.8320000171661377, 0.8433333039283752, 0.8370000123977661, 0.8453333377838135, 0.8286666870117188, 0.8393333554267883, 0.8236666917800903, 0.8446666598320007, 0.8456666469573975, 0.8220000267028809, 0.8169999718666077, 0.8296666741371155, 0.8446666598320007, 0.8339999914169312]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 2, 2, 7, 4, 1, 8, 6, 8, 8, 9], [3, 3, 0, 5, 0, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1], [3, 0, 8, 9, 7], [0, 0], [49, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 2]], "fitness": -0.8131428360939026, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 5, 6, 2, 3, 2, 1, 1, 1, 8, 4, 4, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [2.5184156599612897, 2.250524865952717, 1.841556714982751, 1.4671175745200833, 1.539956432118817, 1.0759127530376469, 0.9614103186903629, 0.9237667457412783, 0.9046774014600311, 0.8054570184565176, 0.7927102435927869, 0.7707639087255778, 0.7361713821515431, 0.735314653738851, 0.6995125956712319, 0.6801690631428604, 0.667308069829534, 0.6352387544674534, 0.6233016509484496, 0.6455688306274762, 0.6028977985458288, 0.5921608578921026, 0.5701598707065448, 0.5701947471705315, 0.5587843079230631, 0.5427159550576997, 0.5246907264612228, 0.5117514880774846, 0.5156793472647525, 0.5406244725339275], "accuracy": [0.22097477316856384, 0.18531237542629242, 0.40324923396110535, 0.5027077198028564, 0.5027077198028564, 0.6147140264511108, 0.650640606880188, 0.6556597352027893, 0.6664905548095703, 0.7003037929534912, 0.7014925479888916, 0.7084929347038269, 0.7181349992752075, 0.7260599732398987, 0.7334566116333008, 0.7387399077415466, 0.7424382567405701, 0.7604015469551086, 0.7631752490997314, 0.7567031979560852, 0.7759873270988464, 0.7779685854911804, 0.7837802171707153, 0.7864218950271606, 0.7906485199928284, 0.7987055778503418, 0.8062343001365662, 0.8164047002792358, 0.8059701323509216, 0.8024039268493652], "val_loss": [1.9740945271083288, 1.4547443049294608, 1.2553445271083288, 0.9004619802747454, 0.81535233770098, 0.7476693562098912, 0.8655403682163784, 0.7298000710351127, 0.6596864972795758, 0.6149816853659493, 0.5966480118887765, 0.5907613209315709, 0.6514987945556641, 0.5452494961874825, 0.5464882169451032, 0.551266244479588, 0.5203455516270229, 0.5313338722501483, 0.5001904112952096, 0.49632203578948975, 0.5181844915662494, 0.4775791679109846, 0.4484854255403791, 0.44660283837999615, 0.43381714820861816, 0.4565614972795759, 0.43699198961257935, 0.43818322249821257, 0.49987007890428814, 0.4544541665485927], "val_accuracy": [0.10366666316986084, 0.4830000102519989, 0.4663333296775818, 0.6303333044052124, 0.6303333044052124, 0.6733333468437195, 0.6190000176429749, 0.6696666479110718, 0.7176666855812073, 0.7039999961853027, 0.7450000047683716, 0.7360000014305115, 0.7146666646003723, 0.765666663646698, 0.7639999985694885, 0.7463333606719971, 0.7726666927337646, 0.7456666827201843, 0.7926666736602783, 0.7770000100135803, 0.7666666507720947, 0.7839999794960022, 0.812333345413208, 0.8046666383743286, 0.8146666884422302, 0.7883333563804626, 0.8130000233650208, 0.8073333501815796, 0.7726666927337646, 0.8003333210945129]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 3, 3, 2, 7, 5, 2, 8, 6, 5, 8, 9], [1, 3, 0, 5, 3, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1], [1, 2, 9, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8111428618431091, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 2, 7, 6, 5, 1, 2, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(beta, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.square(beta))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.518266451467439, 2.2515679856238506, 1.818299064483814, 1.6022534552283054, 1.3355882585859569, 1.097739745156325, 0.914594939749837, 0.900276419981328, 0.8361374552396972, 0.8136396737713398, 0.7663445817150413, 0.7548843894053948, 0.7390269463198642, 0.728629014038879, 0.6676294401793857, 0.6704509756537067, 0.6819596952844714, 0.6149527922581688, 0.6109625911432376, 0.6160413830775657, 0.5733968948470823, 0.5939350380731879, 0.5595199403478138, 0.5670632381150121, 0.5458648736057122, 0.5066132816845133, 0.525868864434034, 0.4994465232115884, 0.5262542225822969, 0.5194609590556722], "accuracy": [0.22097477316856384, 0.18570862710475922, 0.4127592146396637, 0.45845991373062134, 0.5325584411621094, 0.6089023947715759, 0.6616035103797913, 0.6581693291664124, 0.685510516166687, 0.7008321285247803, 0.7108704447746277, 0.7074362635612488, 0.7170783281326294, 0.7265883088111877, 0.7516840696334839, 0.744419515132904, 0.7400607466697693, 0.7667415142059326, 0.767930269241333, 0.7629110813140869, 0.7828556299209595, 0.7713643908500671, 0.7869502305984497, 0.7936864495277405, 0.7938185334205627, 0.8131026029586792, 0.8026680946350098, 0.8187822103500366, 0.8031964302062988, 0.8099326491355896], "val_loss": [1.9741099902561732, 1.458599056516375, 1.15761399269104, 1.2770139489855086, 0.8372101783752441, 0.7748094286237445, 0.7296161481312343, 0.6226860284805298, 0.6983009576797485, 0.6095025028501239, 0.5816134214401245, 0.5966576337814331, 0.6477262462888446, 0.5453174454825265, 0.5342366525105068, 0.5180195910590035, 0.5219113826751709, 0.4948725700378418, 0.4899765934262957, 0.5034477370125907, 0.5106089285441807, 0.45005849429539274, 0.4518158435821533, 0.4654189007622855, 0.42575983490262714, 0.4395763874053955, 0.40802781922476633, 0.44983186040605816, 0.4321367825780596, 0.4729172842843192], "val_accuracy": [0.10366666316986084, 0.4806666672229767, 0.5170000195503235, 0.5193333625793457, 0.6363333463668823, 0.6480000019073486, 0.6883333325386047, 0.7053333520889282, 0.7306666374206543, 0.718999981880188, 0.7356666922569275, 0.7409999966621399, 0.7223333120346069, 0.7573333382606506, 0.7586666941642761, 0.7670000195503235, 0.7570000290870667, 0.7803333401679993, 0.7856666445732117, 0.7716666460037231, 0.7546666860580444, 0.8063333630561829, 0.8086666464805603, 0.7883333563804626, 0.8206666707992554, 0.7993333339691162, 0.8180000185966492, 0.8019999861717224, 0.8019999861717224, 0.7986666560173035]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 5, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.7948571443557739, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 1, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(beta, beta)))), tf.math.add(beta, beta))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5182923821882723, 2.2517124656137617, 1.8227899045267786, 1.48309290879879, 1.1543569068599449, 1.0316650536806355, 0.9856657814655195, 0.9341462336007268, 0.8653050262410611, 0.8127043474666856, 0.7830496811989576, 0.750180687461594, 0.7336581399443599, 0.7845237332013273, 0.712649032471596, 0.6671492309460724, 0.7242210832852666, 0.6422287813188409, 0.6374165402380167, 0.6299579146279635, 0.6045658838920558, 0.6157776990334876], "accuracy": [0.22097477316856384, 0.18557654321193695, 0.4151366949081421, 0.49108439683914185, 0.5908070206642151, 0.6223748326301575, 0.6395456194877625, 0.6627922058105469, 0.681547999382019, 0.6913221478462219, 0.7049266695976257, 0.7149649858474731, 0.7193237543106079, 0.7108704447746277, 0.7300224304199219, 0.7475894689559937, 0.7246070504188538, 0.7537974119186401, 0.7592127919197083, 0.7597411274909973, 0.7726852297782898, 0.767930269241333], "val_loss": [1.9740947995867049, 1.4614485672542028, 1.2711543015071325, 0.9281038556780133, 0.7308314868382045, 0.8921709060668945, 0.7116709436689105, 0.6529105390821185, 0.6598473957606724, 0.6156416961124965, 0.6166628769465855, 0.6715356963021415, 0.7075599602290562, 0.540864178112575, 0.5333856855119977, 0.5812489645821708, 0.5173252650669643, 0.5383023193904332, 0.5126199892589024, 0.5155553988048008, 0.5287529911313739, 0.48966382231031147], "val_accuracy": [0.10366666316986084, 0.4776666760444641, 0.5596666932106018, 0.6043333411216736, 0.6850000023841858, 0.6033333539962769, 0.6963333487510681, 0.7176666855812073, 0.7129999995231628, 0.7176666855812073, 0.7279999852180481, 0.7080000042915344, 0.7089999914169312, 0.7633333206176758, 0.7596666812896729, 0.7160000205039978, 0.7846666574478149, 0.7319999933242798, 0.7716666460037231, 0.7673333287239075, 0.7576666474342346, 0.7760000228881836]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 6, 3, 4, 7, 6, 1, 8, 6, 5, 8, 9], [1, 3, 0, 3, 0, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.13514286279678345, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3345647702174905, 2.3731745424019963, 2.233631726284982, 2.3040914702739825, 2.301096889494338, 2.264854799786327], "accuracy": [0.17659489810466766, 0.1970677524805069, 0.18795403838157654, 0.09800554811954498, 0.11042134463787079, 0.19072777032852173], "val_loss": [1.9324180739266532, 1.8205954006740026, 1.9758242198399134, 1.9732081549508231, 1.9669178553989954, 1.9725499153137207], "val_accuracy": [0.2683333456516266, 0.18666666746139526, 0.09966666996479034, 0.10266666859388351, 0.12033333629369736, 0.11166666448116302]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 6, 9, 4, 7, 5, 6, 8, 6, 5, 8, 9], [0, 3, 0, 5, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 3, 4, 3, 2, 1, 0, 7, 4, 3, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.sqrt(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07277770340442657, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 5, 0, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1], [2, 6, 8, 1, 7], [1, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 2, 10, 6, 5, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, alpha))))), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09008057415485382, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 1, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [4, 3, 0, 5, 0, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 1], [1, 0, 8, 9, 7], [4, 0], [88, 19], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 5, 0, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1], [9, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 1, 1, 1, 1, 0, 1, 13, 7, 6, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, sigma), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.13551710546016693, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 5, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 2, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 1, 4, 3, 2, 1, 0, 7, 4, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.sqrt(beta))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07277770340442657, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 4, 7, 6, 1, 8, 6, 5, 8, 9], [3, 3, 0, 5, 0, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10500594228506088, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [22, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 18, 18, 10, 8, 1, 5, 5, 4, 1, 1, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(beta))), beta)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 2, 0, 4, 7, 5, 6, 8, 6, 5, 8, 9], [3, 0, 5, 1, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [7, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 1, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 1, 7, 5, 3, 8, 6, 8, 2, 2], [1, 3, 0, 5, 0, 3, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [0, 0], [10, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [30, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 12, 10, 3, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.sqrt(grad), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, beta)), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 1, 5, 1, 8, 6, 5, 8, 9], [3, 3, 5, 3, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [84, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(grad)), grad)), tf.math.add(beta, tf.math.subtract(grad, grad))), beta)))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 0, 2, 3, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 5, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [38, 57]], "fitness": -0.09685714542865753, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 2, 5, 5, 4, 1, 1, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(grad))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(alpha), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2998324659884393, 2.3003349738775416, 2.3011520439213955, 2.301525913351137, 2.301722496948726, 2.301336304229154, 2.301890651264274, 2.302165880116332, 2.3019625264199153, 2.3020098890846965, 2.3019998709381753, 2.3020632853676157], "accuracy": [0.0956280529499054, 0.09113723784685135, 0.08942015469074249, 0.08545766770839691, 0.08479725569486618, 0.09325055778026581, 0.09549596905708313, 0.10038304328918457, 0.10342095047235489, 0.10527011007070541, 0.10698718577623367, 0.10527011007070541], "val_loss": [1.9698358263288225, 1.9717166764395577, 1.9724408558436803, 1.9725749833243233, 1.9726660592215401, 1.9728971208844865, 1.9731057030814034, 1.9731907163347517, 1.9732108797345842, 1.9732255254473006, 1.9732763426644462, 1.9733100618634904], "val_accuracy": [0.06599999964237213, 0.04699999839067459, 0.04399999976158142, 0.04466666653752327, 0.0860000029206276, 0.09600000083446503, 0.10199999809265137, 0.08833333104848862, 0.08966666460037231, 0.0989999994635582, 0.0976666659116745, 0.09200000017881393]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.06914285570383072, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 1, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, grad)))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.662517980262667, 2.3383577271475215, 2.32247097850271, 2.316127544853272, 2.35511901633394, 2.314233477719314, 2.3153427432572538, 2.252482551483509, 2.137066624278264, 2.13263878452622, 1.9969870099585527, 2.026538630140267, 1.9543674041912809], "accuracy": [0.25056135654449463, 0.09972262382507324, 0.09377889335155487, 0.09694888442754745, 0.10460969805717468, 0.10038304328918457, 0.13697001338005066, 0.19482234120368958, 0.2537313401699066, 0.23457930982112885, 0.2693171203136444, 0.27961960434913635, 0.29137498140335083], "val_loss": [1.9984137671334403, 1.9835222108023507, 1.9807447024754115, 1.996659415108817, 1.9711559840611048, 1.9349517141069685, 1.9072202273777552, 1.543921845299857, 1.8459088461739677, 1.5781285762786865, 1.5198851312909807, 1.5269630636487688, 1.497399023600987], "val_accuracy": [0.09833333641290665, 0.09966666996479034, 0.09799999743700027, 0.10100000351667404, 0.10366666316986084, 0.15800000727176666, 0.18433333933353424, 0.39399999380111694, 0.19699999690055847, 0.32499998807907104, 0.3540000021457672, 0.37533333897590637, 0.36633333563804626]}}]