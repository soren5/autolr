[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 2, 3, 2, 5, 5, 1, 6, 2, 5, 8, 9], [1, 3, 3, 0, 2, 3, 3, 4, 0, 0, 4, 3, 5], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.824571430683136, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), grad)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.157054131765722, 1.767551869417714, 1.2748802284349807, 0.9702518848679431, 0.9069986208366003, 0.7869307396670437, 0.7997477439495047, 0.743550740330998, 0.6726771002715809, 0.6785307540444493, 0.6339656814702544, 0.612037074233657, 0.6015565269312382, 0.5930449216908404, 0.5798650527233461, 0.571248705683761, 0.5392590274018477, 0.5376085566098208, 0.5103435429205999, 0.5212165797391288, 0.49463041156841353, 0.5125822920596768, 0.4785511152241381], "accuracy": [0.2736758589744568, 0.44366663694381714, 0.5488046407699585, 0.6425835490226746, 0.6586976647377014, 0.7033417224884033, 0.6947563290596008, 0.7150970697402954, 0.735041618347168, 0.7416457533836365, 0.7560427784919739, 0.7666094303131104, 0.7769119143486023, 0.7683265209197998, 0.7854973077774048, 0.7845727205276489, 0.8013472557067871, 0.7960638999938965, 0.8094043135643005, 0.8068947196006775, 0.81548011302948, 0.8057059645652771, 0.8212917447090149], "val_loss": [1.6812171936035156, 0.8713379928043911, 0.8002716643469674, 0.7864058869225639, 0.627273576600211, 0.6314209018434797, 0.5488011496407645, 0.5799881219863892, 0.569189054625375, 0.5175273759024483, 0.534835798399789, 0.4810760872704642, 0.5417524916785104, 0.5217611278806414, 0.5239371572222028, 0.4322569285120283, 0.442393354007176, 0.4140350988933018, 0.4683834825243269, 0.41904601028987337, 0.4741126980100359, 0.41278752258845736, 0.4119361639022827], "val_accuracy": [0.4390000104904175, 0.6150000095367432, 0.6589999794960022, 0.6243333220481873, 0.7246666550636292, 0.7080000042915344, 0.7556666731834412, 0.7229999899864197, 0.7333333492279053, 0.762333333492279, 0.7540000081062317, 0.7943333387374878, 0.7480000257492065, 0.7663333415985107, 0.765333354473114, 0.8053333163261414, 0.8109999895095825, 0.8226666450500488, 0.7946666479110718, 0.8153333067893982, 0.7746666669845581, 0.8206666707992554, 0.815666675567627]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 5, 3, 2, 5, 5, 1, 6, 6, 5, 8, 9], [1, 3, 3, 0, 1, 3, 3, 4, 0, 0, 4, 3, 5], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.817714273929596, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(grad), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), grad)))))))))), tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.15704649194766, 1.766735706205271, 1.260656302127352, 1.0243377612487687, 0.9155882837246154, 0.8285996090498237, 0.7599132233418021, 0.7001067499332834, 0.6670177106245744, 0.6695543625461522, 0.6207420846269965, 0.6221323987638095, 0.5916262338536526, 0.5702858185015491, 0.5656156684539542, 0.5602989304004297, 0.5405849203567746, 0.5240857834750478, 0.4981367485618642, 0.5376582791257009, 0.4957184823213425, 0.522416708558668, 0.4714123641794321, 0.4668105424096036, 0.4418450246877863, 0.4483400653925208, 0.4517086048671645, 0.4351839632004511, 0.4328305292217691, 0.4211467568979224, 0.41471633613070225, 0.4137163243005934, 0.40190723967070374, 0.38893106835645186, 0.39384469936284816, 0.40608647693228556, 0.3874116331051527, 0.3672278492229647, 0.35653207370114126, 0.35989334991957295, 0.3604025230856777, 0.32742656708125817, 0.36323298745151555, 0.3632632200082752, 0.3203832609872965, 0.3368724504356072, 0.3337561932844241, 0.3109708244357174, 0.31861846409752825], "accuracy": [0.27380794286727905, 0.4441949427127838, 0.5476158857345581, 0.6196011304855347, 0.6629242897033691, 0.6921146512031555, 0.7145687341690063, 0.7358341217041016, 0.7490423917770386, 0.7456082701683044, 0.7663452625274658, 0.7617223858833313, 0.7829877138137817, 0.7844406366348267, 0.7889314293861389, 0.7906485199928284, 0.7940827012062073, 0.8042530417442322, 0.817989706993103, 0.7955356240272522, 0.8132346868515015, 0.8020076751708984, 0.8244617581367493, 0.8273676037788391, 0.8358209133148193, 0.8319904804229736, 0.8293488025665283, 0.8341038227081299, 0.8455950617790222, 0.8432175517082214, 0.8437458872795105, 0.8471800088882446, 0.8495575189590454, 0.8520671129226685, 0.8514066934585571, 0.8481045961380005, 0.8496896028518677, 0.8661999702453613, 0.8677849769592285, 0.8692378997802734, 0.8638224601745605, 0.8823140859603882, 0.8638224601745605, 0.8617091774940491, 0.8836349248886108, 0.8714832663536072, 0.8755778670310974, 0.885219931602478, 0.8774270415306091], "val_loss": [1.6812075546809606, 0.8733123370579311, 0.7223318985530308, 0.8412120853151593, 0.6603928293500628, 0.6239761284419468, 0.552787048476083, 0.5419913019452777, 0.5400586468832833, 0.49656193596976145, 0.5073242698396955, 0.4889237710407802, 0.5070971931729998, 0.46154333863939556, 0.5212514400482178, 0.4528120756149292, 0.4353998047964914, 0.4075977121080671, 0.41638072047914776, 0.4212442636489868, 0.4859295061656407, 0.4167869772229876, 0.3950671979359218, 0.39076640776225496, 0.373414192880903, 0.41975976739610943, 0.3794043149266924, 0.38359964745385305, 0.37918672391346525, 0.364780672958919, 0.39831780535834177, 0.3704800690923418, 0.3717754738671439, 0.3687041827610561, 0.3978117193494524, 0.3695187568664551, 0.34129393100738525, 0.35400507279804777, 0.3465951255389622, 0.35415456124714445, 0.3331823859895979, 0.33510392904281616, 0.3556155902998788, 0.335819491318294, 0.35104674100875854, 0.34577724763325285, 0.3395640764917646, 0.3721298319952829, 0.34812217099326], "val_accuracy": [0.43933331966400146, 0.6159999966621399, 0.6970000267028809, 0.6626666784286499, 0.7076666951179504, 0.7250000238418579, 0.7646666765213013, 0.7570000290870667, 0.7736666798591614, 0.7873333096504211, 0.7676666378974915, 0.7933333516120911, 0.7630000114440918, 0.8080000281333923, 0.768666684627533, 0.7960000038146973, 0.8090000152587891, 0.828000009059906, 0.8236666917800903, 0.8196666836738586, 0.7753333449363708, 0.8193333148956299, 0.82833331823349, 0.8376666903495789, 0.8403333425521851, 0.812333345413208, 0.8343333601951599, 0.8273333311080933, 0.8289999961853027, 0.8426666855812073, 0.8270000219345093, 0.843666672706604, 0.8450000286102295, 0.8423333168029785, 0.8183333277702332, 0.8376666903495789, 0.8560000061988831, 0.8486666679382324, 0.8503333330154419, 0.846666693687439, 0.8573333621025085, 0.8506666421890259, 0.8523333072662354, 0.8579999804496765, 0.8483333587646484, 0.8523333072662354, 0.8553333282470703, 0.8460000157356262, 0.8479999899864197]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 5, 3, 2, 5, 5, 1, 6, 6, 5, 8, 9, 1, 7], [1, 3, 3, 0, 1, 3, 2, 4, 0, 0, 4, 3, 5], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8165714144706726, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 14, 8, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(alpha)))), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.sqrt(grad))), grad)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(grad, beta))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.157384812603569, 1.6902705711884474, 1.2723121650309344, 1.0043827004090056, 0.9260179036486466, 0.7970766435682246, 0.7821882984043349, 0.7200245825826468, 0.683757410065499, 0.6648794837899259, 0.6367463624913537, 0.6199702051069759, 0.6029955356695145, 0.5772379699195491, 0.5772834457599759, 0.5401066034902372, 0.5507330760633342, 0.5523347337059199, 0.5298276801095773, 0.5021015662464248, 0.503843734505595, 0.5198151994304193, 0.49353130337127904, 0.4742759973806649, 0.44772717335425377, 0.44927194770836415, 0.46241134394901523, 0.4368777908881768, 0.44224833141559183, 0.4231476306466536, 0.41334818202223306, 0.4031016668938312, 0.4006610899285838, 0.396757895357463, 0.41022910673888197, 0.3975951569293862, 0.38847293906585967], "accuracy": [0.2736758589744568, 0.4583278298377991, 0.5555408596992493, 0.6316206455230713, 0.6556597352027893, 0.6968696117401123, 0.7137762308120728, 0.7209087014198303, 0.7388719916343689, 0.7407211661338806, 0.759609043598175, 0.7619865536689758, 0.7788931727409363, 0.7803460359573364, 0.7825914621353149, 0.7987055778503418, 0.7965922355651855, 0.7909126877784729, 0.8064984679222107, 0.8128384351730347, 0.8092722296714783, 0.8030643463134766, 0.8212917447090149, 0.8222163319587708, 0.8359529972076416, 0.8367455005645752, 0.822348415851593, 0.8363492488861084, 0.8401796221733093, 0.8436138033866882, 0.8444063067436218, 0.8519350290298462, 0.8527275323867798, 0.8525954484939575, 0.8470479249954224, 0.8502179384231567, 0.8521991968154907], "val_loss": [1.6815660340445382, 1.0304885932377406, 0.7938505751746041, 0.7926103387560163, 0.6568460634776524, 0.7991265058517456, 0.5945093972342355, 0.5590212174824306, 0.5470710141318185, 0.5122085809707642, 0.5132917846952166, 0.52814781665802, 0.5096884625298637, 0.49470187936510357, 0.4777632440839495, 0.43708344868251253, 0.47023453031267437, 0.41573102133614676, 0.4299504501479013, 0.43110156059265137, 0.47043018681662424, 0.41097512415477205, 0.4089363302503313, 0.3910990442548479, 0.3944358655384609, 0.42682383741651264, 0.3799193246023996, 0.3875451854297093, 0.3800484197480338, 0.3641109551702227, 0.38772950002125334, 0.3644632526806423, 0.3564816883632115, 0.3971919076783316, 0.3635795031275068, 0.3634932722364153, 0.35571564946855816], "val_accuracy": [0.437666654586792, 0.5753333568572998, 0.652999997138977, 0.637666642665863, 0.70333331823349, 0.6763333082199097, 0.7253333330154419, 0.7559999823570251, 0.749666690826416, 0.7760000228881836, 0.7676666378974915, 0.762666642665863, 0.7583333253860474, 0.7826666831970215, 0.7896666526794434, 0.8113333582878113, 0.7979999780654907, 0.8213333487510681, 0.8140000104904175, 0.8203333616256714, 0.7833333611488342, 0.8223333358764648, 0.8193333148956299, 0.8320000171661377, 0.82833331823349, 0.8153333067893982, 0.8349999785423279, 0.8243333101272583, 0.8333333134651184, 0.8460000157356262, 0.8303333520889282, 0.8473333120346069, 0.8450000286102295, 0.8256666660308838, 0.8410000205039978, 0.8456666469573975, 0.8473333120346069]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 5, 3, 2, 5, 5, 1, 6, 6, 5, 8, 9], [1, 3, 3, 0, 1, 3, 3, 4, 0, 0, 4, 3, 5], [84, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8140000104904175, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), alpha), grad)), tf.math.add(beta, tf.math.sqrt(grad))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.184957159099294, 1.937389965527219, 1.4469517110880765, 1.101960307847019, 0.960187361169847, 0.8712416455383865, 0.7720965673154796, 0.7208101025520142, 0.700072061329029, 0.6856264771644891, 0.635241474040574, 0.6082700532913334, 0.6011932397231985, 0.5750459259873636, 0.5836945894907305, 0.5551313139097708, 0.5429259240587925, 0.5532599759060929, 0.5117538222279673, 0.5170287664823717, 0.5125829016905671, 0.5354710052813584, 0.4788232617028055, 0.4808769332592624, 0.46421025768798246, 0.45360577503262794, 0.4400126969951286, 0.4363910071940517, 0.4639480959084276, 0.41968977443451705, 0.4475391596504537, 0.4176942118997225, 0.42538587572064146, 0.3962840078497733, 0.40908357802556566, 0.40045271910113933, 0.38669436193413154, 0.3865366137700074, 0.3518039396158409, 0.3864226809952159, 0.37335992867542594, 0.34271284907548466, 0.35582347621046684, 0.36577568193074655, 0.33974317291299067, 0.34154485066679285, 0.34319775745522596, 0.3169434748274098, 0.34719301612385667, 0.3203853156194711, 0.3138372544142643, 0.3112537312178548, 0.32906574578081155, 0.2957413487816373, 0.28711960197140624, 0.32090634035160354, 0.2847841528971686], "accuracy": [0.2607317268848419, 0.38647469878196716, 0.5049530863761902, 0.59225994348526, 0.6440364718437195, 0.6769251227378845, 0.7063795924186707, 0.7214370369911194, 0.7309470176696777, 0.7359662055969238, 0.7576277852058411, 0.7675340175628662, 0.7792893648147583, 0.7872143983840942, 0.7757231593132019, 0.7885351777076721, 0.7921014428138733, 0.789459764957428, 0.8120459914207458, 0.806630551815033, 0.8043851256370544, 0.7947431206703186, 0.8202351331710815, 0.8219521641731262, 0.8267071843147278, 0.8278959393501282, 0.83119797706604, 0.8363492488861084, 0.8244617581367493, 0.8459912538528442, 0.8322546482086182, 0.8397833704948425, 0.8413683772087097, 0.8519350290298462, 0.8473120927810669, 0.8515387773513794, 0.854708731174469, 0.8570862412452698, 0.8664641380310059, 0.8543124794960022, 0.8582749962806702, 0.8767666220664978, 0.8721436858177185, 0.8643507957458496, 0.8734645247459412, 0.8737286925315857, 0.8693699836730957, 0.8796724081039429, 0.8679170608520508, 0.8795403242111206, 0.8849557638168335, 0.8811253309249878, 0.8775591254234314, 0.8923524022102356, 0.8926165699958801, 0.8825782537460327, 0.8920882344245911], "val_loss": [1.8025896208626884, 1.4546759469168526, 0.9170680046081543, 0.8213128362383161, 0.7173101391111102, 0.6542536701474871, 0.5991413763591221, 0.5577478068215507, 0.5579384565353394, 0.5054195778710502, 0.495215790612357, 0.5274598257882255, 0.4571248803819929, 0.5213627474648612, 0.45748656136648996, 0.4288333058357239, 0.4298321519579206, 0.4239853705678667, 0.4274644936834063, 0.42377803155354093, 0.508879269872393, 0.4086076702390398, 0.3990704502378191, 0.4164298006466457, 0.40008474247796194, 0.4123777576855251, 0.37791333879743305, 0.3748424989836557, 0.387684839112418, 0.36986821038382395, 0.37289499385016306, 0.3952911836760385, 0.3520983116967337, 0.40170055627822876, 0.39354037387030466, 0.3658476982797895, 0.3479099188532148, 0.35042319127491545, 0.3546960013253348, 0.3629752056939261, 0.34861163582120624, 0.347383975982666, 0.3480784722736904, 0.33617204427719116, 0.3496172683579581, 0.3427746891975403, 0.3416212371417454, 0.40224954911640715, 0.3593440737043108, 0.3820741432053702, 0.3349919319152832, 0.3303231086049761, 0.3303323132651193, 0.3330918720790318, 0.3694071684564863, 0.3370898110525949, 0.3241176349776132], "val_accuracy": [0.42766666412353516, 0.4606666564941406, 0.6230000257492065, 0.6426666378974915, 0.6710000038146973, 0.7120000123977661, 0.7260000109672546, 0.7506666779518127, 0.7563333511352539, 0.778333306312561, 0.778333306312561, 0.7516666650772095, 0.8013333082199097, 0.7493333220481873, 0.8040000200271606, 0.8113333582878113, 0.8116666674613953, 0.8193333148956299, 0.8186666369438171, 0.8133333325386047, 0.7680000066757202, 0.828000009059906, 0.8306666612625122, 0.8166666626930237, 0.8196666836738586, 0.8130000233650208, 0.8349999785423279, 0.8326666951179504, 0.8309999704360962, 0.8476666808128357, 0.8410000205039978, 0.8216666579246521, 0.8506666421890259, 0.8303333520889282, 0.8216666579246521, 0.8410000205039978, 0.8513333201408386, 0.8456666469573975, 0.8483333587646484, 0.8433333039283752, 0.8529999852180481, 0.8460000157356262, 0.8516666889190674, 0.8560000061988831, 0.8503333330154419, 0.8513333201408386, 0.8583333492279053, 0.8330000042915344, 0.8450000286102295, 0.8479999899864197, 0.8516666889190674, 0.8643333315849304, 0.859000027179718, 0.8606666922569275, 0.846666693687439, 0.8550000190734863, 0.8606666922569275]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [3, 3, 3, 8, 2, 2, 1, 4, 2, 3, 4, 2, 1, 1, 8, 8, 0], [1, 2, 2, 3, 3, 2, 3, 0, 0, 3, 1, 0, 5, 0], [59, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [23, 57]], "fitness": -0.758571445941925, "mapping_values": [1, 1, 1, 0, 1, 0, 31, 31, 17, 14, 4, 7, 6, 4, 2, 2, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(alpha, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, beta))), grad)), tf.math.add(beta, tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), sigma)))), tf.math.add(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.300543455195197, 2.290692176045428, 2.279233584330303, 2.267961507145251, 2.2592036977908267, 2.2475668069567143, 2.2356085475913567, 2.2198678637854634, 2.2070237965143558, 2.19057219438801, 2.175478072419001, 2.151100384859975, 2.130228114654013, 2.1033930029961665, 2.073638197610785, 2.0389805435583246, 2.0038379500838412, 1.9670669990933063, 1.9189961533016768, 1.880896563039338, 1.8322602851972478, 1.7792161243183267, 1.7322524833861848, 1.6831556944689021, 1.6366584109529418, 1.5924100851448946, 1.553846862416588, 1.5064079069647225, 1.4647220344024485, 1.4307202808357202, 1.3995860307255379, 1.3615116500394724, 1.327581685453185, 1.2966131693840404, 1.283795769141256, 1.2582632687743376, 1.232805808631893, 1.2116787645086526, 1.1868448365303064, 1.1809618327879337, 1.1536709876061115, 1.1244562168824217, 1.1255200040370341, 1.1112924156849018, 1.106079191217459, 1.088819892005583, 1.0646820789189024, 1.0665632047673352, 1.0392836900419327, 1.0332151926771493, 1.016946305578033, 1.0191657444457998, 1.0041203011359205, 0.9935668770190889, 0.9846768183022316, 0.9759472882065869, 0.9637689213112849, 0.9721155949414225, 0.9554386011928442, 0.9598201313007462, 0.9489313726569399, 0.9506218145237213, 0.9298621590001126, 0.9337458627618551, 0.9188038401631411, 0.9046558925598809, 0.9057623970667605, 0.906640389017252, 0.8923311100313456, 0.8906819635787896, 0.8934670704750416, 0.8760697634197134, 0.8806215858242185, 0.8733261539683822, 0.8733479604115182, 0.8619814567782577, 0.8670502719925127, 0.8651695140931333, 0.8636819652798721, 0.8497368298611699, 0.854133717443146, 0.8417266465023824, 0.8377483174502023, 0.8402536735794783, 0.8374984188716582, 0.8404256379631106, 0.8321875758521262, 0.8132164310297363, 0.8269168689124667, 0.817825002551252, 0.8160854322074852, 0.8227624213848258, 0.8074614104656511, 0.8104694265699531, 0.7984176029728829, 0.802092999538741, 0.7924642761180964, 0.792519268059318, 0.7991696656214767, 0.7921375030886149], "accuracy": [0.09576013684272766, 0.11887465417385101, 0.15480121970176697, 0.1846519559621811, 0.2052568942308426, 0.23114515841007233, 0.2542596757411957, 0.28199708461761475, 0.2899220585823059, 0.3121120035648346, 0.32426363229751587, 0.3498877286911011, 0.3597939610481262, 0.3727380931377411, 0.3913617730140686, 0.4003434181213379, 0.41064587235450745, 0.4220050275325775, 0.43904373049736023, 0.4282129108905792, 0.45304450392723083, 0.4581957459449768, 0.4667811393737793, 0.4855369031429291, 0.48487651348114014, 0.5024435520172119, 0.5079910159111023, 0.5153876543045044, 0.531369686126709, 0.5264826416969299, 0.5383700728416443, 0.5448421835899353, 0.5635979175567627, 0.5610883831977844, 0.5630695819854736, 0.5674283504486084, 0.5760137438774109, 0.5826178789138794, 0.5919957756996155, 0.5888257622718811, 0.5958262085914612, 0.6145819425582886, 0.6056002974510193, 0.6145819425582886, 0.6110157370567322, 0.6107515692710876, 0.625148594379425, 0.6206578016281128, 0.6342623233795166, 0.6371681690216064, 0.6457535624504089, 0.6379606127738953, 0.6452252268791199, 0.6513010263442993, 0.6502443552017212, 0.653150200843811, 0.6532822847366333, 0.6563201546669006, 0.6583014130592346, 0.6567164063453674, 0.661471426486969, 0.6647734642028809, 0.6708492636680603, 0.6667547225952148, 0.6725663542747498, 0.6717738509178162, 0.6761326193809509, 0.6782459616661072, 0.683000922203064, 0.6795667409896851, 0.6793025732040405, 0.6866992712020874, 0.683000922203064, 0.685510516166687, 0.685510516166687, 0.6907938122749329, 0.6929071545600891, 0.6886804699897766, 0.6876237988471985, 0.689869225025177, 0.6901333928108215, 0.6992471218109131, 0.6968696117401123, 0.698190450668335, 0.698718786239624, 0.698718786239624, 0.6940959095954895, 0.7030775547027588, 0.6999075412750244, 0.7053229212760925, 0.7004358768463135, 0.6952846646308899, 0.7046625018119812, 0.7078325152397156, 0.7022850513458252, 0.7132478952407837, 0.7059833407402039, 0.7123233675956726, 0.7055870890617371, 0.7129837274551392], "val_loss": [1.9621289798191615, 1.9531987735203333, 1.9441400936671667, 1.9347633634294783, 1.9247355461120605, 1.9139747619628906, 1.9022326469421387, 1.8891247340611048, 1.8746423721313477, 1.8582660811288017, 1.8399911608014787, 1.8189988136291504, 1.7957532746451241, 1.7697088377816337, 1.7404800823756628, 1.7078206539154053, 1.6718790531158447, 1.6328815732683455, 1.5903208596365792, 1.5454557282584054, 1.498682873589652, 1.4499599252428328, 1.4009501252855574, 1.3519458770751953, 1.3035804203578405, 1.2568198953356062, 1.2127996512821742, 1.1705901282174247, 1.1310782091958183, 1.0945289475577218, 1.0613186359405518, 1.0302649566105433, 1.001490524836949, 0.9750384943825858, 0.952096802847726, 0.9302896772112165, 0.9096944672720773, 0.8914233616420201, 0.8737126077924456, 0.8584011282239642, 0.8438135044915336, 0.829581754548209, 0.8171318258558001, 0.805951578276498, 0.7960958140236991, 0.7855835982731411, 0.7758221966879708, 0.7671445437840053, 0.7576463052204677, 0.7501442432403564, 0.7426546130861554, 0.7354834079742432, 0.729028752871922, 0.7228098256247384, 0.7168952737535749, 0.7108301775796073, 0.7051719086510795, 0.7002491440091815, 0.6951969180788312, 0.6907134737287249, 0.6866122313908168, 0.682512675012861, 0.6779267106737409, 0.6741012164524623, 0.6702453068324498, 0.6662827559879848, 0.6621381214686802, 0.6584379332406181, 0.6547725541251046, 0.6517057589122227, 0.6482099635260445, 0.6452477489198957, 0.6424251283918109, 0.6401801109313965, 0.6366449594497681, 0.633986268724714, 0.6317322935376849, 0.629410948072161, 0.6269301516669137, 0.6245325122560773, 0.6225925513676235, 0.6200839621680123, 0.618051256452288, 0.6162061861583165, 0.6137586321149554, 0.611716457775661, 0.6095293930598668, 0.6068521567753383, 0.6055041721888951, 0.6028944253921509, 0.6015063013349261, 0.5998563425881522, 0.5984189340046474, 0.5961059672491891, 0.5944603851863316, 0.5923429216657367, 0.590514966419765, 0.5897094011306763, 0.5889550788061959, 0.586525389126369], "val_accuracy": [0.09666666388511658, 0.17666666209697723, 0.2606666684150696, 0.32366666197776794, 0.35466668009757996, 0.37433332204818726, 0.3883333206176758, 0.4086666703224182, 0.4273333251476288, 0.4359999895095825, 0.4519999921321869, 0.46166667342185974, 0.4830000102519989, 0.4976666569709778, 0.5073333382606506, 0.518666684627533, 0.531000018119812, 0.5410000085830688, 0.546999990940094, 0.5586666464805603, 0.5643333196640015, 0.5736666917800903, 0.5809999704360962, 0.5879999995231628, 0.5956666469573975, 0.6006666421890259, 0.6079999804496765, 0.6200000047683716, 0.6309999823570251, 0.6416666507720947, 0.6476666927337646, 0.6556666493415833, 0.6566666960716248, 0.6646666526794434, 0.6663333177566528, 0.6683333516120911, 0.6710000038146973, 0.675000011920929, 0.6786666512489319, 0.6819999814033508, 0.6826666593551636, 0.6886666417121887, 0.6866666674613953, 0.6893333196640015, 0.6919999718666077, 0.6919999718666077, 0.6949999928474426, 0.6963333487510681, 0.6983333230018616, 0.7009999752044678, 0.7026666402816772, 0.7043333053588867, 0.7053333520889282, 0.7073333263397217, 0.7096666693687439, 0.7103333473205566, 0.7120000123977661, 0.7143333554267883, 0.7163333296775818, 0.7179999947547913, 0.7173333168029785, 0.7210000157356262, 0.7226666808128357, 0.7239999771118164, 0.7250000238418579, 0.7239999771118164, 0.7263333201408386, 0.7279999852180481, 0.7269999980926514, 0.7273333072662354, 0.7269999980926514, 0.7303333282470703, 0.7303333282470703, 0.7260000109672546, 0.7306666374206543, 0.7333333492279053, 0.7310000061988831, 0.734666645526886, 0.7336666584014893, 0.7350000143051147, 0.7356666922569275, 0.7363333106040955, 0.7356666922569275, 0.7379999756813049, 0.7369999885559082, 0.7393333315849304, 0.7383333444595337, 0.7396666407585144, 0.7403333187103271, 0.7390000224113464, 0.7406666874885559, 0.7423333525657654, 0.7440000176429749, 0.7419999837875366, 0.7436666488647461, 0.7453333139419556, 0.7450000047683716, 0.7459999918937683, 0.7443333268165588, 0.746666669845581]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 3, 5, 2, 7, 2, 1, 9, 6, 2, 4, 9, 2, 4, 8, 8], [1, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [91, 57]], "fitness": -0.168857142329216, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [4.514928898869914, 2.3299555089164796, 2.2794597044974867, 2.2328388619778763, 2.2378415629344452, 2.2482308892053684, 2.3906271628038587, 2.346205521127441], "accuracy": [0.16417910158634186, 0.10210011899471283, 0.13168670237064362, 0.1422533392906189, 0.14568749070167542, 0.13010171055793762, 0.10976093262434006, 0.10394927859306335], "val_loss": [2.0106968879699707, 1.8844187600272042, 1.8462634767804826, 1.887744631086077, 1.9137099129813058, 1.922689505985805, 2.036463056291853, 2.030493531908308], "val_accuracy": [0.09933333098888397, 0.13966666162014008, 0.17100000381469727, 0.1523333340883255, 0.14100000262260437, 0.14433333277702332, 0.09966666996479034, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 5, 2, 2, 2, 1, 9, 6, 2, 4, 9, 2, 4, 8, 8], [0, 3, 0, 3, 3, 0, 2, 4, 2, 0, 1, 0, 5], [40, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 2, 3, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024235309910197, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 3, 0, 7, 3, 6, 4, 6, 3, 4, 9, 1, 1, 8, 8], [1, 3, 3, 0, 3, 2, 3, 4, 0, 0, 4, 3, 5], [40, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 22, 22, 11, 11, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, grad)))), grad)), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, beta))), grad)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 3, 5, 2, 7, 2, 1, 9, 6, 2, 4, 9, 2, 4, 8, 8], [1, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [73, 58, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 7, 6, 4, 2, 2, 6, 3, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), sigma)))), tf.math.add(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 8, 1, 9, 6, 5, 8, 9], [1, 1, 0, 0, 1, 2, 1, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 9, 7, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, beta))))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 1, 2, 2, 2, 2, 8, 1, 2, 4, 9, 2, 4, 8, 8], [1, 1, 0, 0, 3, 2, 1, 4, 2, 0, 2], [40, 90, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 11, 11, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, beta)))), tf.math.add(beta, alpha))), grad)), tf.math.pow(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [490206.71512608835, 2.3110203683462913, 2.30486169725503, 2.303341779254132, 2.3030092611351916, 2.3030185005400616, 2.3029709471656097, 2.3030093725189604, 2.302879858420053, 2.3029735476632776, 2.3029820478792282, 2.3029629871782578], "accuracy": [0.09813763201236725, 0.09549596905708313, 0.1006472036242485, 0.09840179979801178, 0.09602430462837219, 0.09166556596755981, 0.09298639744520187, 0.09219389408826828, 0.09298639744520187, 0.09457138925790787, 0.0952318087220192, 0.09694888442754745], "val_loss": [1.9843237059456962, 1.9760983330862862, 1.9740592411586217, 1.973644733428955, 1.9736379895891463, 1.9736747741699219, 1.9736132621765137, 1.9736244337899345, 1.9736715725490026, 1.9737225260053362, 1.9736717769077845, 1.9736918721880232], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09933333098888397, 0.10066666454076767, 0.10000000149011612, 0.10000000149011612, 0.10199999809265137, 0.10199999809265137, 0.09799999743700027, 0.09799999743700027, 0.09833333641290665, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [3, 3, 3, 8, 2, 2, 1, 4, 6, 9, 4, 9, 1, 1, 8, 8], [1, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [12, 58, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [0, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 8, 8, 2, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)), tf.math.add(beta, grad))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [52611001.53947452, 1004000800.8157443, 4730578922.562409, 13024050138.80544, 27772570329.55435, 51242329901.275925], "accuracy": [0.09325055778026581, 0.10091137140989304, 0.10051512718200684, 0.09655263274908066, 0.09470347315073013, 0.10645885765552521], "val_loss": [202891012.57142857, 1621735021.7142856, 5471795638.857142, 12968371053.714285, 25326704347.42857, 43761776347.42857], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 3, 5, 9, 2, 2, 1, 4, 6, 3, 4, 9, 1, 1, 8, 8, 2, 4], [0, 1, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5, 4], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 4, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 17, 11, 6, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad))))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), beta), tf.math.add(beta, grad)), grad), tf.math.add(beta, beta))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.negative(alpha), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 3, 3, 8, 2, 2, 1, 4, 6, 3, 3, 9, 1, 1, 8, 8], [1, 3, 3, 0, 1, 2, 3, 4, 0, 0, 4, 3, 5], [59, 47, 79, 76, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 15, 12, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.subtract(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 2, 1, 9, 6, 9, 8, 9], [1, 3, 3, 0, 1, 3, 3, 4, 0, 0, 4, 3, 5], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 10, 7, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(beta, grad)))))), grad)), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024235309910197, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 3, 3, 1, 2, 2, 1, 4, 5, 3, 4, 9, 1, 1, 8, 8], [0, 2, 0, 0, 1, 2, 3, 0, 2, 3, 1, 0, 5], [59, 47, 93, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 1, 5, 5, 2, 6, 6, 5, 4, 9], [1, 3, 3, 0, 1, 3, 3, 4, 0, 0, 4, 3, 5], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 3, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 1, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)), tf.math.subtract(grad, tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), grad)))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, sigma))", "other_info": {"loss": [2.3046024466045876, 2.3045094389216993, 2.302692579161836, 2.301204484199662, 2.3030828750994794, 2.3027723496222556], "accuracy": [0.08374059200286865, 0.0866464152932167, 0.09272222965955734, 0.09813763201236725, 0.09285431355237961, 0.0952318087220192], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 3, 9, 8, 7, 2, 1, 4, 6, 3, 4, 9, 1, 1, 8, 8], [0, 3, 0, 3, 3, 0, 3, 4, 2, 0, 1, 0, 5], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3046024466045876, 2.3045094389216993, 2.302692579161836, 2.301204484199662, 2.3030828750994794, 2.3027723496222556], "accuracy": [0.08374059200286865, 0.0866464152932167, 0.09272222965955734, 0.09813763201236725, 0.09285431355237961, 0.0952318087220192], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [2, 5, 2, 5, 4, 5, 8, 1, 2, 2, 4, 9, 9, 4, 5], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [48, 69, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.03457142785191536, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 3, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, grad)))))), tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(alpha), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3049826161295526, 2.305849756846228, 2.3049188817827506, 2.304074470503392, 2.3071955521628524, 2.3077687649694747], "accuracy": [0.08347642421722412, 0.08334434032440186, 0.09034473448991776, 0.08981640636920929, 0.08572183549404144, 0.0886276587843895], "val_loss": [1.9718938555036272, 1.9725791386195592, 1.973320620400565, 1.9740092413766044, 1.9747400965009416, 1.9755258560180664], "val_accuracy": [0.03700000047683716, 0.03099999949336052, 0.029333332553505898, 0.027000000700354576, 0.02666666731238365, 0.026000000536441803]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 5, 3, 2, 6, 5, 1, 6, 6, 5, 8, 9], [1, 3, 3, 0, 1, 2, 3, 4, 0, 0, 4, 3, 5], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 56]], "fitness": -0.03457142785191536, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 1, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), beta))))), tf.math.add(beta, grad))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(alpha), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.304994046522752, 2.3058857258048593, 2.3049815076768296, 2.304165743345503, 2.3073159312811415, 2.3079201428173177], "accuracy": [0.08347642421722412, 0.08321225643157959, 0.09021265059709549, 0.08968432247638702, 0.08545766770839691, 0.08849557489156723], "val_loss": [1.971912247794015, 1.9726158550807409, 1.9733896255493164, 1.9740867614746094, 1.9748411859784807, 1.975668089730399], "val_accuracy": [0.036666665226221085, 0.029999999329447746, 0.029333332553505898, 0.02666666731238365, 0.026333333924412727, 0.026333333924412727]}}]