[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7894285917282104, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.291055173764313, 2.2649692686998204, 2.2331593917455685, 2.1966442564270356, 2.1432458404631207, 2.069668915261997, 1.9719250017641525, 1.857302470229888, 1.7236592344336459, 1.5934006055395569, 1.4836130507665304, 1.381808780266577, 1.3059991231258787, 1.243230724032403, 1.1787474923807129, 1.1439432142873907, 1.0903608497611568, 1.0625752379094069, 1.0353821155937073, 1.0184244031777645, 0.9864377842178088, 0.959853811696095, 0.9449239939258335, 0.924865985527613, 0.91552456787092, 0.8921953785247838, 0.87376418631421, 0.8673733219321315, 0.8518288182450198, 0.8581919339764088, 0.8386515193627322, 0.8345426414400563, 0.8266871049183392, 0.8269317993524445, 0.8089113131631965, 0.8045865071684284, 0.7968355253813147, 0.7888614368586728, 0.7760823225899458, 0.7714066504802308, 0.7774421249193648, 0.7691570760992461, 0.7666415456279457, 0.7554353379523041, 0.7446905781942162, 0.7488356234138951, 0.7412632262670542, 0.7279863811802035, 0.7341526660700641, 0.7326359103195514, 0.7263746899211285, 0.7188326466226811, 0.7207684607522173, 0.7199454818891733, 0.7081486606767952, 0.7100927393827865, 0.7051365124771481, 0.6978190689826324, 0.7010977937403357, 0.6948292089050252, 0.6962893206477087, 0.6904131556388614, 0.6914746948693643, 0.6798518020022484, 0.6790913487028657, 0.6733557893584008, 0.6745176576998066, 0.6812760096105839, 0.6726995313628915, 0.6654365453359835], "accuracy": [0.12508255243301392, 0.1834632158279419, 0.26139214634895325, 0.3082816004753113, 0.3443402349948883, 0.3943996727466583, 0.42108044028282166, 0.4439307749271393, 0.4721965491771698, 0.49808478355407715, 0.518161416053772, 0.54220050573349, 0.5617488026618958, 0.5711266398429871, 0.594241201877594, 0.5982036590576172, 0.6210539937019348, 0.6297714710235596, 0.6388852000236511, 0.6421872973442078, 0.6538106203079224, 0.656980574131012, 0.6630563735961914, 0.6682076454162598, 0.669792652130127, 0.6832650899887085, 0.6869634389877319, 0.6880200505256653, 0.6944921612739563, 0.6880200505256653, 0.6922467350959778, 0.6970016956329346, 0.6952846646308899, 0.6985867023468018, 0.7049266695976257, 0.7059833407402039, 0.7117950320243835, 0.7065116763114929, 0.7150970697402954, 0.717870831489563, 0.713908314704895, 0.7180029153823853, 0.7185312509536743, 0.7235503792762756, 0.7240787148475647, 0.7228899598121643, 0.7269845604896545, 0.7280412316322327, 0.7260599732398987, 0.7333245277404785, 0.7301545143127441, 0.7364945411682129, 0.7333245277404785, 0.7331924438476562, 0.7412495017051697, 0.7405890822410583, 0.7371549606323242, 0.7432307600975037, 0.7386078238487244, 0.7427024245262146, 0.7416457533836365, 0.743891179561615, 0.7403249144554138, 0.7506273984909058, 0.7485140562057495, 0.7464007139205933, 0.7464007139205933, 0.7514199018478394, 0.7518161535263062, 0.7503632307052612], "val_loss": [1.9468067714146204, 1.920083454677037, 1.8875585964747839, 1.8442982946123396, 1.7839823450360979, 1.7025425774710519, 1.5970396654946464, 1.4730985164642334, 1.3392080920083183, 1.2138894626072474, 1.1062321322304862, 1.0176328250340052, 0.9509868621826172, 0.8965650626591274, 0.8513039520808628, 0.8159399032592773, 0.7855772972106934, 0.7623993669237409, 0.741304908479963, 0.722588130405971, 0.7070323739733014, 0.6935430254255023, 0.6809079647064209, 0.6694638047899518, 0.6598251717431205, 0.650763920375279, 0.6427379676273891, 0.635269182068961, 0.6293215921946934, 0.6215041024344308, 0.6156474692480904, 0.6098980903625488, 0.6055186135428292, 0.6004692997251239, 0.5960046223231724, 0.5929099321365356, 0.5862691913332257, 0.5831367458615985, 0.5786539997373309, 0.5746727500643048, 0.5736434800284249, 0.5688778162002563, 0.5660136938095093, 0.5629034042358398, 0.5594208751405988, 0.5589015483856201, 0.5533337082181659, 0.5499731813158307, 0.5493072441646031, 0.5453239168439593, 0.541956901550293, 0.5411783967699323, 0.5385939734322684, 0.5357635872704642, 0.5336518457957676, 0.5344113111495972, 0.5300942148481097, 0.5293159655162266, 0.5253713301249913, 0.5230862072535923, 0.5215717213494437, 0.5207914624895368, 0.5197266510554722, 0.5178290946143014, 0.5165086984634399, 0.5137967211859567, 0.5124675716672625, 0.510636397770473, 0.5106231995991298, 0.5074366841997419], "val_accuracy": [0.23666666448116302, 0.36800000071525574, 0.41366666555404663, 0.44999998807907104, 0.4959999918937683, 0.5326666831970215, 0.5556666851043701, 0.5726666450500488, 0.5910000205039978, 0.609000027179718, 0.6353333592414856, 0.6510000228881836, 0.6643333435058594, 0.6723333597183228, 0.6833333373069763, 0.6883333325386047, 0.6933333277702332, 0.6943333148956299, 0.7016666531562805, 0.7089999914169312, 0.7086666822433472, 0.7110000252723694, 0.722000002861023, 0.7223333120346069, 0.7269999980926514, 0.7213333249092102, 0.7303333282470703, 0.7319999933242798, 0.7269999980926514, 0.7329999804496765, 0.734000027179718, 0.7396666407585144, 0.7400000095367432, 0.7429999709129333, 0.7459999918937683, 0.7413333058357239, 0.7486666440963745, 0.749666690826416, 0.750333309173584, 0.753000020980835, 0.7486666440963745, 0.753000020980835, 0.7543333172798157, 0.7583333253860474, 0.7596666812896729, 0.7576666474342346, 0.7603333592414856, 0.762333333492279, 0.765333354473114, 0.7630000114440918, 0.7673333287239075, 0.7673333287239075, 0.7710000276565552, 0.7726666927337646, 0.7693333625793457, 0.7646666765213013, 0.7749999761581421, 0.7733333110809326, 0.7710000276565552, 0.7766666412353516, 0.7739999890327454, 0.7766666412353516, 0.7770000100135803, 0.7756666541099548, 0.7820000052452087, 0.7763333320617676, 0.7736666798591614, 0.7776666879653931, 0.7776666879653931, 0.7786666750907898]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [2, 4, 2, 7, 8, 0, 0, 8, 0, 3, 2, 5, 8, 9, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9, 5], [3, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 24, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7894285917282104, "mapping_values": [1, 20, 20, 14, 6, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.math.sqrt(alpha))))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.291055142273284, 2.2649692686998204, 2.2331577452686187, 2.1966416965213043, 2.143250361378198, 2.0696777545418548, 1.971935230255001, 1.857319822888947, 1.7236776705258054, 1.5934095896151654, 1.48361475232129, 1.3818385993264466, 1.3060189235826067, 1.2432414162916325, 1.1787790817087667, 1.1439726594070385, 1.0903842271106465, 1.0625834017854245, 1.0354083349613104, 1.0184056828239607, 0.9864625566356202, 0.95992874130833, 0.9449016572446273, 0.9248337710554007, 0.9155647077454615, 0.8922141467528242, 0.873753436938127, 0.8673643710716856, 0.8518355795263598, 0.8582216862201879, 0.8387022477729272, 0.8345357288600683, 0.8266628958829059, 0.8269133084580221, 0.8089458904702823, 0.8045970823518857, 0.7967849389090593, 0.788831510871015, 0.7760162782817075, 0.7714255710697413, 0.7774623318386745, 0.7692343098549496, 0.7667091421762304, 0.755387233705285, 0.7447052348118259, 0.7488692661066096, 0.7412248657143679, 0.7279996775270784, 0.7340788518700696, 0.7326801494915315, 0.726369507851901, 0.7188851236667237, 0.7206944337201046, 0.7198863059947551, 0.7080484225828382, 0.7100664228732324, 0.7052657018405666, 0.6975210439086574, 0.7011326598595193, 0.6947615980283223, 0.6961746572220031, 0.690462363717295, 0.691482637213867, 0.6798221292969353, 0.678898620811735, 0.6733400492053447, 0.6745880039974903, 0.6812695005487662, 0.672766049367058, 0.6653169065954001], "accuracy": [0.12508255243301392, 0.1834632158279419, 0.26139214634895325, 0.308149516582489, 0.34447231888771057, 0.39426758885383606, 0.42108044028282166, 0.4439307749271393, 0.4721965491771698, 0.4979526996612549, 0.518161416053772, 0.54220050573349, 0.5617488026618958, 0.5709945559501648, 0.594241201877594, 0.5980715751647949, 0.6210539937019348, 0.6299035549163818, 0.6388852000236511, 0.64231938123703, 0.6536785364151001, 0.6572447419166565, 0.6626601219177246, 0.6680755615234375, 0.6699247360229492, 0.6837934255599976, 0.6876237988471985, 0.6881521344184875, 0.6940959095954895, 0.6884163022041321, 0.6927750706672668, 0.6977941989898682, 0.6952846646308899, 0.698190450668335, 0.7051908373832703, 0.7061154246330261, 0.7120591998100281, 0.7069079279899597, 0.715889573097229, 0.717870831489563, 0.7137762308120728, 0.717870831489563, 0.7185312509536743, 0.7238145470619202, 0.7244749665260315, 0.7231541275978088, 0.7275128960609436, 0.7269845604896545, 0.7257958054542542, 0.7338528633117676, 0.7301545143127441, 0.7359662055969238, 0.7329282760620117, 0.7338528633117676, 0.7416457533836365, 0.7405890822410583, 0.7374191284179688, 0.7433628439903259, 0.7380794882774353, 0.7425703406333923, 0.7416457533836365, 0.7440232634544373, 0.7401928305625916, 0.7508915662765503, 0.7485140562057495, 0.7458723783493042, 0.7457403540611267, 0.7518161535263062, 0.7519482374191284, 0.7503632307052612], "val_loss": [1.9468068395342146, 1.9200822285243444, 1.8875566210065569, 1.844301768711635, 1.783987249646868, 1.7025538512638636, 1.5970557417188371, 1.4731189523424422, 1.33921251978193, 1.213885920388358, 1.1062366962432861, 1.0176514557429723, 0.9509954111916679, 0.896587746483939, 0.8513104745319912, 0.8159470558166504, 0.785560165132795, 0.762370194707598, 0.7412807089941842, 0.722547037260873, 0.706999693598066, 0.6935242244175502, 0.6808250972202846, 0.6694118806294033, 0.6597789185387748, 0.6507359572819301, 0.6426609754562378, 0.6352010113852364, 0.6293320655822754, 0.6215172324861798, 0.615746021270752, 0.6099339723587036, 0.6056033883775983, 0.6005037341799054, 0.5959169353757586, 0.592910715511867, 0.5862658194133213, 0.5831280265535627, 0.5786746570042202, 0.5746985333306449, 0.5736745936529977, 0.5688443013599941, 0.566022447177342, 0.562899010522025, 0.5594464370182582, 0.5588235684803554, 0.5533708163670131, 0.5500224999019078, 0.5494156224387032, 0.5453347989491054, 0.5418293816702706, 0.5409982885633197, 0.5384828192847115, 0.5356189523424421, 0.53338623046875, 0.5343283074242728, 0.5299058982304165, 0.5292869125093732, 0.5252247367586408, 0.5229576315198626, 0.5214411871773856, 0.520664998463222, 0.5196565559932164, 0.5178390741348267, 0.5163711820329938, 0.5136862652642387, 0.5124450581414359, 0.5105337074824742, 0.510561466217041, 0.5074084486280169], "val_accuracy": [0.23666666448116302, 0.36800000071525574, 0.41366666555404663, 0.44999998807907104, 0.4959999918937683, 0.5329999923706055, 0.5553333163261414, 0.5723333358764648, 0.5910000205039978, 0.609333336353302, 0.6353333592414856, 0.6510000228881836, 0.6646666526794434, 0.6723333597183228, 0.6833333373069763, 0.6883333325386047, 0.6933333277702332, 0.6940000057220459, 0.7013333439826965, 0.7086666822433472, 0.7099999785423279, 0.7116666436195374, 0.7223333120346069, 0.722000002861023, 0.7269999980926514, 0.7213333249092102, 0.7306666374206543, 0.7323333621025085, 0.7263333201408386, 0.7326666712760925, 0.7336666584014893, 0.7393333315849304, 0.7396666407585144, 0.7433333396911621, 0.7456666827201843, 0.7406666874885559, 0.7486666440963745, 0.749666690826416, 0.750333309173584, 0.753333330154419, 0.7490000128746033, 0.7526666522026062, 0.7546666860580444, 0.7583333253860474, 0.7593333125114441, 0.7580000162124634, 0.7603333592414856, 0.7613333463668823, 0.7646666765213013, 0.7639999985694885, 0.7680000066757202, 0.7670000195503235, 0.7706666588783264, 0.7726666927337646, 0.7689999938011169, 0.7646666765213013, 0.7739999890327454, 0.7736666798591614, 0.7713333368301392, 0.7773333191871643, 0.7736666798591614, 0.7763333320617676, 0.7773333191871643, 0.7753333449363708, 0.7823333144187927, 0.7763333320617676, 0.7736666798591614, 0.778333306312561, 0.7773333191871643, 0.778333306312561]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 6, 0, 6, 5, 7, 8, 7, 3, 4, 6, 9], [2, 2, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 3, 0], [30, 8, 57, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7885714173316956, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.291055142273284, 2.2649692686998204, 2.2331577902692987, 2.196641953299153, 2.143245831425195, 2.069669918314246, 1.9719293432433482, 1.85731497983639, 1.723671749456605, 1.5934072702694027, 1.483618973646465, 1.3818276900625375, 1.306004894785893, 1.2432375265827362, 1.1787572609450854, 1.1439607258029445, 1.090373568861728, 1.0625965546906633, 1.035385110973131, 1.0183988525536491, 0.9864503411159634, 0.9598476292985919, 0.9449333267409677, 0.9248552638242714, 0.9154990395188347, 0.8922193269798264, 0.8737331247285625, 0.8673909782670539, 0.851819005294042, 0.8582315651527438, 0.8386853987420193, 0.8345596800863215, 0.8266752613470965, 0.8269231077497662, 0.8089301157164583, 0.8045822184603244, 0.7968287525034032, 0.7888534098033025, 0.7760093906347416, 0.7714147704183906, 0.7774010355981774, 0.7691924118283969, 0.7666250035637138, 0.7553903215738603, 0.7446882337186126, 0.7488255381757368, 0.7411941510338935, 0.7278784375227895, 0.7341990813272441, 0.732761703698296, 0.7263114303173311, 0.7187395061106336, 0.7207135877919755, 0.7199291206149377, 0.7080886166849314, 0.7099848840577082, 0.7051791194139958, 0.6975802267862112, 0.7011084250408062, 0.6947292759906284, 0.6961462848521243, 0.6903377939854568, 0.6913908050674662, 0.6797336086447779, 0.6789167765707561, 0.673325612269152, 0.6745820035708973, 0.6811119816590137, 0.6726682537960228, 0.6653012972403322], "accuracy": [0.12508255243301392, 0.1834632158279419, 0.26139214634895325, 0.308149516582489, 0.34447231888771057, 0.39426758885383606, 0.4209483563899994, 0.44406285881996155, 0.47193238139152527, 0.49808478355407715, 0.518161416053772, 0.54220050573349, 0.5617488026618958, 0.5709945559501648, 0.5943732857704163, 0.5983357429504395, 0.6209219098091125, 0.6296393871307373, 0.6387531161308289, 0.6419231295585632, 0.6535464525222778, 0.6571126580238342, 0.6629242897033691, 0.6686038970947266, 0.6699247360229492, 0.6831330060958862, 0.6870955228805542, 0.6884163022041321, 0.6942279934883118, 0.687887966632843, 0.6927750706672668, 0.6973979473114014, 0.6956809163093567, 0.6984546184539795, 0.7047945857048035, 0.7059833407402039, 0.7120591998100281, 0.707040011882782, 0.7156254053115845, 0.7182670831680298, 0.7141724824905396, 0.7176066637039185, 0.718399167060852, 0.7234182953834534, 0.7239466309547424, 0.7226257920265198, 0.7275128960609436, 0.7277770638465881, 0.7259278893470764, 0.7331924438476562, 0.7305507659912109, 0.7367587089538574, 0.7329282760620117, 0.7331924438476562, 0.7408532500267029, 0.7405890822410583, 0.7378153204917908, 0.7437590956687927, 0.7384757399559021, 0.7429665923118591, 0.7417778372764587, 0.7433628439903259, 0.7403249144554138, 0.7506273984909058, 0.7485140562057495, 0.7470611333847046, 0.7460044622421265, 0.7511557340621948, 0.7516840696334839, 0.750231146812439], "val_loss": [1.9468069076538086, 1.920081956045968, 1.8875575065612793, 1.8442978177751814, 1.7839819363185339, 1.7025458812713623, 1.5970511436462402, 1.4731120722634452, 1.339216947555542, 1.2138984203338623, 1.1062280450548445, 1.0176422936575753, 0.9509691510881696, 0.8965724195752826, 0.851314732006618, 0.8159506320953369, 0.7855796473366874, 0.7624008655548096, 0.7413044997623989, 0.7226013796670097, 0.7070576122828892, 0.6935892275401524, 0.6809331859861102, 0.669495838029044, 0.6598209142684937, 0.6507554394858224, 0.6427256720406669, 0.6352675301688058, 0.6293120895113263, 0.6215569802692958, 0.6156617232731411, 0.6099131447928292, 0.6054659741265433, 0.600420492036002, 0.5959388358252389, 0.5928817646844047, 0.5862624985831124, 0.5831129040036883, 0.5786424364362445, 0.5746235847473145, 0.5735970735549927, 0.5688905205045428, 0.5659524713243756, 0.5628562143870762, 0.5593914645058768, 0.5587219681058612, 0.5532129832676479, 0.5499225684574672, 0.5493827036448887, 0.5452783618654523, 0.5418252093451363, 0.5410001277923584, 0.5384678840637207, 0.5356381620679583, 0.5334166628973824, 0.5343152795519147, 0.529990519796099, 0.529274582862854, 0.5252806970051357, 0.5230375868933541, 0.5214225905282157, 0.5206485986709595, 0.5195664848600116, 0.5177632910864693, 0.5163042545318604, 0.5135764735085624, 0.512305736541748, 0.5104900428227016, 0.5105620963232858, 0.5073920318058559], "val_accuracy": [0.23666666448116302, 0.36800000071525574, 0.41366666555404663, 0.44999998807907104, 0.4959999918937683, 0.5329999923706055, 0.5556666851043701, 0.5723333358764648, 0.5910000205039978, 0.609000027179718, 0.6353333592414856, 0.6510000228881836, 0.6639999747276306, 0.6723333597183228, 0.6833333373069763, 0.6883333325386047, 0.6933333277702332, 0.6933333277702332, 0.7016666531562805, 0.7089999914169312, 0.7086666822433472, 0.7110000252723694, 0.7226666808128357, 0.721666693687439, 0.7266666889190674, 0.722000002861023, 0.7303333282470703, 0.7323333621025085, 0.7269999980926514, 0.7329999804496765, 0.7336666584014893, 0.7396666407585144, 0.7396666407585144, 0.7429999709129333, 0.7459999918937683, 0.7413333058357239, 0.7483333349227905, 0.750333309173584, 0.750333309173584, 0.7536666393280029, 0.7493333220481873, 0.7526666522026062, 0.7543333172798157, 0.7580000162124634, 0.7596666812896729, 0.7583333253860474, 0.7599999904632568, 0.762666642665863, 0.7646666765213013, 0.7636666893959045, 0.7676666378974915, 0.7673333287239075, 0.7706666588783264, 0.7723333239555359, 0.7693333625793457, 0.7649999856948853, 0.7746666669845581, 0.7733333110809326, 0.7710000276565552, 0.7773333191871643, 0.7739999890327454, 0.7770000100135803, 0.7770000100135803, 0.7753333449363708, 0.7816666960716248, 0.7773333191871643, 0.7736666798591614, 0.777999997138977, 0.777999997138977, 0.7789999842643738]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [3, 4, 2, 7, 8, 0, 1, 0, 0, 3, 8, 5, 8, 9, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9, 5], [3, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 57, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.586571455001831, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.272142461482733, 2.0103497331672417, 1.46973885349578, 1.1748037639153617, 0.9147280185151141, 0.8395003653268583, 0.8310299153026258, 0.7865678243837998, 0.776481222868627, 0.7413879758835217, 0.7071087571371973, 0.677992599342068, 0.6378871177354777, 0.6222442208327134, 0.600313447013334, 0.5774516564051017, 0.5608423221396291, 0.5521020563113895, 0.5437376474219385, 0.5266588372742385, 0.535316129197471, 0.5163077428875944, 0.5101209169034991, 0.5004216424147561, 0.4818325012847496, 0.4887311655091666, 0.4705824070500502, 0.4664687838190346, 0.4560823101983834, 0.4530431615315912, 0.4447962960956308, 0.4343284940195279, 0.4356057722460498, 0.4421221358806639, 0.418985661486782, 0.4142900827995082, 0.4016895369216829, 0.4040108854901978, 0.40757072114783854, 0.40262974882721037, 0.4043275050247161, 0.3912013884918675, 0.3753437713869118, 0.37918038087797484, 0.37240841920979506, 0.36179744369082084, 0.3678993660626457, 0.36921679109173555, 0.3582470308496747, 0.3374766163412826, 0.32813026006856943], "accuracy": [0.17382116615772247, 0.38581427931785583, 0.5070664286613464, 0.6009774208068848, 0.663848876953125, 0.6856426000595093, 0.6866992712020874, 0.7067758440971375, 0.7049266695976257, 0.7252674698829651, 0.7255316376686096, 0.7329282760620117, 0.7574957013130188, 0.7617223858833313, 0.7640998363494873, 0.7783648371696472, 0.7737419009208679, 0.7758552432060242, 0.7857614755630493, 0.789988100528717, 0.7959318161010742, 0.7938185334205627, 0.800818920135498, 0.8063663840293884, 0.8148196935653687, 0.8043851256370544, 0.8144234418869019, 0.8239334225654602, 0.8228767514228821, 0.8260467648506165, 0.8322546482086182, 0.8330471515655518, 0.8339717388153076, 0.8314621448516846, 0.8412362933158875, 0.8422929644584656, 0.8428213000297546, 0.8451988101005554, 0.8469158411026001, 0.8383304476737976, 0.8441421389579773, 0.8473120927810669, 0.8502179384231567, 0.8507462739944458, 0.854708731174469, 0.8576145768165588, 0.8609166741371155, 0.8584070801734924, 0.8618412613868713, 0.8623695969581604, 0.8710870146751404], "val_loss": [1.8689673287527901, 1.3068244797842843, 0.8268987280981881, 0.6832495416913714, 0.6621457849230085, 0.6318936007363456, 0.606421675000872, 0.6039130517414638, 0.575560348374503, 0.5441036905561175, 0.5275697367531913, 0.4957609006336757, 0.5022485596793038, 0.4732264110020229, 0.4571430853434971, 0.4690687486103603, 0.44888836996895926, 0.4445758206503732, 0.429139358656747, 0.43554905482700895, 0.42427302258355276, 0.4193438376699175, 0.40930274554661344, 0.4121062329837254, 0.4173124517713274, 0.41425654717854093, 0.41740942001342773, 0.39024700437273296, 0.3898629035268511, 0.40186461380549837, 0.3785472256796701, 0.39299449750355314, 0.40346992015838623, 0.40039184263774324, 0.3888906921659197, 0.38622805050441195, 0.3779589022908892, 0.39025347573416574, 0.3968949317932129, 0.39458867481776644, 0.4043277757508414, 0.38518307890210834, 0.38828684602464947, 0.39894633633749826, 0.40417603084019255, 0.3986539159502302, 0.396841824054718, 0.40223459686551777, 0.417918256350926, 0.41051281349999563, 0.4121117336409433], "val_accuracy": [0.4259999990463257, 0.5663333535194397, 0.6259999871253967, 0.7080000042915344, 0.718999981880188, 0.7116666436195374, 0.7300000190734863, 0.7483333349227905, 0.7393333315849304, 0.753333330154419, 0.7670000195503235, 0.781000018119812, 0.7743333578109741, 0.7873333096504211, 0.7943333387374878, 0.7950000166893005, 0.7940000295639038, 0.7986666560173035, 0.8076666593551636, 0.8090000152587891, 0.8106666803359985, 0.809333324432373, 0.8213333487510681, 0.8286666870117188, 0.8303333520889282, 0.8276666402816772, 0.8299999833106995, 0.8376666903495789, 0.8416666388511658, 0.8323333263397217, 0.8399999737739563, 0.8383333086967468, 0.8379999995231628, 0.8443333506584167, 0.8506666421890259, 0.843999981880188, 0.8463333249092102, 0.8429999947547913, 0.846666693687439, 0.8539999723434448, 0.8536666631698608, 0.856333315372467, 0.8550000190734863, 0.8543333411216736, 0.8556666374206543, 0.8629999756813049, 0.862333357334137, 0.859666645526886, 0.8553333282470703, 0.859000027179718, 0.8573333621025085]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9, 3, 0, 0, 0], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.4348571300506592, "mapping_values": [1, 42, 42, 28, 14, 5, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), grad), alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, tf.math.negative(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.295682818142336, 2.284009222372758, 2.2707746488669165, 2.2607673271661892, 2.2485115293813434, 2.23486577130863, 2.220086453975294, 2.2025080286768435, 2.1848466201087406, 2.1613337682805374, 2.1390003302408767, 2.1118777436256533, 2.0831042666555537, 2.059938462938473, 2.0384171398922657], "accuracy": [0.11108175665140152, 0.1372341811656952, 0.18412363529205322, 0.21040813624858856, 0.23497556149959564, 0.27063795924186707, 0.3011491298675537, 0.3179236650466919, 0.3337736129760742, 0.3539822995662689, 0.3563597798347473, 0.3663980960845947, 0.37141725420951843, 0.35424646735191345, 0.33786818385124207], "val_loss": [1.9594594410487585, 1.9479478427342005, 1.9368431908743722, 1.9255270957946777, 1.9136386598859514, 1.9003517287118095, 1.885585035596575, 1.86917359488351, 1.850477627345494, 1.8283912113734655, 1.8044095720563615, 1.7779816899980818, 1.7509754044669015, 1.728698798588344, 1.712589911052159], "val_accuracy": [0.12200000137090683, 0.25333333015441895, 0.32100000977516174, 0.3440000116825104, 0.35899999737739563, 0.3723333477973938, 0.3889999985694885, 0.39933332800865173, 0.4163333475589752, 0.4193333387374878, 0.4189999997615814, 0.4129999876022339, 0.4126666784286499, 0.40933331847190857, 0.3916666805744171]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 6, 0, 6, 5, 7, 8, 7, 3, 4, 6, 9], [3, 2, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 2, 0, 1, 3, 3], [28, 57]], "fitness": -0.40057143568992615, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.7107257809951997, 2.324986342252631, 7.3178585976059125, 2.316764332284198, 2.304075072706336, 2.3654743327031347], "accuracy": [0.20340773463249207, 0.1328754425048828, 0.20684190094470978, 0.09985470771789551, 0.10077928751707077, 0.1406683325767517], "val_loss": [1.9016496113368444, 1.958617891584124, 2.008992944444929, 1.9755144800458635, 1.9725417409624373, 1.9751630510602678], "val_accuracy": [0.3869999945163727, 0.12333333492279053, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [3, 1, 0, 7, 1, 1, 7, 4, 3, 3, 1, 3, 0, 9, 4, 0, 1, 5, 7, 8, 1, 3, 4, 6, 9], [3, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 2, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [9, 57]], "fitness": -0.3782857060432434, "mapping_values": [1, 18, 18, 9, 9, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(tf.math.add(alpha, alpha), alpha)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.multiply(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3016231431937126, 2.302185338611978, 2.3002947412225563, 2.301424395154732, 2.3009911087352553, 2.3002278334303083, 2.2996484196307305, 2.2991611026045415, 2.2986998430505765, 2.295908533838746, 2.296424226832664, 2.296910300152161, 2.2959773634969913, 2.2956369362172198, 2.2945821122439183, 2.294159422902037, 2.2932760862862636, 2.291963990621752, 2.2926820643652603, 2.2915508576734362, 2.290087580696593, 2.2901973846865338, 2.291704582232746, 2.290697948067589, 2.2882950910251565, 2.2860819100231433, 2.286948300717986, 2.286539776954102, 2.2853353211530494, 2.2860261474098467, 2.285147138606162, 2.285416264307891, 2.284167716153908, 2.284508880323753, 2.282685471752521, 2.282583981173748, 2.282219882465514, 2.280405452270014, 2.2801487311049695, 2.2801278055997463, 2.2797392123190483, 2.2784451513777886, 2.2796673529089215, 2.276417528113921, 2.2747589348329607, 2.2765063511744277, 2.277470165665092, 2.2748121710154896, 2.275593998819184, 2.2744305829141496, 2.273480391883422, 2.2736451584570725, 2.2725859670874593, 2.2722048969505613, 2.2717068281628436, 2.2714785350201985, 2.2699714754676745, 2.267451513523691, 2.2701227084252937, 2.2683441867571403, 2.2678061117034436, 2.2675087428001635, 2.2668446382873517, 2.26489844959583, 2.2652049823570026, 2.2636595339177386, 2.263061460172023, 2.26465139129552, 2.26389823226314, 2.262027427300234, 2.2600503187641854, 2.2602207654376842, 2.2599766948802236, 2.2601608054481397, 2.259117482754344, 2.2583374081821868, 2.256280846016959, 2.2563058787711054, 2.254668596760472, 2.255707673424381, 2.25483350620892, 2.25416701817163, 2.255146489812871, 2.2536897611435394, 2.2516749638607947, 2.251468684017981, 2.251253688056723, 2.249334165621994, 2.249754061016818, 2.247749037825121, 2.2486215466285318, 2.2484243770773698, 2.247248452935693, 2.2458141210009597, 2.245642689319571, 2.2446915391665785, 2.2446037006730872, 2.2430806857499435, 2.2426789149537676, 2.2422222312667257], "accuracy": [0.09509972482919693, 0.0870426595211029, 0.09668471664190292, 0.10117553919553757, 0.09126931428909302, 0.09721305221319199, 0.09998679161071777, 0.0952318087220192, 0.10077928751707077, 0.10236428678035736, 0.10672302544116974, 0.10157178342342377, 0.10077928751707077, 0.10685510188341141, 0.11200633645057678, 0.1146479994058609, 0.11068551242351532, 0.11649715900421143, 0.11491216719150543, 0.11702549457550049, 0.12178047746419907, 0.11993131786584854, 0.11293092370033264, 0.1228371411561966, 0.13089419901371002, 0.13168670237064362, 0.1290450394153595, 0.13300752639770508, 0.13617752492427826, 0.13274335861206055, 0.1332716941833496, 0.13353586196899414, 0.14317791163921356, 0.1336679458618164, 0.14093250036239624, 0.1406683325767517, 0.14119666814804077, 0.14714039862155914, 0.14542332291603088, 0.1460837423801422, 0.1546691358089447, 0.15017831325531006, 0.1488574892282486, 0.15876370668411255, 0.16457535326480865, 0.16219785809516907, 0.15480121970176697, 0.1640470176935196, 0.1566503793001175, 0.16549994051456451, 0.16616034507751465, 0.16840575635433197, 0.16774533689022064, 0.17619864642620087, 0.1706511676311493, 0.17672698199748993, 0.17382116615772247, 0.18372738361358643, 0.17817988991737366, 0.18161405622959137, 0.18491612374782562, 0.17897239327430725, 0.18161405622959137, 0.19112402200698853, 0.1954827606678009, 0.18835029006004333, 0.19455818831920624, 0.19033153355121613, 0.1896711140871048, 0.20023775100708008, 0.19614318013191223, 0.19970941543579102, 0.20103025436401367, 0.20353981852531433, 0.2044644057750702, 0.1978602558374405, 0.20723815262317657, 0.2180689424276352, 0.21304979920387268, 0.21252146363258362, 0.21001188457012177, 0.21621978282928467, 0.20842689275741577, 0.21635186672210693, 0.21978603303432465, 0.21555937826633453, 0.21793685853481293, 0.22295601665973663, 0.22454100847244263, 0.22744683921337128, 0.22956016659736633, 0.22295601665973663, 0.23154141008853912, 0.23325848579406738, 0.23339056968688965, 0.24118345975875854, 0.2355038970708847, 0.23801347613334656, 0.2413155436515808, 0.23814556002616882], "val_loss": [1.9706921577453613, 1.970137391771589, 1.9695940017700195, 1.969048227582659, 1.968506131853376, 1.9679694175720215, 1.9674314771379744, 1.9668893132890974, 1.9663477625165666, 1.965808595929827, 1.9652769906180245, 1.9647417749677385, 1.96420533316476, 1.963670321873256, 1.963135038103376, 1.9626012529645647, 1.9620664460318429, 1.9615323202950614, 1.9609971046447754, 1.9604646137782507, 1.9599330084664481, 1.9593988146100725, 1.958867141178676, 1.9583283833095007, 1.9577932357788086, 1.9572600637163435, 1.9567172867911202, 1.9561830929347448, 1.955641405923026, 1.9551095281328474, 1.954571315220424, 1.9540370532444544, 1.9535040855407715, 1.9529708453587122, 1.9524367196219308, 1.9518992560250419, 1.951366901397705, 1.9508276666913713, 1.9502828461783273, 1.9497434071132116, 1.9492018563406808, 1.9486551965985979, 1.9481190953935896, 1.9475718225751604, 1.9470280238560267, 1.9464884485517229, 1.9459435599190849, 1.9453913143702917, 1.9448408399309431, 1.944296428135463, 1.9437476566859655, 1.9431962285723006, 1.9426445279802596, 1.9420878546578544, 1.9415347235543388, 1.9409865651811873, 1.9404350689479284, 1.9398717880249023, 1.9393153871808733, 1.938753945486886, 1.9381907326834542, 1.9376260212489538, 1.937063489641462, 1.9364915575299944, 1.935920170375279, 1.9353504862104143, 1.934772150857108, 1.9341984476361955, 1.9336200441632951, 1.933037485395159, 1.9324496132986886, 1.9318620818001884, 1.9312686920166016, 1.930682863507952, 1.930091721670968, 1.929499966757638, 1.9289050102233887, 1.928304740360805, 1.9276960917881556, 1.92709139415196, 1.9264849254063197, 1.9258764811924525, 1.9252723966326033, 1.9246593884059362, 1.9240459714617049, 1.9234209060668945, 1.9228004046848841, 1.9221703665597099, 1.9215370586940221, 1.9209050451006209, 1.920269216809954, 1.9196361814226424, 1.9189979689461845, 1.9183473587036133, 1.917701244354248, 1.9170519283839635, 1.9164010456630163, 1.9157472337995256, 1.9150879723685128, 1.9144240788051061], "val_accuracy": [0.044333335012197495, 0.047333333641290665, 0.050999999046325684, 0.05400000140070915, 0.05700000002980232, 0.061000000685453415, 0.06233333423733711, 0.06466666609048843, 0.06666667014360428, 0.0716666653752327, 0.07466666400432587, 0.0793333351612091, 0.08433333039283752, 0.08766666799783707, 0.09099999815225601, 0.09333333373069763, 0.09600000083446503, 0.10066666454076767, 0.10499999672174454, 0.11100000143051147, 0.11766666918992996, 0.12099999934434891, 0.12466666847467422, 0.12933333218097687, 0.13366666436195374, 0.1379999965429306, 0.14366666972637177, 0.14900000393390656, 0.1536666601896286, 0.15666666626930237, 0.1613333374261856, 0.16633333265781403, 0.17299999296665192, 0.1783333271741867, 0.18299999833106995, 0.1886666715145111, 0.19433332979679108, 0.19900000095367432, 0.20366667211055756, 0.210999995470047, 0.21466666460037231, 0.22233332693576813, 0.22699999809265137, 0.23066666722297668, 0.23333333432674408, 0.23533333837985992, 0.23899999260902405, 0.2436666637659073, 0.24799999594688416, 0.25333333015441895, 0.257999986410141, 0.2633333206176758, 0.26899999380111694, 0.27300000190734863, 0.2786666750907898, 0.2826666533946991, 0.2863333225250244, 0.29100000858306885, 0.2939999997615814, 0.29600000381469727, 0.2996666729450226, 0.3016666769981384, 0.30533334612846375, 0.3086666762828827, 0.312333345413208, 0.3160000145435333, 0.31933334469795227, 0.3233333230018616, 0.32600000500679016, 0.3269999921321869, 0.3293333351612091, 0.3333333432674408, 0.33633333444595337, 0.33666667342185974, 0.33899998664855957, 0.3400000035762787, 0.3426666557788849, 0.3449999988079071, 0.3476666808128357, 0.3499999940395355, 0.3526666760444641, 0.3529999852180481, 0.3543333411216736, 0.3553333282470703, 0.35633334517478943, 0.35766667127609253, 0.35866665840148926, 0.3606666624546051, 0.3616666793823242, 0.3619999885559082, 0.36266666650772095, 0.36399999260902405, 0.3656666576862335, 0.36666667461395264, 0.3686666786670685, 0.36933332681655884, 0.3700000047683716, 0.3696666657924652, 0.3696666657924652, 0.3709999918937683]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 2, 5, 8, 0, 1, 0, 0, 3, 3, 5, 8, 9, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9, 5], [3, 2, 3, 1, 1, 1, 2, 2, 0, 2, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.35114285349845886, "mapping_values": [1, 14, 14, 9, 5, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, grad)))))), alpha)), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2409354729061004, 2.232387096591204, 2.387074494012327, 2.5141730089355154, 2.6540121197653264, 2.851292614640183], "accuracy": [0.1798969805240631, 0.1818782240152359, 0.16100911796092987, 0.13340377807617188, 0.12534672021865845, 0.12191256135702133], "val_loss": [1.8758602142333984, 2.0118408203125, 2.12468113218035, 2.244565555027553, 2.4245995112827847, 2.6487650190080916], "val_accuracy": [0.31466665863990784, 0.09833333641290665, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 0, 1, 8, 1, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 0, 0, 2, 2, 2, 3, 2, 2, 0], [18, 67, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [74, 57]], "fitness": -0.1128571406006813, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.801459282050122, 2.381758157461547, 2.296132246611251, 2.722464894385559, 2.332315464722655, 2.3096051975059284, 2.304565186860177, 2.3031023356420426], "accuracy": [0.20103025436401367, 0.11517632752656937, 0.1368379294872284, 0.17434948682785034, 0.10460969805717468, 0.13670584559440613, 0.09721305221319199, 0.09285431355237961], "val_loss": [1.932884761265346, 1.9742659841264998, 1.943246841430664, 2.0665996415274486, 1.9761253084455217, 1.9762510572160994, 1.974144731249128, 1.9738422802516393], "val_accuracy": [0.10566666722297668, 0.10000000149011612, 0.2070000022649765, 0.1003333330154419, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [3, 4, 2, 7, 8, 1, 8, 0, 0, 3, 4, 5, 8, 9, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9, 5, 4], [3, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 1, 0, 1, 3, 3], [97, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 26, 13, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(grad))))), tf.math.add(alpha, grad))), alpha)), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.square(tf.math.sqrt(alpha)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), grad)))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))))), tf.math.add(alpha, tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 0, 7, 1, 1, 7, 4, 3, 3, 1, 3, 0, 9, 4, 0, 1, 5, 7, 8, 1, 3, 4, 6, 9, 8, 5, 3, 4], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0, 2, 2, 0], [30, 8, 57, 25, 98, 52, 94, 1], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [8, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 29, 19, 6, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), grad), tf.math.add(alpha, alpha))))), tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.pow(tf.math.add(alpha, grad), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [8, 4, 2, 7, 8, 0, 1, 0, 0, 3, 8, 5, 8, 2, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9, 5, 2], [3, 2, 3, 1, 1, 1, 2, 2, 0, 0, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 5, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 26, 13, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), grad))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(tf.math.sqrt(alpha), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.square(grad))), tf.math.add(alpha, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [3, 1, 0, 7, 1, 1, 7, 4, 3, 3, 1, 3, 0, 9, 4, 0, 1, 5, 7, 8, 1, 3, 4, 6, 9], [2, 2, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 3, 0], [30, 8, 57, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 8, 4, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.30177703326987, 2.3025793486015593, 2.3025851744418886, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851744418886, 2.3025851429508597, 2.3025851744418886, 2.3025851744418886], "accuracy": [0.10170386731624603, 0.09721305221319199, 0.09140139818191528, 0.09998679161071777, 0.09311848133802414, 0.09985470771789551, 0.09325055778026581, 0.09998679161071777, 0.09866596013307571, 0.09576013684272766, 0.09496764093637466, 0.0940430611371994], "val_loss": [1.973644188472203, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09933333098888397, 0.09799999743700027, 0.09799999743700027, 0.09966666996479034, 0.09799999743700027, 0.09799999743700027, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 3, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [3, 0, 3, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 6, 0, 6, 5, 7, 8, 7, 3, 4, 6, 9], [2, 2, 3, 3, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 3, 0], [30, 8, 57, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [7, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 8, 0, 6, 5, 7, 8, 7, 3, 8, 0, 8], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 2, 0], [30, 67, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, grad), grad), tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 2, 7, 8, 0, 1, 0, 0, 4, 6, 5, 8, 8, 8, 2, 6, 5, 2, 9, 7, 2, 4, 9, 5], [3, 2, 3, 1, 1, 1, 1, 1, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4, 0], [2, 0, 0, 1, 3, 3], [63, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 20, 10, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 8, 5, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, alpha)))))))), tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.add(tf.math.sqrt(beta), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), alpha))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 2, 0], [30, 67, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 3, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [6, 4, 2, 8, 8, 1, 5, 0, 6, 3, 3, 7, 8, 9, 3, 4, 8, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 1, 3, 2, 3, 0], [30, 8, 39, 48, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [85, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 13, 13, 8, 5, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 7, 5, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, alpha)))), tf.math.square(tf.math.add(alpha, tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [2.3018619927590342, 2.303028011334618, 2.301721016838881, 2.303444689133573, 2.303596516830763, 2.303407415627583], "accuracy": [0.0944393053650856, 0.08545766770839691, 0.09206181764602661, 0.09628847241401672, 0.08598599582910538, 0.08875974267721176], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 6, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 7, 6, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.pow(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))), sigma))", "other_info": {"loss": [2.3018619927590342, 2.303028011334618, 2.301721016838881, 2.303444689133573, 2.303596516830763, 2.303407415627583], "accuracy": [0.0944393053650856, 0.08545766770839691, 0.09206181764602661, 0.09628847241401672, 0.08598599582910538, 0.08875974267721176], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]