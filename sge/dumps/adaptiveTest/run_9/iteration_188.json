[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 9, 2, 0, 6, 4, 1, 2, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [3, 2, 3, 1, 0, 2, 2], [83, 56, 47], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8317142724990845, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 2, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.203334650296136, 2.113305802468721, 2.0083348804287953, 1.3636007458069983, 1.133295895401135, 0.9505261862755073, 0.8474854831808295, 0.7634111623942907, 0.7248453266742506, 0.7060905908864361, 0.6422801494377951, 0.6372272702271771, 0.6158157066111047, 0.5978253189409886, 0.59095789634824, 0.5754559219568445, 0.5410205022518141, 0.5835740149863534, 0.5228104885259656, 0.5222452766371598, 0.4996891743148622, 0.5173392575713921, 0.5144366919246443, 0.485522714643399, 0.5020081149336684, 0.44975658480863784, 0.4662210944109526, 0.45718937726100173, 0.45527671039175316, 0.4233247586260886, 0.47021452811935466, 0.4351745978787024, 0.4168483581974081, 0.42898148216780513, 0.42986487669164414, 0.41039093361712087, 0.39144821295160676], "accuracy": [0.28582748770713806, 0.28160083293914795, 0.3152819871902466, 0.5288601517677307, 0.5849953889846802, 0.6380926966667175, 0.6852463483810425, 0.7088891863822937, 0.7285695672035217, 0.735569953918457, 0.7532690763473511, 0.7623828053474426, 0.7681944370269775, 0.7773081660270691, 0.7770439982414246, 0.7884030938148499, 0.7968564033508301, 0.7827235460281372, 0.8047813773155212, 0.804649293422699, 0.8100647330284119, 0.8059701323509216, 0.8033285140991211, 0.8169330358505249, 0.8137630224227905, 0.8339717388153076, 0.8212917447090149, 0.8310658931732178, 0.8309338092803955, 0.8487650156021118, 0.8273676037788391, 0.839519202709198, 0.8482366800308228, 0.8412362933158875, 0.8372738361358643, 0.8470479249954224, 0.8518029451370239], "val_loss": [1.9645695005144392, 2.1676500184195384, 1.35851103918893, 0.9990462575639997, 0.9305196830204555, 0.7874341862542289, 0.5780776228223529, 0.5883243935448783, 0.5780366999762399, 0.5408990553447178, 0.5735405342919486, 0.5200460468019757, 0.4989018269947597, 0.49294798714773996, 0.48365059920719694, 0.46648781640189035, 0.4335724541119167, 0.44281370299203054, 0.45422359875270296, 0.4420137745993478, 0.44230536052158903, 0.4380255767277309, 0.4040060724530901, 0.42807435989379883, 0.4071371725627354, 0.4421928269522531, 0.3792609913008554, 0.39093982321875437, 0.3946199246815273, 0.40091157811028616, 0.4047344582421439, 0.3726222344807216, 0.39843457085745676, 0.41195298944200787, 0.3691992589405605, 0.38472496611731394, 0.3665827086993626], "val_accuracy": [0.1889999955892563, 0.24633333086967468, 0.47733333706855774, 0.5640000104904175, 0.5973333120346069, 0.6523333191871643, 0.7319999933242798, 0.7170000076293945, 0.7273333072662354, 0.7576666474342346, 0.7553333044052124, 0.7603333592414856, 0.7699999809265137, 0.7786666750907898, 0.7879999876022339, 0.7940000295639038, 0.8159999847412109, 0.8066666722297668, 0.8069999814033508, 0.7913333177566528, 0.8163333535194397, 0.7986666560173035, 0.8226666450500488, 0.8146666884422302, 0.8316666483879089, 0.8116666674613953, 0.8366666436195374, 0.8343333601951599, 0.8270000219345093, 0.8243333101272583, 0.8330000042915344, 0.8489999771118164, 0.8270000219345093, 0.8233333230018616, 0.8453333377838135, 0.8360000252723694, 0.8456666469573975]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 8, 2, 0, 6, 2, 1, 9, 4, 0, 8, 9], [5, 2, 3, 3, 0, 2, 2], [57, 49, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8285714387893677, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 2, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, beta))))), tf.math.divide_no_nan(tf.math.add(grad, tf.math.subtract(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.203157722233561, 2.109431220807766, 2.019162258782549, 1.546203531436066, 1.1359347848765617, 0.9304729962093861, 0.8671278178243117, 0.7323798220690766, 0.7190672996226491, 0.6489427314064742, 0.6217756127212121, 0.6261344331130533, 0.619854820457983, 0.6142439960158024, 0.6099714178529476, 0.5532993652549449, 0.5542448577533199, 0.547554894650003, 0.5337019233679365, 0.5229108228171427, 0.5030484675786373, 0.49327048186565575, 0.5135208038669048, 0.48933652445640485, 0.48694942086805143, 0.47009554792703845, 0.47657061303768805, 0.4633903515542015, 0.4648124310972196, 0.43256553979975565, 0.4393497737304898, 0.4351769259868438, 0.4068574740185698, 0.41871878436260124, 0.42484397075951236, 0.40240313841556247, 0.40184398620765693, 0.4105211424081238, 0.3945872099715107, 0.365966435562681, 0.3935210613676302, 0.3835818030027713, 0.40830293005688345, 0.3664086411350738], "accuracy": [0.28582748770713806, 0.2826575040817261, 0.325320303440094, 0.4682340621948242, 0.6115440726280212, 0.6672830581665039, 0.6882842183113098, 0.724210798740387, 0.7273808121681213, 0.7531369924545288, 0.7637035846710205, 0.7684586048126221, 0.7716285586357117, 0.7711002230644226, 0.7695152759552002, 0.7948752045631409, 0.7959318161010742, 0.7903843522071838, 0.8005547523498535, 0.802800178527832, 0.8129705190658569, 0.8187822103500366, 0.8037247657775879, 0.8161405324935913, 0.8144234418869019, 0.8232730031013489, 0.8236692547798157, 0.8259146809577942, 0.8264430165290833, 0.8428213000297546, 0.8362171649932861, 0.8376700282096863, 0.8477083444595337, 0.8465195894241333, 0.8412362933158875, 0.8516708612442017, 0.8531237840652466, 0.8492933511734009, 0.8514066934585571, 0.8632941246032715, 0.8562937378883362, 0.8553691506385803, 0.8474441766738892, 0.8652753829956055], "val_loss": [1.9646224975585938, 1.7553411211286272, 1.718688930783953, 0.8503319025039673, 0.7379486560821533, 0.6072735616139003, 0.6851001637322562, 0.6246622630528041, 0.5070163011550903, 0.5358186960220337, 0.5298586743218558, 0.6037886142730713, 0.6065032822745187, 0.5827631780079433, 0.4732413632529123, 0.4614973749433245, 0.4552497012274606, 0.4423191887991769, 0.438785331589835, 0.42336736406598774, 0.4111748848642622, 0.42001856224877493, 0.40049723216465544, 0.4102094939776829, 0.43609962293079924, 0.4593507562364851, 0.377589362008231, 0.3943393315587725, 0.3897395985467093, 0.3815009764262608, 0.36027927909578594, 0.3746955394744873, 0.38262672083718435, 0.39250251225062777, 0.3665258543831961, 0.4087349517004831, 0.3653394409588405, 0.35820012433188303, 0.3465353080204555, 0.40529513359069824, 0.3596673011779785, 0.4106359226363046, 0.36642989090510775, 0.3831220865249634], "val_accuracy": [0.1889999955892563, 0.3036666810512543, 0.3396666646003723, 0.6733333468437195, 0.6856666803359985, 0.7453333139419556, 0.7103333473205566, 0.715666651725769, 0.7726666927337646, 0.750333309173584, 0.7749999761581421, 0.7310000061988831, 0.699999988079071, 0.7426666617393494, 0.7919999957084656, 0.8019999861717224, 0.7900000214576721, 0.7983333468437195, 0.8066666722297668, 0.8163333535194397, 0.8209999799728394, 0.8136666417121887, 0.8230000138282776, 0.8216666579246521, 0.8019999861717224, 0.8043333292007446, 0.8413333296775818, 0.8326666951179504, 0.8346666693687439, 0.8360000252723694, 0.843999981880188, 0.8399999737739563, 0.8399999737739563, 0.8306666612625122, 0.8450000286102295, 0.828000009059906, 0.8413333296775818, 0.8426666855812073, 0.8529999852180481, 0.8386666774749756, 0.843666672706604, 0.8153333067893982, 0.8483333587646484, 0.8293333053588867]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [7, 8, 4, 0, 1, 0, 0, 4, 5, 8, 8, 4, 3, 3, 2, 3, 0, 3, 4, 3, 6, 5, 3, 0, 8, 1], [2, 0, 3, 3, 3, 2, 2, 1, 3, 0, 4, 0, 2], [57, 56, 47, 97], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8159999847412109, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 12, 6, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, beta), tf.math.negative(tf.math.negative(tf.math.pow(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad))))))))), tf.math.add(beta, grad))))), tf.math.pow(grad, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2032890521051893, 2.1098799432635604, 2.0392255365510015, 1.7650417867920511, 1.1355486969670063, 0.8779965603923156, 0.7913558122630227, 0.7265764321113827, 0.6787683834741144, 0.6849574421327883, 0.6043461505385155, 0.6418132850239227, 0.5821827323272039, 0.6176026015233811, 0.5752836545114236, 0.5299519439729891, 0.5368849090565591, 0.5213194551122754, 0.5407919616487284, 0.5069827672756895, 0.5055575096462349, 0.4757970518849199], "accuracy": [0.2860916554927826, 0.2833179235458374, 0.33324527740478516, 0.39664509892463684, 0.6174877882003784, 0.6757363677024841, 0.7120591998100281, 0.7259278893470764, 0.7485140562057495, 0.7403249144554138, 0.7713643908500671, 0.7574957013130188, 0.7799497842788696, 0.7696473598480225, 0.7868181467056274, 0.8025360107421875, 0.7943468689918518, 0.8025360107421875, 0.7971205711364746, 0.8125742673873901, 0.8095363974571228, 0.8239334225654602], "val_loss": [1.9646326473781042, 1.8299954278128487, 1.8927455629621233, 1.1365337712424142, 0.7083209242139544, 0.7039098399026054, 0.6295773301805768, 0.5382867710930961, 0.5058493443897792, 0.4799821206501552, 0.5038915191377912, 0.49762661116463797, 0.6350533451352801, 0.5186915397644043, 0.4367795075689043, 0.47872534820011686, 0.4288005232810974, 0.47179651260375977, 0.43350304876055035, 0.4387866428920201, 0.42699216093335834, 0.44934134823935373], "val_accuracy": [0.1889999955892563, 0.28733333945274353, 0.2709999978542328, 0.5543333292007446, 0.6816666722297668, 0.6956666707992554, 0.7183333039283752, 0.7473333477973938, 0.7630000114440918, 0.7883333563804626, 0.7860000133514404, 0.7770000100135803, 0.7266666889190674, 0.7670000195503235, 0.8153333067893982, 0.7836666703224182, 0.8226666450500488, 0.7833333611488342, 0.8059999942779541, 0.8050000071525574, 0.8103333115577698, 0.7900000214576721]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 8, 2, 0, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [3, 3, 3, 3, 0, 2, 2], [74, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8131428360939026, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 1, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), grad)))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.pow(tf.math.add(beta, tf.math.square(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(beta)))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.203189155098438, 2.1289397188386174, 2.1672978285612006, 1.9513583540554296, 1.22819041316189, 0.9644473072024794, 0.8350291840231193, 0.7387945869532339, 0.7002640216656963, 0.6814016345910519, 0.6320252581799051, 0.6408945141042055, 0.6230850402059619, 0.6278214231615667, 0.5924527850038954, 0.5735971812464384, 0.5589605212652483, 0.5482131878792129, 0.5395204972880722, 0.5203456331190573, 0.5063707506919597, 0.5204654777952237], "accuracy": [0.28582748770713806, 0.27777042984962463, 0.2587504982948303, 0.3489631414413452, 0.5633337497711182, 0.6601505875587463, 0.700171709060669, 0.7223616242408752, 0.7391361594200134, 0.7436270117759705, 0.7607977986335754, 0.7625148296356201, 0.7681944370269775, 0.7633073329925537, 0.7812706232070923, 0.7857614755630493, 0.7942147850990295, 0.796328067779541, 0.7936864495277405, 0.8088759779930115, 0.81112140417099, 0.7998943328857422], "val_loss": [1.9646498135157995, 2.222822938646589, 1.8729759625026159, 1.1219449043273926, 0.962850740977696, 0.7048837457384381, 0.6306321961539132, 0.5311236381530762, 0.5512971537453788, 0.556269918169294, 0.544954640524728, 0.5558944599969047, 0.625362753868103, 0.5605495827538627, 0.4589925834110805, 0.4826864855630057, 0.4354750599179949, 0.44145539828709196, 0.4399610757827759, 0.4550825868334089, 0.49042696612221853, 0.42167615039008005], "val_accuracy": [0.18766666948795319, 0.1706666648387909, 0.2696666717529297, 0.4703333377838135, 0.5996666550636292, 0.7009999752044678, 0.7223333120346069, 0.7566666603088379, 0.7546666860580444, 0.7333333492279053, 0.7693333625793457, 0.7473333477973938, 0.7239999771118164, 0.7490000128746033, 0.7990000247955322, 0.7919999957084656, 0.8206666707992554, 0.8019999861717224, 0.8163333535194397, 0.7803333401679993, 0.7876666784286499, 0.8143333196640015]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 8, 2, 0, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [3, 2, 3, 3, 0, 2, 2], [74, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8059999942779541, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 1, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), beta))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.pow(tf.math.add(beta, tf.math.square(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(beta)))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.203165447612748, 2.1310287230302314, 2.1236173116205044, 1.8785043668910701, 1.363700339649615, 0.9562858147092735, 0.7908807506320058, 0.7331361665134937, 0.6730122430732993, 0.6681080055967408, 0.6183480406875042, 0.6261395125057814, 0.5867777116987384, 0.6640339255994259, 0.576417412598529, 0.5678470376428754, 0.5526932466141914, 0.5510706518186381, 0.5296564846227134, 0.5115633001259494, 0.5189929368819984, 0.48787122310632886, 0.49090082304368415, 0.4813546643060637, 0.5087693909360528, 0.46846562368113054, 0.485146652032765, 0.4629461032020701, 0.44649601841583825, 0.43960298499993644, 0.47851398291211195, 0.4367357316648231, 0.4126666973862492, 0.4435479235789244, 0.4188690211330155, 0.4197473016869768, 0.41917269470165464], "accuracy": [0.2859595715999603, 0.278959184885025, 0.26878878474235535, 0.3529256284236908, 0.5519746541976929, 0.6518293619155884, 0.7073041796684265, 0.726192057132721, 0.7456082701683044, 0.7445515990257263, 0.7670056819915771, 0.7695152759552002, 0.7810064554214478, 0.7600052952766418, 0.7886672616004944, 0.7905164361000061, 0.7924976944923401, 0.7965922355651855, 0.8009510040283203, 0.8125742673873901, 0.7993659973144531, 0.821820080280304, 0.8133667707443237, 0.8241975903511047, 0.8092722296714783, 0.8248580098152161, 0.8171972036361694, 0.8294808864593506, 0.8327829837799072, 0.8355567455291748, 0.8146876096725464, 0.835160493850708, 0.8500858545303345, 0.8362171649932861, 0.8429533839225769, 0.8432175517082214, 0.8409721255302429], "val_loss": [1.964508056640625, 2.078785146985735, 1.8278703008379256, 1.3863611221313477, 0.7351193938936506, 0.646694370678493, 0.6804559571402413, 0.570333583014352, 0.5217656067439488, 0.522300124168396, 0.5626176595687866, 0.4784286192485264, 0.7483866895948138, 0.501215032168797, 0.4579448529652187, 0.4620309727532523, 0.4585122891834804, 0.4249183791024344, 0.43667045661381315, 0.4954658917018345, 0.44729508672441753, 0.4174660784857614, 0.41804145915167673, 0.4235716036387852, 0.41510882547923494, 0.4816831180027553, 0.3825847165925162, 0.4050215056964329, 0.3914210626057216, 0.39646603379930767, 0.39054263489586966, 0.37592210939952303, 0.39274453265326364, 0.4204015476363046, 0.36612448522022795, 0.4055460010256086, 0.38416848863874165], "val_accuracy": [0.1886666715145111, 0.1783333271741867, 0.25333333015441895, 0.4566666781902313, 0.6903333067893982, 0.6826666593551636, 0.7110000252723694, 0.7406666874885559, 0.7506666779518127, 0.7630000114440918, 0.7726666927337646, 0.7910000085830688, 0.6926666498184204, 0.7763333320617676, 0.8043333292007446, 0.800000011920929, 0.8163333535194397, 0.8159999847412109, 0.815666675567627, 0.7616666555404663, 0.8013333082199097, 0.8176666498184204, 0.8106666803359985, 0.8203333616256714, 0.8273333311080933, 0.8003333210945129, 0.8410000205039978, 0.8273333311080933, 0.8339999914169312, 0.8236666917800903, 0.8339999914169312, 0.8473333120346069, 0.8386666774749756, 0.82833331823349, 0.847000002861023, 0.8246666789054871, 0.8356666564941406]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 8, 2, 0, 6, 4, 1, 4, 5, 9, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [2, 0, 3, 3, 1, 2, 2], [57, 49, 0, 81, 53, 45], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [63, 57]], "fitness": -0.3051428496837616, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 2, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.pow(grad, tf.math.subtract(grad, tf.math.pow(tf.math.square(alpha), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4469980863988865, 2.2266833780936404, 2.6072096538392544, 1.8592743492239832, 2.3116567317820054, 2.2108593786617767], "accuracy": [0.21542729437351227, 0.17461365461349487, 0.1468762308359146, 0.3847576379776001, 0.09351472556591034, 0.1818782240152359], "val_loss": [1.7818009512765067, 2.540618828364781, 1.7858388764517648, 1.990905489240374, 1.9738086291721888, 1.940556526184082], "val_accuracy": [0.3623333275318146, 0.1886666715145111, 0.24799999594688416, 0.10000000149011612, 0.10000000149011612, 0.23866666853427887]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 8, 0, 0, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [3, 2, 3, 3, 0, 2, 2], [74, 56, 47], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [0, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [75, 57]], "fitness": -0.27799999713897705, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.548269554860462, 2.329521602501628, 2.2791378780237013, 2.30624626120871, 2.3031346099472096, 2.2994619670435106], "accuracy": [0.21661603450775146, 0.20697398483753204, 0.1795007288455963, 0.09998679161071777, 0.09589222073554993, 0.11319508403539658], "val_loss": [1.7097957815442766, 1.9696408680507116, 1.9781888553074427, 1.9744372367858887, 1.9726901054382324, 1.943789005279541], "val_accuracy": [0.37299999594688416, 0.15166667103767395, 0.09966666996479034, 0.09966666996479034, 0.10199999809265137, 0.21166667342185974]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [8, 8, 2, 0, 6, 2, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [3, 2, 1, 3, 0, 2, 2, 1, 1], [74, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.20000000298023224, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 14, 9, 1, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(alpha, tf.math.square(tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.square(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))), tf.math.pow(beta, tf.math.multiply(beta, tf.math.multiply(alpha, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.75010794567284, 2.322490996247537, 2.011895325819672, 6.428638888671335, NaN, NaN, NaN, NaN], "accuracy": [0.24065512418746948, 0.11768590658903122, 0.32426363229751587, 0.39387133717536926, 0.12561088800430298, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9950265203203474, 2.0201575415475026, 1.1315703392028809, 157.9622061593192, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.22966666519641876, 0.5759999752044678, 0.11966666579246521, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0], [7, 8, 2, 0, 1, 8, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [5, 2, 3, 1, 3, 2, 2], [57, 56, 47], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [8, 0, 8, 9, 7], [7, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.1931428611278534, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), beta)))), tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.subtract(alpha, tf.math.pow(tf.math.add(beta, tf.math.square(grad)), tf.math.sqrt(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.5697234665098883, 2.2200525039380112, 2.6935317585607166, 2.3117635245052988, 2.519796012147322, 2.671736298739839, 2.307753437309532, 2.3037398528775612, 2.3031754688642847], "accuracy": [0.21397437155246735, 0.1802932173013687, 0.17514199018478394, 0.10698718577623367, 0.12349755316972733, 0.15638621151447296, 0.09998679161071777, 0.09774138033390045, 0.09760929644107819], "val_loss": [1.9779237338474818, 1.8748790196010046, 1.9991367885044642, 1.8859737941196986, 1.942709105355399, 1.9805350984845842, 1.9748869623456682, 1.9739163262503487, 1.9737167358398438], "val_accuracy": [0.1003333330154419, 0.09933333098888397, 0.09966666996479034, 0.1863333284854889, 0.1860000044107437, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [7, 8, 2, 5, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [5, 4, 3, 1, 0, 2, 0], [57, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08070268481969833, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 8, 8, 0, 1, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [5, 2, 3, 0, 0, 2, 2], [57, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 0, 3, 2, 1, 1, 0, 13, 7, 6, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, sigma), sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07806102186441422, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [7, 8, 5, 2, 6, 2, 1, 9, 2], [5, 2, 3, 3, 0, 2, 2], [57, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08070268481969833, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0], [2, 2, 2, 0, 6, 2, 1, 9, 4, 0, 8, 9], [2, 0, 3, 3, 1, 2, 2], [57, 49, 0, 81, 53, 45], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 0], [48, 57, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 12, 6, 3, 2, 1, 1, 0, 0, 14, 7, 7, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(grad, grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, beta))))))))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.add(beta, sigma), sigma), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1228371411561966, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 8, 5, 8, 6, 2, 1, 9, 2], [5, 2, 3, 3, 0, 2, 2], [57, 56, 47], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 3, 0, 1, 3, 3], [53, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 8, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(tf.math.subtract(tf.math.add(beta, beta), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 8, 2, 0, 9, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [3, 2, 3, 3, 0, 2, 2], [74, 56, 47], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 7, 7, 5, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026200665018073, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10196803510189056, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [7, 8, 6, 0, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [5, 2, 4, 1, 0, 2, 0], [74, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08070268481969833, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [7, 8, 5, 2, 6, 2, 1, 9, 2], [0, 2, 3, 3, 0, 2, 2], [57, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [8, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 1, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 8, 2, 0, 6, 9, 1, 9, 4], [5, 2, 3, 3, 0, 2, 2], [57, 56, 47], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 8, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [7, 8, 4, 0, 1, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [5, 2, 3, 3, 0, 2, 2], [57, 56, 47], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [4, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 8, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 1, 3, 3, 1, 2, 0, 3, 2, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.add(beta, beta), grad), grad), tf.math.pow(tf.math.add(beta, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(beta))))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, grad), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [7, 8, 2, 0, 6, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1, 1, 3, 3, 9, 0, 4, 5, 3, 5, 8, 9], [2, 2, 3, 3, 0, 3, 2, 4, 5, 3, 5, 2, 4, 1, 1, 3, 3, 3, 3], [74, 56, 47, 18], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [14, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 56, 56, 37, 19, 4, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), beta))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.pow(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.multiply(grad, beta), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.pow(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))), alpha))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), grad))), grad))))))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302592921234975, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10342095047235489, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]