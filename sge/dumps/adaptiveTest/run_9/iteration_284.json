[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8311428427696228, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), beta)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3284619415850294, 1.8349103242367517, 1.4664595235592308, 1.210610864531205, 1.0164002001938992, 1.0112968889509037, 0.8622802536028755, 0.7692994856957227, 0.764796625141297, 0.709636174519269, 0.6791539288011162, 0.657533386545316, 0.6291983337009336, 0.5995573913495239, 0.6511373188139472, 0.5985102898661078, 0.559585681972156, 0.5564736670050182, 0.5396249410089264, 0.5432087133164104, 0.546009550816064, 0.5094040465266745, 0.5064140076863058, 0.4984455842422913, 0.4873832370925967, 0.4713050568179369, 0.4817812313508868, 0.4566867501941009, 0.4516082308028179, 0.43115826521677475, 0.4602935329215433, 0.41520574006737027, 0.4268642937612729, 0.40346137265078286, 0.4247999547880717, 0.3918563836341395, 0.404455350642317, 0.38190407543417926, 0.3802693039552804, 0.3643191524342996, 0.3671304132755422, 0.3630857865186242, 0.3655784803020357, 0.36335646640497066, 0.34641396812774783, 0.351506772672401, 0.3572781543926304, 0.3415335122746342, 0.3368934773537524, 0.3408444385880634, 0.33184969298843664, 0.3227639440705417], "accuracy": [0.2899220585823059, 0.390569269657135, 0.4979526996612549, 0.5589750409126282, 0.6184123754501343, 0.6156386137008667, 0.6720380187034607, 0.702681303024292, 0.7147008180618286, 0.7342491149902344, 0.739928662776947, 0.7450799345970154, 0.7602694630622864, 0.7734777331352234, 0.7470611333847046, 0.7729493975639343, 0.7922335267066956, 0.7865539789199829, 0.8016114234924316, 0.7936864495277405, 0.7991018295288086, 0.804649293422699, 0.8090080618858337, 0.8136309385299683, 0.8178576231002808, 0.8244617581367493, 0.8193105459213257, 0.8348963260650635, 0.8273676037788391, 0.8387266993522644, 0.828820526599884, 0.8500858545303345, 0.8412362933158875, 0.8507462739944458, 0.8449346423149109, 0.8555012345314026, 0.8500858545303345, 0.8598600029945374, 0.860652506351471, 0.8650112152099609, 0.8628978729248047, 0.863029956817627, 0.8632941246032715, 0.8625016212463379, 0.8683133125305176, 0.8677849769592285, 0.8656716346740723, 0.8721436858177185, 0.8750495314598083, 0.8708229064941406, 0.874389111995697, 0.8754457831382751], "val_loss": [1.487196343285697, 1.3989475114004952, 0.9305175372532436, 0.9348907811301095, 0.7582722221102033, 0.6854292835508075, 0.5983324221202305, 0.5647954089300973, 0.5527463640485492, 0.5522715193884713, 0.5099108048847744, 0.4992983341217041, 0.48576407773154123, 0.5212639910834176, 0.4794092859540667, 0.4657894883837019, 0.47058405194963726, 0.46362030506134033, 0.42601341009140015, 0.43178296089172363, 0.427033747945513, 0.42304606097085135, 0.4032596094267709, 0.4232132690293448, 0.41855889558792114, 0.3941854919706072, 0.40094830308641705, 0.37990894487925936, 0.3751103792871748, 0.3713630437850952, 0.41362145117350985, 0.3681971175330026, 0.36473436866487774, 0.41356214455195833, 0.37926918268203735, 0.3532650981630598, 0.3721615331513541, 0.3591455561774118, 0.3552552121026175, 0.33683478832244873, 0.3476202317646572, 0.3350543464933123, 0.3709630881037031, 0.357221143586295, 0.35582079206194195, 0.3657000746045794, 0.33574709721973967, 0.3409611923354013, 0.4105761562074934, 0.36199522018432617, 0.3290943588529314, 0.37048401151384625], "val_accuracy": [0.38999998569488525, 0.41733333468437195, 0.6326666474342346, 0.559333324432373, 0.6516666412353516, 0.6809999942779541, 0.7139999866485596, 0.7360000014305115, 0.7450000047683716, 0.7353333234786987, 0.765666663646698, 0.7670000195503235, 0.781000018119812, 0.7616666555404663, 0.7726666927337646, 0.7870000004768372, 0.7753333449363708, 0.7893333435058594, 0.8073333501815796, 0.8046666383743286, 0.8069999814033508, 0.8056666851043701, 0.8226666450500488, 0.8176666498184204, 0.8083333373069763, 0.8263333439826965, 0.8196666836738586, 0.824999988079071, 0.8296666741371155, 0.8423333168029785, 0.8149999976158142, 0.8416666388511658, 0.843666672706604, 0.815666675567627, 0.8423333168029785, 0.8513333201408386, 0.8356666564941406, 0.8453333377838135, 0.846666693687439, 0.8503333330154419, 0.8533333539962769, 0.8556666374206543, 0.8306666612625122, 0.843999981880188, 0.8460000157356262, 0.8299999833106995, 0.859000027179718, 0.8433333039283752, 0.8136666417121887, 0.8383333086967468, 0.8479999899864197, 0.8370000123977661]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 7, 5, 3, 8, 6, 5, 8, 9], [3, 2, 5, 3, 2, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8259999752044678, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(beta, grad))))))), grad)), tf.math.add(beta, beta))), beta)), tf.math.add(beta, tf.math.sqrt(beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.477688909820861, 2.0326186907903914, 1.67187555816274, 1.555671059869583, 1.3857739837083676, 1.003249796799476, 0.8385072896635182, 0.8059264810613401, 0.7457162561811523, 0.6979009137728651, 0.6688955407164053, 0.6441844690823836, 0.6044828205013539, 0.6136338914689323, 0.5953654529254482, 0.5804402499686395, 0.566871298428587, 0.5514428746257838, 0.5314158879849322, 0.5242996557419247, 0.5312285752950516, 0.48925506601385893, 0.4968233049317374, 0.4929683964722633], "accuracy": [0.2615242302417755, 0.27644962072372437, 0.42966583371162415, 0.46347907185554504, 0.527010977268219, 0.6172236204147339, 0.6844538450241089, 0.6900013089179993, 0.7191916704177856, 0.739400327205658, 0.7437590956687927, 0.7530049085617065, 0.7718927264213562, 0.7656848430633545, 0.7726852297782898, 0.7836481332778931, 0.7878747582435608, 0.7890635132789612, 0.798309326171875, 0.8083476424217224, 0.7947431206703186, 0.8144234418869019, 0.8125742673873901, 0.8138951063156128], "val_loss": [1.9485249519348145, 1.2998329571315221, 1.749986239842006, 1.2259552138192313, 0.7368243592126029, 0.6480002403259277, 0.6348910672324044, 0.5472414152962821, 0.5814449787139893, 0.5482198510851178, 0.5024452720369611, 0.5133709907531738, 0.47850521973201204, 0.5100944553102765, 0.4594623361315046, 0.4685751029423305, 0.45912069933755056, 0.44359142439705984, 0.4143436210496085, 0.4121629851205008, 0.4184819885662624, 0.4240450773920332, 0.4162161350250244, 0.4012361339160374], "val_accuracy": [0.20133332908153534, 0.41866666078567505, 0.3199999928474426, 0.5586666464805603, 0.6603333353996277, 0.7016666531562805, 0.6893333196640015, 0.7486666440963745, 0.7329999804496765, 0.749666690826416, 0.7620000243186951, 0.7570000290870667, 0.7860000133514404, 0.7699999809265137, 0.7760000228881836, 0.784333348274231, 0.7803333401679993, 0.7916666865348816, 0.8216666579246521, 0.8080000281333923, 0.8080000281333923, 0.79666668176651, 0.8213333487510681, 0.8209999799728394]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [89, 47, 64, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.8191428780555725, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), beta)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.478779466696041, 2.0381695148006735, 2.0817406517938775, 1.8050891469104682, 1.4155269996002917, 1.2177980173659158, 1.019954786009682, 0.8981689045363414, 0.8733272879760752, 0.7644409956618418, 0.7493167156320379, 0.71330985200561, 0.6691988554093438, 0.6534678356097343, 0.675744410920625, 0.6225550545992364, 0.6093361862362998, 0.6056402340588427, 0.5638887965526437, 0.5528812554486912, 0.5565170050690816, 0.5289738057091441, 0.5109162270243394, 0.5114447391185905, 0.5111707573900007, 0.4901942243319083, 0.4888547503984426, 0.5003903939298525, 0.465207804179919, 0.4741333779437179, 0.4658403779419264, 0.449160341325453, 0.43298719501167854, 0.4293901563918885, 0.4597113601299498, 0.418077930534489, 0.43310053151171235, 0.40669147625197477, 0.40285935771227543, 0.384544177562207], "accuracy": [0.26139214634895325, 0.2786950170993805, 0.2945449650287628, 0.39466384053230286, 0.5042926669120789, 0.5542200207710266, 0.6092986464500427, 0.6490556001663208, 0.6705851554870605, 0.7066437602043152, 0.7108704447746277, 0.7260599732398987, 0.7395324110984802, 0.7516840696334839, 0.7378153204917908, 0.7614582180976868, 0.774270236492157, 0.7656848430633545, 0.7807422876358032, 0.789459764957428, 0.7884030938148499, 0.798309326171875, 0.8068947196006775, 0.8035926818847656, 0.8067626357078552, 0.8210275769233704, 0.8178576231002808, 0.8136309385299683, 0.8227446675300598, 0.8187822103500366, 0.822348415851593, 0.8379341959953308, 0.842028796672821, 0.8372738361358643, 0.8294808864593506, 0.8451988101005554, 0.8343679904937744, 0.850350022315979, 0.8477083444595337, 0.8585391640663147], "val_loss": [1.948204721723284, 1.4337623800550188, 1.2930167402539934, 1.2797497340611048, 0.9762097086225238, 0.9149987357003349, 0.7305427278791156, 0.634610618863787, 0.6362050942012242, 0.6021682875497001, 0.552751898765564, 0.5452118941715786, 0.5272492510931832, 0.5066103254045758, 0.48180438791002544, 0.48876277038029264, 0.4701403038842337, 0.4693082400730678, 0.44462854521615164, 0.43668517044612337, 0.45409507410866873, 0.4557328053883144, 0.41620311566761564, 0.41666689089366366, 0.40198871919087004, 0.3998145375932966, 0.4320272547858102, 0.3808823823928833, 0.3804105690547398, 0.39221279110227314, 0.3980367694582258, 0.3752658111708505, 0.3778030702045986, 0.45688838618142263, 0.37306387083871023, 0.40435136216027395, 0.3893836906978062, 0.36487068448747906, 0.3689053739820208, 0.3697471874100821], "val_accuracy": [0.20266667008399963, 0.35600000619888306, 0.4336666762828827, 0.49666666984558105, 0.5526666641235352, 0.5763333439826965, 0.6666666865348816, 0.7009999752044678, 0.7023333311080933, 0.7303333282470703, 0.7436666488647461, 0.753000020980835, 0.7556666731834412, 0.7673333287239075, 0.7749999761581421, 0.7743333578109741, 0.7833333611488342, 0.7876666784286499, 0.8059999942779541, 0.796999990940094, 0.7953333258628845, 0.7793333530426025, 0.8206666707992554, 0.8206666707992554, 0.8230000138282776, 0.8273333311080933, 0.8056666851043701, 0.8353333473205566, 0.8293333053588867, 0.8220000267028809, 0.8216666579246521, 0.8343333601951599, 0.8363333344459534, 0.7929999828338623, 0.8426666855812073, 0.828000009059906, 0.8303333520889282, 0.840666651725769, 0.8426666855812073, 0.8370000123977661]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 5, 3, 1, 7, 5, 1, 2, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [80, 12, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.7940000295639038, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 3, 5, 4, 2, 2, 1, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.343136282455904, 2.294003190680612, 2.09849057252995, 1.8394272023377212, 1.2730297462862432, 1.0828633830059538, 0.9206799325957479, 0.8228631277739994, 0.8024373213927728, 0.7694410668183406, 0.7099336198040397, 0.710105017656191, 0.6683370304334402, 0.665545754279317, 0.632870172544194, 0.6153365172856141, 0.6450311220585001, 0.5784040051853778, 0.5801519935850014, 0.5742592373071896, 0.5443327190491501, 0.5379067451222351], "accuracy": [0.23101307451725006, 0.12798838317394257, 0.2995641231536865, 0.4011359214782715, 0.5420684218406677, 0.5974111557006836, 0.6618676781654358, 0.6893408894538879, 0.7028133869171143, 0.7119271159172058, 0.7322678565979004, 0.7354378700256348, 0.7543256878852844, 0.7500990629196167, 0.7598732113838196, 0.7656848430633545, 0.7585523724555969, 0.7827235460281372, 0.7775723338127136, 0.7853652238845825, 0.7979130744934082, 0.8016114234924316], "val_loss": [1.9743810381208147, 1.9209531375340052, 1.5222581114087785, 1.2823115076337541, 0.9028945990971157, 0.7887299742017474, 0.6633193663188389, 0.6435262305395943, 0.5697865656444004, 0.5555935246603829, 0.5344304527555194, 0.5188643932342529, 0.5264160803386143, 0.5026941810335431, 0.4619747911180769, 0.4731971876961844, 0.4714011975697109, 0.47304645606449675, 0.4545669215066092, 0.46977363313947407, 0.4343159965106419, 0.5539075136184692], "val_accuracy": [0.09833333641290665, 0.25333333015441895, 0.40033334493637085, 0.41999998688697815, 0.5883333086967468, 0.6679999828338623, 0.6996666789054871, 0.7066666483879089, 0.7406666874885559, 0.7566666603088379, 0.7483333349227905, 0.7639999985694885, 0.7703333497047424, 0.7616666555404663, 0.7913333177566528, 0.7896666526794434, 0.7960000038146973, 0.7786666750907898, 0.7946666479110718, 0.7793333530426025, 0.7900000214576721, 0.734666645526886]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 6, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [36, 47, 64, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.7822856903076172, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 5, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(beta))), tf.math.add(beta, tf.math.sqrt(beta)))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3431390129485385, 2.2940367765556378, 2.088455310130494, 1.6508714337752652, 1.311797033975216, 1.0227022055448431, 0.9023177251209908, 0.8362976456078965, 0.8097025251438935, 0.7707474027736831, 0.737892015412373, 0.7156771354592787, 0.7032141621952689, 0.6855570976964991, 0.6516558375529893, 0.6328741957750523, 0.6658801190558048, 0.6003305768025093, 0.5913494284583467, 0.6038216672962714, 0.5677767050437892, 0.5604016625681227], "accuracy": [0.23114515841007233, 0.1274600476026535, 0.2999603748321533, 0.4321753978729248, 0.5267468094825745, 0.6269977688789368, 0.6659622192382812, 0.6851142644882202, 0.7012283802032471, 0.7108704447746277, 0.7251353859901428, 0.7347774505615234, 0.7397965788841248, 0.7429665923118591, 0.7474573850631714, 0.7625148296356201, 0.7466648817062378, 0.7718927264213562, 0.7804781198501587, 0.7721568942070007, 0.7861577272415161, 0.7903843522071838], "val_loss": [1.9743853296552385, 1.9212812696184431, 1.4692607607160295, 1.1817617416381836, 0.8244670459202358, 0.7135640723364693, 0.6636626039232526, 0.6501550333840507, 0.5961554561342511, 0.5506948232650757, 0.5530961581638881, 0.5783958435058594, 0.5557208572115216, 0.5245412928717477, 0.4950498172215053, 0.506721990449088, 0.4867492233003889, 0.5065968547548566, 0.4848328488213675, 0.4662970134190151, 0.45492236954825266, 0.470899190221514], "val_accuracy": [0.09833333641290665, 0.26733332872390747, 0.41066667437553406, 0.4740000069141388, 0.6200000047683716, 0.6866666674613953, 0.703000009059906, 0.7196666598320007, 0.7409999966621399, 0.753000020980835, 0.734000027179718, 0.737666666507721, 0.7300000190734863, 0.7486666440963745, 0.7699999809265137, 0.7680000066757202, 0.7866666913032532, 0.753333330154419, 0.781000018119812, 0.7796666622161865, 0.7856666445732117, 0.7806666493415833]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 6, 3, 2, 7, 2, 1, 9, 6, 5, 8, 9], [3, 2, 5, 0, 2, 0, 0, 4, 2, 0], [99, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.17085714638233185, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.989511047041317, 2.3026320176936412, 2.2409855110171986, 2.4574887452738365, 2.3036511198184146, 2.29162854774202, 2.274962007188526, 2.3035113064525716, 2.3031076153964416, 2.302943656158296, 2.302951663539646], "accuracy": [0.17500990629196167, 0.10896842926740646, 0.15902787446975708, 0.11610091477632523, 0.09945846349000931, 0.11676132678985596, 0.11134592443704605, 0.10011887550354004, 0.09972262382507324, 0.09760929644107819, 0.09655263274908066], "val_loss": [1.9730778421674455, 1.960404668535505, 1.9228696823120117, 1.9743770871843611, 1.973555292401995, 1.727472952433995, 1.9745754514421736, 1.9738428252083915, 1.9737388065883092, 1.9736718450273787, 1.9733765465872628], "val_accuracy": [0.1066666692495346, 0.0963333323597908, 0.1666666716337204, 0.09966666996479034, 0.09966666996479034, 0.17866666615009308, 0.10366666316986084, 0.09833333641290665, 0.11100000143051147, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 3, 8, 9], [3, 2, 5, 3, 2, 2, 2, 4, 2, 0], [60, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.1468571424484253, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 0, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.divide_no_nan(grad, beta)), tf.math.add(beta, beta))), beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.234072936792037, 2.458403197324917, 2.634985588261669, 2.885359831930797, 3.306818412232314, 3.858343536103359], "accuracy": [0.2032756507396698, 0.1258750557899475, 0.10381719470024109, 0.09866596013307571, 0.09179764986038208, 0.08598599582910538], "val_loss": [2.028533390590123, 2.1757984842572893, 2.3633290699550082, 2.6280950137547086, 3.0214405741010393, 3.5189010075160434], "val_accuracy": [0.1003333330154419, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 3, 3, 6, 9, 5, 9, 8, 6, 5, 8, 9], [0, 3, 0, 0, 0, 2, 2, 4, 2, 0], [57, 16, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [2, 3, 6, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [3, 1, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 2, 5, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11755382269620895, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 7, 3, 1, 7, 5, 1, 2, 6, 5, 8, 9], [2, 3, 5, 0, 1, 2, 2, 4, 2, 0], [80, 12, 79, 81, 53, 45], [0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1], [2, 3, 8, 9, 7], [3, 0], [94, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, sigma), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3139717718393196, 2.3471875369288995, 2.39512641876129, 2.478067463635611, 2.6932310197079707, 19.151648167086282, 1.2473120486805251e+30, 2.3035828509524103, 2.3036038930689133, 2.303626995454485, 2.303649210328392], "accuracy": [0.06709814071655273, 0.035266146063804626, 0.020604940131306648, 0.010434553027153015, 0.015057455748319626, 0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9977254186357771, 2.0325534684317454, 2.0856068474905833, 2.1890383447919572, 2.630932262965611, 1160.3988211495537, 1.9745421409606934, 1.9745614869253976, 1.9745811053684779, 1.9746016093662806, 1.9746206828526087], "val_accuracy": [0.004000000189989805, 0.004000000189989805, 0.004000000189989805, 0.005333333276212215, 0.026000000536441803, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [2, 6, 3, 2, 8, 6, 2, 8, 5, 5, 8, 9], [1, 3, 0, 3, 3, 3, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 9, 2, 1, 2, 3], [1, 0, 2, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 3, 3, 1, 2, 0, 5, 5, 4, 1, 1, 5, 4, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3019221995437715, 2.302234896516378, 2.3026437811674523, 2.304505170407218, 2.3122356577855467, 2.349444458340106], "accuracy": [0.10698718577623367, 0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736786569867815, 1.9738695962088448, 1.9746849196297782, 1.9781155586242676, 1.993297508784703, 2.069706235613142], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 5, 4, 1, 7, 5, 1, 2, 6, 5, 8, 9], [0, 3, 5, 0, 1, 2, 2, 4, 2, 0], [80, 12, 79, 81, 53, 45], [1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [3, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 6, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.divide_no_nan(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 1, 2, 7, 2, 1, 9, 6, 5, 8, 9], [1, 1, 0, 0, 0, 2, 2, 4, 2, 0], [89, 47, 64, 81, 53, 45], [0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1], [2, 3, 0, 9, 7], [4, 3], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 4, 6, 6, 4, 2, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), beta)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08453308790922165, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 6, 9, 5, 9, 8, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [91, 47, 79, 81, 53, 45], [0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [24, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 6, 3, 3, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 6, 9, 5, 9, 8, 6, 5, 8, 9], [5, 3, 0, 0, 0, 2, 2, 4, 2, 0], [57, 5, 79, 81, 53, 45], [0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 0, 1], [1, 3, 8, 9, 7], [5, 0], [37, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [24, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022704665151648, 2.302587985425593, 2.30258812061658, 2.3025877159883508, 2.302588813702633, 2.3025884536027186], "accuracy": [0.09377889335155487, 0.09932637959718704, 0.09259014576673508, 0.09470347315073013, 0.08942015469074249, 0.09470347315073013], "val_loss": [1.973644188472203, 1.9736440522330148, 1.973644529070173, 1.9736442565917969, 1.9736440522330148, 1.9736439159938268], "val_accuracy": [0.1003333330154419, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.09799999743700027, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [0, 2, 3, 3, 2, 2, 2, 4, 2, 0], [62, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [25, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 12, 5, 3, 5, 5, 4, 1, 1, 8, 4, 4, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(beta)))), grad))), tf.math.add(beta, grad)), beta)), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 9, 7, 9, 1, 9, 6, 5, 8, 9], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [89, 89, 64, 68, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 2, 1, 2, 3], [0, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 6, 3, 2, 1, 0, 0, 0, 0, 3, 1, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302267902326653, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10077928751707077, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 3, 2, 6, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 3, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1], [8, 3, 8, 9, 7], [4, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 18, 18, 10, 8, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), beta)), grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1282579153.308702, 24122323956.774006, 110479545013.03606, 305226313361.73505, 672597570771.1299, 1208293614501.7864], "accuracy": [0.09747721254825592, 0.1026284471154213, 0.09840179979801178, 0.09998679161071777, 0.1026284471154213, 0.10157178342342377], "val_loss": [4788429238.857142, 38296087990.85714, 129236360045.71428, 306324261156.5714, 598276121746.2858, 1033804934582.8572], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [2, 3, 2, 0, 0, 3, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [64, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 6, 5, 4, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302576976791743, 2.3033137278329456, 2.3038697333116067, 2.304306876752292, 2.3035430140451845, 2.302018108841545], "accuracy": [0.08836349099874496, 0.09325055778026581, 0.09206181764602661, 0.08981640636920929, 0.09047681838274002, 0.08994849026203156], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 5, 3, 1, 7, 5, 1, 2, 6, 5, 8, 9], [2, 2, 5, 0, 1, 2, 2, 4, 2, 0], [80, 12, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1], [8, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302576976791743, 2.3033137278329456, 2.3038697333116067, 2.304306876752292, 2.3035430140451845, 2.302018108841545], "accuracy": [0.08836349099874496, 0.09325055778026581, 0.09206181764602661, 0.08981640636920929, 0.09047681838274002, 0.08994849026203156], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 4, 5, 1, 8, 9, 7], [1, 3, 0, 0, 1, 2, 2, 4, 2, 0], [89, 47, 64, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), alpha)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(beta, grad)))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302576976791743, 2.3033137278329456, 2.3038697333116067, 2.304306876752292, 2.3035430140451845, 2.302018108841545], "accuracy": [0.08836349099874496, 0.09325055778026581, 0.09206181764602661, 0.08981640636920929, 0.09047681838274002, 0.08994849026203156], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]