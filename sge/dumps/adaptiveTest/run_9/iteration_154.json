[{"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 0, 2, 0, 8, 5, 9, 0], [1, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [51, 57]], "fitness": -0.8042857050895691, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 8, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.283756119810343, 2.145389504830095, 1.689535854703888, 1.330840855179493, 1.0350305498347008, 0.8876425218368015, 0.8132815066739285, 0.7751563697395984, 0.7357855743468162, 0.7077203767410816, 0.6862546556173236, 0.6601462031966423, 0.6393523308909911, 0.6190747695434614, 0.6054401785753281, 0.5854345231150057, 0.5737066372211473, 0.5579510148505903, 0.5416694706567384, 0.528735299632219, 0.5113735672442228, 0.4984299815436396, 0.4946086156865814, 0.48644168300793045, 0.47949003279720864, 0.4605087444821936, 0.4588346027222607, 0.4435581201063785, 0.43653685525659996, 0.4247984548310058, 0.4269269718438596, 0.41943185378012166, 0.4109600195677179, 0.40013001201616033, 0.3971977704087143, 0.38824675259431435, 0.3885756478121, 0.37364576887445144, 0.37019894217078114, 0.3538052238973691, 0.35322377523804666, 0.34711329803695423, 0.34792783996920623, 0.34348441491336745, 0.3324778977126619, 0.32797084032914514, 0.31912400609214686, 0.3185563665048211, 0.3142959730870153, 0.3093600876933438, 0.30478168484509943, 0.3003192347951805, 0.2878306884500156, 0.2889387848953199, 0.2817036713575722, 0.27695866884682646, 0.2779264563362218, 0.2719379255973495, 0.264338336880055, 0.25965348685170364, 0.2694655802460583, 0.256459565812791, 0.2605807150532903, 0.2547265126830819, 0.2522265421062523], "accuracy": [0.14357416331768036, 0.3455289900302887, 0.4558182656764984, 0.5391625761985779, 0.6351869106292725, 0.6693964004516602, 0.6996433734893799, 0.6979262828826904, 0.7194558382034302, 0.7268524765968323, 0.7396644949913025, 0.7530049085617065, 0.7561748623847961, 0.7627789974212646, 0.7741381525993347, 0.7759873270988464, 0.7819310426712036, 0.7927618622779846, 0.7989697456359863, 0.7998943328857422, 0.8020076751708984, 0.8104609847068787, 0.8152159452438354, 0.8195747137069702, 0.8208954930305481, 0.8273676037788391, 0.8343679904937744, 0.8309338092803955, 0.8400475382804871, 0.8455950617790222, 0.8428213000297546, 0.8421608805656433, 0.8469158411026001, 0.8471800088882446, 0.8518029451370239, 0.8594637513160706, 0.8562937378883362, 0.8623695969581604, 0.8622375130653381, 0.8692378997802734, 0.8691058158874512, 0.8722757697105408, 0.8710870146751404, 0.8684453964233398, 0.8732003569602966, 0.8787478804588318, 0.8812574148178101, 0.8802007436752319, 0.878351628780365, 0.8821820020675659, 0.8808611631393433, 0.8879936337471008, 0.8899748921394348, 0.8922203183174133, 0.8948619961738586, 0.8898428082466125, 0.8934090733528137, 0.89988112449646, 0.9001452922821045, 0.9012019634246826, 0.8993527889251709, 0.902390718460083, 0.8992207050323486, 0.8988244533538818, 0.9010698795318604], "val_loss": [1.9040607043675013, 1.6395014013562883, 0.970332281930106, 0.7535791397094727, 0.6878087520599365, 0.6518305369785854, 0.592632361820766, 0.5835673298154559, 0.5657286473682949, 0.5539514337267194, 0.5372564962932042, 0.5204164470945086, 0.5138366562979562, 0.4963856594903128, 0.48121670314243864, 0.471138664654323, 0.4571598768234253, 0.4464132445199149, 0.43769894327436176, 0.42906246866498676, 0.4207710197993687, 0.4104411857468741, 0.4040192110197885, 0.3980653371129717, 0.3945696098463876, 0.39070007630756926, 0.3846723863056728, 0.3830421822411673, 0.3848421403339931, 0.37548500299453735, 0.37039936440331594, 0.37032370056424824, 0.3647297280175345, 0.362605231148856, 0.3623827951295035, 0.36199227401188444, 0.3547701580183847, 0.3507877843720572, 0.34754819529397146, 0.34827011823654175, 0.34752196073532104, 0.34385584933417185, 0.34156976427350727, 0.3396897315979004, 0.3320262687546866, 0.33350673743656706, 0.33370167868477957, 0.33388555901391165, 0.33307656220027376, 0.3315357821328299, 0.328696038041796, 0.3314054182597569, 0.32631291661943707, 0.32355135679244995, 0.32781457901000977, 0.3289663280759539, 0.3280557223728725, 0.32864158494131906, 0.3289406555039542, 0.32714817353657316, 0.32036188670567106, 0.32030082600457327, 0.3293204733303615, 0.31924780777522493, 0.3201240045683725], "val_accuracy": [0.38600000739097595, 0.4803333282470703, 0.6476666927337646, 0.6790000200271606, 0.7056666612625122, 0.7193333506584167, 0.7329999804496765, 0.7440000176429749, 0.7480000257492065, 0.762333333492279, 0.7706666588783264, 0.7680000066757202, 0.7736666798591614, 0.7860000133514404, 0.7879999876022339, 0.7919999957084656, 0.7976666688919067, 0.8090000152587891, 0.8103333115577698, 0.8100000023841858, 0.8186666369438171, 0.8226666450500488, 0.8273333311080933, 0.8289999961853027, 0.8270000219345093, 0.8316666483879089, 0.8326666951179504, 0.8363333344459534, 0.8393333554267883, 0.831333339214325, 0.8393333554267883, 0.8443333506584167, 0.8389999866485596, 0.8453333377838135, 0.8493333458900452, 0.8403333425521851, 0.8483333587646484, 0.8506666421890259, 0.8523333072662354, 0.8523333072662354, 0.8519999980926514, 0.8526666760444641, 0.8539999723434448, 0.8573333621025085, 0.8583333492279053, 0.8576666712760925, 0.8576666712760925, 0.8556666374206543, 0.859333336353302, 0.8579999804496765, 0.8600000143051147, 0.8573333621025085, 0.8629999756813049, 0.862333357334137, 0.8619999885559082, 0.8603333234786987, 0.8640000224113464, 0.8663333058357239, 0.8696666955947876, 0.8706666827201843, 0.8673333525657654, 0.8666666746139526, 0.8646666407585144, 0.8643333315849304, 0.8703333139419556]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 9, 5, 2], [0, 4, 3, 0, 3], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.8002856969833374, "mapping_values": [1, 5, 5, 3, 2, 1, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.259998936584487, 2.069803514563727, 1.6332266778049058, 1.271769980051577, 1.082477155063666, 1.0054243576367612, 0.9206145876009136, 0.880615810763173, 0.8349043814781052, 0.8336793630980639, 0.7815603546620108, 0.7733465795976107, 0.7471171560824083, 0.7365684388587976, 0.722832543699418, 0.7118908717742197, 0.6967345558184642, 0.6861670902219069, 0.6847140510493832, 0.6633702848943596, 0.6569899188812461, 0.6567827240587178, 0.6491710350592501, 0.6442622043563391, 0.6390910279859469, 0.6285329382055235, 0.6334579684998555, 0.6193764644244785, 0.6123772773681583, 0.60787206663038, 0.6116165868940922, 0.59691890677, 0.5960706194882159, 0.5853177590959691, 0.5936858182601515, 0.5933148412577873, 0.5785244758008509, 0.5823616991426022, 0.5858330701430712, 0.5672340174754849, 0.5701831742725542, 0.5650729611250294, 0.5620297565436272, 0.5591490127627466], "accuracy": [0.1982565075159073, 0.3757759928703308, 0.4905560612678528, 0.5641262531280518, 0.6164311170578003, 0.6355831623077393, 0.6715096831321716, 0.6853784322738647, 0.7021529674530029, 0.6947563290596008, 0.7176066637039185, 0.71100252866745, 0.7304186820983887, 0.7333245277404785, 0.7371549606323242, 0.7375511527061462, 0.7448157668113708, 0.7479857206344604, 0.750759482383728, 0.7537974119186401, 0.7567031979560852, 0.7563069462776184, 0.759609043598175, 0.7569673657417297, 0.763439416885376, 0.7666094303131104, 0.7611940503120422, 0.7622507214546204, 0.7670056819915771, 0.7718927264213562, 0.7744023203849792, 0.7753269076347351, 0.7816668748855591, 0.7847048044204712, 0.7800818681716919, 0.7774402499198914, 0.7837802171707153, 0.7840443849563599, 0.7796856164932251, 0.7882710099220276, 0.7843085527420044, 0.7909126877784729, 0.791441023349762, 0.7954035401344299], "val_loss": [1.8576722145080566, 1.5360190187181746, 1.0643492085593087, 0.8462602070399693, 0.7631093774523053, 0.7001979351043701, 0.6502813952309745, 0.6319830077035087, 0.6273244278771537, 0.5983917542866298, 0.5791668040411813, 0.5729237965175084, 0.5601446117673602, 0.5578743049076625, 0.5483066524778094, 0.530919075012207, 0.5358460119792393, 0.5256510632378715, 0.52094795022692, 0.5199300221034459, 0.5043040854590279, 0.4983952726636614, 0.5023707492010934, 0.500231317111424, 0.4989022527422224, 0.49439735071999685, 0.4822536025728498, 0.48976756845201763, 0.4934459754398891, 0.481129561151777, 0.47729320185525076, 0.47304485525403706, 0.4675066981996809, 0.47658445153917584, 0.46174848079681396, 0.46610094819750103, 0.45759602955409456, 0.4661696808678763, 0.45723886149270193, 0.4819121020180838, 0.4665808847972325, 0.4466273444039481, 0.4540819099971226, 0.44809460639953613], "val_accuracy": [0.4426666796207428, 0.5299999713897705, 0.6159999966621399, 0.671999990940094, 0.6823333501815796, 0.7083333134651184, 0.7243333458900452, 0.7366666793823242, 0.7200000286102295, 0.7433333396911621, 0.750333309173584, 0.7593333125114441, 0.7636666893959045, 0.7606666684150696, 0.765999972820282, 0.7726666927337646, 0.7586666941642761, 0.7726666927337646, 0.7746666669845581, 0.7670000195503235, 0.7829999923706055, 0.7846666574478149, 0.7796666622161865, 0.7853333353996277, 0.7863333225250244, 0.7799999713897705, 0.7900000214576721, 0.7993333339691162, 0.781333327293396, 0.7933333516120911, 0.7906666398048401, 0.7976666688919067, 0.8009999990463257, 0.7950000166893005, 0.8043333292007446, 0.7956666946411133, 0.8096666932106018, 0.7903333306312561, 0.8119999766349792, 0.784333348274231, 0.7943333387374878, 0.8013333082199097, 0.7956666946411133, 0.8096666932106018]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [6, 2, 2, 6, 6, 5, 5, 9, 2], [0, 4, 3, 0, 3, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.7997142672538757, "mapping_values": [1, 5, 5, 3, 2, 2, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2602596414591485, 2.0628582465099132, 1.6252342424592983, 1.2666756638981773, 1.0853985847656549, 0.9961093436489173, 0.9373763040261198, 0.8737622691797401, 0.8399424657152785, 0.8171772138002668, 0.8056327293357199, 0.7712961592143317, 0.7573914255023302, 0.7251675013994513, 0.7332721635524103, 0.6991449752582646, 0.7010897772895693, 0.6936942718646562, 0.6829426643272448, 0.6726065858432945, 0.6606834345741861, 0.6521957258679973, 0.6419859029723669, 0.6390501987570392, 0.6280281035072847, 0.6271460723599832, 0.6266433505208312, 0.6186231677054477, 0.6143408216788957, 0.620730247172886, 0.5993211884477182, 0.6003852930240281], "accuracy": [0.19402985274791718, 0.38383305072784424, 0.4876502454280853, 0.5604279637336731, 0.6214502453804016, 0.6501122713088989, 0.6610751748085022, 0.6853784322738647, 0.6927750706672668, 0.7005679607391357, 0.7041342258453369, 0.711530864238739, 0.7172104120254517, 0.7342491149902344, 0.7248712182044983, 0.7364945411682129, 0.7413815855979919, 0.7341170310974121, 0.7458723783493042, 0.7524765729904175, 0.7555144429206848, 0.7518161535263062, 0.7593448758125305, 0.7598732113838196, 0.763439416885376, 0.7629110813140869, 0.7633073329925537, 0.7637035846710205, 0.7712323069572449, 0.7672698497772217, 0.7708360552787781, 0.7770439982414246], "val_loss": [1.8567673819405692, 1.526237862450736, 1.0592305660247803, 0.8436164685658046, 0.7536488260541644, 0.7047280584062848, 0.6700168166841779, 0.6440855945859637, 0.6149895361491612, 0.5965801647731236, 0.5849745443889073, 0.5905262572424752, 0.559671333857945, 0.5501138653073993, 0.5376367058072772, 0.5429682050432477, 0.5373837947845459, 0.5323257616588047, 0.5187816619873047, 0.5188113961900983, 0.5124865770339966, 0.5091239213943481, 0.5076166221073696, 0.4904031923839024, 0.4925846883228847, 0.4958877052579607, 0.48510898862566265, 0.48803051880427767, 0.48441576957702637, 0.4797182934624808, 0.4769294091633388, 0.4722574438367571], "val_accuracy": [0.4283333420753479, 0.5383333563804626, 0.6546666622161865, 0.67166668176651, 0.6806666851043701, 0.70333331823349, 0.7073333263397217, 0.7106666564941406, 0.7400000095367432, 0.7490000128746033, 0.75, 0.7386666536331177, 0.7523333430290222, 0.762333333492279, 0.7699999809265137, 0.7676666378974915, 0.7596666812896729, 0.7753333449363708, 0.7839999794960022, 0.781333327293396, 0.7716666460037231, 0.777999997138977, 0.7820000052452087, 0.7866666913032532, 0.7853333353996277, 0.7839999794960022, 0.7919999957084656, 0.7806666493415833, 0.7863333225250244, 0.7870000004768372, 0.7906666398048401, 0.7886666655540466]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 0, 0, 2, 6, 5, 1, 9], [0, 4, 3, 0, 0], [9, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.797428548336029, "mapping_values": [1, 5, 5, 3, 2, 2, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2602595604957134, 2.062856336941163, 1.6252463261968724, 1.2667118180555486, 1.085524994911944, 0.9962409405959611, 0.9379817965779842, 0.8739877626833238, 0.8402818505553963, 0.8165723425427825, 0.8056442389131112, 0.7714121085447075, 0.7578725896853465, 0.7251427796979417, 0.7326016202421394, 0.6991973530110934, 0.7020658968131398, 0.6931060331451296, 0.6830750554229259, 0.6726414950579511, 0.6610115450591522, 0.6524619010492733, 0.6417262324126736, 0.6381691196386479, 0.6277850261453813, 0.6260869110249383, 0.6266347162082069, 0.6199689782716028, 0.6135632078157298, 0.6205997372410474, 0.5992483228598572, 0.6003918031486679], "accuracy": [0.19402985274791718, 0.3839651346206665, 0.4876502454280853, 0.5604279637336731, 0.6213181614875793, 0.6501122713088989, 0.6609430909156799, 0.6861709356307983, 0.691850483417511, 0.7010962963104248, 0.7034738063812256, 0.711530864238739, 0.7172104120254517, 0.7347774505615234, 0.724739134311676, 0.7366266250610352, 0.7404569983482361, 0.7339849472045898, 0.7461365461349487, 0.7508915662765503, 0.7547219395637512, 0.7528728246688843, 0.7584202885627747, 0.7598732113838196, 0.7627789974212646, 0.7633073329925537, 0.7625148296356201, 0.7646281719207764, 0.7703077793121338, 0.7656848430633545, 0.769911527633667, 0.7775723338127136], "val_loss": [1.856767041342599, 1.5262816633496965, 1.059249026434762, 0.8436063868658883, 0.7541612046105521, 0.7043977635247367, 0.6695708377020699, 0.6446141515459333, 0.61443030834198, 0.5966801643371582, 0.5848941802978516, 0.5925583839416504, 0.5598520040512085, 0.5503771305084229, 0.5378027813775199, 0.5459231819425311, 0.5392474617276873, 0.5317444290433612, 0.5189442123685565, 0.5198143720626831, 0.511499421937125, 0.5091148274285453, 0.5068400927952358, 0.49025751863207134, 0.49243809495653423, 0.49473415102277485, 0.4837972266333444, 0.4871778317860195, 0.48237245423453196, 0.47771646295275005, 0.4784702743802752, 0.4716784954071045], "val_accuracy": [0.4283333420753479, 0.5386666655540466, 0.6539999842643738, 0.6729999780654907, 0.6803333163261414, 0.7020000219345093, 0.7080000042915344, 0.7106666564941406, 0.7406666874885559, 0.750333309173584, 0.753000020980835, 0.7386666536331177, 0.7536666393280029, 0.7609999775886536, 0.7689999938011169, 0.7666666507720947, 0.7599999904632568, 0.7749999761581421, 0.7823333144187927, 0.7796666622161865, 0.7756666541099548, 0.7796666622161865, 0.7836666703224182, 0.7853333353996277, 0.7863333225250244, 0.784333348274231, 0.7926666736602783, 0.7803333401679993, 0.7850000262260437, 0.7873333096504211, 0.7906666398048401, 0.7893333435058594]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 1, 6, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 6, 8, 7], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 1, 2, 3, 3], [86, 2, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 2, 9, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3, 0, 2, 5, 2], [36, 0, 9], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.769428551197052, "mapping_values": [1, 55, 55, 32, 23, 9, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), grad)))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), grad), alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9618262725184386, 1.4793700662665064, 1.036472997023303, 0.9796108672206648, 0.8273925227007893, 0.7802599353435065, 0.735304093395541, 0.7122934001107116, 0.6694578039427286, 0.6801287994219752, 0.6600898249888417, 0.645805713932323, 0.6278465324467861], "accuracy": [0.34883105754852295, 0.4982168674468994, 0.622639000415802, 0.6391493678092957, 0.6922467350959778, 0.7059833407402039, 0.7190595865249634, 0.7326641082763672, 0.7471932172775269, 0.7430986762046814, 0.7536653280258179, 0.750759482383728, 0.7573636174201965], "val_loss": [1.4444842679159982, 0.9875943660736084, 0.7240845135280064, 0.6553411483764648, 0.7128404549189976, 0.5828038283756801, 0.5520995344434466, 0.5343207291194371, 0.5353048358644757, 0.5538787160600934, 0.5274725982121059, 0.5351743357522147, 0.5195381471088955], "val_accuracy": [0.375, 0.5600000023841858, 0.6869999766349792, 0.7260000109672546, 0.70333331823349, 0.7419999837875366, 0.7606666684150696, 0.7733333110809326, 0.7730000019073486, 0.7613333463668823, 0.7633333206176758, 0.7710000276565552, 0.7666666507720947]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 2, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [2, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.7628571391105652, "mapping_values": [1, 6, 6, 4, 2, 2, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, tf.math.add(grad, grad)))), tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9547220227614748, 1.4837101167297917, 1.140195412650604, 0.9189127568461088, 0.8320765707864738, 0.7942051344370687, 0.7550241150136133, 0.737552201695934, 0.7299714569622862, 0.6818643941178282, 0.6835717594603097, 0.6584594612738176, 0.653573456181826, 0.6362215498844395], "accuracy": [0.35107648372650146, 0.49848103523254395, 0.598599910736084, 0.6546030640602112, 0.6873596906661987, 0.696209192276001, 0.7170783281326294, 0.7165499925613403, 0.7218332886695862, 0.7457403540611267, 0.7477215528488159, 0.7497028112411499, 0.7477215528488159, 0.763967752456665], "val_loss": [1.5233995914459229, 1.1973682471684046, 0.6962882110050747, 0.6969167845589774, 0.6232936041695731, 0.6329277242933001, 0.6136479207447597, 0.5759667498724801, 0.5524289608001709, 0.5685206311089652, 0.5347010919025966, 0.554409214428493, 0.5543660947254726, 0.5171973875590733], "val_accuracy": [0.36533331871032715, 0.5043333172798157, 0.6893333196640015, 0.7096666693687439, 0.7123333215713501, 0.7139999866485596, 0.7179999947547913, 0.7433333396911621, 0.7670000195503235, 0.7440000176429749, 0.746999979019165, 0.7463333606719971, 0.7523333430290222, 0.7556666731834412]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 84, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [6, 2, 0, 2, 6, 9, 5, 2], [1, 4, 3, 0, 3], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.7614285945892334, "mapping_values": [1, 5, 5, 3, 2, 2, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.95303761548118, 1.439229777302992, 1.0070518800894566, 0.9254138935527089, 0.8165193798598391, 0.7724284939935352, 0.7275674654712861, 0.7080980365097782, 0.6856897491678791, 0.660959009119013, 0.6330090167421344, 0.6417450237472564, 0.6188017999680286], "accuracy": [0.3498877286911011, 0.5036323070526123, 0.6258090138435364, 0.6625280380249023, 0.6993792057037354, 0.7147008180618286, 0.7190595865249634, 0.7316074371337891, 0.7401928305625916, 0.7450799345970154, 0.7638356685638428, 0.7630431652069092, 0.7689869403839111], "val_loss": [1.3557616301945277, 0.8219166823795864, 0.7213471106120518, 0.6281227554593768, 0.6033096654074532, 0.5806683812822614, 0.5597138404846191, 0.5584206581115723, 0.5459974833897182, 0.5655039889471871, 0.518981899533953, 0.5164165326527187, 0.5138189452035087], "val_accuracy": [0.43433332443237305, 0.6600000262260437, 0.6856666803359985, 0.734333336353302, 0.737333357334137, 0.7379999756813049, 0.7486666440963745, 0.7633333206176758, 0.7473333477973938, 0.7366666793823242, 0.7570000290870667, 0.762333333492279, 0.7549999952316284]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 2, 4, 6, 6, 5, 5, 9, 2], [2, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.7594285607337952, "mapping_values": [1, 6, 6, 5, 1, 2, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.square(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9530806806124967, 1.441610907015626, 1.009023563823428, 0.8959099567010497, 0.8356521978448835, 0.7479483384293115, 0.7371400616440114, 0.7013065280647892, 0.6883354049238468, 0.6714081471826989, 0.6340193707929421], "accuracy": [0.35001981258392334, 0.5042926669120789, 0.6238277554512024, 0.6717738509178162, 0.6885483860969543, 0.7279091477394104, 0.7195879220962524, 0.7375511527061462, 0.741909921169281, 0.7442874312400818, 0.763967752456665], "val_loss": [1.3585936001368932, 0.8171709094728742, 0.722655074937003, 0.677819013595581, 0.6043709857123238, 0.5662929500852313, 0.5777938876833234, 0.5686260461807251, 0.5594718285969326, 0.5588644232068744, 0.5296536684036255], "val_accuracy": [0.4350000023841858, 0.6616666913032532, 0.6763333082199097, 0.6790000200271606, 0.7279999852180481, 0.7593333125114441, 0.7390000224113464, 0.7353333234786987, 0.750333309173584, 0.737666666507721, 0.7566666603088379]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 36, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 4, 6, 6, 5, 5, 9, 2], [2, 4, 3, 0, 3, 0, 2, 5, 2], [89, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.5082857012748718, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), grad))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1675956876853264, 1.353221929918868, 0.8980044161072024, 0.8123234864223462, 0.7496423435374935, 0.7067091965152603, 0.6406028413769433, 0.6194499190677788, 0.5705523637811412, 0.5592813153371456, 0.5192165985445636, 0.5257672465960772, 0.5302451189994624, 0.498745724025451, 0.4947126235440423, 0.4859571282055242, 0.459660467041356, 0.46394537699661864, 0.45262364202156014, 0.44617186314110835, 0.4504794499790979, 0.4446481964009045, 0.42736157599362745, 0.43861895091088693, 0.41559136031940236, 0.421283587508308, 0.4079971304580347, 0.42756858303121464, 0.41005565618338163, 0.45416130710271657, 0.47041384391402996, 0.48180711030834117], "accuracy": [0.270109623670578, 0.5444459319114685, 0.6634526252746582, 0.6923788189888, 0.7140403985977173, 0.7281733155250549, 0.7580240368843079, 0.767930269241333, 0.7800818681716919, 0.7746664881706238, 0.7956677079200745, 0.8010830879211426, 0.7943468689918518, 0.8075551390647888, 0.8142913579940796, 0.8181217908859253, 0.8245938420295715, 0.817989706993103, 0.8232730031013489, 0.8252542614936829, 0.8255184292793274, 0.8314621448516846, 0.8416325449943542, 0.8355567455291748, 0.8465195894241333, 0.839519202709198, 0.8425571322441101, 0.8466516733169556, 0.8387266993522644, 0.8378021121025085, 0.8244617581367493, 0.8285563588142395], "val_loss": [1.2931647641318185, 0.6833598613739014, 0.6212948049817767, 0.5892600672585624, 0.5507621424538749, 0.5120630093983242, 0.48469410623822895, 0.46345962796892437, 0.4593761989048549, 0.4334301607949393, 0.4315086007118225, 0.43666671003614155, 0.4041710836546762, 0.39628392457962036, 0.3901829208646502, 0.39061540365219116, 0.4181576371192932, 0.38566823516573223, 0.41484073230198454, 0.41958117485046387, 0.39023475987570627, 0.42331522703170776, 0.4076134307043893, 0.39572250843048096, 0.3914825831140791, 0.3981916734150478, 0.4154755643435887, 0.41963499784469604, 0.47409869943346294, 0.4576237031391689, 0.46252008846827913, 0.47353109291621615], "val_accuracy": [0.527999997138977, 0.7009999752044678, 0.7266666889190674, 0.7310000061988831, 0.7553333044052124, 0.7776666879653931, 0.7836666703224182, 0.7946666479110718, 0.7919999957084656, 0.8103333115577698, 0.7986666560173035, 0.8253333568572998, 0.8243333101272583, 0.8326666951179504, 0.8343333601951599, 0.8363333344459534, 0.82833331823349, 0.8376666903495789, 0.8403333425521851, 0.8389999866485596, 0.8420000076293945, 0.8413333296775818, 0.8450000286102295, 0.8476666808128357, 0.8460000157356262, 0.8500000238418579, 0.8510000109672546, 0.843666672706604, 0.8489999771118164, 0.8410000205039978, 0.846666693687439, 0.8416666388511658]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [54, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 3, 3, 0, 3], [9, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [60, 57]], "fitness": -0.46000000834465027, "mapping_values": [1, 5, 5, 2, 3, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4104966882701406, 2.3032112573478294, 2.299960107693756, 2.1728803045194476, 2.301683848355472, 2.3038413797339996, 2.3024406548992453, 2.46217741624255, 2.307549166153482], "accuracy": [0.20763438940048218, 0.10540219396352768, 0.11319508403539658, 0.21938978135585785, 0.2044644057750702, 0.09813763201236725, 0.10500594228506088, 0.18557654321193695, 0.09708096832036972], "val_loss": [1.9742657116481237, 1.9726602690560477, 1.9586659840175085, 1.4462901183537074, 1.975032193320138, 1.9735751152038574, 1.970208031790597, 1.981743267604283, 1.9743554251534599], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.2473333328962326, 0.46299999952316284, 0.10366666316986084, 0.10366666316986084, 0.18766666948795319, 0.10100000351667404, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [69, 36, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 9, 5, 2], [0, 4, 3, 0, 3], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [9, 57]], "fitness": -0.14914286136627197, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.6999721029541353, 2.368453074943876, 2.504333237017056, NaN, NaN, NaN, NaN], "accuracy": [0.1706511676311493, 0.10342095047235489, 0.1842557191848755, 0.11121384054422379, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.037637301853725, 1.9780260494777135, 2.18745265688215, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.15833333134651184, 0.09833333641290665, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 47, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9, 0, 8, 4, 1], [2, 4, 3, 0, 3, 0, 2, 5, 2], [38, 58, 19], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 2, 7, 8, 4], [0, 2, 0, 1, 3, 3], [69, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 12, 6, 3, 1, 0, 0, 0, 0, 12, 7, 5, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), beta)), tf.math.add(beta, tf.math.negative(grad))))), grad), tf.math.sqrt(tf.math.pow(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 2, 0, 2, 6, 9, 5, 2], [0, 4, 3, 0, 3, 0, 2, 5, 2], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 10, 10, 6, 4, 3, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 53, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 0, 0, 3], [9, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 6, 5, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [Infinity, 5.17302648458404, 11.847879963024432, 19.0403062359154, 26.239221869647434, 33.439126940923614], "accuracy": [0.06194690242409706, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.5887156214032854, 7.642364774431501, 13.780862263270787, 19.953141893659318, 26.133416312081472, 32.31263296944754], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 8, 5, 9], [2, 4, 3, 3, 3], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [9, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303111200587089, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 15, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 1, 6, 5, 5, 9], [0, 2, 3, 0, 3], [38, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [9, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [88, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 12, 12, 7, 5, 2, 3, 2, 1, 1, 0, 1, 1, 0, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303111200587089, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 3, 2, 6, 2, 3, 9], [3, 4, 0, 3, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 13, 13, 6, 7, 2, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 2, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [3, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [6, 2, 4, 6, 6, 5, 5, 6, 2], [2, 4, 1, 0, 1, 3, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(sigma), tf.math.pow(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 2, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [6, 2, 0, 6, 9, 5, 5, 9], [0, 4, 3, 0, 3, 0, 2, 5, 2], [38, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [5.386392497745534, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11649715900421143, 0.1014397069811821, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [71140.89285714286, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 8, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [23, 72, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 4, 6, 5, 5, 5, 9, 2], [2, 4, 3, 0, 3, 3, 2, 5, 2], [9, 0, 19], [1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, grad)))), tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3041596381797484, 2.301149263263552, 2.3025736514965556, 2.302614098573956, 2.30265925652032, 2.3042471169827086], "accuracy": [0.09153348207473755, 0.09457138925790787, 0.09496764093637466, 0.08902391046285629, 0.09192973375320435, 0.08889182657003403], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]