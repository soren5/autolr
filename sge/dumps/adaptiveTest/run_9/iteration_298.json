[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 1, 2, 1, 1, 2, 9, 8, 2, 9], [3, 3, 3, 2, 3, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 73, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8222857117652893, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, grad)))), grad), tf.math.add(beta, beta)), grad)), tf.math.add(beta, tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), grad), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.20006791311815, 1.99258407057237, 1.480773397865643, 1.0755494475884286, 0.9330591660889935, 0.8050560889510494, 0.7407762513436567, 0.7220923544283258, 0.6893793825838056, 0.6388558974087813, 0.6102033877936431, 0.6438414206704475, 0.5891067041240395, 0.5730133149775343, 0.5661288276560759, 0.5401209109983015, 0.549773999429445, 0.5162485595849118, 0.5360364512351085, 0.5036474358742625, 0.496495519697926, 0.46738410210958986, 0.5008969029273654, 0.458026883687483, 0.4752468501949953, 0.45537525337480234, 0.4424237832732094, 0.43652546612058474, 0.4289600499916102, 0.42541386320716623], "accuracy": [0.2727513015270233, 0.3509443998336792, 0.5110289454460144, 0.6155065298080444, 0.6627922058105469, 0.696209192276001, 0.7211728692054749, 0.726192057132721, 0.7407211661338806, 0.7576277852058411, 0.7721568942070007, 0.7625148296356201, 0.7816668748855591, 0.7868181467056274, 0.785629391670227, 0.7980451583862305, 0.7940827012062073, 0.8086118102073669, 0.8049134612083435, 0.8080834746360779, 0.8193105459213257, 0.8298771381378174, 0.8067626357078552, 0.8330471515655518, 0.824329674243927, 0.8337075710296631, 0.8405758738517761, 0.8381983637809753, 0.8401796221733093, 0.8424250483512878], "val_loss": [1.9064784049987793, 1.2240757942199707, 0.8701809814998082, 0.7557491745267596, 0.6669681072235107, 0.6078083344868251, 0.5485485621861049, 0.5747314350945609, 0.512179970741272, 0.4808917386191232, 0.5789549010140556, 0.45572756017957416, 0.48659076009477886, 0.44768214225769043, 0.4517380510057722, 0.4692768028804234, 0.4338970184326172, 0.48649697644369944, 0.41934502124786377, 0.4174798812185015, 0.41463163920811247, 0.48814787183489117, 0.38563999959400724, 0.4162358471325466, 0.38534994636263165, 0.3932933977672032, 0.3778521418571472, 0.4034449202673776, 0.37900255407605854, 0.3711783289909363], "val_accuracy": [0.35100001096725464, 0.5143333077430725, 0.6326666474342346, 0.6853333115577698, 0.7143333554267883, 0.734000027179718, 0.7493333220481873, 0.7429999709129333, 0.7789999842643738, 0.7956666946411133, 0.7400000095367432, 0.8029999732971191, 0.7733333110809326, 0.7996666431427002, 0.7960000038146973, 0.7766666412353516, 0.812666654586792, 0.796999990940094, 0.8106666803359985, 0.8130000233650208, 0.8186666369438171, 0.7766666412353516, 0.8353333473205566, 0.824999988079071, 0.8433333039283752, 0.8240000009536743, 0.8373333215713501, 0.8263333439826965, 0.8303333520889282, 0.8306666612625122]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 3, 3, 2, 2, 4, 1, 8, 9, 8, 9, 5, 0], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 96, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8171428442001343, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 14, 7, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), beta)), tf.math.add(beta, tf.math.square(alpha)))), tf.math.add(beta, tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2000651734931167, 1.9765370386529513, 1.65472531913845, 1.1152816522926026, 0.8987592105238177, 0.7876319425957251, 0.7377114721088361, 0.7208349235841013, 0.6878269312167921, 0.6316481875926119, 0.6072924160812477, 0.640273019441162, 0.5836238563651217, 0.6001233307283316, 0.5512617465495875, 0.5477923371253028, 0.5420404810395931, 0.5334255823590233, 0.5277199114019278, 0.509688870018153, 0.5018545747070957, 0.4904290244422175, 0.49094756548871704, 0.47549338200466745, 0.4778378854188716, 0.473040667121531, 0.4530534428643859, 0.4381274583868425], "accuracy": [0.2727513015270233, 0.3539822995662689, 0.47430986166000366, 0.6021661758422852, 0.6758684515953064, 0.7100779414176941, 0.7166820764541626, 0.7238145470619202, 0.7359662055969238, 0.7574957013130188, 0.7681944370269775, 0.7631752490997314, 0.7849689722061157, 0.7814027070999146, 0.7913089394569397, 0.7909126877784729, 0.7954035401344299, 0.7985734939575195, 0.8042530417442322, 0.8076872229576111, 0.8162726163864136, 0.8197067975997925, 0.8149517774581909, 0.8296129703521729, 0.8247259259223938, 0.8219521641731262, 0.829216718673706, 0.8314621448516846], "val_loss": [1.9061758858816964, 1.2419549056461878, 1.0380705765315466, 0.8246199233191354, 0.70303704057421, 0.6194510459899902, 0.5493601219994682, 0.5500575474330357, 0.5038328851972308, 0.5146474327359881, 0.559650046484811, 0.45717574868883404, 0.573221240724836, 0.4422824042184012, 0.44414004257747103, 0.46089312008449007, 0.4586501291819981, 0.4600273881639753, 0.4438889878136771, 0.41884741612843107, 0.39741707699639456, 0.4597621645246233, 0.3846555692808969, 0.4112125549997602, 0.4155974302973066, 0.3914932438305446, 0.38341533286230906, 0.39853479181017193], "val_accuracy": [0.35100001096725464, 0.4880000054836273, 0.6050000190734863, 0.6586666703224182, 0.703000009059906, 0.7203333377838135, 0.750333309173584, 0.7480000257492065, 0.778333306312561, 0.7670000195503235, 0.7356666922569275, 0.8013333082199097, 0.753333330154419, 0.8029999732971191, 0.8096666932106018, 0.7876666784286499, 0.7960000038146973, 0.7986666560173035, 0.8086666464805603, 0.8176666498184204, 0.8256666660308838, 0.7860000133514404, 0.8356666564941406, 0.8180000185966492, 0.8183333277702332, 0.8276666402816772, 0.8320000171661377, 0.8303333520889282]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 1, 8, 8, 8, 9], [3, 3, 0, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.7514285445213318, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), beta))), tf.math.sqrt(tf.math.add(beta, alpha)))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1023891452375643, 1.6577633690635651, 1.1444093261680206, 1.0958257873517143, 0.8134739285667323, 0.8168076362119863, 0.7733874883728572, 0.7213368096985853, 0.6821166995950678, 0.6559755670600769, 0.6573854422666897, 0.647338055230686], "accuracy": [0.3069607615470886, 0.4443270266056061, 0.5728437304496765, 0.6102232336997986, 0.6823405027389526, 0.685510516166687, 0.6972658634185791, 0.7191916704177856, 0.7405890822410583, 0.7475894689559937, 0.7481178045272827, 0.7449478507041931], "val_loss": [1.3836641992841447, 1.043806723185948, 1.103710651397705, 0.6558248315538678, 0.6412620203835624, 0.6981484549386161, 0.5607409306934902, 0.5696929522923061, 0.5441003016063145, 0.6494047812053135, 0.5948403562818255, 0.5659734351294381], "val_accuracy": [0.5193333625793457, 0.5873333215713501, 0.6003333330154419, 0.7026666402816772, 0.6976666450500488, 0.6990000009536743, 0.7513333559036255, 0.7486666440963745, 0.7400000095367432, 0.6980000138282776, 0.7160000205039978, 0.7279999852180481]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 0, 1, 8, 0, 8, 9], [3, 3, 0, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [56, 57]], "fitness": -0.7505714297294617, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2689459854191982, 2.229861312711779, 2.476328226238619, 2.564386310389706, 2.298231071500636, 2.0631229832439755, 1.7938212092841352, 1.8191924516503775, 1.4793071721318438, 1.2967701571697194, 1.1918296374507538, 1.0398222855872261, 0.9003925327107797, 0.8209724570892081, 0.9180804061033092, 0.7646156807522716, 0.7248076706231152, 0.7390477965064194, 0.689634122286081, 0.6705101836532288, 0.6469357480320712, 0.649783560274268, 0.6098183723110737, 0.615968458987246, 0.5859407243585668, 0.5876447808835422, 0.5633494780441837, 0.5594971221136679, 0.5567954734820008, 0.5562343415236508, 0.5090647867374322, 0.518942751440122, 0.49738478479116444, 0.5025404169929183, 0.4767317486051807], "accuracy": [0.20380398631095886, 0.23933430016040802, 0.13115836679935455, 0.1768590658903122, 0.1372341811656952, 0.29282790422439575, 0.4103817343711853, 0.4127592146396637, 0.5050851702690125, 0.5583146214485168, 0.5867124795913696, 0.618280291557312, 0.665830135345459, 0.6923788189888, 0.6602826714515686, 0.7069079279899597, 0.7215691208839417, 0.7120591998100281, 0.7338528633117676, 0.7445515990257263, 0.7528728246688843, 0.7485140562057495, 0.7582882046699524, 0.7696473598480225, 0.7749306559562683, 0.7799497842788696, 0.7903843522071838, 0.7890635132789612, 0.7903843522071838, 0.7935543656349182, 0.7997622489929199, 0.8057059645652771, 0.8096684813499451, 0.8076872229576111, 0.8219521641731262], "val_loss": [1.7953190122331892, 1.9042596817016602, 1.9659912926810128, 1.9798555374145508, 1.8901069504874093, 1.7631075041634696, 1.2190259184156145, 1.0774610383169991, 1.0515992300851005, 0.9275797775813511, 0.8359580721173968, 0.6373080866677421, 0.6196015392030988, 0.7259345735822406, 0.6009896993637085, 0.5499314069747925, 0.49938385827200754, 0.5271761417388916, 0.5533442667552403, 0.4972276176725115, 0.5083002362932477, 0.46648493834904264, 0.5029260260718209, 0.4874640022005354, 0.509483780179705, 0.42810711690357756, 0.46218899318150114, 0.5084423507962909, 0.4707341364451817, 0.4010948283331735, 0.42776009866169523, 0.40573894126074656, 0.40657819168908255, 0.4004750336919512, 0.43087402411869596], "val_accuracy": [0.28966665267944336, 0.40966665744781494, 0.19300000369548798, 0.11533333361148834, 0.2590000033378601, 0.28166666626930237, 0.5566666722297668, 0.5766666531562805, 0.5643333196640015, 0.6320000290870667, 0.6136666536331177, 0.7276666760444641, 0.7369999885559082, 0.6893333196640015, 0.7073333263397217, 0.7486666440963745, 0.7699999809265137, 0.7609999775886536, 0.7483333349227905, 0.7670000195503235, 0.7630000114440918, 0.7900000214576721, 0.7836666703224182, 0.7916666865348816, 0.7823333144187927, 0.8216666579246521, 0.8026666641235352, 0.7526666522026062, 0.8169999718666077, 0.8270000219345093, 0.796999990940094, 0.8183333277702332, 0.8220000267028809, 0.8263333439826965, 0.8190000057220459]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 9, 0, 5, 1, 9, 8, 5, 9, 9], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [21, 57]], "fitness": -0.732285737991333, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3001898827097436, 2.291583222515311, 2.286140071276613, 2.2811694997664786, 2.2733615736494666, 2.2666657663780416, 2.260715436469358, 2.252424226917564, 2.2455212753430933, 2.2377904637961135, 2.2290721176133856, 2.220971247177114, 2.2107852320897186, 2.197834929706965, 2.1877626155298526, 2.1757893147580045, 2.1627532121700903, 2.1480884609000714, 2.1335158124812104, 2.1150024276383723, 2.0958778072168736, 2.0738867491212076, 2.0589602863972827, 2.0328168497739325, 2.011873652622952, 1.986378650230077, 1.9564606927688553, 1.924402190882847, 1.8952839339587195, 1.8731218252703499, 1.8388718586115396, 1.8077345504862774, 1.773610730433209, 1.7372028299247773, 1.707614947177825, 1.676051108277532, 1.638934164739414, 1.614836324254803, 1.5853894145938117, 1.5425353541964348, 1.5271174214881693, 1.4933108449564823, 1.460992265985217, 1.4379907489027628, 1.416343631698408, 1.3930996814030445, 1.3716996528091148, 1.354045230242334, 1.3350282239876152, 1.3127921414554804, 1.2971438659637233, 1.280508209701385, 1.2684645129705008, 1.2551317704493863, 1.2423762919612769, 1.2261538250476867, 1.2008834586025716, 1.2064825628002511, 1.1819079707343076, 1.1666521086842077, 1.153250865035006, 1.1468398238626596, 1.126808823768914, 1.121477380908633, 1.113669059406009, 1.1036054105680568, 1.107982326319126, 1.0927708524486817, 1.0767984161319009, 1.0711547734951221, 1.0750618872153146, 1.0497228934103235, 1.0453435497009333, 1.0455659026278323, 1.0310209322095374, 1.0261554071506758, 1.025940729406264, 1.0156837279975155, 1.008755629419446, 1.000207262630586, 1.0037161281489582, 0.9909663928372276, 0.9840957809984093, 0.9718109255437885, 0.9629888953770219, 0.965296779704242, 0.9671554816255732, 0.9527253168071061, 0.9468580393696095, 0.9456505550212077, 0.9418410316450154, 0.9362597805696975, 0.927594285694017, 0.9328650922712917, 0.9292306373100775, 0.9290388960407521, 0.9222636294087808, 0.9187647918148946, 0.9117523137573017, 0.9009887626016491], "accuracy": [0.09457138925790787, 0.11610091477632523, 0.13710209727287292, 0.14397041499614716, 0.16629242897033691, 0.17540615797042847, 0.20499274134635925, 0.2242768406867981, 0.23405098915100098, 0.2506934404373169, 0.26641130447387695, 0.2743362784385681, 0.2880729138851166, 0.31264033913612366, 0.31779158115386963, 0.3249240517616272, 0.3435477614402771, 0.3486989736557007, 0.3547748029232025, 0.37022849917411804, 0.3811914026737213, 0.40364548563957214, 0.3971734344959259, 0.4027208983898163, 0.401400089263916, 0.416589617729187, 0.4235900044441223, 0.4270241856575012, 0.4399682879447937, 0.431779146194458, 0.4468366205692291, 0.4527803361415863, 0.4649319648742676, 0.472989022731781, 0.46625280380249023, 0.4765552878379822, 0.48448026180267334, 0.4896314740180969, 0.4987452030181885, 0.5147272348403931, 0.507330596446991, 0.5241051316261292, 0.5248976349830627, 0.533350944519043, 0.5346717834472656, 0.5423325896263123, 0.5420684218406677, 0.5486725568771362, 0.5497292280197144, 0.5591071248054504, 0.5628054141998291, 0.5700700283050537, 0.5711266398429871, 0.5674283504486084, 0.5736362338066101, 0.5728437304496765, 0.59225994348526, 0.5807687044143677, 0.5860520601272583, 0.5919957756996155, 0.598599910736084, 0.5988640785217285, 0.6056002974510193, 0.6083740592002869, 0.6133931875228882, 0.617751955986023, 0.6140536069869995, 0.6209219098091125, 0.6193369626998901, 0.6229031682014465, 0.6276581883430481, 0.6312243938446045, 0.6296393871307373, 0.6358473300933838, 0.6373002529144287, 0.6345264911651611, 0.6424514651298523, 0.6390172839164734, 0.641791045665741, 0.6462818384170532, 0.6458855867385864, 0.6502443552017212, 0.6539427042007446, 0.6553955674171448, 0.6612072587013245, 0.6585655808448792, 0.6598864197731018, 0.6617355942726135, 0.6625280380249023, 0.6606789231300354, 0.6630563735961914, 0.6687359809875488, 0.6719059348106384, 0.6647734642028809, 0.6671509742736816, 0.6659622192382812, 0.6749438643455505, 0.6699247360229492, 0.6748117804527283, 0.6777176260948181], "val_loss": [1.9651511737278529, 1.9591060365949358, 1.9530715261186873, 1.9469564301627023, 1.9407274382455009, 1.9343127523149763, 1.9276739529200964, 1.9207469395228796, 1.9134586879185267, 1.9056973457336426, 1.8974648203168596, 1.8886572292872839, 1.879180567605155, 1.8688549314226424, 1.8576367923191615, 1.8455916813441686, 1.8323172160557337, 1.818094321659633, 1.802600383758545, 1.7859539985656738, 1.76789276940482, 1.7483350890023368, 1.7277917180742537, 1.705704927444458, 1.6821215833936418, 1.6569851807185583, 1.6303586619240897, 1.60219635282244, 1.5728464807782854, 1.5429270608084542, 1.5118047850472587, 1.480182681764875, 1.4475343567984444, 1.414562702178955, 1.38157742364066, 1.3490159511566162, 1.316331386566162, 1.2845252582005091, 1.253688165119716, 1.2231054306030273, 1.1943162509373255, 1.166775873729161, 1.139995506831578, 1.1144571985517229, 1.0908241953168596, 1.0682664598737444, 1.0468970366886683, 1.0270302636282784, 1.0077755451202393, 0.9899679592677525, 0.9732747759137835, 0.9570744037628174, 0.942429746900286, 0.9286844049181256, 0.9156077929905483, 0.9032369341169085, 0.8908723763057164, 0.8797542027064732, 0.8690259456634521, 0.8586618048804147, 0.8486201081957135, 0.8390614986419678, 0.8295245681490216, 0.8212878363473075, 0.8131710631506783, 0.8056303773607526, 0.7989500079836164, 0.7922676631382534, 0.7852151393890381, 0.7787640946252006, 0.7728673730577741, 0.7665914297103882, 0.7607361248561314, 0.7556821789060321, 0.7504055329731533, 0.7455459662846157, 0.7407168660845075, 0.7361821617398944, 0.7314663103648594, 0.727096438407898, 0.7232011216027396, 0.7188553810119629, 0.7150540692465646, 0.710908021245684, 0.7070298365184239, 0.7034177780151367, 0.7002123594284058, 0.6964577606746128, 0.6928916828972953, 0.6900071586881366, 0.6869394438607352, 0.6843283346721104, 0.6807687112263271, 0.6780685867582049, 0.6752337557928902, 0.6727763414382935, 0.6703791277749198, 0.6674743720463344, 0.6652379206248692, 0.6626227242606026], "val_accuracy": [0.07466666400432587, 0.1223333328962326, 0.17599999904632568, 0.23333333432674408, 0.2826666533946991, 0.31833332777023315, 0.34433332085609436, 0.3596666753292084, 0.37166666984558105, 0.3840000033378601, 0.39500001072883606, 0.40533334016799927, 0.41866666078567505, 0.42766666412353516, 0.43833333253860474, 0.44866666197776794, 0.4573333263397217, 0.4659999907016754, 0.47566667199134827, 0.492333322763443, 0.4983333349227905, 0.503333330154419, 0.5133333206176758, 0.5193333625793457, 0.531000018119812, 0.5383333563804626, 0.543666660785675, 0.550000011920929, 0.5556666851043701, 0.5603333115577698, 0.5669999718666077, 0.5716666579246521, 0.5773333311080933, 0.5786666870117188, 0.5826666951179504, 0.5843333601951599, 0.5926666855812073, 0.5946666598320007, 0.6013333201408386, 0.6053333282470703, 0.6150000095367432, 0.6190000176429749, 0.6276666522026062, 0.6320000290870667, 0.6396666765213013, 0.6453333497047424, 0.6496666669845581, 0.653333306312561, 0.6576666831970215, 0.6629999876022339, 0.6650000214576721, 0.6660000085830688, 0.6669999957084656, 0.6703333258628845, 0.6723333597183228, 0.6723333597183228, 0.6743333339691162, 0.6759999990463257, 0.6796666383743286, 0.6813333630561829, 0.6823333501815796, 0.6846666932106018, 0.6880000233650208, 0.6880000233650208, 0.687333345413208, 0.6909999847412109, 0.690666675567627, 0.6913333535194397, 0.6923333406448364, 0.6936666369438171, 0.6933333277702332, 0.6953333616256714, 0.6970000267028809, 0.6983333230018616, 0.6993333101272583, 0.6996666789054871, 0.7006666660308838, 0.7026666402816772, 0.7059999704360962, 0.7073333263397217, 0.7070000171661377, 0.7083333134651184, 0.7076666951179504, 0.7103333473205566, 0.7116666436195374, 0.7120000123977661, 0.7136666774749756, 0.7139999866485596, 0.7149999737739563, 0.7166666388511658, 0.7193333506584167, 0.7166666388511658, 0.722000002861023, 0.7206666469573975, 0.7213333249092102, 0.7223333120346069, 0.7239999771118164, 0.7243333458900452, 0.7260000109672546, 0.7253333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 4, 2, 2, 2, 1, 2, 0, 9, 8, 9], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.5137143135070801, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), beta), tf.math.add(beta, alpha))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.200290027594979, 1.9611311656388593, 1.352931498190069, 1.065232805021057, 1.2149722403413064, 1.3273657483038035, 1.3978531883219845, 1.851354715940959, 2.8505748372902375, 3.0371059865967913, 3.0997348080190292], "accuracy": [0.2743362784385681, 0.3339056968688965, 0.5342755317687988, 0.618280291557312, 0.6044115424156189, 0.5752212405204773, 0.5628054141998291, 0.4897635579109192, 0.27341169118881226, 0.13247919082641602, 0.11834631860256195], "val_loss": [1.9449550764901298, 1.2488586221422469, 0.7922442640577044, 0.7241014412471226, 0.9755993570600238, 0.8989285571234567, 0.944352422441755, 1.8809774262564523, 1.9304098401750838, 2.182150023324149, 2.3632097925458635], "val_accuracy": [0.2133333384990692, 0.5519999861717224, 0.6643333435058594, 0.6700000166893005, 0.6416666507720947, 0.6790000200271606, 0.5956666469573975, 0.4399999976158142, 0.2983333468437195, 0.16833333671092987, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 4, 3, 2, 0, 5, 2, 9, 8, 5, 8, 9], [3, 3, 0, 2, 3, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [86, 57]], "fitness": -0.21885713934898376, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.37123587304386, 2.9075770368035663, 2.305567514249252, 2.3032977061422195, 2.302963061591559, 2.302937587742572], "accuracy": [0.18636904656887054, 0.1570466309785843, 0.10011887550354004, 0.09628847241401672, 0.09893012791872025, 0.09311848133802414], "val_loss": [1.9283736773899622, 1.977560247693743, 1.974123750414167, 1.9736443247113908, 1.9736643518720354, 1.9736757959638322], "val_accuracy": [0.23466666042804718, 0.10366666316986084, 0.10366666316986084, 0.10199999809265137, 0.10199999809265137, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 2, 2, 1, 1, 8, 9, 2, 9], [2, 3, 0, 2, 3, 1, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 2, 2, 1, 1, 8, 9, 9, 9], [3, 0, 0, 2, 1, 1, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 16, 16, 8, 8, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), beta), alpha)), alpha))), tf.math.add(beta, grad))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 1, 8, 8, 8, 9], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [41, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 8, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [35, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.sqrt(beta)))))))), alpha), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 4, 3, 2, 0, 5, 2, 9, 8, 1, 8, 9], [3, 3, 0, 2, 3, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 53, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 9, 5, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(beta)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3034686867461116, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 5, 3, 8, 0, 5, 1, 9, 8, 5, 8, 9], [2, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 10, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, beta))))))))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07357019931077957, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 4, 3, 2, 2, 2, 1, 1, 8, 9, 2, 9], [3, 3, 0, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.negative(alpha), tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 4, 3, 2, 2, 2, 1, 1, 8, 9, 2, 9], [3, 3, 0, 2, 3, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 9, 9, 4, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0672302171587944, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 8, 3, 2, 0, 5, 2, 9, 8, 5, 2, 9], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 11, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))))))))), grad)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07357019931077957, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [2, 8, 2, 2, 2, 2, 1, 6, 6, 6, 1, 0, 2, 9, 7, 8], [1, 3, 1, 0, 2, 3, 3, 4, 0, 0, 4, 3, 5], [26, 6, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [84, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 16, 12, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha))))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [11.358145044432844, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17170783877372742, 0.09734513610601425, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.5518006597246443, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 0, 1, 8, 8, 8, 9], [2, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 10, 5, 0, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(beta)))), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(beta, grad))))), beta)), tf.math.sqrt(tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0672302171587944, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 1, 8, 8, 8, 9], [3, 3, 0, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302878283238792, 2.3008419053429514, 2.301811630573759, 2.3035450758888043, 2.3023821340182264, 2.3024229017687734], "accuracy": [0.08809932321310043, 0.0944393053650856, 0.09298639744520187, 0.08796724677085876, 0.09021265059709549, 0.08902391046285629], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 0, 0, 5, 1, 1, 8, 8, 8, 9], [3, 1, 0, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [50, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302878283238792, 2.3008419053429514, 2.301811630573759, 2.3035450758888043, 2.3023821340182264, 2.3024229017687734], "accuracy": [0.08809932321310043, 0.0944393053650856, 0.09298639744520187, 0.08796724677085876, 0.09021265059709549, 0.08902391046285629], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 2, 2, 1, 1, 8, 9, 5, 9], [2, 3, 0, 2, 3, 1, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [63, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302878283238792, 2.3008419053429514, 2.301811630573759, 2.3035450758888043, 2.3023821340182264, 2.3024229017687734], "accuracy": [0.08809932321310043, 0.0944393053650856, 0.09298639744520187, 0.08796724677085876, 0.09021265059709549, 0.08902391046285629], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]