[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 4, 9, 9, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 0, 2, 8, 1, 0, 5, 9], [1, 4, 3, 0, 3, 4], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.8091428279876709, "mapping_values": [1, 4, 4, 4, 0, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9704314345744118, 1.5055915355650882, 1.0567473403891994, 0.8670012447276939, 0.8193644686240278, 0.7846017588068229, 0.7165283466830875, 0.7108173113000895, 0.7074933512855467, 0.6569459583576345, 0.6541765748218475, 0.6425890505526438, 0.6113620883579881, 0.6235754073429826, 0.593174709486152, 0.5946171604772963, 0.5978719344889846, 0.5649779454245623, 0.55832920272384, 0.5394940031927338, 0.5348844491117556, 0.5281845658147624, 0.5238870328065662, 0.5230066950735934, 0.4980890621220699, 0.5170892815249172, 0.4952263924321636, 0.49324304290561627, 0.47755845134536334, 0.47362033658889874, 0.4676027976211666, 0.45507263570429546, 0.47588730877920493, 0.457825278865033, 0.44346165651532526, 0.4331644687276585, 0.43772850312876144, 0.43409544246827514, 0.4206875118604977, 0.4356731655315527, 0.42545760065620253, 0.4165131171318707, 0.4178859099751655, 0.4120309020801857, 0.3965682117277054, 0.4022397248027914, 0.39703550239233465, 0.3908984848159006, 0.37486034050326006, 0.3833739329614124, 0.3752604167238754, 0.3769413319836676, 0.3664999556594978, 0.36403388008937826, 0.3780491159867932, 0.36394327575850877, 0.35118718177036856, 0.35747279946546767], "accuracy": [0.342491090297699, 0.4955752193927765, 0.604939877986908, 0.6782459616661072, 0.6919825673103333, 0.6946242451667786, 0.7289658188819885, 0.7272487282752991, 0.7338528633117676, 0.752740740776062, 0.750759482383728, 0.757099449634552, 0.7730814814567566, 0.7637035846710205, 0.7765156626701355, 0.7716285586357117, 0.7755910754203796, 0.7824593782424927, 0.7935543656349182, 0.7946110367774963, 0.8014793395996094, 0.8034605979919434, 0.8045172095298767, 0.804649293422699, 0.8189142942428589, 0.8079513907432556, 0.8173292875289917, 0.816008448600769, 0.8224804997444153, 0.8255184292793274, 0.8280280232429504, 0.8308017253875732, 0.8248580098152161, 0.8327829837799072, 0.8376700282096863, 0.8383304476737976, 0.8378021121025085, 0.8426892161369324, 0.845859169960022, 0.8338396549224854, 0.8454629778862, 0.8492933511734009, 0.8442742228507996, 0.8477083444595337, 0.8510104417800903, 0.8496896028518677, 0.8552370667457581, 0.8574824929237366, 0.8585391640663147, 0.854708731174469, 0.8607845902442932, 0.8603883385658264, 0.8626337051391602, 0.8658037185668945, 0.8599920868873596, 0.8622375130653381, 0.8721436858177185, 0.8681812286376953], "val_loss": [1.6437335695539201, 0.8870783873966762, 0.7480334894997733, 0.7416635581425258, 0.6125541584832328, 0.577295184135437, 0.5658865485872541, 0.536672728402274, 0.5497239828109741, 0.575439487184797, 0.5124956539699009, 0.5082417215619769, 0.5327970470700946, 0.48335252489362446, 0.5310226678848267, 0.5338023560387748, 0.457048807825361, 0.4702520029885428, 0.46611489568437847, 0.4509208542960031, 0.4501740591866629, 0.42312091588974, 0.4403766223362514, 0.4430919885635376, 0.4470467482294355, 0.41841710465294973, 0.4256030661719186, 0.41679263966424124, 0.4208665745598929, 0.40758767298289705, 0.40602204629353117, 0.40992796421051025, 0.3949887326785496, 0.38156655005046297, 0.41629635436194284, 0.4095331685883658, 0.4003798706190927, 0.37202450207301546, 0.3682670678411211, 0.3780407564980643, 0.3691164936338152, 0.36246483666556223, 0.3873732600893293, 0.3630687764712742, 0.40203188146863666, 0.3559058393750872, 0.3533878667013986, 0.3566851445606777, 0.3832246831485203, 0.3682716488838196, 0.3647308775356838, 0.36502095631190706, 0.3458039164543152, 0.3781233174460275, 0.3813656398228237, 0.347612236227308, 0.35367188283375334, 0.3545086809567043], "val_accuracy": [0.437666654586792, 0.6393333077430725, 0.6856666803359985, 0.6543333530426025, 0.7310000061988831, 0.7329999804496765, 0.750333309173584, 0.7666666507720947, 0.765333354473114, 0.7226666808128357, 0.7720000147819519, 0.7770000100135803, 0.7509999871253967, 0.7910000085830688, 0.7473333477973938, 0.7516666650772095, 0.796999990940094, 0.7883333563804626, 0.7910000085830688, 0.8043333292007446, 0.8026666641235352, 0.8159999847412109, 0.8040000200271606, 0.8003333210945129, 0.8050000071525574, 0.8180000185966492, 0.812666654586792, 0.8166666626930237, 0.8106666803359985, 0.8196666836738586, 0.8233333230018616, 0.8223333358764648, 0.8209999799728394, 0.8320000171661377, 0.8180000185966492, 0.8233333230018616, 0.8233333230018616, 0.8379999995231628, 0.8393333554267883, 0.8316666483879089, 0.8349999785423279, 0.8433333039283752, 0.8306666612625122, 0.8393333554267883, 0.828000009059906, 0.8423333168029785, 0.843666672706604, 0.847000002861023, 0.8339999914169312, 0.8366666436195374, 0.8373333215713501, 0.8366666436195374, 0.8489999771118164, 0.8346666693687439, 0.8330000042915344, 0.8450000286102295, 0.8456666469573975, 0.8423333168029785]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3, 0], [45, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.8014285564422607, "mapping_values": [1, 6, 6, 3, 3, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(grad, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.008844184192133, 1.4144947245419852, 1.0610651268447002, 0.941475061574522, 0.8346796806273349, 0.7752452204885925, 0.7584336911052714, 0.7080611944151372, 0.7135468511344608, 0.6731409127402693, 0.6641888388427273, 0.6344037174060596, 0.6199271275367026, 0.6237649052937616, 0.6006359156679247, 0.6039674629971116, 0.6089343493798185, 0.5842099931529484, 0.5681633316467561, 0.5462558205259034, 0.5509666742004377, 0.534572554995056, 0.5406589987350099, 0.5276192401134422, 0.5180785244072685], "accuracy": [0.337339848279953, 0.5130101442337036, 0.6133931875228882, 0.6546030640602112, 0.6845859289169312, 0.7033417224884033, 0.7132478952407837, 0.7318716049194336, 0.7288337349891663, 0.7441553473472595, 0.7441553473472595, 0.7637035846710205, 0.7680623531341553, 0.7602694630622864, 0.7755910754203796, 0.7689869403839111, 0.7716285586357117, 0.7792893648147583, 0.7884030938148499, 0.7918372750282288, 0.7938185334205627, 0.8012151718139648, 0.7984414100646973, 0.8072909712791443, 0.8084797263145447], "val_loss": [1.30294326373509, 0.9294248649052211, 0.8524710961750576, 0.6474452529634748, 0.6174104043415615, 0.5994959218161446, 0.5752170937401908, 0.547687155859811, 0.5584601163864136, 0.5596615076065063, 0.51104017666408, 0.5141243253435407, 0.5445774453026908, 0.4861480678830828, 0.5321627174104963, 0.5416022028241839, 0.4627906084060669, 0.4776699883597238, 0.4526458127158029, 0.4510692698614938, 0.45590581212724957, 0.4477360078266689, 0.4403855460030692, 0.46840761389051166, 0.43701169320515226], "val_accuracy": [0.4819999933242798, 0.6003333330154419, 0.6656666398048401, 0.7046666741371155, 0.7369999885559082, 0.7323333621025085, 0.753000020980835, 0.7573333382606506, 0.7609999775886536, 0.7306666374206543, 0.7820000052452087, 0.781000018119812, 0.746666669845581, 0.7866666913032532, 0.75, 0.7450000047683716, 0.7979999780654907, 0.7853333353996277, 0.8056666851043701, 0.8073333501815796, 0.8016666769981384, 0.79666668176651, 0.8053333163261414, 0.7876666784286499, 0.8036666512489319]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 8, 5, 5, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [8, 0, 2, 8, 2, 0, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.7951428294181824, "mapping_values": [1, 11, 11, 7, 4, 0, 8, 8, 5, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.square(alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0282198515991414, 1.3729829613747708, 1.0719869214593143, 0.9527196445091605, 0.8276094363633557, 0.7746349145565933, 0.7640996527095528, 0.714074426559551, 0.708932278572277, 0.6840744649241267, 0.6730935717491883, 0.6417853886803081, 0.6386177094306109, 0.6389044861846424, 0.6098647145169396, 0.6043028857619488, 0.5979480222546587, 0.585891286198804, 0.5707733126254114, 0.5737608838878083, 0.5568653124316556], "accuracy": [0.33166027069091797, 0.5237088799476624, 0.6107515692710876, 0.6635847091674805, 0.6931713223457336, 0.7140403985977173, 0.7143045663833618, 0.7347774505615234, 0.7326641082763672, 0.7392682433128357, 0.7421740889549255, 0.7631752490997314, 0.7617223858833313, 0.7540615797042847, 0.7691190242767334, 0.7757231593132019, 0.7737419009208679, 0.7718927264213562, 0.7903843522071838, 0.7816668748855591, 0.7996301651000977], "val_loss": [1.222832202911377, 0.9050819192613874, 0.9994121619633266, 0.6567343984331403, 0.6195852586201259, 0.5948984963553292, 0.6166570697511945, 0.5433755602155413, 0.5298267262322562, 0.5146309988839286, 0.5383595057896206, 0.5014574868338448, 0.5083543402808053, 0.4717057432447161, 0.4671720436641148, 0.4703819070543562, 0.5275438002177647, 0.46753651755196707, 0.4889333929334368, 0.4662028040204729, 0.4664417675563267], "val_accuracy": [0.47699999809265137, 0.6066666841506958, 0.5929999947547913, 0.6923333406448364, 0.7266666889190674, 0.7246666550636292, 0.7166666388511658, 0.7583333253860474, 0.7683333158493042, 0.7689999938011169, 0.7609999775886536, 0.7699999809265137, 0.765333354473114, 0.7853333353996277, 0.7926666736602783, 0.7940000295639038, 0.7429999709129333, 0.7776666879653931, 0.7773333191871643, 0.7873333096504211, 0.7850000262260437]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [0, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 2, 0, 2, 7, 5, 5, 9], [4, 4, 3, 0, 3], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.7948571443557739, "mapping_values": [1, 2, 2, 1, 1, 1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.square(grad))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9706108451850064, 1.4746551462341497, 1.0254896620025, 0.9060179924511435, 0.8463963152804568, 0.7964124186494647, 0.7707277113940061, 0.7188552206832625, 0.6998371590854406, 0.694158096669955, 0.6682828397971922, 0.6449774609360287, 0.6316174409723616, 0.632368593947479, 0.6059578041185745, 0.6168839656335173, 0.5879035343772401, 0.5792292463560587, 0.5658157532871076], "accuracy": [0.34922730922698975, 0.4931977391242981, 0.6297714710235596, 0.6671509742736816, 0.6848500967025757, 0.7025492191314697, 0.707040011882782, 0.7290979027748108, 0.7309470176696777, 0.7375511527061462, 0.7490423917770386, 0.7606657147407532, 0.7640998363494873, 0.7638356685638428, 0.7724210619926453, 0.769911527633667, 0.7766477465629578, 0.7771760821342468, 0.7915731072425842], "val_loss": [1.486825908933367, 0.8585049084254673, 0.8451836279460362, 0.6274398054395404, 0.6654102972575596, 0.6043774911335537, 0.5952605349676949, 0.5730431931359428, 0.5499176979064941, 0.5457270996911185, 0.5523437261581421, 0.5034436498369489, 0.4930152041571481, 0.4649740287235805, 0.4952589273452759, 0.48774746486118864, 0.496793406350272, 0.45987708227975027, 0.48237190927777973], "val_accuracy": [0.4233333468437195, 0.6823333501815796, 0.6589999794960022, 0.7176666855812073, 0.6856666803359985, 0.722000002861023, 0.7266666889190674, 0.7306666374206543, 0.7490000128746033, 0.737666666507721, 0.7440000176429749, 0.7596666812896729, 0.7739999890327454, 0.7933333516120911, 0.7666666507720947, 0.7760000228881836, 0.7630000114440918, 0.7816666960716248, 0.7733333110809326]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 5, 9, 8, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 0, 1, 1, 2, 5, 6, 9], [0, 4, 3, 2, 1], [45, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [1, 57]], "fitness": -0.10514285415410995, "mapping_values": [1, 6, 6, 3, 3, 1, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3027508381949504, 2.3039131886325164, 2.3022092133150314, 2.3036128138790453, 2.3017485092313237, 2.3033937462852174, 2.3035814428940395, 2.302783819599678, 2.3018822314764105, 2.3004929072128517, 2.300885652680171, 2.3012840442370273, 2.3016535302100323, 2.303289420600612, 2.299964528656308, 2.300817987276752, 2.30042330999227, 2.2999381164691357, 2.2998616564086465, 2.300973130129017, 2.3003378801216083, 2.2991648878262043, 2.3016021096112786, 2.2985769710394655, 2.3007318589665617, 2.299737132819038, 2.298535211101074, 2.3001585893816148, 2.3000797695723727, 2.299078939077861, 2.2991269240053716, 2.2992093553002704, 2.2983270284128445, 2.299082107358778, 2.299537178421726, 2.2999827484838273, 2.2992735752072457, 2.2986424726313133, 2.2986602368781184, 2.297193593132403, 2.298166546980939, 2.2977308603782287, 2.2974234262493387, 2.2980503018789475, 2.2983954791710315, 2.297541972778697, 2.296892709452415, 2.296820920928594, 2.2977144051190175, 2.2980447671101976, 2.296719196025076, 2.295855758999789, 2.2973192415815604, 2.295279235950692, 2.2973543783582637, 2.296698550475099, 2.297363236595721, 2.297032265473571, 2.294880530869153, 2.2960220719719007, 2.2955514101099737, 2.29592374920168, 2.2966000352632006, 2.2953899051251585, 2.294974556090164, 2.2961492493105067, 2.295598250653498, 2.2955914760514524, 2.295343402606338, 2.2934529883372488, 2.2934930904304283, 2.294198158001147, 2.2932837537219575, 2.2935904592744047, 2.2950260344119733, 2.293430892625395, 2.294649435119417, 2.293181122758558, 2.293868350063128, 2.293324508277763, 2.2934605021282133, 2.292521016157818, 2.2918687449029376, 2.2917880027553332, 2.2933022039063524, 2.2921122830100833, 2.293177466618623, 2.2914613615551707, 2.29234200228695, 2.2913270768488183, 2.2920045186625875, 2.290334480408082, 2.2925663444391566, 2.2923636515819794, 2.291706711719096, 2.291927562051556, 2.290555478150047, 2.2914040109122733, 2.2920449235420093, 2.2919848126789457], "accuracy": [0.09008057415485382, 0.09166556596755981, 0.09047681838274002, 0.08730682730674744, 0.08757099509239197, 0.08281600475311279, 0.0866464152932167, 0.09628847241401672, 0.09496764093637466, 0.09959053993225098, 0.10011887550354004, 0.09034473448991776, 0.0874389111995697, 0.08717474341392517, 0.0936468094587326, 0.09047681838274002, 0.09655263274908066, 0.10051512718200684, 0.09972262382507324, 0.09417514503002167, 0.0940430611371994, 0.09826971590518951, 0.09681680053472519, 0.09549596905708313, 0.09708096832036972, 0.09694888442754745, 0.10276053100824356, 0.09985470771789551, 0.10157178342342377, 0.09787346422672272, 0.10196803510189056, 0.09800554811954498, 0.09998679161071777, 0.09734513610601425, 0.10698718577623367, 0.09959053993225098, 0.1002509593963623, 0.09826971590518951, 0.09298639744520187, 0.10328886657953262, 0.09945846349000931, 0.10276053100824356, 0.09985470771789551, 0.10157178342342377, 0.09959053993225098, 0.1022322028875351, 0.10606260597705841, 0.09866596013307571, 0.10632677376270294, 0.09840179979801178, 0.10408136248588562, 0.10606260597705841, 0.10236428678035736, 0.10962884873151779, 0.09919429570436478, 0.109232597053051, 0.0952318087220192, 0.10434553027153015, 0.11028926074504852, 0.10434553027153015, 0.10606260597705841, 0.10817593336105347, 0.10553427785634995, 0.10857218503952026, 0.1088363528251648, 0.10685510188341141, 0.11227050423622131, 0.10421344637870789, 0.11279883980751038, 0.11398758739233017, 0.10936468094587326, 0.10791176557540894, 0.11438383162021637, 0.11557257920503616, 0.11200633645057678, 0.11121384054422379, 0.11319508403539658, 0.11213842034339905, 0.10936468094587326, 0.10962884873151779, 0.11715757846832275, 0.11596883088350296, 0.120459645986557, 0.12072381377220154, 0.10936468094587326, 0.1146479994058609, 0.11596883088350296, 0.11411966383457184, 0.11847840249538422, 0.11781799048185349, 0.11808215826749802, 0.12296922504901886, 0.11491216719150543, 0.11821424216032028, 0.11940298229455948, 0.11372341960668564, 0.12178047746419907, 0.11662924289703369, 0.11728965491056442, 0.11861048638820648], "val_loss": [1.971123218536377, 1.9710148402622767, 1.9709055764334542, 1.9707965850830078, 1.9706886836460658, 1.9705801691327776, 1.9704725401742118, 1.9703639575413294, 1.9702555792672294, 1.9701480184282576, 1.9700401169913155, 1.9699324880327498, 1.9698247909545898, 1.969717298235212, 1.969608919961112, 1.96950101852417, 1.9693925040108817, 1.9692842619759696, 1.9691779272896903, 1.9690696171351842, 1.9689619881766183, 1.968855925968715, 1.9687483651297433, 1.9686412130083357, 1.96853392464774, 1.968426023210798, 1.9683190073285783, 1.9682111058916365, 1.9681031363351005, 1.9679953030177526, 1.967888627733503, 1.9677812712533134, 1.9676730292184013, 1.9675658089773995, 1.9674583162580217, 1.9673503467014857, 1.9672440120152064, 1.9671357018607003, 1.9670289584568568, 1.966921261378697, 1.9668143817356654, 1.9667081832885742, 1.9666004862104143, 1.9664932659694128, 1.966386181967599, 1.9662797791617257, 1.9661731719970703, 1.9660675866263253, 1.9659598895481654, 1.965853009905134, 1.965747628893171, 1.9656409536089217, 1.965533937726702, 1.9654274668012346, 1.9653220857892717, 1.965215069907052, 1.965109075818743, 1.965003831045968, 1.964897768838065, 1.9647900036403112, 1.9646844182695662, 1.964578287942069, 1.9644725663321358, 1.9643652779715401, 1.9642604419163294, 1.9641544478280204, 1.9640484537397112, 1.9639414378574915, 1.9638346944536482, 1.963728427886963, 1.963620935167585, 1.9635142598833357, 1.9634086063929967, 1.963301386151995, 1.9631962094988142, 1.9630898066929408, 1.9629834038870675, 1.962876796722412, 1.9627699170793806, 1.9626634461539132, 1.9625571795872279, 1.9624501637050085, 1.962343965257917, 1.9622385161263602, 1.962132453918457, 1.9620254380362374, 1.9619189671107702, 1.9618119512285506, 1.9617058209010534, 1.9616005761282784, 1.9614935602460588, 1.9613870212009974, 1.9612810271126884, 1.9611749649047852, 1.9610704694475447, 1.9609642028808594, 1.9608586856297083, 1.9607531683785575, 1.9606469018118722, 1.960540839603969], "val_accuracy": [0.0403333343565464, 0.04066666588187218, 0.04233333468437195, 0.043666668236255646, 0.044333335012197495, 0.04466666653752327, 0.04533333331346512, 0.045666664838790894, 0.04633333161473274, 0.04766666516661644, 0.04800000041723251, 0.04899999871850014, 0.050999999046325684, 0.050999999046325684, 0.050999999046325684, 0.05166666582226753, 0.052000001072883606, 0.052666667848825455, 0.05366666615009308, 0.05400000140070915, 0.05433333292603493, 0.054666668176651, 0.0560000017285347, 0.05666666850447655, 0.05700000002980232, 0.057999998331069946, 0.05833333358168602, 0.058666665107011795, 0.05999999865889549, 0.06133333221077919, 0.06133333221077919, 0.061666667461395264, 0.061666667461395264, 0.06133333221077919, 0.06199999898672104, 0.06233333423733711, 0.06266666948795319, 0.06366666406393051, 0.06366666406393051, 0.06433333456516266, 0.06466666609048843, 0.06466666609048843, 0.06499999761581421, 0.06533333659172058, 0.06533333659172058, 0.06700000166893005, 0.06733333319425583, 0.06833333522081375, 0.06933332979679108, 0.07100000232458115, 0.0716666653752327, 0.07233333587646484, 0.0729999989271164, 0.0729999989271164, 0.07366666942834854, 0.07533333450555801, 0.07566666603088379, 0.07599999755620956, 0.07733333110809326, 0.07833333313465118, 0.07966666668653488, 0.08100000023841858, 0.0820000022649765, 0.08299999684095383, 0.0833333358168602, 0.0846666693687439, 0.0860000029206276, 0.08633333444595337, 0.08699999749660492, 0.08699999749660492, 0.08799999952316284, 0.08866667002439499, 0.08900000154972076, 0.09000000357627869, 0.09066666662693024, 0.09133332967758179, 0.09166666865348816, 0.09200000017881393, 0.09233333170413971, 0.09233333170413971, 0.09399999678134918, 0.09399999678134918, 0.09466666728258133, 0.0949999988079071, 0.09566666930913925, 0.0963333323597908, 0.09666666388511658, 0.09733333438634872, 0.09799999743700027, 0.09866666793823242, 0.10000000149011612, 0.10100000351667404, 0.10166666656732559, 0.10300000011920929, 0.10433333367109299, 0.1066666692495346, 0.10766666382551193, 0.10866666585206985, 0.10966666787862778, 0.11033333092927933]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [3, 4, 5, 6, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 1, 3, 5, 1, 0, 0, 7, 8, 7, 2, 1, 8, 8, 2, 9, 3, 1, 8, 0, 5, 9], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 0, 0, 0, 2, 3, 1, 2, 0, 1, 3], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93, 41, 66, 84, 12, 69], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 4, 7, 8, 4], [1, 2, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 79, 79, 50, 29, 15, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad)))), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), grad))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(alpha, grad)))))), tf.math.subtract(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), alpha)))), grad)))), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [24, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 0, 4, 7, 8, 4], [3, 1, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 12, 7, 5, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(sigma), tf.math.pow(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [89, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [5, 4, 2, 8, 7, 0, 5, 9], [5, 4, 3, 0], [45, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 11, 11, 7, 4, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, alpha)), tf.math.square(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.square(tf.math.add(beta, grad))), grad))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0870426595211029, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [67, 27, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 9, 7, 5, 7, 2, 5, 4], [4, 4, 3, 0, 0], [56, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [0, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [23, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 13, 13, 8, 5, 3, 1, 1, 0, 1, 1, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3029513521248623, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 9, 5, 0, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 4, 2, 8, 9, 4, 5, 9], [0, 2, 3, 0, 3, 4], [29, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 2, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 7, 4, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), grad)))))))), lambda shape,  alpha, beta, grad: tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.359264261986145, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.046229030936956406, 0.07858935743570328, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.392078535897391, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.00800000037997961, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 2, 9, 3, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [6, 4, 2, 8, 7, 9, 5, 9], [0, 4, 3, 0, 3, 4], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 3, 0, 1, 3, 3], [77, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.303370620942686, 2.3063334620403593, 2.3068249957153055, 2.310902402196594, 2.3122062854416665, 2.318681798575183, 2.323542109632914, 2.327896345056925, 2.3364152043896453, 2.347972138588376, 2.41291317979437, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0886276587843895, 0.09021265059709549, 0.08519349992275238, 0.07845727354288101, 0.07806102186441422, 0.07330603897571564, 0.07251353561878204, 0.07396645098924637, 0.07409853488206863, 0.0804385170340538, 0.08083476126194, 0.09760929644107819, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9722742353166853, 1.973766599382673, 1.9753693171909876, 1.9774492127554757, 1.9798643929617745, 1.9829186711992537, 1.9861457688467843, 1.990560463496617, 1.9980385644095284, 2.0147861753191267, 2.289269174848284, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03333333507180214, 0.026333333924412727, 0.026333333924412727, 0.024666666984558105, 0.03099999949336052, 0.03700000047683716, 0.050333332270383835, 0.06499999761581421, 0.08666666597127914, 0.09933333098888397, 0.09933333098888397, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 9, 8, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 0, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [0, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 9, 1, 1, 2, 5, 6, 9], [4, 4, 3, 3, 0], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 4, 7, 8, 4], [3, 3, 0, 1, 3, 3], [22, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1430458277463913, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 6, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 3, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [67, 27, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3, 0], [74, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3920932.3256440954, 77850928.87280412, 358323889.8745212, 994041496.565315, 2141447076.1294413, 3916990175.640734], "accuracy": [0.1014397069811821, 0.10302469879388809, 0.09417514503002167, 0.09893012791872025, 0.09800554811954498, 0.09694888442754745], "val_loss": [15515964.57142857, 123872928.0, 417787931.4285714, 989980818.2857143, 1933167104.0, 3340061549.714286], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 1, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [4, 1, 3, 0, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 0, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 0, 2, 9, 3, 0, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(grad, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12930920720100403, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 9, 1, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 9, 1, 1, 2, 5, 6, 9], [0, 4, 3, 2], [45, 31, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [7, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 4, 7, 8, 4], [3, 1, 0, 1, 3, 3], [42, 57]], "fitness": -0.09628571569919586, "mapping_values": [1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.6301316829200716, 2.306453743693914, 2.303794478507263, 2.303258352086938, 2.3032877649282812, 2.303094234039534, 2.3030363286191826], "accuracy": [0.16695284843444824, 0.09972262382507324, 0.08638224750757217, 0.09813763201236725, 0.09589222073554993, 0.09430722147226334, 0.09589222073554993], "val_loss": [1.9788470949445451, 1.9747259276253837, 1.973907402583531, 1.9737273624965124, 1.9737161227634974, 1.9737534523010254, 1.9736661911010742], "val_accuracy": [0.09833333641290665, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.09966666996479034, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 8, 5, 5, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [8, 0, 2, 8, 2, 0, 5, 9], [0, 3, 3, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.09600000083446503, "mapping_values": [1, 9, 9, 6, 3, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(alpha))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.6301262034810593, 2.30645374816564, 2.303794447016234, 2.3032583835779668, 2.3032877649282812, 2.303094234039534, 2.3030397123302278], "accuracy": [0.16695284843444824, 0.09972262382507324, 0.08638224750757217, 0.09813763201236725, 0.09589222073554993, 0.09430722147226334, 0.0956280529499054], "val_loss": [1.9788469587053572, 1.9747257232666016, 1.9739072663443429, 1.9737272943769182, 1.9737159865243095, 1.9737536566598075, 1.9736554963248116], "val_accuracy": [0.09833333641290665, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.09966666996479034, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [80, 27, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 1], [3, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [24, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 5, 5, 3, 2, 1, 3, 3, 2, 1, 2, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302799890983248, 2.3040804387146627, 2.3024963919418266, 2.3040192510788513, 2.3022705549734646, 2.3040344730234104], "accuracy": [0.09008057415485382, 0.09126931428909302, 0.09008057415485382, 0.08638224750757217, 0.08625016361474991, 0.0816272646188736], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 2, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3, 0], [45, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [95, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 8, 8, 5, 3, 1, 2, 2, 2, 0, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302799890983248, 2.3040804387146627, 2.3024963919418266, 2.3040192510788513, 2.3022705549734646, 2.3040344730234104], "accuracy": [0.09008057415485382, 0.09126931428909302, 0.09008057415485382, 0.08638224750757217, 0.08625016361474991, 0.0816272646188736], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 0, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [2, 0, 0, 2, 7, 5, 5, 9], [5, 4, 3, 0, 0], [45, 48, 19], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 8, 3, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.square(grad)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302799890983248, 2.3040804387146627, 2.3024963919418266, 2.3040192510788513, 2.3022705549734646, 2.3040344730234104], "accuracy": [0.09008057415485382, 0.09126931428909302, 0.09008057415485382, 0.08638224750757217, 0.08625016361474991, 0.0816272646188736], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]