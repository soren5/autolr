[{"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 7, 5, 5, 9], [0, 4, 3, 0, 3], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.7831428647041321, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), grad), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9689526598703246, 1.5062649247511235, 1.0473583214916904, 0.8868451130672012, 0.8360874489345381, 0.7920928802535582, 0.7640982647267126, 0.707632060245264, 0.6969615551443179, 0.6582959612535999, 0.6621777188303983, 0.6495675965779493, 0.6342940850264801, 0.625192710208918], "accuracy": [0.342491090297699, 0.4881785809993744, 0.6308281421661377, 0.6671509742736816, 0.6884163022041321, 0.6950204968452454, 0.7014925479888916, 0.7353057861328125, 0.7326641082763672, 0.7460044622421265, 0.7382115721702576, 0.7469290494918823, 0.7553823590278625, 0.7500990629196167], "val_loss": [1.6965619836534773, 1.075472252709525, 0.7411550964627948, 0.7578509364809308, 0.7289502450398037, 0.5811704397201538, 0.5924135616847447, 0.5648508071899414, 0.5283440181187221, 0.5409612825938633, 0.5268172877175468, 0.5228655338287354, 0.5589487041745868, 0.5327200889587402], "val_accuracy": [0.429666668176651, 0.5543333292007446, 0.6426666378974915, 0.6700000166893005, 0.6503333449363708, 0.7419999837875366, 0.737666666507721, 0.7586666941642761, 0.7703333497047424, 0.7296666502952576, 0.7573333382606506, 0.7609999775886536, 0.7383333444595337, 0.7456666827201843]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 4, 9, 9, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 0, 2, 8, 1, 0, 5, 9], [1, 4, 3, 0, 3, 4], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.7788571715354919, "mapping_values": [1, 4, 4, 4, 0, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9690265052306921, 1.5069067906615379, 1.0473777963311808, 0.8863596301257666, 0.8294614234604871, 0.7867739280343071, 0.7527295760411817, 0.710270179749291, 0.6969890363968091, 0.6615133618776273, 0.6607057049510312, 0.6455006948504324, 0.6408764589905125, 0.6270401775010305], "accuracy": [0.3423590064048767, 0.48751816153526306, 0.632941484451294, 0.6691322326660156, 0.6866992712020874, 0.6963412761688232, 0.7051908373832703, 0.7292299270629883, 0.7339849472045898, 0.746268630027771, 0.7440232634544373, 0.752212405204773, 0.7474573850631714, 0.7504953145980835], "val_loss": [1.696937118257795, 1.078357730593, 0.7501079865864345, 0.7309615101133075, 0.6774172612598964, 0.6122418131147113, 0.5919763360704694, 0.6013600826263428, 0.5307962383542743, 0.5173527683530535, 0.5179687568119594, 0.5353672504425049, 0.577611003603254, 0.5327609607151577], "val_accuracy": [0.42899999022483826, 0.5550000071525574, 0.6416666507720947, 0.6800000071525574, 0.6856666803359985, 0.734333336353302, 0.7363333106040955, 0.7089999914169312, 0.7680000066757202, 0.7609999775886536, 0.7646666765213013, 0.7546666860580444, 0.7223333120346069, 0.7476666569709778]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 6, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3, 0], [45, 0, 19], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.7122856974601746, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9220778530835319, 1.2533909385277688, 0.910218139397643, 0.7737194607050317, 0.7104122138782311, 0.6842456526681338, 0.6526948586824689, 0.7328764482212734, 0.7215122164767952, 0.7026742100400727, 0.7625095414101345], "accuracy": [0.36903974413871765, 0.5605600476264954, 0.6565843224525452, 0.7150970697402954, 0.7277770638465881, 0.7424382567405701, 0.7481178045272827, 0.735569953918457, 0.7434949278831482, 0.7308149337768555, 0.7279091477394104], "val_loss": [1.0251211098262243, 0.7219604253768921, 0.5950723205293927, 0.5620602539607457, 0.5378828389304025, 0.5151666913713727, 0.6453098739896502, 0.5906221696308681, 0.5034372125353131, 0.5483600071498326, 0.5775461537497384], "val_accuracy": [0.57833331823349, 0.6623333096504211, 0.734333336353302, 0.7403333187103271, 0.7646666765213013, 0.7903333306312561, 0.7786666750907898, 0.7713333368301392, 0.7749999761581421, 0.7720000147819519, 0.7733333110809326]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 3, 5, 8, 5, 5, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [8, 0, 2, 8, 2, 0, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [1, 57]], "fitness": -0.10514285415410995, "mapping_values": [1, 11, 11, 7, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(tf.math.square(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, grad)))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303155675367074, 2.3025820609868526, 2.3039967747034416, 2.3025575428590987, 2.3017576741914016, 2.302493881256573, 2.302708683548004, 2.302645777226313, 2.3024307020336265, 2.3020863461535384, 2.3021037359720116, 2.302470597104783, 2.3028728570826003, 2.3028903289981852, 2.3010992934564953, 2.3007569510812975, 2.3022379459816436, 2.3002816135258866, 2.300913681459307, 2.300810586916473, 2.299947813029271, 2.299888595850114, 2.3018762716102623, 2.2991043789165366, 2.299809840345553, 2.3004693583789644, 2.2994824219153087, 2.299084338403696, 2.2994404477434482, 2.299559028629519, 2.300350419534369, 2.298875292514876, 2.2991897311618126, 2.30058724243155, 2.298569879354251, 2.2984755258077736, 2.2982777882844165, 2.2982650191760916, 2.299026660443045, 2.297691518604448, 2.299026614403161, 2.2983594774932214, 2.2981598475794702, 2.2977901936018266, 2.2989572410837944, 2.296488437985133, 2.2968623618628636, 2.2968569009405764, 2.2973141962463797, 2.298043109327968, 2.2953855540726904, 2.299034593442585, 2.296475923418794, 2.2961574748302134, 2.2966786399257337, 2.296509307026942, 2.2974540860094588, 2.297944954971769, 2.295219284936091, 2.295113193486518, 2.2961636187614247, 2.2940555086162315, 2.2945633254834075, 2.2944444984949466, 2.2950663368825697, 2.2959448115984054, 2.294061476512592, 2.2942033874328818, 2.294753361056903, 2.294931699382221, 2.294995832373957, 2.293861072895754, 2.2931323957764445, 2.2929495441253867, 2.293192360048769, 2.294689578276899, 2.2939463795735113, 2.2934445391367646, 2.293252698906881, 2.29305763314539, 2.292875873445756, 2.2921829273703547, 2.2928634986051115, 2.292242850798815, 2.292275729007441, 2.2933261361750064, 2.2923078676177653, 2.2960293991470286, 2.291663464207486, 2.292797980795384, 2.292604760282217, 2.293125708152621, 2.291288214085077, 2.2918821627579473, 2.292278304154831, 2.291429654592379, 2.2918808376784368, 2.2916464548636233, 2.290429211626467, 2.2910714525792892], "accuracy": [0.09060890227556229, 0.0874389111995697, 0.08875974267721176, 0.08928807079792023, 0.09100515395402908, 0.09391097724437714, 0.09206181764602661, 0.09430722147226334, 0.09021265059709549, 0.09826971590518951, 0.09232597798109055, 0.09100515395402908, 0.08928807079792023, 0.09179764986038208, 0.09338264167308807, 0.09536388516426086, 0.09113723784685135, 0.09800554811954498, 0.09589222073554993, 0.09087307006120682, 0.09760929644107819, 0.10447761416435242, 0.09338264167308807, 0.09747721254825592, 0.09708096832036972, 0.09919429570436478, 0.09893012791872025, 0.09681680053472519, 0.09959053993225098, 0.09972262382507324, 0.09985470771789551, 0.1026284471154213, 0.09734513610601425, 0.09774138033390045, 0.10091137140989304, 0.09893012791872025, 0.1010434553027153, 0.10170386731624603, 0.10276053100824356, 0.10513802617788315, 0.10342095047235489, 0.09655263274908066, 0.10500594228506088, 0.10328886657953262, 0.1018359512090683, 0.09932637959718704, 0.10289261490106583, 0.10394927859306335, 0.1026284471154213, 0.09826971590518951, 0.10342095047235489, 0.09959053993225098, 0.10170386731624603, 0.10619468986988068, 0.10487385839223862, 0.1026284471154213, 0.10328886657953262, 0.10249637067317963, 0.11174217611551285, 0.10685510188341141, 0.10685510188341141, 0.11610091477632523, 0.10976093262434006, 0.11372341960668564, 0.10896842926740646, 0.11042134463787079, 0.11094967275857925, 0.10540219396352768, 0.108440101146698, 0.10870426893234253, 0.11108175665140152, 0.10870426893234253, 0.1138555034995079, 0.11676132678985596, 0.11372341960668564, 0.11042134463787079, 0.11161009222269058, 0.11213842034339905, 0.11028926074504852, 0.12336547672748566, 0.12032756209373474, 0.11187426000833511, 0.11570466309785843, 0.11372341960668564, 0.11715757846832275, 0.11636507511138916, 0.11702549457550049, 0.11161009222269058, 0.1150442510843277, 0.11662924289703369, 0.11319508403539658, 0.11108175665140152, 0.1208558976650238, 0.11715757846832275, 0.11966715008020401, 0.12389380484819412, 0.11332716792821884, 0.11636507511138916, 0.11966715008020401, 0.11993131786584854], "val_loss": [1.9711228098188127, 1.971015180860247, 1.9709067344665527, 1.9707989692687988, 1.9706905909946986, 1.9705824170793806, 1.9704746518816267, 1.9703664098467146, 1.9702574866158622, 1.97014924458095, 1.9700401169913155, 1.9699323517935616, 1.9698256765093123, 1.9697162764413017, 1.969608919961112, 1.9694998604910714, 1.9693919590541296, 1.9692833764212472, 1.9691755431038993, 1.9690673691885812, 1.9689579010009766, 1.9688504082815987, 1.9687420981270927, 1.9686336517333984, 1.9685256821768624, 1.9684192793709892, 1.968311377934047, 1.9682037489754813, 1.968095370701381, 1.9679882185799735, 1.9678801809038435, 1.967773165021624, 1.9676646505083357, 1.96755736214774, 1.9674500056675501, 1.9673423085893904, 1.967236110142299, 1.9671292986188615, 1.9670226914542062, 1.9669153349740165, 1.9668083190917969, 1.9667016438075475, 1.9665945598057337, 1.9664880207606725, 1.966381209237235, 1.9662750789097376, 1.9661668368748255, 1.9660613877432687, 1.9659557342529297, 1.9658490589686803, 1.9657418387276786, 1.9656344141278947, 1.965527057647705, 1.9654203142438615, 1.9653140476771764, 1.9652061462402344, 1.9651003565107072, 1.9649938174656458, 1.964886256626674, 1.9647795813424247, 1.964672361101423, 1.9645652770996094, 1.9644598279680525, 1.964353084564209, 1.9642466136387415, 1.9641408920288086, 1.964034148624965, 1.9639280182974679, 1.9638218879699707, 1.9637156214032854, 1.9636094229561942, 1.9635026795523507, 1.9633962767464774, 1.9632905551365443, 1.9631854466029577, 1.9630787031991142, 1.9629717554364885, 1.962864943913051, 1.9627586773463659, 1.962653364453997, 1.962545735495431, 1.962439741407122, 1.9623333386012487, 1.9622255734034948, 1.9621193749564034, 1.9620140620640345, 1.961907250540597, 1.9618021420070104, 1.9616954667227608, 1.9615895407540458, 1.9614831379481725, 1.9613783018929618, 1.961270877293178, 1.9611639295305525, 1.9610580716814314, 1.9609519413539342, 1.9608455385480608, 1.9607383864266532, 1.9606335503714425, 1.9605279650006975], "val_accuracy": [0.0403333343565464, 0.04066666588187218, 0.04233333468437195, 0.043666668236255646, 0.04399999976158142, 0.04466666653752327, 0.04533333331346512, 0.04600000008940697, 0.046666666865348816, 0.04766666516661644, 0.04833333194255829, 0.04933333396911621, 0.05066666752099991, 0.050999999046325684, 0.050999999046325684, 0.05133333429694176, 0.052000001072883606, 0.052666667848825455, 0.05366666615009308, 0.05400000140070915, 0.05400000140070915, 0.054666668176651, 0.0560000017285347, 0.05666666850447655, 0.0573333315551281, 0.05833333358168602, 0.05833333358168602, 0.059333331882953644, 0.06066666543483734, 0.06066666543483734, 0.061000000685453415, 0.061666667461395264, 0.061666667461395264, 0.06133333221077919, 0.06199999898672104, 0.06233333423733711, 0.06300000101327896, 0.06366666406393051, 0.06433333456516266, 0.06433333456516266, 0.06466666609048843, 0.06499999761581421, 0.06533333659172058, 0.06533333659172058, 0.06533333659172058, 0.06666667014360428, 0.06733333319425583, 0.06833333522081375, 0.06966666877269745, 0.07100000232458115, 0.07133333384990692, 0.07233333587646484, 0.0729999989271164, 0.0729999989271164, 0.07333333045244217, 0.07400000095367432, 0.07533333450555801, 0.07633333653211594, 0.07800000160932541, 0.07833333313465118, 0.0793333351612091, 0.0806666687130928, 0.08166666328907013, 0.08299999684095383, 0.0833333358168602, 0.08500000089406967, 0.0860000029206276, 0.08633333444595337, 0.08666666597127914, 0.08699999749660492, 0.08833333104848862, 0.08866667002439499, 0.08900000154972076, 0.08933333307504654, 0.09033333510160446, 0.09099999815225601, 0.09133332967758179, 0.09166666865348816, 0.09233333170413971, 0.09266666322946548, 0.09366666525602341, 0.09433333575725555, 0.09399999678134918, 0.09466666728258133, 0.0949999988079071, 0.0963333323597908, 0.09700000286102295, 0.09799999743700027, 0.09866666793823242, 0.0989999994635582, 0.10100000351667404, 0.10133333504199982, 0.10233332961797714, 0.10400000214576721, 0.10466666519641876, 0.10533333569765091, 0.10733333230018616, 0.10899999737739563, 0.10966666787862778, 0.11033333092927933]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 0, 2, 7, 5, 5, 9], [4, 4, 3, 0, 3], [21, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 3, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [667.9561233205598, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09391097724437714, 0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.2658252134676664e+24, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [0, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 2, 0, 2, 7, 6, 5, 4, 2, 5, 2, 0, 9, 4, 0], [2, 4, 3, 0, 2, 3, 0, 5, 4], [50, 0, 19], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [53, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 24, 24, 15, 9, 3, 3, 2, 1, 1, 0, 4, 2, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.pow(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, grad)), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [207859551.83508492, 3927700816.6445646, 18500334298.36587, 50553597238.405495, 109854726487.81297, 200862766696.88864], "accuracy": [0.09576013684272766, 0.09668471664190292, 0.10236428678035736, 0.1010434553027153, 0.09457138925790787, 0.10434553027153015], "val_loss": [794565577.1428572, 6353057353.142858, 21437722624.0, 50810887021.71429, 99234557366.85715, 171471344201.14285], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [6, 4, 9, 9, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [8, 0, 2, 8, 1, 0, 5, 9], [5, 3, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [2, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 2, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 3, 9, 9, 6, 3, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(grad, tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3026964637376945, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 8, 1, 5, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [8, 0, 2, 8, 2, 0, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 8, 8, 5, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 2, 9, 3, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [6, 4, 2, 8, 7, 9, 5, 9], [2, 4, 3, 0], [21, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.add(grad, tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), grad), tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), tf.math.pow(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [3, 4, 5, 8, 5, 4, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 2, 8, 5, 2, 9], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 0, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [8, 0, 2, 9, 2, 0, 5, 9], [5, 4, 3, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 2, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 56, 56, 34, 22, 10, 5, 5, 4, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 77, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.square(tf.math.add(alpha, alpha)), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, grad), alpha))), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [0, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 2, 0, 8, 7, 5, 5, 9], [4, 4, 1, 0, 3], [74, 54, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 3, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 11, 11, 8, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.square(grad)))))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026964637376945, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [84, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [7, 3, 0, 4, 7, 8, 4], [3, 1, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 9, 9, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [24, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 7, 8, 4], [3, 1, 0, 1, 3, 3], [7, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 5, 0, 3, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 8, 4, 4, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.negative(sigma), alpha), tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 4, 0, 9, 3, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 5, 9], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 0, 2], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93, 30], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 1, 1, 2, 5, 6, 9], [1, 4, 3, 0, 3, 4], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 51, 51, 31, 20, 11, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, grad))))), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), grad))), alpha))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), grad)))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11847840249538422, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 8, 9, 9, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 0, 2, 8, 1, 0, 5, 9], [5, 4, 3, 0, 3, 4], [21, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 2, 2, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [6612824.098516106, 124698313.40219258, 586993135.6935675, 1603563561.353586, 3484062126.8482366, 6369776851.46797], "accuracy": [0.09576013684272766, 0.09668471664190292, 0.10236428678035736, 0.1010434553027153, 0.09457138925790787, 0.10434553027153015], "val_loss": [25246238.285714287, 201619021.7142857, 680072576.0, 1611562496.0, 3147040036.571429, 5437468964.571428], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3, 0], [45, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [4065519.0116344187, 76621605.50310396, 360622733.9648659, 985091151.6470743, 2140227022.2607317, 3912799190.342095], "accuracy": [0.09576013684272766, 0.09668471664190292, 0.10236428678035736, 0.1010434553027153, 0.09457138925790787, 0.10434553027153015], "val_loss": [15515964.57142857, 123872928.0, 417787931.4285714, 989980818.2857143, 1933167104.0, 3340061549.714286], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 9, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3, 0], [24, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, alpha)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), tf.math.pow(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 6, 9, 9, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [8, 0, 2, 8, 1, 0, 5, 9], [0, 4, 3, 2, 1], [45, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 4, 4, 2, 2, 2, 9, 9, 6, 3, 1, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(grad, tf.math.negative(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.3032047191174465, 2.3027472277170067, 2.304281110288665, 2.302958574151445, 2.302276967680607, 2.3031301864968663], "accuracy": [0.09060890227556229, 0.08717474341392517, 0.0882314071059227, 0.0886276587843895, 0.09047681838274002, 0.09285431355237961], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 4, 5, 6, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2, 1, 3, 5, 1, 9, 0, 7, 8, 7, 2, 1, 8, 8, 2, 9, 2, 1, 8, 0, 5, 9], [0, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 0, 0, 2, 3, 1, 2, 0, 1, 3], [57, 82, 39, 25, 38, 52, 94, 1, 97, 93, 45, 78, 85, 92], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3, 0], [21, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 2, 0, 1, 3, 3], [43, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 12, 7, 5, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [2.3032047191174465, 2.3027472277170067, 2.304281110288665, 2.302958574151445, 2.302276967680607, 2.3031301864968663], "accuracy": [0.09060890227556229, 0.08717474341392517, 0.0882314071059227, 0.0886276587843895, 0.09047681838274002, 0.09285431355237961], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 5, 8, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 2, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 9, 7, 1, 7, 5, 5, 9], [1, 4, 3, 0, 3, 4], [21, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [42, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3032047191174465, 2.3027472277170067, 2.304281110288665, 2.302958574151445, 2.302276967680607, 2.3031301864968663], "accuracy": [0.09060890227556229, 0.08717474341392517, 0.0882314071059227, 0.0886276587843895, 0.09047681838274002, 0.09285431355237961], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]