[{"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 8, 9, 8, 2, 6, 5, 7, 8, 7, 3, 4, 6], [2, 2, 3, 1, 2, 1, 2, 0, 2, 0, 2, 2, 0, 0, 3], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7942857146263123, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.291870301661947, 2.2649778271111924, 2.2345961675415924, 2.194633879949388, 2.1432238617089476, 2.0692838808769376, 1.9698029211278856, 1.85462744672773, 1.7231343897216276, 1.5958786885877878, 1.4909153810943736, 1.392364823933149, 1.318491105720934, 1.239007361749884, 1.176754591550337, 1.128962970286974, 1.0936508510311471, 1.0642816167481743, 1.03264081358453, 1.0017013628925897, 0.9875899325854994, 0.9625986995257406, 0.9446671695883059, 0.9254617173248798, 0.9179402465880775, 0.89646966472955, 0.8829260507138209, 0.8809677211521261, 0.8588614856026916, 0.8541945806268877, 0.8486867596948497, 0.8260475989613693, 0.8254235815520079, 0.8155622862790161, 0.7976731857398812, 0.8039799931105716, 0.7963299547849693, 0.7981189963934429, 0.7871969598726181, 0.7740984199352866, 0.7772287690738693, 0.7655714494189125, 0.7655900845422469, 0.7613541019071505, 0.753810740913839, 0.742761131645178, 0.7444817959797806, 0.7401755003015269, 0.7303478873999458, 0.7230105075334214, 0.734393956922285, 0.728582203002449, 0.7177769001905456, 0.711368107540638, 0.7137980234227743, 0.7094749112753364, 0.7067601346242162, 0.7009971229832611, 0.7046147277720175, 0.7010461935246263, 0.6909030640067017, 0.6876158573214625, 0.6823923234784639, 0.6791528277645305, 0.6809420759620258, 0.675005879014506, 0.6689314478502738, 0.6721238138385658, 0.6727184019603938, 0.6634607842065844, 0.6690592118746191, 0.6643417235362988, 0.6646512568256779, 0.6578872485514157, 0.651882856104116, 0.6544461770615699, 0.6613323956495735, 0.6440764985473763, 0.6447869039498237, 0.6424165774550593], "accuracy": [0.11808215826749802, 0.1896711140871048, 0.2545238435268402, 0.31422534584999084, 0.34566107392311096, 0.38647469878196716, 0.4147404432296753, 0.4434024691581726, 0.46347907185554504, 0.5032360553741455, 0.5119535326957703, 0.5385021567344666, 0.5544841885566711, 0.5728437304496765, 0.5934486985206604, 0.6015057563781738, 0.6152423620223999, 0.620261549949646, 0.6390172839164734, 0.6491876840591431, 0.650640606880188, 0.651168942451477, 0.6625280380249023, 0.670320987701416, 0.6738871932029724, 0.6773213744163513, 0.6790384650230408, 0.6860388517379761, 0.6905296444892883, 0.694360077381134, 0.6950204968452454, 0.7025492191314697, 0.7042662501335144, 0.7057191729545593, 0.7102100253105164, 0.7053229212760925, 0.7079645991325378, 0.7094175219535828, 0.7169462442398071, 0.7168141603469849, 0.7182670831680298, 0.7215691208839417, 0.7205125093460083, 0.7170783281326294, 0.72672039270401, 0.7310791015625, 0.7219653725624084, 0.7302865982055664, 0.7273808121681213, 0.7339849472045898, 0.7271166443824768, 0.7343811988830566, 0.7329282760620117, 0.7417778372764587, 0.7407211661338806, 0.7359662055969238, 0.7364945411682129, 0.7408532500267029, 0.733588695526123, 0.7392682433128357, 0.7412495017051697, 0.7485140562057495, 0.7421740889549255, 0.7514199018478394, 0.7473253011703491, 0.7477215528488159, 0.7514199018478394, 0.7466648817062378, 0.7485140562057495, 0.7520803213119507, 0.7514199018478394, 0.7489103078842163, 0.7485140562057495, 0.7540615797042847, 0.7581561207771301, 0.7516840696334839, 0.7519482374191284, 0.7563069462776184, 0.759609043598175, 0.761590301990509], "val_loss": [1.9466225079127721, 1.92044278553554, 1.8883315495082311, 1.8446763583592005, 1.7848318644932337, 1.703066655567714, 1.5971649374280656, 1.4727793761662074, 1.341972964150565, 1.2162761688232422, 1.1095631122589111, 1.0227058955601283, 0.9547709396907261, 0.8973182269505092, 0.8524508476257324, 0.8147014549800328, 0.7851055009024483, 0.7608921357563564, 0.739577191216605, 0.7222344364438739, 0.7060443162918091, 0.6921524660927909, 0.6810352972575596, 0.6700214658464704, 0.6605488913399833, 0.6524618353162494, 0.6440001726150513, 0.6350410154887608, 0.6284686497279576, 0.625178609575544, 0.6160870960780552, 0.6099538121904645, 0.6040828057697841, 0.60012800352914, 0.5946394205093384, 0.5918056113379342, 0.5859292575291225, 0.582419855254037, 0.5790390457425799, 0.5733896323612758, 0.5727459192276001, 0.5694064923695156, 0.5666171652930123, 0.5619596072605678, 0.559435384614127, 0.5579128435679844, 0.553135803767613, 0.5505799395697457, 0.5500929696219308, 0.5466522659574237, 0.5441526515143258, 0.5415958506720406, 0.5395785570144653, 0.5360043730054583, 0.5338884932654244, 0.531659620148795, 0.5300677674157279, 0.5287098714283535, 0.5271717480250767, 0.5240906987871442, 0.5221949475152152, 0.5217881202697754, 0.5204403059823173, 0.515349200793675, 0.5165380920682635, 0.5137335913521903, 0.5130066701344081, 0.5094888721193586, 0.5092316014426095, 0.507103443145752, 0.5066039732524327, 0.5052918536322457, 0.5037025042942592, 0.5034149033682687, 0.5025396347045898, 0.5017918348312378, 0.49876209667750765, 0.4971863201686314, 0.4961012431553432, 0.4945474011557443], "val_accuracy": [0.23800000548362732, 0.3696666657924652, 0.41200000047683716, 0.45233333110809326, 0.4846666753292084, 0.5249999761581421, 0.5483333468437195, 0.5683333277702332, 0.5853333473205566, 0.6033333539962769, 0.6359999775886536, 0.6463333368301392, 0.6703333258628845, 0.6690000295639038, 0.6813333630561829, 0.6899999976158142, 0.6930000185966492, 0.6976666450500488, 0.7036666870117188, 0.7086666822433472, 0.7160000205039978, 0.7203333377838135, 0.7149999737739563, 0.718999981880188, 0.7269999980926514, 0.7279999852180481, 0.7289999723434448, 0.7326666712760925, 0.7369999885559082, 0.7319999933242798, 0.737666666507721, 0.7406666874885559, 0.7416666746139526, 0.7390000224113464, 0.7456666827201843, 0.7403333187103271, 0.7513333559036255, 0.749666690826416, 0.749666690826416, 0.753000020980835, 0.7543333172798157, 0.7559999823570251, 0.7590000033378601, 0.7603333592414856, 0.7613333463668823, 0.7593333125114441, 0.7636666893959045, 0.7616666555404663, 0.762666642665863, 0.765666663646698, 0.7649999856948853, 0.765999972820282, 0.7670000195503235, 0.7693333625793457, 0.7706666588783264, 0.7699999809265137, 0.7706666588783264, 0.7730000019073486, 0.7710000276565552, 0.7726666927337646, 0.7723333239555359, 0.7749999761581421, 0.7753333449363708, 0.7770000100135803, 0.7730000019073486, 0.7786666750907898, 0.7763333320617676, 0.778333306312561, 0.7756666541099548, 0.7770000100135803, 0.7793333530426025, 0.7820000052452087, 0.7799999713897705, 0.7820000052452087, 0.7853333353996277, 0.777999997138977, 0.781000018119812, 0.781333327293396, 0.7823333144187927, 0.7826666831970215]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 2, 7, 8, 0, 7, 4, 3, 3, 3, 7, 8, 9, 8, 2, 6, 5, 7, 8, 7, 3, 4, 9], [2, 2, 3, 1, 1, 3, 2, 3, 0, 3, 2, 0, 3, 0, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7937142848968506, "mapping_values": [1, 39, 39, 24, 15, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.multiply(grad, tf.math.add(grad, tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2918703331529757, 2.2649779395656564, 2.23459611359746, 2.194629449224617, 2.143214370249883, 2.069278801688901, 1.969793820645689, 1.8546260722545411, 1.723125579744172, 1.5958706599972299, 1.4909209906858083, 1.3923844020317229, 1.318521459529964, 1.239064809558351, 1.1768236527463716, 1.1290115831928356, 1.0936956957677384, 1.0643540028300127, 1.03265667552914, 1.0017506982420161, 0.9876330808688778, 0.9626037034344727, 0.9446020026516212, 0.9254609374416786, 0.9179587919304888, 0.8965248063240132, 0.8829318276328371, 0.8809918449492172, 0.8589054286330368, 0.8542507351775289, 0.8486968954446183, 0.826084412792812, 0.8254330341275248, 0.8155767816704309, 0.7976082952865567, 0.8039799729956769, 0.7964119043064911, 0.7979861605893257, 0.7871777485972934, 0.7741134522566154, 0.7772766686055828, 0.7655391114861217, 0.7656082688085218, 0.7613891669630358, 0.7538415043817898, 0.7427089181259371, 0.7445734409356335, 0.7401955501593304, 0.7303492249262851, 0.7230253140010917, 0.7343698090975389, 0.7285210783250768, 0.717779086022219, 0.7112956734664719, 0.713895179938489, 0.7095460691283234, 0.7068287565676354, 0.7010171929244683, 0.7046632113914606, 0.7009677079847823, 0.6909019002714776, 0.6877262604360992, 0.6823927154945361, 0.6791072494995325, 0.6809765731874253, 0.6749696265500157, 0.6691096930015105, 0.672025069694761, 0.672806415811679, 0.6634037430181542, 0.6691498173194838, 0.6643914914386242, 0.6646634988529083, 0.6578414600523094, 0.6519931475358192, 0.6545284254487007, 0.6612730522386276, 0.6441616094690257, 0.6447169045966772, 0.642480829034137], "accuracy": [0.11808215826749802, 0.1896711140871048, 0.2545238435268402, 0.31422534584999084, 0.3459252417087555, 0.38647469878196716, 0.4147404432296753, 0.44327038526535034, 0.46347907185554504, 0.5033681392669678, 0.5119535326957703, 0.5383700728416443, 0.5544841885566711, 0.5727116465568542, 0.5933166146278381, 0.6013736724853516, 0.6151102781295776, 0.6205257177352905, 0.6387531161308289, 0.6491876840591431, 0.651168942451477, 0.6516972780227661, 0.6625280380249023, 0.670320987701416, 0.6738871932029724, 0.677189290523529, 0.6789063811302185, 0.6861709356307983, 0.6907938122749329, 0.6947563290596008, 0.6944921612739563, 0.702681303024292, 0.7040021419525146, 0.7063795924186707, 0.7104741930961609, 0.7053229212760925, 0.7082287669181824, 0.7096816897392273, 0.7168141603469849, 0.7160216569900513, 0.7182670831680298, 0.7219653725624084, 0.720380425453186, 0.7168141603469849, 0.72672039270401, 0.7314753532409668, 0.7215691208839417, 0.7300224304199219, 0.7275128960609436, 0.7339849472045898, 0.7271166443824768, 0.735041618347168, 0.7333245277404785, 0.7415136694908142, 0.7412495017051697, 0.7371549606323242, 0.7376832365989685, 0.7405890822410583, 0.7339849472045898, 0.7397965788841248, 0.7407211661338806, 0.7486461400985718, 0.7416457533836365, 0.7520803213119507, 0.7474573850631714, 0.7478536367416382, 0.7516840696334839, 0.7452120184898376, 0.7493065595626831, 0.7518161535263062, 0.7518161535263062, 0.7498348951339722, 0.7475894689559937, 0.7540615797042847, 0.7581561207771301, 0.7506273984909058, 0.7524765729904175, 0.7567031979560852, 0.7594769597053528, 0.7614582180976868], "val_loss": [1.946622576032366, 1.920442853655134, 1.8883310045514787, 1.8446668216160365, 1.7848262105669295, 1.7030533041272844, 1.5971618379865373, 1.4727643898555212, 1.341954026903425, 1.2162751810891288, 1.1095618179866247, 1.0227315425872803, 0.9547904218946185, 0.8973662172045026, 0.8524953297206334, 0.8147732019424438, 0.7851496253694806, 0.7609222957066127, 0.7396233252116612, 0.7222833292824882, 0.7061318670000348, 0.6922149317605155, 0.6810677903039115, 0.6700149774551392, 0.6605544430868966, 0.6524744033813477, 0.6439904315131051, 0.6350022554397583, 0.628502471106393, 0.6251955883843558, 0.616086653300694, 0.60995500428336, 0.604103854724339, 0.6001536335263934, 0.5946720497948783, 0.5918413570949009, 0.5859403269631522, 0.5823764971324376, 0.5790472200938633, 0.5734354427882603, 0.5727155889783587, 0.5694810152053833, 0.5667396443230766, 0.5620638132095337, 0.5594236339841571, 0.5579332964760917, 0.5532179049083165, 0.5505985532488141, 0.5500379119600568, 0.5467034408024379, 0.5441799163818359, 0.5417008399963379, 0.5396886893681118, 0.5360094649451119, 0.5339542627334595, 0.531706690788269, 0.5300170183181763, 0.5287535531180245, 0.5271441084997994, 0.5241057702473232, 0.5221652473722186, 0.5217423439025879, 0.5205457210540771, 0.5154601335525513, 0.5165949548993792, 0.5137533630643573, 0.5131414958408901, 0.5095325538090297, 0.5092457021985736, 0.5070969717843192, 0.5065852914537702, 0.5051799671990531, 0.5036349296569824, 0.5032984188624791, 0.5024180071694511, 0.5017961093357631, 0.4986639363425119, 0.4970973219190325, 0.4960657869066511, 0.49459906986781527], "val_accuracy": [0.23800000548362732, 0.3696666657924652, 0.41200000047683716, 0.45233333110809326, 0.484333336353302, 0.5253333449363708, 0.5479999780654907, 0.5683333277702332, 0.5853333473205566, 0.6033333539962769, 0.6363333463668823, 0.6466666460037231, 0.6700000166893005, 0.6693333387374878, 0.6813333630561829, 0.6899999976158142, 0.6926666498184204, 0.6970000267028809, 0.7036666870117188, 0.7083333134651184, 0.715666651725769, 0.7200000286102295, 0.7153333425521851, 0.718999981880188, 0.7269999980926514, 0.7286666631698608, 0.7286666631698608, 0.7323333621025085, 0.7369999885559082, 0.7326666712760925, 0.737333357334137, 0.7406666874885559, 0.7413333058357239, 0.7390000224113464, 0.7453333139419556, 0.7403333187103271, 0.7513333559036255, 0.750333309173584, 0.7493333220481873, 0.753000020980835, 0.7540000081062317, 0.7559999823570251, 0.7590000033378601, 0.7609999775886536, 0.7609999775886536, 0.7596666812896729, 0.7636666893959045, 0.7616666555404663, 0.7620000243186951, 0.765333354473114, 0.7649999856948853, 0.765333354473114, 0.7673333287239075, 0.7689999938011169, 0.7699999809265137, 0.7689999938011169, 0.7710000276565552, 0.7726666927337646, 0.7710000276565552, 0.7720000147819519, 0.7726666927337646, 0.7753333449363708, 0.7749999761581421, 0.7773333191871643, 0.7743333578109741, 0.7786666750907898, 0.7763333320617676, 0.7793333530426025, 0.7760000228881836, 0.7763333320617676, 0.7793333530426025, 0.7816666960716248, 0.7799999713897705, 0.7816666960716248, 0.7850000262260437, 0.778333306312561, 0.781000018119812, 0.7823333144187927, 0.7823333144187927, 0.7829999923706055]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 2, 8, 8, 1, 7, 4, 3, 3, 3, 7, 8, 9, 8, 4, 6, 5, 7, 8, 7, 3, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7911428809165955, "mapping_values": [1, 39, 39, 24, 15, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), alpha), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.multiply(alpha, tf.math.add(grad, tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), grad)))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.291870319643324, 2.2649778450925697, 2.2345958886885326, 2.194629962119003, 2.1432159983675634, 2.069281725599435, 1.9698031138372365, 1.8546483201467916, 1.7231558222166694, 1.5958947465404338, 1.49094543896646, 1.3924024172462823, 1.3185255673457257, 1.2390589900319728, 1.176847265223628, 1.1289956291605847, 1.0936910245774711, 1.0642996113990921, 1.0326443459804677, 1.001701864796607, 0.9875956376577334, 0.9626116185156173, 0.9446807699180818, 0.9254835090774508, 0.917956781078717, 0.8965615996547961, 0.8829759674270029, 0.8810426254849376, 0.8589212208958728, 0.8543448143505449, 0.848726192485576, 0.8260932680464943, 0.8254047123794747, 0.8155335931493906, 0.7976874793761474, 0.8039547019725336, 0.7964310193845955, 0.7979658133381189, 0.7872336202089135, 0.774193925895963, 0.777371251587823, 0.7655228241606946, 0.7656155457712042, 0.7614644346393378, 0.7538162242577391, 0.7429261564531378, 0.7444605470065822, 0.7402579923268747, 0.7304007964615399, 0.7231380760142233, 0.7343143126149266, 0.7286153196690184, 0.7177993366195856, 0.7114624354376722, 0.7138188538014724, 0.7095265054447681, 0.7068081330220146, 0.7009520904656651, 0.7046531967955526, 0.7011297983484592, 0.6910535068780267, 0.6877073417596687, 0.6823800574393242, 0.6792027750869926, 0.6811069178543449, 0.6750915516652546, 0.668813999310744, 0.672247646349674, 0.6727348303735028, 0.6633983903462782, 0.6691502580836685], "accuracy": [0.11808215826749802, 0.1896711140871048, 0.2545238435268402, 0.31422534584999084, 0.34566107392311096, 0.3863426148891449, 0.414608359336853, 0.4434024691581726, 0.46347907185554504, 0.5033681392669678, 0.511821448802948, 0.5383700728416443, 0.5543521046638489, 0.5728437304496765, 0.5933166146278381, 0.601109504699707, 0.6147140264511108, 0.6201294660568237, 0.6386210322380066, 0.6494518518447876, 0.6509047746658325, 0.6503764390945435, 0.6623960137367249, 0.6701889038085938, 0.6733588576316833, 0.6770572066307068, 0.6798309087753296, 0.6865671873092651, 0.6906617283821106, 0.6947563290596008, 0.6947563290596008, 0.7025492191314697, 0.7047945857048035, 0.7069079279899597, 0.7107383608818054, 0.7051908373832703, 0.7078325152397156, 0.709549605846405, 0.7173424959182739, 0.7154933214187622, 0.718399167060852, 0.7218332886695862, 0.7202483415603638, 0.7166820764541626, 0.7255316376686096, 0.7304186820983887, 0.722229540348053, 0.7298903465270996, 0.7276449799537659, 0.7337207794189453, 0.7276449799537659, 0.7345132827758789, 0.7333245277404785, 0.7421740889549255, 0.7412495017051697, 0.7358341217041016, 0.7368907928466797, 0.7407211661338806, 0.7334566116333008, 0.7396644949913025, 0.7405890822410583, 0.7485140562057495, 0.741909921169281, 0.7508915662765503, 0.7471932172775269, 0.7481178045272827, 0.7518161535263062, 0.7457403540611267, 0.7499669790267944, 0.7518161535263062, 0.7514199018478394], "val_loss": [1.946622576032366, 1.920442717415946, 1.888331617627825, 1.8446671622140067, 1.7848268917628698, 1.7030632155282157, 1.597179957798549, 1.4728102002825056, 1.3419842379433768, 1.2163002831595284, 1.1095873968941825, 1.0227524893624442, 0.9548346655709403, 0.8973585537501744, 0.8524960449763707, 0.8147433996200562, 0.7850840772901263, 0.7608768088476998, 0.7396019867488316, 0.7222270965576172, 0.7060712575912476, 0.6921478339603969, 0.681051322392055, 0.6700235605239868, 0.6605496236256191, 0.6525587354387555, 0.6440566437585014, 0.6350816828863961, 0.628490822655814, 0.6252441576548985, 0.6161397865840367, 0.6100247417177472, 0.6041613646915981, 0.600178599357605, 0.5947117805480957, 0.5918252468109131, 0.5859955208642142, 0.582423380443028, 0.5790655783244542, 0.5734625714165824, 0.5728234904153007, 0.5695268767220634, 0.5667048692703247, 0.5621148177555629, 0.5595052412578038, 0.5580480439322335, 0.553274324962071, 0.5506323916571481, 0.5500373670033046, 0.5468255962644305, 0.5442392826080322, 0.5416931424822126, 0.5396277053015572, 0.5360391139984131, 0.5339032752173287, 0.5317913293838501, 0.5300896338054112, 0.528727650642395, 0.5271988425936017, 0.5241867814745221, 0.5221913712365287, 0.5217722824641636, 0.5205587148666382, 0.5153872626168388, 0.5165969473975045, 0.5137978792190552, 0.5129428080150059, 0.5096135139465332, 0.509299806186131, 0.5071121624537877, 0.5064984900610787], "val_accuracy": [0.23800000548362732, 0.3696666657924652, 0.41200000047683716, 0.45233333110809326, 0.484333336353302, 0.5246666669845581, 0.5479999780654907, 0.5683333277702332, 0.5856666564941406, 0.6033333539962769, 0.6356666684150696, 0.6466666460037231, 0.6700000166893005, 0.6696666479110718, 0.6813333630561829, 0.6899999976158142, 0.6930000185966492, 0.6973333358764648, 0.7036666870117188, 0.7086666822433472, 0.7160000205039978, 0.7203333377838135, 0.7149999737739563, 0.7193333506584167, 0.7266666889190674, 0.7283333539962769, 0.7289999723434448, 0.7323333621025085, 0.7366666793823242, 0.7319999933242798, 0.737666666507721, 0.7406666874885559, 0.7413333058357239, 0.7386666536331177, 0.7456666827201843, 0.7396666407585144, 0.7513333559036255, 0.750333309173584, 0.749666690826416, 0.753000020980835, 0.7540000081062317, 0.7563333511352539, 0.7593333125114441, 0.7603333592414856, 0.7606666684150696, 0.7586666941642761, 0.7633333206176758, 0.7616666555404663, 0.7630000114440918, 0.765333354473114, 0.765666663646698, 0.7663333415985107, 0.7680000066757202, 0.7693333625793457, 0.7706666588783264, 0.7699999809265137, 0.7710000276565552, 0.7733333110809326, 0.7703333497047424, 0.7716666460037231, 0.7723333239555359, 0.7753333449363708, 0.7756666541099548, 0.7773333191871643, 0.7736666798591614, 0.7796666622161865, 0.7763333320617676, 0.7793333530426025, 0.7756666541099548, 0.7773333191871643, 0.7793333530426025]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [9, 2, 8, 7, 8, 4, 2, 5, 7, 3, 7, 0, 7, 9, 1, 2, 8, 8, 1, 8, 5, 6, 0, 8], [2, 2, 3, 1, 1, 3, 2, 3, 0, 3, 2, 0, 3], [49], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7], [1, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.39828571677207947, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.1887454807388314, 2.28112085557428, 2.487809101730022, 2.1946449715620995, 2.300775216129934, 2.2361521276862724, 2.250316536957168, 2.3170056012422813, 2.3044327464889083, 2.3031623888450325, 2.302970624193618, 2.2552549148421512], "accuracy": [0.15982036292552948, 0.1678774207830429, 0.14053626358509064, 0.14700831472873688, 0.11372341960668564, 0.15638621151447296, 0.1538766324520111, 0.15849953889846802, 0.09734513610601425, 0.10896842926740646, 0.10355303436517715, 0.16061286628246307], "val_loss": [1.9757449286324638, 2.3645051547459195, 1.7360883440290178, 1.9739638737269811, 1.9114933013916016, 1.97282988684518, 1.4172484534127372, 1.9748148918151855, 1.9739439828055245, 1.973611899784633, 1.9719239643641882, 1.9431555611746651], "val_accuracy": [0.11299999803304672, 0.19166666269302368, 0.21966665983200073, 0.09833333641290665, 0.22699999809265137, 0.14633333683013916, 0.42133334279060364, 0.09799999743700027, 0.09799999743700027, 0.10199999809265137, 0.10300000011920929, 0.15566666424274445]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 7, 8], [0, 1, 1, 1, 0, 1, 0, 3, 1, 3, 2, 1, 2, 0, 0, 2], [67, 46], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.3602857291698456, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.1887109524317863, 2.282363807866917, 2.301272655632423, 4.847279075460821, 2.3098236634321596, 2.304449320091406, 2.303298231349598, 2.3033334754477277], "accuracy": [0.16021661460399628, 0.1636507660150528, 0.18438778817653656, 0.14463083446025848, 0.09800554811954498, 0.1002509593963623, 0.09391097724437714, 0.0944393053650856], "val_loss": [1.9757751737322127, 2.13356419972011, 1.4243246146610804, 1.9831209182739258, 1.975604670388358, 1.9741767474583216, 1.9737416676112585, 1.973639965057373], "val_accuracy": [0.12200000137090683, 0.1653333306312561, 0.3656666576862335, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 7, 8], [2, 2, 3, 1], [49], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [1, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [7, 0, 8, 9, 7], [5, 7], [88, 19], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [4, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.2668571472167969, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.188780267996606, 2.2634458561079644, 2.5150918891291028, 2.272713124051369, 2.303555975343258, 2.3032718584002474, 2.3022755439082125], "accuracy": [0.15995244681835175, 0.18002906441688538, 0.13934750854969025, 0.13855500519275665, 0.10355303436517715, 0.09615638852119446, 0.10619468986988068], "val_loss": [1.9757297379629952, 1.5778520447867257, 1.9670953750610352, 1.9748239517211914, 1.9741817201886858, 1.9735606738499232, 1.9728688512529646], "val_accuracy": [0.12333333492279053, 0.2916666567325592, 0.20000000298023224, 0.09799999743700027, 0.09966666996479034, 0.09966666996479034, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 7, 7, 8], [0, 2, 3, 1], [26, 46], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.20657142996788025, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.1115727954930508, 2.285632577948267, 2.30361752112654, 2.3059728630876117, 2.303186423648476, 2.2695594017516036, 2.307767486150286], "accuracy": [0.16074495017528534, 0.12878087162971497, 0.16682076454162598, 0.1002509593963623, 0.09800554811954498, 0.14912164211273193, 0.1018359512090683], "val_loss": [1.9775786399841309, 1.8750537463596888, 1.9799695696149553, 1.9738612174987793, 1.9728783198765345, 1.981243065425328, 1.9745780399867467], "val_accuracy": [0.10066666454076767, 0.20133332908153534, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 7, 7, 8], [0, 1, 1, 1, 0, 1, 0, 3, 1, 3, 2, 1, 2, 0, 0, 2], [55, 50, 26, 86, 41, 5, 5, 3], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 7, 9], [2, 0, 0, 1, 3, 3], [28, 57, 40]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 11, 7, 4, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), alpha)))))", "other_info": {"loss": [2.899492851362758e+28, 165.07981850187366, 1186.4781505265776, 5905.5009979743845, 25072.406787102926, 97434.29557068089], "accuracy": [0.07938185334205627, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [37.135951450892854, 428.72589111328125, 2463.318429129464, 11162.50279017857, 45095.388392857145, 170615.52232142858], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 7, 7, 8], [2, 2, 3, 1], [26, 46], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [7, 3, 0, 4, 7], [1, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 8, 4, 4, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 2, 7, 0, 8, 2, 1, 4, 7, 2, 2, 6, 6, 0, 8, 6, 5, 2, 5, 2, 4, 4, 7, 8, 4, 4, 1, 2, 5, 4, 3, 2, 6, 6, 4, 0, 4, 5, 6, 8, 0, 9, 5, 5, 7, 3, 1, 4, 4, 1, 7, 8, 3, 7, 1, 2, 8, 8, 3], [0, 2, 1, 1, 0, 2, 3, 3, 0, 2, 3, 1, 0, 0, 2, 1, 0, 0, 2, 2, 1, 1, 3, 1, 3, 0, 0, 1, 0, 1, 2, 3, 3, 0, 0, 1, 2, 3, 2, 0, 0], [18, 65, 99, 60, 87, 32, 83, 95, 73, 73, 29, 65, 77, 70, 29], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [1, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [3, 7], [88, 19], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [64, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 100, 100, 59, 41, 15, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)))))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad))))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.square(grad))))), alpha)))), tf.math.add(alpha, grad))), tf.math.square(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))))), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), alpha)), grad)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(grad, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, alpha))), grad), tf.math.multiply(tf.math.add(alpha, grad), grad)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [9, 2, 8, 7, 8, 4, 2, 5, 7, 3, 7, 0, 7, 9, 1, 2, 8, 8, 1, 8, 5, 6, 0, 8], [2, 2, 3, 1, 1, 3, 2, 3, 0, 3, 2, 0, 3], [26, 46], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7], [1, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [35465.99861622801, 5012285.549101836, 85334527.49280147, 594535085.1744816, 2645881289.357813, 8642068616.605469], "accuracy": [0.1018359512090683, 0.09906221181154251, 0.09985470771789551, 0.09826971590518951, 0.09694888442754745, 0.09509972482919693], "val_loss": [282365.41964285716, 15039396.57142857, 161061563.42857143, 877366948.5714285, 3285173394.285714, 9688355986.285715], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 7, 7, 8, 8, 1, 6, 4, 7, 0, 6, 3, 3, 7, 8, 4, 4, 0, 7, 6, 7, 2, 1, 2, 4, 2, 5, 6, 6, 8, 1, 0, 2, 2, 9, 8, 6, 5, 0], [2, 2, 1, 1, 0, 1, 1, 1, 2, 1, 2, 0, 1, 1, 3, 0, 3, 1, 2, 2, 2, 2, 2, 0, 1, 0, 2], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 1, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 63, 63, 36, 27, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 12, 7, 5, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.negative(alpha))))))))), tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, grad))), grad)))))))), grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 5, 7, 8], [2, 2, 3, 1], [26, 46], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9, 4, 9, 3], [5, 4, 3, 0], [8, 0, 19, 56], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [7, 0, 8, 9, 7], [3, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 11, 4, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 1, 7, 7, 8], [0, 3, 3, 1], [48], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [4, 3, 0, 4, 7], [1, 0, 1, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 2, 7, 5, 0, 6, 4, 1, 3, 3, 7, 8, 4, 8, 2, 6, 5, 7, 8, 9, 0, 4, 9], [2, 2, 3, 1, 1, 3, 2, 3, 2, 1, 2, 0, 3, 0, 0, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [71, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 24, 14, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.multiply(grad, tf.math.add(grad, tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))), grad)))))))))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08189142495393753, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 7, 7, 8, 5, 4, 0, 3, 8, 4, 1, 9, 2, 4, 8, 2, 6, 1, 4, 1, 0, 1, 8, 7, 0, 2, 5, 7, 4, 2, 7, 9, 7, 2, 5], [2, 2, 3, 1, 1, 0, 2, 3, 0, 3, 2, 0, 3, 0, 3, 0, 1, 3, 1, 0, 3, 1, 0], [30, 8, 39, 25, 98, 52, 94, 1, 17], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [2, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 59, 59, 36, 23, 9, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha))))))))), tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.math.subtract(grad, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3025791911464153, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1], [3, 4, 2, 7, 8, 0, 7, 4, 3, 3, 3, 7, 8, 9, 8, 2, 6, 5, 7, 8, 7, 3, 4, 9], [2, 2, 3, 1], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [7, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 12, 7, 5, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), tf.math.pow(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [2.3029016008970364, 2.302576855866192, 2.3026238980467735, 2.3023233231993054, 2.3032986747432833, 2.30265396479933], "accuracy": [0.08836349099874496, 0.09694888442754745, 0.09774138033390045, 0.09430722147226334, 0.09140139818191528, 0.08968432247638702], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0, 1], [9, 2, 8, 7, 8, 4, 2, 5, 7, 3, 7, 0, 7, 9, 1, 2, 8, 8, 1, 8, 5, 6, 0, 8], [1, 2, 1, 1], [48], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [2, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3029016008970364, 2.302576855866192, 2.3026238980467735, 2.3023233231993054, 2.3032986747432833, 2.30265396479933], "accuracy": [0.08836349099874496, 0.09694888442754745, 0.09774138033390045, 0.09430722147226334, 0.09140139818191528, 0.08968432247638702], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 7, 7, 8], [2, 2, 3, 1], [48], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [2, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 3, 0, 4, 7], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3029016008970364, 2.302576855866192, 2.3026238980467735, 2.3023233231993054, 2.3032986747432833, 2.30265396479933], "accuracy": [0.08836349099874496, 0.09694888442754745, 0.09774138033390045, 0.09430722147226334, 0.09140139818191528, 0.08968432247638702], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 7, 8], [2, 2, 3, 1], [48], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7], [2, 3, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, sigma))", "other_info": {"loss": [2.3029016008970364, 2.302576855866192, 2.3026238980467735, 2.3023233231993054, 2.3032986747432833, 2.30265396479933], "accuracy": [0.08836349099874496, 0.09694888442754745, 0.09774138033390045, 0.09430722147226334, 0.09140139818191528, 0.08968432247638702], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]