[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7879999876022339, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2922486826539306, 2.265552810248981, 2.2357943185867493, 2.1967981824344567, 2.140498221526765, 2.0682587159103516, 1.9704452773378731, 1.8540019401705985, 1.72014274916487, 1.5996206223043579, 1.4804407582858046, 1.3833829108608429, 1.3036131568320943, 1.2474808878256833, 1.1942519484856158, 1.1457488652249337, 1.1108181042489185, 1.0854430229845553, 1.0565777267085217, 1.0277889604660435, 0.9970493298464321, 0.9858918165124528, 0.9562039078895868, 0.9404611736240798, 0.9217407488945752, 0.9186448212454679, 0.9017214793035335, 0.8883452631967131, 0.88358304064744, 0.8729419039067591, 0.8564880932279629, 0.8529484019681306, 0.8452866871311931, 0.8399682567970171, 0.8347826400894011, 0.819054739507686, 0.8174276812170097, 0.8014476617896372, 0.8036984397105065, 0.8010494544474267, 0.7883849893389692, 0.783882064629445, 0.7788422485746334, 0.7723636777252018, 0.7661438304214997, 0.7716769383505052, 0.7626714897177805, 0.7581917474676416, 0.751493593705187, 0.7510317554720767, 0.7402316083950279, 0.7471415352874885, 0.7356967958067513, 0.7380313053343353, 0.7389849665504735, 0.7226198848842268, 0.7234460302883088, 0.7208241494560695, 0.7159240575766346, 0.7056637640563709, 0.7209672438958223, 0.7104358330552037, 0.707623163832807, 0.7038608602702169, 0.7150392479364976, 0.7009567001145891, 0.7038650083630045, 0.693002633296771, 0.6968984796292021, 0.7000258839629534, 0.6869734692897905, 0.6887149397392535, 0.6744416032122772, 0.6776233525749179], "accuracy": [0.11768590658903122, 0.18623696267604828, 0.24725927412509918, 0.30920618772506714, 0.3551710546016693, 0.38660678267478943, 0.42108044028282166, 0.4501386880874634, 0.4737815260887146, 0.49649980664253235, 0.5196143388748169, 0.5379738211631775, 0.5624092221260071, 0.5715228915214539, 0.5876370072364807, 0.6019020080566406, 0.6116761565208435, 0.6269977688789368, 0.6308281421661377, 0.6388852000236511, 0.6522256135940552, 0.6557918190956116, 0.665830135345459, 0.6717738509178162, 0.6742834448814392, 0.6791704893112183, 0.6808875799179077, 0.687887966632843, 0.6833971738815308, 0.6870955228805542, 0.6983225345611572, 0.6911900639533997, 0.7010962963104248, 0.702681303024292, 0.7013604640960693, 0.7084929347038269, 0.71100252866745, 0.7108704447746277, 0.7096816897392273, 0.713908314704895, 0.7228899598121643, 0.7150970697402954, 0.7206445932388306, 0.7207766771316528, 0.7243428826332092, 0.7195879220962524, 0.7231541275978088, 0.7272487282752991, 0.7302865982055664, 0.7298903465270996, 0.7333245277404785, 0.7289658188819885, 0.7333245277404785, 0.7293620109558105, 0.7290979027748108, 0.7411174178123474, 0.7378153204917908, 0.7316074371337891, 0.743891179561615, 0.7430986762046814, 0.7415136694908142, 0.7457403540611267, 0.7449478507041931, 0.7416457533836365, 0.7404569983482361, 0.7441553473472595, 0.7465327978134155, 0.7494386434555054, 0.7425703406333923, 0.7532690763473511, 0.7549861073493958, 0.7534011602401733, 0.7592127919197083, 0.7556465268135071], "val_loss": [1.946704523903983, 1.9208126068115234, 1.888702392578125, 1.8454455648149763, 1.785060201372419, 1.7040917873382568, 1.5990377153669084, 1.4745852947235107, 1.3411081177847726, 1.2179016385759627, 1.1104862008775984, 1.0224913188389368, 0.9540633474077497, 0.9016953877040318, 0.858271598815918, 0.8233195883887154, 0.7956529004233224, 0.7719263008662632, 0.7491333484649658, 0.7319444588252476, 0.7167609078543526, 0.703965391431536, 0.6895458017076764, 0.679231950214931, 0.6683986186981201, 0.6592988456998553, 0.6511643614087786, 0.6442037139620099, 0.6359101022992816, 0.6290332589830671, 0.6217402219772339, 0.6172993523733956, 0.6133513961519513, 0.6054851327623639, 0.6019043752125331, 0.5972304514476231, 0.591385909489223, 0.587496178490775, 0.585538216999599, 0.5795521225248065, 0.5777880123683384, 0.5728703907557896, 0.5696919304983956, 0.5653326341084072, 0.5616901772362846, 0.5606857538223267, 0.5574956962040493, 0.5552552257265363, 0.554505739893232, 0.5500823940549578, 0.5482831852776664, 0.5437191895076207, 0.5421369927270072, 0.5385730266571045, 0.5392612389155796, 0.5356643029621669, 0.5333303383418492, 0.5317551408495221, 0.5305832624435425, 0.5268199784415108, 0.5253287383488247, 0.5251823834010533, 0.5221651111330304, 0.5200122254235404, 0.5180777992521014, 0.5163952282496861, 0.5156141008649554, 0.5125940186636788, 0.5115890673228672, 0.5103253977639335, 0.5085252523422241, 0.5065722295216152, 0.5042285919189453, 0.5029511622020176], "val_accuracy": [0.24433332681655884, 0.3610000014305115, 0.41499999165534973, 0.4519999921321869, 0.48266667127609253, 0.5183333158493042, 0.5339999794960022, 0.565666675567627, 0.5870000123977661, 0.6056666374206543, 0.621999979019165, 0.6556666493415833, 0.6663333177566528, 0.6713333129882812, 0.6759999990463257, 0.6830000281333923, 0.6859999895095825, 0.6890000104904175, 0.6949999928474426, 0.6973333358764648, 0.703000009059906, 0.7066666483879089, 0.7136666774749756, 0.7149999737739563, 0.7153333425521851, 0.7166666388511658, 0.7253333330154419, 0.7200000286102295, 0.7300000190734863, 0.7333333492279053, 0.7379999756813049, 0.731333315372467, 0.7360000014305115, 0.7386666536331177, 0.7459999918937683, 0.7436666488647461, 0.7446666955947876, 0.7459999918937683, 0.7433333396911621, 0.7519999742507935, 0.7519999742507935, 0.7526666522026062, 0.7549999952316284, 0.7576666474342346, 0.7570000290870667, 0.7516666650772095, 0.7599999904632568, 0.7596666812896729, 0.7553333044052124, 0.7606666684150696, 0.7613333463668823, 0.7646666765213013, 0.765333354473114, 0.7673333287239075, 0.7673333287239075, 0.7716666460037231, 0.7696666717529297, 0.7713333368301392, 0.7726666927337646, 0.7733333110809326, 0.7716666460037231, 0.7733333110809326, 0.7746666669845581, 0.7763333320617676, 0.7760000228881836, 0.777999997138977, 0.7786666750907898, 0.778333306312561, 0.7826666831970215, 0.7789999842643738, 0.7799999713897705, 0.781333327293396, 0.781333327293396, 0.7806666493415833]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 2, 7, 8, 0, 1, 0, 0, 3, 8, 5, 8, 9, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9, 5], [3, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7817142605781555, "mapping_values": [1, 36, 36, 25, 11, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), grad))))))), alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), alpha)), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2923782855890305, 2.2651563578152056, 2.234737303908538, 2.1958302205123164, 2.1428217785217663, 2.071344712973743, 1.9704503229722181, 1.8523391706911077, 1.7285752644581078, 1.596051914281597, 1.4816739886995194, 1.3854282858538323, 1.3022159170937528, 1.2449622833497331, 1.177513743136553, 1.1353649912949928, 1.104277809203781, 1.0684153125223435, 1.0347333200824038, 1.011107891180008, 0.990415572088786, 0.9658926864892831, 0.9471409616138421, 0.927932993390415, 0.9188720462517794, 0.8953123489280875, 0.8916167252886612, 0.871070128469073, 0.8653722760888642, 0.8474638579685643, 0.8424937076037035, 0.8244539630994064, 0.8292116143873197, 0.8252769264373734, 0.8034616218833812, 0.8013781220795472, 0.800014739503572, 0.7935465418305206, 0.7784341391775791, 0.7773374842929802, 0.7797871596226524, 0.7557421140682743, 0.7582900799764634, 0.7679244622483844, 0.7475244090022066, 0.7460482186093984, 0.7381439521532835, 0.7332058329434836, 0.7429540860985154, 0.7359499591625976, 0.7257864306615784, 0.7271025087288295, 0.7167909130711896, 0.714855311498225, 0.7177744052508063, 0.7134832414291506], "accuracy": [0.11517632752656937, 0.1935015171766281, 0.2522784173488617, 0.3063003420829773, 0.35041606426239014, 0.39162594079971313, 0.4294016659259796, 0.4431383013725281, 0.47404569387435913, 0.49953770637512207, 0.5178972482681274, 0.5379738211631775, 0.5572579503059387, 0.5695416927337646, 0.59225994348526, 0.598599910736084, 0.613789439201355, 0.6244881749153137, 0.6375643610954285, 0.6411306262016296, 0.6448289752006531, 0.6559239029884338, 0.6671509742736816, 0.6696605682373047, 0.6725663542747498, 0.6806234121322632, 0.6752080321311951, 0.6896050572395325, 0.6848500967025757, 0.6936996579170227, 0.6952846646308899, 0.7030775547027588, 0.7021529674530029, 0.7069079279899597, 0.7102100253105164, 0.7116629481315613, 0.7083608508110046, 0.7123233675956726, 0.7206445932388306, 0.7191916704177856, 0.7157574892044067, 0.7211728692054749, 0.7231541275978088, 0.7176066637039185, 0.7268524765968323, 0.722229540348053, 0.7226257920265198, 0.7292299270629883, 0.7276449799537659, 0.7333245277404785, 0.7320036888122559, 0.7323999404907227, 0.7359662055969238, 0.7339849472045898, 0.7331924438476562, 0.7357020378112793], "val_loss": [1.946709428514753, 1.92059292112078, 1.8883048466273717, 1.8452747889927454, 1.7853820664542062, 1.7045322826930456, 1.5977826459067208, 1.4728114604949951, 1.3411658832005091, 1.2159107412610735, 1.1065875802721297, 1.020221539906093, 0.9500056334904262, 0.8962732042585101, 0.8507001399993896, 0.8161008698599679, 0.787528429712568, 0.7637312923158918, 0.7434011697769165, 0.7247194903237479, 0.7083546434129987, 0.6947824103491647, 0.6829472439629691, 0.672400883265904, 0.6632838419505528, 0.6541981186185565, 0.6465310198920113, 0.6380774463926043, 0.6303706680025373, 0.6237749031611851, 0.6165966476712909, 0.6104832376752581, 0.6056731939315796, 0.6016227517809186, 0.5968290737697056, 0.5910945279257638, 0.5875481707709176, 0.583332862172808, 0.5810893774032593, 0.5745431014469692, 0.5715633460453579, 0.5696349825177874, 0.5647964818137032, 0.5614500045776367, 0.559178216116769, 0.5589732272284371, 0.5540587561471122, 0.5505173036030361, 0.552329386983599, 0.547545347894941, 0.5447302034923008, 0.5426020962851388, 0.5393127202987671, 0.5356805494853428, 0.5348940236227853, 0.5324241093226841], "val_accuracy": [0.23800000548362732, 0.35766667127609253, 0.4036666750907898, 0.4476666748523712, 0.48100000619888306, 0.5246666669845581, 0.5503333210945129, 0.5653333067893982, 0.581333339214325, 0.6039999723434448, 0.637333333492279, 0.6586666703224182, 0.6663333177566528, 0.6736666560173035, 0.6826666593551636, 0.6863333582878113, 0.6949999928474426, 0.6930000185966492, 0.6983333230018616, 0.699999988079071, 0.7076666951179504, 0.7170000076293945, 0.7210000157356262, 0.7153333425521851, 0.718666672706604, 0.7203333377838135, 0.722000002861023, 0.7233333587646484, 0.7326666712760925, 0.7323333621025085, 0.7353333234786987, 0.7433333396911621, 0.7363333106040955, 0.7446666955947876, 0.749666690826416, 0.7476666569709778, 0.7459999918937683, 0.7476666569709778, 0.750333309173584, 0.7546666860580444, 0.7566666603088379, 0.7506666779518127, 0.7540000081062317, 0.7570000290870667, 0.7563333511352539, 0.7553333044052124, 0.7559999823570251, 0.7599999904632568, 0.7553333044052124, 0.7586666941642761, 0.7699999809265137, 0.7666666507720947, 0.7633333206176758, 0.7689999938011169, 0.7676666378974915, 0.7676666378974915]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [3, 1, 0, 7, 1, 1, 7, 4, 3, 3, 1, 3, 0, 9, 4, 0, 1, 5, 7, 8, 1, 3, 4, 6, 9], [2, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 1, 0, 1, 3, 0], [30, 8, 57, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7657142877578735, "mapping_values": [1, 36, 36, 21, 15, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, grad), alpha))), tf.math.add(alpha, tf.math.pow(grad, tf.math.multiply(grad, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2923782855890305, 2.265156407287612, 2.234737690744336, 2.195833953868255, 2.1428264837223447, 2.0713525173324303, 1.9704607570679937, 1.8523568137604343, 1.7285934874032387, 1.5960791008489132, 1.4816950513009366, 1.3854377455856852, 1.3022335597379506, 1.2449619212973748, 1.177506990436518, 1.135369834851406, 1.104298353730538, 1.0684354114589154, 1.0347757485753368, 1.0111552444132264, 0.9904555770242691, 0.9659801037509003, 0.9472395566633711, 0.9279855028308536, 0.9188909393968583, 0.895389950774554, 0.89164915430138, 0.8710879557136815, 0.8653934265266335, 0.847521624749662, 0.8425419556781238, 0.8245006755059343, 0.8292169994398462, 0.8253581805503789, 0.8035096263510755, 0.8013515849989544, 0.8000109211376015, 0.793561784118284, 0.7784687571632013, 0.7774052672681555, 0.7797928417694173, 0.7557714409627273, 0.7583666673315641, 0.7680217126309832, 0.7476315356484966, 0.7460477712399703], "accuracy": [0.11517632752656937, 0.1935015171766281, 0.2522784173488617, 0.3063003420829773, 0.35041606426239014, 0.39162594079971313, 0.4294016659259796, 0.4431383013725281, 0.47404569387435913, 0.49966979026794434, 0.5177651643753052, 0.5379738211631775, 0.5576542019844055, 0.5695416927337646, 0.5921278595924377, 0.598599910736084, 0.613789439201355, 0.624620258808136, 0.6375643610954285, 0.6411306262016296, 0.6446968913078308, 0.6556597352027893, 0.6667547225952148, 0.6691322326660156, 0.6730946898460388, 0.6798309087753296, 0.6749438643455505, 0.6897371411323547, 0.6848500967025757, 0.694360077381134, 0.6950204968452454, 0.7033417224884033, 0.7025492191314697, 0.7067758440971375, 0.7098137736320496, 0.7113987803459167, 0.7086250185966492, 0.7132478952407837, 0.7201162576675415, 0.7190595865249634, 0.7157574892044067, 0.7209087014198303, 0.722757875919342, 0.7173424959182739, 0.7271166443824768, 0.722757875919342], "val_loss": [1.946709428514753, 1.9205927167619978, 1.888305595942906, 1.845278535570417, 1.7853870391845703, 1.70454284123012, 1.5977979387555803, 1.4728401729038783, 1.341198171888079, 1.2159507615225655, 1.1066100937979562, 1.0202275003705705, 0.950019257409232, 0.8962746688297817, 0.8506931577410016, 0.8160780327660697, 0.7875453404017857, 0.7637209381375994, 0.743442279951913, 0.7247407947267804, 0.7083951575415475, 0.6947713579450335, 0.6829490491322109, 0.6724620035716465, 0.6633292606898716, 0.6541977609906878, 0.646532484463283, 0.63801828452519, 0.6303772415433612, 0.6237799099513462, 0.616639392716544, 0.6105707032339913, 0.6056955712182182, 0.6015572888510567, 0.5968012298856463, 0.5910521405083793, 0.5875605515071324, 0.5833011184419904, 0.5810950824192592, 0.5745676926204136, 0.571609650339399, 0.5696837050574166, 0.5648031575339181, 0.5615438563483102, 0.5592796291623797, 0.5590038640158517], "val_accuracy": [0.23800000548362732, 0.3580000102519989, 0.4036666750907898, 0.4480000138282776, 0.4806666672229767, 0.5246666669845581, 0.5503333210945129, 0.5649999976158142, 0.581333339214325, 0.6046666502952576, 0.637333333492279, 0.6586666703224182, 0.6663333177566528, 0.6736666560173035, 0.6826666593551636, 0.6859999895095825, 0.6949999928474426, 0.6930000185966492, 0.6976666450500488, 0.699999988079071, 0.7076666951179504, 0.7170000076293945, 0.7213333249092102, 0.7160000205039978, 0.7183333039283752, 0.7203333377838135, 0.722000002861023, 0.7229999899864197, 0.7323333621025085, 0.7323333621025085, 0.7356666922569275, 0.7426666617393494, 0.7360000014305115, 0.7453333139419556, 0.7493333220481873, 0.7473333477973938, 0.7456666827201843, 0.7473333477973938, 0.750333309173584, 0.7553333044052124, 0.7570000290870667, 0.750333309173584, 0.7546666860580444, 0.7570000290870667, 0.7566666603088379, 0.7556666731834412]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 8, 0, 6, 5, 7, 8, 7, 3, 8, 0, 8], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 2, 0], [30, 67, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7654285430908203, "mapping_values": [1, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), grad), tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2923782855890305, 2.265156501760698, 2.234737654781581, 2.1958316283817414, 2.1428193354477516, 2.0713444518186415, 1.9704537528806028, 1.8523480773775127, 1.7285781226311188, 1.5960536549167232, 1.4816764839069325, 1.3854187256655972, 1.3022115219538444, 1.2449460291135046, 1.1774921070047735, 1.1353623945132663, 1.1042791864954171, 1.068407684560654, 1.0347408206156452, 1.0111069240117858, 0.9904018854499729, 0.9659295082879561, 0.9471887167040792, 0.9279484877402457, 0.9188673172518562, 0.8953309121022938, 0.8915717935344846, 0.8710188668134143, 0.8653437623085205, 0.8475557814389487, 0.842511566205504, 0.8245771287013794, 0.8292857739179362, 0.8251936683218949, 0.8034932189818466, 0.801269185045502, 0.7999389793390705, 0.7935333403188791, 0.7783526508185559, 0.7774132018658653, 0.7797654884571035, 0.7557390713657072, 0.7583159737032104, 0.7679714343141901, 0.7476094146808376, 0.746044218429973], "accuracy": [0.11517632752656937, 0.1935015171766281, 0.2522784173488617, 0.3063003420829773, 0.35028398036956787, 0.39162594079971313, 0.4294016659259796, 0.44327038526535034, 0.47404569387435913, 0.49966979026794434, 0.5180293321609497, 0.5381059050559998, 0.5575221180915833, 0.5695416927337646, 0.5921278595924377, 0.598599910736084, 0.613789439201355, 0.6247523427009583, 0.6376964449882507, 0.6413947939872742, 0.6454893946647644, 0.6559239029884338, 0.6664905548095703, 0.6693964004516602, 0.672698438167572, 0.6796988248825073, 0.6748117804527283, 0.6900013089179993, 0.6843217611312866, 0.6939638257026672, 0.6944921612739563, 0.7022850513458252, 0.702681303024292, 0.7067758440971375, 0.7092854380607605, 0.7116629481315613, 0.7079645991325378, 0.7125874757766724, 0.7206445932388306, 0.7195879220962524, 0.7156254053115845, 0.7210407853126526, 0.7232862114906311, 0.7169462442398071, 0.7269845604896545, 0.7231541275978088], "val_loss": [1.946709428514753, 1.920593193599156, 1.8883054597037179, 1.845271110534668, 1.7853808403015137, 1.7045397077287947, 1.5977885723114014, 1.4728292056492396, 1.3411761011396135, 1.2159191540309362, 1.106590781893049, 1.0202080522264754, 0.94999817439488, 0.8962650639670235, 0.8506780862808228, 0.8160710845674787, 0.7875053882598877, 0.7636992250170026, 0.7433750799724034, 0.7247397729328701, 0.7083770036697388, 0.6947867359433856, 0.6829857145036969, 0.6724228348050799, 0.66328912121909, 0.6541696446282523, 0.646506667137146, 0.6380604164940971, 0.6304094110216413, 0.6237839119774955, 0.6166020802089146, 0.6105646916798183, 0.6056397472109113, 0.6014792578560966, 0.5967616524015155, 0.5910720143999372, 0.5875452075685773, 0.5832234791346959, 0.5810671363558088, 0.5745677266802106, 0.5715863023485456, 0.5696370942252023, 0.564771022115435, 0.5615326677049909, 0.5592387233461652, 0.5589238745825631], "val_accuracy": [0.23800000548362732, 0.35766667127609253, 0.4036666750907898, 0.4480000138282776, 0.48100000619888306, 0.5246666669845581, 0.5503333210945129, 0.5649999976158142, 0.581333339214325, 0.6043333411216736, 0.637333333492279, 0.6583333611488342, 0.6663333177566528, 0.6736666560173035, 0.6823333501815796, 0.6863333582878113, 0.6949999928474426, 0.6930000185966492, 0.6983333230018616, 0.699999988079071, 0.7076666951179504, 0.7170000076293945, 0.7210000157356262, 0.7160000205039978, 0.7183333039283752, 0.7206666469573975, 0.722000002861023, 0.7233333587646484, 0.7329999804496765, 0.7323333621025085, 0.7353333234786987, 0.7423333525657654, 0.7363333106040955, 0.7443333268165588, 0.7493333220481873, 0.7483333349227905, 0.7456666827201843, 0.746666669845581, 0.750333309173584, 0.7549999952316284, 0.7570000290870667, 0.750333309173584, 0.7543333172798157, 0.7570000290870667, 0.7570000290870667, 0.7556666731834412]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 6, 0, 6, 5, 7, 8, 7, 3, 4, 6, 9], [2, 2, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 3, 0], [30, 8, 57, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7651428580284119, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2923782855890305, 2.265156407287612, 2.234737465835408, 2.1958321682954303, 2.1428206309571856, 2.0713460084831774, 1.9704517358802076, 1.8523436330958538, 1.7285777410228318, 1.596056485771267, 1.4816693941426708, 1.3854069053977156, 1.3021915137822901, 1.244927765718147, 1.177460483713645, 1.1353255404362887, 1.104259908758276, 1.0683839856798876, 1.0347172016984736, 1.01107164728895, 0.9903633470831924, 0.9659013134015156, 0.9471592329685572, 0.9279167268411941, 0.9189004874767928, 0.8953427636250214, 0.8916761009542934, 0.8710998254146054, 0.8654300934209359, 0.847451133065771, 0.8426285610852728, 0.8245197119351942, 0.829273317491909, 0.8253631728389212, 0.8034724236447908, 0.8014698931963342, 0.7999516428973398, 0.793552601129592, 0.778451950133453, 0.7772619560047966, 0.7797782075340565, 0.7557043208422174, 0.7584439820507026, 0.7679221255589376, 0.7476237719762185, 0.7460681621692341], "accuracy": [0.11517632752656937, 0.1935015171766281, 0.2522784173488617, 0.3063003420829773, 0.35041606426239014, 0.39162594079971313, 0.4295337498188019, 0.44327038526535034, 0.47404569387435913, 0.49993395805358887, 0.5178972482681274, 0.5378417372703552, 0.5575221180915833, 0.5696737766265869, 0.5921278595924377, 0.5988640785217285, 0.6141856908798218, 0.6244881749153137, 0.637432336807251, 0.6412627100944519, 0.6449610590934753, 0.6556597352027893, 0.6667547225952148, 0.6696605682373047, 0.6730946898460388, 0.6800950765609741, 0.6749438643455505, 0.6897371411323547, 0.6845859289169312, 0.694360077381134, 0.6951525807380676, 0.7030775547027588, 0.7022850513458252, 0.7066437602043152, 0.7103421092033386, 0.71100252866745, 0.7080966830253601, 0.7127195596694946, 0.7197200059890747, 0.718399167060852, 0.7156254053115845, 0.7210407853126526, 0.7232862114906311, 0.7177387475967407, 0.7271166443824768, 0.7220974564552307], "val_loss": [1.946709428514753, 1.9205931254795618, 1.8883065496172224, 1.84527131489345, 1.7853811127798898, 1.7045374257223946, 1.5977847576141357, 1.4728248119354248, 1.3411803926740373, 1.2159168720245361, 1.1065777710505895, 1.020204680306571, 0.9500021934509277, 0.8962661879403251, 0.8506912333624703, 0.8160732473645892, 0.7875477416174752, 0.7637101752417428, 0.7434664964675903, 0.7247448478426252, 0.7083853823798043, 0.694768990789141, 0.6829478910991124, 0.6724182197025844, 0.6632971252713885, 0.654285056250436, 0.6467056274414062, 0.6382672616413662, 0.630588344165257, 0.6238956792013985, 0.6168014492307391, 0.6107180459158761, 0.6057536772319249, 0.601547087941851, 0.5968220063618251, 0.5910905769893101, 0.5875714336122785, 0.5832410369600568, 0.5810755491256714, 0.5746138095855713, 0.5716009310313633, 0.5698041575295585, 0.5647969756807599, 0.5616025073187692, 0.5591502700533185, 0.558851821081979], "val_accuracy": [0.23800000548362732, 0.35766667127609253, 0.4036666750907898, 0.4480000138282776, 0.48100000619888306, 0.5246666669845581, 0.5503333210945129, 0.5649999976158142, 0.581333339214325, 0.6043333411216736, 0.637333333492279, 0.6589999794960022, 0.6663333177566528, 0.6740000247955322, 0.6830000281333923, 0.6863333582878113, 0.6949999928474426, 0.6933333277702332, 0.6980000138282776, 0.7003333568572998, 0.7076666951179504, 0.7170000076293945, 0.7210000157356262, 0.715666651725769, 0.718666672706604, 0.7196666598320007, 0.7223333120346069, 0.7239999771118164, 0.7326666712760925, 0.7323333621025085, 0.7356666922569275, 0.7416666746139526, 0.7360000014305115, 0.7450000047683716, 0.7493333220481873, 0.7473333477973938, 0.7453333139419556, 0.746999979019165, 0.750333309173584, 0.7553333044052124, 0.7570000290870667, 0.75, 0.7540000081062317, 0.7566666603088379, 0.7563333511352539, 0.7556666731834412]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [74, 57]], "fitness": -0.4294285774230957, "mapping_values": [1, 33, 33, 21, 12, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.397928307006356, 2.2965150914565684, 2.296101762791509, 2.2106913101907733, 2.23846957266622, 2.314910513424776, 2.3040001945976787, 2.3033457032882496, 2.303166796896263, 2.302883830163079], "accuracy": [0.20274733006954193, 0.13274335861206055, 0.12957337498664856, 0.18478403985500336, 0.17817988991737366, 0.13313961029052734, 0.09615638852119446, 0.08955223858356476, 0.09800554811954498, 0.10513802617788315], "val_loss": [1.8234013829912459, 1.9733433042253767, 1.8932055745806013, 1.9748880522591727, 1.6946706771850586, 1.9751355988638741, 1.9740404401506697, 1.9738757950919015, 1.9737687792096819, 1.9737669399806432], "val_accuracy": [0.10599999874830246, 0.09833333641290665, 0.3316666781902313, 0.09933333098888397, 0.39366665482521057, 0.09933333098888397, 0.09933333098888397, 0.09799999743700027, 0.09799999743700027, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 6, 0, 6, 5, 7, 8, 7, 3, 4, 6, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 57, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.40228572487831116, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2969846845759596, 2.2838571004548864, 2.272022593778752, 2.2599638364003587, 2.2473475913865424, 2.234997379403498, 2.218276327658701, 2.2005873298947334, 2.184501114900574, 2.160568555017677, 2.1359456241122956, 2.108083334644284, 2.0777559243236094, 2.0465465995220224, 2.011064631922244, 1.9920858971399638, 1.991922952794695], "accuracy": [0.10394927859306335, 0.1508387327194214, 0.1784440577030182, 0.21754062175750732, 0.24712719023227692, 0.26324132084846497, 0.304979532957077, 0.32465988397598267, 0.33747193217277527, 0.35345396399497986, 0.3590014576911926, 0.37405890226364136, 0.3751155734062195, 0.3675868511199951, 0.36705851554870605, 0.34500065445899963, 0.310130774974823], "val_loss": [1.9592997687203544, 1.9482375553676061, 1.9373077665056502, 1.9265873091561454, 1.914578982761928, 1.9018066270010812, 1.8862757682800293, 1.869779109954834, 1.8512507166181291, 1.8299200875418526, 1.8048045975821358, 1.7769056728907995, 1.7472985812595911, 1.7162129878997803, 1.6890927042279924, 1.6740190642220634, 1.6791611058371407], "val_accuracy": [0.12300000339746475, 0.24899999797344208, 0.2993333339691162, 0.32100000977516174, 0.34166666865348816, 0.3476666808128357, 0.359333336353302, 0.36399999260902405, 0.37566667795181274, 0.3790000081062317, 0.37933334708213806, 0.38499999046325684, 0.3840000033378601, 0.36666667461395264, 0.34166666865348816, 0.2879999876022339, 0.25333333015441895]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 6, 0, 6, 5, 7, 8, 7, 3, 4, 6, 9], [2, 2, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.20999999344348907, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4223329797318236, 2.3190902108608253, 2.2642561084700454, 2.25011524995399, 2.3069885807455552, 2.303859567188741, 2.3022532987399362, 2.3584883652657975, 2.308846413734929, 2.3033520687588487, 2.3034099986477297, 2.3031084666934234], "accuracy": [0.21516312658786774, 0.1022322028875351, 0.17091533541679382, 0.14780081808567047, 0.10170386731624603, 0.09509972482919693, 0.10051512718200684, 0.17540615797042847, 0.09655263274908066, 0.1014397069811821, 0.09906221181154251, 0.09628847241401672], "val_loss": [2.048619338444301, 1.972414493560791, 2.004845823560442, 1.9809321675981795, 1.9743225233895438, 1.973329748426165, 1.9678684643336706, 1.984499182019915, 1.9744078772408622, 1.9738502502441406, 1.9737221172877721, 1.9737146922520228], "val_accuracy": [0.09833333641290665, 0.11166666448116302, 0.10000000149011612, 0.09833333641290665, 0.09966666996479034, 0.1003333330154419, 0.12166666984558105, 0.10366666316986084, 0.10199999809265137, 0.10199999809265137, 0.10366666316986084, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [3, 4, 4, 7, 8, 0, 7, 0, 3, 3, 3, 5, 8, 9, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9], [0, 2, 3, 1, 1, 3, 2, 3, 0, 3, 2, 0, 3], [30, 8, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [1, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9037.823805064196, 170442.1886061947, 776990.0523543785, 2152141.957172104, 4600093.953506802, 8567548.45925241], "accuracy": [0.09985470771789551, 0.09642054885625839, 0.10091137140989304, 0.10751552134752274, 0.09932637959718704, 0.09642054885625839], "val_loss": [34538.174107142855, 271232.70535714284, 910174.4107142857, 2151452.785714286, 4195151.857142857, 7241360.428571428], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 2, 1, 3, 2, 2, 1, 3, 1, 2, 2, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 7, 5, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(beta, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [4, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [5, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 8, 4, 4, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 4, 5, 7, 4, 0, 7, 2, 3, 6, 3, 3, 8, 6, 3, 2, 6, 5, 7, 8, 5, 5, 1, 6, 8, 2, 4], [2, 2, 3, 2, 1, 3, 2, 2, 1, 3, 1, 1, 2, 2, 3, 0, 2, 1], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 7, 5, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(beta), tf.math.pow(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07885351777076721, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0], [3, 4, 0, 7, 8, 9, 7, 6, 3, 3, 3, 3, 2, 9, 6, 5, 6, 5, 7, 8, 1, 3, 4, 1, 9], [1, 2, 3, 1, 2, 1, 0, 2, 2, 0, 2, 1, 0, 1, 3, 0], [83, 8, 57, 62, 76, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(beta), tf.math.pow(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [3, 5, 2, 7, 8, 0, 1, 0, 0, 3, 8, 5, 8, 9, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9], [1, 2, 3, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [1, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 2, 1, 2, 0, 2, 0, 2, 2, 0, 0, 3], [30, 8, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [5, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [9, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [86, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3032642154960645, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9, 4, 1, 0], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 3, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 42, 27, 15, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), grad), alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))))), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07924976944923401, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 2, 2, 8, 6, 6, 6, 5, 7, 8, 7, 3, 4, 6, 9, 1, 1, 6, 6], [2, 2, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 3, 0, 3, 3, 0, 0, 2, 3], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 51, 51, 29, 22, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)))))))), tf.math.add(alpha, grad))))))), tf.math.multiply(grad, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.divide_no_nan(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad)))), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3032771800377145, 2.3025976223102287, 2.3028454870957864, 2.302790294375638, 2.3022617924687347, 2.303392492847798], "accuracy": [0.08585391938686371, 0.09166556596755981, 0.09021265059709549, 0.09496764093637466, 0.09100515395402908, 0.08968432247638702], "val_loss": [1.9712320736476354, 1.9712319374084473, 1.9712319374084473, 1.9712318011692591, 1.9712315968104772, 1.971231460571289], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 0, 7, 8, 0, 7, 4, 3, 3, 3, 3, 2, 9, 8, 0, 6, 5, 7, 8, 7, 3, 4, 6, 9], [2, 2, 3, 2, 1, 3, 2, 2, 1, 3, 1, 2, 2, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [2, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.3032772115287434, 2.302597784237099, 2.3028458379688295, 2.3027908881389862, 2.3022624762334436, 2.303393464503492], "accuracy": [0.08585391938686371, 0.09166556596755981, 0.09021265059709549, 0.09496764093637466, 0.09113723784685135, 0.08968432247638702], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 4, 2, 7, 8, 0, 1, 0, 0, 3, 8, 5, 8, 9, 8, 2, 6, 5, 2, 8, 7, 2, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3032771800377145, 2.3025976223102287, 2.3028454870957864, 2.302790294375638, 2.3022617924687347, 2.303392492847798], "accuracy": [0.08585391938686371, 0.09166556596755981, 0.09021265059709549, 0.09496764093637466, 0.09100515395402908, 0.08968432247638702], "val_loss": [1.9712320736476354, 1.9712319374084473, 1.9712319374084473, 1.9712318011692591, 1.9712315968104772, 1.971231460571289], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [3, 4, 0, 3, 8, 0, 7, 4, 3, 1, 3, 3, 8, 2, 8, 5, 6, 5, 7, 8, 5, 5, 2, 6, 8, 2, 4], [2, 2, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 0, 3, 0], [30, 44, 57, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 3, 0, 1, 3, 3], [28, 57]], "fitness": -0.034857142716646194, "mapping_values": [1, 39, 39, 24, 15, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad))))))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad))))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, sigma))", "other_info": {"loss": [2.303475672243577, 2.3032740089540957, 2.3040117634254407, 2.3044484063162227, 2.304400943667425, 2.306038507081892], "accuracy": [0.08519349992275238, 0.08955223858356476, 0.08677849918603897, 0.09206181764602661, 0.08585391938686371, 0.08453308790922165], "val_loss": [1.9716778482709612, 1.9721193313598633, 1.9725669452122279, 1.9730161258152552, 1.9734646252223425, 1.973916939326695], "val_accuracy": [0.03766666725277901, 0.03433333337306976, 0.03266666829586029, 0.029333332553505898, 0.02866666577756405, 0.026000000536441803]}}]