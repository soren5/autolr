[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9, 9, 4], [1, 2, 3, 1, 1, 2, 2, 2, 0, 1, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7911428809165955, "mapping_values": [1, 39, 39, 26, 13, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), grad), alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))))), grad)), tf.math.add(alpha, tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2919691535129427, 2.265326993277422, 2.235116475734728, 2.1959566221009186, 2.1427996886042617, 2.070077833639963, 1.9724727191031963, 1.8635496195706363, 1.7285759220222803, 1.5955785907191875, 1.4777698435126483, 1.3866244290782288, 1.3147075819128367, 1.2494237121416514, 1.1871864991244103, 1.1498593903016168, 1.1014838839377143, 1.0604166869143485, 1.030559818647982, 1.0238109148724865, 0.993908918434524, 0.9695100589529745, 0.9410274543656397, 0.9244728441865705, 0.9220713099956576, 0.891081112778308, 0.8894979286549697, 0.8674324160207296, 0.8701407046224211, 0.8586583134441832, 0.8491877169893118, 0.834354070018327, 0.8304267210526441, 0.8219202739797831, 0.8161190176573822, 0.7966784028376508, 0.8027782362953799, 0.7866321380553134, 0.7821864951256795, 0.7805308605764584, 0.775159131077696, 0.7743646129798486, 0.7579399398635674, 0.7569172483047301, 0.7520634914118427, 0.7574011725189663, 0.7389211816133336, 0.7443842096823774, 0.7329694828053728, 0.737595293413552, 0.724251913884218, 0.718014577344865, 0.7204011282381081, 0.7135267691400624, 0.7126741090455091, 0.7035949680909441, 0.7040691937689831, 0.7018665900524534, 0.6966789586669057, 0.685755268945796, 0.6997609691077598, 0.6848799674392234, 0.6894345004104148, 0.6795555142410963, 0.6800877917019162, 0.6729222696533828, 0.6777932169950397], "accuracy": [0.11847840249538422, 0.17857614159584045, 0.25320300459861755, 0.30947035551071167, 0.3463214933872223, 0.3897767663002014, 0.41526877880096436, 0.4407607913017273, 0.4683661460876465, 0.49306565523147583, 0.5217276215553284, 0.5395588278770447, 0.557390034198761, 0.5695416927337646, 0.5912032723426819, 0.5984678268432617, 0.6170915365219116, 0.63096022605896, 0.6406022906303406, 0.631488561630249, 0.6514331102371216, 0.6527539491653442, 0.6691322326660156, 0.6688680648803711, 0.6687359809875488, 0.6837934255599976, 0.6839255094528198, 0.6914542317390442, 0.684982180595398, 0.6911900639533997, 0.6915863156318665, 0.6989829540252686, 0.7028133869171143, 0.6993792057037354, 0.7042662501335144, 0.7137762308120728, 0.7066437602043152, 0.7098137736320496, 0.7104741930961609, 0.7160216569900513, 0.715889573097229, 0.7160216569900513, 0.7232862114906311, 0.7238145470619202, 0.7194558382034302, 0.7176066637039185, 0.7256637215614319, 0.7238145470619202, 0.7284374833106995, 0.7297582626342773, 0.7329282760620117, 0.735569953918457, 0.7308149337768555, 0.7366266250610352, 0.7382115721702576, 0.7416457533836365, 0.739400327205658, 0.7432307600975037, 0.7434949278831482, 0.7445515990257263, 0.7363624572753906, 0.7504953145980835, 0.7433628439903259, 0.7486461400985718, 0.7479857206344604, 0.7440232634544373, 0.748778223991394], "val_loss": [1.946542739868164, 1.9205769811357771, 1.88887391771589, 1.84549161366054, 1.7857225963047572, 1.704592296055385, 1.599419151033674, 1.476728882108416, 1.3436073916299003, 1.2156654766627721, 1.1072803565434046, 1.0191053322383337, 0.952178955078125, 0.8989106587001255, 0.8535341535295758, 0.8189985922404698, 0.7886480433600289, 0.7620442254202706, 0.740899954523359, 0.7265633855547223, 0.7099265371050153, 0.6969116415296283, 0.6827859708241054, 0.6702925477709089, 0.6632546356746128, 0.6526932205472674, 0.6448874984468732, 0.6358666249683925, 0.6286941085542951, 0.6225099733897618, 0.6166665213448661, 0.6093525035040719, 0.6049456255776542, 0.6010177135467529, 0.5955654382705688, 0.5903457062585014, 0.5874941008431571, 0.5828700065612793, 0.5789885691234044, 0.5759427717753819, 0.5713733775275094, 0.5697743041174752, 0.5650359562465123, 0.5622670650482178, 0.5603141784667969, 0.5584408726011004, 0.5539494241986956, 0.5529882907867432, 0.5489417484828404, 0.545974578176226, 0.543110728263855, 0.5404794556753976, 0.5409381559916905, 0.5373397554670062, 0.5338778836386544, 0.5311979396002633, 0.5306961195809501, 0.5272892372948783, 0.525941116469247, 0.5247964177812848, 0.5232559953417096, 0.5192985023771014, 0.5193807227270943, 0.5167382274355207, 0.5149145807538714, 0.5129695960453579, 0.5120858464922223], "val_accuracy": [0.23366667330265045, 0.3696666657924652, 0.4143333435058594, 0.4416666626930237, 0.4819999933242798, 0.5196666717529297, 0.5536666512489319, 0.5763333439826965, 0.5916666388511658, 0.6146666407585144, 0.637333333492279, 0.6633333563804626, 0.6700000166893005, 0.6710000038146973, 0.6796666383743286, 0.6886666417121887, 0.687666654586792, 0.6983333230018616, 0.6983333230018616, 0.7020000219345093, 0.7086666822433472, 0.7073333263397217, 0.7166666388511658, 0.7203333377838135, 0.722000002861023, 0.7266666889190674, 0.7296666502952576, 0.7296666502952576, 0.7316666841506958, 0.7366666793823242, 0.734333336353302, 0.7409999966621399, 0.7390000224113464, 0.7419999837875366, 0.7440000176429749, 0.7476666569709778, 0.7476666569709778, 0.7513333559036255, 0.75, 0.7540000081062317, 0.7540000081062317, 0.7519999742507935, 0.7573333382606506, 0.7540000081062317, 0.7609999775886536, 0.7580000162124634, 0.762333333492279, 0.762333333492279, 0.7663333415985107, 0.7646666765213013, 0.7676666378974915, 0.7666666507720947, 0.7706666588783264, 0.768666684627533, 0.7693333625793457, 0.7699999809265137, 0.7739999890327454, 0.7716666460037231, 0.7746666669845581, 0.7699999809265137, 0.7716666460037231, 0.778333306312561, 0.7766666412353516, 0.7743333578109741, 0.778333306312561, 0.7770000100135803, 0.7753333449363708]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [98, 8, 15, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7905714511871338, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2919691220219143, 2.2653269258236386, 2.2351155400417895, 2.1959539591565407, 2.1427954781277463, 2.0700694039324254, 1.9724554719548295, 1.863531897632028, 1.7285528767141982, 1.5955399308049085, 1.477730373633363, 1.3865718376587695, 1.314677825047749, 1.2493655002506072, 1.1870939079891059, 1.149804334362752, 1.101390177768062, 1.0602866249187763, 1.0304988396244907, 1.0237374686451637, 0.993830675981804, 0.9694045661399866, 0.9409278884083289, 0.924364838641412, 0.9219401099772864, 0.8910682739882091, 0.8895046650505243, 0.8673380767633068, 0.8700072547983515, 0.858542298494376, 0.8491827567822551, 0.8344157579206221, 0.8303541707450908, 0.8218658677323336, 0.8160762827488661, 0.7966762901990011, 0.8027094785783899, 0.786534104915957, 0.782041737817896, 0.7805623602338078, 0.7753100118868859, 0.7743821373594877, 0.7579155273331061, 0.7568391335323864, 0.7520158597192019, 0.7572969138393973, 0.7388800648398419, 0.7445654227213695, 0.7330667245751752, 0.7375318439424692, 0.7241552477704221, 0.7178874832921576, 0.720286110845366, 0.7135044381114958, 0.7127824662273681, 0.7035935270299749, 0.7039437592383846, 0.7018850423782383, 0.6968345999591748, 0.6857420623326078, 0.6998055259691112, 0.684734902645162, 0.6893948608338478, 0.679507385974295, 0.6800773437107244, 0.672854716491863, 0.6777866212226743], "accuracy": [0.11847840249538422, 0.17857614159584045, 0.25320300459861755, 0.30947035551071167, 0.3463214933872223, 0.3897767663002014, 0.4154008626937866, 0.44023245573043823, 0.4683661460876465, 0.49306565523147583, 0.5217276215553284, 0.5391625761985779, 0.5576542019844055, 0.5695416927337646, 0.5910711884498596, 0.5988640785217285, 0.6174877882003784, 0.63096022605896, 0.6407343745231628, 0.631488561630249, 0.6514331102371216, 0.652621865272522, 0.6686038970947266, 0.6691322326660156, 0.6687359809875488, 0.683529257774353, 0.6839255094528198, 0.691850483417511, 0.6853784322738647, 0.6914542317390442, 0.691850483417511, 0.6979262828826904, 0.703209638595581, 0.6995112895965576, 0.7045304179191589, 0.7147008180618286, 0.7065116763114929, 0.7087571024894714, 0.7107383608818054, 0.7152291536331177, 0.7153612375259399, 0.715889573097229, 0.7235503792762756, 0.7234182953834534, 0.720380425453186, 0.7176066637039185, 0.7260599732398987, 0.724210798740387, 0.7293620109558105, 0.7301545143127441, 0.7322678565979004, 0.735041618347168, 0.7312111854553223, 0.7363624572753906, 0.7384757399559021, 0.7416457533836365, 0.7395324110984802, 0.7429665923118591, 0.7434949278831482, 0.7442874312400818, 0.737022876739502, 0.7512878179550171, 0.7437590956687927, 0.7493065595626831, 0.7486461400985718, 0.7430986762046814, 0.748778223991394], "val_loss": [1.946542739868164, 1.920576708657401, 1.8888732365199499, 1.8454879352024622, 1.7857154437473841, 1.704580511365618, 1.5994031429290771, 1.4767117159707206, 1.3435702664511544, 1.215634788785662, 1.1072307995387487, 1.01905471937997, 0.9521527630942208, 0.8988577978951591, 0.8534572465079171, 0.8188921213150024, 0.7885429859161377, 0.76197692326137, 0.7408704246793475, 0.7265152590615409, 0.7098343031747001, 0.6968961102621896, 0.6827537843159267, 0.6702048608234951, 0.6631722279957363, 0.6526009014674595, 0.6448815720421928, 0.6358076333999634, 0.6286142894199916, 0.6223466907228742, 0.6166098628725324, 0.609317558152335, 0.6050119059426444, 0.6010311501366752, 0.5955969776426043, 0.5903376340866089, 0.5875591891152518, 0.5828539303370884, 0.5790407998221261, 0.5759688104901995, 0.5713996376310077, 0.5697345222745623, 0.5650279011045184, 0.5622039522443499, 0.5601344278880528, 0.5585480417524066, 0.5538328545434135, 0.5526605674198696, 0.5487885134560722, 0.5458793980734689, 0.5430111033575875, 0.5403750283377511, 0.5408818551472255, 0.537441611289978, 0.5338233879634312, 0.5311230421066284, 0.5306656530925206, 0.5272124494825091, 0.5258970771517072, 0.5247900485992432, 0.5231994901384626, 0.5193122114453997, 0.5193376030240741, 0.5167047466550555, 0.5148522853851318, 0.5129719121115548, 0.5120449066162109], "val_accuracy": [0.23366667330265045, 0.3696666657924652, 0.4143333435058594, 0.4416666626930237, 0.4816666543483734, 0.5196666717529297, 0.5536666512489319, 0.5763333439826965, 0.5916666388511658, 0.6143333315849304, 0.637666642665863, 0.6633333563804626, 0.6696666479110718, 0.6706666946411133, 0.6796666383743286, 0.6886666417121887, 0.6869999766349792, 0.6980000138282776, 0.6983333230018616, 0.7020000219345093, 0.7089999914169312, 0.7070000171661377, 0.7170000076293945, 0.7200000286102295, 0.7223333120346069, 0.7273333072662354, 0.7296666502952576, 0.7283333539962769, 0.731333315372467, 0.7366666793823242, 0.7336666584014893, 0.7400000095367432, 0.7379999756813049, 0.7419999837875366, 0.7443333268165588, 0.7480000257492065, 0.7473333477973938, 0.7506666779518127, 0.749666690826416, 0.7543333172798157, 0.7546666860580444, 0.7513333559036255, 0.7573333382606506, 0.7546666860580444, 0.7613333463668823, 0.7573333382606506, 0.762333333492279, 0.7630000114440918, 0.7666666507720947, 0.7643333077430725, 0.7683333158493042, 0.765999972820282, 0.7703333497047424, 0.768666684627533, 0.7680000066757202, 0.7699999809265137, 0.7749999761581421, 0.7720000147819519, 0.7733333110809326, 0.7696666717529297, 0.7706666588783264, 0.7786666750907898, 0.7786666750907898, 0.7756666541099548, 0.777999997138977, 0.7766666412353516, 0.7753333449363708]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [2, 2, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7894285917282104, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2919691535129427, 2.2653268943326097, 2.2351158549520775, 2.1959533293359645, 2.142793287265381, 2.0700659131833734, 1.972454657801516, 1.8635339963044064, 1.7285505063214779, 1.5955497012115063, 1.4777406944716533, 1.3865811745283736, 1.3146846629467623, 1.249402413137081, 1.1871523111094227, 1.1498561133766503, 1.1014973003913728, 1.060382481642277, 1.0305440983264014, 1.0237966608361893, 0.9938651577687266, 0.9694771533314074, 0.9410378767231342, 0.924450879752943, 0.922022859174121, 0.8911848990373356, 0.8895513376838826, 0.8673730633356757, 0.8701380133518627, 0.8585430330068774, 0.8492746871885386, 0.8343885750141378, 0.8303921012405423, 0.8218704739093717, 0.816110551561961, 0.7966821149135263, 0.80271640629769, 0.7865458706098856, 0.7820865123846024, 0.7805593564226612, 0.7753269593666227, 0.7743783004374284, 0.7579926482800715, 0.7568805200029216, 0.7520706872772531, 0.75730044079526, 0.7387804307516902, 0.7444506739707214, 0.7331576696350401, 0.737513278201744, 0.7241403822334546, 0.7177952250170276, 0.7202046113778824, 0.713494644393664, 0.7125627906834838, 0.7035339705586008, 0.7040185719244295, 0.7017775501211038, 0.696785044455966, 0.6855778681320238, 0.699743808819523, 0.6844394975066925, 0.6893836443749527, 0.6793641919520363, 0.6796125349131211, 0.6730576079550862, 0.6778341277069845, 0.6729417241811595, 0.6717454816340581, 0.671497080548407, 0.6772792544961369, 0.67344217193503, 0.6609593209274346, 0.6655719540831183, 0.6638247071948774, 0.6533951357591579, 0.6515685429174383], "accuracy": [0.11847840249538422, 0.17857614159584045, 0.25320300459861755, 0.30947035551071167, 0.3463214933872223, 0.3899088501930237, 0.4154008626937866, 0.44049662351608276, 0.46849822998046875, 0.49293357133865356, 0.5218597054481506, 0.5392946600914001, 0.557390034198761, 0.5695416927337646, 0.5909391045570374, 0.5984678268432617, 0.6169594526290894, 0.6308281421661377, 0.6406022906303406, 0.6317527294158936, 0.6513010263442993, 0.6530181169509888, 0.6688680648803711, 0.6692643165588379, 0.6686038970947266, 0.6836613416671753, 0.6841896772384644, 0.6917183995246887, 0.6852463483810425, 0.6909258961677551, 0.6915863156318665, 0.6983225345611572, 0.7024171352386475, 0.6989829540252686, 0.7041342258453369, 0.713908314704895, 0.7063795924186707, 0.7094175219535828, 0.7106062769889832, 0.7153612375259399, 0.7156254053115845, 0.7162858247756958, 0.722757875919342, 0.7228899598121643, 0.719852089881897, 0.7172104120254517, 0.7257958054542542, 0.7239466309547424, 0.7285695672035217, 0.7296261787414551, 0.7323999404907227, 0.7349095344543457, 0.7313432693481445, 0.7367587089538574, 0.7386078238487244, 0.7413815855979919, 0.7386078238487244, 0.7430986762046814, 0.7432307600975037, 0.7446836829185486, 0.7362303733825684, 0.7516840696334839, 0.7427024245262146, 0.7491744756698608, 0.7483819723129272, 0.7434949278831482, 0.7491744756698608, 0.7489103078842163, 0.7467969655990601, 0.7460044622421265, 0.7490423917770386, 0.748249888420105, 0.7532690763473511, 0.748249888420105, 0.7518161535263062, 0.759609043598175, 0.7547219395637512], "val_loss": [1.94654267174857, 1.920576708657401, 1.8888730321611678, 1.8454863003322057, 1.785712378365653, 1.7045797279902868, 1.5994038581848145, 1.47670544896807, 1.3435685634613037, 1.2156361511775426, 1.1072371006011963, 1.0190667084285192, 0.9521569524492536, 0.8988961151668003, 0.8535171066011701, 0.8190057788576398, 0.7886439561843872, 0.7620439018521991, 0.7408842699868339, 0.72652120249612, 0.7098782232829502, 0.6969147069113595, 0.6827962739127023, 0.6702531746455601, 0.6632025923047747, 0.6526256288800921, 0.6448851994105748, 0.6358144964490619, 0.6286449432373047, 0.6223784514835903, 0.6166562523160662, 0.6093536274773734, 0.6050605944224766, 0.6010333129337856, 0.5955802031925747, 0.5903474943978446, 0.5875306129455566, 0.5827936785561698, 0.5790517670767648, 0.575912458556039, 0.5714296102523804, 0.5697686501911708, 0.5650215148925781, 0.5621596574783325, 0.5600191014153617, 0.5584063019071307, 0.5537445545196533, 0.5527154036930629, 0.5488404376166207, 0.5458863462720599, 0.5429461342947823, 0.5402274642671857, 0.540766750063215, 0.5370965344565255, 0.5337404693875994, 0.531124472618103, 0.5304925101143974, 0.5272529636110578, 0.5258421727589199, 0.524609889302935, 0.5229889154434204, 0.5191433259419033, 0.5192024196897235, 0.516576749937875, 0.514811600957598, 0.5129123074667794, 0.5118981088910785, 0.5099273068564278, 0.5099822793688092, 0.5098560537610736, 0.5064925977161953, 0.506568431854248, 0.5047010694231305, 0.5034164701189313, 0.5026207992008754, 0.5015132767813546, 0.4992836373192923], "val_accuracy": [0.23366667330265045, 0.3696666657924652, 0.4143333435058594, 0.4416666626930237, 0.4816666543483734, 0.5196666717529297, 0.5536666512489319, 0.5763333439826965, 0.5916666388511658, 0.6150000095367432, 0.637666642665863, 0.6633333563804626, 0.6700000166893005, 0.6710000038146973, 0.6796666383743286, 0.6886666417121887, 0.6880000233650208, 0.6980000138282776, 0.6980000138282776, 0.7020000219345093, 0.7089999914169312, 0.7070000171661377, 0.7170000076293945, 0.7203333377838135, 0.7229999899864197, 0.7269999980926514, 0.7303333282470703, 0.7283333539962769, 0.731333315372467, 0.7369999885559082, 0.7329999804496765, 0.7400000095367432, 0.7390000224113464, 0.7419999837875366, 0.7443333268165588, 0.7476666569709778, 0.746999979019165, 0.7506666779518127, 0.749666690826416, 0.7549999952316284, 0.7536666393280029, 0.7516666650772095, 0.7570000290870667, 0.7543333172798157, 0.7616666555404663, 0.7590000033378601, 0.7633333206176758, 0.762666642665863, 0.7676666378974915, 0.7646666765213013, 0.7673333287239075, 0.7670000195503235, 0.7706666588783264, 0.7693333625793457, 0.768666684627533, 0.7706666588783264, 0.7733333110809326, 0.7730000019073486, 0.7733333110809326, 0.7706666588783264, 0.7720000147819519, 0.7770000100135803, 0.7773333191871643, 0.7739999890327454, 0.7776666879653931, 0.7776666879653931, 0.7753333449363708, 0.7786666750907898, 0.7763333320617676, 0.7760000228881836, 0.778333306312561, 0.7836666703224182, 0.7826666831970215, 0.7799999713897705, 0.7786666750907898, 0.7803333401679993, 0.781000018119812]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 4, 0, 8, 8, 1, 7, 0, 3, 8, 3, 7, 8, 9, 3, 4, 6, 8, 7, 8, 2, 1, 4, 9, 7, 4, 9, 6, 5], [1, 2, 3, 1, 1, 2, 1, 2, 0, 2, 2, 0, 2, 2, 2, 0], [30, 8, 39, 25, 9, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.7882857322692871, "mapping_values": [1, 14, 14, 9, 5, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), alpha))), alpha)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2919691220219143, 2.265326862841581, 2.235115917934135, 2.1959552545715018, 2.142795428560867, 2.070067352543827, 1.9724559599240663, 1.863532423894356, 1.7285548264497559, 1.5955567190974946, 1.477749041027129, 1.386589390742481, 1.3146945757243014, 1.2494109826962772, 1.1871509551372132, 1.14986456810381, 1.1014894090702096, 1.060378107333684, 1.0305592796947693, 1.0238105478760369, 0.9938707132270828, 0.9694587810873088, 0.9410277851080425, 0.9244739375393451, 0.9220115334098649, 0.8911096620018046, 0.8895218854315167, 0.8673812200789753, 0.8701257324489573, 0.8585050695481916, 0.8491792072237065, 0.8343353228656576, 0.8303948879682818, 0.8218452287324903, 0.8160996798983402, 0.7966152774958547, 0.802699237294311, 0.7866720779382038, 0.7821460902226395, 0.7803658755810317, 0.7751144805856431, 0.7743313264034333, 0.7578424789083318, 0.7569406272208985, 0.7521154521762136, 0.7573440676792942, 0.7387458450679908, 0.74443939273478, 0.7329877682759415, 0.7375458485776911, 0.7242026457287742, 0.717901999774689, 0.7202297185059662, 0.7136135289634712, 0.7125968345010506, 0.7036338782880474, 0.7040022531867012, 0.701753802319024, 0.6965837319135635, 0.6857319268741313, 0.6997273253443502, 0.684748060691311, 0.6893396588002276, 0.6794712948068542, 0.6798974606717157, 0.672840031154435, 0.6778125187125992, 0.6729685697951069, 0.6718205356437296, 0.6715105712736571], "accuracy": [0.11847840249538422, 0.17857614159584045, 0.25320300459861755, 0.30947035551071167, 0.3463214933872223, 0.3897767663002014, 0.41526877880096436, 0.44062870740890503, 0.4682340621948242, 0.4931977391242981, 0.5218597054481506, 0.5391625761985779, 0.557390034198761, 0.5698058605194092, 0.5910711884498596, 0.5984678268432617, 0.6168273687362671, 0.6306960582733154, 0.6404702067375183, 0.631488561630249, 0.6514331102371216, 0.6528860330581665, 0.6691322326660156, 0.6688680648803711, 0.6688680648803711, 0.6836613416671753, 0.6837934255599976, 0.6917183995246887, 0.6845859289169312, 0.691850483417511, 0.6915863156318665, 0.6984546184539795, 0.7025492191314697, 0.6997754573822021, 0.7042662501335144, 0.7140403985977173, 0.7069079279899597, 0.7096816897392273, 0.7108704447746277, 0.7157574892044067, 0.715889573097229, 0.7156254053115845, 0.7240787148475647, 0.7238145470619202, 0.7195879220962524, 0.7176066637039185, 0.7260599732398987, 0.7240787148475647, 0.7293620109558105, 0.7297582626342773, 0.7326641082763672, 0.7354378700256348, 0.7312111854553223, 0.7357020378112793, 0.7387399077415466, 0.741909921169281, 0.7395324110984802, 0.7430986762046814, 0.743891179561615, 0.7440232634544373, 0.7368907928466797, 0.7506273984909058, 0.7433628439903259, 0.7498348951339722, 0.7481178045272827, 0.7427024245262146, 0.7485140562057495, 0.7486461400985718, 0.7465327978134155, 0.7460044622421265], "val_loss": [1.94654267174857, 1.920576708657401, 1.888873508998326, 1.8454883439200265, 1.7857155118669783, 1.7045782974788122, 1.5994043009621757, 1.476705721446446, 1.3435781342642648, 1.2156435421534948, 1.1072450705936976, 1.0190690926143102, 0.9521754809788295, 0.8989071505410331, 0.8535104479108538, 0.8189849172319684, 0.7886437347957066, 0.7620627880096436, 0.7409038203103202, 0.7265552452632359, 0.7098706960678101, 0.6969263553619385, 0.682768532208034, 0.6702449832643781, 0.6631577185222081, 0.6526315041950771, 0.6448603016989571, 0.6358204569135394, 0.6286595208304269, 0.6223865236554827, 0.6166732822145734, 0.6093030316489083, 0.6049933433532715, 0.6009902102606637, 0.5955590179988316, 0.5903724091393607, 0.5874272074018206, 0.5827545268195016, 0.5790055990219116, 0.575906787599836, 0.5713622229439872, 0.5697236401694161, 0.5649422236851284, 0.5620828185762677, 0.5600016457693917, 0.5583336012704032, 0.5537554025650024, 0.5526696613856724, 0.5488364355904716, 0.5458731821605137, 0.5430495398385184, 0.5404029914311, 0.5409826040267944, 0.5374442679541451, 0.5338049786431449, 0.5311422177723476, 0.5307151249476841, 0.527241553579058, 0.5258677005767822, 0.5247174671718052, 0.523134742464338, 0.5191751718521118, 0.5191932405744281, 0.5166679961340768, 0.5147988285337176, 0.5128694091524396, 0.5119463716234479, 0.5099703924996513, 0.5101203407560077, 0.5098092896597726], "val_accuracy": [0.23366667330265045, 0.3696666657924652, 0.4143333435058594, 0.4416666626930237, 0.4816666543483734, 0.5196666717529297, 0.5536666512489319, 0.5763333439826965, 0.5916666388511658, 0.6150000095367432, 0.637666642665863, 0.6633333563804626, 0.6700000166893005, 0.6710000038146973, 0.6796666383743286, 0.6886666417121887, 0.687666654586792, 0.6980000138282776, 0.6980000138282776, 0.7020000219345093, 0.7089999914169312, 0.7070000171661377, 0.7166666388511658, 0.7200000286102295, 0.7229999899864197, 0.7276666760444641, 0.7300000190734863, 0.7286666631698608, 0.731333315372467, 0.7369999885559082, 0.7333333492279053, 0.7403333187103271, 0.7383333444595337, 0.7426666617393494, 0.7443333268165588, 0.7476666569709778, 0.7456666827201843, 0.7523333430290222, 0.75, 0.7553333044052124, 0.7540000081062317, 0.7523333430290222, 0.7573333382606506, 0.7540000081062317, 0.7606666684150696, 0.7576666474342346, 0.762333333492279, 0.7633333206176758, 0.7663333415985107, 0.7646666765213013, 0.7683333158493042, 0.7663333415985107, 0.7703333497047424, 0.7689999938011169, 0.768666684627533, 0.7699999809265137, 0.7746666669845581, 0.7716666460037231, 0.7743333578109741, 0.7699999809265137, 0.7710000276565552, 0.7776666879653931, 0.7776666879653931, 0.7749999761581421, 0.777999997138977, 0.7776666879653931, 0.7760000228881836, 0.777999997138977, 0.7766666412353516, 0.7753333449363708]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 4, 2, 8, 8, 1, 7, 0, 1, 3, 3, 7, 8, 9, 3, 4, 6, 8, 7, 2, 2, 1, 4, 9, 7, 0, 2, 3, 5], [2, 2, 2, 2, 1, 1, 2, 2, 0, 3, 2, 0, 0, 2, 3, 0], [18, 8, 39, 58, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [9, 57]], "fitness": -0.3854285776615143, "mapping_values": [1, 22, 22, 14, 8, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), grad), grad)))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))))))))))), tf.math.sqrt(grad)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.4144270658776463, 2.3076432070885162, 2.3043916822503254, 2.3029632855242648, 2.283834997689042, 2.3012077879864763], "accuracy": [0.19759608805179596, 0.14714039862155914, 0.09576013684272766, 0.10170386731624603, 0.13234710693359375, 0.1216483935713768], "val_loss": [1.6053039005824499, 1.9752832821437292, 1.9733672823224748, 1.9711954934256417, 1.851541587284633, 1.97529479435512], "val_accuracy": [0.367000013589859, 0.10066666454076767, 0.10066666454076767, 0.156333327293396, 0.3213333189487457, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 2, 8, 9, 3, 4, 6, 9, 7, 8, 7, 8, 4, 3, 9, 4], [2, 2, 3, 0, 1, 2, 2, 2, 0, 1, 2, 0, 3, 2, 3, 0], [80, 8, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.3817142844200134, "mapping_values": [1, 31, 31, 20, 11, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), alpha)))))), tf.math.multiply(tf.math.multiply(tf.math.add(grad, grad), tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.4144229515432416, 2.3216149912786177, 2.3046523012174607, 2.303317358181729, 2.3029703179748537, 2.3030183702301845], "accuracy": [0.19535067677497864, 0.14529123902320862, 0.09338264167308807, 0.09734513610601425, 0.09866596013307571, 0.09813763201236725], "val_loss": [1.6082026958465576, 1.9752731323242188, 1.973820413861956, 1.9736793381827218, 1.9736799512590681, 1.973785672869001], "val_accuracy": [0.37433332204818726, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.09933333098888397, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 4, 8, 8, 8, 1, 7, 0, 3, 3, 0, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9, 9, 4, 1, 3, 1, 1, 8, 8, 3, 7, 3, 2, 6, 3, 1, 8, 2, 4, 6, 5], [1, 2, 3, 1, 1, 2, 2, 2, 0, 1, 2, 0, 3, 2, 3, 0, 0, 1, 1, 2, 0, 2, 3, 0, 3, 0], [30, 8, 39, 95, 98, 52, 94, 1, 66, 12, 71], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.37857142090797424, "mapping_values": [1, 70, 70, 44, 26, 11, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), grad)), grad)))), tf.math.add(alpha, alpha)), tf.math.add(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), alpha)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))))), alpha)), grad)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.414094827902898, 2.2901202978286066, 2.304184839725809, 2.296332597669562, 66671.42540449687, NaN], "accuracy": [0.19521859288215637, 0.15598995983600616, 0.09496764093637466, 0.13261127471923828, 0.15374454855918884, 0.10289261490106583], "val_loss": [1.6018764972686768, 1.9750391415187292, 1.972947325025286, 1.9009137153625488, 2070909.75, NaN], "val_accuracy": [0.37700000405311584, 0.10066666454076767, 0.10066666454076767, 0.1733333319425583, 0.09933333098888397, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 5, 2, 8, 8, 6, 9, 0, 3, 3, 3, 0, 8, 9, 3, 4, 9, 6, 7, 8, 7, 1, 4, 9, 2, 9], [0, 2, 3, 1, 1, 2, 1, 1, 0, 0, 2, 0, 3, 2, 3, 0, 1, 2, 2, 2, 0], [30, 8, 39, 25, 23, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1664.7274378231252, 28578.602151713778, 132076.68040054155, 361954.85079579975, 767361.6221519614, 1428241.2052734117], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09602430462837219, 0.10170386731624603, 0.10540219396352768, 0.09694888442754745], "val_loss": [5976.017438616072, 46012.28571428572, 153558.1205357143, 362050.4910714286, 704927.8928571428, 1215628.5714285714], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9], [3, 2, 3, 1, 1, 2, 1, 1, 0, 0, 2, 0, 3, 2, 3, 0, 1, 2, 2, 2, 0], [30, 8, 39, 25, 23, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 37, 37, 24, 13, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024271839503614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 6, 2, 8, 8, 5, 7, 0, 4, 3, 3, 7, 8, 9, 2, 6, 6, 9, 7, 8, 7, 1, 4, 9, 9, 4], [1, 2, 1, 1, 0, 2, 2, 2, 1, 1, 0, 0, 3, 2, 3, 0], [30, 84, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 21, 11, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, alpha), tf.math.multiply(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), grad))))))))))))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07449477910995483, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 1, 2, 6, 1, 7, 8, 5, 2, 6, 7, 3, 9, 3, 4, 6, 9, 7, 6, 7, 1, 4, 9], [3, 2, 3, 2, 1, 2, 2, 2, 2, 3, 2, 0, 3, 2, 3, 0], [30, 8, 51, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3, 4], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 2, 0, 1, 7, 8, 4], [3, 3, 0, 1, 3, 3], [79, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 4, 4, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.square(tf.math.add(alpha, grad)))))), grad), tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(sigma, sigma), tf.math.negative(tf.math.subtract(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 5, 2, 8, 8, 6, 9, 0, 3, 3, 3, 0, 8, 9, 3, 4, 9, 6, 7, 8, 7, 1, 4, 9, 2, 9], [2, 2, 3, 1, 1, 2, 1, 1, 0, 0, 2, 0, 3, 2, 3, 0, 1, 2, 2, 2, 0], [30, 8, 39, 25, 23, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [8, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 8, 4, 4, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.302591627709476, 2.302783838084912, 2.3028459966206327, 2.303055271449232, 2.302913853237579, 2.3028884763179787, 2.303411020027758, 2.303411386961226, 2.3034449749776416], "accuracy": [0.09272222965955734, 0.09826971590518951, 0.09985470771789551, 0.09760929644107819, 0.10051512718200684, 0.10434553027153015, 0.09998679161071777, 0.09998679161071777, 0.09919429570436478], "val_loss": [1.9736770221165247, 1.973670210157122, 1.9736221177237374, 1.973821026938302, 1.9738640104021346, 1.9740019525800432, 1.9743751798357283, 1.9740522929600306, 1.9740702765328544], "val_accuracy": [0.10000000149011612, 0.09833333641290665, 0.09966666996479034, 0.10066666454076767, 0.09799999743700027, 0.09799999743700027, 0.09833333641290665, 0.09833333641290665, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [3, 4, 2, 8, 0, 1, 7, 0, 3, 3, 0, 7, 8, 9, 3, 4, 6, 8, 7, 8, 7, 1, 4, 9, 7, 0, 9, 6, 5], [2, 2, 3, 2, 1, 1, 2, 2, 0, 3, 2, 0, 0, 2, 3, 0], [30, 8, 39, 16, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [88, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 41, 41, 27, 14, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), grad)), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.sqrt(alpha), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [698236588.6384082, 12956281817.182407, 60988483967.30683, 168408543114.60046, 358478111199.3364, 668936473215.7465], "accuracy": [0.09694888442754745, 0.09972262382507324, 0.09602430462837219, 0.10210011899471283, 0.10540219396352768, 0.09681680053472519], "val_loss": [2640481353.142857, 21116155026.285713, 71258385846.85715, 168898368073.14285, 329867460608.0, 569999116580.5714], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 4, 2, 4, 8, 1, 7, 0, 3, 3, 3, 7, 4, 8, 3, 4, 6, 8, 7, 8, 7, 1, 9, 9, 7, 2, 3, 6, 5], [2, 2, 3, 2, 1, 1, 2, 2, 0, 3, 2, 0, 2, 2, 3, 0], [73, 8, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [2, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 23, 16, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))))), grad))))), alpha), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, grad))), grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)))))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 4, 2, 0, 8, 1, 7, 2, 3, 3, 3, 7, 8, 9, 3, 4, 6, 8, 7, 8, 7, 1, 4, 9, 9, 4, 7, 4], [1, 0, 3, 0, 1, 1, 2, 2, 0, 1, 2, 0, 3, 2, 3, 0, 0], [60, 94, 39, 25, 98, 52, 94, 1, 43], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 5, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 45, 45, 28, 17, 9, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))), tf.math.add(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(sigma), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 2, 8, 8, 1, 7, 0, 8, 3, 3, 7, 8, 9, 3, 2, 6, 9, 7, 8, 7, 6, 4, 9, 9, 4], [1, 2, 3, 1, 1, 2, 2, 2, 0, 1, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 9, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4, 0], [3, 3, 0, 1, 3, 3], [28, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 36, 25, 11, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 13, 8, 5, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), grad))), alpha)))), tf.math.multiply(alpha, tf.math.add(tf.math.sqrt(grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.add(tf.math.sqrt(sigma), sigma), tf.math.pow(tf.math.negative(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), alpha))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 4, 2, 8, 8, 1, 7, 0, 3, 3, 9, 7, 8, 9, 3, 4, 6, 8, 5, 8, 7, 1, 4, 9, 7, 0, 9, 6, 5], [2, 2, 3, 1, 1, 1, 2, 2, 0, 1, 2, 2, 2, 2, 3, 0], [18, 8, 33, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [8, 0, 19], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [72, 57]], "fitness": -0.09971428662538528, "mapping_values": [1, 20, 20, 14, 6, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), alpha))), alpha))), tf.math.add(alpha, tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.4687585664415845, 4.256753794851871, 8.871009921511135, 16.07966957475216, 26.19178577408484, 40.011328960091696], "accuracy": [0.09232597798109055, 0.09932637959718704, 0.09496764093637466, 0.10077928751707077, 0.10672302544116974, 0.09681680053472519], "val_loss": [2.3454959051949635, 4.323543003627232, 8.114387784685407, 13.698877607073102, 21.26800319126674, 31.049453735351562], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 4, 2, 8, 8, 8, 9, 0, 3, 3, 3, 7, 8, 9, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9, 9, 4], [2, 1, 3, 2, 1, 1, 2, 2, 0, 3, 2, 0, 0, 2, 3, 0], [30, 8, 39, 25, 98, 52, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [93, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3029792049951117, 2.3027445217243923, 2.3026480995637235, 2.3029806640689494, 2.3017315084530203, 2.302475541164815], "accuracy": [0.09087307006120682, 0.08585391938686371, 0.08994849026203156, 0.09219389408826828, 0.08968432247638702, 0.08545766770839691], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 4, 2, 8, 8, 1, 7, 0, 1, 3, 3, 7, 8, 2, 3, 4, 6, 9, 7, 8, 7, 1, 4, 9, 0, 3, 9, 2, 7, 1], [2, 2, 3, 2, 1, 0, 2, 2, 0, 2, 2, 0, 0, 2, 3, 0, 2], [98, 53, 15, 25, 98, 52, 94, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [0, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 0, 4, 7, 0, 4], [3, 0, 0, 3, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 12, 7, 5, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.negative(sigma), tf.math.pow(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(sigma, sigma)))))", "other_info": {"loss": [2.3029792049951117, 2.3027445217243923, 2.3026480995637235, 2.3029806640689494, 2.3017315084530203, 2.302475541164815], "accuracy": [0.09087307006120682, 0.08585391938686371, 0.08994849026203156, 0.09219389408826828, 0.08968432247638702, 0.08545766770839691], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 4, 6, 8, 8, 1, 9, 0, 3, 3, 2, 7, 8, 9, 3, 4, 6, 9, 7, 4, 7, 1, 4, 9, 9, 4], [1, 2, 3, 1, 1, 2, 2, 2, 1, 2, 2, 0, 3, 2, 3, 0], [30, 8, 39, 25, 98, 32, 94, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1], [2, 9, 7, 1, 7, 5, 5, 9], [3, 4, 3], [8, 0, 19], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [0, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [28, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 13, 13, 9, 4, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, grad), alpha))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3029792049951117, 2.3027445217243923, 2.3026480995637235, 2.3029806640689494, 2.3017315084530203, 2.302475541164815], "accuracy": [0.09087307006120682, 0.08585391938686371, 0.08994849026203156, 0.09219389408826828, 0.08968432247638702, 0.08545766770839691], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]