[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8234285712242126, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 4, 6, 5, 4, 1, 1, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1911346146837123, 2.1694014758135367, 2.1042341675189635, 1.6673386481774717, 1.1087904125156813, 0.8375847386787942, 0.7466392031655634, 0.7126127419187062, 0.6687110166791533, 0.642472770645193, 0.6356586091128859, 0.5962502348534797, 0.568245220303992, 0.580802874770761, 0.5871090809619658, 0.538857773916675, 0.5370859877859455, 0.5537977303850526, 0.5220715675875496, 0.47485234485940375, 0.5013078812673627, 0.5005911137363017, 0.4638530520982809, 0.47385764935265096, 0.48002914022130266, 0.455043796806634, 0.49042381069301505, 0.43973669588857117, 0.4294743894735552, 0.44281319853274137, 0.44087669006538366, 0.42083698932316166, 0.4130227404964315, 0.426778356404809, 0.4195657122711448, 0.38764773792814916, 0.40421886169175114, 0.3979184178707071], "accuracy": [0.2635054886341095, 0.2775062620639801, 0.2829216718673706, 0.452119916677475, 0.6020340919494629, 0.6793025732040405, 0.7145687341690063, 0.7275128960609436, 0.7454761862754822, 0.7568352818489075, 0.7602694630622864, 0.7769119143486023, 0.7898560166358948, 0.7791573405265808, 0.7803460359573364, 0.793422281742096, 0.7980451583862305, 0.7923656105995178, 0.800818920135498, 0.8265751004219055, 0.8115176558494568, 0.8112534880638123, 0.8297450542449951, 0.8222163319587708, 0.8157442808151245, 0.8314621448516846, 0.8127063512802124, 0.8367455005645752, 0.8374059200286865, 0.8368775844573975, 0.8342359066009521, 0.8437458872795105, 0.8498216867446899, 0.8424250483512878, 0.8466516733169556, 0.8540483713150024, 0.8467837572097778, 0.8561616539955139], "val_loss": [1.9693901198250907, 1.795966693333217, 1.756943907056536, 0.8444406305040631, 0.657863940511431, 0.6490387235369001, 0.6051326138632638, 0.5516783680234637, 0.53659040587289, 0.4825554575238909, 0.5281565870557513, 0.4575507640838623, 0.506716217313494, 0.5039916208812169, 0.4404268094471523, 0.4505216564450945, 0.44293919631413053, 0.47188753741128103, 0.4089244604110718, 0.4279146024159023, 0.4250933698245457, 0.40919950178691317, 0.4197918346949986, 0.4227913532938276, 0.45473054477146696, 0.4132699540683201, 0.37041635172707693, 0.39024570158549715, 0.3774649585996355, 0.3886361377579825, 0.37991346631731304, 0.39438715151378084, 0.37203459228788105, 0.3776546631540571, 0.3878970742225647, 0.38141030073165894, 0.38211214542388916, 0.36262382779802593], "val_accuracy": [0.2563333213329315, 0.3383333384990692, 0.38233333826065063, 0.6510000228881836, 0.6996666789054871, 0.699999988079071, 0.7173333168029785, 0.7363333106040955, 0.762666642665863, 0.784333348274231, 0.7516666650772095, 0.7953333258628845, 0.7763333320617676, 0.7379999756813049, 0.809333324432373, 0.784333348274231, 0.7979999780654907, 0.7896666526794434, 0.8273333311080933, 0.8113333582878113, 0.812333345413208, 0.8306666612625122, 0.812333345413208, 0.8173333406448364, 0.7889999747276306, 0.8143333196640015, 0.8429999947547913, 0.8299999833106995, 0.8413333296775818, 0.8320000171661377, 0.843999981880188, 0.8346666693687439, 0.8450000286102295, 0.8349999785423279, 0.8273333311080933, 0.831333339214325, 0.8263333439826965, 0.8450000286102295]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [0, 2, 5, 3, 2, 2, 2, 4, 2, 0], [89, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [2, 0, 0, 9, 7], [0, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.8205714225769043, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.190934685227295, 2.16931687914826, 2.1994632579678512, 2.0254138762909015, 1.4714791333088078, 0.982906174996683, 0.8222764810755615, 0.7435289386193892, 0.7128022565518577, 0.665015592456667, 0.6436897802740245, 0.618090835340019, 0.6036767254510591, 0.5841830828249368, 0.5838464376098523, 0.5474293538214366, 0.5339447573789784, 0.5375791022633013, 0.5368957569641349, 0.5122703547490949, 0.5087044076314298, 0.5069466882598493, 0.46830531630014083, 0.4832980814249036, 0.47736659909771606, 0.44978535320182217, 0.47795431643602415, 0.46574966116840216, 0.4433564391976665, 0.4421651753428558, 0.4416848579654132, 0.44149016255023], "accuracy": [0.26363757252693176, 0.27658170461654663, 0.2566371560096741, 0.32782986760139465, 0.5262184739112854, 0.657508909702301, 0.7025492191314697, 0.7290979027748108, 0.7354378700256348, 0.7547219395637512, 0.7589486241340637, 0.7729493975639343, 0.7775723338127136, 0.783119797706604, 0.7828556299209595, 0.7987055778503418, 0.8033285140991211, 0.8033285140991211, 0.7993659973144531, 0.8117818236351013, 0.8120459914207458, 0.8067626357078552, 0.8264430165290833, 0.8241975903511047, 0.8241975903511047, 0.8314621448516846, 0.8212917447090149, 0.8248580098152161, 0.8350284099578857, 0.8350284099578857, 0.8310658931732178, 0.8372738361358643], "val_loss": [1.9693820817129952, 1.8217729840959822, 1.9670890399387904, 1.2091296059744698, 0.9868133749280658, 0.7288566146578107, 0.603712967463902, 0.5963804040636335, 0.5217076029096331, 0.484959466116769, 0.5166445459638324, 0.47516209738595144, 0.4596579074859619, 0.45718962805611746, 0.46895759446280344, 0.4515970093863351, 0.44480070046016146, 0.527785096849714, 0.41422321115221294, 0.4182114005088806, 0.44949712072099957, 0.4331767473902021, 0.4133738705090114, 0.45462283066340853, 0.3940172365733555, 0.41882820640291485, 0.38199922016688753, 0.3933821831430708, 0.40490202392850605, 0.40111589431762695, 0.39374869210379465, 0.37768317120415823], "val_accuracy": [0.25600001215934753, 0.3296666741371155, 0.19099999964237213, 0.5613333582878113, 0.6663333177566528, 0.6413333415985107, 0.7286666631698608, 0.7129999995231628, 0.7716666460037231, 0.778333306312561, 0.7606666684150696, 0.7956666946411133, 0.8046666383743286, 0.7876666784286499, 0.7976666688919067, 0.8056666851043701, 0.8103333115577698, 0.7676666378974915, 0.8180000185966492, 0.8159999847412109, 0.8026666641235352, 0.8180000185966492, 0.8240000009536743, 0.8100000023841858, 0.8333333134651184, 0.8133333325386047, 0.8403333425521851, 0.82833331823349, 0.8180000185966492, 0.8246666789054871, 0.8363333344459534, 0.8383333086967468]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [0, 3, 0, 0, 0, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8168571591377258, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 4, 5, 4, 2, 2, 1, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), beta)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1910736948161187, 2.1708295771065105, 2.166714246325631, 1.8357032222235128, 1.2416241445309608, 0.9851986608800005, 0.7856477311794012, 0.7173941686656954, 0.6675952350017874, 0.6344805844723509, 0.6390161687010519, 0.6148150590794701, 0.5791457234482645, 0.5810379224005565, 0.5725673914128889, 0.5420230259795813, 0.5411590986232306, 0.5346587756684333, 0.5211837666027771, 0.489252285541025, 0.4856459540367252, 0.49128104858725313, 0.46418680471278706, 0.4933372890519397], "accuracy": [0.2635054886341095, 0.27618545293807983, 0.26641130447387695, 0.3863426148891449, 0.5736362338066101, 0.6548672318458557, 0.7113987803459167, 0.7325320243835449, 0.7511557340621948, 0.7662131786346436, 0.759080708026886, 0.7685906887054443, 0.7866860628128052, 0.7798177003860474, 0.7844406366348267, 0.7943468689918518, 0.8010830879211426, 0.805177628993988, 0.8103289008140564, 0.8204993009567261, 0.819442629814148, 0.8202351331710815, 0.829216718673706, 0.8145555257797241], "val_loss": [1.9693901198250907, 1.8358307565961565, 1.9102792058672224, 1.1167066437857491, 0.7457117353166852, 0.5796696969441005, 0.5759558847972325, 0.5834437097821917, 0.5261190789086478, 0.4925436122076852, 0.4968457392283848, 0.4588545560836792, 0.46573208059583393, 0.45952391624450684, 0.45103580611092703, 0.49818663937704905, 0.43864601850509644, 0.43627677645002094, 0.40218048436301096, 0.4043070248195103, 0.4407247815813337, 0.42296730620520456, 0.41991961002349854, 0.42962918111256193], "val_accuracy": [0.25566667318344116, 0.320333331823349, 0.2770000100135803, 0.5056666731834412, 0.6796666383743286, 0.7390000224113464, 0.7356666922569275, 0.7226666808128357, 0.7733333110809326, 0.7796666622161865, 0.7720000147819519, 0.7990000247955322, 0.8033333420753479, 0.7703333497047424, 0.7983333468437195, 0.7789999842643738, 0.8143333196640015, 0.8100000023841858, 0.8323333263397217, 0.8236666917800903, 0.8106666803359985, 0.8233333230018616, 0.8223333358764648, 0.8183333277702332]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 3, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8125714063644409, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 3, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.sqrt(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1909422346975953, 2.169090726372116, 2.138082106509276, 2.0366249882612784, 1.4458851437637315, 1.0203247781931024, 0.8054719749238308, 0.7352145790912062, 0.6999585278959102, 0.6731535494130726, 0.6085373705183872, 0.6294018662585212, 0.6100152573958993, 0.6102327840943237, 0.5767191794680377, 0.53827096392938, 0.5646036335931022, 0.5328602697737166, 0.5301527988562699, 0.4913837193986129, 0.49308063310481587, 0.5211872754631073, 0.4637403254495746, 0.47625084319182076], "accuracy": [0.26337340474128723, 0.27684587240219116, 0.26760005950927734, 0.3057720363140106, 0.5254259705543518, 0.6544709801673889, 0.7000396251678467, 0.7357020378112793, 0.7346453666687012, 0.7494386434555054, 0.772288978099823, 0.7664773464202881, 0.7783648371696472, 0.7729493975639343, 0.780610203742981, 0.8050455451011658, 0.7881389260292053, 0.7979130744934082, 0.8016114234924316, 0.8186501264572144, 0.817461371421814, 0.8001585006713867, 0.8327829837799072, 0.8247259259223938], "val_loss": [1.9693914822169714, 1.7949122020176478, 1.908282961164202, 1.3564149311610632, 0.8716496740068708, 0.693051951272147, 0.6334242650440761, 0.6162506512233189, 0.5473967790603638, 0.4841697897229876, 0.5826928445271083, 0.47413294655936106, 0.4999942438943045, 0.45742721217019217, 0.46993063177381245, 0.4485518421445574, 0.44603393759046284, 0.4832133395331247, 0.4168547987937927, 0.4174138137272426, 0.4411547524588449, 0.4371593339102609, 0.40474317755017963, 0.4534378562654768], "val_accuracy": [0.25733333826065063, 0.335999995470047, 0.29100000858306885, 0.562666654586792, 0.6819999814033508, 0.7006666660308838, 0.7153333425521851, 0.7116666436195374, 0.7593333125114441, 0.7879999876022339, 0.7260000109672546, 0.7919999957084656, 0.7696666717529297, 0.7796666622161865, 0.7903333306312561, 0.7879999876022339, 0.7926666736602783, 0.781333327293396, 0.8299999833106995, 0.8143333196640015, 0.8056666851043701, 0.8166666626930237, 0.8276666402816772, 0.8026666641235352]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [8, 5, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [0, 3, 5, 3, 2, 2, 2, 4, 2, 0], [89, 47, 79, 81, 53, 45], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1], [2, 9, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8117142915725708, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1909552971448534, 2.1706870583148916, 2.215204117840087, 1.9988411899098568, 1.565667032990804, 1.0312010685466362, 0.8241365942279849, 0.74757686494726, 0.7438328113412309, 0.6628158601236349, 0.6581724775371267, 0.6336644456497099, 0.5972531036914316, 0.5837943780738696, 0.5674594880221085, 0.5474851852268858, 0.5572179845059316, 0.5492827587155398, 0.5402647469297549, 0.5000966040213598, 0.49894286197930154, 0.5051702835091888, 0.4849963683682725, 0.48712368014466256, 0.4686183644764459, 0.45059131611576014, 0.5046299621807255, 0.4685973970448541, 0.44156441326705675, 0.4538136906375691, 0.43510806487299714, 0.44682691358162696, 0.42253572899336983, 0.4512290984899959, 0.41537806522010134, 0.3995906227749132, 0.40349125412587145], "accuracy": [0.2635054886341095, 0.27644962072372437, 0.2642979919910431, 0.30947035551071167, 0.48831066489219666, 0.6367719173431396, 0.695813000202179, 0.724210798740387, 0.7248712182044983, 0.7539294958114624, 0.7490423917770386, 0.7609298825263977, 0.78113853931427, 0.7861577272415161, 0.7865539789199829, 0.7928939461708069, 0.7882710099220276, 0.7922335267066956, 0.8014793395996094, 0.8141592741012573, 0.8145555257797241, 0.8125742673873901, 0.8207634687423706, 0.8165367841720581, 0.8228767514228821, 0.8330471515655518, 0.8058380484580994, 0.8249900937080383, 0.8358209133148193, 0.8267071843147278, 0.8393871188163757, 0.8302733898162842, 0.842028796672821, 0.8308017253875732, 0.8404437899589539, 0.8500858545303345, 0.8486329317092896], "val_loss": [1.9693473407200404, 1.8812242235456194, 1.9635635784694128, 1.3453597000667028, 1.06913161277771, 0.7181769779750279, 0.5650250230516706, 0.71104781968253, 0.5419534274509975, 0.4818318911961147, 0.4958669628415789, 0.4733515126364572, 0.46972833360944477, 0.48686703613826204, 0.4453977346420288, 0.5045268876211983, 0.4445933444159372, 0.4768838371549334, 0.40746402740478516, 0.4518854447773525, 0.44809707573481966, 0.4279038565499442, 0.41116814953940256, 0.4519237961087908, 0.4031058635030474, 0.4055743472916739, 0.40539486919130596, 0.389137864112854, 0.40251636505126953, 0.40063686881746563, 0.40174323320388794, 0.38122449602399555, 0.39269173996789114, 0.3829696774482727, 0.3839425529752459, 0.40046546288899015, 0.389808075768607], "val_accuracy": [0.25866666436195374, 0.27000001072883606, 0.2056666612625122, 0.5483333468437195, 0.6066666841506958, 0.6783333420753479, 0.7490000128746033, 0.6963333487510681, 0.7726666927337646, 0.781000018119812, 0.7866666913032532, 0.7826666831970215, 0.7990000247955322, 0.7743333578109741, 0.8100000023841858, 0.7643333077430725, 0.8086666464805603, 0.7866666913032532, 0.8270000219345093, 0.7993333339691162, 0.7956666946411133, 0.8216666579246521, 0.8293333053588867, 0.8019999861717224, 0.8323333263397217, 0.8276666402816772, 0.8306666612625122, 0.824999988079071, 0.8246666789054871, 0.8336666822433472, 0.8296666741371155, 0.8396666646003723, 0.828000009059906, 0.8320000171661377, 0.8333333134651184, 0.8309999704360962, 0.8289999961853027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 8, 3, 2, 7, 1, 1, 8, 6, 5, 8, 9], [1, 3, 2, 0, 0, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [4, 0, 8, 9, 7], [3, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [71, 57, 26]], "fitness": -0.26342856884002686, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 2, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.subtract(alpha, tf.math.add(beta, grad)), beta), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), beta))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.2594480923909743, 3.7892473988828406, 2.3125027114090715, 2.305111542794809, 2.3034297885864543, 2.3030599289409017], "accuracy": [0.1694624274969101, 0.22057852149009705, 0.09840179979801178, 0.09945846349000931, 0.09853387624025345, 0.09470347315073013], "val_loss": [1.973320143563407, 1.9887903758457728, 1.9768578665597099, 1.9745829445975167, 1.9739015442984444, 1.9737941196986608], "val_accuracy": [0.19366666674613953, 0.09833333641290665, 0.09833333641290665, 0.09799999743700027, 0.09833333641290665, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 9, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 2, 0, 3, 2, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [4, 0, 6, 9, 7], [3, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 5, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 6, 5, 4, 1, 1, 7, 4, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, sigma))), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.square(alpha), tf.math.negative(tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [109782040696.46452, 2.3282175612030813, 2.3294738466398606, 2.3308016807647856, 2.3322684015060666, 2.3337307423805878], "accuracy": [0.09430722147226334, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.994626249585833, 1.995649950844901, 1.9967501504080636, 1.9979126112801688, 1.9991332462855749, 2.000495638166155], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 0, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 2, 0, 0, 3, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 2, 8, 9, 7], [3, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [64, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 2, 3, 1, 1, 0, 0, 7, 4, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07026813179254532, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 0, 4, 7, 5, 6, 9, 0, 2, 8, 9], [1, 3, 0, 3, 2, 3, 2, 4, 2, 0], [17, 47, 79, 81, 53, 45], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 2, 1, 2, 3], [0, 0, 0, 2, 3, 3, 2], [48, 57, 22]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 12, 5, 3, 6, 4, 3, 1, 0, 6, 3, 3, 3], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.sqrt(grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), beta)), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3020987010288705, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 8, 2, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 3, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 1, 5, 4, 2, 2, 1, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [4.276623795595433e+32, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.13472460210323334, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 2, 5, 2, 7, 5, 1, 8, 2, 5, 8, 9], [0, 3, 5, 3, 2, 2, 2, 4, 2, 0], [89, 47, 79, 81, 53, 45], [0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [0, 0, 0, 2, 3, 3, 2], [41, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2448556.2249470544, 47380613.926826045, 218258043.89591864, 600263247.3258486, 1276805994.0044909, 2370490738.8297453], "accuracy": [0.09509972482919693, 0.09906221181154251, 0.09800554811954498, 0.09747721254825592, 0.09787346422672272, 0.10157178342342377], "val_loss": [9366254.857142856, 74747145.14285715, 252068662.85714287, 597257179.4285715, 1166236635.4285715, 2014934381.7142856], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 3, 2, 4, 2, 0], [89, 47, 79, 81, 53, 45], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [74, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 7, 4, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07013604789972305, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 0, 2, 3, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1], [0, 3, 8, 9, 7], [3, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 2, 2, 1, 1, 0, 0, 7, 4, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.pow(alpha, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, beta)))))), grad)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06696605682373047, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 2, 7, 5, 0, 8, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 3, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 3, 6, 5, 4, 1, 1, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08321225643157959, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 2, 6, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [57, 45, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [18, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 4, 6, 5, 4, 1, 1, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.subtract(alpha, tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [0, 3, 3, 3, 2, 2, 2, 4, 2, 0], [89, 47, 79, 81, 53, 45], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [1, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 1, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 1, 3, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.add(beta, grad)), grad)), beta), tf.math.divide_no_nan(tf.math.add(beta, beta), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, alpha))", "other_info": {"loss": [2.303131104680793, 2.306904032686682, 2.308217641998984, 2.3094998715402837, 2.3134837465169107, 2.3161194622713452, 2.3226177532753813, 2.325458453457668, 2.3313839280011712, 2.348383807613235, 2.392977028852913, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08387266844511032, 0.08532558381557465, 0.08598599582910538, 0.07753269374370575, 0.07607977837324142, 0.07528728246688843, 0.07475894689559937, 0.07370228320360184, 0.07185312360525131, 0.0754193663597107, 0.07911768555641174, 0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.972339153289795, 1.973947184426444, 1.9756403650556291, 1.9776609284537179, 1.9799371446881975, 1.9828070913042342, 1.9861085074288505, 1.990237099783761, 1.9963488578796387, 2.0116545132228305, 2.1180620874677385, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03233333304524422, 0.026000000536441803, 0.02500000037252903, 0.024666666984558105, 0.03099999949336052, 0.03866666555404663, 0.05666666850447655, 0.07066666334867477, 0.08566666394472122, 0.09933333098888397, 0.09933333098888397, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 9, 3, 2, 7, 5, 1, 8, 4, 5, 8, 9], [1, 3, 0, 3, 0, 2, 2, 4, 2, 0], [57, 47, 44, 81, 53, 45], [0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1], [2, 6, 2, 9, 7], [1, 0], [42, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [41, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 3, 7, 5, 4, 1, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(grad, tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07026813179254532, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 5, 7, 5, 1, 8, 6, 5, 8, 9], [1, 0, 3, 0, 0, 2, 2, 4, 2, 0], [80, 57, 79, 81, 53, 45], [0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1], [2, 0, 2, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 2, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 14, 14, 9, 5, 4, 6, 4, 3, 1, 0, 4, 2, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.square(alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [3, 3, 0, 5, 2, 3, 2, 4, 2, 0], [57, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07026813179254532, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 9, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 3, 0, 1, 2, 2, 4, 2, 0], [89, 47, 79, 68, 53, 45], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 2, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07026813179254532, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]