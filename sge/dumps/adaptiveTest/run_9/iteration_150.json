[{"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.826285719871521, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), grad), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9747865880248947, 1.3950268113302942, 1.044741181279564, 0.8684394546330424, 0.7855697142496841, 0.7506704469634683, 0.7300298104999781, 0.6991983181087805, 0.6844387440523373, 0.6522748395515203, 0.6736158296463906, 0.6387887180615189, 0.6282041195424288, 0.6064238805166876, 0.5943445658261797, 0.5677856183196922, 0.5914900860750538, 0.5615373634312683, 0.549818687986279, 0.5524398513820272, 0.5418846440778164, 0.537728070354638, 0.5466478472341085, 0.4988690382296525, 0.5035227574078383, 0.4905504968030625, 0.5012368445918545, 0.4852005773374134, 0.48092521190359894, 0.4636787070558528, 0.4529452274354568, 0.4514918114412824, 0.4463275728870014, 0.45668898233333205, 0.4425816219189321, 0.42901059937530645, 0.42359008105392265, 0.4306772657790755, 0.42092358375175076, 0.4159080067433229, 0.4267655757471492, 0.41180372495204703, 0.39077376423416166, 0.41194886243921214], "accuracy": [0.34883105754852295, 0.5205389261245728, 0.6264694333076477, 0.6827367544174194, 0.7033417224884033, 0.7180029153823853, 0.7191916704177856, 0.7372870445251465, 0.7317395210266113, 0.7543256878852844, 0.7437590956687927, 0.7555144429206848, 0.7633073329925537, 0.7677981853485107, 0.767401933670044, 0.7848368883132935, 0.7733456492424011, 0.7845727205276489, 0.793422281742096, 0.7926297783851624, 0.7959318161010742, 0.7959318161010742, 0.7893276810646057, 0.8124422430992126, 0.809140145778656, 0.8164047002792358, 0.8146876096725464, 0.8211596608161926, 0.8193105459213257, 0.8309338092803955, 0.8308017253875732, 0.8347642421722412, 0.8366134166717529, 0.8286884427070618, 0.8339717388153076, 0.8451988101005554, 0.8421608805656433, 0.8418967127799988, 0.8425571322441101, 0.8511425256729126, 0.8409721255302429, 0.8471800088882446, 0.8556333184242249, 0.8418967127799988], "val_loss": [1.3508152621132987, 0.8059174503598895, 0.697452323777335, 0.6823755502700806, 0.6177116802760533, 0.600942781993321, 0.5558075564248222, 0.6092543261391776, 0.5520532471793038, 0.621955122266497, 0.5982768195016044, 0.505792396409171, 0.4957873821258545, 0.4818826232637678, 0.47058820724487305, 0.5208162409918649, 0.4587674822126116, 0.4750241722379412, 0.45288377148764475, 0.4651728357587542, 0.4326687455177307, 0.47265187331608366, 0.42074587515422274, 0.4154110039983477, 0.42351374455860685, 0.40711443764822824, 0.41113340854644775, 0.40007111855915617, 0.4161560961178371, 0.4141588636807033, 0.4126758319990976, 0.38145690304892405, 0.4268127679824829, 0.3797597033636911, 0.3924899527004787, 0.3726086105619158, 0.37903668199266705, 0.37339638812201364, 0.36577104670660837, 0.3873415844781058, 0.37472650834492277, 0.36637929507664274, 0.3777613639831543, 0.36561812673296246], "val_accuracy": [0.47600001096725464, 0.6539999842643738, 0.7070000171661377, 0.6936666369438171, 0.7300000190734863, 0.7206666469573975, 0.7646666765213013, 0.7136666774749756, 0.7486666440963745, 0.718666672706604, 0.7133333086967468, 0.7733333110809326, 0.7806666493415833, 0.7889999747276306, 0.7896666526794434, 0.765666663646698, 0.7940000295639038, 0.7886666655540466, 0.8050000071525574, 0.7940000295639038, 0.8069999814033508, 0.777999997138977, 0.812666654586792, 0.8186666369438171, 0.8146666884422302, 0.8180000185966492, 0.8169999718666077, 0.8263333439826965, 0.8133333325386047, 0.8213333487510681, 0.8106666803359985, 0.8289999961853027, 0.7973333597183228, 0.8363333344459534, 0.8286666870117188, 0.8376666903495789, 0.82833331823349, 0.8366666436195374, 0.8423333168029785, 0.8240000009536743, 0.8396666646003723, 0.8413333296775818, 0.8349999785423279, 0.8396666646003723]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [6, 4, 0, 2, 7, 3, 2, 1, 3], [0, 4, 3, 0, 3, 0, 2, 5, 2], [75, 0, 41, 42], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.8237142562866211, "mapping_values": [1, 3, 3, 3, 0, 1, 18, 18, 9, 9, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.subtract(grad, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), beta)), tf.math.add(beta, grad)))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9749803132132895, 1.3977128607863685, 1.0347246632300757, 0.868326902854019, 0.7650146479257708, 0.7759187858590613, 0.7227876949713388, 0.7085996608944491, 0.6957323944107291, 0.6445388331657009, 0.6538516785789553, 0.6587063577496034, 0.5941013940699175, 0.610664566580992, 0.5844875043803013, 0.5846397950349782, 0.5823074672609792, 0.5683688394082709, 0.5439180579041887, 0.550918920716243, 0.5431119701991763, 0.5379482226726984, 0.5470341234049069, 0.5032690617040226, 0.5030792328376402, 0.4938483636148728, 0.5013008430539152, 0.4863250361000936, 0.4710485508035376, 0.46678923500873754, 0.45378609923733193, 0.4502109113764281, 0.4477116879400025, 0.45027228818278603, 0.43813832821217447, 0.4298553517576159, 0.424723101160577, 0.43312562892875023, 0.41745111271453617, 0.4124109338004087, 0.4255265291372326, 0.41040939151288147, 0.3908611531184255], "accuracy": [0.34883105754852295, 0.5177651643753052, 0.6238277554512024, 0.683529257774353, 0.7117950320243835, 0.7074362635612488, 0.728701651096344, 0.728701651096344, 0.7275128960609436, 0.7565711140632629, 0.7548540234565735, 0.748778223991394, 0.7721568942070007, 0.7633073329925537, 0.7778365015983582, 0.7730814814567566, 0.780610203742981, 0.785629391670227, 0.7948752045631409, 0.7940827012062073, 0.796328067779541, 0.7957997918128967, 0.7921014428138733, 0.8123101592063904, 0.8104609847068787, 0.8164047002792358, 0.8148196935653687, 0.8191784620285034, 0.8227446675300598, 0.8261788487434387, 0.8293488025665283, 0.8325188159942627, 0.8333113193511963, 0.830669641494751, 0.8360850811004639, 0.8430854678153992, 0.8407079577445984, 0.842028796672821, 0.8421608805656433, 0.8494254350662231, 0.8422929644584656, 0.846387505531311, 0.8573504090309143], "val_loss": [1.3515324933188302, 0.8076894453593663, 0.7003333057676043, 0.644848108291626, 0.6218752690723964, 0.6181936093739101, 0.5622419800077166, 0.593828661101205, 0.5430865117481777, 0.5499598128455025, 0.5834446975163051, 0.496489201273237, 0.5217356852122715, 0.4868530035018921, 0.5063220773424421, 0.505003809928894, 0.4577610833304269, 0.4688667910439627, 0.4550332341875349, 0.46553841659000944, 0.4287770986557007, 0.4734002011162894, 0.42138783420835224, 0.424806433064597, 0.4238283038139343, 0.41069407973970684, 0.4046340159007481, 0.40297460556030273, 0.42395831857408794, 0.41015784229551044, 0.4134565676961626, 0.3816551310675485, 0.4171909179006304, 0.38218882254191805, 0.3923316257340567, 0.37578773498535156, 0.38685381412506104, 0.3683356557573591, 0.3673392193658011, 0.39170042106083464, 0.3752932718821934, 0.3662651096071516, 0.3776683041027614], "val_accuracy": [0.47433334589004517, 0.6506666541099548, 0.7036666870117188, 0.7213333249092102, 0.7226666808128357, 0.7116666436195374, 0.7590000033378601, 0.7293333411216736, 0.7559999823570251, 0.7516666650772095, 0.737333357334137, 0.7699999809265137, 0.7540000081062317, 0.7829999923706055, 0.7620000243186951, 0.768666684627533, 0.7950000166893005, 0.7910000085830688, 0.8043333292007446, 0.7923333048820496, 0.812666654586792, 0.7753333449363708, 0.8130000233650208, 0.8113333582878113, 0.8119999766349792, 0.8153333067893982, 0.8190000057220459, 0.8243333101272583, 0.8059999942779541, 0.8253333568572998, 0.8109999895095825, 0.8286666870117188, 0.8076666593551636, 0.8343333601951599, 0.8303333520889282, 0.8360000252723694, 0.8270000219345093, 0.843999981880188, 0.8403333425521851, 0.8206666707992554, 0.8393333554267883, 0.8420000076293945, 0.8353333473205566]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [5, 4, 3, 0], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [35, 57]], "fitness": -0.7925714254379272, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"lossaccuracy": [0.1912561058998108, 0.3859463632106781, 0.4846123456954956, 0.5686171054840088, 0.6126006841659546, 0.6503764390945435, 0.6695284843444824, 0.6915863156318665, 0.6980583667755127, 0.7047945857048035, 0.7071720957756042, 0.7152291536331177, 0.7284374833106995, 0.7251353859901428, 0.7271166443824768, 0.7364945411682129, 0.7357020378112793, 0.7423061728477478, 0.7456082701683044, 0.7494386434555054, 0.7493065595626831, 0.754589855670929, 0.744419515132904, 0.7552502751350403, 0.7594769597053528], "val_loss": [1.8554929324558802, 1.5248192378452845, 1.0630103860582625, 0.8584415912628174, 0.7529889174870082, 0.7059746810368129, 0.6526519911629813, 0.6288832596370152, 0.6304174831935337, 0.5887830768312726, 0.5969254119055611, 0.5684202057974679, 0.5655748503548759, 0.5607008423124041, 0.5453030722481864, 0.535657491002764, 0.5469802958624703, 0.5226424080984933, 0.5269487074443272, 0.5104600361415318, 0.5073027610778809, 0.5344934122903007, 0.5343187706811088, 0.505232742854527, 0.49418210983276367], "val_accuracy": [0.44733333587646484, 0.5540000200271606, 0.6423333287239075, 0.6539999842643738, 0.6746666431427002, 0.7099999785423279, 0.7260000109672546, 0.7396666407585144, 0.7276666760444641, 0.7463333606719971, 0.7379999756813049, 0.7590000033378601, 0.7566666603088379, 0.7599999904632568, 0.762333333492279, 0.7713333368301392, 0.7586666941642761, 0.765999972820282, 0.7590000033378601, 0.7803333401679993, 0.7770000100135803, 0.7526666522026062, 0.7583333253860474, 0.7796666622161865, 0.7793333530426025]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [5, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [50, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [6, 0, 0, 2, 6, 0, 5, 9], [0, 1, 3, 0, 3], [47, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [12, 57]], "fitness": -0.4608571529388428, "mapping_values": [1, 2, 2, 1, 1, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3037077823508416, 2.301377536818777, 2.300167502917319, 2.3006212453737613, 2.298591937938182, 2.2963660583677483, 2.2962354586156226, 2.2947586668543827, 2.293311650963066, 2.2925534461861226, 2.291406609174078, 2.2909698770377207, 2.2907324606921016, 2.2872004855688397, 2.2889714624273654, 2.2854462819659336, 2.28504872397661, 2.284480552096424, 2.283004390880054, 2.2820326911302495, 2.281200875538121, 2.2793250571404466, 2.279479640775022, 2.2785358051062734, 2.277404771772563, 2.27502759742762, 2.274800774475146, 2.274482580113641, 2.2719306936668384, 2.2710356117475774, 2.271488097208114, 2.26949178090799, 2.2690818501879213, 2.267394148426411, 2.2665169548286093, 2.2650098499604945, 2.2637147917928258, 2.2628990071497856, 2.26104451233543, 2.2596952626104008, 2.2587701970748992, 2.257553781233034, 2.2559521626550696, 2.256926963326481, 2.253796715982649, 2.254183381004671, 2.2513575467608624, 2.250255718144286, 2.248979622047685, 2.246862504838433, 2.246380289547857, 2.24534193349316, 2.243593715642028, 2.245145126183303, 2.2438576616363566, 2.2420668466263414, 2.239661107650916, 2.2393970046108267, 2.2352005391781593, 2.2352699341633535, 2.2337678532795016, 2.2329208557049296, 2.231260974125981, 2.232087787431166, 2.2289130528683927, 2.2250521075314595, 2.2236577493324727, 2.2260701178622644, 2.221428187642005, 2.2218432512108235, 2.2177615104302943, 2.2162168933227, 2.2155134743703213, 2.215886646084829, 2.214076715705417, 2.2109131297856086, 2.2100436570007944, 2.207240923662479, 2.206094945284826, 2.2037733546526455, 2.204705023667942, 2.2021722524330807, 2.200218472892047, 2.1978401993842347, 2.1991172830080075, 2.1937705984268017, 2.1914801805121096, 2.190789882422848, 2.1881218635489548, 2.187824693889414, 2.1874095433108827, 2.1814356501769114, 2.180988927039299, 2.1789823967184545, 2.1759693866959493, 2.1751408895339632, 2.1728761178501497, 2.171255711661417, 2.1684206163784014, 2.167023307407033], "accuracy": [0.08506141602993011, 0.09800554811954498, 0.09945846349000931, 0.09549596905708313, 0.10091137140989304, 0.10777968913316727, 0.10077928751707077, 0.11081759631633759, 0.11755382269620895, 0.11332716792821884, 0.12178047746419907, 0.11993131786584854, 0.12112006545066833, 0.13393211364746094, 0.12495046854019165, 0.13776251673698425, 0.13459251821041107, 0.13736626505851746, 0.13353586196899414, 0.14489498734474182, 0.15031039714813232, 0.1526878923177719, 0.15414080023765564, 0.14872540533542633, 0.15559370815753937, 0.15836745500564575, 0.16497160494327545, 0.15995244681835175, 0.17250032722949982, 0.17699114978313446, 0.17633073031902313, 0.17884030938148499, 0.1736890822649002, 0.18055738508701324, 0.18082155287265778, 0.19363360106945038, 0.19072777032852173, 0.19204860925674438, 0.19799233973026276, 0.19891692698001862, 0.2078985571861267, 0.21093647181987762, 0.2040681540966034, 0.2133139669895172, 0.20697398483753204, 0.21503104269504547, 0.22216351330280304, 0.2238806039094925, 0.22757892310619354, 0.23933430016040802, 0.22863557934761047, 0.2308809906244278, 0.23603223264217377, 0.23273015022277832, 0.2355038970708847, 0.2401268035173416, 0.24237221479415894, 0.24184387922286987, 0.2611279785633087, 0.254920095205307, 0.25399550795555115, 0.25359925627708435, 0.2583542466163635, 0.2596750855445862, 0.26535463333129883, 0.27037379145622253, 0.2736758589744568, 0.26495838165283203, 0.278959184885025, 0.26680755615234375, 0.28318583965301514, 0.2868841588497162, 0.29045039415359497, 0.2810725271701813, 0.2860916554927826, 0.29243165254592896, 0.2883370816707611, 0.2969224750995636, 0.29612997174263, 0.29745081067085266, 0.2985074520111084, 0.2975828945636749, 0.30801743268966675, 0.30445119738578796, 0.30445119738578796, 0.30643242597579956, 0.32320696115493774, 0.31699907779693604, 0.3210936486721039, 0.31145158410072327, 0.3195086419582367, 0.3230748772621155, 0.3267732262611389, 0.3229427933692932, 0.32901862263679504, 0.32967904210090637, 0.3283582031726837, 0.3333773612976074, 0.3315281867980957, 0.34183067083358765], "val_loss": [1.9702239717755998, 1.9692234311785017, 1.9682348796299525, 1.9672331809997559, 1.9662376131330217, 1.9652527400425501, 1.9642727715628487, 1.9632838112967355, 1.9623113359723772, 1.961343424660819, 1.9603707449776786, 1.9593897547040666, 1.9584168025425501, 1.9574427604675293, 1.956465789249965, 1.9554813248770577, 1.954500334603446, 1.9535152571541923, 1.952524048941476, 1.9515437398638045, 1.950563839503697, 1.9495768547058105, 1.9485862595694405, 1.947608198438372, 1.946622712271554, 1.945629051753453, 1.9446375029427665, 1.943633760724749, 1.9426167351858956, 1.941596439906529, 1.9405808448791504, 1.9395583016531808, 1.938544750213623, 1.937509332384382, 1.9364779336111886, 1.9354444231305803, 1.9343883650643485, 1.9333362579345703, 1.9322584015982491, 1.9311799321855818, 1.9301039150782995, 1.9290204048156738, 1.927926880972726, 1.9268123081752233, 1.9256914002554757, 1.9245654514857702, 1.9234296934945243, 1.92227874483381, 1.921126161302839, 1.9199579102652413, 1.9187885693141393, 1.9176086698259627, 1.9164063589913505, 1.9152089527675085, 1.9139900207519531, 1.9127721786499023, 1.9115320614406042, 1.9102946008954729, 1.9090217181614466, 1.907745293208531, 1.9064538138253349, 1.9051532745361328, 1.9038324356079102, 1.9025188854762487, 1.9011782237461634, 1.8998195784432548, 1.8984368188040597, 1.8970731326511927, 1.8956565856933594, 1.8942345210484095, 1.8927898406982422, 1.8913185937064034, 1.8898346083504813, 1.888352870941162, 1.8868562153407507, 1.8853135108947754, 1.8837697846548898, 1.8821919304983956, 1.8805930955069405, 1.8789879935128349, 1.8773835045950753, 1.875744138445173, 1.8740783418927873, 1.8723790305001395, 1.870690073285784, 1.8689466885157995, 1.8671742166791643, 1.8653875759669714, 1.8635788645063127, 1.8617570740836007, 1.859917504446847, 1.8580234391348702, 1.8560987200055803, 1.8541735921587263, 1.8522050721304757, 1.8502136639186315, 1.848196574619838, 1.8461461748395647, 1.8440783364432198, 1.8419888360159737], "val_accuracy": [0.047333333641290665, 0.05366666615009308, 0.059333331882953644, 0.06300000101327896, 0.0676666647195816, 0.07500000298023224, 0.08366666734218597, 0.09000000357627869, 0.0949999988079071, 0.10066666454076767, 0.11133333295583725, 0.12099999934434891, 0.1303333342075348, 0.13766667246818542, 0.14733333885669708, 0.15433333814144135, 0.16233333945274353, 0.17399999499320984, 0.1823333352804184, 0.19166666269302368, 0.2016666680574417, 0.21133333444595337, 0.22300000488758087, 0.23000000417232513, 0.2356666624546051, 0.2433333396911621, 0.2513333261013031, 0.2590000033378601, 0.2709999978542328, 0.2783333361148834, 0.28866666555404663, 0.2933333218097687, 0.2980000078678131, 0.3023333251476288, 0.30933332443237305, 0.3153333365917206, 0.3233333230018616, 0.32766667008399963, 0.3343333303928375, 0.33799999952316284, 0.34166666865348816, 0.34433332085609436, 0.3490000069141388, 0.3526666760444641, 0.3543333411216736, 0.3566666543483734, 0.35866665840148926, 0.3606666624546051, 0.3616666793823242, 0.3633333444595337, 0.36666667461395264, 0.36899998784065247, 0.37066665291786194, 0.3723333477973938, 0.37400001287460327, 0.3763333261013031, 0.37933334708213806, 0.3803333342075348, 0.38199999928474426, 0.3853333294391632, 0.38600000739097595, 0.3880000114440918, 0.38999998569488525, 0.39133334159851074, 0.39266666769981384, 0.39500001072883606, 0.3970000147819519, 0.3973333239555359, 0.39933332800865173, 0.40166667103767395, 0.40433332324028015, 0.40700000524520874, 0.4099999964237213, 0.41200000047683716, 0.41333332657814026, 0.414000004529953, 0.4166666567325592, 0.41999998688697815, 0.4216666519641876, 0.42366665601730347, 0.4256666600704193, 0.42800000309944153, 0.429666668176651, 0.4326666593551636, 0.43299999833106995, 0.43299999833106995, 0.4339999854564667, 0.4350000023841858, 0.43566668033599854, 0.4386666715145111, 0.4390000104904175, 0.4403333365917206, 0.4426666796207428, 0.44600000977516174, 0.4463333189487457, 0.44733333587646484, 0.44866666197776794, 0.4506666660308838, 0.4516666531562805, 0.453000009059906]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 8, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.3051428496837616, "mapping_values": [1, 3, 3, 3, 0, 1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.488452655732781, 2.301110022985357, 2.199749748389703, 2.3029667185817524, 2.183364619384935, 2.308921971451479, 2.3004381392437], "accuracy": [0.15770703554153442, 0.12151630967855453, 0.18359529972076416, 0.10249637067317963, 0.23563598096370697, 0.09549596905708313, 0.11596883088350296], "val_loss": [1.9774352482386999, 1.9020541736057825, 1.9759671347481864, 1.961958612714495, 1.977891308920724, 1.974362509591239, 1.9472965512956892], "val_accuracy": [0.09833333641290665, 0.281333327293396, 0.09833333641290665, 0.22333332896232605, 0.10000000149011612, 0.09799999743700027, 0.2433333396911621]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [5, 4, 3, 0], [24, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 0, 7, 8, 4], [0, 0, 0, 1, 3, 3], [1, 57]], "fitness": -0.10028571635484695, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3013351954300294, 2.3022819292181596, 2.3025749083664975, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09509972482919693, 0.10342095047235489, 0.1014397069811821, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.972977910723005, 1.9736440522330148, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.08900000154972076, 0.10400000214576721, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [5, 4, 3, 0], [56, 89, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [2, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 9, 0, 5, 7, 8, 4], [3, 0, 0, 1, 3, 3], [6, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.square(grad))), tf.math.add(beta, grad)))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.368262138065645, 3.0461315945894993, 4.927059184731808, 8.054962804525001, 12.375133525615103, 17.854379832799708, 24.75485072087429], "accuracy": [0.09153348207473755, 0.10210011899471283, 0.09813763201236725, 0.09509972482919693, 0.09391097724437714, 0.09959053993225098, 0.1026284471154213], "val_loss": [2.096832139151437, 2.7931224959237233, 4.3323292051042825, 6.674478258405413, 9.794593266078405, 13.738208498273577, 18.565484728131974], "val_accuracy": [0.09733333438634872, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 4, 9, 5, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [83, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 0, 0, 2, 7, 5, 5, 9], [5, 4, 3, 0], [24, 0, 19, 42], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [0, 7], [88, 19], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 7, 8, 4], [3, 3, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1258385903.2522936, 23721551833.31766, 111225812075.25558, 309271079314.78326, 660791456329.9158, 1207697333037.4111], "accuracy": [0.09959053993225098, 0.10487385839223862, 0.09787346422672272, 0.09602430462837219, 0.0936468094587326, 0.09959053993225098], "val_loss": [4791423561.142858, 38319919689.14286, 129316576109.71428, 306512246491.4286, 598638123885.7142, 1034428238116.5714], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [0, 4, 3, 0, 3], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad)), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301769089752326, 2.3022393242180104, 2.302751871132186, 2.304643504891366, 2.3158065677555153, 2.3766132916410316], "accuracy": [0.10368511080741882, 0.10117553919553757, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736975942339217, 1.9738549504961287, 1.9747046743120467, 1.9790470259530204, 2.000819683074951, 2.1481153624398366], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 4, 9, 5, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [5, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [5, 2, 3, 3, 4], [56, 0, 47], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [72, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 12, 12, 7, 5, 0, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.square(grad))), tf.math.add(beta, tf.math.square(grad)))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 2, 0, 2, 5, 1, 5, 9], [0, 4, 3, 2, 3, 2], [24, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07158895581960678, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 4, 9, 5, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [5, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [5, 4, 3, 0], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 4, 7, 8, 4], [3, 1, 0, 1, 3, 3], [72, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 12, 7, 5, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.negative(sigma), tf.math.pow(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 2, 0, 2, 7, 2, 5, 9], [3, 4, 3, 3, 3, 2], [24, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301769089752326, 2.3022394186910966, 2.302751853150809, 2.304643428399657, 2.3158067881927167, 2.3766135750602913], "accuracy": [0.10368511080741882, 0.10117553919553757, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736974579947335, 1.9738551548549108, 1.9747045380728585, 1.9790470259530204, 2.000819683074951, 2.1481153624398366], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [57, 8, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [6, 2, 0, 4, 7, 2, 5, 9], [0, 3, 3, 3, 3, 2], [24, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(grad)), grad), beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [89, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 9, 0, 2, 0, 0, 5, 9], [0, 0, 3, 0, 3], [47, 0, 47], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [79, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 2, 1, 0, 0, 0, 0, 8, 4, 4, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [6, 6, 0, 9, 6, 5, 5, 5], [0, 4, 3, 0, 3], [16, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 8, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.square(grad)))), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3038134036078635, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 0, 0, 2, 0, 0, 5, 9], [0, 1, 3, 0, 3], [56, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [0, 0, 0, 1, 3, 3], [76, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 5, 0, 2, 10, 10, 8, 2, 2, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), tf.math.square(alpha))))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [684634189.4807972, 12904421998.163519, 60504319485.22732, 168234399567.35965, 359447701119.0701, 656944678398.3093], "accuracy": [0.09959053993225098, 0.10487385839223862, 0.09800554811954498, 0.09602430462837219, 0.0936468094587326, 0.09959053993225098], "val_loss": [2606633325.714286, 20845498953.142857, 70344909970.28572, 166732539026.2857, 325637963776.0, 562689961398.8572], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 1, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [6, 2, 0, 2, 6, 5, 5, 9], [2, 4, 3, 0, 3], [4, 0, 84], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [2, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 4, 4, 7, 8, 4, 2, 4, 4, 8, 7, 6, 2, 0, 2, 0, 6, 5], [3, 0, 0, 1, 3, 3, 2, 0, 2, 3, 0, 2, 1, 3, 1], [62, 57, 81, 7]], "fitness": -0.03685714304447174, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 34, 19, 15, 4], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.pow(sigma, tf.math.pow(tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha), tf.math.pow(sigma, tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.negative(sigma), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), beta), sigma)), tf.math.negative(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))), beta)), tf.math.divide_no_nan(tf.math.square(alpha), sigma)), alpha)", "other_info": {"loss": [2.304162707295416, 2.3029294971304326, 2.302784861543348, 2.3043720390283045, 2.303393835278865, 2.3022302278768842], "accuracy": [0.08440100401639938, 0.09496764093637466, 0.09311848133802414, 0.08691058307886124, 0.09153348207473755, 0.09166556596755981], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [84, 42, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 3, 4, 2, 6, 5, 5, 8, 0], [0, 4, 0, 2, 3, 5], [56, 0, 47], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [3, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 6, 6, 2, 3, 1, 1, 0, 0, 12, 7, 5, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(alpha, tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), beta)), tf.math.add(beta, tf.math.square(grad))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(alpha, sigma))))))", "other_info": {"loss": [2.304162707295416, 2.3029294971304326, 2.302784861543348, 2.3043720390283045, 2.303393835278865, 2.3022302278768842], "accuracy": [0.08440100401639938, 0.09496764093637466, 0.09311848133802414, 0.08691058307886124, 0.09153348207473755, 0.09166556596755981], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 1, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 42, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 6, 0, 4, 6, 4, 1, 9], [0, 4, 3, 2, 3, 2], [24, 0, 19], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 7, 8, 4], [2, 0, 0, 1, 3, 3], [43, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.subtract(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, beta)))))))), grad), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.304162707295416, 2.3029294971304326, 2.302784861543348, 2.3043720390283045, 2.303393835278865, 2.3022302278768842], "accuracy": [0.08440100401639938, 0.09496764093637466, 0.09311848133802414, 0.08691058307886124, 0.09153348207473755, 0.09166556596755981], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]