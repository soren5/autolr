[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 5, 4, 5, 8, 8, 9, 5, 4, 9], [3, 2, 5, 3, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8180000185966492, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 9, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.200106352579482, 1.85824904812168, 1.602015387223082, 1.1001990667628323, 0.8483206871604214, 0.7759155797495456, 0.7165513269385767, 0.6780651730395831, 0.6373927687153195, 0.6374530391040621, 0.614366371980228, 0.5884667386066771, 0.5815589780332611, 0.5676387788014657, 0.5391252247286731, 0.5285700373346653, 0.5036795295311428, 0.5333875677274156, 0.49028776966900384], "accuracy": [0.24461762607097626, 0.40707963705062866, 0.46625280380249023, 0.5845991373062134, 0.6816800832748413, 0.700700044631958, 0.7290979027748108, 0.7329282760620117, 0.7532690763473511, 0.7623828053474426, 0.7687227725982666, 0.7800818681716919, 0.7848368883132935, 0.7812706232070923, 0.8009510040283203, 0.8005547523498535, 0.8113855719566345, 0.8005547523498535, 0.8201030492782593], "val_loss": [1.8632559776306152, 1.0548310279846191, 1.1392713955470495, 0.7154401200158256, 0.5886456625802177, 0.6265082699911935, 0.5272906678063529, 0.5725598505565098, 0.5045220851898193, 0.5538795164653233, 0.5699010917118618, 0.46116019998277935, 0.4580669573375157, 0.424075790813991, 0.4552644831793649, 0.42815171820776804, 0.4151222450392587, 0.4630411182131086, 0.4473797764096941], "val_accuracy": [0.4230000078678131, 0.5516666769981384, 0.5206666588783264, 0.6823333501815796, 0.722000002861023, 0.7229999899864197, 0.762333333492279, 0.7350000143051147, 0.7806666493415833, 0.7429999709129333, 0.7476666569709778, 0.8006666898727417, 0.7870000004768372, 0.8216666579246521, 0.7889999747276306, 0.8163333535194397, 0.8206666707992554, 0.7933333516120911, 0.8116666674613953]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 3, 2, 7, 2, 1, 9, 6, 3, 4, 9, 1, 1, 8, 8], [0, 3, 0, 3, 0, 2, 3, 4, 2, 0, 1, 0, 5], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8088571429252625, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 15, 11, 6, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.add(beta, grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(beta, grad)))))), tf.math.add(beta, grad))), beta))), tf.math.add(beta, tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3453446244204663, 2.1773063162172694, 2.081586479715557, 1.7986078412383855, 1.5981015788880573, 1.099928284113386, 0.9180341231241959, 0.8249234219331782, 0.785172153449786, 0.7242088623885167, 0.7047067948729843, 0.6659550360401372, 0.6547813339870147, 0.6138424699600299, 0.6181791808548195, 0.6122254693056252, 0.6003269615694201, 0.621654625668612, 0.5802131809767573, 0.5652318653445029, 0.5289928680004115, 0.5314760958010006, 0.5256124319551234, 0.52699898283133, 0.4977068626302785, 0.5014874979631224, 0.5292089516027587, 0.47239051241412405, 0.48639216322342105, 0.45939377519070684, 0.4616003937417994, 0.451503792356711, 0.4711290997497441, 0.47428318926246016, 0.4279159160574209, 0.4235225692558692, 0.4262316705150501, 0.4234601550090582, 0.40501024510567263, 0.4197748587619926, 0.3924643339781383, 0.4331597848740614, 0.37725833562607336, 0.3776036778957207, 0.3976858516198265, 0.36025346250125306, 0.37781774769007587, 0.36935761713821025, 0.3651649129585961, 0.36085147514649984, 0.3688295484376448, 0.3534551340244733, 0.3591973775641762, 0.3512684899141067, 0.3415955000148237, 0.3406840400838455, 0.3309508695413156, 0.3238549571975883, 0.323581971886482, 0.3234196458006453, 0.3290311570818461, 0.3167942918216107, 0.31165387817125717, 0.30380732314288417, 0.31986792053938257, 0.30263851783956125, 0.3160927294818811, 0.2964597210561626, 0.2751149740421918, 0.28431481166664385], "accuracy": [0.22863557934761047, 0.20644564926624298, 0.2945449650287628, 0.38541802763938904, 0.45568618178367615, 0.5946374535560608, 0.6675472259521484, 0.6839255094528198, 0.7013604640960693, 0.7226257920265198, 0.7343811988830566, 0.7452120184898376, 0.7516840696334839, 0.7709681391716003, 0.7670056819915771, 0.7647602558135986, 0.7670056819915771, 0.7703077793121338, 0.7777044177055359, 0.7907806038856506, 0.8037247657775879, 0.8025360107421875, 0.8030643463134766, 0.8021397590637207, 0.8127063512802124, 0.8117818236351013, 0.8031964302062988, 0.828292191028595, 0.8204993009567261, 0.8260467648506165, 0.8271034359931946, 0.8317263126373291, 0.8271034359931946, 0.8230088353157043, 0.8449346423149109, 0.8413683772087097, 0.8417646288871765, 0.8450667262077332, 0.8516708612442017, 0.845859169960022, 0.8569541573524475, 0.8368775844573975, 0.8603883385658264, 0.8561616539955139, 0.8510104417800903, 0.8659358024597168, 0.8589354157447815, 0.8602562546730042, 0.859199583530426, 0.8639545440673828, 0.860652506351471, 0.8602562546730042, 0.8644828796386719, 0.8693699836730957, 0.8734645247459412, 0.8753136992454529, 0.8761062026023865, 0.8768987059593201, 0.8784837126731873, 0.8780874609947205, 0.8753136992454529, 0.8798044919967651, 0.8842953443527222, 0.8841632604598999, 0.8804649114608765, 0.8873332738876343, 0.8780874609947205, 0.8882578015327454, 0.8939374089241028, 0.8912957310676575], "val_loss": [1.627167020525251, 1.8306907245091029, 1.830563749585833, 1.4523846421922957, 1.083782741001674, 0.8772978101457868, 0.6629494939531598, 0.6266486474445888, 0.56356109891619, 0.5764425652367728, 0.5570766244615827, 0.5172616073063442, 0.49417172159467426, 0.4949397018977574, 0.5165339538029262, 0.46505188941955566, 0.566716057913644, 0.47548564842769075, 0.4629139389310564, 0.42150659220559256, 0.4254247971943447, 0.45831031458718435, 0.4055799160684858, 0.4207176055227007, 0.41728528908320833, 0.4359470009803772, 0.40010539974485126, 0.41042509249278475, 0.4056753175599234, 0.39079090527125765, 0.3735752616609846, 0.4343807101249695, 0.3977806142398289, 0.39083635807037354, 0.40260879482541767, 0.353308413709913, 0.38263372012547087, 0.35482596499579294, 0.36880165338516235, 0.35374688250677927, 0.36634192296436857, 0.38970285654067993, 0.3536337273461478, 0.3457110268729074, 0.3599199226924351, 0.3366134251867022, 0.3636959024838039, 0.358659029006958, 0.3380319220679147, 0.33259737491607666, 0.3704114130565098, 0.3611601505960737, 0.36058774164744783, 0.34655005591256277, 0.3476631300789969, 0.34715128796441214, 0.33972238642828806, 0.33509157385144916, 0.3396527085985456, 0.3293938296181815, 0.3596844588007246, 0.3327335374695914, 0.3284620727811541, 0.4134770461491176, 0.33901590960366385, 0.33937226022992817, 0.3530684454100473, 0.3295821377209255, 0.35183206626347135, 0.34013859714780537], "val_accuracy": [0.26899999380111694, 0.4386666715145111, 0.26100000739097595, 0.34033334255218506, 0.5803333520889282, 0.6439999938011169, 0.6859999895095825, 0.7123333215713501, 0.7383333444595337, 0.7436666488647461, 0.753000020980835, 0.768666684627533, 0.7766666412353516, 0.7703333497047424, 0.7716666460037231, 0.7973333597183228, 0.7473333477973938, 0.7883333563804626, 0.8063333630561829, 0.8169999718666077, 0.8176666498184204, 0.7886666655540466, 0.824999988079071, 0.8213333487510681, 0.8196666836738586, 0.8100000023841858, 0.8326666951179504, 0.8180000185966492, 0.8206666707992554, 0.8273333311080933, 0.8403333425521851, 0.8119999766349792, 0.8220000267028809, 0.8316666483879089, 0.8353333473205566, 0.8443333506584167, 0.8266666531562805, 0.8496666550636292, 0.8423333168029785, 0.843999981880188, 0.8500000238418579, 0.8373333215713501, 0.8483333587646484, 0.8489999771118164, 0.8496666550636292, 0.8529999852180481, 0.8343333601951599, 0.847000002861023, 0.8519999980926514, 0.8553333282470703, 0.8433333039283752, 0.8453333377838135, 0.8426666855812073, 0.8516666889190674, 0.8576666712760925, 0.8579999804496765, 0.8603333234786987, 0.856333315372467, 0.8613333106040955, 0.8600000143051147, 0.8330000042915344, 0.8629999756813049, 0.8606666922569275, 0.8346666693687439, 0.8650000095367432, 0.8613333106040955, 0.856333315372467, 0.8629999756813049, 0.8579999804496765, 0.8633333444595337]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 0, 9, 7, 5, 1, 2, 6, 5, 8, 9], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [99, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [29, 57, 26]], "fitness": -0.7940000295639038, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.28975525350776, 2.2540087630609875, 2.2127360339650326, 2.1560595022641658, 2.067440042343311, 1.9409116485477549, 1.79636868928575, 1.642017491835928, 1.4893483060178756, 1.3786649547311625, 1.2830379558135458, 1.2118241442130022, 1.155159327521253, 1.0969713727921826, 1.0686249831695567, 1.0247437522049514, 0.995741043376129, 0.9668119790264015, 0.9495348987830015, 0.9274331143015427, 0.9134892172124391, 0.8960225121881417, 0.868138363230356, 0.8569494986090095, 0.8495780760349771, 0.8364295500018546, 0.8277180949852152, 0.8174828395804457, 0.8120213020526501, 0.7989063933777094, 0.8000059783214655, 0.7829278719077225, 0.7803619510509303, 0.7786185727962146, 0.7726172863405772, 0.7591453338453499, 0.7435809587600949, 0.7404021002817714, 0.7445614593707024, 0.7326850009758112, 0.7317074507045834, 0.7271763374146973, 0.7184345489794693, 0.7069729024770947, 0.7170726757055229, 0.7073780230606048, 0.7087706440018783, 0.696239839392473, 0.6880481136378958, 0.6858358827359672, 0.6900369733898726, 0.6844009596516412, 0.6911517870802496, 0.681022155908404, 0.6759056576002763, 0.6651611867566324, 0.6649644424052145, 0.6687599335128069, 0.6685435483405587, 0.6557314741124944, 0.6633845234134524, 0.6547603457752803, 0.6509007889014257], "accuracy": [0.12362963706254959, 0.21872936189174652, 0.2847708463668823, 0.3431515097618103, 0.3943996727466583, 0.42742040753364563, 0.44802534580230713, 0.4913485646247864, 0.5219917893409729, 0.5431250929832458, 0.5629374980926514, 0.5831462144851685, 0.5963544845581055, 0.6176198720932007, 0.6232994198799133, 0.6400739550590515, 0.6456214785575867, 0.6543388962745667, 0.6613393425941467, 0.6730946898460388, 0.6693964004516602, 0.6781138777732849, 0.6889446377754211, 0.6886804699897766, 0.6914542317390442, 0.6975300312042236, 0.7003037929534912, 0.7057191729545593, 0.7054550051689148, 0.7066437602043152, 0.7113987803459167, 0.7112666964530945, 0.7137762308120728, 0.7127195596694946, 0.7195879220962524, 0.7235503792762756, 0.7252674698829651, 0.7252674698829651, 0.7293620109558105, 0.7281733155250549, 0.7290979027748108, 0.7351737022399902, 0.7362303733825684, 0.7382115721702576, 0.7342491149902344, 0.7354378700256348, 0.7357020378112793, 0.7404569983482361, 0.7416457533836365, 0.748249888420105, 0.7374191284179688, 0.7460044622421265, 0.7441553473472595, 0.7508915662765503, 0.7498348951339722, 0.7543256878852844, 0.7469290494918823, 0.7495707273483276, 0.7493065595626831, 0.7530049085617065, 0.7500990629196167, 0.7548540234565735, 0.7586844563484192], "val_loss": [1.941478661128453, 1.9073247909545898, 1.860459532056536, 1.7917568343026298, 1.6918457916804723, 1.5556822504316057, 1.3987329346793038, 1.2423954691205705, 1.1074468408312117, 1.002882991518293, 0.9251485211508614, 0.8674312319074359, 0.8231188229152134, 0.7870395353862217, 0.7598378147397723, 0.7343963384628296, 0.7133820397513253, 0.6959482090813773, 0.680274316242763, 0.6694674321583339, 0.6563998971666608, 0.6456190688269479, 0.6364757333483014, 0.626354592187064, 0.6202928509031024, 0.6121468714305333, 0.605423126901899, 0.6007907731192452, 0.5939518894468035, 0.5885895490646362, 0.5838198832103184, 0.5813756159373692, 0.5752801384244647, 0.5729005847658429, 0.5663438183920724, 0.5640496526445661, 0.5591928107397897, 0.5556514944349017, 0.5516066040311541, 0.5493206126349313, 0.5457874195916312, 0.541960494858878, 0.5391053472246442, 0.5373041118894305, 0.5332258088248116, 0.5318593638283866, 0.531174898147583, 0.5270546504429409, 0.5241834265845162, 0.5244127682277134, 0.5222046034676688, 0.5179241725376674, 0.5173242092132568, 0.5148441450936454, 0.5125498260770526, 0.5101171561649868, 0.5074897153036935, 0.5058477776391166, 0.5076997109821865, 0.5047428097043719, 0.5035467829023089, 0.5013022933687482, 0.5001356431416103], "val_accuracy": [0.2826666533946991, 0.37833333015441895, 0.42633333802223206, 0.4833333194255829, 0.5323333144187927, 0.5513333082199097, 0.5803333520889282, 0.609666645526886, 0.6169999837875366, 0.6596666574478149, 0.6690000295639038, 0.6800000071525574, 0.6893333196640015, 0.6933333277702332, 0.6933333277702332, 0.6983333230018616, 0.7096666693687439, 0.7126666903495789, 0.7183333039283752, 0.7193333506584167, 0.7196666598320007, 0.7310000061988831, 0.731333315372467, 0.7279999852180481, 0.737666666507721, 0.7319999933242798, 0.7443333268165588, 0.7356666922569275, 0.7463333606719971, 0.7493333220481873, 0.7486666440963745, 0.75, 0.7549999952316284, 0.7566666603088379, 0.7546666860580444, 0.7573333382606506, 0.7620000243186951, 0.7606666684150696, 0.7670000195503235, 0.765333354473114, 0.7646666765213013, 0.765666663646698, 0.765333354473114, 0.7680000066757202, 0.765333354473114, 0.7710000276565552, 0.7713333368301392, 0.7749999761581421, 0.7746666669845581, 0.7739999890327454, 0.7749999761581421, 0.7736666798591614, 0.7786666750907898, 0.7756666541099548, 0.7773333191871643, 0.7760000228881836, 0.781000018119812, 0.7826666831970215, 0.7806666493415833, 0.7803333401679993, 0.7766666412353516, 0.7816666960716248, 0.7803333401679993]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 2, 3, 9, 8, 5, 1, 3, 6, 5, 8, 9], [1, 3, 3, 0, 0, 2, 2, 4, 2, 0], [36, 47, 64, 35, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.7937142848968506, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2680533553914404, 1.9817955999043104, 2.0258514513161363, 1.8484472429999554, 1.4439675362984643, 0.9441311632511465, 0.8016348950000975, 0.7679486000432377, 0.7154948705254514, 0.6874634609199108, 0.6415985293234691, 0.6518549733016438, 0.6033873056156162, 0.573747641477193, 0.5918464891158862, 0.547608888010701, 0.5409248454176188], "accuracy": [0.28120461106300354, 0.30339452624320984, 0.29362040758132935, 0.33047154545783997, 0.4748381972312927, 0.6440364718437195, 0.6906617283821106, 0.7030775547027588, 0.7217012047767639, 0.733588695526123, 0.7506273984909058, 0.7440232634544373, 0.7644960880279541, 0.7802139520645142, 0.7712323069572449, 0.793422281742096, 0.7895918488502502], "val_loss": [1.7097574302128382, 1.9450064386640276, 1.7130272729056222, 1.601731606892177, 0.8050222226551601, 0.714281712259565, 0.6598760230200631, 0.6394782406943185, 0.5490906238555908, 0.5785967281886509, 0.5738649879183088, 0.46053593499319895, 0.47366135460989817, 0.5423016548156738, 0.481035658291408, 0.4506535359791347, 0.47129969937460764], "val_accuracy": [0.26100000739097595, 0.1366666704416275, 0.25033333897590637, 0.367000013589859, 0.6333333253860474, 0.6763333082199097, 0.6846666932106018, 0.6693333387374878, 0.7413333058357239, 0.7256666421890259, 0.7229999899864197, 0.7903333306312561, 0.7829999923706055, 0.7310000061988831, 0.7770000100135803, 0.7829999923706055, 0.7606666684150696]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.7905714511871338, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), beta)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1330367502928755, 1.9613344404659945, 1.3683538144810357, 1.0268752515481336, 0.8762827968049468, 0.7795628383726161, 0.7535450379877767, 0.6972282914642361, 0.677906579534218, 0.6385699687790105, 0.6665503626423364, 0.6300596935385963, 0.5973146313201356, 0.5499859993972043, 0.5538950994061662, 0.5568808375993944, 0.5530364216200633, 0.5293764017119841], "accuracy": [0.2922995686531067, 0.31541407108306885, 0.5281997323036194, 0.6243560910224915, 0.6738871932029724, 0.6977941989898682, 0.7104741930961609, 0.7310791015625, 0.737947404384613, 0.750231146812439, 0.7421740889549255, 0.7560427784919739, 0.7647602558135986, 0.7873464822769165, 0.7843085527420044, 0.7844406366348267, 0.7886672616004944, 0.7917051911354065], "val_loss": [1.9479660987854004, 0.9430774620601109, 0.7722906725747245, 0.7260018246514457, 0.7019767080034528, 0.5889386790139335, 0.612594621522086, 0.5565142801829747, 0.5195150886263166, 0.5328269856316703, 0.5334874902452741, 0.49415131977626253, 0.4698750802448818, 0.4926513944353376, 0.5200484480176654, 0.4660904748099191, 0.4529900550842285, 0.4321140646934509], "val_accuracy": [0.1576666682958603, 0.6159999966621399, 0.6549999713897705, 0.6886666417121887, 0.6776666641235352, 0.7126666903495789, 0.7113333344459534, 0.7386666536331177, 0.7753333449363708, 0.7636666893959045, 0.7549999952316284, 0.7816666960716248, 0.7903333306312561, 0.7630000114440918, 0.7476666569709778, 0.7853333353996277, 0.7866666913032532, 0.7903333306312561]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 2, 7, 2, 1, 9, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 3, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.7877143025398254, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), beta)), tf.math.add(beta, beta))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1725253144338414, 2.214853710250265, 1.81460149830453, 1.3022847160482451, 1.0922967899414087, 0.870039317743606, 0.7609189889056571, 0.7404336428613931, 0.6922257680540874, 0.664955042671644, 0.6291093685922684, 0.6572134411172813, 0.5982634280147081, 0.5900761473369385, 0.5514281144892897, 0.561447391105665, 0.5378255057076673, 0.5307322652301202, 0.533270607243723], "accuracy": [0.28556331992149353, 0.19455818831920624, 0.3815876245498657, 0.5383700728416443, 0.5947695374488831, 0.6740192770957947, 0.7152291536331177, 0.7165499925613403, 0.7323999404907227, 0.7483819723129272, 0.7631752490997314, 0.7547219395637512, 0.7717606425285339, 0.7800818681716919, 0.7943468689918518, 0.787082314491272, 0.8006868362426758, 0.8024039268493652, 0.8025360107421875], "val_loss": [1.972642149244036, 1.3199922016688757, 1.3200184617723738, 0.8343647718429565, 0.8070278508322579, 0.6165438549859183, 0.5538568326405117, 0.561951858656747, 0.5427767719541278, 0.5432530811854771, 0.5537177835191999, 0.47967115470341276, 0.46487518719264437, 0.4386542780058725, 0.4399358970778329, 0.4598695550646101, 0.43816843203135897, 0.4595581463405064, 0.41270406757082256], "val_accuracy": [0.11633333563804626, 0.4300000071525574, 0.4566666781902313, 0.593999981880188, 0.6263333559036255, 0.6976666450500488, 0.7453333139419556, 0.7316666841506958, 0.737333357334137, 0.7536666393280029, 0.7223333120346069, 0.7806666493415833, 0.7993333339691162, 0.8119999766349792, 0.8069999814033508, 0.7876666784286499, 0.7986666560173035, 0.7950000166893005, 0.8066666722297668]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 9, 6, 5, 8, 9], [2, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 43, 19, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [11, 57]], "fitness": -0.44200000166893005, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, beta))))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30250070825969, 2.299455125491538, 2.299137764099236, 2.2998274411224275, 2.2983779284019104, 2.2966309233017883, 2.2968311585990775, 2.2952271931521913, 2.294264873288736, 2.294924754350728, 2.293465799234169, 2.294322614861265, 2.2926668233056473, 2.290606065275741, 2.2908080760372345, 2.289311038441646, 2.2886321447025026, 2.2876437716181126, 2.286314714381629, 2.2866433133790522, 2.2857891854167915, 2.2840248269648082, 2.2826586036067424, 2.282413081879692, 2.281790493659182, 2.2806965149373206, 2.2801949355297118, 2.2782061038283685, 2.277961868604318, 2.2766781343271894, 2.2763223621933735, 2.275247365287455, 2.276047385521474, 2.272956683981798, 2.272836457343071, 2.2730172526299475, 2.271025678658325, 2.27005456750734, 2.267893352654663, 2.2683843036825944, 2.267164270056867, 2.2659522448831844, 2.2657084679480763, 2.264339915670975, 2.2628273987861403, 2.2641546176708354, 2.262229430220461, 2.2613152316406717, 2.2593464415228643, 2.2573837253002207, 2.2577790514573506, 2.2558128827472546, 2.254789368540399, 2.25349823661122, 2.2547211112630934, 2.25222643655226, 2.252800100845762, 2.2508468330654376, 2.2510132195376102, 2.249625532587112, 2.247595645086782, 2.2464830237703395, 2.246552109419158, 2.244295310948928, 2.246277874298005, 2.2431587720701422, 2.242763951438498, 2.241110172852423, 2.2418013583273857, 2.239801080172419, 2.2381164456371145, 2.235558505354934, 2.235564856465624, 2.235729864764412, 2.23376489759452, 2.2309372511364765, 2.2304601672145714, 2.2287144219760395, 2.229062157536321, 2.2274309349349775, 2.2269118439330873, 2.224996997758681, 2.223963150495016, 2.224184496811179, 2.223252977630198, 2.2207210424506605, 2.219130167131647, 2.2159688252625513, 2.2168108544660172, 2.2146915650370884, 2.213363688682694, 2.211763449947139, 2.2120615665734076, 2.2102363399935907, 2.208720876430209, 2.206607179650541, 2.205102466274136, 2.2044659450683675, 2.20358783363304, 2.202708447976214], "accuracy": [0.09047681838274002, 0.09787346422672272, 0.09800554811954498, 0.09906221181154251, 0.10130762308835983, 0.1002509593963623, 0.09813763201236725, 0.11438383162021637, 0.11002509295940399, 0.11187426000833511, 0.11478008329868317, 0.11319508403539658, 0.109232597053051, 0.12191256135702133, 0.12415797263383865, 0.13115836679935455, 0.12376172095537186, 0.13049794733524323, 0.13247919082641602, 0.13261127471923828, 0.13551710546016693, 0.14198917150497437, 0.14397041499614716, 0.1406683325767517, 0.14291374385356903, 0.14529123902320862, 0.15295206010341644, 0.15400871634483337, 0.15440496802330017, 0.15519747138023376, 0.15757495164871216, 0.1604807823896408, 0.1554616242647171, 0.16312244534492493, 0.1764628142118454, 0.17144367098808289, 0.17421740293502808, 0.17223615944385529, 0.18584071099758148, 0.18491612374782562, 0.1880861222743988, 0.18980319797992706, 0.19336943328380585, 0.19719983637332916, 0.19284109771251678, 0.19270901381969452, 0.20076608657836914, 0.19640734791755676, 0.20737022161483765, 0.2141064554452896, 0.20023775100708008, 0.2122572958469391, 0.2164839506149292, 0.21318188309669495, 0.21304979920387268, 0.22454100847244263, 0.21621978282928467, 0.22401267290115356, 0.22176727652549744, 0.2242768406867981, 0.22374852001667023, 0.22942808270454407, 0.23154141008853912, 0.2362964004278183, 0.2316734939813614, 0.23484347760677338, 0.2413155436515808, 0.24316470324993134, 0.23656055331230164, 0.2491084337234497, 0.2495046854019165, 0.25161802768707275, 0.25637298822402954, 0.2522784173488617, 0.2557125985622406, 0.2595430016517639, 0.2607317268848419, 0.2673358917236328, 0.2525425851345062, 0.26799631118774414, 0.2642979919910431, 0.2658829689025879, 0.27763834595680237, 0.27063795924186707, 0.2719587981700897, 0.27037379145622253, 0.2860916554927826, 0.2785629332065582, 0.2826575040817261, 0.2868841588497162, 0.2884691655635834, 0.287280410528183, 0.29058247804641724, 0.28899750113487244, 0.2899220585823059, 0.29863953590393066, 0.3039228618144989, 0.2925637364387512, 0.29797911643981934, 0.292959988117218], "val_loss": [1.9704185213361467, 1.9696022442408971, 1.9687893050057548, 1.9679746627807617, 1.9671557290213448, 1.9663335255214147, 1.9655237197875977, 1.9647173881530762, 1.963911737714495, 1.9631059510367257, 1.9623021398271834, 1.9614975111825126, 1.9607041222708566, 1.9599009922572546, 1.9591027668544225, 1.958301339830671, 1.9575048174176897, 1.9567087037222726, 1.9559202875409807, 1.9551164082118444, 1.9543147768293108, 1.9535163470676966, 1.9527153968811035, 1.9519034794398717, 1.9510936737060547, 1.9502867289951868, 1.9494787624904089, 1.948664733341762, 1.94785703931536, 1.947049345288958, 1.9462299346923828, 1.9454090254647392, 1.9445909772600447, 1.943774632045201, 1.9429499762398856, 1.9421249798366003, 1.9412941251482283, 1.9404593195234026, 1.9396178381783622, 1.9387758799961634, 1.9379336493355888, 1.937084129878453, 1.9362316131591797, 1.9353820255824499, 1.9345176560538155, 1.9336614608764648, 1.9327871458871024, 1.9319171224321638, 1.931032385144915, 1.9301364762442452, 1.92924131665911, 1.9283383233206612, 1.9274245670863561, 1.9265061106000627, 1.925600188119071, 1.9246740341186523, 1.923738615853446, 1.9227989741734095, 1.9218735013689314, 1.9209303855895996, 1.919978073665074, 1.9190250124250139, 1.9180535588945662, 1.9170727048601424, 1.9160994802202498, 1.915116310119629, 1.9141266686575753, 1.9131252425057548, 1.912125723702567, 1.91111843926566, 1.9100916045052665, 1.909057344709124, 1.908015251159668, 1.9069651876177107, 1.9059043611798967, 1.9048173768179757, 1.9037315504891532, 1.902637277330671, 1.9015453883579798, 1.9004380362374442, 1.8993250301906042, 1.8981988770621163, 1.897059508732387, 1.8959195273263114, 1.8947596549987793, 1.8935916764395577, 1.8924104826790946, 1.8912036759512765, 1.8900062016078405, 1.888780185154506, 1.887552261352539, 1.8863039697919572, 1.885063920702253, 1.8837971687316895, 1.8825316429138184, 1.8812253815787179, 1.8799191883632116, 1.8785991668701172, 1.8772743088858468, 1.8759204319545202], "val_accuracy": [0.045666664838790894, 0.050999999046325684, 0.0560000017285347, 0.06066666543483734, 0.06366666406393051, 0.06566666811704636, 0.0729999989271164, 0.0793333351612091, 0.08633333444595337, 0.09066666662693024, 0.09466666728258133, 0.10100000351667404, 0.10833333432674408, 0.11800000071525574, 0.12266666442155838, 0.1289999932050705, 0.13733333349227905, 0.1433333307504654, 0.15133333206176758, 0.15600000321865082, 0.16233333945274353, 0.17266666889190674, 0.18033333122730255, 0.18766666948795319, 0.1966666728258133, 0.20266667008399963, 0.21199999749660492, 0.22100000083446503, 0.22833333909511566, 0.234333336353302, 0.23733332753181458, 0.24533332884311676, 0.2513333261013031, 0.2566666603088379, 0.26466667652130127, 0.27566665410995483, 0.28166666626930237, 0.2866666615009308, 0.29233333468437195, 0.29600000381469727, 0.30033332109451294, 0.30433332920074463, 0.30933332443237305, 0.31466665863990784, 0.32066667079925537, 0.32633334398269653, 0.3296666741371155, 0.3333333432674408, 0.3383333384990692, 0.34033334255218506, 0.34299999475479126, 0.34566667675971985, 0.34933334589004517, 0.35233333706855774, 0.35499998927116394, 0.35633334517478943, 0.3583333194255829, 0.35899999737739563, 0.36000001430511475, 0.3616666793823242, 0.3643333315849304, 0.36533331871032715, 0.367333322763443, 0.3696666657924652, 0.3709999918937683, 0.37166666984558105, 0.37299999594688416, 0.37466666102409363, 0.3763333261013031, 0.3786666691303253, 0.3799999952316284, 0.38233333826065063, 0.38466668128967285, 0.3863333463668823, 0.3869999945163727, 0.38866665959358215, 0.39133334159851074, 0.3916666805744171, 0.39233332872390747, 0.3946666717529297, 0.3956666588783264, 0.3973333239555359, 0.3986666798591614, 0.3996666669845581, 0.4023333191871643, 0.40433332324028015, 0.40666666626930237, 0.4086666703224182, 0.41066667437553406, 0.41200000047683716, 0.4129999876022339, 0.41499999165534973, 0.4156666696071625, 0.4183333218097687, 0.41999998688697815, 0.421999990940094, 0.4233333468437195, 0.4256666600704193, 0.42633333802223206, 0.4269999861717224]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 3, 2, 7, 2, 1, 6, 6, 3, 4, 9, 1, 1, 8, 8], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0, 1, 0, 5], [99, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.33742856979370117, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.5543681127268325, 2.159550294805559, 2.4093757226813217, 2.3043877836924502, 2.3025635856411255, 2.3008914991786154, 2.211278673758864, 2.9785287544916588, 2.304902215250227, 2.3038128198271712, 2.3034787106240007, 2.3031103540137616], "accuracy": [0.21529521048069, 0.2281072586774826, 0.14159291982650757, 0.09932637959718704, 0.10619468986988068, 0.10698718577623367, 0.2001056671142578, 0.12296922504901886, 0.1010434553027153, 0.09760929644107819, 0.09787346422672272, 0.09734513610601425], "val_loss": [1.9576988901410783, 1.9471547263009208, 1.9764161109924316, 1.9737257276262556, 1.9732110159737724, 1.9675773211887904, 3.9834671020507812, 1.9742282458714075, 1.9745359420776367, 1.974135058266776, 1.9739752496991838, 1.973787716456822], "val_accuracy": [0.17299999296665192, 0.29466667771339417, 0.1003333330154419, 0.09866666793823242, 0.0989999994635582, 0.10133333504199982, 0.3216666579246521, 0.10000000149011612, 0.10000000149011612, 0.09833333641290665, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 2, 3, 2, 7, 5, 1, 9, 6, 5, 8, 9, 5, 0], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0, 1, 0, 5], [59, 2, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [16, 57]], "fitness": -0.3197142779827118, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 14, 6, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.sqrt(grad))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.5532231891726807, 2.251877952166804, 2.6254254996327835, 2.307307583418788, 2.304205156729883, 2.303640858876061], "accuracy": [0.21529521048069, 0.14661207795143127, 0.18478403985500336, 0.09985470771789551, 0.09998679161071777, 0.09721305221319199], "val_loss": [1.9423128536769323, 1.8965518133980888, 1.9818236487252372, 1.9745348521641322, 1.973809037889753, 1.9738049507141113], "val_accuracy": [0.18000000715255737, 0.14666666090488434, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 9, 7, 5, 1, 2, 6, 5, 8, 9], [3, 3, 3, 0, 0, 2, 2, 4, 2, 0], [36, 47, 88, 35, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [99, 57, 26]], "fitness": -0.2851428687572479, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5537698814315, 2.2696889678421996, 2.402116624261284, 2.303817189081454, 2.302991709988178, 2.30321583069547], "accuracy": [0.2141064554452896, 0.18531237542629242, 0.12323339283466339, 0.1022322028875351, 0.09800554811954498, 0.10091137140989304], "val_loss": [1.809286321912493, 1.6555535112108504, 1.9753569875444685, 1.9737700734819685, 1.9736875125340052, 1.9737769535609655], "val_accuracy": [0.31066668033599854, 0.265666663646698, 0.1003333330154419, 0.1003333330154419, 0.10199999809265137, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 6, 2, 9, 7, 5, 1, 0, 6, 0, 8, 9, 0, 4], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0, 1, 0, 5], [59, 2, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [55, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 12, 5, 5, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0730418711900711, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 9, 6, 5, 2, 9], [1, 3, 0, 3, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 3, 7, 6, 4, 2, 2, 7, 4, 3, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), grad))))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), beta)), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), sigma)))), tf.math.add(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06339981406927109, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 3, 3, 1, 7, 2, 1, 6, 6, 3, 4, 9, 1, 1, 8, 8], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0, 1, 2, 5], [59, 47, 79, 3, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 8, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 14, 13, 5, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(beta, beta)))))))), tf.math.add(beta, grad)), beta)), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(beta, beta))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 6, 8, 1, 7, 2, 1, 5, 6, 5, 8, 9], [1, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 3, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 19, 19, 12, 7, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028936290690583, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [8, 6, 3, 2, 7, 5, 1, 9, 2, 1, 8, 9], [2, 3, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 12, 6, 5, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06339981406927109, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 4, 6, 4, 9, 1, 5, 8, 9], [1, 3, 0, 2, 3, 2, 2, 3, 2, 0], [36, 65, 64, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [35, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 11, 8, 2, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), beta)))))), grad)), beta)), tf.math.add(beta, tf.math.subtract(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 6, 2, 8, 6, 5, 8, 9, 0], [1, 1, 0, 0, 0, 2, 2, 4, 2, 0], [59, 47, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 2, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))))), beta)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07317395508289337, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 6, 3, 2, 7, 2, 1, 9, 6, 5, 8, 9], [3, 2, 5, 0, 2, 0, 0, 4, 2, 0], [99, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 2, 1, 2, 3], [1, 1, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 6, 5, 4, 1, 1, 6, 3, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, alpha), tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028932765584815, 2.3025866650067552, 2.302581636519275, 2.3025986559717584, 2.302594488543479, 2.3025991950351896, 2.302615104586362, 2.302622078558111], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.10381719470024109, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736360822405135, 1.973635128566197, 1.9736361503601074, 1.973658561706543, 1.9736577442714147, 1.9736719131469727, 1.9737003871372767, 1.9738202095031738], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10199999809265137, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [9, 6, 3, 9, 7, 5, 1, 9, 6, 5, 8, 9, 5, 9], [1, 3, 1, 0, 0, 2, 2, 4, 2, 0], [62, 2, 79, 84, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [37, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [3, 3, 3, 2, 9, 2, 6, 6, 6, 3, 4, 9, 1, 1, 8, 8], [1, 3, 0, 0, 3, 0, 2, 4, 2, 0, 1, 1, 2], [98, 2, 79, 81, 53, 45], [1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 0, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 3, 0, 2, 3, 3, 2], [82, 57, 26]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 13, 10, 6, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(beta, grad)))), tf.math.add(beta, beta))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, sigma))", "other_info": {"loss": [2.302859961852705, 2.3007053120922594, 2.301264534568459, 2.302853218206341, 2.3022997997471872, 2.301491445034502], "accuracy": [0.08994849026203156, 0.09470347315073013, 0.09232597798109055, 0.09153348207473755, 0.09166556596755981, 0.09100515395402908], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]