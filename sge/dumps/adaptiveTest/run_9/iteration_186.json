[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 8, 2, 0, 1, 4, 1, 4, 5, 8, 5, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 8, 1], [5, 2, 3, 3, 0, 2, 2], [57, 56, 47], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8382856845855713, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 1, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), beta))), tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.pow(tf.math.add(beta, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(beta)))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1675448027174817, 1.6753035843285744, 1.3373460624322222, 1.0980139317261843, 1.047086869232753, 0.8277063708122081, 0.8256202508051949, 0.7966402849154686, 0.6979698279530318, 0.7061021824428482, 0.6543610779569291, 0.6228519423117239, 0.6231970247764471, 0.6070189428146819, 0.5994838982950411, 0.558637806035902, 0.5450657642339561, 0.5460395197653578, 0.5621419425937147, 0.5162834068016054, 0.5010720976292418, 0.5155919194300224, 0.49683734740343044, 0.47208470582426687, 0.4796775389364792, 0.4785142566203252, 0.4541444012816745, 0.45263058871026873, 0.445114084041791, 0.4320966545908191, 0.4253284527704055, 0.4247251063872637, 0.4062725945376229, 0.402999422341101, 0.44339851355823495, 0.3914211156692298, 0.3810600601426992, 0.38289284683284724, 0.3758559459117992, 0.3613980906065728, 0.3544989528003827, 0.36588755795952826, 0.3474265164931248, 0.34868170681363164, 0.34515844400627205, 0.32352290025098746, 0.33738213444918125, 0.32364479539070334, 0.33830481021710673, 0.31994938259946043], "accuracy": [0.28661999106407166, 0.459780752658844, 0.5320301055908203, 0.5954299569129944, 0.6118082404136658, 0.6843217611312866, 0.6897371411323547, 0.6999075412750244, 0.7257958054542542, 0.72672039270401, 0.7503632307052612, 0.7635715007781982, 0.7627789974212646, 0.770439863204956, 0.7720248103141785, 0.7918372750282288, 0.7943468689918518, 0.7976489067077637, 0.7882710099220276, 0.8078193068504333, 0.817461371421814, 0.8087438941001892, 0.8153480291366577, 0.8226125836372375, 0.8207634687423706, 0.8197067975997925, 0.8329150676727295, 0.8338396549224854, 0.8356888294219971, 0.8438779711723328, 0.8444063067436218, 0.8445383906364441, 0.8495575189590454, 0.850350022315979, 0.8392550349235535, 0.8519350290298462, 0.8584070801734924, 0.8593316674232483, 0.857218325138092, 0.8667283058166504, 0.8673887252807617, 0.8640866279602051, 0.8702945709228516, 0.8709549307823181, 0.8722757697105408, 0.883238673210144, 0.8708229064941406, 0.880729079246521, 0.8730682730674744, 0.8821820020675659], "val_loss": [1.5607214995792933, 1.222243002482823, 1.0140766416277205, 0.8220502989632743, 0.6537913424628121, 0.6266888209751674, 0.5895718847002301, 0.56817056451525, 0.6076751095908028, 0.5500442811420986, 0.5636122397014073, 0.5374153000967843, 0.5390459809984479, 0.49194339343479704, 0.4752761125564575, 0.44936253343309673, 0.4493938514164516, 0.49158150809151785, 0.43881467410496305, 0.4330442122050694, 0.4441369090761457, 0.4129387651171003, 0.40648748193468365, 0.3910084196499416, 0.40445213658469065, 0.38909949575151714, 0.38841134309768677, 0.3724655338696071, 0.4186627183641706, 0.3807319232395717, 0.39747863156454905, 0.35860618523189, 0.38360014983585905, 0.35656116689954487, 0.37863714354378836, 0.3417708533150809, 0.37032850299562725, 0.35912791320255827, 0.3688268406050546, 0.3341114691325596, 0.37013693366731915, 0.3746344361986433, 0.33729526826313566, 0.3748611637524196, 0.3278234430721828, 0.3711400202342442, 0.33879168544496807, 0.3404742564473833, 0.33164422852652414, 0.32649145807538715], "val_accuracy": [0.41366666555404663, 0.534333348274231, 0.5503333210945129, 0.659333348274231, 0.7279999852180481, 0.721666693687439, 0.7463333606719971, 0.7416666746139526, 0.7113333344459534, 0.7379999756813049, 0.7363333106040955, 0.7506666779518127, 0.7543333172798157, 0.7853333353996277, 0.8066666722297668, 0.7923333048820496, 0.7919999957084656, 0.7793333530426025, 0.8140000104904175, 0.8183333277702332, 0.8130000233650208, 0.8183333277702332, 0.8296666741371155, 0.8263333439826965, 0.8253333568572998, 0.8363333344459534, 0.8396666646003723, 0.8366666436195374, 0.8196666836738586, 0.8349999785423279, 0.8349999785423279, 0.8489999771118164, 0.8246666789054871, 0.8413333296775818, 0.8299999833106995, 0.8539999723434448, 0.8443333506584167, 0.8426666855812073, 0.846666693687439, 0.859333336353302, 0.8456666469573975, 0.840666651725769, 0.8616666793823242, 0.8379999995231628, 0.8636666536331177, 0.8299999833106995, 0.859666645526886, 0.8556666374206543, 0.8573333621025085, 0.8603333234786987]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1], [4, 8, 2, 0, 6, 2, 1, 9, 9, 1], [2, 2, 3, 3, 1, 2, 2], [15, 1, 0, 81, 53, 45], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8354285955429077, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 10, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, beta))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1679212004359623, 1.67197498971634, 1.3064902868757096, 1.0408000466121643, 0.975046473983225, 0.8255780364512578, 0.8753488328494353, 0.7932910291573249, 0.6976014384976499, 0.7401735973380198, 0.6745908472752449, 0.6393562995715149, 0.6401425223734085, 0.6049743933983767, 0.5796300197211334, 0.575632854152617, 0.5837935356652307, 0.5423313246238123, 0.5489695264269348, 0.5355615237243833, 0.5241442030927272, 0.4897459729504135, 0.5134754922521931, 0.4813057835650655, 0.5025436631787046, 0.46496309976709393, 0.46099886437527426, 0.46449122164290674, 0.44202084277032344, 0.4287962928746969, 0.4405639558821905, 0.4319935618665917, 0.423063046495125, 0.4227296683640607, 0.4030741854090937, 0.39926048303166906, 0.40359341283012073, 0.37963781746040637, 0.37208097989706235, 0.4072695628149068, 0.3642873518998518, 0.3714251303362604, 0.3699447584583649, 0.35786519678371803, 0.34595509627475995, 0.3403720132796961, 0.33920139693911555, 0.3303437158809819, 0.33808549365914176, 0.33881739840027586], "accuracy": [0.2860916554927826, 0.45766741037368774, 0.5451063513755798, 0.6239598393440247, 0.6358473300933838, 0.6863030195236206, 0.6785101294517517, 0.7043983340263367, 0.7260599732398987, 0.7131158113479614, 0.7390040755271912, 0.7588165402412415, 0.7547219395637512, 0.7707040309906006, 0.7817989587783813, 0.7817989587783813, 0.7812706232070923, 0.793422281742096, 0.7891955971717834, 0.7969884872436523, 0.8017435073852539, 0.8190463781356812, 0.8083476424217224, 0.8204993009567261, 0.8099326491355896, 0.8208954930305481, 0.8294808864593506, 0.8296129703521729, 0.8378021121025085, 0.8475762605667114, 0.837141752243042, 0.841500461101532, 0.8399154543876648, 0.846387505531311, 0.8531237840652466, 0.8486329317092896, 0.8469158411026001, 0.8628978729248047, 0.8577466607093811, 0.8482366800308228, 0.8642187118530273, 0.8621054291725159, 0.8615770936012268, 0.8650112152099609, 0.8698983192443848, 0.8735966086387634, 0.8698983192443848, 0.8774270415306091, 0.8730682730674744, 0.8754457831382751], "val_loss": [1.5620593002864294, 1.0865182195390974, 0.7817565543310983, 0.7659834963934762, 0.7089816502162388, 0.7735476834433419, 0.6711113282612392, 0.5532444034303937, 0.6061210972922189, 0.5570082494190761, 0.565202031816755, 0.5949433020183018, 0.5071188892636981, 0.487108622278486, 0.4649162973676409, 0.462742669241769, 0.4578864574432373, 0.482163667678833, 0.48766728809901644, 0.44923271451677593, 0.4237108400889805, 0.44878363609313965, 0.41948167766843525, 0.4150265029498509, 0.39696998255593435, 0.41133884872709003, 0.3838263750076294, 0.3941836527415684, 0.3806153791291373, 0.36697087969098774, 0.3873349598475865, 0.3727172187396458, 0.37339539187295095, 0.35805132559367586, 0.37003896066120695, 0.35351794958114624, 0.36738542148045134, 0.35281223910195486, 0.3752070495060512, 0.3404037782124111, 0.370842593056815, 0.40375448976244244, 0.33281757150377544, 0.38589340448379517, 0.3357136845588684, 0.3732932380267552, 0.34546944073268343, 0.34914680889674593, 0.3426778316497803, 0.3264115112168448], "val_accuracy": [0.41466665267944336, 0.5886666774749756, 0.6779999732971191, 0.6736666560173035, 0.70333331823349, 0.6793333292007446, 0.7096666693687439, 0.7609999775886536, 0.7353333234786987, 0.7366666793823242, 0.731333315372467, 0.7236666679382324, 0.7683333158493042, 0.7929999828338623, 0.8053333163261414, 0.7829999923706055, 0.8023333549499512, 0.7720000147819519, 0.7726666927337646, 0.8096666932106018, 0.8203333616256714, 0.7993333339691162, 0.8186666369438171, 0.8159999847412109, 0.8309999704360962, 0.824999988079071, 0.8346666693687439, 0.8316666483879089, 0.8303333520889282, 0.843999981880188, 0.8299999833106995, 0.8349999785423279, 0.8346666693687439, 0.8450000286102295, 0.8376666903495789, 0.8516666889190674, 0.843999981880188, 0.8443333506584167, 0.843999981880188, 0.8536666631698608, 0.8420000076293945, 0.8216666579246521, 0.8603333234786987, 0.8266666531562805, 0.8656666874885559, 0.8353333473205566, 0.856333315372467, 0.843666672706604, 0.8539999723434448, 0.8616666793823242]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 8, 2, 0, 6, 2, 1, 9, 4], [5, 2, 3, 3, 0, 2, 2], [57, 56, 47], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8305714130401611, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(grad), tf.math.add(beta, beta)))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1674551884606217, 1.6702498717787337, 1.409034063094611, 1.1079916761630342, 1.0012673372920666, 0.8795979203029693, 0.8164852428130817, 0.7488249551193384, 0.7235598268762099, 0.7181986661131167, 0.6655716600986189, 0.645749740565316, 0.6212318673692501, 0.6202138374825164, 0.5916913202599039, 0.5518837593817645, 0.5711304225532402, 0.5383075510096698, 0.5647985894351572, 0.519646825169717, 0.5306273010649055, 0.5090711036724831, 0.5069686868769886, 0.47318747893158847, 0.4980233068463667, 0.46870480783469703, 0.4556435237998708, 0.4579785430845473, 0.43446139583277776, 0.4406407286131686, 0.4334864418394199, 0.4109544776150768, 0.4279713947200473, 0.4240777981854417, 0.39735742295737814, 0.39170879713690054, 0.4034088769876694, 0.3746441178444024, 0.3828528429523136, 0.37110283212686307, 0.35688225539400437, 0.36730269802134696, 0.3503341263256305, 0.34281328712566544, 0.3365532615756031, 0.3382829021406117, 0.35833948324337894, 0.3261595844962672, 0.3377551336400875, 0.3307726666392305, 0.325029606218304, 0.3102517362126522], "accuracy": [0.2867520749568939, 0.46413949131965637, 0.5205389261245728, 0.5914674401283264, 0.635451078414917, 0.6760005354881287, 0.6940959095954895, 0.7170783281326294, 0.7271166443824768, 0.7240787148475647, 0.7460044622421265, 0.755118191242218, 0.7635715007781982, 0.767401933670044, 0.7769119143486023, 0.7956677079200745, 0.7836481332778931, 0.7950072884559631, 0.785101056098938, 0.8101968169212341, 0.8047813773155212, 0.8108572363853455, 0.8100647330284119, 0.8252542614936829, 0.8131026029586792, 0.8212917447090149, 0.8305375576019287, 0.8345000743865967, 0.8391229510307312, 0.8367455005645752, 0.8433496356010437, 0.8491612672805786, 0.8404437899589539, 0.8432175517082214, 0.8549728989601135, 0.8540483713150024, 0.846387505531311, 0.8615770936012268, 0.8560295701026917, 0.8659358024597168, 0.8693699836730957, 0.86118084192276, 0.8708229064941406, 0.8749174475669861, 0.8754457831382751, 0.8729361891746521, 0.8622375130653381, 0.8754457831382751, 0.8741249442100525, 0.878879964351654, 0.8780874609947205, 0.8860124349594116], "val_loss": [1.5605220454079765, 1.1090585504259383, 0.9415852342333112, 0.8285222223826817, 0.66196038041796, 0.6178792033876691, 0.5941807883126395, 0.5643823657717023, 0.600596376827785, 0.5822251524244036, 0.561601059777396, 0.5087645394461495, 0.5068530355181012, 0.47694223267691477, 0.4671497004372733, 0.4569266864231655, 0.44471139567238943, 0.5655947072165353, 0.43901218686785015, 0.4560330424989973, 0.4513505016054426, 0.4363942657198225, 0.4070598653384617, 0.41284315075193134, 0.40145442315510343, 0.40601734604154316, 0.4077878338950021, 0.3803335853985378, 0.43454464844294954, 0.36774952922548565, 0.3766292078154428, 0.3868336592401777, 0.3783291493143354, 0.3641296369688852, 0.3567667688642229, 0.35715324538094656, 0.36842128208705355, 0.3742718185697283, 0.38588982820510864, 0.35726024423326763, 0.35576346090861727, 0.3734170539038522, 0.33983365978513447, 0.35749536752700806, 0.3372311421803066, 0.4167617474283491, 0.334434483732496, 0.349414450781686, 0.35009039299828665, 0.3637492060661316, 0.3504766651562282, 0.3724241086414882], "val_accuracy": [0.41366666555404663, 0.5673333406448364, 0.5686666369438171, 0.640333354473114, 0.7113333344459534, 0.7306666374206543, 0.7379999756813049, 0.7513333559036255, 0.7269999980926514, 0.7260000109672546, 0.7400000095367432, 0.7643333077430725, 0.7793333530426025, 0.793666660785675, 0.8040000200271606, 0.7889999747276306, 0.8103333115577698, 0.7459999918937683, 0.8006666898727417, 0.7990000247955322, 0.8106666803359985, 0.7923333048820496, 0.8253333568572998, 0.8109999895095825, 0.8286666870117188, 0.8209999799728394, 0.8223333358764648, 0.8330000042915344, 0.8046666383743286, 0.8410000205039978, 0.8399999737739563, 0.8363333344459534, 0.8263333439826965, 0.8460000157356262, 0.8476666808128357, 0.8496666550636292, 0.8500000238418579, 0.8323333263397217, 0.8326666951179504, 0.8479999899864197, 0.8510000109672546, 0.843666672706604, 0.8513333201408386, 0.8423333168029785, 0.8569999933242798, 0.8076666593551636, 0.8583333492279053, 0.8523333072662354, 0.8473333120346069, 0.846666693687439, 0.8543333411216736, 0.8373333215713501]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [7, 8, 5, 8, 6, 2, 1, 9, 2], [2, 2, 3, 3, 1, 2, 2], [57, 49, 0, 81, 53, 45], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.8180000185966492, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 0, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1674723586291686, 1.6716734707048462, 1.3643280755668945, 1.0909434618998386, 0.950683110291853, 0.8614593789546308, 0.7960662420840547, 0.7425005569701748, 0.7523474459556179, 0.7250078534091138, 0.6489525696919847, 0.649228135269741, 0.6243138821716118, 0.6126548020106894, 0.5885882559485203, 0.5608918078665909, 0.5468752373951207, 0.5614165411790947, 0.5607032120708052, 0.5225522674904555, 0.5121957988999445, 0.5155107366284517, 0.4978914653714842, 0.4738680734854522, 0.4917890002163504, 0.4714467794730474, 0.4545442361629178, 0.4561230687574861, 0.41859503899110606, 0.42825882104346624, 0.42813238187032115, 0.412595141746459, 0.4374099960101673], "accuracy": [0.28661999106407166, 0.4616298973560333, 0.525029718875885, 0.6044115424156189, 0.6519614458084106, 0.6836613416671753, 0.6973979473114014, 0.717870831489563, 0.7168141603469849, 0.7265883088111877, 0.754589855670929, 0.7541936039924622, 0.7598732113838196, 0.7696473598480225, 0.7761194109916687, 0.7898560166358948, 0.7942147850990295, 0.7824593782424927, 0.7843085527420044, 0.8063663840293884, 0.8108572363853455, 0.8064984679222107, 0.8157442808151245, 0.8236692547798157, 0.8156121969223022, 0.8197067975997925, 0.8294808864593506, 0.8294808864593506, 0.845859169960022, 0.8477083444595337, 0.8418967127799988, 0.8482366800308228, 0.8388587832450867], "val_loss": [1.5595898287636893, 1.13370224407741, 1.0765589305332728, 0.7176315614155361, 0.6459755216326032, 0.6295200075422015, 0.5899094683783395, 0.5621381146567208, 0.5933503423418317, 0.5242762565612793, 0.5618393761771066, 0.5311050244740078, 0.5210538080760411, 0.4862015587942941, 0.4916318655014038, 0.4508857216153826, 0.5044207232339042, 0.5395396777561733, 0.46004070554460796, 0.43767309188842773, 0.4445868560246059, 0.4185101645333426, 0.4024783543178013, 0.40491985423224314, 0.4219625677381243, 0.40650096109935213, 0.41794389486312866, 0.3686362845557077, 0.37434518337249756, 0.3915623426437378, 0.3872861010687692, 0.4128584010260446, 0.38398330552237375], "val_accuracy": [0.414000004529953, 0.5393333435058594, 0.6069999933242798, 0.7006666660308838, 0.7203333377838135, 0.7183333039283752, 0.7450000047683716, 0.7590000033378601, 0.7383333444595337, 0.768666684627533, 0.7463333606719971, 0.7480000257492065, 0.7559999823570251, 0.781333327293396, 0.7836666703224182, 0.7883333563804626, 0.7693333625793457, 0.7486666440963745, 0.8043333292007446, 0.8113333582878113, 0.8159999847412109, 0.8146666884422302, 0.828000009059906, 0.8223333358764648, 0.8153333067893982, 0.8236666917800903, 0.8190000057220459, 0.8386666774749756, 0.8383333086967468, 0.8299999833106995, 0.8360000252723694, 0.8119999766349792, 0.8299999833106995]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [7, 8, 2, 0, 6, 2, 1, 9, 4], [5, 2, 3, 3, 0, 2, 2], [57, 56, 47], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.7617142796516418, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(grad), tf.math.add(beta, beta)))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.167453267318918, 1.6691774365262995, 1.279320987161156, 1.0275721295855191, 1.1453710830978445, 0.814076408001851, 0.8701506699584872, 0.7768332881855691, 0.738575463659649, 0.7199755913435649, 0.6783179285866063, 0.6560811469851232, 0.6529815828071184], "accuracy": [0.2867520749568939, 0.4616298973560333, 0.5406154990196228, 0.6185444593429565, 0.6007132530212402, 0.6936996579170227, 0.6799629926681519, 0.7086250185966492, 0.7190595865249634, 0.7283053994178772, 0.7460044622421265, 0.7493065595626831, 0.7493065595626831], "val_loss": [1.560168709073748, 1.175480740410941, 0.8247569629124233, 0.9214573928288051, 0.6750733511788505, 0.7603260278701782, 0.6359843015670776, 0.5748197180884225, 0.6847192219325474, 0.5742542913981846, 0.5835841723850795, 0.5391417401177543, 0.5214967727661133], "val_accuracy": [0.414000004529953, 0.5253333449363708, 0.6650000214576721, 0.637666642665863, 0.7080000042915344, 0.6483333110809326, 0.7173333168029785, 0.7630000114440918, 0.6836666464805603, 0.7366666793823242, 0.7049999833106995, 0.7353333234786987, 0.7543333172798157]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [7, 8, 8, 0, 6, 2, 1, 9], [2, 2, 3, 3, 1, 2, 2], [38, 49, 0], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.2702857255935669, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.5648767359268394, 4.843758831407101, 5.550872679856381, 2.6206564288869307, 21.17765559719979, 3.491282960002165], "accuracy": [0.19944524765014648, 0.19019944965839386, 0.10672302544116974, 0.10157178342342377, 0.09800554811954498, 0.10408136248588562], "val_loss": [3.507847649710519, 7.148932456970215, 2.1568305832999095, 102.61498369489398, 4.53144155229841, 2.478000913347517], "val_accuracy": [0.23800000548362732, 0.15133333206176758, 0.10400000214576721, 0.13466666638851166, 0.10000000149011612, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [7, 8, 2, 0, 6, 2, 1, 4, 3, 9, 3, 9, 7, 0, 3, 9, 6, 4, 4, 1, 3, 5, 2, 8, 4, 4], [1, 2, 3, 3, 1, 2, 2, 4, 0, 0, 4, 2, 2, 3, 2, 5], [38, 49, 0, 94, 88], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 42, 42, 26, 16, 5, 3, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(grad, tf.math.subtract(grad, tf.math.pow(tf.math.multiply(alpha, tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, beta), tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), grad))))))))), tf.math.add(beta, beta))), tf.math.add(beta, grad)))))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07594769448041916, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [9, 8, 8, 0, 6, 2, 1, 9], [2, 0, 3, 3, 1, 2, 2], [38, 49, 0], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [31, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, sigma), sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07740060985088348, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [9, 2, 2, 0, 6, 2, 1, 9], [2, 2, 3, 3, 1, 2, 2], [57, 49, 0, 81, 53, 45], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302226050749368, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 8, 7, 0, 6, 2, 1, 9, 7], [0, 2, 1, 3, 0, 2, 2], [38, 49, 0], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [3, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 3, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.subtract(grad, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [7, 8, 8, 0, 6, 2, 1, 9], [2, 2, 3, 3, 1, 2, 2], [38, 49, 0], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [58, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07621186226606369, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [2, 8, 2, 0, 6, 2, 5, 3, 0, 0], [2, 2, 3, 3, 1, 3, 2], [57, 49, 0, 81, 53, 45], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [63, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 0, 1, 1, 0, 1, 0, 8, 4, 4, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, beta))))), tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(grad))))), tf.math.add(beta, alpha)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.3019959660506033, 2.302250741699888, 2.3025071808627695, 2.302714419449955, 2.303511761466447, 2.3062821909925013], "accuracy": [0.10276053100824356, 0.10896842926740646, 0.09998679161071777, 0.1014397069811821, 0.10249637067317963, 0.09998679161071777], "val_loss": [1.9736813136509486, 1.973750182560512, 1.9739467075892858, 1.9744113513401575, 1.9758681569780623, 1.980365821293422], "val_accuracy": [0.09933333098888397, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 8, 2, 0, 6, 2, 1, 9, 4], [5, 3, 3, 3, 0, 2, 2], [57, 49, 0, 81, 53, 45], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [55, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 13, 7, 6, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, sigma), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07753269374370575, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 2, 2, 2, 6, 2, 1, 9, 1, 6, 7, 7, 4, 2, 7, 1, 5, 5, 6, 9, 0, 3, 1, 9, 1, 9], [2, 2, 3, 3, 1, 2, 3, 5, 1, 4, 2, 5, 3, 2], [70, 49, 0, 81, 53, 45], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [8, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 2, 0, 3, 2, 1, 9, 4], [2, 2, 3, 3, 3, 2, 2], [57, 49, 0, 81, 53, 45], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [0, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 15, 15, 9, 6, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(beta), beta))), tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), grad)), tf.math.pow(grad, tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [1, 8, 2, 0, 6, 2, 1, 9, 4, 3, 0, 8], [5, 2, 3, 3, 0, 2, 2], [80, 56, 47], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [0, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 2, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.subtract(tf.math.add(beta, beta), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.sqrt(beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [52807150.45553645, 1020721199.98098, 4754418535.502312, 12918970795.940298, 28024463913.455025, 51448542916.31964], "accuracy": [0.10077928751707077, 0.09787346422672272, 0.1006472036242485, 0.10051512718200684, 0.09681680053472519, 0.09985470771789551], "val_loss": [202891012.57142857, 1621735021.7142856, 5471795638.857142, 12968371053.714285, 25326704347.42857, 43761776347.42857], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [8, 8, 2, 9, 6, 2, 1, 1, 7, 8, 9, 4, 3, 3, 9, 3, 8, 3, 4, 3, 6, 5, 3, 0, 3, 1], [0, 2, 3, 0, 3, 3, 2, 5, 2, 3, 3, 1, 2, 4, 1, 5], [38, 49, 0], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 3, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [7, 9, 8, 2, 6, 2, 1, 9], [2, 2, 3, 3, 1, 2, 2], [38, 49, 0], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07621186226606369, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [9, 2, 2, 0, 6, 2, 1, 9], [0, 2, 3, 0, 3, 3, 2, 3, 1, 3, 1, 1, 0, 4, 1, 5], [57, 49, 0, 81, 53, 45], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [7, 7], [88, 19], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07621186226606369, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 8, 1, 0, 6, 2, 0, 9, 4], [5, 2, 3, 3, 0, 2, 2], [57, 56, 47], [1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [5, 0, 8, 9, 7], [5, 7], [88, 19], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 4, 2, 1, 2, 3], [1, 3, 0, 1, 3, 3], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 12, 12, 8, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.negative(grad), beta))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.negative(grad))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(alpha, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]