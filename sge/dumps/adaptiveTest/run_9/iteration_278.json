[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8105714321136475, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(beta))), beta)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.108995796320634, 1.6140686716496149, 1.254465294134631, 1.0079648491177717, 0.8345901329425096, 0.7790475645242917, 0.7727042901171134, 0.6937549881899849, 0.723024197171755, 0.670287904131918, 0.6142313741595281, 0.6033519093764536, 0.5880513351669936, 0.5638718714787739, 0.5846489616089714, 0.5326286432623721, 0.5421768053017902, 0.5081101995827011, 0.5081255502389674, 0.5006596494218567, 0.4929969466089998, 0.45138198034150206, 0.5082928815482866, 0.44893302936453816, 0.4683926880847761, 0.43390122094583894, 0.4199467602068675, 0.4352887825974699, 0.413350374982688, 0.4108481871500747, 0.4088053123007172, 0.4074463609415605, 0.3913279266019523, 0.39319483706145286, 0.3851796899646769, 0.37338443764322676, 0.3670234962335399, 0.3761658338413357, 0.34058516561441793, 0.37539102543913505, 0.3362805371538932, 0.34191287760532385, 0.3345147373299667, 0.3260480995112721, 0.3262343606409096, 0.32291455146281034, 0.3221248213397104, 0.3232431996689024, 0.3097359660420955, 0.2942204707019349, 0.3111680001355024], "accuracy": [0.3148857355117798, 0.47246071696281433, 0.5655791759490967, 0.6231673359870911, 0.6733588576316833, 0.7069079279899597, 0.6997754573822021, 0.7445515990257263, 0.7380794882774353, 0.7479857206344604, 0.7696473598480225, 0.7692511081695557, 0.7825914621353149, 0.7857614755630493, 0.7779685854911804, 0.8005547523498535, 0.7943468689918518, 0.81112140417099, 0.807158887386322, 0.8127063512802124, 0.8175934553146362, 0.8329150676727295, 0.8148196935653687, 0.8310658931732178, 0.8253863453865051, 0.8387266993522644, 0.8462554216384888, 0.8337075710296631, 0.8466516733169556, 0.846387505531311, 0.846387505531311, 0.8479725122451782, 0.8553691506385803, 0.8511425256729126, 0.8533879518508911, 0.8652753829956055, 0.8643507957458496, 0.8593316674232483, 0.8708229064941406, 0.8589354157447815, 0.8739928603172302, 0.8741249442100525, 0.8747853636741638, 0.8792761564254761, 0.876370370388031, 0.8794082403182983, 0.8811253309249878, 0.8784837126731873, 0.8833707571029663, 0.8903711438179016, 0.8840311765670776], "val_loss": [1.6936031409672327, 1.304990189416068, 0.7489051137651715, 0.6298885345458984, 0.6167821713856289, 0.6019796643938337, 0.595469423702785, 0.523610098021371, 0.5524907623018537, 0.5183639696666172, 0.5406089680535453, 0.5324792351041522, 0.46511367389134, 0.4855460098811558, 0.44129742894853863, 0.4616699389048985, 0.47563319546835764, 0.46005994932992117, 0.42438130719321115, 0.43223756551742554, 0.38359674385615755, 0.43859476702553885, 0.3906645689691816, 0.4141897814614432, 0.3899127074650356, 0.411838846547263, 0.38255958897726877, 0.37320217915943693, 0.3694293924740383, 0.37150890486580984, 0.42014540093285696, 0.37234216928482056, 0.36287703684398104, 0.42150239433561054, 0.34887821333748953, 0.3563585025923593, 0.3608062522751944, 0.36021009513310026, 0.3434936489377703, 0.3285245725086757, 0.3697750653539385, 0.3315137709890093, 0.3478275537490845, 0.34724111216408865, 0.3459387847355434, 0.3254368560654776, 0.34964493342808317, 0.33286560433251516, 0.3393183435712542, 0.3261940223830087, 0.3242459297180176], "val_accuracy": [0.4346666634082794, 0.5649999976158142, 0.6740000247955322, 0.7263333201408386, 0.7353333234786987, 0.7176666855812073, 0.7403333187103271, 0.7630000114440918, 0.7350000143051147, 0.7613333463668823, 0.7409999966621399, 0.7556666731834412, 0.8013333082199097, 0.7726666927337646, 0.8140000104904175, 0.7836666703224182, 0.7816666960716248, 0.7770000100135803, 0.8183333277702332, 0.8076666593551636, 0.8326666951179504, 0.8220000267028809, 0.8293333053588867, 0.809333324432373, 0.8360000252723694, 0.8146666884422302, 0.8306666612625122, 0.8349999785423279, 0.8389999866485596, 0.8263333439826965, 0.8003333210945129, 0.8410000205039978, 0.8396666646003723, 0.8116666674613953, 0.8519999980926514, 0.8519999980926514, 0.8429999947547913, 0.8476666808128357, 0.8583333492279053, 0.859000027179718, 0.8473333120346069, 0.8603333234786987, 0.8539999723434448, 0.8460000157356262, 0.8489999771118164, 0.8656666874885559, 0.8506666421890259, 0.8633333444595337, 0.8556666374206543, 0.862333357334137, 0.859333336353302]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 5, 0, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 6, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.8011428713798523, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 2, 6, 5, 4, 1, 1, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.108971972979449, 1.6107320813706931, 1.2022242184879444, 0.9829131329473708, 0.8467648967051503, 0.7876560350907336, 0.7587243336586353, 0.7080224296199867, 0.6907885558081498, 0.682940094013728, 0.6198000711551385, 0.5976323059694468, 0.5846104598977484, 0.5756825297311187, 0.5607574581391367, 0.5290796816419885, 0.5289684043206464, 0.5207907836970368, 0.4964758248148719, 0.4778804588610738, 0.5051661929583836, 0.4480908829081627, 0.500331495376925, 0.4436365373264356, 0.4688067480817431, 0.43313751298564696, 0.42289327534355775, 0.41022492986723036, 0.43303065823289966, 0.4070320190487127, 0.4124104556091363, 0.4137283676312411, 0.3782163248314377, 0.3870274937463049, 0.38380172554653996, 0.3708706707522035, 0.3704517238081218, 0.36790051554817926, 0.35058471957265175, 0.3655435554678288, 0.3429331859270375, 0.3449577341391788, 0.33826507319548754, 0.3260348819077149, 0.33951638731281314, 0.3136159945921482, 0.3392024013100519], "accuracy": [0.3148857355117798, 0.4725928008556366, 0.5904107689857483, 0.6384889483451843, 0.6765288710594177, 0.703209638595581, 0.7063795924186707, 0.7337207794189453, 0.7425703406333923, 0.7433628439903259, 0.7629110813140869, 0.7707040309906006, 0.7773081660270691, 0.7817989587783813, 0.787082314491272, 0.8000264167785645, 0.7980451583862305, 0.8021397590637207, 0.8175934553146362, 0.8238013386726379, 0.8123101592063904, 0.8301413059234619, 0.8142913579940796, 0.8317263126373291, 0.82683926820755, 0.8366134166717529, 0.8430854678153992, 0.847840428352356, 0.837141752243042, 0.8502179384231567, 0.8474441766738892, 0.845859169960022, 0.8589354157447815, 0.856689989566803, 0.854708731174469, 0.869502067565918, 0.8614450097084045, 0.8623695969581604, 0.8664641380310059, 0.8578787446022034, 0.8733324408531189, 0.870030403137207, 0.8754457831382751, 0.8798044919967651, 0.8722757697105408, 0.8805969953536987, 0.8770307898521423], "val_loss": [1.6931208201817103, 1.2087771892547607, 0.9337175573621478, 0.651570166860308, 0.6562278270721436, 0.6300213507243565, 0.6340331009456089, 0.5327669211796352, 0.5388598442077637, 0.5121511391230992, 0.48194505487169537, 0.49405711037772043, 0.4684802634375436, 0.4619565861565726, 0.4418249641145979, 0.4165824055671692, 0.45629518372671946, 0.43081068992614746, 0.41872044120516094, 0.46338471344539095, 0.40113247292382376, 0.4366004296711513, 0.3954183799879892, 0.39446296862193514, 0.39412483147212435, 0.39333677291870117, 0.38123174224581036, 0.36687382629939486, 0.36901116371154785, 0.35869234800338745, 0.45015123912266325, 0.3447573184967041, 0.36507080282483784, 0.410011887550354, 0.34249056237084524, 0.3437379513468061, 0.35641415630068096, 0.3627481290272304, 0.33398853881018503, 0.3335143412862505, 0.36923795086996897, 0.32743527208055767, 0.3335763726915632, 0.37117499113082886, 0.3308324728693281, 0.3500840663909912, 0.3384657417024885], "val_accuracy": [0.4350000023841858, 0.5806666612625122, 0.6643333435058594, 0.7179999947547913, 0.6943333148956299, 0.6913333535194397, 0.7310000061988831, 0.7680000066757202, 0.7453333139419556, 0.7673333287239075, 0.7763333320617676, 0.7743333578109741, 0.7943333387374878, 0.7950000166893005, 0.8026666641235352, 0.8183333277702332, 0.7913333177566528, 0.8103333115577698, 0.8243333101272583, 0.7820000052452087, 0.8246666789054871, 0.8159999847412109, 0.82833331823349, 0.8193333148956299, 0.831333339214325, 0.82833331823349, 0.831333339214325, 0.8413333296775818, 0.8413333296775818, 0.8450000286102295, 0.777999997138977, 0.8526666760444641, 0.8396666646003723, 0.8223333358764648, 0.8519999980926514, 0.8573333621025085, 0.8493333458900452, 0.8506666421890259, 0.8619999885559082, 0.8569999933242798, 0.8483333587646484, 0.862333357334137, 0.8550000190734863, 0.8336666822433472, 0.8543333411216736, 0.8446666598320007, 0.8533333539962769]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 8, 2, 9, 5, 3, 6, 8, 6, 5, 8, 9], [5, 3, 3, 5, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [30, 57]], "fitness": -0.7979999780654907, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2857587693342523, 2.245474001734941, 2.1874885307783623, 2.097250481071316, 1.9607124132266716, 1.774788556853463, 1.5876486436203723, 1.4183178981376157, 1.3005475951475538, 1.2190775354351617, 1.1349203361260058, 1.0831219481439356, 1.0261422483566147, 0.9858166026228281, 0.9535514361838529, 0.9276654261088468, 0.9184173469561722, 0.8960423319409977, 0.8798186959780722, 0.86157516225643, 0.8421543075455462, 0.8392641600002434, 0.8260778917644034, 0.8045209829817673, 0.7983001656913958, 0.7834870600980649, 0.7810262324724687, 0.771551802378478, 0.7678591285352111, 0.7509802806693896, 0.7524201792969034, 0.7435527222897509, 0.7354177628305405, 0.7348920730252733, 0.7229710266873852, 0.7184631997457884, 0.7149186376819301, 0.7082380833658544, 0.7078475489702679, 0.7038355269814369, 0.6939508188764385, 0.6949398084764452, 0.6937994542941913, 0.6796252088791753, 0.6818762615041616, 0.6705930922812695, 0.6775618156878515, 0.6621901095897578, 0.6675965433595612, 0.6584355939947745, 0.6612326921237033, 0.6619305059012641, 0.6599224720255038, 0.6526827597111098, 0.6498679231580191, 0.6390565950179916, 0.640890297982923], "accuracy": [0.13868708908557892, 0.22942808270454407, 0.3129045069217682, 0.3778893053531647, 0.41804254055023193, 0.4647998809814453, 0.4939902126789093, 0.5386342406272888, 0.5591071248054504, 0.5844670534133911, 0.6032228469848633, 0.6236956715583801, 0.6400739550590515, 0.6530181169509888, 0.6629242897033691, 0.669792652130127, 0.6653017997741699, 0.6758684515953064, 0.6857746839523315, 0.6906617283821106, 0.6876237988471985, 0.693831741809845, 0.7079645991325378, 0.7017567157745361, 0.7074362635612488, 0.7147008180618286, 0.7156254053115845, 0.7172104120254517, 0.7182670831680298, 0.7284374833106995, 0.7218332886695862, 0.7226257920265198, 0.7298903465270996, 0.7304186820983887, 0.7322678565979004, 0.7349095344543457, 0.7323999404907227, 0.7339849472045898, 0.735041618347168, 0.7351737022399902, 0.7424382567405701, 0.7395324110984802, 0.7433628439903259, 0.7506273984909058, 0.7478536367416382, 0.7572315335273743, 0.7465327978134155, 0.7565711140632629, 0.7477215528488159, 0.7524765729904175, 0.755118191242218, 0.7506273984909058, 0.7503632307052612, 0.757099449634552, 0.7598732113838196, 0.7557786107063293, 0.7561748623847961], "val_loss": [1.9345040321350098, 1.8901562690734863, 1.8209810256958008, 1.7100261620112829, 1.549591405051095, 1.3540969916752406, 1.1708382878984724, 1.026576008115496, 0.9283104283469064, 0.8583248002188546, 0.8056737184524536, 0.7685845579419818, 0.7351467950003487, 0.7103922026497977, 0.6893157277788434, 0.6722324745995658, 0.6615929092679705, 0.6478642565863473, 0.635189277785165, 0.6249295813696725, 0.6170681374413627, 0.6102458238601685, 0.6010680709566388, 0.592402628489903, 0.5872247559683663, 0.583411591393607, 0.577986444745745, 0.5719486474990845, 0.5679401329585484, 0.5634740931647164, 0.5589842115129743, 0.553683945110866, 0.5531510966164725, 0.546573383467538, 0.5418557098933628, 0.5392754759107318, 0.5357675892966134, 0.5354620729173932, 0.5326013565063477, 0.5318926402500698, 0.5256427015577044, 0.5240021773747036, 0.5178547416414533, 0.5174278020858765, 0.5153945854731968, 0.5149366515023368, 0.5108446734292167, 0.5097754001617432, 0.5068226201193673, 0.5069571733474731, 0.5012716736112323, 0.5005467278616769, 0.5015168360301426, 0.4974954979760306, 0.49339761052812847, 0.4923124143055507, 0.49510858740125385], "val_accuracy": [0.3230000138282776, 0.40433332324028015, 0.4620000123977661, 0.5320000052452087, 0.5616666674613953, 0.5860000252723694, 0.6269999742507935, 0.6516666412353516, 0.659333348274231, 0.6793333292007446, 0.6896666884422302, 0.6916666626930237, 0.7009999752044678, 0.7086666822433472, 0.7160000205039978, 0.7206666469573975, 0.7233333587646484, 0.7289999723434448, 0.7323333621025085, 0.7363333106040955, 0.7329999804496765, 0.7426666617393494, 0.7446666955947876, 0.7493333220481873, 0.746666669845581, 0.7433333396911621, 0.7513333559036255, 0.7566666603088379, 0.762333333492279, 0.7546666860580444, 0.7570000290870667, 0.762666642665863, 0.7613333463668823, 0.765333354473114, 0.7616666555404663, 0.7689999938011169, 0.768666684627533, 0.7713333368301392, 0.7689999938011169, 0.7739999890327454, 0.7716666460037231, 0.7763333320617676, 0.7773333191871643, 0.7743333578109741, 0.7720000147819519, 0.7820000052452087, 0.7799999713897705, 0.7786666750907898, 0.7766666412353516, 0.7799999713897705, 0.7836666703224182, 0.7863333225250244, 0.781333327293396, 0.7820000052452087, 0.7863333225250244, 0.7786666750907898, 0.7820000052452087]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 8, 8, 9], [1, 3, 0, 5, 0, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1], [2, 0, 8, 9, 7], [0, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.7345714569091797, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 3, 3, 2, 1, 1, 1, 6, 3, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.square(grad))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.639320632674832, 2.3061051481766173, 2.2777620319204717, 1.8774629987037224, 1.9645284633468942, 1.8642050382751185, 1.5998012609863483, 1.2511261265748024, 1.0666367303677964, 0.9765874076402891, 0.8804479238851872, 0.8429798817102384, 0.8630257133463859, 0.8113131426533593, 0.8356833079188428, 0.7816541342923606, 0.8072045387813617], "accuracy": [0.22401267290115356, 0.10645885765552521, 0.17210407555103302, 0.3661339282989502, 0.35820895433425903, 0.36903974413871765, 0.44644036889076233, 0.5596354603767395, 0.6122044920921326, 0.6415268778800964, 0.6787742972373962, 0.6893408894538879, 0.6819442510604858, 0.691850483417511, 0.6847180128097534, 0.7107383608818054, 0.7073041796684265], "val_loss": [1.9793229784284319, 1.9718096596854073, 1.8201862062726701, 1.3763148784637451, 1.5401122570037842, 1.0565508774348669, 1.0186097281319755, 0.7579946007047381, 0.7342693294797625, 0.671715361731393, 0.6273349693843296, 0.6023153407233102, 0.6456423316683088, 0.5937394414629255, 0.6253153085708618, 0.657969559941973, 0.6368461677006313], "val_accuracy": [0.09833333641290665, 0.10499999672174454, 0.2866666615009308, 0.49033331871032715, 0.46000000834465027, 0.562666654586792, 0.6349999904632568, 0.6816666722297668, 0.6896666884422302, 0.7239999771118164, 0.7333333492279053, 0.7436666488647461, 0.703000009059906, 0.7286666631698608, 0.7233333587646484, 0.7016666531562805, 0.7163333296775818]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [3, 0, 5, 1, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [23, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 1, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.2871428430080414, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.9282798603966316, 2.2769093599144368, 2.302945341904559, 2.2656087093443964, 2.3500719468166262, 2.3035686436173086, 2.303107280111458, 2.302987894724074, 2.3030257892646433], "accuracy": [0.18042530119419098, 0.14449875056743622, 0.10342095047235489, 0.14542332291603088, 0.15863162279129028, 0.09576013684272766, 0.09787346422672272, 0.09232597798109055, 0.10051512718200684], "val_loss": [1.9530555180140905, 1.9747482708522253, 1.971465996333531, 1.8763089861188615, 1.9749675478254045, 1.974057946886335, 1.9736897604806083, 1.9736745698111398, 1.9738174847194128], "val_accuracy": [0.10066666454076767, 0.09833333641290665, 0.11433333158493042, 0.23233333230018616, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.09799999743700027, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 4, 7, 6, 1, 8, 6, 5, 8, 9], [1, 3, 0, 5, 0, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.23314285278320312, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(alpha, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(beta))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.928584313962627, 2.2704007920020954, 2.345249360216418, 2.3028972191723063, 2.071874603949927, 2.3087484362953297, 2.303968636429998, 2.30283208186868, 2.259335385652471], "accuracy": [0.18042530119419098, 0.1430458277463913, 0.1450270712375641, 0.10302469879388809, 0.2230881005525589, 0.09628847241401672, 0.09893012791872025, 0.09549596905708313, 0.13855500519275665], "val_loss": [1.9558322089059013, 1.9620650155203683, 1.9750580106462752, 1.9644815581185477, 1.9838970729282923, 1.9750473839896066, 1.9735228674752372, 1.9720139503479004, 5.492227145603725], "val_accuracy": [0.10066666454076767, 0.10266666859388351, 0.1003333330154419, 0.14766666293144226, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09799999743700027, 0.1459999978542328]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 1, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 1, 0, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.13857142627239227, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.9284782982174873, 3.1791361368658237, 2.310966896673849, 2.304144663030382, 2.303400641371939, 2.301462515737906, 2.2627272485600267, 2.3533628089883623, 2.3043514956352245, 2.303610052588184, 2.30340398301097], "accuracy": [0.1798969805240631, 0.22982433438301086, 0.09642054885625839, 0.09681680053472519, 0.09628847241401672, 0.10777968913316727, 0.175670325756073, 0.09853387624025345, 0.09351472556591034, 0.09589222073554993, 0.09549596905708313], "val_loss": [1.9535548346383231, 1.997556482042585, 1.974639620099749, 1.9737165996006556, 1.9732463019234794, 1.9670629501342773, 2.219621385846819, 1.9743622371128626, 1.9739879199436732, 1.973702839442662, 1.9738695280892509], "val_accuracy": [0.10066666454076767, 0.09833333641290665, 0.09833333641290665, 0.10366666316986084, 0.09966666996479034, 0.17499999701976776, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.09799999743700027, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [70, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [0, 3, 3, 5, 3, 2, 2, 4, 2, 0], [41, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 2, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10513802617788315, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [3, 0, 5, 3, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1], [9, 0, 8, 9, 7], [1, 0], [88, 19], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(beta, grad))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 0, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [4, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 1, 4, 3, 2, 1, 0, 7, 4, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.negative(beta))), beta)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07647603005170822, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 4, 3, 5, 1, 8, 6, 5, 8, 9], [1, 2, 0, 5, 0, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 8, 9, 7], [1, 0], [88, 19], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.subtract(alpha, beta)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.sqrt(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), beta)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07740060985088348, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 2, 3, 5, 9, 6, 8, 6, 5, 8, 9], [2, 3, 3, 5, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 2, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 10, 5, 1, 1, 1, 0, 1, 0, 7, 4, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1.681824377329944e+26, 9.699907935574196, 18.657639622263165, 27.620712748608018, 36.58073282802361, 45.550372872826856], "accuracy": [0.07647603005170822, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.168858391898019, 12.831101553780693, 20.519791194370814, 28.2045168195452, 35.89887891496931, 43.58672986711775], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [8, 0, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 1, 3, 5, 0, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 4, 2, 1, 2, 3], [1, 3, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.square(tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.divide_no_nan(grad, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07740060985088348, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [2, 3, 5, 0, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 4, 7, 5, 1, 8, 6, 5, 8, 9], [3, 3, 3, 3, 3, 3, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [2, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 0, 4, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(tf.math.square(tf.math.add(beta, grad)), grad), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.subtract(grad, tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 8, 2, 7, 5, 1, 8, 6, 5, 8, 9], [0, 3, 5, 3, 3, 2, 2, 4, 2, 0], [80, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [4, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [0, 0, 0, 2, 3, 3, 2], [48, 57, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 3, 2, 1, 0, 7, 4, 3, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.302772294135063, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 7, 5, 1, 8, 6, 5, 8, 9], [3, 3, 2, 3, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 4, 2, 1, 2, 3], [0, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 5, 6, 0, 4, 3, 2, 1, 0, 4, 2, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), beta), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302772294135063, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 3, 2, 2, 5, 1, 8, 6, 5, 8, 9], [3, 3, 5, 3, 3, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [9, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [74, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 0, 5, 5, 4, 1, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), grad)))), tf.math.add(beta, tf.math.subtract(grad, grad)))), beta)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07740060985088348, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 6, 2, 4, 7, 5, 1, 8, 6, 5, 8, 9], [1, 3, 0, 5, 0, 2, 2, 4, 2, 0], [47, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.06514285504817963, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, sigma), sigma)))", "other_info": {"loss": [2.3018236210663967, 2.3022546712449357, 2.3016635226913653, 2.301927974872491, 2.302499090030193, 2.3014511799437574, 2.301018260016874, 2.3001646634342334, 2.3006816457338526, 2.301219512883777, 2.30047800597293, 2.3011053531492043, 2.300811774348696, 2.3001439913373187, 2.300713380188313, 2.300074145558047, 2.3000281526585455, 2.299802706682797, 2.3000152778978187, 2.2997874905010964, 2.299157425932455, 2.3011071070105626, 2.3007919893540634], "accuracy": [0.09800554811954498, 0.09166556596755981, 0.09298639744520187, 0.08981640636920929, 0.09021265059709549, 0.08981640636920929, 0.0948355570435524, 0.09509972482919693, 0.09615638852119446, 0.0940430611371994, 0.09298639744520187, 0.09615638852119446, 0.09457138925790787, 0.09945846349000931, 0.09192973375320435, 0.10236428678035736, 0.0948355570435524, 0.1010434553027153, 0.09708096832036972, 0.09866596013307571, 0.10342095047235489, 0.09285431355237961, 0.09708096832036972], "val_loss": [1.9708256721496582, 1.970480101449149, 1.970280374799456, 1.970085893358503, 1.9699256079537528, 1.969820431300572, 1.9697634833199638, 1.9697961126055037, 1.9698227473667689, 1.9697809219360352, 1.9697982924325126, 1.9697566032409668, 1.9697116443089075, 1.9697369847978865, 1.9696619851248605, 1.9696034703935896, 1.9695802416120256, 1.9695846012660436, 1.969641957964216, 1.9696922983442033, 1.9697749955313546, 1.9698755400521415, 1.9699944768633162], "val_accuracy": [0.0430000014603138, 0.04500000178813934, 0.04766666516661644, 0.05000000074505806, 0.052666667848825455, 0.055666666477918625, 0.058666665107011795, 0.05966666713356972, 0.058666665107011795, 0.05900000035762787, 0.057999998331069946, 0.05966666713356972, 0.06300000101327896, 0.06366666406393051, 0.06599999964237213, 0.06866666674613953, 0.07000000029802322, 0.07266666740179062, 0.07199999690055847, 0.07066666334867477, 0.06866666674613953, 0.06966666877269745, 0.0689999982714653]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 6, 3, 4, 7, 5, 6, 8, 6, 5, 8, 9], [1, 3, 0, 5, 2, 2, 2, 4, 2, 0], [94, 47, 79, 81, 53, 45], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [2, 0, 8, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 3, 0, 4, 2, 1, 2, 3], [1, 3, 0, 2, 3, 3, 2], [48, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 4, 3, 2, 1, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.multiply(grad, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad)))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(alpha, sigma))", "other_info": {"loss": [2.302061980473855, 2.302981260760963, 2.302744723959779, 2.3032895052484976, 2.304372110670395, 2.303603511240189], "accuracy": [0.09774138033390045, 0.08955223858356476, 0.09100515395402908, 0.08757099509239197, 0.0878351628780365, 0.0866464152932167], "val_loss": [1.9712318692888533, 1.971231188092913, 1.971231460571289, 1.9712322098868233, 1.9712329592023576, 1.9712328229631697], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]