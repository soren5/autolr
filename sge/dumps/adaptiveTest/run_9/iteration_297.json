[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 1, 8, 8, 8, 9], [3, 3, 0, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8411428332328796, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), beta))), tf.math.sqrt(tf.math.add(beta, alpha)))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.114438189271104, 1.8731664026795976, 1.3595979201905464, 1.0084089623182804, 0.8698194975299354, 0.7721023711829437, 0.7100473731390127, 0.6686085893918557, 0.6717804499809942, 0.6380279608422172, 0.5979635960563551, 0.5942901302842006, 0.5708113155895929, 0.5734316191070541, 0.546759049409983, 0.5346069672891508, 0.507426649202146, 0.5487165679281036, 0.4906385853589408, 0.47653839717199775, 0.49160324536798305, 0.47288056622328084, 0.4665337243273494, 0.4458890218012652, 0.45446493203739813, 0.43861326779577287, 0.4592874233693715, 0.41498928031255666, 0.417491070547313, 0.414886143095442, 0.3943734224469922], "accuracy": [0.29084664583206177, 0.3983621597290039, 0.5348038673400879, 0.6248844265937805, 0.667811393737793, 0.6991150379180908, 0.7300224304199219, 0.7407211661338806, 0.7357020378112793, 0.7555144429206848, 0.7712323069572449, 0.7721568942070007, 0.7860256433486938, 0.7796856164932251, 0.7959318161010742, 0.7955356240272522, 0.8099326491355896, 0.7960638999938965, 0.811649739742279, 0.8204993009567261, 0.8107251524925232, 0.8230088353157043, 0.826310932636261, 0.8355567455291748, 0.8322546482086182, 0.8341038227081299, 0.8267071843147278, 0.8438779711723328, 0.8430854678153992, 0.8450667262077332, 0.8553691506385803], "val_loss": [1.848644801548549, 0.9978491238185337, 0.7931698220116752, 0.6775976078850883, 0.6810035194669452, 0.5939138616834369, 0.550583907536098, 0.5355889626911708, 0.530192460332598, 0.4771176746913365, 0.4554034471511841, 0.4557854277747018, 0.5000085830688477, 0.45595438139779226, 0.47014898913247244, 0.4191692982401167, 0.4733821153640747, 0.4247599073818752, 0.40925644976752146, 0.3935604861804417, 0.4047361356871469, 0.38129838023866924, 0.4084446941103254, 0.3850364514759609, 0.401592629296439, 0.3600550719669887, 0.38644175018583027, 0.3864403281893049, 0.3839005061558315, 0.36893843752997263, 0.510781066758292], "val_accuracy": [0.20800000429153442, 0.6100000143051147, 0.6793333292007446, 0.6953333616256714, 0.6726666688919067, 0.7360000014305115, 0.746999979019165, 0.7586666941642761, 0.7599999904632568, 0.7950000166893005, 0.79666668176651, 0.7946666479110718, 0.7716666460037231, 0.8100000023841858, 0.7839999794960022, 0.8173333406448364, 0.7896666526794434, 0.8116666674613953, 0.8230000138282776, 0.82833331823349, 0.8203333616256714, 0.8383333086967468, 0.8109999895095825, 0.8330000042915344, 0.8263333439826965, 0.8416666388511658, 0.8289999961853027, 0.831333339214325, 0.8323333263397217, 0.8363333344459534, 0.7730000019073486]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 4, 3, 2, 2, 2, 1, 1, 8, 9, 2, 9], [2, 3, 0, 2, 3, 1, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8305714130401611, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.114422934670348, 1.8743969684799098, 1.3281513092587447, 1.0066550458741934, 0.8751497251277964, 0.7852787585495297, 0.7297460398087019, 0.660862468945714, 0.6551935258180616, 0.6391023944759759, 0.6108286396670792, 0.5945492062696518, 0.5699892597837124, 0.5712973177866015, 0.5418923755898813, 0.5324181830169754, 0.519432090725708, 0.554657824728168, 0.49237747448877245, 0.4821723321637993, 0.495197535993999, 0.4716640807704966, 0.4694395472250437, 0.4532081177245357, 0.46386619534364637, 0.437446154123599, 0.4323145652318029, 0.4381900814506655, 0.41962262186250193, 0.4186627988164388, 0.40280169117499526, 0.43809902781760607], "accuracy": [0.29084664583206177, 0.39928674697875977, 0.5455026030540466, 0.6366398334503174, 0.6693964004516602, 0.7024171352386475, 0.7253995537757874, 0.7464007139205933, 0.7506273984909058, 0.7514199018478394, 0.7672698497772217, 0.7740060687065125, 0.7848368883132935, 0.7840443849563599, 0.7952714562416077, 0.7936864495277405, 0.8038568496704102, 0.7928939461708069, 0.8105930685997009, 0.8206313848495483, 0.8123101592063904, 0.8271034359931946, 0.8265751004219055, 0.8323867321014404, 0.828820526599884, 0.8384625315666199, 0.837537944316864, 0.8310658931732178, 0.8445383906364441, 0.8448025584220886, 0.8536521196365356, 0.8358209133148193], "val_loss": [1.8483657155718123, 0.9931504045213971, 0.703829458781651, 0.7244452408381871, 0.6028241770608085, 0.5851165567125592, 0.5220424447740827, 0.5521541663578579, 0.5311962025506156, 0.5196385383605957, 0.5253516605922154, 0.45377453735896517, 0.46501379353659494, 0.4693866457257952, 0.48671690055302214, 0.4314019765172686, 0.47672808170318604, 0.42893299034663607, 0.41558219705309185, 0.3979149801390512, 0.4049676316125052, 0.38580996649605886, 0.41720670461654663, 0.3921792677470616, 0.3971167632511684, 0.36907256501061575, 0.37477254016058786, 0.3779498508998326, 0.3801433188574655, 0.37102229254586355, 0.47911075183323454, 0.4040513719831194], "val_accuracy": [0.2083333283662796, 0.6100000143051147, 0.7066666483879089, 0.6996666789054871, 0.734666645526886, 0.7473333477973938, 0.7666666507720947, 0.7459999918937683, 0.7523333430290222, 0.7870000004768372, 0.7506666779518127, 0.8023333549499512, 0.7953333258628845, 0.7960000038146973, 0.7773333191871643, 0.8130000233650208, 0.7889999747276306, 0.8180000185966492, 0.8169999718666077, 0.8203333616256714, 0.8226666450500488, 0.8336666822433472, 0.8046666383743286, 0.8286666870117188, 0.8276666402816772, 0.840666651725769, 0.8423333168029785, 0.8423333168029785, 0.8309999704360962, 0.8386666774749756, 0.781333327293396, 0.8159999847412109]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 2, 2, 1, 1, 8, 9, 8, 9], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.819428563117981, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 12, 6, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.sqrt(grad)), grad)), tf.math.add(beta, beta))), alpha), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.11445260306139, 1.882801260096034, 1.2314094520200907, 1.0398719908775136, 0.951882065665122, 0.774534954937804, 0.718469805792102, 0.6780961202813052, 0.661275732227525, 0.6327490723994367, 0.5984928080702124, 0.5988754843204344, 0.5610779428825308, 0.5866730154749424, 0.5442737791012653, 0.5177855057298169, 0.5324597748011457, 0.5338194118262818, 0.48900843051603804, 0.4704734733776724, 0.49749512283352654, 0.48057729820250333, 0.4706916974842934, 0.45585336206202115, 0.45575582824835387, 0.44518677356724634, 0.44345131534170307, 0.4125917430889841, 0.44061721242366925, 0.4040911393733372, 0.3920040714813183, 0.4431872232565554], "accuracy": [0.2907145619392395, 0.3980979919433594, 0.5719191431999207, 0.6085061430931091, 0.6462818384170532, 0.7037379741668701, 0.7271166443824768, 0.7304186820983887, 0.7401928305625916, 0.7544577717781067, 0.7693831920623779, 0.7707040309906006, 0.785629391670227, 0.7741381525993347, 0.7968564033508301, 0.8018755912780762, 0.8010830879211426, 0.8016114234924316, 0.8166688680648804, 0.821820080280304, 0.8131026029586792, 0.8193105459213257, 0.8239334225654602, 0.8329150676727295, 0.8317263126373291, 0.8359529972076416, 0.8298771381378174, 0.8454629778862, 0.8359529972076416, 0.8532558679580688, 0.8570862412452698, 0.8363492488861084], "val_loss": [1.8503129822867257, 0.9990225860050747, 0.6934161697115216, 0.892763784953526, 0.6272097144808088, 0.6124669143131801, 0.5316010202680316, 0.5644960744040353, 0.5036508526120868, 0.503088218825204, 0.5372334718704224, 0.4583196299416678, 0.5412276983261108, 0.45483968939099995, 0.46736892632075716, 0.420652048928397, 0.5027928692953927, 0.4202101486069815, 0.4090843711580549, 0.39691275358200073, 0.39867434331348967, 0.37974593469074797, 0.4057159849575588, 0.41436247314725605, 0.3998993379729135, 0.37706227813448223, 0.3766018748283386, 0.3802915726389204, 0.374143259865897, 0.37847067628587994, 0.48643050874982563, 0.43523939166750225], "val_accuracy": [0.20733332633972168, 0.6140000224113464, 0.6819999814033508, 0.6286666393280029, 0.7153333425521851, 0.7336666584014893, 0.762333333492279, 0.7323333621025085, 0.765999972820282, 0.7736666798591614, 0.7440000176429749, 0.8003333210945129, 0.7536666393280029, 0.8076666593551636, 0.7826666831970215, 0.8240000009536743, 0.781333327293396, 0.8159999847412109, 0.8193333148956299, 0.8259999752044678, 0.8220000267028809, 0.8360000252723694, 0.8143333196640015, 0.8166666626930237, 0.8266666531562805, 0.8363333344459534, 0.8393333554267883, 0.8336666822433472, 0.8386666774749756, 0.8320000171661377, 0.778333306312561, 0.7996666431427002]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 5, 3, 2, 0, 5, 1, 9, 8, 5, 8, 9], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8182857036590576, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 10, 3, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))))), grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.114565488102099, 1.8832765048158924, 1.3432963872865962, 1.0246009317843858, 0.8716302727664136, 0.7650444393443897, 0.7204804193735784, 0.6721761839469473, 0.6756176762356656, 0.6261292556651343, 0.6200994764021784, 0.5954737899058121, 0.5633654850207268, 0.5819963963040271, 0.5266345472241972, 0.5442182638499998, 0.5301897373055864, 0.5425544353547649, 0.4929164536262878, 0.4834224670168872, 0.5113849512196457, 0.47915238097138835, 0.4709567744592398, 0.45054814448965663, 0.4406248633541278, 0.45461842939287145, 0.4591404284704725, 0.42317011654809983, 0.41877637016475633, 0.42091724730800756, 0.394831211984811, 0.4541649420176987, 0.4061217792730731, 0.3857930916694996, 0.37080309106736464, 0.37472380408206557, 0.3808915933652907, 0.3695432928141948], "accuracy": [0.29097872972488403, 0.3980979919433594, 0.5326905250549316, 0.6287148594856262, 0.6645092964172363, 0.7061154246330261, 0.7180029153823853, 0.7380794882774353, 0.7358341217041016, 0.7560427784919739, 0.759609043598175, 0.7652885913848877, 0.787082314491272, 0.778761088848114, 0.802800178527832, 0.7969884872436523, 0.8034605979919434, 0.7988376617431641, 0.8117818236351013, 0.8177255392074585, 0.8049134612083435, 0.824329674243927, 0.8252542614936829, 0.8341038227081299, 0.8359529972076416, 0.8309338092803955, 0.8305375576019287, 0.8387266993522644, 0.8438779711723328, 0.8442742228507996, 0.8549728989601135, 0.8304054737091064, 0.8454629778862, 0.8570862412452698, 0.8638224601745605, 0.8614450097084045, 0.8585391640663147, 0.8676528930664062], "val_loss": [1.8486437797546387, 1.015561614717756, 0.7450614316122872, 0.6560013294219971, 0.6103886025292533, 0.5827949047088623, 0.5850144965308053, 0.5952080147606986, 0.49821339334760395, 0.5140988145555768, 0.4687314374106271, 0.45991040979112896, 0.46951792921338764, 0.438886148588998, 0.5251553569521222, 0.43868184089660645, 0.5206387724195208, 0.41886253016335623, 0.4080528276307242, 0.3945555090904236, 0.4073551041739328, 0.3816088948931013, 0.41512651102883474, 0.37893580538885935, 0.426157466002873, 0.36540463992527555, 0.40388124329703196, 0.3840328369821821, 0.3891266328947885, 0.3689273510660444, 0.5167676210403442, 0.41760333095278057, 0.3541680063520159, 0.3649700880050659, 0.38799649477005005, 0.35812404326030184, 0.37903490236827303, 0.3913147108895438], "val_accuracy": [0.20800000429153442, 0.609666645526886, 0.7023333311080933, 0.7243333458900452, 0.7263333201408386, 0.7423333525657654, 0.7223333120346069, 0.721666693687439, 0.7720000147819519, 0.7633333206176758, 0.7923333048820496, 0.8006666898727417, 0.7806666493415833, 0.8133333325386047, 0.7643333077430725, 0.8066666722297668, 0.7733333110809326, 0.8159999847412109, 0.8213333487510681, 0.8233333230018616, 0.8169999718666077, 0.8356666564941406, 0.8026666641235352, 0.8373333215713501, 0.812333345413208, 0.8386666774749756, 0.8169999718666077, 0.8330000042915344, 0.8286666870117188, 0.8389999866485596, 0.7683333158493042, 0.8036666512489319, 0.8503333330154419, 0.8373333215713501, 0.8323333263397217, 0.8450000286102295, 0.8386666774749756, 0.8349999785423279]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 4, 3, 2, 0, 5, 2, 9, 8, 5, 8, 9], [3, 3, 0, 2, 3, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.8140000104904175, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1145926271966893, 1.8899706120441273, 1.3374081563955884, 0.9757336384080829, 0.9483643274549102, 0.7652112219343411, 0.7179484030180414, 0.6600948444620147, 0.6707070181240983, 0.6280731602021181, 0.5977264572254277, 0.6055989655851924, 0.5734558757805411, 0.5729639785023035, 0.5435008089130802, 0.5154948985343596, 0.5372285830377824, 0.5401690325063406, 0.4920334331883164, 0.46789535845448676, 0.5020644036046014, 0.47359558556136866, 0.4674666078256626, 0.4538637846334342, 0.4533352858205245, 0.4497526159824681, 0.4312797367037437, 0.4248949274521116, 0.42002432321702265, 0.42558873923951296, 0.39493537090473707, 0.42294584441225935, 0.39602463743501193, 0.3796287461310298, 0.37366000753525397, 0.3704370969259161, 0.3753611267345173, 0.3677227976787926], "accuracy": [0.29045039415359497, 0.39704135060310364, 0.5334830284118652, 0.6351869106292725, 0.6440364718437195, 0.7100779414176941, 0.7305507659912109, 0.7465327978134155, 0.7392682433128357, 0.763439416885376, 0.7712323069572449, 0.7664773464202881, 0.7812706232070923, 0.7848368883132935, 0.7930260300636292, 0.8038568496704102, 0.798309326171875, 0.7967243194580078, 0.8129705190658569, 0.8236692547798157, 0.8082155585289001, 0.8231409192085266, 0.8265751004219055, 0.8313300609588623, 0.8308017253875732, 0.8322546482086182, 0.8412362933158875, 0.839519202709198, 0.8407079577445984, 0.8425571322441101, 0.8553691506385803, 0.8393871188163757, 0.8491612672805786, 0.8614450097084045, 0.8626337051391602, 0.8661999702453613, 0.8590674996376038, 0.8658037185668945], "val_loss": [1.8498597145080566, 1.027005365916661, 0.7028612239020211, 0.924994673047747, 0.6743782077516828, 0.5709071329661778, 0.5347753252301898, 0.557072639465332, 0.49240825857434956, 0.5040156500680106, 0.45990048136029926, 0.46090851511274067, 0.5005522796085903, 0.44999001707349506, 0.4901531594140189, 0.4151526093482971, 0.5161999634334019, 0.4155942371913365, 0.42335563046591623, 0.39352249247687204, 0.40564978974206106, 0.3851771354675293, 0.42506777388708933, 0.39623563630240305, 0.41647729703358244, 0.36899528333118986, 0.37580059255872456, 0.3677475963320051, 0.3916975089481899, 0.3748857464109148, 0.4677842514855521, 0.4185656649725778, 0.35533943346568514, 0.36618661880493164, 0.40321613209588186, 0.35765776463917326, 0.3833729199000767, 0.3876362017222813], "val_accuracy": [0.20766666531562805, 0.6106666922569275, 0.7056666612625122, 0.6129999756813049, 0.6940000057220459, 0.7523333430290222, 0.7553333044052124, 0.7396666407585144, 0.7753333449363708, 0.7680000066757202, 0.7950000166893005, 0.7950000166893005, 0.7766666412353516, 0.8116666674613953, 0.7703333497047424, 0.8213333487510681, 0.7743333578109741, 0.8176666498184204, 0.8119999766349792, 0.8296666741371155, 0.8220000267028809, 0.8363333344459534, 0.7926666736602783, 0.8273333311080933, 0.815666675567627, 0.8353333473205566, 0.8373333215713501, 0.8429999947547913, 0.8273333311080933, 0.8323333263397217, 0.7846666574478149, 0.8080000281333923, 0.8510000109672546, 0.8326666951179504, 0.8243333101272583, 0.8453333377838135, 0.8299999833106995, 0.8363333344459534]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 2, 2, 1, 2, 0, 9, 8, 9], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [63, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.23257142305374146, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, beta))), tf.math.add(beta, alpha))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3787142887500927, 2.3222504572829927, 2.2847055771630815, 1.813320728010269, 2.254591542165104, 2.225220566302274, 2.2627092230006642, 2.304279755607588, 32.632579335699056], "accuracy": [0.2950733006000519, 0.10857218503952026, 0.2550521790981293, 0.3811914026737213, 0.35807687044143677, 0.3051116168498993, 0.2518821954727173, 0.14080041646957397, 0.1258750557899475], "val_loss": [2.00323418208531, 1.830578190939767, 1.5335665089743478, 1.2051431451525008, 1.5743681703295027, 1.3590941429138184, 1.759446484701974, 1.8855836732046944, 1.961446693965367], "val_accuracy": [0.10366666316986084, 0.22333332896232605, 0.4283333420753479, 0.5370000004768372, 0.3623333275318146, 0.46533334255218506, 0.33933332562446594, 0.1613333374261856, 0.1523333340883255]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 2, 2, 1, 1, 8, 9, 5, 9], [3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [63, 57]], "fitness": -0.17257143557071686, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 12, 6, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), grad)), beta), tf.math.add(beta, alpha))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4666357961832777, 2.561165078535623, 2.2634378487895965, 2.2490588351483862, 2.149132068902589, 2.1371094838518903], "accuracy": [0.19772817194461823, 0.1818782240152359, 0.1402720957994461, 0.17197199165821075, 0.2456742823123932, 0.251750111579895], "val_loss": [1.949221474783761, 1.9811479704720634, 2.0040431703839983, 1.7324042320251465, 1.9251158578055245, 1.976158618927002], "val_accuracy": [0.3479999899864197, 0.09866666793823242, 0.11766666918992996, 0.2773333191871643, 0.20266667008399963, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 9, 8, 5, 8, 9], [3, 3, 0, 3, 1, 1, 3, 0, 0, 3, 1, 0, 5, 0], [63, 83, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024329297404957, 2.3029627452326835, 2.30297351314911, 2.3029936586845317, 2.3028906445697848, 2.303075401805978, 2.3029599806667553, 2.302991595833199, 2.3030053944777285, 2.3029226358650763, 2.303017075665481, 2.302970944520363, 2.3029437122123273, 2.303061698232864, 2.303175259606398, 2.3030099878851544], "accuracy": [0.09655263274908066, 0.09536388516426086, 0.09470347315073013, 0.08942015469074249, 0.09800554811954498, 0.09642054885625839, 0.0940430611371994, 0.09615638852119446, 0.09813763201236725, 0.09906221181154251, 0.09126931428909302, 0.09126931428909302, 0.09721305221319199, 0.0936468094587326, 0.09087307006120682, 0.09549596905708313], "val_loss": [1.973644597189767, 1.9736545426504952, 1.9737059048243932, 1.9737818581717355, 1.973726545061384, 1.9738743645804269, 1.9736980029514857, 1.9736685752868652, 1.9736925533839635, 1.9736467088971819, 1.9736033167157854, 1.9735843113490514, 1.9736759322030204, 1.9737091064453125, 1.9737166677202498, 1.9736969130379813], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.1003333330154419, 0.09833333641290665, 0.09933333098888397, 0.09799999743700027, 0.10066666454076767, 0.10066666454076767, 0.09799999743700027, 0.10066666454076767, 0.10366666316986084, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 9, 8, 5, 8, 9], [3, 3, 0, 2, 3, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 9, 1, 1, 2, 5, 8, 9], [1, 3, 1, 3, 2, 3, 3, 4, 0, 0, 4, 3, 5], [8, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [54, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 6, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(beta, grad)), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 4, 3, 6, 0, 5, 1, 2, 2, 5, 8, 9, 7], [3, 3, 3, 2, 1, 1, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), beta)), tf.math.square(alpha))))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(beta, tf.math.add(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 1, 8, 5, 8, 9], [3, 3, 0, 2, 3, 1, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 8, 3, 2, 0, 5, 1, 1, 8, 5, 8, 9], [1, 3, 3, 0, 2, 3, 3, 4, 0, 0, 4, 3, 5], [84, 26, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 2, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 10, 5, 1, 1, 0, 0, 0, 0, 7, 4, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.subtract(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.square(tf.math.pow(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [0, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 3, 5, 1, 1, 8, 5, 8, 9], [3, 3, 0, 2, 1, 2, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 9, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), beta)), alpha)))))), tf.math.sqrt(tf.math.add(beta, beta))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3021050622166896, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 8, 5, 2, 2, 2, 1, 6, 6, 6, 1, 0, 2, 5, 7, 8], [1, 3, 1, 0, 2, 3, 3, 4, 0, 0, 4, 3, 5], [90, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [1, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 8, 1, 2, 5, 2, 3, 5, 6, 6, 8, 9, 2], [2, 3, 3, 0, 2, 3, 3, 4, 0, 0, 4, 3, 5], [76, 26, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 0, 4, 2, 1, 2, 3], [0, 1, 0, 2, 3, 3, 2], [65, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 1, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.square(beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.square(grad)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [966125574.9965593, 18529094078.064194, 85382018068.6937, 238674325455.84995, 510547449466.20105, 926840477076.812], "accuracy": [0.10328886657953262, 0.09972262382507324, 0.10355303436517715, 0.10117553919553757, 0.09760929644107819, 0.1018359512090683], "val_loss": [3712605622.857143, 29691232256.0, 100196934802.28572, 237490278985.14285, 463835533897.1429, 801492771986.2858], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [3, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 1, 8, 5, 8, 9], [1, 3, 1, 3, 3, 3, 3, 4, 0, 0, 4, 3, 5], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 5, 4, 2, 1, 2, 3], [2, 1, 0, 2, 3, 3, 2], [51, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 4, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.pow(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 4, 3, 2, 0, 5, 1, 1, 2, 5, 8, 9], [3, 3, 0, 2, 1, 1, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), beta))))), alpha), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 3, 2, 2, 2, 1, 1, 1, 9, 8, 9, 7], [3, 0, 3, 2, 1, 0, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 9, 5, 4, 2, 1, 2, 3], [1, 0, 0, 2, 3, 3, 2], [71, 57]], "fitness": -0.06714285910129547, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 6, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, beta))), alpha)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.301995139568552, 2.3023108720873893, 2.2996051229301333, 2.3003480513775116, 2.3001366011171513, 2.3006581404835496, 2.3010491258542864, 2.2994599025231532, 2.2987967355297605, 2.2991464992382618, 2.2994883306715166, 2.300019690074374, 2.2995456806845938, 2.3000836344663385], "accuracy": [0.09628847241401672, 0.0886276587843895, 0.09457138925790787, 0.09100515395402908, 0.09602430462837219, 0.09655263274908066, 0.10236428678035736, 0.1006472036242485, 0.10276053100824356, 0.1006472036242485, 0.10249637067317963, 0.10038304328918457, 0.1002509593963623, 0.09192973375320435], "val_loss": [1.9706544194902693, 1.9701334408351354, 1.9697751998901367, 1.9696224757603236, 1.9696291514805384, 1.969585759299142, 1.9694835117885046, 1.9694290161132812, 1.9694294929504395, 1.9694984299795968, 1.9696668216160365, 1.9698248590741838, 1.9701225417000907, 1.9703803743634904], "val_accuracy": [0.04466666653752327, 0.05066666752099991, 0.054666668176651, 0.05999999865889549, 0.061000000685453415, 0.06499999761581421, 0.0716666653752327, 0.07400000095367432, 0.07666666805744171, 0.07599999755620956, 0.07366666942834854, 0.06933332979679108, 0.06933332979679108, 0.06666667014360428]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 6, 9, 0, 9, 1, 7, 0, 3, 3, 2, 2, 3, 2, 3, 4, 5, 1, 7, 5, 7, 1, 1, 2, 6, 4, 5, 9, 2], [2, 0, 2, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1], [86, 70, 39, 25, 98, 52, 94, 1, 97, 93], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 0, 3, 2, 0, 5, 1, 1, 2, 5, 8, 9], [2, 0, 0, 2, 3, 1, 3, 0, 0, 3, 1, 0, 5, 0], [84, 47, 79, 81, 53, 45], [1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [2, 3, 1, 9, 7], [1, 0], [88, 19], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 3, 0, 4, 2, 1, 2, 3], [3, 0, 0, 2, 3, 3, 2], [47, 57]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3023311209763677, 2.3034896443092023, 2.30130805605202, 2.3026031240763807, 2.3024562518704665, 2.303116866673429], "accuracy": [0.09457138925790787, 0.08796724677085876, 0.09113723784685135, 0.08506141602993011, 0.08809932321310043, 0.09100515395402908], "val_loss": [1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294, 1.9712321417672294], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455]}}]