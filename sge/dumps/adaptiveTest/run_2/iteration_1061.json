[{"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 9, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.8114285469055176, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.070654373001413, 1.6167204101339796, 1.2499257898475546, 0.95668168345683, 0.8362840849568169, 0.8255668859109587, 0.7307643525872201, 0.702788668482799, 0.690108013009792, 0.6442102369079973, 0.6631486899801422, 0.6172711307566952, 0.6237678670407664, 0.5880416473298733, 0.5700140753835972, 0.562621783547319, 0.5462891092673269, 0.5353004278334896, 0.533163626605588, 0.5298247581396782, 0.5143981264047242, 0.5162144494157473, 0.47931908512505966, 0.47539980867992004, 0.4767384514431077, 0.47284257990210804, 0.4677102967118543, 0.4548255652208937], "accuracy": [0.31118741631507874, 0.4415532946586609, 0.5606921315193176, 0.6470743417739868, 0.6859067678451538, 0.6852463483810425, 0.7218332886695862, 0.7283053994178772, 0.7387399077415466, 0.7540615797042847, 0.7470611333847046, 0.7614582180976868, 0.76106196641922, 0.774798572063446, 0.7854973077774048, 0.7840443849563599, 0.789459764957428, 0.7991018295288086, 0.8025360107421875, 0.7997622489929199, 0.8092722296714783, 0.8030643463134766, 0.8183859586715698, 0.8190463781356812, 0.819970965385437, 0.817461371421814, 0.824329674243927, 0.8323867321014404], "val_loss": [1.367896659033639, 1.3656309332166399, 0.818312508719308, 0.6268302372523716, 0.6846071481704712, 0.5495696408408028, 0.5383729594094413, 0.4851081371307373, 0.5001311472484044, 0.4905968563897269, 0.4680666242327009, 0.479385393006461, 0.45758722509656635, 0.4581314665930612, 0.513215354510716, 0.4185220088277544, 0.4194513389042446, 0.40570091349737986, 0.4104438935007368, 0.4173101101602827, 0.43233306067330496, 0.39100853885923115, 0.36469720942633493, 0.3945005876677377, 0.3693364177431379, 0.3694313679422651, 0.37598523923328947, 0.39384243318012785], "val_accuracy": [0.4283333420753479, 0.4620000123977661, 0.609000027179718, 0.7196666598320007, 0.6809999942779541, 0.753333330154419, 0.749666690826416, 0.7770000100135803, 0.7906666398048401, 0.7670000195503235, 0.7986666560173035, 0.7893333435058594, 0.7879999876022339, 0.7846666574478149, 0.7423333525657654, 0.8119999766349792, 0.8100000023841858, 0.8169999718666077, 0.8169999718666077, 0.8169999718666077, 0.8016666769981384, 0.8326666951179504, 0.8429999947547913, 0.8320000171661377, 0.8429999947547913, 0.8399999737739563, 0.8336666822433472, 0.8230000138282776]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 1, 2, 2, 1, 6, 2, 1, 2, 3, 8, 4, 4, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [30, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.8097142577171326, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 8, 6, 2, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), alpha)), sigma))", "other_info": {"loss": [2.0632763966404295, 1.5130734549946774, 1.2486777592643754, 0.9257952520608304, 0.857382321937162, 0.7913659395180862, 0.738730300489969, 0.7024337223744144, 0.7024063398069347, 0.6699693852317427, 0.6301712504058009, 0.6002544711184398, 0.6224182434148792, 0.5851690984358011, 0.580050185930932, 0.5636548162089237, 0.5462749585767133, 0.5298585140426413, 0.5360332064309912, 0.528404943734553, 0.5138054320667681, 0.5025025956493091, 0.4810646674211361, 0.4753777590473141, 0.4613353166684436, 0.48948495973921596, 0.46788333667157556, 0.45814125502996, 0.4483054706118504, 0.4362630579355386, 0.4386797763841216, 0.4237485607900734, 0.43260530944214426, 0.42001945602265583, 0.3979647712283335, 0.402086108887531, 0.41918126641405007, 0.411167487594603, 0.40328441488035854, 0.37512696917503263, 0.37950640423596105, 0.37803042327423986, 0.3751677397479628, 0.3707042101501489], "accuracy": [0.31303659081459045, 0.4842160940170288, 0.5560691952705383, 0.6609430909156799, 0.6793025732040405, 0.7013604640960693, 0.7169462442398071, 0.728701651096344, 0.7325320243835449, 0.7441553473472595, 0.7585523724555969, 0.7700436115264893, 0.7633073329925537, 0.7729493975639343, 0.7808743715286255, 0.7810064554214478, 0.789988100528717, 0.7959318161010742, 0.7997622489929199, 0.7967243194580078, 0.8063663840293884, 0.809140145778656, 0.8214238286018372, 0.8215559124946594, 0.8265751004219055, 0.8133667707443237, 0.8240655064582825, 0.8298771381378174, 0.8319904804229736, 0.8345000743865967, 0.8348963260650635, 0.841500461101532, 0.832650899887085, 0.8378021121025085, 0.8492933511734009, 0.8474441766738892, 0.8407079577445984, 0.8446704745292664, 0.8495575189590454, 0.858671247959137, 0.8584070801734924, 0.8581429123878479, 0.8555012345314026, 0.8652753829956055], "val_loss": [1.2991429737636022, 1.3367905957358224, 0.7656531163624355, 0.6327736377716064, 0.575779778616769, 0.5433675561632428, 0.518934828894479, 0.49291631153651644, 0.5044661079134259, 0.48870883669172016, 0.45622936316898893, 0.5153243541717529, 0.46169442789895193, 0.4346076760973249, 0.49272959572928293, 0.41477589096341816, 0.41173310790743145, 0.395859888621739, 0.41338333061763216, 0.40346528802599224, 0.43051458256585257, 0.39155752318246023, 0.36935750927243916, 0.3758305992398943, 0.41617641278675627, 0.3698530282293047, 0.3712602342878069, 0.39947597469602314, 0.3941705312047686, 0.3947763272694179, 0.35992384808404104, 0.36740131037575857, 0.34393479994365145, 0.3407970496586391, 0.33996557337897165, 0.3487601024763925, 0.33756835971559795, 0.3399507999420166, 0.33431306907108854, 0.36991398675101145, 0.33851960727146696, 0.35124690192086355, 0.3556814874921526, 0.33952518020357403], "val_accuracy": [0.47566667199134827, 0.4713333249092102, 0.6363333463668823, 0.7073333263397217, 0.7523333430290222, 0.7633333206176758, 0.7573333382606506, 0.7696666717529297, 0.7713333368301392, 0.7663333415985107, 0.7993333339691162, 0.7753333449363708, 0.7823333144187927, 0.8040000200271606, 0.7630000114440918, 0.8143333196640015, 0.8119999766349792, 0.8289999961853027, 0.8159999847412109, 0.8293333053588867, 0.8026666641235352, 0.8256666660308838, 0.8386666774749756, 0.8396666646003723, 0.8106666803359985, 0.8429999947547913, 0.8330000042915344, 0.8190000057220459, 0.8190000057220459, 0.8336666822433472, 0.8489999771118164, 0.8393333554267883, 0.847000002861023, 0.8523333072662354, 0.8536666631698608, 0.8473333120346069, 0.8513333201408386, 0.8526666760444641, 0.8573333621025085, 0.8343333601951599, 0.8500000238418579, 0.8496666550636292, 0.8450000286102295, 0.8519999980926514]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 1, 2, 2, 1, 3, 3, 0, 0, 8, 6, 2, 3, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 0, 2, 0, 1, 3, 3, 0, 3, 3, 1, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1], [30, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 66, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.7720000147819519, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 4, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.083709676393885, 1.9665064175745217, 1.3118829221899295, 1.0231458794691182, 0.9496149077722189, 0.8163011333001147, 0.817121084946305, 0.790941805918896, 0.7624334666502552, 0.7326355323957147, 0.7221835088248045, 0.6647769773971639, 0.6427305395718752, 0.6287367243682389, 0.6462445174777008, 0.6479834235733243, 0.6061501096520269], "accuracy": [0.2852991819381714, 0.38105931878089905, 0.5709945559501648, 0.6371681690216064, 0.656980574131012, 0.6988508701324463, 0.7021529674530029, 0.7123233675956726, 0.7185312509536743, 0.7226257920265198, 0.7296261787414551, 0.7514199018478394, 0.7648923397064209, 0.7623828053474426, 0.7500990629196167, 0.7609298825263977, 0.7790252566337585], "val_loss": [1.9454667227608817, 1.2320572989327567, 0.8268086058752877, 0.7308441400527954, 0.6572329146521432, 0.6778731005532401, 0.6478062868118286, 0.6047672544206891, 0.5010098729814801, 0.5514461142676217, 0.529982430594308, 0.4683305706296648, 0.5362276690346854, 0.4949731486184256, 0.5749484300613403, 0.5498010771615165, 0.5258245638438633], "val_accuracy": [0.1653333306312561, 0.596666693687439, 0.6693333387374878, 0.6696666479110718, 0.706333339214325, 0.7020000219345093, 0.7126666903495789, 0.7319999933242798, 0.7763333320617676, 0.7446666955947876, 0.7613333463668823, 0.7826666831970215, 0.7616666555404663, 0.7753333449363708, 0.7443333268165588, 0.7519999742507935, 0.7516666650772095]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [7, 3, 1, 2, 2, 1, 6, 2, 1, 2, 3, 8, 4, 4, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 9, 0, 0, 9], [1, 1, 2, 2, 0, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 1, 5, 0, 3, 3, 2, 1, 3, 1, 1], [79, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.34771427512168884, "mapping_values": [1, 1, 1, 0, 1, 0, 68, 68, 41, 27, 9, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(alpha, grad))))))), grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, alpha), beta)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.negative(beta))))), tf.math.add(beta, alpha)))))))), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.7132081591520865, 2.304847312184562, 2.3035117818726336, 2.383537529985808, 2.15564396403107, 2.267283553003934, 2.324150140117645, 2.3017889977509176, 2.1717499915115304, 2.1886424757249916, 2.2537433379960174], "accuracy": [0.15982036292552948, 0.09615638852119446, 0.09549596905708313, 0.22757892310619354, 0.25597676634788513, 0.14700831472873688, 0.1624620258808136, 0.10711926966905594, 0.2390701323747635, 0.190859854221344, 0.16629242897033691], "val_loss": [1.9770152228219169, 1.97356230872018, 1.9693711144583566, 1.978112084524972, 1.9802744729178292, 1.6655398777553014, 1.9773228509085519, 1.9567934444972448, 1.9799330575125558, 1.9210312707083566, 1.5814899717058455], "val_accuracy": [0.1003333330154419, 0.10233332961797714, 0.2056666612625122, 0.16966666281223297, 0.10366666316986084, 0.4099999964237213, 0.10266666859388351, 0.13699999451637268, 0.10266666859388351, 0.14800000190734863, 0.34433332085609436]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 1, 2, 2, 1, 3, 3, 8, 0, 8, 8, 2, 3, 3, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 2, 2, 0, 0, 3, 3, 0, 3, 3, 0, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1], [78, 45, 47, 41, 87, 41, 18], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 10, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.23428571224212646, "mapping_values": [1, 1, 1, 0, 1, 0, 34, 34, 20, 14, 6, 3, 1, 1, 0, 0, 9, 6, 3, 3], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))), grad), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad)), tf.math.multiply(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3021272256342553, 2.3020103730073362, 2.302416947822939, 2.3010492601635244, 2.300782593627726, 2.3024993944854595, 2.2987208817975398, 2.3005188337768687, 2.3009345810159227, 2.300179383348811, 2.300222821192199, 2.301431671030974, 2.297709893115901, 2.2987195592688026, 2.299405487379488, 2.300013407866055, 2.29665855431774, 2.2972696775993917, 2.296482048486879, 2.297828774993225, 2.297282872057043, 2.297669109588349, 2.297369222567932, 2.2988470360241107, 2.29688225745399, 2.296532029882634, 2.296412111352133, 2.2955327236168985, 2.2959337567987066, 2.296238901529802, 2.295300356322402, 2.295420098597615, 2.295864114545954, 2.294888151414705, 2.295428697160049, 2.2933968088772034, 2.294597062609845, 2.29308620322382, 2.292633044516579, 2.2931881365664584, 2.2924454752259864, 2.2929096491172123, 2.2923825186761047, 2.29262701178019, 2.290577133617318, 2.2909412956225195, 2.291433199883893, 2.2912030510693935, 2.2916612379177135, 2.2915003326165597, 2.2884739869621216, 2.289977599695579, 2.290703215918379, 2.28962360157738, 2.289060370797069, 2.288581398263694, 2.2884528657716454, 2.2885222736051793, 2.2889721458141814, 2.288102185138858, 2.2881114771022553, 2.2890233231132466, 2.2872045511866226, 2.2870736587253844, 2.2881188340678964, 2.287050038280898, 2.2872194726437844, 2.285303123874939, 2.2859179981160143, 2.2862489527683563, 2.286522299149694, 2.286317875828993, 2.285081329724855, 2.284541577395982, 2.285467605706707, 2.2849140203451013, 2.284611304863459, 2.2853662353606823, 2.2833171349317487, 2.284055309367454, 2.284984529986751, 2.2836108493641176, 2.2846599773660925, 2.283915228359357, 2.282322983936375, 2.2811172924903342, 2.2827015481116733, 2.281196447710524, 2.28239463881227, 2.2813092035435414, 2.280484113269998, 2.2799086567905555, 2.2805839616231096, 2.2797032966747293, 2.280317127743984, 2.2812418065696516, 2.278825006338867, 2.281019217302582, 2.279086474619049, 2.2792757997234436], "accuracy": [0.09232597798109055, 0.08875974267721176, 0.09655263274908066, 0.09087307006120682, 0.0886276587843895, 0.09430722147226334, 0.10196803510189056, 0.09589222073554993, 0.09642054885625839, 0.09840179979801178, 0.0936468094587326, 0.09430722147226334, 0.09932637959718704, 0.09734513610601425, 0.09694888442754745, 0.09245806187391281, 0.09747721254825592, 0.09906221181154251, 0.09998679161071777, 0.09906221181154251, 0.10421344637870789, 0.10619468986988068, 0.10289261490106583, 0.09615638852119446, 0.1018359512090683, 0.107647605240345, 0.10645885765552521, 0.10394927859306335, 0.10817593336105347, 0.10460969805717468, 0.11147800832986832, 0.1026284471154213, 0.10949676483869553, 0.11134592443704605, 0.10857218503952026, 0.10936468094587326, 0.1158367469906807, 0.11438383162021637, 0.1158367469906807, 0.11293092370033264, 0.11227050423622131, 0.11702549457550049, 0.108440101146698, 0.12112006545066833, 0.11557257920503616, 0.12019548565149307, 0.11953506618738174, 0.11530841141939163, 0.11557257920503616, 0.12098798155784607, 0.12798838317394257, 0.12296922504901886, 0.11993131786584854, 0.12600713968276978, 0.12521463632583618, 0.12178047746419907, 0.12270505726337433, 0.1270637959241867, 0.11821424216032028, 0.12574297189712524, 0.12996962666511536, 0.12376172095537186, 0.1294412910938263, 0.12455421686172485, 0.12812046706676483, 0.12732796370983124, 0.12812046706676483, 0.13749834895133972, 0.1328754425048828, 0.1398758441209793, 0.13195087015628815, 0.13274335861206055, 0.13749834895133972, 0.14014001190662384, 0.13538502156734467, 0.13432836532592773, 0.13961167633533478, 0.13617752492427826, 0.13776251673698425, 0.13710209727287292, 0.1372341811656952, 0.13789460062980652, 0.13578127324581146, 0.13868708908557892, 0.14278165996074677, 0.14463083446025848, 0.14978206157684326, 0.15215955674648285, 0.13961167633533478, 0.14951789379119873, 0.14410249888896942, 0.14714039862155914, 0.14357416331768036, 0.15480121970176697, 0.14489498734474182, 0.14581957459449768, 0.14595165848731995, 0.14330999553203583, 0.1558578759431839, 0.1542728841304779], "val_loss": [1.9699215207781111, 1.969698429107666, 1.9694768360682897, 1.9692552430289132, 1.969029358455113, 1.968806539263044, 1.9685839244297572, 1.9683608327593123, 1.9681406702314104, 1.9679197583879744, 1.967696189880371, 1.9674732344491142, 1.9672521182468958, 1.9670322281973702, 1.9668096814836775, 1.9665889739990234, 1.966367244720459, 1.966147014072963, 1.965925829751151, 1.9657035555158342, 1.9654812131609236, 1.965261595589774, 1.9650412968226842, 1.9648197037833077, 1.9645979063851493, 1.964378833770752, 1.964160646711077, 1.9639388493129186, 1.963719027382987, 1.9634997504098075, 1.9632774761744909, 1.9630564962114607, 1.9628372873578752, 1.9626166479928153, 1.9623984609331404, 1.9621796607971191, 1.9619595663888114, 1.9617393357413155, 1.961519990648542, 1.9613007817949568, 1.961080891745431, 1.9608616828918457, 1.9606421334402901, 1.9604227202279227, 1.960202762058803, 1.959984370640346, 1.959766115461077, 1.9595461572919572, 1.959327016557966, 1.959111281803676, 1.9588913917541504, 1.958674771445138, 1.9584566525050573, 1.9582386016845703, 1.9580181666782923, 1.9577975273132324, 1.9575810432434082, 1.957362447466169, 1.957143715449742, 1.9569228036063058, 1.9567036628723145, 1.9564844540187292, 1.9562653132847376, 1.9560468537466866, 1.9558274405343192, 1.9556097984313965, 1.9553886141095842, 1.955169337136405, 1.9549505370003837, 1.9547297613961356, 1.95450987134661, 1.9542884826660156, 1.9540669577462333, 1.9538465908595495, 1.9536260196140833, 1.9534057889665877, 1.95318569455828, 1.9529641015189034, 1.9527433940342493, 1.9525208473205566, 1.952300752912249, 1.9520815440586634, 1.9518636975969588, 1.951643398829869, 1.9514222826276506, 1.9512006214686803, 1.950979164668492, 1.9507605007716589, 1.950542381831578, 1.9503209931509835, 1.9500995363507951, 1.949878215789795, 1.9496560777936662, 1.9494357790265764, 1.949213913508824, 1.9489943640572684, 1.948775087084089, 1.9485579218183244, 1.9483343533107214, 1.9481110572814941], "val_accuracy": [0.03866666555404663, 0.03999999910593033, 0.0416666679084301, 0.043666668236255646, 0.04500000178813934, 0.04633333161473274, 0.04866666719317436, 0.05000000074505806, 0.05000000074505806, 0.050999999046325684, 0.052666667848825455, 0.05366666615009308, 0.054666668176651, 0.054999999701976776, 0.05533333495259285, 0.0560000017285347, 0.0573333315551281, 0.059333331882953644, 0.05999999865889549, 0.06133333221077919, 0.06233333423733711, 0.06433333456516266, 0.0663333311676979, 0.06800000369548798, 0.0689999982714653, 0.0716666653752327, 0.07333333045244217, 0.07466666400432587, 0.07533333450555801, 0.07699999958276749, 0.07966666668653488, 0.0820000022649765, 0.08433333039283752, 0.08633333444595337, 0.08733333647251129, 0.08900000154972076, 0.09233333170413971, 0.09300000220537186, 0.09399999678134918, 0.09600000083446503, 0.10000000149011612, 0.10100000351667404, 0.10466666519641876, 0.10733333230018616, 0.109333336353302, 0.11133333295583725, 0.1120000034570694, 0.11299999803304672, 0.11533333361148834, 0.11599999666213989, 0.11699999868869781, 0.11999999731779099, 0.1223333328962326, 0.12466666847467422, 0.12566666305065155, 0.12833333015441895, 0.1326666623353958, 0.13600000739097595, 0.13866665959358215, 0.1420000046491623, 0.1446666717529297, 0.14633333683013916, 0.14866666495800018, 0.15133333206176758, 0.1550000011920929, 0.15600000321865082, 0.1586666703224182, 0.1616666615009308, 0.16433332860469818, 0.1666666716337204, 0.1679999977350235, 0.17000000178813934, 0.17166666686534882, 0.17266666889190674, 0.1756666600704193, 0.17766666412353516, 0.1823333352804184, 0.18433333933353424, 0.18666666746139526, 0.19099999964237213, 0.1940000057220459, 0.195333331823349, 0.1966666728258133, 0.1979999989271164, 0.2006666660308838, 0.2029999941587448, 0.20466665923595428, 0.20533333718776703, 0.2070000022649765, 0.21033333241939545, 0.2123333364725113, 0.21433334052562714, 0.2163333296775818, 0.22066666185855865, 0.22466666996479034, 0.2253333330154419, 0.2266666740179062, 0.23000000417232513, 0.23199999332427979, 0.23399999737739563]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 1, 2, 4, 2, 6, 2, 5, 2, 3, 8, 4, 4, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 2, 2, 0, 1, 3, 3, 0, 3, 0, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1], [30, 83, 94, 41, 87, 41, 18, 60, 0, 92], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [3, 1, 8, 9, 3, 0, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [62, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 16, 13, 5, 1, 1, 0, 1, 0, 36, 23, 13, 5], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))))), grad), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), grad)))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(alpha), tf.math.square(tf.math.subtract(sigma, tf.math.pow(tf.math.negative(tf.math.pow(tf.math.pow(tf.math.pow(beta, sigma), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, sigma), tf.math.multiply(tf.math.sqrt(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), sigma))), tf.math.negative(tf.math.divide_no_nan(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), alpha))), sigma))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 4, 1, 1, 1, 1, 3, 3, 1, 2, 8, 9, 2, 3, 4, 8, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [5, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [21, 45, 47, 41, 87, 41, 18], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [74, 49, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08374059200286865, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 1, 2, 2, 6, 0, 3, 2, 0, 8, 4, 2, 3, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 7, 0, 4, 9], [3, 0, 2, 3, 0, 1, 3, 3, 1, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 1, 5, 0, 3, 3, 2, 1, 3, 1, 1], [78, 45, 47, 41, 87, 41, 18, 57, 39], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [0, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [45160719.47607569, 845046452.6472064, 3969666558.174085, 10934366295.508652, 23488198858.608902, 43183404709.48197], "accuracy": [0.09879804402589798, 0.09945846349000931, 0.09774138033390045, 0.1010434553027153, 0.10091137140989304, 0.09972262382507324], "val_loss": [165385321.14285713, 1321871177.142857, 4459965586.285714, 10570152521.142857, 20642959360.0, 35668883163.42857], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 1, 2, 2, 1, 9, 3, 1, 0, 8, 8, 2, 3, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [30, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 6, 9, 5, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 8, 7, 1, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.square(alpha)))", "other_info": {"loss": [11882063854.49471, 2.326963090972185, 2.3281696822113918, 2.329410113017352, 2.33078433371113, 2.3321167199272503, 2.333569600739263], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.995985644204276, 1.9970547812325614, 1.9981094769069128, 1.9992483002798898, 2.0004799706595287, 2.0017357553754533, 2.003097261701311], "val_accuracy": [0.09733333438634872, 0.10000000149011612, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 5, 1, 2, 2, 1, 6, 2, 1, 2, 3, 8, 4, 4, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 2, 2, 0, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 1, 5, 0, 3, 3, 2, 1, 3, 1, 1], [11, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [7, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 0, 0, 0, 0, 9, 6, 3, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(tf.math.multiply(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3022586384217627, 2.3024653960149744, 2.3024248023153437, 2.3024632909341713, 2.3024795043107904, 2.3025053555797577], "accuracy": [0.1018359512090683, 0.10434553027153015, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973639896937779, 1.9736385345458984, 1.9736236844744002, 1.9736221177237374, 1.973611831665039, 1.973605019705636], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [2, 6, 1, 4, 2, 9, 4, 0, 3, 0, 8, 8, 1, 3, 5, 8, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 8, 5, 1], [3, 0, 4, 2, 3, 1, 3, 3, 2, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [30, 83, 58, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 11, 11, 6, 5, 2, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), beta))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3023584705255034, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 1, 9, 8, 6, 5, 0, 2, 0, 8, 0, 2, 3, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 7, 0, 4, 9], [3, 0, 2, 2, 0, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1], [78, 45, 92, 41, 87, 41, 18, 57, 39], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 2, 1, 0, 0, 0, 0, 9, 6, 3, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10447761416435242, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 1, 4, 2, 9, 3, 3, 2, 0, 8, 8, 1, 4, 4, 8, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 8, 5, 1], [3, 0, 2, 3, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 1, 5, 0, 3, 3, 2, 1, 3, 1, 1], [35, 95, 47, 87, 87, 41, 18], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1], [8, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 0, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 24, 24, 14, 10, 3, 2, 1, 1, 0, 0, 6, 4, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(alpha))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.add(tf.math.negative(sigma), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [34661682215.73014, 649482211542.7816, 3052272565425.8574, 8409015673912.941, 18065349217298.258, 33215558969324.793], "accuracy": [0.09879804402589798, 0.09945846349000931, 0.09774138033390045, 0.1010434553027153, 0.1010434553027153, 0.09972262382507324], "val_loss": [127041180233.14285, 1016225932434.2858, 3429679235072.0, 8129454538752.0, 15877597111442.285, 27436110877257.145], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 9, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 2, 2, 0, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 1, 5, 0, 3, 3, 2, 1, 3, 1, 1], [78, 45, 47, 41, 87, 41, 18, 93, 17, 14, 80], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 3, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 3, 1, 1, 0, 0, 7, 4, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(grad, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.3023584705255034, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 6, 1, 2, 2, 1, 9, 3, 1, 6, 8, 8, 2, 3, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 0, 2, 0, 1, 3, 3, 1, 3, 2, 3, 3, 3, 4, 0, 0, 1, 2, 3, 3, 1, 3, 3, 2, 1, 3, 1, 1, 4, 2, 5, 0, 4, 0, 1, 4, 5], [78, 95, 47, 87, 87, 41, 18], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 9, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 3, 2, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.1196562226127394e+30, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06947562843561172, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 1, 2, 2, 1, 1, 3, 2, 2, 8, 8, 2, 3, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 2, 0, 0, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 1, 5, 0, 3, 3, 2, 1, 3, 1, 1], [78, 95, 47, 81, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 16, 13, 5, 1, 0, 0, 0, 0, 7, 4, 3, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, grad))), grad)))))))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), grad)), grad))), tf.math.add(beta, grad)), grad), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.add(sigma, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 1, 2, 2, 1, 6, 2, 1, 2, 3, 8, 4, 4, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 0, 2, 3, 0, 1, 2, 2, 2, 3, 0, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1], [30, 83, 80, 41, 87, 41, 18, 60, 0, 92], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 5, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 2, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [29, 18, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 12, 12, 3, 5, 3, 2, 1, 0, 8, 6, 2, 2], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), beta)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, beta))))))), tf.math.add(beta, tf.math.sqrt(beta)))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 8, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 2, 0, 1, 3, 3, 1, 3, 2, 3, 3, 3, 4, 0, 0, 1, 2, 3, 3, 1, 3, 3, 2, 1, 3, 1, 1, 4, 2, 5, 0, 4, 0, 1, 4, 5], [78, 45, 47, 41, 87, 41, 18, 93, 17, 14, 80], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 3, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 0, 71, 71, 41, 30, 6, 5, 2, 2, 0, 0, 5, 2, 3, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), grad))))), tf.math.add(beta, grad))))), alpha)), tf.math.add(beta, grad)), tf.math.add(beta, beta)), tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, alpha), beta)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(beta, grad)))))))), tf.math.add(beta, alpha))))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.sqrt(grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(sigma, sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, sigma))", "other_info": {"loss": [2.302225295625988, 2.3023448947744756, 2.302985152516776, 2.301851930682528, 2.3018380871947732, 2.303783027833841], "accuracy": [0.09192973375320435, 0.08875974267721176, 0.0952318087220192, 0.08928807079792023, 0.08585391938686371, 0.09206181764602661], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 8, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [4, 0, 2, 3, 0, 1, 3, 3, 2, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 1, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3], [78, 45, 47, 41, 87, 41, 18, 93, 17, 14, 80], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 3, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 0, 71, 71, 41, 30, 6, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), grad))))), tf.math.add(beta, grad))))), beta)), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, alpha), beta)), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(beta, grad)))))))), tf.math.add(beta, alpha))))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.sqrt(grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.302225295625988, 2.3023448947744756, 2.302985152516776, 2.301851930682528, 2.3018380871947732, 2.303783027833841], "accuracy": [0.09192973375320435, 0.08875974267721176, 0.0952318087220192, 0.08928807079792023, 0.08585391938686371, 0.09206181764602661], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 1, 2, 2, 1, 9, 3, 1, 0, 8, 8, 2, 3, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8], [3, 5, 2, 2, 0, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 1, 5, 0, 3, 3, 2, 1, 3, 1, 1], [78, 95, 47, 87, 87, 41, 18], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 0, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(grad, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.negative(sigma))", "other_info": {"loss": [2.302225295625988, 2.3023448947744756, 2.302985152516776, 2.301851930682528, 2.3018380871947732, 2.303783027833841], "accuracy": [0.09192973375320435, 0.08875974267721176, 0.0952318087220192, 0.08928807079792023, 0.08585391938686371, 0.09206181764602661], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}]