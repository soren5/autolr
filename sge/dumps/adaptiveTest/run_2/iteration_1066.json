[{"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 9, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.8148571252822876, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0359434676822215, 1.6991110007996888, 1.1913252668358063, 1.0570857961494942, 0.7939689932970433, 0.7995810230347332, 0.7651808732426035, 0.6848367247929773, 0.6917945169706575, 0.6677789544275078, 0.655193573275042, 0.6086542873318956, 0.6098206634644929, 0.5847041782780472, 0.6012722086030983, 0.5330529703424434, 0.552475333316152, 0.5438270180484543, 0.5187890368083591, 0.5168557791913961, 0.503505755275421, 0.5141867902914704, 0.515075909045898], "accuracy": [0.31699907779693604, 0.4415532946586609, 0.5913353562355042, 0.616299033164978, 0.7045304179191589, 0.6934354901313782, 0.7055870890617371, 0.7359662055969238, 0.7440232634544373, 0.7436270117759705, 0.7458723783493042, 0.7705719470977783, 0.7644960880279541, 0.7803460359573364, 0.7687227725982666, 0.7991018295288086, 0.7891955971717834, 0.7977809906005859, 0.800818920135498, 0.8029322624206543, 0.8057059645652771, 0.8075551390647888, 0.7991018295288086], "val_loss": [1.6291999476296561, 0.7654751879828317, 0.9614388942718506, 0.661950809614999, 0.6983046701976231, 0.5242996215820312, 0.550303612436567, 0.5180187225341797, 0.4939094952174595, 0.5063839469637189, 0.49109012739998953, 0.5132896218981061, 0.4453871250152588, 0.5308770792824882, 0.42285122190202984, 0.43727971826280865, 0.4284938488687788, 0.4083957927567618, 0.40191979919161114, 0.4071260264941624, 0.4596386637006487, 0.3876969388553074, 0.4016174759183611], "val_accuracy": [0.3776666522026062, 0.6913333535194397, 0.5846666693687439, 0.6936666369438171, 0.6603333353996277, 0.7576666474342346, 0.7246666550636292, 0.7509999871253967, 0.7753333449363708, 0.7616666555404663, 0.7760000228881836, 0.7456666827201843, 0.7996666431427002, 0.7369999885559082, 0.8026666641235352, 0.7993333339691162, 0.8006666898727417, 0.8196666836738586, 0.8090000152587891, 0.812666654586792, 0.8019999861717224, 0.8196666836738586, 0.8183333277702332]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 3, 1, 2, 2, 1, 6, 2, 1, 2, 3, 8, 4, 4, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 8, 4, 4], [2, 3, 2, 2, 0, 2, 2, 0, 0, 3, 3, 2, 3, 3, 4, 0, 0, 1, 2, 1, 5, 2, 3, 3, 2, 2, 0, 0, 1, 5, 3, 0, 0, 0, 5], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [0, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.3897142708301544, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.479635361430982, 2.4078649276944515, 2.3047081674992245, 2.302938917104862, 2.3002751441978746, 2.269983234123358, 2.3018775450759765, 2.131814199321542, 2.2454175384147623, 2.3051223496971285, 2.303390670524943, 2.300452746325921, 2.3217295457532363], "accuracy": [0.19204860925674438, 0.13736626505851746, 0.09853387624025345, 0.10170386731624603, 0.11530841141939163, 0.2234843522310257, 0.1138555034995079, 0.23682472109794617, 0.13670584559440613, 0.09694888442754745, 0.09708096832036972, 0.11279883980751038, 0.1228371411561966], "val_loss": [1.8037280355181013, 1.9766721725463867, 1.9742348534720284, 1.9729917390005929, 1.9648115975516183, 1.9763895443507604, 1.9535605566842216, 1.289999280657087, 1.9767218317304338, 1.9742992946079798, 1.9735407148088728, 1.9019050598144531, 1.9749103954860143], "val_accuracy": [0.3720000088214874, 0.10166666656732559, 0.09833333641290665, 0.12066666781902313, 0.37400001287460327, 0.140666663646698, 0.17399999499320984, 0.46666666865348816, 0.10133333504199982, 0.10133333504199982, 0.09966666996479034, 0.195333331823349, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 3, 1, 2, 2, 1, 6, 2, 1, 2, 3, 8, 4, 4, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 8, 4, 4], [2, 3, 2, 2, 0, 2, 2, 0, 0, 3, 3, 2, 3, 3, 4, 0, 0, 1, 2, 1, 5, 2, 3, 3, 2, 2, 0, 0, 1, 5, 3, 0, 0, 0, 5], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [0, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.3774285614490509, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.4796252630453193, 2.4101290354214133, 2.304738242281993, 2.3032088740437873, 2.301814313451958, 2.2913462819991377], "accuracy": [0.19178444147109985, 0.137630432844162, 0.09655263274908066, 0.09747721254825592, 0.10566636174917221, 0.2188614457845688], "val_loss": [1.8057126317705428, 1.9766251700265067, 1.9742982046944755, 1.9735469818115234, 1.9695860317775182, 2.1156421388898576], "val_accuracy": [0.35100001096725464, 0.10166666656732559, 0.09966666996479034, 0.09966666996479034, 0.26100000739097595, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 6, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [4, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2, 2, 3, 4, 0, 5], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.37057143449783325, "mapping_values": [1, 1, 1, 0, 1, 0, 91, 91, 55, 36, 10, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))), tf.math.add(beta, grad))))))), tf.math.add(beta, grad))))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, alpha), beta)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(beta, grad)))))))), alpha))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.sqrt(tf.math.add(beta, beta)))))), tf.math.add(tf.math.pow(beta, tf.math.add(beta, beta)), tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))))))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.pow(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4510787761505837, 2.496476891711246, 2.30409397434612, 2.303294487129255, 2.302915072601705, 2.301720802384975], "accuracy": [0.19719983637332916, 0.1460837423801422, 0.09628847241401672, 0.09985470771789551, 0.09840179979801178, 0.1150442510843277], "val_loss": [1.7423247609819685, 1.9750323976789201, 1.9738553592136927, 1.9736924171447754, 1.9732716424124581, 1.9704719952174596], "val_accuracy": [0.41366666555404663, 0.10166666656732559, 0.09966666996479034, 0.09966666996479034, 0.09733333438634872, 0.12933333218097687]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 0, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [8, 3, 1, 2, 2, 1, 3, 3, 8, 0, 2, 6, 2, 3, 4, 9, 3, 0, 5, 1, 5, 2, 3, 1, 6, 2, 8, 1, 4, 8, 2, 0, 9, 1, 6, 6, 8, 2], [3, 0, 4, 2, 3, 1, 0, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [7, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30, 69, 76]], "fitness": -0.3651428520679474, "mapping_values": [1, 5, 5, 3, 2, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(grad), tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.4794790153694883, 2.4128892907943897, 2.3046541430647536, 2.303005646563414, 2.300129625791288, 2.4737772791692056], "accuracy": [0.19178444147109985, 0.13961167633533478, 0.09734513610601425, 0.10011887550354004, 0.11161009222269058, 0.19838859140872955], "val_loss": [1.7985916137695312, 1.976566995893206, 1.9743162563868932, 1.9731823376246862, 1.9612909725734167, 1.9769551413399833], "val_accuracy": [0.38466668128967285, 0.10166666656732559, 0.08799999952316284, 0.09966666996479034, 0.3356666564941406, 0.10166666656732559]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 8, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 4, 2, 3, 1, 0, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [30, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [6, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 3, 4, 3, 1, 5, 5, 4, 0, 6, 4, 8, 3, 3, 6, 8, 7, 3, 8, 6, 0, 6, 3, 1, 1, 3, 1, 2, 4, 0, 9, 3, 2, 8, 0, 5, 1, 8], [3, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [96, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.33571428060531616, "mapping_values": [1, 5, 5, 3, 2, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.44585676282042, 2.2913513219808435, 2.301707409565333, 2.3041250884902946, 2.302115291416086, 2.2926715119419443, 2.310294778355518], "accuracy": [0.2479196935892105, 0.14238542318344116, 0.1294412910938263, 0.1002509593963623, 0.10487385839223862, 0.19852067530155182, 0.09800554811954498], "val_loss": [1.9754095077514648, 1.8309824807303292, 1.9747938428606306, 1.9735749108450753, 1.9665547098432268, 1.9873383385794503, 1.9750163214547294], "val_accuracy": [0.1003333330154419, 0.3109999895095825, 0.10233332961797714, 0.1003333330154419, 0.1003333330154419, 0.10000000149011612, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [1, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [8, 3, 1, 2, 2, 1, 3, 3, 8, 0, 2, 6, 2, 3, 4, 9, 3, 0, 5, 1, 5, 2, 3, 1, 6, 2, 8, 1, 4, 8, 2, 0, 9, 1, 6, 6, 8, 2], [3, 0, 4, 2, 3, 1, 0, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 2, 3, 4, 3, 1, 5, 5, 4, 0, 6, 4, 8, 3, 3, 6, 8, 7, 3, 8, 6, 0, 6, 3, 1, 1, 3, 1, 2, 4, 0, 9, 3, 2, 8, 0, 5, 1, 8], [2, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30, 69, 76]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.add(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [1, 9, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 2, 2, 0, 2, 2, 0, 0, 3, 3, 2, 3, 3, 4, 0, 0, 1, 2, 1, 5, 2, 3, 3, 2, 2, 0, 0, 1, 5, 3, 0, 0, 0, 5], [34, 83, 26, 63, 87, 83, 18, 60, 0, 92, 63], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [195169522516295.97, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.439939867535887e+17, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0], [1, 3, 1, 2, 2, 1, 6, 2, 1, 2, 3, 8, 4, 4, 4, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 8, 4, 4, 6, 0, 6, 5, 0, 2, 5, 7, 6, 0, 1, 6, 2, 8, 1, 3, 8, 3, 2, 2, 3, 8, 3, 3, 2, 5, 3, 4, 3, 7, 0, 2, 9], [3, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2, 0, 4, 3, 4, 0, 0, 2, 3, 3, 2, 2, 4, 1, 4, 4, 0, 0, 4, 0, 1, 1], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92, 14, 19, 89, 75], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 125, 125, 73, 52, 14, 1, 0, 0, 0, 0, 10, 7, 3, 3], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.sqrt(tf.math.pow(beta, tf.math.add(beta, alpha)))))))))))))))), grad))), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(beta)), beta))))), tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(grad, grad))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, alpha)))))))))))))))), tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), alpha)), sigma), tf.math.square(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303433001143758, 2.302976859448813, 2.3030057569079787, 2.30309021644557, 2.303035988925455, 2.3029357475328123, 2.303020471878465, 2.303079623524791, 2.302927380870315, 2.303028775275486, 2.3030878918408058, 2.303035580675757, 2.3029684987381196, 2.3030174355764492, 2.3029099699528524, 2.3029948758757772, 2.302997592165958, 2.3032658167518973, 2.30296749537096, 2.3030783878798027, 2.3030656668897698, 2.3030015195381246], "accuracy": [0.0886276587843895, 0.09232597798109055, 0.09325055778026581, 0.09126931428909302, 0.09800554811954498, 0.0952318087220192, 0.0940430611371994, 0.09694888442754745, 0.09549596905708313, 0.09391097724437714, 0.09602430462837219, 0.09866596013307571, 0.09602430462837219, 0.09259014576673508, 0.09470347315073013, 0.09681680053472519, 0.09351472556591034, 0.09021265059709549, 0.09351472556591034, 0.0936468094587326, 0.09655263274908066, 0.0936468094587326], "val_loss": [1.9737492970057897, 1.9737553596496582, 1.9737794058663505, 1.9738086291721888, 1.9737443242754256, 1.9737503187997, 1.9738426208496094, 1.9736785207475935, 1.9736342430114746, 1.9737796102251326, 1.9736433710370744, 1.9737225941249303, 1.9736661911010742, 1.9736454827444894, 1.9736456871032715, 1.973637580871582, 1.9735877854483468, 1.9736315182277135, 1.9737300872802734, 1.9737544740949358, 1.973677703312465, 1.9737445967538017], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09966666996479034, 0.09966666996479034, 0.09733333438634872, 0.09733333438634872, 0.09700000286102295, 0.10000000149011612, 0.10133333504199982, 0.0976666659116745, 0.09966666996479034, 0.09966666996479034, 0.10166666656732559, 0.10166666656732559, 0.1003333330154419, 0.10166666656732559, 0.10233332961797714, 0.09966666996479034, 0.09700000286102295, 0.09966666996479034, 0.09733333438634872, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 9, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [81, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0746268630027771, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [8, 3, 1, 2, 2, 1, 3, 3, 8, 0, 2, 6, 2, 3, 4, 9, 3, 0, 5, 1, 5, 2, 3, 1, 6, 2, 8, 1, 4, 8, 2, 0, 9, 1, 6, 6, 8, 2], [2, 3, 2, 2, 0, 2, 2, 0, 0, 3, 3, 2, 3, 3, 4, 0, 0, 1, 2, 1, 5, 2, 3, 3, 2, 2, 0, 0, 1, 5, 3, 0, 0, 0, 5], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [4, 1, 3, 4, 3, 1, 5, 5, 4, 0, 6, 4, 8, 3, 3, 6, 8, 7, 3, 8, 6, 0, 6, 3, 1, 1, 3, 1, 2, 4, 0, 9, 3, 2, 8, 0, 5, 1, 8], [3, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30, 69, 76]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(grad), tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 8, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [30, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 3, 4, 3, 2, 5, 5, 4, 0, 6, 4, 8, 3, 3, 6, 8, 9, 2, 8, 6, 0, 4, 3, 2, 1, 3, 1, 2, 4, 0, 5, 3, 2, 0, 6, 5, 1, 8, 3], [3, 0, 0, 3, 0, 1, 3, 3, 0, 0, 1, 3, 3, 3, 1, 2, 1, 0, 2, 0, 0, 2, 0, 3, 0, 0, 2], [46, 67, 99, 3, 74, 13, 20, 86, 30, 88, 30, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 7, 4, 3, 1, 0, 64, 38, 26, 12], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.add(sigma, tf.math.square(tf.math.square(tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(sigma), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), alpha), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.add(sigma, tf.math.sqrt(sigma)))))), tf.math.divide_no_nan(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(sigma, sigma)), tf.math.multiply(tf.math.subtract(sigma, tf.math.add(alpha, tf.math.pow(beta, alpha))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), beta), tf.math.negative(tf.math.square(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.square(tf.math.subtract(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), sigma))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [1, 9, 2, 2, 8, 8, 2, 8, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 2, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 1, 0, 2, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [99, 83, 47, 6, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 14, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.square(grad))))))))))), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.multiply(grad, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0746268630027771, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [1, 3, 1, 2, 5, 1, 6, 4, 1, 2, 1, 8, 4, 5, 6, 9, 4, 4, 2, 4, 4, 2, 3, 3, 1, 5, 6, 1, 2, 5, 8, 3, 9, 6, 6, 2, 8, 9, 0, 8, 9, 9, 7, 1, 3, 5, 5, 1, 3, 0, 6, 7, 4, 2, 7, 1, 8, 7, 4, 3, 3, 8, 5, 5, 8, 8, 1, 3, 2, 1, 6, 4, 1, 9, 7, 3, 6, 7, 0, 3, 5, 9, 9], [1, 3, 4, 2, 3, 1, 3, 3, 0, 3, 3, 1, 0, 3, 4, 0, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 1, 0, 1, 3, 4, 3, 1, 1, 5, 4, 0, 2, 0, 1, 1, 2, 0, 3, 5, 1, 1], [99, 83, 47, 41, 62, 41, 81, 60, 0, 92, 53, 6, 76, 89, 3, 86], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 8, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 131, 131, 83, 48, 16, 1, 0, 0, 0, 0, 6, 3, 3, 0], "tree_depth": 79, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.subtract(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.pow(tf.math.square(beta), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(beta, grad)))))))), tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.sqrt(alpha))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(alpha, tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(grad, alpha)), tf.math.subtract(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.sqrt(grad))), tf.math.add(beta, alpha))), tf.math.square(tf.math.add(beta, tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(grad))))), grad))))))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.multiply(tf.math.add(beta, alpha), grad))))))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)))), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), grad))))), grad), alpha)), tf.math.add(beta, tf.math.square(alpha)))), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 9, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [4, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 4, 3, 2], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.pow(alpha, alpha), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 9, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [4, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [0, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 7, 4, 3, 1, 1, 5, 2, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 4, 6, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 1, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [8, 3, 1, 2, 2, 1, 3, 3, 8, 0, 2, 6, 2, 3, 4, 9, 3, 0, 5, 1, 5, 2, 3, 1, 6, 2, 8, 1, 4, 8, 2, 0, 9, 1, 6, 6, 8, 2], [1, 1, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 3, 1, 5, 0, 3, 3, 2, 1, 3, 0, 1, 5, 3, 0, 0, 0, 5], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [4, 2, 7], [99], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 3, 1, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30, 69, 76]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 5, 6, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.divide_no_nan(tf.math.add(grad, alpha), alpha), grad), tf.math.add(tf.math.add(alpha, alpha), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0746268630027771, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [1, 3, 1, 2, 5, 1, 6, 4, 1, 9, 3, 8, 4, 5, 6, 9, 3, 3, 2, 1, 4, 2, 3, 3, 6, 2, 6, 1, 2, 5, 8, 3, 9, 6, 6, 6, 8, 9, 0, 5, 9, 9], [1, 3, 2, 2, 0, 2, 2, 0, 0, 3, 3, 2, 3, 3, 4, 0, 0, 1, 2, 1, 5, 2, 3, 3, 2, 2, 0, 0, 1, 5, 3, 0, 0, 0, 5], [34, 83, 26, 69, 87, 83, 18, 60, 0, 92, 63], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 3, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [40, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(alpha, tf.math.multiply(grad, tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301878812558395, 2.3022011437074084, 2.3029952028786203, 2.3017262862012404, 2.3033144576060476, 2.3018567485894983], "accuracy": [0.08928807079792023, 0.09259014576673508, 0.0882314071059227, 0.09008057415485382, 0.08360850811004639, 0.08677849918603897], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [1, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [5, 3, 8, 2, 2, 1, 6, 2, 1, 3, 3, 2, 4, 4, 3, 9, 3, 3, 5, 1, 6, 2, 3, 1, 6, 2, 6, 1, 2, 8, 2, 0, 2, 1, 6, 6, 8, 8, 8, 4, 5, 5, 1, 1, 1, 5, 3, 1, 2, 3, 6, 9, 8, 5, 8, 3, 8, 8, 7, 8], [3, 1, 2, 2, 0, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 2, 0, 3, 3, 1, 5, 0, 3, 3, 2, 1, 3, 3, 1, 1, 3, 0, 0, 0, 5, 3, 0, 2, 4, 3, 0], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 3, 4, 3, 1, 5, 5, 4, 0, 6, 4, 8, 3, 3, 6, 8, 7, 3, 8, 6, 0, 6, 3, 1, 1, 3, 1, 2, 4, 0, 9, 3, 2, 8, 0, 5, 1, 8], [3, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 67, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301878812558395, 2.3022011437074084, 2.3029952028786203, 2.3017262862012404, 2.3033144576060476, 2.3018567485894983], "accuracy": [0.08928807079792023, 0.09259014576673508, 0.0882314071059227, 0.09008057415485382, 0.08360850811004639, 0.08677849918603897], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 7, 2, 2, 8, 4, 2, 3, 1, 0, 4, 2, 5, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 5, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 4, 2, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2, 4, 3, 5, 5, 1], [99, 83, 47, 41, 87, 41, 18, 60, 0, 92], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 9, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 3, 1, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30, 69, 76]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 1, 91, 91, 55, 36, 9, 1, 0, 0, 0, 0, 7, 4, 3, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))), tf.math.add(beta, grad))))))), tf.math.add(beta, grad))))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, alpha), beta)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(beta, grad)))))))), alpha))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.sqrt(tf.math.add(beta, beta)))))), tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(sigma, tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.301878812558395, 2.3022011437074084, 2.3029952028786203, 2.3017262862012404, 2.3033144576060476, 2.3018567485894983], "accuracy": [0.08928807079792023, 0.09259014576673508, 0.0882314071059227, 0.09008057415485382, 0.08360850811004639, 0.08677849918603897], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}]