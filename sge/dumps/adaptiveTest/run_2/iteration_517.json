[{"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [5, 3, 1, 6, 2, 3, 1, 4, 3, 0, 9, 3, 0, 6, 2, 8, 3, 3, 0, 6, 4, 2, 1, 8, 0, 5, 2, 6, 4, 2, 0, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 1, 0, 1, 2, 2, 2, 1, 2, 0, 1, 2, 2, 2, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [52, 77, 91, 77, 39, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [6, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.6488571166992188, "mapping_values": [1, 18, 18, 9, 9, 2, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), grad)))))), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.8577273640540044, 2.279470701637112, 2.257812873609566, 2.264510270296197, 2.2884496020729106, 4.4596291825976335, 2.1974185972701226, 2.0487787106632007, 2.008690339431566, 1.8425521148808361, 1.6873577961973967, 1.5778347707112799, 1.577327543072744, 1.9690093329837373, 1.5489449707461291, 1.4585074279066153, 1.3912098036623586, 1.2352447837272325, 1.0738882637137293, 1.083900707760948, 1.1807883815711215, 1.0254208691572675, 1.3077803514164672, 1.151454878694204, 1.0609153454345626, 0.8949885572566489, 0.9173055361243382, 0.8355701525433976, 0.7493914599274412, 0.7715269638688699, 0.7247346215606476, 0.6719993741725493, 0.7060625504792374, 0.6567741955874413, 0.6310254791629722, 0.6468197607156418, 0.5992368296971646, 0.595501600184445, 0.6263371476045674, 0.5973166355902824, 0.5640026633655391, 0.5815845112270919, 0.5566908108906236, 0.5591175222614139, 0.5273345970143858, 0.5085268549482348, 0.527289403302086, 0.5284871115991232, 0.5191780711602793, 0.46320957108385385, 0.4971252050948984, 0.46229059939308254, 0.4638309626610146, 0.46756304568067253, 0.4246166583774049, 0.45564594848312484, 0.4231499911196999, 0.43364682461780535, 0.4472465982384859, 0.45295669712552367, 0.4373274966789007, 0.4116725060587404], "accuracy": [0.21054022014141083, 0.1468762308359146, 0.16919825971126556, 0.1608770340681076, 0.16734910011291504, 0.24514594674110413, 0.19653943181037903, 0.3008849620819092, 0.2736758589744568, 0.34183067083358765, 0.4080042243003845, 0.4410249590873718, 0.4745740294456482, 0.38409721851348877, 0.4785365164279938, 0.4839519262313843, 0.5101043581962585, 0.5686171054840088, 0.6116761565208435, 0.6126006841659546, 0.5959582328796387, 0.6333377361297607, 0.5414080023765564, 0.5822216272354126, 0.6165632009506226, 0.6730946898460388, 0.6579051613807678, 0.6954167485237122, 0.7161537408828735, 0.709549605846405, 0.7243428826332092, 0.7401928305625916, 0.7272487282752991, 0.741909921169281, 0.7532690763473511, 0.7506273984909058, 0.767930269241333, 0.7681944370269775, 0.7593448758125305, 0.7734777331352234, 0.7812706232070923, 0.7781006693840027, 0.7823272943496704, 0.7858935594558716, 0.7964601516723633, 0.8054417967796326, 0.8014793395996094, 0.796328067779541, 0.8018755912780762, 0.8236692547798157, 0.8088759779930115, 0.8220842480659485, 0.8222163319587708, 0.8185180425643921, 0.8368775844573975, 0.821820080280304, 0.8384625315666199, 0.8338396549224854, 0.8286884427070618, 0.8285563588142395, 0.8317263126373291, 0.8445383906364441], "val_loss": [1.9766300746372767, 1.9695393017360143, 1.973548071725028, 1.9631689616612025, 17.23762457711356, 1.9572713034493583, 1.7650456428527832, 1.7616562843322754, 1.589317798614502, 1.4629849365779333, 1.3832556860787528, 1.1613883972167969, 1.9402079582214355, 1.3386624540601457, 1.2559080123901367, 1.2601820400782995, 1.057173763002668, 0.8695526974541801, 0.8665409428732735, 0.9457470689501081, 0.7967594691685268, 0.853504845074245, 1.0424581595829554, 0.9880948066711426, 0.8442683219909668, 1.0072099481310164, 0.7244775806154523, 0.6357135772705078, 0.6808700391224453, 0.6403736386980329, 0.577143839427403, 0.6253430673054287, 0.6219544751303536, 0.5509530135563442, 0.5726958342960903, 0.5319040502820697, 0.5513898985726493, 0.5354448727199009, 0.6027626310076032, 0.5405229670660836, 0.5074924911771502, 0.5212311744689941, 0.5563559872763497, 0.5162809406008039, 0.5031888995851789, 0.50779618535723, 0.5467784064156669, 0.5307948589324951, 0.49260951791490826, 0.5424086877277919, 0.48143434524536133, 0.4731914486203875, 0.5415512493678502, 0.48036909103393555, 0.49967896938323975, 0.4793076515197754, 0.46318176814488005, 0.5158719675881522, 0.48292694772992817, 0.4816906452178955, 0.47854300907679964, 0.49409936155591694], "val_accuracy": [0.10066666454076767, 0.1236666664481163, 0.10233332961797714, 0.10233332961797714, 0.10300000011920929, 0.19300000369548798, 0.2783333361148834, 0.24833333492279053, 0.3330000042915344, 0.39366665482521057, 0.4350000023841858, 0.49433332681655884, 0.4176666736602783, 0.4566666781902313, 0.46700000762939453, 0.4763333201408386, 0.5503333210945129, 0.6359999775886536, 0.6209999918937683, 0.612333357334137, 0.6639999747276306, 0.6623333096504211, 0.5686666369438171, 0.5920000076293945, 0.6643333435058594, 0.5713333487510681, 0.6743333339691162, 0.7279999852180481, 0.6916666626930237, 0.7300000190734863, 0.7383333444595337, 0.7016666531562805, 0.7336666584014893, 0.7540000081062317, 0.7176666855812073, 0.7513333559036255, 0.7616666555404663, 0.7583333253860474, 0.7456666827201843, 0.7793333530426025, 0.7876666784286499, 0.7846666574478149, 0.7596666812896729, 0.765999972820282, 0.7916666865348816, 0.7789999842643738, 0.7736666798591614, 0.7803333401679993, 0.8023333549499512, 0.7829999923706055, 0.796999990940094, 0.8083333373069763, 0.8066666722297668, 0.8166666626930237, 0.8003333210945129, 0.8080000281333923, 0.8216666579246521, 0.7876666784286499, 0.8046666383743286, 0.8059999942779541, 0.8213333487510681, 0.8199999928474426]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 1, 1, 2, 3, 1, 4, 9, 0, 2, 3, 2, 6, 0, 8, 6, 1, 3, 6, 4, 5, 4, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 0, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.4611428678035736, "mapping_values": [1, 6, 6, 3, 3, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.8559116095032877, 2.2766141732449796, 2.326624528055792, 2.3405153369072202, 2.304134918351955, 2.3026138015820634, 2.29916833521211, 2.303299086236557, 2.3032997809601437, 2.3019004128218925, 2.2295141357708568, 1.9279414505581294, 2.331911570486407, 2.2450335395492034, 2.306697630879114, 2.2963644835328885, 2.6366752166443215], "accuracy": [0.21014396846294403, 0.14238542318344116, 0.17831197381019592, 0.14119666814804077, 0.09721305221319199, 0.10051512718200684, 0.11676132678985596, 0.12376172095537186, 0.09932637959718704, 0.10434553027153015, 0.2016906589269638, 0.3675868511199951, 0.1488574892282486, 0.19997358322143555, 0.10117553919553757, 0.12270505726337433, 0.1526878923177719], "val_loss": [1.9764560971941267, 1.9711190632411413, 1.9360966001238142, 1.9748907770429338, 1.9738037245614188, 1.9721944672720773, 1.940312113080706, 1.9738546780177526, 1.973250389099121, 1.9696153913225447, 1.837838990347726, 1.7879554203578405, 1.9686930520193917, 1.9755807604108537, 1.9735465730939592, 1.856248242514474, 1.9734525680541992], "val_accuracy": [0.10066666454076767, 0.1743333339691162, 0.19766665995121002, 0.1003333330154419, 0.1003333330154419, 0.10133333504199982, 0.23766666650772095, 0.09700000286102295, 0.11999999731779099, 0.15299999713897705, 0.3136666715145111, 0.47833332419395447, 0.11266666650772095, 0.10233332961797714, 0.10300000011920929, 0.39766666293144226, 0.10433333367109299]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 3, 1, 6, 2, 3, 6, 4, 0, 0, 9, 3, 2, 6, 2, 5, 3, 3, 4, 6, 4, 2, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [52, 77, 46, 77, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.3182857036590576, "mapping_values": [1, 19, 19, 11, 8, 3, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(grad)))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.857805937225509, 2.2562795307311587, 2.5557481899332015, 2.304632157886411, 2.303187768252424, 2.3026847124194205, 2.3024087296091507], "accuracy": [0.21040813624858856, 0.15374454855918884, 0.12957337498664856, 0.09681680053472519, 0.09747721254825592, 0.10355303436517715, 0.10236428678035736], "val_loss": [1.9766398157392229, 1.9842915534973145, 1.9765832764761788, 1.973830086844308, 1.9736826760428292, 1.9733995710100447, 1.9717324120657784], "val_accuracy": [0.10066666454076767, 0.3050000071525574, 0.0976666659116745, 0.0976666659116745, 0.09799999743700027, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 1, 6, 6, 2, 3, 5, 4, 0, 0, 9, 3, 2, 2, 2, 8, 3, 3, 0, 6, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 25, 91, 78, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.2680000066757202, "mapping_values": [1, 38, 38, 22, 16, 4, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(grad, grad))), tf.math.add(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), grad)), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.8558841172053184, 2.2682006613232946, 2.538982431823394, 2.1916503992063054, 2.30774610021473, 2.303471401619196, 2.303224551663533], "accuracy": [0.2106723040342331, 0.14238542318344116, 0.1472724825143814, 0.18636904656887054, 0.0940430611371994, 0.10289261490106583, 0.09747721254825592], "val_loss": [1.9765013286045618, 1.9673772539411272, 1.9725417409624373, 1.980424063546317, 1.9744814464024134, 1.9738049507141113, 1.9737231390816825], "val_accuracy": [0.10066666454076767, 0.18966667354106903, 0.0976666659116745, 0.10233332961797714, 0.1003333330154419, 0.09733333438634872, 0.09866666793823242]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [6, 6, 4, 6, 2, 1, 5, 4, 9, 1, 9, 3, 2, 6, 0, 8, 6, 2, 0, 0, 0, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 65, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.23171427845954895, "mapping_values": [1, 28, 28, 17, 11, 3, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.subtract(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(alpha, alpha)), tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.8575812541514245, 2.2738236449791724, 2.505813006916381, 2.336569343906242, 2.29930730918458, 2.332641676227729, 2.302963580973097], "accuracy": [0.21054022014141083, 0.1430458277463913, 0.23286223411560059, 0.10130762308835983, 0.11610091477632523, 0.1026284471154213, 0.1002509593963623], "val_loss": [1.9766734668186732, 1.9627233913966589, 2.1668321745736256, 1.974620750972203, 2.070140702383859, 1.9741123744419642, 1.973841939653669], "val_accuracy": [0.10066666454076767, 0.1926666647195816, 0.10066666454076767, 0.10566666722297668, 0.10066666454076767, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 1, 1, 2, 3, 1, 4, 9, 0, 9, 3, 2, 6, 0, 8, 6, 1, 3, 6, 4, 5, 4, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.20114286243915558, "mapping_values": [1, 31, 31, 19, 12, 4, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.8559211281706016, 2.2873446455784068, 2.3416824322240606, 2.303845455460403, 2.2389880480027515, NaN, NaN], "accuracy": [0.21054022014141083, 0.1430458277463913, 0.15836745500564575, 0.10540219396352768, 0.18359529972076416, 0.09866596013307571, 0.09998679161071777], "val_loss": [1.9763712201799666, 1.9685634885515486, 1.9764948572431291, 1.9685210500444685, 2.3077383041381836, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.1913333386182785, 0.09700000286102295, 0.10233332961797714, 0.0023333332501351833, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [6, 6, 4, 6, 2, 1, 1, 4, 9, 1, 9, 3, 2, 6, 0, 8, 6, 2, 9, 0, 0, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 1, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 23, 77, 44, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [1, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.1931428611278534, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.8557985568043422, 2.2770051275025804, 2.4438179395202284, 2.3053366280093313, 2.3034885653635735, 2.3029444512437913, 2.3029409401515344], "accuracy": [0.21040813624858856, 0.14872540533542633, 0.18333113193511963, 0.10381719470024109, 0.09325055778026581, 0.1002509593963623, 0.09826971590518951], "val_loss": [1.9763720376150948, 1.9696038791111536, 1.9783379690987724, 1.9743632589067732, 1.9738354001726424, 1.9736268179757255, 1.9733852658952986], "val_accuracy": [0.10066666454076767, 0.13966666162014008, 0.10233332961797714, 0.10233332961797714, 0.1003333330154419, 0.11633333563804626, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 5, 1, 1, 2, 3, 1, 4, 9, 0, 9, 3, 2, 6, 0, 8, 6, 1, 3, 6, 4, 5, 4, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [6, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.1908571422100067, "mapping_values": [1, 38, 38, 23, 15, 5, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.707489026646179, 2.527917020781606, 2.4011152205355746, 2.415025000244068, 2.415294994090479, 2.4066125700707133], "accuracy": [0.18716153502464294, 0.1014397069811821, 0.09879804402589798, 0.09826971590518951, 0.0952318087220192, 0.09774138033390045], "val_loss": [2.355381488800049, 2.04278564453125, 2.064507552555629, 2.106093338557652, 2.0821051597595215, 2.0497471945626393], "val_accuracy": [0.10233332961797714, 0.09700000286102295, 0.1003333330154419, 0.09833333641290665, 0.10233332961797714, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 1, 8, 2, 3, 1, 4, 9, 0, 9, 3, 2, 6, 0, 8, 6, 1, 3, 6, 4, 5, 4, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 0, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [6, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.19057142734527588, "mapping_values": [1, 30, 30, 19, 11, 4, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.8567255394821864, 2.270128091407285, 2.3224524148561385, 2.310338238903938, 2.3083514880353055, 2.3030939134608612, 2.2765080483834255, 2.3037681977321536], "accuracy": [0.2102760523557663, 0.14568749070167542, 0.19138818979263306, 0.1546691358089447, 0.09998679161071777, 0.10487385839223862, 0.146479994058609, 0.09840179979801178], "val_loss": [1.976490088871547, 1.9688762256077357, 1.7969361713954382, 1.9818528039114816, 1.9746205466134208, 1.9706724030630929, 1.9754693167550224, 1.9702709742954798], "val_accuracy": [0.10066666454076767, 0.18266665935516357, 0.20866666734218597, 0.10233332961797714, 0.10233332961797714, 0.12566666305065155, 0.10233332961797714, 0.11966666579246521]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 0, 1, 2, 3, 2, 5, 9, 5, 9, 3, 2, 6, 0, 3, 6, 1, 3, 6, 4, 5, 4, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [3, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.11428571492433548, "mapping_values": [1, 30, 30, 19, 11, 4, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, grad)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.213802589889625, 2.435523224544563, 2.3933562323905693, 2.404043056583518, 28.07281367442769, 2.531583977350233, 2.493306752917726], "accuracy": [0.18570862710475922, 0.09879804402589798, 0.10077928751707077, 0.09668471664190292, 0.10236428678035736, 0.09774138033390045, 0.10527011007070541], "val_loss": [2.062281063624791, 2.011916024344308, 2.0555015972682407, 2.0944173676627025, 2.1931441852024625, 2.0679726600646973, 2.1367481776646207], "val_accuracy": [0.10133333504199982, 0.10766666382551193, 0.1003333330154419, 0.10199999809265137, 0.10233332961797714, 0.10133333504199982, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 0, 1, 1, 1, 3, 1, 4, 9, 6, 9, 3, 2, 6, 0, 2, 6, 0, 9, 6, 1, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 4, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(alpha, alpha)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.301148459958898, 2.4527807473789953, 8.911940745925701, 2.6186536986830053, 2.510211449131722, 2.4876859711460733, 2.6236214078790585, 2.5320728757614157, 2.471658789832846, 2.624078480984163], "accuracy": [0.18623696267604828, 0.10328886657953262, 0.10487385839223862, 0.09668471664190292, 0.09734513610601425, 0.09853387624025345, 0.1006472036242485, 0.09589222073554993, 0.1014397069811821, 0.10487385839223862], "val_loss": [2.0638790811811174, 2.034380776541574, 2.2444419179643904, 2.114518029349191, 2.1499075208391463, 2.2520150457109724, 2.0425842830113004, 2.136425563267299, 2.330038206917899, 2.0057484081813266], "val_accuracy": [0.10133333504199982, 0.09700000286102295, 0.1003333330154419, 0.10066666454076767, 0.10233332961797714, 0.10133333504199982, 0.09700000286102295, 0.10233332961797714, 0.10133333504199982, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 1, 6, 2, 3, 6, 4, 0, 0, 9, 3, 2, 6, 0, 8, 3, 3, 5, 6, 4, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 23, 77, 44, 74, 22, 12], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 23, 16, 3, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 16, 10, 6, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(alpha, grad)))), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.square(grad), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))))))))))), grad))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(sigma), tf.math.subtract(sigma, tf.math.pow(beta, tf.math.negative(beta))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 1, 3, 2, 3, 2, 4, 5, 0, 9, 0, 2, 6, 0, 8, 3, 2, 1, 6, 4, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 23, 77, 44, 74, 22, 12], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 35, 21, 14, 3, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), alpha), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad))), alpha)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [32.68727775748065, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18993528187274933, 0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [145566.04910714287, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0806666687130928, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [6, 6, 4, 6, 2, 1, 1, 4, 9, 1, 9, 3, 2, 6, 0, 8, 6, 2, 9, 0, 0, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 1, 2, 2, 1, 1, 2, 1, 0, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 19, 12, 5, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad)), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))), grad)), tf.math.subtract(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), alpha))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07977809756994247, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [6, 6, 9, 4, 2, 6, 1, 4, 9, 1, 9, 3, 2, 6, 0, 8, 6, 2, 9, 0, 0, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 1, 2, 1, 2, 2, 2, 0, 2, 2, 1, 2, 2, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [1, 46, 23, 77, 44, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1], [1, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 13, 8, 5, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(sigma), tf.math.subtract(sigma, beta))))", "other_info": {"loss": [6530462.772392199, 7460360.584533087, 7462760.565975432, 7465153.567956677, 7467537.099326377, 7469936.131092326], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [6416407.857142857, 6418487.714285715, 6420527.714285715, 6422570.571428572, 6424622.571428572, 6426680.571428572], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 2, 4, 2, 3, 6, 8, 0, 0, 9, 3, 2, 6, 0, 8, 3, 5, 9, 6, 4, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 0, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.08457142859697342, "mapping_values": [1, 38, 38, 26, 12, 3, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)))), alpha)), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [6.559171871502229, 12037.079696871586, 2.3575277174814993, 2.319547733752294, 2.307186209341444, 2.3037610657384224], "accuracy": [0.16536785662174225, 0.10421344637870789, 0.09602430462837219, 0.09893012791872025, 0.09694888442754745, 0.09708096832036972], "val_loss": [10.190361295427595, 2.0387635231018066, 1.9941977773393904, 1.9786481857299805, 1.9745056969778878, 1.9737584250313895], "val_accuracy": [0.10466666519641876, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.09700000286102295, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 0, 1, 8, 2, 3, 0, 9, 9, 0, 9, 3, 2, 6, 0, 8, 6, 1, 3, 6, 4, 5, 4, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 1, 2, 2, 2, 1, 2, 2, 0, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [5, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.04228571429848671, "mapping_values": [1, 12, 12, 8, 4, 2, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303558385761076, 2.3023791334270376, 2.307951659889206, 2.311069831147784, 2.3109570572704072, 2.316847687494391, 2.3195876335471044, 2.3239326947841663, 2.3323125604940143, 2.34279133564666, 2.3828615351848126, NaN, NaN, NaN, NaN], "accuracy": [0.08836349099874496, 0.09100515395402908, 0.08506141602993011, 0.0796460211277008, 0.08426892012357712, 0.0754193663597107, 0.07740060985088348, 0.07172103971242905, 0.07740060985088348, 0.07872143387794495, 0.08347642421722412, 0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9717411994934082, 1.9729773657662528, 1.9747655051095145, 1.9769330705915178, 1.978954519544329, 1.9816231727600098, 1.9842262268066406, 1.9875621795654297, 1.994119303567069, 2.0066734041486467, 2.0737828527178084, NaN, NaN, NaN, NaN], "val_accuracy": [0.02866666577756405, 0.021666666492819786, 0.02199999988079071, 0.02500000037252903, 0.03333333507180214, 0.049666665494441986, 0.06666667014360428, 0.08433333039283752, 0.0976666659116745, 0.10233332961797714, 0.10233332961797714, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 9, 6, 2, 9, 1, 2, 1, 0, 9, 6, 2, 2, 0, 5, 6, 3, 9, 0, 4, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [52, 77, 5, 77, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.04114285856485367, "mapping_values": [1, 4, 4, 2, 2, 0, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302964545291381, 2.300369090565349, 2.303384025099098, 2.3038841979913958, 2.301742140013292, 2.303282826536635], "accuracy": [0.09074098616838455, 0.09642054885625839, 0.09179764986038208, 0.09060890227556229, 0.09655263274908066, 0.08757099509239197], "val_loss": [1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 1, 1, 2, 1, 1, 4, 1, 0, 9, 3, 3, 6, 0, 8, 8, 1, 0, 6, 4, 5, 4, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [81, 46, 91, 78, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [1, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [3, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.04114285856485367, "mapping_values": [1, 36, 36, 22, 14, 4, 5, 5, 2, 3, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302964545291381, 2.300369090565349, 2.303384025099098, 2.3038841979913958, 2.301742140013292, 2.303282826536635], "accuracy": [0.09074098616838455, 0.09642054885625839, 0.09179764986038208, 0.09060890227556229, 0.09655263274908066, 0.08757099509239197], "val_loss": [1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [4, 0, 1, 6, 2, 3, 6, 4, 0, 0, 2, 3, 2, 6, 0, 8, 3, 3, 5, 6, 4, 6, 1, 8, 0, 5, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 0, 3, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [48, 77, 91, 77, 81, 74, 22, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 5, 2, 1, 7, 2, 3, 2, 8, 2, 2, 6], [3, 2, 3, 5, 4, 3, 5, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [9, 2, 6, 9, 1, 8, 3, 0], [2, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.04114285856485367, "mapping_values": [1, 39, 39, 22, 17, 4, 5, 5, 3, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, alpha)), grad))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(grad, grad), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302964545291381, 2.300369090565349, 2.303384025099098, 2.3038841979913958, 2.301742140013292, 2.303282826536635], "accuracy": [0.09074098616838455, 0.09642054885625839, 0.09179764986038208, 0.09060890227556229, 0.09655263274908066, 0.08757099509239197], "val_loss": [1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]