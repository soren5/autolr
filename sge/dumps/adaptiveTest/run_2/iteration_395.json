[{"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [5, 3, 2, 8, 3, 5, 5, 2, 8, 2, 2, 1, 4, 6, 8, 2, 2, 5, 1, 6, 2, 2, 8, 1, 1, 5, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 1, 3, 2, 1, 1, 1, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [7, 88, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.795714259147644, "mapping_values": [1, 11, 11, 7, 4, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.787539770857942, 2.3045433888330185, 2.302471454101641, 2.23632160599489, 2.380111798004404, 2.1010393488912564, 1.532836328077436, 1.3400060582107416, 1.0139514371593317, 0.8749077042899096, 0.8545735784100347, 0.7697910414773712, 0.7861381881288361, 0.7507206141248025, 0.6793392066391247, 0.6997016231145494, 0.6500773906329871, 0.6462710292788701, 0.6134529394433326, 0.6085551082733647, 0.621927467122794, 0.5806096086034749, 0.575997450576561, 0.5772599598845282, 0.5421204528064146, 0.5656267996036523, 0.5116574215048166, 0.5116175948636659, 0.5003929478365432, 0.48982190898443806, 0.4920640142759737, 0.45606756358728623], "accuracy": [0.17659489810466766, 0.1006472036242485, 0.10487385839223862, 0.17421740293502808, 0.24593845009803772, 0.2467309534549713, 0.5160480737686157, 0.5671641826629639, 0.6415268778800964, 0.681547999382019, 0.6966054439544678, 0.720380425453186, 0.7195879220962524, 0.7193237543106079, 0.7565711140632629, 0.7416457533836365, 0.7621186375617981, 0.7614582180976868, 0.7701756954193115, 0.7765156626701355, 0.7737419009208679, 0.7891955971717834, 0.7864218950271606, 0.7839123010635376, 0.8055738806724548, 0.7905164361000061, 0.8100647330284119, 0.8158763647079468, 0.8125742673873901, 0.8181217908859253, 0.8165367841720581, 0.8350284099578857], "val_loss": [1.9766505786350794, 1.9741496358598982, 1.9710708345685686, 2.2526728766305104, 1.4064911433628626, 1.8376456669398717, 0.7168604476111275, 0.8190648215157645, 0.6457679782594953, 0.6712454898016793, 0.6289417403084892, 0.6262976101466587, 0.67962760584695, 0.5039514643805367, 0.5069478579929897, 0.5032891205378941, 0.48528858593532015, 0.48760662760053364, 0.4639908160482134, 0.502287745475769, 0.493182863507952, 0.47681234564099995, 0.4662753258432661, 0.4719372306551252, 0.42490504469190327, 0.4272869484765189, 0.4307587061609541, 0.4542755058833531, 0.42564593042646137, 0.4311421087809971, 0.4169487697737558, 0.4118007591792515], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.29600000381469727, 0.4636666774749756, 0.33000001311302185, 0.7043333053588867, 0.6769999861717224, 0.7193333506584167, 0.7120000123977661, 0.7279999852180481, 0.7319999933242798, 0.6783333420753479, 0.7820000052452087, 0.7799999713897705, 0.7773333191871643, 0.7883333563804626, 0.7823333144187927, 0.7903333306312561, 0.7776666879653931, 0.7696666717529297, 0.7893333435058594, 0.7913333177566528, 0.8056666851043701, 0.8176666498184204, 0.8116666674613953, 0.8259999752044678, 0.7960000038146973, 0.8066666722297668, 0.812666654586792, 0.8223333358764648, 0.8256666660308838]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [5, 3, 2, 8, 6, 5, 5, 3, 8, 0, 2, 1, 4, 6, 8, 2, 2, 5, 1, 6, 2, 2, 8, 1, 1, 5, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 2, 0, 1, 2, 2, 2, 2, 2, 2, 0, 1, 1, 3, 2, 1, 1, 1, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [7, 88, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [0, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.5394285917282104, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.045058348616274, 2.40724277285348, 2.2015902936860097, 2.1782185879239884, 1.9678526610242315, 1.8530116708539086, 2.0750849164157352, 1.7762299384328872, 1.409328860739644, 1.4050175363613457, 2.0575179855789822, 1.9935585208273583], "accuracy": [0.18782195448875427, 0.09668471664190292, 0.18636904656887054, 0.28305375576019287, 0.3230748772621155, 0.37841764092445374, 0.2859595715999603, 0.41262713074684143, 0.5136705636978149, 0.5260863900184631, 0.31105533242225647, 0.378549724817276], "val_loss": [2.38054473059518, 1.9713144983564104, 1.7607665743146623, 1.8965521539960588, 1.61986129624503, 1.9596442495073592, 1.2473222528185164, 1.126699379512242, 1.1800588880266463, 1.7463276045663017, 1.0487807478223528, 1.7631967408316476], "val_accuracy": [0.10233332961797714, 0.1003333330154419, 0.3449999988079071, 0.24533332884311676, 0.4126666784286499, 0.1836666613817215, 0.5649999976158142, 0.5636666417121887, 0.5486666560173035, 0.47333332896232605, 0.5606666803359985, 0.25033333897590637]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 2, 8, 3, 3, 5, 6, 8, 2, 2, 1, 4, 6, 2, 2, 2, 4, 1, 0, 2, 8, 8, 1, 1, 3, 2, 2, 1, 2, 8, 9, 7, 2, 0, 5, 3, 0, 3, 8, 4, 7, 1, 3, 7, 3, 1, 3, 3, 2, 6, 5, 7, 4, 1, 1], [2, 2, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 1, 3, 2, 2, 2, 1, 2, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [21, 25, 7, 40, 44, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.37057143449783325, "mapping_values": [1, 99, 99, 56, 43, 5, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 74, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, grad))))))), grad)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), grad)))))), tf.math.add(alpha, grad)))), tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.square(grad))), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(grad, tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(alpha, alpha)), tf.math.add(alpha, grad)))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad)))))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, grad), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.7875254305362263, 2.3045821610285606, 2.3022113819447303, 2.2069485911194358, 3.65256216292683, 2.6167406759021494, 2.309353355560887, 2.3041670160554326, 2.3041251176194963], "accuracy": [0.1764628142118454, 0.09985470771789551, 0.10540219396352768, 0.1784440577030182, 0.1798969805240631, 0.1398758441209793, 0.09509972482919693, 0.09285431355237961, 0.09840179979801178], "val_loss": [1.9766504423958915, 1.9740590367998396, 1.970142092023577, 2.3877936771937778, 3.1718692098345076, 1.9781085423060827, 1.973961557660784, 1.9736484118870325, 1.9737583569117956], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.3569999933242798, 0.10133333504199982, 0.10266666859388351, 0.10233332961797714, 0.10300000011920929, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [5, 3, 2, 6, 3, 1, 5, 5, 8, 2, 2, 1, 1, 2, 2, 8, 2, 5, 1, 6, 8, 2, 8, 1, 4, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 2, 0, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 3, 2, 2, 1, 1, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [21, 25, 7, 40, 88, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.3094285726547241, "mapping_values": [1, 15, 15, 9, 6, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))), tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.787536353168077, 2.304605622821244, 2.3025151161296633, 2.2614724513577777, 2.243614080103082, 2.3037985649721073, 2.5130732414697565, 2.3066830483598952, 2.301549080104372], "accuracy": [0.1764628142118454, 0.1006472036242485, 0.10566636174917221, 0.1620657742023468, 0.19799233973026276, 0.09972262382507324, 0.12389380484819412, 0.10077928751707077, 0.11293092370033264], "val_loss": [1.9766736030578613, 1.9741367612566267, 1.970895562853132, 1.7032767023359026, 1.9752187728881836, 1.9730232102530343, 1.9803767204284668, 1.973841939653669, 1.9642323085239954], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.3163333237171173, 0.10133333504199982, 0.09866666793823242, 0.0976666659116745, 0.10266666859388351, 0.19099999964237213]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [5, 3, 2, 8, 3, 3, 5, 5, 8, 2, 2, 1, 4, 6, 2, 2, 2, 4, 1, 6, 2, 0, 8, 1, 1, 3, 2, 2, 1, 2, 2, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 2, 3, 2, 1, 2, 0, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [21, 25, 7, 40, 88, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.3025714159011841, "mapping_values": [1, 70, 70, 41, 29, 8, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), grad), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(grad, tf.math.square(tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), alpha)))))))))))), tf.math.add(alpha, grad))))))))), alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.7875356017606387, 2.3045571127808278, 2.302683074287593, 2.2812925987964165, 2.673353369997131, 2.3060077418583163, 2.2798570743594047, 2.305895007533672, 2.303495710709501], "accuracy": [0.1764628142118454, 0.10077928751707077, 0.10434553027153015, 0.15480121970176697, 0.21529521048069, 0.09694888442754745, 0.15757495164871216, 0.09615638852119446, 0.09893012791872025], "val_loss": [1.9766943114144462, 1.9742303575788225, 1.9719771657671248, 1.7697643552507674, 1.978870255606515, 1.9691869871956962, 1.9774144717625208, 1.9741464342389787, 1.973648956843785], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.19033333659172058, 0.10133333504199982, 0.10166666656732559, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [5, 2, 2, 5, 3, 8, 6, 6, 8, 2, 2, 1, 0, 6, 2, 2, 2, 5, 1, 6, 9, 2, 8, 1, 3, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 0, 2, 0, 1, 2, 2, 2, 1, 2, 2, 2, 0, 1, 3, 2, 0, 1, 2, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [21, 25, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.3025714159011841, "mapping_values": [1, 22, 22, 13, 9, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.negative(grad))), grad)))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.787536384564633, 2.3046222126416214, 2.3026588585052066, 2.2653376530221645, 3.449829040060521, 2.3140722923684414, 2.3056067009297156, 2.3031143238988174, 2.267955891444557], "accuracy": [0.1764628142118454, 0.09972262382507324, 0.10540219396352768, 0.17117950320243835, 0.20552106201648712, 0.09972262382507324, 0.10038304328918457, 0.10117553919553757, 0.1434420794248581], "val_loss": [1.976651396070208, 1.9742326055254256, 1.9715334347316198, 1.6971940653664725, 1.9921725136893136, 1.9764269420078822, 1.9739347866603307, 1.970189026423863, 1.9646341460091727], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.25, 0.10066666454076767, 0.10199999809265137, 0.10199999809265137, 0.19833333790302277, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [5, 3, 2, 8, 3, 1, 5, 5, 5, 2, 2, 1, 4, 6, 2, 2, 2, 4, 1, 6, 2, 1, 8, 1, 2, 3, 2, 2, 1, 2, 2, 9, 7, 2, 5, 0, 1, 0, 3, 6, 4, 7], [2, 0, 0, 0, 1, 2, 2, 2, 1, 2, 0, 0, 1, 2, 3, 2, 1, 2, 0, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [24, 25, 7, 79, 88, 74, 0, 75, 83], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.2751428484916687, "mapping_values": [1, 65, 65, 37, 28, 9, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), grad), grad))), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(tf.math.square(alpha), tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha)))), tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.7875371234071507, 2.304603399113736, 2.302540380405854, 2.268792121669541, 2.753432941915431, 2.306422542067661, 2.3043904162479856, 2.303587295942618, 2.303348831292141], "accuracy": [0.1764628142118454, 0.09972262382507324, 0.10738343745470047, 0.1592920422554016, 0.14330999553203583, 0.09985470771789551, 0.09694888442754745, 0.09813763201236725, 0.09985470771789551], "val_loss": [1.9766603878566198, 1.9743682316371374, 1.9712106840951102, 1.8660849162510462, 1.9765135901314872, 1.9742247036525182, 1.9737586975097656, 1.9735640117100306, 1.973531723022461], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.3400000035762787, 0.10133333504199982, 0.10199999809265137, 0.10233332961797714, 0.10300000011920929, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 2, 9, 8, 0, 3, 5, 6, 8, 2, 3, 1, 4, 6, 2, 2, 2, 4, 1, 6, 2, 2, 8, 1, 1, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 3, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 1, 3, 2, 1, 1, 2, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [1, 25, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [4, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.25371429324150085, "mapping_values": [1, 5, 5, 3, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.787538710051146, 2.3046074489230226, 2.3027919865775623, 2.268528446466569, 2.7298832429382762, 2.311372703580714, 2.3046721270559583, 2.3032868522237933, 2.3029822755278757], "accuracy": [0.1764628142118454, 0.09906221181154251, 0.10487385839223862, 0.1582353711128235, 0.2024831622838974, 0.10130762308835983, 0.09893012791872025, 0.09774138033390045, 0.09721305221319199], "val_loss": [1.9766617502485002, 1.9743683678763253, 1.9722773006984167, 2.2534702845982144, 1.986917495727539, 1.9759729249136788, 1.974074227469308, 1.9737024988446916, 1.9736078126089913], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.2173333317041397, 0.10066666454076767, 0.10199999809265137, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [4, 3, 4, 8, 3, 3, 5, 4, 4, 5, 3, 1, 4, 6, 2, 2, 2, 3, 5, 6, 2, 2, 8, 1, 1, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 2, 0, 1, 2, 2, 0, 1, 2, 2, 0, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [47, 88, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.17571428418159485, "mapping_values": [1, 54, 54, 29, 25, 5, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), alpha))))), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), grad)))))))), tf.math.add(alpha, grad))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.787536910685251, 2.3045564979184903, 2.3026579017762603, 2.261062546050969, 2.2047715177310536, 2.359590486465523, 2.310345466567415, 2.3033155057219594, 2.295478240074719], "accuracy": [0.1764628142118454, 0.1002509593963623, 0.10711926966905594, 0.15638621151447296, 0.21661603450775146, 0.1690661758184433, 0.09668471664190292, 0.09879804402589798, 0.11821424216032028], "val_loss": [1.976656709398542, 1.9744080815996443, 1.971200602395194, 1.7672922951834542, 1.9861986977713448, 1.9850948197501046, 1.9745488848005022, 1.9721283912658691, 1.949657985142299], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.20900000631809235, 0.09833333641290665, 0.10233332961797714, 0.10233332961797714, 0.12966667115688324, 0.11366666853427887]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [4, 3, 4, 8, 3, 3, 2, 4, 4, 5, 3, 1, 4, 6, 2, 9, 6, 4, 1, 6, 2, 0, 8, 1, 1, 3, 2, 2, 1, 8, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 0, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 1, 3, 2, 2, 2, 1, 2, 2, 2, 3, 2, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [7, 88, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.17399999499320984, "mapping_values": [1, 51, 51, 28, 23, 5, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(grad, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), grad)))))), grad)))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.787534479388881, 2.3045808441682087, 2.3026454244952994, 2.2472020945040745, 11.82205138778359, 2.368619416793261, 2.3058479482849528, 2.3035298356479577, 2.303083150205107], "accuracy": [0.1764628142118454, 0.10077928751707077, 0.10342095047235489, 0.1752740740776062, 0.11108175665140152, 0.14700831472873688, 0.09655263274908066, 0.09708096832036972, 0.09589222073554993], "val_loss": [1.9766491481236048, 1.9741443225315638, 1.97175509589059, 4.6004374367850165, 1.976435933794294, 1.9775022097996302, 1.9740924835205078, 1.9736434391566686, 1.9735723904200964], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.15133333206176758, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10199999809265137, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [5, 3, 1, 8, 3, 3, 5, 5, 8, 2, 2, 1, 4, 6, 2, 2, 2, 4, 1, 6, 2, 0, 8, 1, 1, 3, 2, 2, 1, 6, 5, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 2, 3, 2, 1, 2, 0, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [21, 25, 7, 40, 88, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.13542857766151428, "mapping_values": [1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.7875397079703577, 2.304570683304345, 2.3028045407281246, 2.28506905678918, 2.283481986405213, 2.79986817354004, 2.63595575836624, 2.303948471842504, 2.303111945885268, 2.3031770982101154, 2.3037704584416208], "accuracy": [0.1764628142118454, 0.1002509593963623, 0.1026284471154213, 0.15572579205036163, 0.13829085230827332, 0.21384228765964508, 0.11768590658903122, 0.10157178342342377, 0.09959053993225098, 0.09826971590518951, 0.09602430462837219], "val_loss": [1.9766661780221122, 1.9742967741830009, 1.9721722602844238, 2.0729246820722307, 1.9635261126926966, 2.130399431501116, 1.9749258586338587, 1.973846094948905, 1.9736482756478446, 1.9736312457493372, 1.97353880746024], "val_accuracy": [0.09700000286102295, 0.1003333330154419, 0.09700000286102295, 0.14666666090488434, 0.12666666507720947, 0.19333332777023315, 0.10133333504199982, 0.10133333504199982, 0.10233332961797714, 0.10266666859388351, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [5, 0, 2, 8, 3, 3, 5, 5, 8, 9, 2, 2, 4, 6, 2, 2, 2, 4, 1, 6, 2, 0, 8, 1, 1, 2, 2, 2, 6, 2, 2, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 1, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 1, 0, 3, 1, 1, 2, 0, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [21, 25, 7, 40, 36, 74, 22, 98], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [2, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 7, 4, 2, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1223425486.5919266, 23879340153.727646, 110738194592.13948, 304918098960.3656, 653647420423.98, 1204225958531.804], "accuracy": [0.10091137140989304, 0.09668471664190292, 0.1002509593963623, 0.1006472036242485, 0.09576013684272766, 0.09391097724437714], "val_loss": [4544392777.142858, 36344118125.71429, 122649013686.85715, 290711629238.8571, 567782071149.7142, 981098954752.0], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [2, 3, 2, 8, 3, 0, 5, 6, 8, 2, 2, 1, 0, 6, 2, 2, 2, 5, 1, 6, 9, 2, 8, 1, 3, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 0, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 1, 3, 2, 1, 1, 2, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [17, 25, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [4, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0816272646188736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [5, 4, 3, 8, 3, 3, 0, 3, 8, 2, 2, 1, 9, 6, 6, 2, 2, 4, 1, 6, 2, 2, 6, 1, 6, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 0, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 2, 3, 2, 0, 2, 1, 0, 2, 2, 3, 0, 0, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [7, 88, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [1, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))))))))), tf.math.add(alpha, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [2, 3, 2, 8, 3, 3, 5, 6, 8, 2, 2, 1, 4, 6, 2, 2, 2, 4, 1, 6, 2, 2, 8, 1, 1, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 0, 2, 0, 1, 1, 2, 2, 1, 2, 2, 0, 1, 1, 3, 2, 2, 2, 1, 2, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [7, 88, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [1, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 2, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [5, 3, 2, 8, 3, 3, 5, 6, 8, 2, 2, 1, 4, 6, 8, 2, 2, 5, 1, 6, 2, 2, 8, 1, 1, 5, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 0, 2, 0, 1, 1, 2, 2, 1, 2, 2, 0, 1, 1, 3, 2, 2, 2, 1, 2, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [21, 25, 7, 40, 35, 74, 22, 75], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [1, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08083476126194, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [4, 3, 4, 8, 3, 3, 5, 4, 0, 5, 9, 1, 4, 6, 2, 2, 2, 4, 1, 6, 2, 2, 8, 1, 1, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 0, 2, 1, 2, 2, 2, 2, 2, 0, 1, 1, 3, 2, 1, 2, 1, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [97, 88, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [9, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [1, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 2, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.multiply(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [6, 6, 2, 8, 3, 3, 5, 6, 8, 2, 2, 1, 4, 6, 2, 2, 2, 2, 1, 6, 0, 1, 8, 1, 1, 1, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 0, 2, 0, 1, 1, 2, 2, 1, 2, 2, 0, 1, 1, 3, 2, 2, 0, 1, 2, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [21, 25, 7, 40, 88, 74, 22, 75], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.05885714292526245, "mapping_values": [1, 65, 65, 37, 28, 6, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 77, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))))), grad)), tf.math.add(alpha, grad))))))))))))), grad))))))))), tf.math.add(alpha, grad))))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, alpha))))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.3395360069126263, 6.6680129686949385, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1768590658903122, 0.1320829540491104, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9869746480669295, 13624.040457589286, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.1326666623353958, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [4, 3, 9, 8, 3, 3, 5, 4, 4, 5, 3, 1, 4, 6, 2, 2, 2, 4, 1, 6, 2, 2, 8, 1, 1, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 0, 2, 1, 2, 2, 2, 2, 2, 0, 1, 1, 3, 2, 1, 2, 1, 0, 2, 2, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2], [28, 79, 7, 40, 35, 74, 22, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.04114285856485367, "mapping_values": [1, 8, 8, 5, 3, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.300912752410975, 2.3022673444000956, 2.3021141242640852, 2.3032193940628347, 2.3014871137584, 2.301896629836093], "accuracy": [0.0940430611371994, 0.08849557489156723, 0.08809932321310043, 0.08479725569486618, 0.09694888442754745, 0.09087307006120682], "val_loss": [1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [4, 2, 4, 8, 4, 3, 5, 4, 4, 5, 3, 1, 4, 6, 2, 2, 2, 4, 1, 6, 2, 2, 8, 3, 1, 3, 2, 2, 1, 2, 8, 9, 7, 2, 5, 1, 3, 0, 3, 8, 4, 7, 8, 5, 6, 8, 3, 0, 8], [0, 0, 2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 2, 3, 2, 1, 2, 0, 0, 2, 2, 3, 0, 1, 2, 2, 1, 1, 3, 1, 3, 3, 3, 1, 2], [12, 68, 7, 40, 35, 74, 22, 75, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 5, 2, 1, 7, 2, 3, 2, 8, 2], [3, 2, 3, 5, 4, 3, 5, 3], [78, 14, 47, 41, 87, 41, 18], [1, 0, 0, 1, 0], [0], [9, 7, 4], [4, 5, 2], [63], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [5, 6, 7, 2, 9, 6, 5, 1, 4, 0, 4, 4, 4, 6, 3, 0], [2, 0, 3, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 1], [31, 92, 31, 3, 74]], "fitness": -0.04114285856485367, "mapping_values": [1, 84, 84, 49, 35, 8, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 11, 7, 4, 2], "tree_depth": 91, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), alpha)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)), tf.math.add(alpha, alpha)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha)))))))), tf.math.negative(grad)), tf.math.multiply(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad))), grad)), grad)), tf.math.square(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha))))))))), tf.math.add(alpha, tf.math.sqrt(alpha))))), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), grad))), tf.math.sqrt(grad))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(sigma), sigma)))", "other_info": {"loss": [2.300912752410975, 2.3022673444000956, 2.3021141242640852, 2.3032193940628347, 2.3014871137584, 2.301896629836093], "accuracy": [0.0940430611371994, 0.08849557489156723, 0.08809932321310043, 0.08479725569486618, 0.09694888442754745, 0.09087307006120682], "val_loss": [1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598, 1.9706978797912598], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]