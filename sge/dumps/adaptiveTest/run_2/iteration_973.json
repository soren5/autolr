[{"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 1, 4, 2, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 5, 3, 3, 0, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.8437142968177795, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 6, 7, 2, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(grad, grad))), grad)))), grad)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0724272145697187, 1.8846762329438391, 1.573554338607113, 1.1211483708903018, 0.905640938601332, 0.8627833532792639, 0.7318654645388357, 0.6717909902094095, 0.6629941232483763, 0.6176298249981832, 0.5926410287693429, 0.5873691243833129, 0.5696704638175929, 0.5803719829763514, 0.5538549900149404, 0.5496091715506338, 0.4891638245486218, 0.4950958469823808, 0.48324549713816234, 0.48145757668116906, 0.46464199437882214, 0.45837970398609523, 0.4459501711361129, 0.4535298867586849, 0.4332677734770464, 0.4252795767333797, 0.3980564768359079, 0.41426647114889137, 0.3852206893199313, 0.4037639268432484], "accuracy": [0.29877161979675293, 0.3963809311389923, 0.4892352521419525, 0.6048077940940857, 0.654999315738678, 0.687887966632843, 0.7272487282752991, 0.7446836829185486, 0.748249888420105, 0.7613261342048645, 0.7734777331352234, 0.7802139520645142, 0.7824593782424927, 0.7873464822769165, 0.793950617313385, 0.7961959838867188, 0.8165367841720581, 0.8164047002792358, 0.8190463781356812, 0.8187822103500366, 0.8271034359931946, 0.8273676037788391, 0.8305375576019287, 0.8284242749214172, 0.8421608805656433, 0.8446704745292664, 0.8552370667457581, 0.8459912538528442, 0.8627657890319824, 0.852859616279602], "val_loss": [1.6322592667170934, 1.394965478352138, 0.9203945568629673, 0.8331514086042132, 0.7622592789786202, 0.6300299167633057, 0.5442376988274711, 0.5578724997384208, 0.5568162884031024, 0.46762401717049734, 0.5672676052365985, 0.45190316438674927, 0.44961728368486675, 0.4314425843102591, 0.5201479537146432, 0.4308095233780997, 0.4037033660071237, 0.39606901577540804, 0.4498973233359201, 0.4489763208798, 0.4238165616989136, 0.39472566332135883, 0.4034781200545175, 0.3644819940839495, 0.3613759194101606, 0.35808894463947843, 0.3587437527520316, 0.36118507385253906, 0.3534482206617083, 0.37874642440250944], "val_accuracy": [0.5509999990463257, 0.4560000002384186, 0.6156666874885559, 0.5923333168029785, 0.6486666798591614, 0.7039999961853027, 0.7509999871253967, 0.7450000047683716, 0.7416666746139526, 0.7906666398048401, 0.7493333220481873, 0.7973333597183228, 0.7956666946411133, 0.8056666851043701, 0.7603333592414856, 0.8036666512489319, 0.8190000057220459, 0.8240000009536743, 0.7906666398048401, 0.7950000166893005, 0.8090000152587891, 0.8256666660308838, 0.8190000057220459, 0.8460000157356262, 0.8489999771118164, 0.8486666679382324, 0.847000002861023, 0.8460000157356262, 0.8446666598320007, 0.8306666612625122]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 9, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 5, 3, 3, 0, 3, 1, 1, 3, 2], [78, 28, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.834857165813446, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.072536432763542, 1.902542583332432, 1.4907163101306382, 1.194677743118484, 0.93329967213754, 0.852046632196736, 0.7534079747177339, 0.7707323487156716, 0.6748787644060297, 0.632871817564684, 0.6140318722016996, 0.5911918659141555, 0.5703487246657848, 0.5684379129487888, 0.5647128788928283, 0.5730983610985191, 0.5151392156028193, 0.4986606511449644, 0.4802357855726148, 0.49376390489211186, 0.47027413544480384, 0.4561770215065661, 0.472953830959932, 0.4524808630038246, 0.42795494298389514, 0.43422436642136636, 0.41613994960566997, 0.4173335824557866, 0.3911819123691178, 0.40106035136606527, 0.4057742228849358, 0.3802418612123811, 0.3770700561104355, 0.3775681604830155, 0.3635612585092375, 0.36789421896420577], "accuracy": [0.29877161979675293, 0.3929467797279358, 0.5033681392669678, 0.5728437304496765, 0.6474705934524536, 0.6794346570968628, 0.7186633348464966, 0.7111346125602722, 0.7425703406333923, 0.757099449634552, 0.76106196641922, 0.7765156626701355, 0.7844406366348267, 0.7882710099220276, 0.7890635132789612, 0.7843085527420044, 0.8075551390647888, 0.8156121969223022, 0.8234050869941711, 0.8234050869941711, 0.8210275769233704, 0.8313300609588623, 0.8177255392074585, 0.8314621448516846, 0.8417646288871765, 0.8428213000297546, 0.8451988101005554, 0.8475762605667114, 0.8562937378883362, 0.8508783578872681, 0.8471800088882446, 0.8570862412452698, 0.8623695969581604, 0.8601241707801819, 0.8659358024597168, 0.8654074668884277], "val_loss": [1.6344313621520996, 1.3840583051953996, 0.8294919729232788, 0.7537747962134225, 0.7202846322740827, 0.5960734742028373, 0.5318115779331752, 0.5771261283329555, 0.5117721727916172, 0.5096375601632255, 0.5377653666904995, 0.4436650957380022, 0.43914989062717985, 0.4391956925392151, 0.5353561469486782, 0.4514916454042707, 0.4135705658367702, 0.3992356147084917, 0.4082485522542681, 0.3937844804355076, 0.4009189946310861, 0.40988770553043913, 0.3987558824675424, 0.3619595340320042, 0.38152566977909635, 0.36471148899623324, 0.38517444474356516, 0.3767256055559431, 0.35563715015138897, 0.38519976820264545, 0.34494621413094656, 0.3534373470715114, 0.35547239439828054, 0.349255417074476, 0.3957143340791975, 0.35132964168276104], "val_accuracy": [0.5496666431427002, 0.44966667890548706, 0.6269999742507935, 0.6666666865348816, 0.653333306312561, 0.7250000238418579, 0.7556666731834412, 0.7480000257492065, 0.765999972820282, 0.7649999856948853, 0.7549999952316284, 0.8033333420753479, 0.8046666383743286, 0.8026666641235352, 0.7506666779518127, 0.7996666431427002, 0.8143333196640015, 0.824999988079071, 0.8276666402816772, 0.8339999914169312, 0.8220000267028809, 0.8233333230018616, 0.8236666917800903, 0.847000002861023, 0.8373333215713501, 0.8413333296775818, 0.8309999704360962, 0.8316666483879089, 0.8500000238418579, 0.8233333230018616, 0.8576666712760925, 0.8483333587646484, 0.8529999852180481, 0.8513333201408386, 0.8199999928474426, 0.8519999980926514]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [5, 1, 4, 4, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 0, 5, 3, 3, 0, 3, 1, 1, 3, 2], [30, 30, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.8291428685188293, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 3, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.negative(grad))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.07238806445034, 1.8875475425793273, 1.573386030725563, 1.2351033573279118, 0.8970367355967683, 0.7939414505032091, 0.7155139858633567, 0.7040247593211334, 0.6426616791626403, 0.5990167184906424, 0.5917858632879014, 0.5859817682618179, 0.5530477815953858, 0.5790312368013856, 0.5253965238365341, 0.5347621703680087, 0.4836559166265532, 0.49611605515081364, 0.48292838187974124, 0.46110561969116176, 0.4627082558111854, 0.4583923187135879, 0.43526475568646533, 0.4309431188819179, 0.4113078508371092, 0.40558175313757744, 0.3919757363062808, 0.39030064015954696, 0.39638803545998197], "accuracy": [0.29863953590393066, 0.3961167633533478, 0.48791441321372986, 0.5774666666984558, 0.6701889038085938, 0.6984546184539795, 0.735041618347168, 0.7358341217041016, 0.7597411274909973, 0.7734777331352234, 0.7770439982414246, 0.7771760821342468, 0.7944789528846741, 0.7857614755630493, 0.8053097128868103, 0.8034605979919434, 0.8251221776008606, 0.8131026029586792, 0.8189142942428589, 0.834632158279419, 0.8248580098152161, 0.8285563588142395, 0.8387266993522644, 0.8396512866020203, 0.8507462739944458, 0.8533879518508911, 0.8602562546730042, 0.8584070801734924, 0.8558974862098694], "val_loss": [1.632613284247262, 1.3756400517054967, 0.8377698489597866, 0.7509726796831403, 0.5961803879056659, 0.5748964037214007, 0.5848758050373623, 0.5230493715831211, 0.5086107764925275, 0.4704994133540562, 0.5216872692108154, 0.45138587270464214, 0.44062178475516184, 0.4348294053758894, 0.4865812233516148, 0.4724816935403006, 0.39568925755364553, 0.3848082848957607, 0.40162173339298796, 0.42610487767628263, 0.4189772350447519, 0.3851733292852129, 0.3741053342819214, 0.3529168111937387, 0.36784876244408743, 0.35591302599225727, 0.37518065316336496, 0.375547536781856, 0.3625613621303013], "val_accuracy": [0.5513333082199097, 0.45633333921432495, 0.6046666502952576, 0.6639999747276306, 0.7293333411216736, 0.7406666874885559, 0.7223333120346069, 0.7596666812896729, 0.7630000114440918, 0.7879999876022339, 0.7580000162124634, 0.7986666560173035, 0.8046666383743286, 0.8053333163261414, 0.7749999761581421, 0.7960000038146973, 0.8286666870117188, 0.8356666564941406, 0.8273333311080933, 0.8056666851043701, 0.812333345413208, 0.8303333520889282, 0.8393333554267883, 0.8506666421890259, 0.8396666646003723, 0.8500000238418579, 0.8410000205039978, 0.8330000042915344, 0.8403333425521851]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [5, 1, 4, 2, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 5, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.8157142996788025, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))), grad)))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0723437640361815, 1.8636674818471752, 1.5379089862915187, 1.0877085395178003, 0.9152908321337662, 0.8493172066905448, 0.7594647987124123, 0.6902208360840285, 0.6522638958049346, 0.6243354779633832, 0.6176313877877243, 0.5782848496273949, 0.5653755921398597, 0.5643165760926125, 0.5526041117216445, 0.5511985449758834, 0.49433964416886583, 0.5085690364924562, 0.48299210495275513, 0.48399286581272966, 0.4644337054556072, 0.45035104503752516, 0.4631308302265573, 0.4485487421277555, 0.4234219641418442, 0.4347996118991067, 0.40834661586063253, 0.4020120863507626, 0.4007867789814863, 0.3924525379111124, 0.3910784389537796, 0.3760874571974692, 0.3724520657560404, 0.37011942389052005, 0.36484023023275197, 0.36435043481535934], "accuracy": [0.29903578758239746, 0.40483424067497253, 0.4966318905353546, 0.5868445634841919, 0.6573768258094788, 0.6790384650230408, 0.7238145470619202, 0.7400607466697693, 0.7540615797042847, 0.7574957013130188, 0.7637035846710205, 0.7814027070999146, 0.7898560166358948, 0.7890635132789612, 0.793422281742096, 0.7967243194580078, 0.8137630224227905, 0.8136309385299683, 0.8211596608161926, 0.8211596608161926, 0.8267071843147278, 0.8356888294219971, 0.8234050869941711, 0.8308017253875732, 0.8486329317092896, 0.8418967127799988, 0.8486329317092896, 0.8519350290298462, 0.8529917001724243, 0.8565579056739807, 0.8536521196365356, 0.8599920868873596, 0.8654074668884277, 0.8631620407104492, 0.8679170608520508, 0.8644828796386719], "val_loss": [1.6325340611594064, 1.378868852342878, 1.2420271464756556, 0.8027791976928711, 0.6558861051286969, 0.6022964545658657, 0.5673948526382446, 0.6125881331307548, 0.5484402860913958, 0.4761707271848406, 0.5378756182534354, 0.4571469170706613, 0.43614853279931204, 0.4480245964867728, 0.5274848086493356, 0.42463222571781706, 0.4205919163567679, 0.38973225014550344, 0.41835351501192364, 0.4201362558773586, 0.407086261681148, 0.44459391491753714, 0.38869279623031616, 0.36255793060575214, 0.3677095855985369, 0.36052883522851126, 0.3626653722354344, 0.3982235533850534, 0.34905167136873516, 0.37889585324696134, 0.3468917948859079, 0.3472059369087219, 0.35383072921207975, 0.3663971338953291, 0.39571642875671387, 0.3532261167253767], "val_accuracy": [0.5523333549499512, 0.4633333384990692, 0.38100001215934753, 0.640666663646698, 0.6840000152587891, 0.715666651725769, 0.734666645526886, 0.7110000252723694, 0.7490000128746033, 0.781333327293396, 0.7519999742507935, 0.7933333516120911, 0.8023333549499512, 0.79666668176651, 0.7436666488647461, 0.8046666383743286, 0.8009999990463257, 0.8293333053588867, 0.8106666803359985, 0.8130000233650208, 0.8166666626930237, 0.8133333325386047, 0.8303333520889282, 0.8433333039283752, 0.8410000205039978, 0.8420000076293945, 0.840666651725769, 0.8180000185966492, 0.8496666550636292, 0.8316666483879089, 0.8560000061988831, 0.8516666889190674, 0.8506666421890259, 0.8446666598320007, 0.8196666836738586, 0.8516666889190674]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [2, 1, 4, 2, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 3, 3, 5, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.8117142915725708, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), grad))), grad)))), tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0723292359649514, 1.8831353080176627, 1.4974109259704793, 1.1366729178622004, 0.8738267631216481, 0.816645858861263, 0.7690214131014175, 0.701811360298855, 0.6565502557173822, 0.6109357514181126, 0.6145028738518276, 0.5793127531719372, 0.5695171948311241, 0.5630824010070793, 0.5503160536580507, 0.5756272187149205, 0.5019650207282593, 0.5021909006858121, 0.4735227877422016, 0.49261263410066647, 0.46381151443144364, 0.449657899710512, 0.4610930271333534], "accuracy": [0.2989037036895752, 0.3980979919433594, 0.49451854825019836, 0.5855237245559692, 0.6767930388450623, 0.6897371411323547, 0.7131158113479614, 0.7310791015625, 0.7478536367416382, 0.7720248103141785, 0.7666094303131104, 0.7828556299209595, 0.7833839654922485, 0.7898560166358948, 0.7956677079200745, 0.7845727205276489, 0.8120459914207458, 0.8140271902084351, 0.8276317715644836, 0.8127063512802124, 0.8245938420295715, 0.8334434032440186, 0.8228767514228821], "val_loss": [1.6331803458077567, 1.385718243462699, 1.034726926258632, 0.8251760516847882, 0.701066255569458, 0.5991878509521484, 0.539479170526777, 0.5363488708223615, 0.5602332864488874, 0.5088586807250977, 0.5447591372898647, 0.48333431993212017, 0.452134302684239, 0.4999692610331944, 0.5339787176677159, 0.4512102093015398, 0.4062202402523586, 0.3931871312005179, 0.47101259231567383, 0.43053827966962543, 0.41952357973371235, 0.4101573995181492, 0.3961071286882673], "val_accuracy": [0.5509999990463257, 0.4490000009536743, 0.5056666731834412, 0.6629999876022339, 0.6816666722297668, 0.7183333039283752, 0.7459999918937683, 0.7593333125114441, 0.7453333139419556, 0.7673333287239075, 0.7603333592414856, 0.7710000276565552, 0.7973333597183228, 0.7639999985694885, 0.7456666827201843, 0.7943333387374878, 0.8169999718666077, 0.8303333520889282, 0.7753333449363708, 0.8146666884422302, 0.812666654586792, 0.8216666579246521, 0.8236666917800903]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [5, 1, 4, 2, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 5, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.8062857389450073, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))), grad)))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.07238937942123, 1.9006808549185408, 1.6553577857797865, 1.1365632336326421, 0.8639423947654868, 0.8006499227814907, 0.746203792928122, 0.6734344645293476, 0.6574346515102913, 0.6126520060167148, 0.5862253013776356, 0.5868791641261301, 0.5708013911997369, 0.5558053042438005, 0.5589460617027514, 0.5415616638986993, 0.48863477604012245, 0.48696624360001395, 0.484698451678546, 0.48330574946679994, 0.4622600191241919, 0.44280007359547274, 0.44722255520407456], "accuracy": [0.2989037036895752, 0.39162594079971313, 0.45766741037368774, 0.5889578461647034, 0.6790384650230408, 0.7033417224884033, 0.7148329019546509, 0.7416457533836365, 0.7494386434555054, 0.7684586048126221, 0.7749306559562683, 0.7779685854911804, 0.785101056098938, 0.7917051911354065, 0.7927618622779846, 0.802271842956543, 0.8195747137069702, 0.8210275769233704, 0.817989706993103, 0.8187822103500366, 0.8284242749214172, 0.8343679904937744, 0.8315942287445068], "val_loss": [1.630415609904698, 1.418706280844552, 1.0238432884216309, 0.6327220371791294, 0.721973351069859, 0.5943969147545951, 0.5265312535422189, 0.5064701352800641, 0.49308454990386963, 0.4798119068145752, 0.6029246534620013, 0.4697683709008353, 0.44003324849264963, 0.4426656791142055, 0.4949108191898891, 0.4234820944922311, 0.3968709877559117, 0.385358384677342, 0.41723633663994925, 0.4191034095627921, 0.4149696060589382, 0.3828235609190805, 0.4078340530395508], "val_accuracy": [0.5533333420753479, 0.4426666796207428, 0.5849999785423279, 0.7133333086967468, 0.6463333368301392, 0.7243333458900452, 0.75, 0.7730000019073486, 0.7793333530426025, 0.784333348274231, 0.7196666598320007, 0.7786666750907898, 0.8006666898727417, 0.8016666769981384, 0.7666666507720947, 0.8073333501815796, 0.8240000009536743, 0.8353333473205566, 0.8259999752044678, 0.8259999752044678, 0.8140000104904175, 0.8343333601951599, 0.8136666417121887]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 1, 4, 2, 0, 5, 3, 2, 5, 2, 2, 2, 6], [3, 1, 2, 5, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [16, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.595714271068573, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.square(beta)))))), grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3010688594870516, 2.298359150175468, 2.297501255634234, 2.293871646292095, 2.2924708112387404, 2.290199503434443, 2.2865569607267733, 2.2847573743315577, 2.2822784070624746, 2.2791921751074993, 2.2790045377647936, 2.2749739677961776, 2.2717783769454623, 2.2690749887336183, 2.265294009416394, 2.265550161758985, 2.2610189801020755, 2.260580287838121, 2.256305886045533, 2.254228616702385, 2.2525744674354105, 2.248387622039678, 2.248121025854838, 2.245699742435228, 2.24069346450717, 2.237959716361291, 2.235127117340638, 2.2300795561224005, 2.2304171253078886, 2.225820267724796, 2.221525080499081, 2.2181528279684035, 2.213805510902984, 2.211212975867688, 2.2067927899157223, 2.20392205453489, 2.2008323724227985, 2.1951015262618876, 2.1907200181583417, 2.18654042165104, 2.1801752042713702, 2.1771074684147096, 2.172120152967103, 2.1683322175650344, 2.163402446335679, 2.157707863889429, 2.155001476503492, 2.148945689626484, 2.1403301625345614, 2.13427704316813, 2.128896684757455, 2.122920230961967, 2.1167071454828252, 2.1105506861639722, 2.1045489740126073, 2.096814729282176, 2.08859963997118, 2.0866939434207206, 2.075374047234389, 2.0679280551007992, 2.0595722262413116, 2.052622225306305, 2.045453185150888, 2.038460698062875, 2.0284711977021885, 2.020744148199474, 2.0090694646982703, 1.9998191691597518, 1.991819861259254, 1.9800914666750618, 1.969737399460507, 1.9588315134208436, 1.9524050013043734, 1.9437701065526773, 1.9316214986087434, 1.917977597420289, 1.9074663697862355, 1.8972384138759795, 1.8868242227295844, 1.8770735099441294, 1.8673357710216685, 1.8483371809725244, 1.8441711163807382, 1.8284594200668618, 1.8188281575875465, 1.8057742836673452, 1.7939432784629583, 1.7783652276820228, 1.7722258566235507, 1.7548696661606409, 1.7452835770582935, 1.72744996723104, 1.7284233645362437, 1.7092298045528092, 1.6917655646226284, 1.6902176885871902, 1.6773561439840408, 1.6602536571055766, 1.652682090605475, 1.6384281293827199], "accuracy": [0.09879804402589798, 0.0944393053650856, 0.10355303436517715, 0.11240258812904358, 0.11306300014257431, 0.11636507511138916, 0.1298375427722931, 0.13432836532592773, 0.1394795924425125, 0.14872540533542633, 0.15281997621059418, 0.1644432693719864, 0.17012283205986023, 0.1798969805240631, 0.18412363529205322, 0.18782195448875427, 0.18953903019428253, 0.20116232335567474, 0.2078985571861267, 0.21899352967739105, 0.21978603303432465, 0.22533351182937622, 0.22454100847244263, 0.23273015022277832, 0.24778760969638824, 0.24897634983062744, 0.2538634240627289, 0.2712983787059784, 0.2616563141345978, 0.2674679756164551, 0.2716946303844452, 0.2875445783138275, 0.28543123602867126, 0.2845066785812378, 0.29679039120674133, 0.3004887104034424, 0.3011491298675537, 0.31105533242225647, 0.31145158410072327, 0.31660282611846924, 0.32267865538597107, 0.3307357132434845, 0.3327169418334961, 0.32941487431526184, 0.3439439833164215, 0.34222692251205444, 0.3385286033153534, 0.3479065001010895, 0.35886937379837036, 0.36322811245918274, 0.3657376766204834, 0.36322811245918274, 0.366530179977417, 0.3751155734062195, 0.3675868511199951, 0.3823801279067993, 0.3879276216030121, 0.3761722445487976, 0.3829084634780884, 0.39083343744277954, 0.39387133717536926, 0.39228636026382446, 0.39387133717536926, 0.39189010858535767, 0.40549466013908386, 0.4029850661754608, 0.40668338537216187, 0.4131554663181305, 0.4169858694076538, 0.4142121374607086, 0.42808082699775696, 0.4309866726398468, 0.42068418860435486, 0.4297979176044464, 0.43323206901550293, 0.43085458874702454, 0.43785497546195984, 0.450931191444397, 0.44089287519454956, 0.4434024691581726, 0.43825122714042664, 0.45330867171287537, 0.4451195299625397, 0.4507991075515747, 0.45344075560569763, 0.4600449204444885, 0.45872408151626587, 0.4663848876953125, 0.4636111557483673, 0.4699511229991913, 0.47166821360588074, 0.47430986166000366, 0.46427157521247864, 0.4760269522666931, 0.48606523871421814, 0.478140264749527, 0.4842160940170288, 0.4913485646247864, 0.4900277256965637, 0.4916127324104309], "val_loss": [1.9685095378330775, 1.9663409505571638, 1.964188575744629, 1.9620722361973353, 1.9599426133292062, 1.9577861513410295, 1.9556389536176408, 1.9534791537693568, 1.9513348851885115, 1.949160371507917, 1.9469948496137346, 1.944786548614502, 1.9425569943019323, 1.940303121294294, 1.938016482761928, 1.9357190132141113, 1.9333453178405762, 1.9309428078787667, 1.9285235404968262, 1.9260446003505163, 1.9235653196062361, 1.920978001185826, 1.9183820996965681, 1.915728977748326, 1.913005760737828, 1.9102403776986259, 1.9073685918535506, 1.9044220788138253, 1.90147522517613, 1.8984105246407645, 1.8952512059892928, 1.8920128004891532, 1.8886810030255998, 1.8852668489728654, 1.8817682266235352, 1.8781320708138602, 1.8744397844587053, 1.8706044469560896, 1.866645131792341, 1.862583773476737, 1.85832336970738, 1.8539886474609375, 1.8495026997157507, 1.8448919568743025, 1.8401609829493932, 1.8352981976100378, 1.8303403854370117, 1.825239862714495, 1.8199067115783691, 1.8144476754324776, 1.8088469505310059, 1.803093569619315, 1.7971458435058594, 1.7910117421831404, 1.7847612925938197, 1.7782960619245256, 1.7716501780918665, 1.7649310656956263, 1.7579197202410017, 1.7507438659667969, 1.7433839525495256, 1.735816478729248, 1.7281033652169364, 1.7202412060328893, 1.7121200902121407, 1.703829322542463, 1.69527234349932, 1.6865474496568953, 1.677661316735404, 1.6685279778071813, 1.659175089427403, 1.6495610305241175, 1.639866828918457, 1.6299138409750802, 1.6198433807918005, 1.60958651133946, 1.5991401331765311, 1.5885930061340332, 1.577770403453282, 1.5669377871922083, 1.5560458047049386, 1.5448260307312012, 1.5336849689483643, 1.5223990167890276, 1.5110079901559013, 1.4994267736162459, 1.4878033910478865, 1.4760447910853796, 1.464282512664795, 1.4524452345711845, 1.4406712055206299, 1.4287303856440954, 1.4169893945966447, 1.4050896848951067, 1.3930645670209612, 1.381275245121547, 1.3694932460784912, 1.3575870650155204, 1.3458171912602015, 1.3341025965554374], "val_accuracy": [0.04600000008940697, 0.06833333522081375, 0.08833333104848862, 0.10633333027362823, 0.125, 0.15066666901111603, 0.17466667294502258, 0.19733333587646484, 0.22066666185855865, 0.23800000548362732, 0.25433334708213806, 0.27166667580604553, 0.28999999165534973, 0.30433332920074463, 0.31833332777023315, 0.3283333480358124, 0.3346666693687439, 0.3463333249092102, 0.3540000021457672, 0.36133334040641785, 0.36533331871032715, 0.3709999918937683, 0.37566667795181274, 0.3813333213329315, 0.38466668128967285, 0.38733333349227905, 0.39133334159851074, 0.3933333456516266, 0.3986666798591614, 0.4013333320617676, 0.40700000524520874, 0.4113333225250244, 0.41866666078567505, 0.4216666519641876, 0.42633333802223206, 0.4300000071525574, 0.43299999833106995, 0.4363333284854889, 0.43933331966400146, 0.4416666626930237, 0.4440000057220459, 0.44733333587646484, 0.4503333270549774, 0.4516666531562805, 0.4533333480358124, 0.4573333263397217, 0.4620000123977661, 0.46433332562446594, 0.4690000116825104, 0.4726666808128357, 0.47566667199134827, 0.4793333411216736, 0.48500001430511475, 0.4886666536331177, 0.49133333563804626, 0.49300000071525574, 0.4946666657924652, 0.4959999918937683, 0.500333309173584, 0.5023333430290222, 0.5076666474342346, 0.5103333592414856, 0.5130000114440918, 0.5149999856948853, 0.5170000195503235, 0.5206666588783264, 0.5220000147819519, 0.5263333320617676, 0.5293333530426025, 0.531333327293396, 0.5336666703224182, 0.5376666784286499, 0.5403333306312561, 0.5413333177566528, 0.5426666736602783, 0.5440000295639038, 0.5453333258628845, 0.5456666946411133, 0.546999990940094, 0.5483333468437195, 0.5490000247955322, 0.5523333549499512, 0.5536666512489319, 0.5573333501815796, 0.5586666464805603, 0.5603333115577698, 0.5613333582878113, 0.5646666884422302, 0.5676666498184204, 0.5683333277702332, 0.5693333148956299, 0.5709999799728394, 0.5746666789054871, 0.5766666531562805, 0.5759999752044678, 0.5766666531562805, 0.5806666612625122, 0.581333339214325, 0.5836666822433472, 0.5836666822433472]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [5, 1, 2, 2, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [55, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.3880000114440918, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))), tf.math.multiply(grad, tf.math.add(beta, grad)))))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.596317217665231, 2.3053674883358135, 2.2991375754679733, 2.239921739623846, 2.3057487628179976, 2.303023167542022, 2.2828056856688725, 2.393507065128704, 2.3036851944971897, 2.3029057832205724, 2.3026363856253007, 2.2994617667920587], "accuracy": [0.18280279636383057, 0.10117553919553757, 0.11530841141939163, 0.1686699241399765, 0.09866596013307571, 0.09972262382507324, 0.14000792801380157, 0.14621582627296448, 0.10091137140989304, 0.09826971590518951, 0.09774138033390045, 0.12098798155784607], "val_loss": [1.9757188388279505, 1.9733935764857702, 1.93518100466047, 1.9785552706037248, 1.9743499074663435, 1.9725286620003837, 1.6915934085845947, 1.9750368254525321, 1.973841326577323, 1.9735757282802038, 1.97283935546875, 1.9566030502319336], "val_accuracy": [0.10199999809265137, 0.09700000286102295, 0.20533333718776703, 0.10199999809265137, 0.10199999809265137, 0.10133333504199982, 0.3709999918937683, 0.10233332961797714, 0.10233332961797714, 0.09700000286102295, 0.09700000286102295, 0.13333334028720856]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [5, 2, 4, 2, 1, 1, 3, 3, 5, 0, 2, 2, 6], [0, 3, 3, 5, 3, 3, 3, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [58, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.3822857141494751, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.subtract(tf.math.add(beta, grad), grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.5963487957982245, 2.305306658375107, 2.3020572417353313, 2.2981137721104914, 2.2776457510761627, 2.3040361131076814, 2.3031650835638584, 2.3029520681678752, 2.3003805223756446], "accuracy": [0.18280279636383057, 0.1022322028875351, 0.10091137140989304, 0.1620657742023468, 0.14621582627296448, 0.09470347315073013, 0.1022322028875351, 0.09681680053472519, 0.11015717685222626], "val_loss": [1.9755921363830566, 1.9732505253383092, 1.9653562818254744, 1.8228784969874792, 1.9755028997148787, 1.974012987954276, 1.9737540653773717, 1.9733762741088867, 1.9585326739719935], "val_accuracy": [0.10199999809265137, 0.10233332961797714, 0.19566667079925537, 0.3553333282470703, 0.0976666659116745, 0.10133333504199982, 0.0976666659116745, 0.09700000286102295, 0.22733333706855774]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 1, 0, 2, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 0, 5, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.27171429991722107, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.subtract(alpha, tf.math.multiply(tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), grad), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2321093941188335, 2.345776522652411, 1.7300160954798753, 1.638729417092607, 1.6221142738030145, 2.391039401438447, 2.564492408578359, 2.4203893200218434, 2.4827855243627437, 2.400039093888998], "accuracy": [0.272090882062912, 0.19614318013191223, 0.4278166592121124, 0.48210275173187256, 0.46664905548095703, 0.37683266401290894, 0.107647605240345, 0.09430722147226334, 0.09826971590518951, 0.10289261490106583], "val_loss": [1.735421930040632, 1.5082152911594935, 1.2540905475616455, 1.1448102678571428, 1.6640922342027937, 2.3459481511797224, 2.022958891732352, 2.13963052204677, 2.0377584184919084, 2.103985105242048], "val_accuracy": [0.2809999883174896, 0.43433332443237305, 0.5683333277702332, 0.5133333206176758, 0.6026666760444641, 0.10133333504199982, 0.1003333330154419, 0.09833333641290665, 0.0976666659116745, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 4, 2, 1, 5, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 5, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [90, 85, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.18714286386966705, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.599583122818745, 2.3055724020977975, 2.3014582250537403, 3.5352056675173933, 2.3090107261764534, 2.2908017147549424, 2.6452136847163867, 2.304331138354125, 2.303476066479767, 2.3032613372160315, 2.3025912748210073], "accuracy": [0.18240654468536377, 0.10210011899471283, 0.11411966383457184, 0.177255317568779, 0.10421344637870789, 0.1702549159526825, 0.15757495164871216, 0.09694888442754745, 0.09972262382507324, 0.1006472036242485, 0.09655263274908066], "val_loss": [1.9774723734174455, 1.9733952794756209, 1.962519918169294, 1.9835915565490723, 1.9748734065464564, 1.8653812408447266, 1.9748858043125697, 1.9740618297031947, 1.973736149924142, 1.973545687539237, 1.9724467141287667], "val_accuracy": [0.10199999809265137, 0.10233332961797714, 0.1850000023841858, 0.09700000286102295, 0.12033333629369736, 0.3696666657924652, 0.10233332961797714, 0.10233332961797714, 0.09700000286102295, 0.09700000286102295, 0.15666666626930237]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [5, 1, 4, 2, 1, 5, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 0, 3, 3, 3, 2, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [3, 87, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.121714286506176, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.601181499804677, 2.3052493249263115, 2.302547877821483, 2.279884180797798, 2.5866336884232184, 2.293878940716553, 2.26914426487167, 2.2153131345857986, 2.3052029091337842, 2.303244230596381, 2.3029653002573056], "accuracy": [0.18214239180088043, 0.09879804402589798, 0.10527011007070541, 0.1402720957994461, 0.1620657742023468, 0.148064985871315, 0.13829085230827332, 0.19178444147109985, 0.09774138033390045, 0.0948355570435524, 0.09457138925790787], "val_loss": [1.9764462198529924, 1.9732014792306083, 1.970862661089216, 1.6276306084224157, 1.9747790609087263, 1.8984827314104353, 1.8752598762512207, 1.9771337509155273, 1.9743048122950964, 1.973757539476667, 1.9737309728349959], "val_accuracy": [0.10199999809265137, 0.10233332961797714, 0.10499999672174454, 0.24966666102409363, 0.19233334064483643, 0.2606666684150696, 0.18566666543483734, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 1, 6, 2, 9, 3, 3, 2, 5, 0, 2, 2, 6], [0, 3, 3, 5, 3, 3, 0, 3, 1, 1, 3, 2], [16, 75, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 11, 11, 6, 5, 2, 1, 0, 0, 0, 0, 8, 5, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(grad, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 1, 4, 2, 1, 3, 9, 3, 3, 0, 2, 2, 6], [0, 1, 3, 5, 3, 3, 3, 2, 1, 1, 3, 2], [78, 53, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 6, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 2, 1, 0, 0, 0, 0, 10, 6, 4, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad))), grad)))), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, grad), beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(sigma, tf.math.square(tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), beta))), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302072678007832, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 4, 2, 1, 3, 1, 3, 5, 2, 2, 2, 6], [2, 3, 3, 5, 3, 3, 3, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [63, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 18, 18, 9, 9, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.multiply(grad, tf.math.add(beta, grad)), grad))), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))), alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 1, 0, 5, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 5, 1, 3, 0, 3, 1, 1, 3, 2], [10, 75, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [5, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 8, 5, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), alpha), tf.math.square(tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [2, 4, 3, 5, 2, 7, 8, 3, 5, 0, 2, 2, 6], [0, 1, 3, 5, 3, 3, 2, 3, 1, 1, 3, 2], [7, 14, 47, 41, 87, 41, 18], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 4, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [3, 18, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 8, 4, 4, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(alpha, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, grad))))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(beta), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [5, 1, 4, 2, 1, 3, 3, 3, 5, 0, 2, 2, 6], [0, 1, 3, 2, 2, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [8, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [50, 41, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(grad, tf.math.add(beta, tf.math.subtract(beta, tf.math.multiply(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [5, 1, 4, 2, 1, 3, 3, 3, 8, 0, 2, 2, 6, 2, 2, 6, 8, 6, 4, 5, 8, 4, 2, 1, 7, 8, 0, 1, 0, 3, 1, 3, 6, 7, 6, 7, 8, 1, 4, 9, 4, 5, 1, 2, 2, 1, 3, 8, 7, 8, 8, 2, 0, 7, 9, 0, 5, 8, 6, 4, 0, 1, 0, 6, 1, 8, 8, 4, 1, 5], [0, 1, 3, 5, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 4, 2, 1, 1, 5, 3, 1, 1, 5, 1, 5, 3, 0, 3, 4, 4, 3, 3, 2, 0, 0, 5, 2, 1, 5, 5, 5, 0, 5, 3], [78, 14, 47, 41, 87, 41, 18], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [63, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 114, 114, 70, 44, 7, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 109, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(alpha, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)), grad)), tf.math.add(alpha, tf.math.add(beta, alpha))))))))), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.pow(alpha, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(grad)))))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad)))))))), tf.math.add(beta, grad)))), grad))))))), tf.math.negative(tf.math.square(tf.math.sqrt(beta)))))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))))))))))), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(grad, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))))), tf.math.subtract(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [9, 1, 4, 2, 1, 3, 3, 8, 5, 0, 2, 2, 6], [2, 1, 3, 5, 3, 3, 0, 3, 1, 1, 3, 2], [78, 14, 47, 41, 87, 41, 18], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [3, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 5, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [55, 67, 31, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3031518869963086, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}]