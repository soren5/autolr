[{"genotype": [[0], [1, 0], [1, 1], [4, 0, 7, 2, 7, 8, 4, 7, 8, 5, 3, 3, 1, 7, 2, 3, 7, 6, 0, 8, 9, 1, 3, 1, 6, 0], [0, 2, 2, 3, 0, 3, 1, 0, 2, 1, 2, 3, 2, 2, 0, 2, 3, 3], [52], [1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1], [3, 7, 9, 8, 5, 5], [2, 1, 1, 5, 4, 5, 3, 3, 0, 0, 1, 5, 5, 0], [35, 14], [0, 0, 1], [0, 0], [8, 9], [1], [63], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [5, 4, 3, 3, 4, 8, 5], [1, 0, 0, 2, 3], [61, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 2, 2, 2, 0, 1, 8, 4, 4, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.pow(tf.math.multiply(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [2.302581836392835, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0], [1, 1, 1], [0, 2, 9], [2, 3], [64], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 1], [2, 4], [0, 2, 0, 5], [86, 14], [0, 0, 1], [0, 1], [2, 8], [1], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [9], [1, 0, 2, 1, 2], [12, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 3, 2, 1, 1, 0, 1, 1, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025329308250972, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0], [0, 1], [0], [2], [], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [8, 4, 4, 4, 4, 7, 0, 5, 3, 8, 0, 6, 7, 2, 3, 8, 4, 5], [0, 2, 3, 5, 5, 2, 1, 2, 2, 0, 4, 5], [86, 14], [1], [], [], [1], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [8, 6, 4, 2, 6, 3, 2, 2, 4, 8, 2, 8, 6, 3], [2, 0, 2, 1, 3, 1, 1, 0, 3, 3, 3, 0], [41, 16, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 30, 30, 18, 12, 2, 1, 0, 0, 0, 0, 26, 14, 12, 3], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), beta)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), beta), alpha)), tf.math.multiply(tf.math.add(tf.math.add(sigma, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), sigma)), tf.math.multiply(sigma, sigma)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [7, 4, 2, 7, 1, 3, 7, 1, 1, 4, 2, 5, 0, 6, 7, 3, 7], [1, 1, 3, 1, 2, 0, 1, 0, 2, 3, 2, 3, 3, 1, 3, 0], [56, 43, 29, 69, 15, 91, 56, 94, 19, 57], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [8, 1, 4, 4, 3, 8, 2], [2, 2, 1, 5, 3, 0, 4, 4], [86, 14, 25, 47, 67, 74], [0, 0, 0, 1], [1], [3], [1], [], [1, 1, 0], [9, 4, 3, 2, 4, 9, 5], [3, 0, 2, 1, 2], [41]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 16, 15, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.multiply(grad, alpha)))), grad))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1], [7, 1, 3, 0], [0, 2, 2, 0], [64, 35], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1], [2, 4, 3], [0, 2, 1, 5, 3, 0, 4, 4], [86, 14], [1, 0, 0, 1], [1], [3], [1], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [5, 4, 3, 2, 4, 9, 5], [1, 0, 2, 1, 2], [12, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 10, 6, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(beta, alpha)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1], [0, 1, 1, 0], [0, 2, 9], [2, 3], [31], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [2, 3, 3, 8, 5], [0, 2, 1, 5], [86, 14], [0, 0, 0], [0, 1, 1], [2, 8], [1, 6], [], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [9], [2, 0, 2, 1, 2, 2, 1, 1], [12]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 1, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), tf.math.square(tf.math.add(beta, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0738343670964241, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0], [1, 1], [4, 0, 7, 2, 7, 8, 4, 7, 8, 5, 3, 3, 1, 7, 2, 3, 7, 6, 0, 8, 9, 1, 3, 1, 6, 0], [0, 2, 2, 3, 0, 3, 1, 0, 2, 1, 2, 3, 2, 2, 0, 2, 3, 3], [52], [1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1], [0, 7, 9, 8, 5, 5], [2, 1, 1, 5, 4, 5, 3, 3, 0, 0, 1, 5, 5, 0], [35, 14], [0, 0, 1], [0, 0], [8, 9], [1], [28], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [5, 4, 3, 3, 4, 8, 5], [1, 0, 0, 2, 3], [79, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.302581836392835, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1, 1], [0, 8], [2, 3], [], [0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1], [2, 4, 6], [3, 2, 1, 5], [86, 14], [0, 1, 0], [0, 1], [3], [4, 2], [], [1, 0, 0], [1, 6, 6, 3, 5, 3, 6, 2, 4, 8, 0, 8], [1, 0, 2, 1, 2], [12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 7, 7, 3, 4, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.divide_no_nan(beta, tf.math.add(beta, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 1, 8], [1, 3, 0, 3], [31], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 1], [2, 4], [3, 3, 1, 5, 3, 0, 4, 4], [86, 14], [0, 0, 0, 1], [1], [3], [1], [], [0, 1, 0], [5, 4, 3, 2, 4, 9, 5], [1, 0, 0, 2, 3], [12]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), grad)), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 1, 1, 8], [2, 3, 0, 0], [97, 44], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 0, 1], [2, 4], [0, 2, 0, 5], [86, 14], [0, 0, 0, 1], [1], [3], [1, 6], [], [0, 1, 0], [5, 4, 3, 2, 4, 9, 5], [1, 0, 0, 2, 3], [12]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [439243.9693494164, 1937085260816521.0, 8.047867952856855e+24, 3.630251932456832e+34, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [73371449.14285715, 3.1528545011817325e+17, 1.3541406971621934e+27, Infinity, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0], [1, 1], [0], [2, 3], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [2, 4, 8, 9, 5], [3, 2, 1, 5, 0, 2, 1, 3, 5, 0, 4, 0, 0, 3, 1, 3, 4], [35, 14, 47, 41, 87, 41, 18], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1], [3, 4, 3, 8, 7, 0], [1], [], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 4, 3, 3, 7, 1, 5], [2, 3, 2, 1, 2, 2], [76, 27, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 1, 11, 7, 6, 1, 0, 12, 6, 6, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad), tf.math.square(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.sqrt(sigma)), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), sigma)))), sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.pow(tf.math.multiply(tf.math.multiply(beta, sigma), tf.math.add(beta, alpha)), tf.math.subtract(beta, beta)))", "other_info": {"loss": [2.302581836392835, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0], [0, 1, 1], [4], [0, 0], [64, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [2, 4], [3, 2, 1, 5, 3, 0, 4, 4], [86, 14], [1, 0, 0, 1], [1], [3], [1], [], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [5, 0, 3, 2, 4, 8, 5], [1, 0, 2, 1, 2], [12, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0], [1, 1], [4, 0, 7, 2, 7, 8, 4, 7, 8, 5, 3, 3, 1, 7, 2, 3, 7, 6, 0, 8, 9, 1, 3, 1, 6, 0], [2, 3], [], [0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1], [2, 4], [2, 1, 1, 5, 4, 5, 3, 3, 0, 0, 1, 5, 5, 0], [35, 14], [0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1], [3, 3, 3, 3], [1], [63], [1, 0, 0, 0, 1, 0, 1, 1, 1], [5, 4, 3, 3, 4, 8, 5], [1, 0, 0, 2, 3], [61, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 9, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), sigma)))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07779685407876968, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0], [1, 1], [0], [2, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1], [2, 3, 9], [3, 2, 1, 5], [86, 14], [1], [0, 0, 0], [1], [1], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 6, 6, 1, 5, 3, 6, 2, 4, 2, 0, 8], [1, 0, 0, 3, 2, 2, 1, 2, 2], [53, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 16, 8, 8, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma))), tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(beta, alpha)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12098798155784607, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0], [0, 1, 0, 1], [4, 0, 7, 2, 7, 8, 4, 7, 8, 5, 3, 3, 1, 7, 2, 3, 7, 6, 0, 8, 9, 1, 3, 1, 6, 0], [2, 3], [52], [0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1], [8, 1, 4, 9, 3, 8, 2], [4, 0, 1, 5], [35, 14], [1, 0, 1, 0, 0], [0, 1, 1, 1], [3, 3], [1, 0], [63], [0, 1, 1], [2, 2, 5, 6, 7, 8], [1, 0, 0, 2, 3], [61, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0], [1, 1], [4], [2, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1], [2, 4, 0], [0, 2, 1, 5, 3, 0, 4, 4], [86, 14], [1], [1], [3], [1], [], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 4, 3, 2, 4, 9, 5], [1, 0, 2, 1, 2, 2], [12, 92]], "fitness": -0.09028571099042892, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(beta)))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.3002188029999053, 2.300808869710672, 2.302128424718159, 2.3025697171333808, 2.302950085996558, 2.3043990524421987, 2.319774317530404, 2.5676863842227156], "accuracy": [0.10038304328918457, 0.09496764093637466, 0.08955223858356476, 0.10791176557540894, 0.09840179979801178, 0.09853387624025345, 0.09972262382507324, 0.09998679161071777], "val_loss": [1.9693620545523507, 1.9730048179626465, 1.973621436527797, 1.974020004272461, 1.9747926167079382, 1.9787300654820033, 2.0300590651375905, 2.7523975372314453], "val_accuracy": [0.11699999868869781, 0.10000000149011612, 0.11999999731779099, 0.11233333498239517, 0.09733333438634872, 0.09733333438634872, 0.10366666316986084, 0.09833333641290665]}}, {"genotype": [[0], [0, 0], [0, 1], [0], [2], [], [0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1], [2, 4], [0, 2, 1, 5], [86, 14], [1], [], [6], [1], [], [1, 0, 0], [5, 4, 3, 2, 4, 9, 5], [1, 0, 2, 1, 2, 2, 1, 1], [41]], "fitness": -0.06057142838835716, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.325395367731586, 3.110327099009181, 19.99732965334075, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.16497160494327545, 0.14080041646957397, 0.11940298229455948, 0.10619468986988068, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.072528294154576, 2.141810280936105, 455.2382114955357, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09533333033323288, 0.14633333683013916, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0], [1, 1, 1], [0], [2, 2], [15], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [2, 6, 3, 8, 3], [0, 2, 1, 5, 1], [86, 14], [1, 0, 0, 1], [0, 1], [], [1], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 5, 3, 7, 4, 8, 5], [1, 0, 2, 0, 2, 3], [4, 27, 12]], "fitness": -0.0357142873108387, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.multiply(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3024939316107282, 2.3030518086012313, 2.3027855288697396, 2.3020861856752557, 2.3024450033694492, 2.301765313694553], "accuracy": [0.09206181764602661, 0.08691058307886124, 0.08875974267721176, 0.08942015469074249, 0.08994849026203156, 0.09126931428909302], "val_loss": [1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717], "val_accuracy": [0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236]}}, {"genotype": [[0], [1, 0], [0, 1], [0, 7], [1, 1], [], [0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1], [2, 4], [0, 2, 1, 5], [86, 14], [1, 0, 0, 1], [0, 0, 0], [1], [4, 2], [], [1, 0, 0], [1, 6, 6, 3, 5, 3, 6, 2, 4, 8, 0, 8], [1, 0, 2, 1, 2], [12]], "fitness": -0.0357142873108387, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3024939316107282, 2.3030518086012313, 2.3027855288697396, 2.3020861856752557, 2.302444971878421, 2.301765313694553], "accuracy": [0.09206181764602661, 0.08691058307886124, 0.08875974267721176, 0.08942015469074249, 0.08994849026203156, 0.09126931428909302], "val_loss": [1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717], "val_accuracy": [0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236]}}, {"genotype": [[0], [1, 0], [1, 1], [0], [2, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [2, 4], [2, 2, 1, 5, 3, 0, 4, 4], [86, 14], [1], [0, 0, 1], [3], [1], [], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [5, 3, 3, 2, 4, 9, 9, 0, 7], [1, 0, 2, 1, 2, 3], [12, 2]], "fitness": -0.0357142873108387, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024939316107282, 2.3030518086012313, 2.3027854479063046, 2.3020860282201117, 2.3024445850426227, 2.301764454493323], "accuracy": [0.09206181764602661, 0.08691058307886124, 0.08875974267721176, 0.08942015469074249, 0.08994849026203156, 0.09126931428909302], "val_loss": [1.971381732395717, 1.971381664276123, 1.971381596156529, 1.971381391797747, 1.9713811874389648, 1.9713807787214006], "val_accuracy": [0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236]}}]