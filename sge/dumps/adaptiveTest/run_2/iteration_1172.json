[{"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 5, 6, 0, 4, 4, 6, 5, 4, 2, 9, 3, 6, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 3, 3, 3, 0, 0, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 14, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 8, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.8157142996788025, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 2, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.154488903829655, 1.98945330767316, 1.733774123867631, 1.4806958736445626, 0.9658345682604312, 0.8836103690031135, 0.7347943270211175, 0.7263862002621773, 0.6799077613163839, 0.6660524335960591, 0.6242530309465882, 0.6247072573177976, 0.5911342472511119, 0.5737931281662794, 0.5891271891091336, 0.5648310418220921, 0.5401254210017377, 0.5224395390861243, 0.5099805281571961, 0.5104508876186462, 0.5140496345007849, 0.47956085981331986, 0.4834398942388296, 0.4575274577899427, 0.4629282617943713, 0.471539011980643, 0.449854985641183, 0.432441370645613, 0.44100042049832205, 0.42018457616576904, 0.4060708206359028, 0.41452812243525095, 0.4085708546396008, 0.42710844427445593, 0.4054856691708764, 0.3983113488516772, 0.3889108109215956, 0.3974082753871174, 0.373168309390537, 0.36121081817797257, 0.37522860474637504, 0.3591704113395884, 0.3688588458722404, 0.36297997372922897, 0.3495415869626418], "accuracy": [0.2981112003326416, 0.3745872378349304, 0.43547746539115906, 0.48712190985679626, 0.644300639629364, 0.6700568199157715, 0.7186633348464966, 0.7230220437049866, 0.7380794882774353, 0.7495707273483276, 0.7648923397064209, 0.7613261342048645, 0.7757231593132019, 0.7808743715286255, 0.7757231593132019, 0.783119797706604, 0.7928939461708069, 0.8033285140991211, 0.8076872229576111, 0.8079513907432556, 0.8049134612083435, 0.8191784620285034, 0.8157442808151245, 0.8211596608161926, 0.8276317715644836, 0.8198388814926147, 0.8285563588142395, 0.8347642421722412, 0.8302733898162842, 0.8412362933158875, 0.8411042094230652, 0.8424250483512878, 0.8409721255302429, 0.8335754871368408, 0.8412362933158875, 0.8495575189590454, 0.8473120927810669, 0.8469158411026001, 0.8580108284950256, 0.863558292388916, 0.8561616539955139, 0.8605204224586487, 0.8627657890319824, 0.8628978729248047, 0.8663320541381836], "val_loss": [1.6656429086412703, 0.9291884558541434, 1.4730377878461565, 0.9395982537950788, 0.712792090007237, 0.5350414514541626, 0.556719252041408, 0.49808565207890104, 0.4957392726625715, 0.4846198558807373, 0.49722119740077425, 0.5396155800138202, 0.4678491864885603, 0.4301360249519348, 0.4114477549280439, 0.46937879494258333, 0.4249423827443804, 0.42221081256866455, 0.39927059412002563, 0.39933990580695017, 0.3796799864087786, 0.3979143926075527, 0.3719899909836905, 0.3661152720451355, 0.4465121030807495, 0.39122953585215975, 0.37127179758889334, 0.4153985551425389, 0.3745451143809727, 0.3573761412075588, 0.3512835758072989, 0.3659125396183559, 0.3498328072684152, 0.3505122831889561, 0.3552452155521938, 0.34446305888039724, 0.3423393028123038, 0.3506428599357605, 0.329816997051239, 0.33251666171210154, 0.34190123421805246, 0.387633740901947, 0.3479897805622646, 0.3312020642416818, 0.3293659601892744], "val_accuracy": [0.44600000977516174, 0.6153333187103271, 0.4533333480358124, 0.5463333129882812, 0.6846666932106018, 0.7636666893959045, 0.7463333606719971, 0.7586666941642761, 0.7633333206176758, 0.7903333306312561, 0.7673333287239075, 0.7443333268165588, 0.7796666622161865, 0.8116666674613953, 0.8226666450500488, 0.7866666913032532, 0.8116666674613953, 0.8083333373069763, 0.8296666741371155, 0.8320000171661377, 0.8286666870117188, 0.824999988079071, 0.8386666774749756, 0.8386666774749756, 0.7990000247955322, 0.8203333616256714, 0.843666672706604, 0.8076666593551636, 0.8213333487510681, 0.846666693687439, 0.8426666855812073, 0.8379999995231628, 0.8500000238418579, 0.847000002861023, 0.8463333249092102, 0.8479999899864197, 0.8506666421890259, 0.843999981880188, 0.8560000061988831, 0.8576666712760925, 0.8519999980926514, 0.82833331823349, 0.8489999771118164, 0.8513333201408386, 0.8533333539962769]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [37, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7979999780654907, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, beta)))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.234628143028387, 1.9055433473598373, 1.4268734078003573, 1.147359546858007, 1.0066076107249362, 0.9240344394514542, 0.8709689625470614, 0.827246527850683, 0.8209603141170089, 0.7685465583900781, 0.7497809994584455, 0.7387937324992764, 0.734876183691341, 0.7083178045113231, 0.706719028534056, 0.7020622993331181, 0.6824445679691317, 0.6720759563788667, 0.6637174900906071, 0.6727956049336167, 0.6432625223475205, 0.6356435564640979, 0.6325384292305264, 0.6455994850026303, 0.6320526695065668, 0.625956602375883, 0.6267497385056767], "accuracy": [0.23986263573169708, 0.43059042096138, 0.5337471961975098, 0.6000528335571289, 0.648659348487854, 0.6767930388450623, 0.6915863156318665, 0.7058512568473816, 0.7025492191314697, 0.7238145470619202, 0.7349095344543457, 0.735569953918457, 0.733060359954834, 0.7383436560630798, 0.7427024245262146, 0.7415136694908142, 0.7547219395637512, 0.7544577717781067, 0.7581561207771301, 0.7506273984909058, 0.76542067527771, 0.7701756954193115, 0.7714964747428894, 0.7677981853485107, 0.7696473598480225, 0.7755910754203796, 0.7730814814567566], "val_loss": [1.7754255022321428, 1.290680272238595, 0.8963954108101981, 0.7470923491886684, 0.6617803233010429, 0.6144985982349941, 0.5869638408933368, 0.5966510432107108, 0.5556267499923706, 0.5376811879021781, 0.5273172514779227, 0.5210997377123151, 0.5090733255658831, 0.5113524879728045, 0.5115112066268921, 0.5008062294551304, 0.47306316239493235, 0.47832729135240826, 0.4910408428737095, 0.45919620990753174, 0.4587428058896746, 0.4537903070449829, 0.46942148889814106, 0.4758367197854178, 0.4506580999919346, 0.46502956322261263, 0.44507832186562674], "val_accuracy": [0.49399998784065247, 0.5989999771118164, 0.6846666932106018, 0.6993333101272583, 0.731333315372467, 0.7476666569709778, 0.7490000128746033, 0.7513333559036255, 0.7683333158493042, 0.7599999904632568, 0.7739999890327454, 0.7723333239555359, 0.7793333530426025, 0.7763333320617676, 0.7879999876022339, 0.7736666798591614, 0.7926666736602783, 0.7960000038146973, 0.7866666913032532, 0.8043333292007446, 0.7946666479110718, 0.8086666464805603, 0.7990000247955322, 0.7863333225250244, 0.8050000071525574, 0.7953333258628845, 0.8076666593551636]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 2, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [37, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7871428728103638, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 10, 9, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, beta), grad), tf.math.add(beta, grad))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2318130269766705, 1.8091410526966674, 1.275336682032821, 1.0737894738843146, 0.9587301586864961, 0.8993927105905011, 0.8660778702368211, 0.8236418343679922, 0.8034131094496468, 0.747751460799987, 0.7451656796456391, 0.7224547141389667, 0.7190154836619015, 0.7121960474924877, 0.6902723298364422, 0.6788245557778232, 0.6648072625872419, 0.6500499506258709, 0.6478422874504345, 0.6414849516926913, 0.6523557527977573, 0.6357407750801214], "accuracy": [0.23352265357971191, 0.4531765878200531, 0.564258337020874, 0.6159027814865112, 0.6627922058105469, 0.6761326193809509, 0.6901333928108215, 0.6944921612739563, 0.7055870890617371, 0.7279091477394104, 0.7298903465270996, 0.7403249144554138, 0.7323999404907227, 0.7354378700256348, 0.7386078238487244, 0.746268630027771, 0.7510236501693726, 0.7622507214546204, 0.7594769597053528, 0.7611940503120422, 0.7598732113838196, 0.7629110813140869], "val_loss": [1.7491911479404993, 1.092602014541626, 0.8242758512496948, 0.7145336866378784, 0.6363659926823207, 0.619556086403983, 0.583245975630624, 0.5717465026038033, 0.5462843179702759, 0.531656129019601, 0.5319432190486363, 0.5132512705666679, 0.5290604829788208, 0.5081884350095477, 0.5107479436056954, 0.49260481766292025, 0.4742788587297712, 0.48400068283081055, 0.467046890939985, 0.4698368651526315, 0.4738497223172869, 0.45405852794647217], "val_accuracy": [0.5456666946411133, 0.6493333578109741, 0.6566666960716248, 0.7246666550636292, 0.7356666922569275, 0.7393333315849304, 0.7549999952316284, 0.7390000224113464, 0.765333354473114, 0.7676666378974915, 0.765666663646698, 0.7639999985694885, 0.7616666555404663, 0.7680000066757202, 0.7543333172798157, 0.7860000133514404, 0.8009999990463257, 0.7870000004768372, 0.7950000166893005, 0.7923333048820496, 0.7866666913032532, 0.7976666688919067]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 4, 2, 0, 2, 2, 3, 5, 2, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 0, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [44, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7854285836219788, "mapping_values": [1, 3, 3, 1, 2, 0, 28, 28, 15, 13, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(beta, grad))))), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1176323247009408, 2.008686757689186, 1.8054574607086535, 1.6638097489876849, 1.1123815744056393, 0.9315776534446432, 0.8395997721678734, 0.7126865660856113, 0.7348125340396607, 0.6898597211192832, 0.6512986988974695, 0.6531373031733609, 0.6319772456819985, 0.6163996045757294, 0.5917607440121532, 0.6110803588443444, 0.5535719408146252, 0.6182374401162439], "accuracy": [0.28305375576019287, 0.2867520749568939, 0.43283581733703613, 0.45727115869522095, 0.6168273687362671, 0.6585655808448792, 0.6934354901313782, 0.7325320243835449, 0.7288337349891663, 0.743891179561615, 0.7541936039924622, 0.757099449634552, 0.7670056819915771, 0.7730814814567566, 0.7820631265640259, 0.7795535326004028, 0.8030643463134766, 0.7668735980987549], "val_loss": [1.5914839676448278, 1.7176201684134347, 1.6438478061131068, 1.0772583825247628, 0.8178426367895943, 0.590653555733817, 0.5359644378934588, 0.6318227222987584, 0.5188557079860142, 0.5030588252203805, 0.4829526458467756, 0.44704198837280273, 0.44370208467756, 0.5319022791726249, 0.4236537218093872, 0.5265592847551618, 0.562515412058149, 0.4487260069165911], "val_accuracy": [0.29600000381469727, 0.3736666738986969, 0.42500001192092896, 0.6603333353996277, 0.6416666507720947, 0.7303333282470703, 0.7670000195503235, 0.7096666693687439, 0.7636666893959045, 0.778333306312561, 0.7643333077430725, 0.7979999780654907, 0.8163333535194397, 0.7599999904632568, 0.812333345413208, 0.7910000085830688, 0.7666666507720947, 0.812666654586792]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 9, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 0, 3, 1, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [37, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7837142944335938, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), alpha), grad)), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.231816961749229, 1.8091578689060506, 1.2753346682445106, 1.074169924002219, 0.9595172064588716, 0.8926030238621648, 0.8683187709177773, 0.8239445853006602, 0.8041783896545613, 0.7481680995973031, 0.7446751114383995, 0.7219807477108224, 0.7175982376178494, 0.7135225183314116, 0.6905688962380899, 0.6779279197369269, 0.6637431696468671, 0.6558561804681611, 0.647711772125757, 0.6386778095473609, 0.6492389647747469, 0.6365550392654358, 0.6213516316488198, 0.624664784391023], "accuracy": [0.23352265357971191, 0.4527803361415863, 0.5638620853424072, 0.6168273687362671, 0.6609430909156799, 0.6783780455589294, 0.6889446377754211, 0.6959450244903564, 0.7047945857048035, 0.726192057132721, 0.7279091477394104, 0.7384757399559021, 0.7337207794189453, 0.7346453666687012, 0.7387399077415466, 0.7465327978134155, 0.7534011602401733, 0.759609043598175, 0.7574957013130188, 0.7625148296356201, 0.7611940503120422, 0.7623828053474426, 0.7740060687065125, 0.7627789974212646], "val_loss": [1.7491794313703264, 1.0926856994628906, 0.823854752949306, 0.7166781766074044, 0.6363083464758736, 0.6125441449029105, 0.5838721990585327, 0.5762673786708287, 0.5479028735842023, 0.5297989334378924, 0.5324185235159737, 0.5144950492041451, 0.5258212430136544, 0.5083117314747402, 0.5133280754089355, 0.4910764694213867, 0.4718997137887137, 0.4891632284436907, 0.4620717593601772, 0.4704210247312273, 0.4749191999435425, 0.45325543199266705, 0.45299220085144043, 0.44969585963657926], "val_accuracy": [0.5456666946411133, 0.6496666669845581, 0.6556666493415833, 0.7243333458900452, 0.7356666922569275, 0.7390000224113464, 0.7556666731834412, 0.734666645526886, 0.762666642665863, 0.7666666507720947, 0.7620000243186951, 0.762666642665863, 0.762666642665863, 0.7723333239555359, 0.7519999742507935, 0.7836666703224182, 0.8019999861717224, 0.7829999923706055, 0.8023333549499512, 0.7919999957084656, 0.7806666493415833, 0.7983333468437195, 0.7996666431427002, 0.7990000247955322]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [5, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [37, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7731428742408752, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, beta)))))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1232549372822804, 1.4257384683824155, 1.1033974152199582, 0.965411649238731, 0.9045459720846244, 0.8639653877590971, 0.8228801606416608, 0.7943660307632792, 0.8341069831635265, 0.7616406011543632, 0.7675323960583019, 0.8058895234261143, 0.8313079610744472, 0.751504587081634, 0.7553860268903336], "accuracy": [0.31118741631507874, 0.511821448802948, 0.600581169128418, 0.6557918190956116, 0.6793025732040405, 0.6910579800605774, 0.7088891863822937, 0.713908314704895, 0.7051908373832703, 0.733060359954834, 0.7309470176696777, 0.7214370369911194, 0.7160216569900513, 0.7387399077415466, 0.7314753532409668], "val_loss": [1.3624906880514962, 0.8940448420388358, 0.6889232737677438, 0.6248182058334351, 0.6510293313435146, 0.5886009420667376, 0.592993974685669, 0.6558443307876587, 0.5490570408957345, 0.5138194731303624, 0.534846339906965, 0.6217214890888759, 0.5187298570360456, 0.5316482101167951, 0.5356862374714443], "val_accuracy": [0.5396666526794434, 0.5860000252723694, 0.7213333249092102, 0.7506666779518127, 0.7016666531562805, 0.7393333315849304, 0.7329999804496765, 0.7269999980926514, 0.7706666588783264, 0.7846666574478149, 0.7839999794960022, 0.7673333287239075, 0.7833333611488342, 0.7760000228881836, 0.7796666622161865]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [5, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 4, 2, 0, 2, 2, 4, 5, 8, 2, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [0, 3, 3, 1, 0, 0, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 3, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7260000109672546, "mapping_values": [1, 2, 2, 1, 1, 0, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 7, 3, 4, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(tf.math.pow(grad, tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3018360890575043, 2.3021141161394, 2.299207874812533, 2.299218369197883, 2.296951683741267, 2.2955370053261217, 2.2935328138439868, 2.2930667648824326, 2.2908123360176473, 2.2885361922620198, 2.288411355210711, 2.2855300525742877, 2.2837048934482547, 2.282794059999804, 2.2807062099543955, 2.278744964740689, 2.27981690141141, 2.2767532189540134, 2.274835301333604, 2.2729132084121573, 2.2711575771949515, 2.269543078691732, 2.268247755180654, 2.2648703853263044, 2.262474470166262, 2.260592915236816, 2.258318707959023, 2.253877599650937, 2.251358411378549, 2.248617515461934, 2.246399079866854, 2.241898705001678, 2.236361175622009, 2.2340507983153666, 2.226743561165633, 2.219961132497489, 2.21118340831092, 2.2042846266840113, 2.195914972790512, 2.1874590707319665, 2.1757269091751628, 2.1588779054754337, 2.141282358252692, 2.1180476659576515, 2.0864508040214904, 2.0561928038961774, 2.0101470534418238, 1.9403022016280393, 1.8760349112195644, 1.77912713567799, 1.677193410943575, 1.565073900911802, 1.4791802001777279, 1.379072244345882, 1.3020846849072958, 1.2212848120109832, 1.1740519660827018, 1.1097849292399908, 1.0726160269686733, 1.0344974796895763, 0.9984448519380983, 0.9755838931890102, 0.9521099961413337, 0.961715783504148, 0.9367056007099316, 0.9498064313440622, 0.9887490005163138, 0.9797686724819606, 0.9452399740743757, 1.0346816333529656, 1.082178607592887, 1.0414171965445636], "accuracy": [0.09021265059709549, 0.08796724677085876, 0.09853387624025345, 0.09840179979801178, 0.10302469879388809, 0.11279883980751038, 0.11359133571386337, 0.1208558976650238, 0.12059172987937927, 0.1298375427722931, 0.12600713968276978, 0.13855500519275665, 0.14674416184425354, 0.1430458277463913, 0.1484612375497818, 0.16061286628246307, 0.14674416184425354, 0.15770703554153442, 0.16351869702339172, 0.17263241112232208, 0.17210407555103302, 0.17619864642620087, 0.18121780455112457, 0.18742570281028748, 0.1880861222743988, 0.19640734791755676, 0.20063400268554688, 0.21212521195411682, 0.20459648966789246, 0.21384228765964508, 0.22216351330280304, 0.21582353115081787, 0.2238806039094925, 0.2234843522310257, 0.23378682136535645, 0.24224013090133667, 0.25042927265167236, 0.24461762607097626, 0.2592788338661194, 0.2545238435268402, 0.2657508850097656, 0.27684587240219116, 0.28899750113487244, 0.2975828945636749, 0.3069607615470886, 0.3222824037075043, 0.33403778076171875, 0.3605864346027374, 0.3751155734062195, 0.39730551838874817, 0.4235900044441223, 0.45330867171287537, 0.4764232039451599, 0.5070664286613464, 0.5227842926979065, 0.55791836977005, 0.5766741633415222, 0.6004490852355957, 0.611940324306488, 0.6284506916999817, 0.6509047746658325, 0.64667809009552, 0.6546030640602112, 0.6499801874160767, 0.6604147553443909, 0.6519614458084106, 0.6444327235221863, 0.6494518518447876, 0.6551313996315002, 0.6342623233795166, 0.6279223561286926, 0.6429798007011414], "val_loss": [1.9697646413530623, 1.9689178466796875, 1.9676947593688965, 1.9661692210606165, 1.964541230882917, 1.962834698813302, 1.9611858640398299, 1.9595421382359095, 1.957868984767369, 1.956233092716762, 1.9547195434570312, 1.9532670293535506, 1.9517912864685059, 1.9504508972167969, 1.9489671843392509, 1.947467599596296, 1.945972102028983, 1.9444363457815987, 1.94286162512643, 1.941183090209961, 1.9393482889447893, 1.9374773842947823, 1.9354472160339355, 1.9331310135977608, 1.9307244164603097, 1.9281206130981445, 1.92532593863351, 1.9222763606480189, 1.918940544128418, 1.9153991426740373, 1.9116433688572474, 1.90742370060512, 1.902575969696045, 1.8973500388009208, 1.8913014275687081, 1.8845294543675013, 1.8766185896737235, 1.8676560946873255, 1.8573572976248605, 1.8453634807041712, 1.8312879289899553, 1.8142047609601701, 1.7926137787955148, 1.76558290209089, 1.7300333976745605, 1.6852606705256872, 1.62523695400783, 1.5451485770089286, 1.4466948168618339, 1.3255548136574882, 1.2010344096592493, 1.078972509929112, 0.9762755462101528, 0.8971385615212577, 0.8331341743469238, 0.7884167773383004, 0.7495786462511335, 0.7073938165392194, 0.6898007052285331, 0.6717407533100673, 0.640436223575047, 0.6675704887935093, 0.6361175264630999, 0.6371402399880546, 0.6882578815732684, 0.6960808549608503, 0.6238639865602765, 0.6514525754111153, 0.6985313381467547, 0.6814693553107125, 0.6135134186063494, 0.6341025659016201], "val_accuracy": [0.03933333232998848, 0.04500000178813934, 0.054666668176651, 0.06266666948795319, 0.07666666805744171, 0.09333333373069763, 0.10733333230018616, 0.12200000137090683, 0.13633333146572113, 0.1523333340883255, 0.16633333265781403, 0.17800000309944153, 0.18833333253860474, 0.1979999989271164, 0.20866666734218597, 0.22100000083446503, 0.23533333837985992, 0.2473333328962326, 0.26766666769981384, 0.2840000092983246, 0.3006666600704193, 0.31700000166893005, 0.33399999141693115, 0.35499998927116394, 0.37066665291786194, 0.38499999046325684, 0.3943333327770233, 0.40400001406669617, 0.40966665744781494, 0.4126666784286499, 0.4143333435058594, 0.4166666567325592, 0.4153333306312561, 0.41466665267944336, 0.4153333306312561, 0.421999990940094, 0.42533332109451294, 0.4286666810512543, 0.43299999833106995, 0.43700000643730164, 0.445333331823349, 0.45366665720939636, 0.46666666865348816, 0.4793333411216736, 0.49133333563804626, 0.512666642665863, 0.5316666960716248, 0.54666668176651, 0.5646666884422302, 0.5793333053588867, 0.5989999771118164, 0.6176666617393494, 0.6623333096504211, 0.6673333048820496, 0.687666654586792, 0.7103333473205566, 0.6983333230018616, 0.7099999785423279, 0.7106666564941406, 0.721666693687439, 0.7226666808128357, 0.6970000267028809, 0.7179999947547913, 0.7229999899864197, 0.6976666450500488, 0.7013333439826965, 0.7350000143051147, 0.7059999704360962, 0.6976666450500488, 0.6866666674613953, 0.7233333587646484, 0.7196666598320007]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 0, 2, 4, 6, 5, 5, 2, 9, 3, 6, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 3, 3, 3, 0, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 32, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.722000002861023, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.8616477632724127, 0.9886792000211414, 0.7710448694959717, 0.7187961147540376, 0.7113498340602784, 1.3472549086154932, 4.3463614714096845, 7.993274569180758], "accuracy": [0.3751155734062195, 0.6428477168083191, 0.7160216569900513, 0.7388719916343689, 0.750231146812439, 0.7063795924186707, 0.228899747133255, 0.12032756209373474], "val_loss": [0.7412057944706508, 0.5925276449748448, 0.5236421993800572, 0.5094128506524223, 0.5258127791540963, 2.324124268123082, 5.256507737295968, 9.735577992030553], "val_accuracy": [0.6930000185966492, 0.7426666617393494, 0.7736666798591614, 0.7676666378974915, 0.765666663646698, 0.5843333601951599, 0.11999999731779099, 0.13366666436195374]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 8, 5, 6, 0, 2, 4, 6, 5, 5, 2, 9, 3, 6, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 3, 3, 3, 0, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.4545714259147644, "mapping_values": [1, 3, 3, 1, 2, 0, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9962600886372999, 1.9383749957129373, 3.507513759662415, 9.623060180085636, 27.130924710571144, 63.1901108058153], "accuracy": [0.363360196352005, 0.37300223112106323, 0.10381719470024109, 0.1018359512090683, 0.10394927859306335, 0.10276053100824356], "val_loss": [1.4999072892325265, 2.2426697867257253, 5.024629865373884, 14.868194580078125, 38.3144542149135, 82.1727273123605], "val_accuracy": [0.5093333125114441, 0.11966666579246521, 0.09700000286102295, 0.09966666996479034, 0.10000000149011612, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [60, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.28285714983940125, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))))), tf.math.add(beta, alpha)))))))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2055989689657545, 2.364512590385148, 2.30484873362662, 2.303656119208184, 2.30388468540954, 2.3030678232694584], "accuracy": [0.2250693440437317, 0.20036983489990234, 0.09496764093637466, 0.09721305221319199, 0.09338264167308807, 0.10038304328918457], "val_loss": [2.583256721496582, 1.9769283022199358, 1.973989486694336, 1.9738054956708635, 1.9738133294241769, 1.9736790657043457], "val_accuracy": [0.2626666724681854, 0.09966666996479034, 0.0976666659116745, 0.10133333504199982, 0.09966666996479034, 0.0976666659116745]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 3, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [37, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.1128571406006813, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 7, 3, 4, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, beta))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.multiply(alpha, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.30156290318594, 2.299504282452159, 2.2985379831618666, 2.3017721081359466, 2.3018338969354977, 2.3024938139602447, 2.3027612418546464], "accuracy": [0.09047681838274002, 0.09959053993225098, 0.10738343745470047, 0.07792893797159195, 0.08598599582910538, 0.0944393053650856, 0.08691058307886124], "val_loss": [1.9686723436628069, 1.9678235735212053, 1.9720802988324846, 1.9725095885140556, 1.9729345185416085, 1.9736975261143275, 1.9738499777657645], "val_accuracy": [0.05166666582226753, 0.11599999666213989, 0.05433333292603493, 0.046666666865348816, 0.1120000034570694, 0.08666666597127914, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 3, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 3, 3, 3, 0, 0, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [54, 11, 47, 41, 87, 41, 18, 89, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 0, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 82, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 14, 14, 7, 7, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07013604789972305, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [9, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 4, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 72, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 9, 5, 4, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3026776635934962, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 4, 2, 0, 2, 0, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 2, 3, 3, 0, 0, 1, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 9, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [97, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 19, 19, 11, 8, 2, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 6, 6, 0, 2, 4, 6, 5, 5, 2, 9, 3, 6, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 3, 1, 3, 3, 0, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 95, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 8, 2, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 2, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [97, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 19, 19, 10, 9, 1, 1, 0, 0, 0, 0, 7, 3, 4, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 5, 6, 0, 2, 4, 6, 5, 4, 2, 9, 3, 6, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 2, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 3, 2, 1, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 27, 80, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 9, 7, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026776635934962, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 4, 2, 1, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [5, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.0657142847776413, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 6, 7, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), beta))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.301522082121082, 2.3015243076235783, 2.2995569244304654, 2.3003865365638174, 2.3002400201750373, 2.3004446605948914, 2.3001660474964405, 2.3006791354579823, 2.300129438671595, 2.2992817113239217, 2.3008393331557184, 2.3000877273238616, 2.2998699502953763, 2.3003144168803376], "accuracy": [0.09034473448991776, 0.08915598690509796, 0.09628847241401672, 0.09576013684272766, 0.09589222073554993, 0.09919429570436478, 0.10276053100824356, 0.1006472036242485, 0.09509972482919693, 0.09800554811954498, 0.09430722147226334, 0.10038304328918457, 0.10817593336105347, 0.09298639744520187], "val_loss": [1.9694363730294364, 1.969057832445417, 1.9690519060407365, 1.9689219338553292, 1.9692140306745256, 1.969332013811384, 1.9693995203290666, 1.969292095729283, 1.9692635536193848, 1.9693427085876465, 1.969458784375872, 1.969712597983224, 1.969956534249442, 1.9702420915876115], "val_accuracy": [0.04466666653752327, 0.05000000074505806, 0.05299999937415123, 0.05833333358168602, 0.06400000303983688, 0.06599999964237213, 0.07233333587646484, 0.07333333045244217, 0.07966666668653488, 0.07833333313465118, 0.07533333450555801, 0.07400000095367432, 0.07066666334867477, 0.0689999982714653]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 4, 2, 0, 2, 2, 3, 5, 4, 3, 5, 3, 3, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 3, 3, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 3, 2, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [77, 27, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.0657142847776413, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 13, 11, 1, 1, 0, 0, 0, 0, 7, 3, 4, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))))), grad), tf.math.add(beta, grad))), alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.multiply(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.301521556000463, 2.3015208488379204, 2.299545677850401, 2.3003753264188735, 2.300233924614046, 2.3004384254656607, 2.300167823275555, 2.300682572168429, 2.300129254763987, 2.299288314457315, 2.3008497249118056, 2.300106356597737, 2.299881488387894, 2.3003214607936613], "accuracy": [0.09047681838274002, 0.08928807079792023, 0.09655263274908066, 0.09602430462837219, 0.0956280529499054, 0.09919429570436478, 0.10289261490106583, 0.10038304328918457, 0.09496764093637466, 0.09813763201236725, 0.0940430611371994, 0.09985470771789551, 0.10777968913316727, 0.09311848133802414], "val_loss": [1.9694343975612096, 1.9690508161272322, 1.9690471376691545, 1.9689150537763322, 1.9692133494785853, 1.9693399156842912, 1.9694191387721471, 1.9693004063197546, 1.9692767007010323, 1.9693569455827986, 1.9694839886256628, 1.969728742327009, 1.969968659537179, 1.9702561242239816], "val_accuracy": [0.04466666653752327, 0.05000000074505806, 0.05299999937415123, 0.05900000035762787, 0.06400000303983688, 0.06599999964237213, 0.07233333587646484, 0.07366666942834854, 0.0793333351612091, 0.07766667008399963, 0.07599999755620956, 0.07400000095367432, 0.07066666334867477, 0.0676666647195816]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 5, 6, 0, 1, 4, 6, 5, 4, 2, 9, 3, 6, 4, 8, 3, 3, 5, 1, 3, 6, 3, 3, 6, 2, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 3, 3, 3, 0, 3, 3, 1, 3, 3, 0, 3, 0, 4, 0, 1, 0, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [94, 90, 75, 41, 87, 41, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 2, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [42, 32, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301947723841387, 2.302818353354671, 2.3009234997007777, 2.3024916002668836, 2.3017914841565883, 2.3023019546467975], "accuracy": [0.08955223858356476, 0.08532558381557465, 0.09351472556591034, 0.09074098616838455, 0.0886276587843895, 0.0948355570435524], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}]