[{"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 5, 7, 6, 8, 3, 1, 3, 4, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 0, 2, 0, 3, 2, 3, 3, 2, 3, 1, 1, 2, 0, 4, 0, 2, 0, 1, 3, 5, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.8125714063644409, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.981443801292764, 1.3528369885583076, 1.0581015127052515, 0.9078621676238678, 0.8208405353436932, 0.7637786662825787, 0.7466359890494537, 0.7153574330475132, 0.6925803888837627, 0.6645589226650414, 0.6677006784604603, 0.6488896074107358, 0.6074021899421469, 0.6376043333038599, 0.6096343506423316, 0.5764581618323507, 0.5633313678526812, 0.5687395588770014, 0.567584048180674, 0.5491214150671379, 0.5404968991444615, 0.5273841597093583, 0.525332891351401, 0.5070619040027727, 0.527118482641367, 0.49566194161983324, 0.491199771977844, 0.49760224031986355, 0.4675722227372419, 0.47334105644747565, 0.4640586653468694, 0.4529591355388663, 0.4496829849877582, 0.4494895736507657, 0.45388111933079756, 0.45293715611157276, 0.4299290866317089, 0.43931892327644473, 0.4184539091113127, 0.4237335658446594, 0.4142044754847717, 0.42488011693784417, 0.41449378613688137], "accuracy": [0.3457931578159332, 0.5268788933753967, 0.6181482076644897, 0.654999315738678, 0.6915863156318665, 0.7124554514884949, 0.713379979133606, 0.7224937081336975, 0.7380794882774353, 0.7457403540611267, 0.7460044622421265, 0.7547219395637512, 0.7730814814567566, 0.7588165402412415, 0.7729493975639343, 0.7804781198501587, 0.7839123010635376, 0.7827235460281372, 0.7814027070999146, 0.7922335267066956, 0.7960638999938965, 0.8035926818847656, 0.8058380484580994, 0.8068947196006775, 0.8034605979919434, 0.8177255392074585, 0.81548011302948, 0.8165367841720581, 0.8255184292793274, 0.8215559124946594, 0.8251221776008606, 0.8310658931732178, 0.8308017253875732, 0.8323867321014404, 0.8308017253875732, 0.8313300609588623, 0.8417646288871765, 0.830669641494751, 0.8444063067436218, 0.8418967127799988, 0.8448025584220886, 0.8368775844573975, 0.844010055065155], "val_loss": [1.2625018187931605, 0.9123750073569161, 0.6951934610094342, 0.6480587039675031, 0.5450833354677472, 0.5806053876876831, 0.5451135635375977, 0.516209602355957, 0.48375117778778076, 0.4822469098227365, 0.4791144132614136, 0.4911895138876779, 0.4662812777927944, 0.4452118192400251, 0.4458177089691162, 0.43391333307538715, 0.4388283831732614, 0.4537473576409476, 0.42763371978487286, 0.45994230679103304, 0.43071629319872173, 0.4247466155460903, 0.3951335719653538, 0.40635410376957487, 0.39714111600603375, 0.3820009572165353, 0.4069389360291617, 0.38022693565913607, 0.3969293066433498, 0.4012640799794878, 0.369916456086295, 0.3695269227027893, 0.3652392029762268, 0.37334201165608, 0.37143527609961374, 0.38875642844608854, 0.35964188405445646, 0.3462075250489371, 0.3467165231704712, 0.35332534994397846, 0.36240090642656597, 0.37803720576422556, 0.35284896407808575], "val_accuracy": [0.45500001311302185, 0.6299999952316284, 0.7006666660308838, 0.7059999704360962, 0.753000020980835, 0.7269999980926514, 0.7583333253860474, 0.7663333415985107, 0.7876666784286499, 0.7786666750907898, 0.8009999990463257, 0.781000018119812, 0.7900000214576721, 0.8050000071525574, 0.8019999861717224, 0.8096666932106018, 0.8090000152587891, 0.7823333144187927, 0.812666654586792, 0.7743333578109741, 0.7963333129882812, 0.809333324432373, 0.831333339214325, 0.8246666789054871, 0.8246666789054871, 0.8286666870117188, 0.824999988079071, 0.8383333086967468, 0.828000009059906, 0.8149999976158142, 0.8356666564941406, 0.8399999737739563, 0.8463333249092102, 0.82833331823349, 0.8356666564941406, 0.8323333263397217, 0.8460000157356262, 0.8536666631698608, 0.8513333201408386, 0.8479999899864197, 0.8366666436195374, 0.8253333568572998, 0.8460000157356262]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 3, 7, 6, 8, 3, 1, 3, 5, 0, 1, 5, 2, 5, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 0, 2, 3, 3, 3, 3, 3, 0, 3, 3, 1, 2, 0, 4, 0, 2, 0, 1, 3, 5, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7954285740852356, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 15, 9, 3, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, alpha)), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), grad)), grad), grad)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.182366127130803, 1.4906502972189557, 1.1428489655929392, 1.0611714053116204, 0.888301421236825, 0.8224935603494484, 0.8244074274598961, 0.7732286471196956, 0.7618448735700544, 0.7110098166992289, 0.7255068719662601, 0.7070338452150479, 0.6700499925426346, 0.683548131363503, 0.669715193945734, 0.6417593002287845, 0.6408017980754809, 0.6210499559537122, 0.6158554475809117, 0.6086802551334151, 0.6085440400742332, 0.6009686234652043, 0.5881999636433302, 0.5883395791825302], "accuracy": [0.2740721106529236, 0.50785893201828, 0.6037511825561523, 0.6166952848434448, 0.6757363677024841, 0.6975300312042236, 0.6892088055610657, 0.7102100253105164, 0.7112666964530945, 0.7346453666687012, 0.7269845604896545, 0.7337207794189453, 0.7491744756698608, 0.7396644949913025, 0.748249888420105, 0.7524765729904175, 0.7594769597053528, 0.7663452625274658, 0.7687227725982666, 0.7750627398490906, 0.7700436115264893, 0.7753269076347351, 0.7799497842788696, 0.7828556299209595], "val_loss": [1.5281571660723006, 0.979902846472604, 0.7740648133414132, 0.651493889944894, 0.5780401400157383, 0.5947930642536708, 0.5607028007507324, 0.5367773941584996, 0.5158173186438424, 0.5129914964948382, 0.520046762057713, 0.5133333206176758, 0.49869184834616526, 0.47299047878810335, 0.4723472935812814, 0.4642573595046997, 0.45730468205043245, 0.46219539642333984, 0.4453643730708531, 0.4594437905720302, 0.4583571468080793, 0.4509815147944859, 0.4438530717577253, 0.44604975836617605], "val_accuracy": [0.5559999942779541, 0.6646666526794434, 0.6740000247955322, 0.7266666889190674, 0.7480000257492065, 0.7369999885559082, 0.7546666860580444, 0.7593333125114441, 0.7716666460037231, 0.7706666588783264, 0.7666666507720947, 0.7666666507720947, 0.7753333449363708, 0.7896666526794434, 0.7956666946411133, 0.7979999780654907, 0.8050000071525574, 0.7886666655540466, 0.8056666851043701, 0.781000018119812, 0.7829999923706055, 0.7933333516120911, 0.7993333339691162, 0.8019999861717224]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 4, 1, 4, 2, 3, 1, 6, 4, 2, 9, 5, 2, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 2, 1, 3, 3, 3, 3, 1, 3, 3, 1, 2, 0, 4, 0, 3, 0, 1, 3, 5, 0, 2, 3, 1, 3, 3, 2, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 34, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7931428551673889, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 13, 10, 2, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.math.add(beta, alpha))), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.add(beta, grad))))), tf.math.add(grad, alpha)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.268765093454863, 2.1344304252310105, 1.8357280950347241, 1.4646897931943528, 1.2211668569146366, 1.087322943718552, 1.0016722002553429, 0.9427094244213782, 0.896581503331244, 0.8588704711190147, 0.8506251073799995, 0.813679842357827, 0.7896942508659972, 0.7611824172504542, 0.7439635843333787, 0.7465040911662659, 0.7317003982571909, 0.7252781317533519, 0.713897418604236, 0.699641013165916, 0.6810984413432659, 0.6976662316279499, 0.6829038803146941, 0.6722446580478592, 0.6642534507736475, 0.65152674458361, 0.6485902777421649, 0.6534937235972412, 0.6382877039178771, 0.6288761933954274, 0.6297113342355066, 0.6302670377703107, 0.6217621547702502, 0.6170555314509435, 0.612823361072558, 0.6186710926268032], "accuracy": [0.1748778223991394, 0.35662394762039185, 0.44644036889076233, 0.5251618027687073, 0.5831462144851685, 0.617751955986023, 0.6509047746658325, 0.6674151420593262, 0.6822084188461304, 0.6911900639533997, 0.6911900639533997, 0.7132478952407837, 0.7190595865249634, 0.7244749665260315, 0.7301545143127441, 0.7312111854553223, 0.7323999404907227, 0.7375511527061462, 0.7392682433128357, 0.7448157668113708, 0.7523444890975952, 0.7433628439903259, 0.7539294958114624, 0.7585523724555969, 0.7606657147407532, 0.7662131786346436, 0.7650244235992432, 0.7658169269561768, 0.7633073329925537, 0.7683265209197998, 0.7681944370269775, 0.7692511081695557, 0.7675340175628662, 0.774798572063446, 0.7786290049552917, 0.772288978099823], "val_loss": [1.8811454772949219, 1.673002072743007, 1.2737417221069336, 0.9583984443119594, 0.8017890964235578, 0.7070214237485614, 0.6716944660459246, 0.6363238777433123, 0.5983678783689227, 0.5837310211999076, 0.5767277990068708, 0.5573216506413051, 0.5444909674780709, 0.5255715847015381, 0.5178601401192802, 0.522855315889631, 0.5261448281151908, 0.5044348750795636, 0.4970727988651821, 0.4886894907270159, 0.48936995438167025, 0.4816403218678066, 0.47266028608594624, 0.4802683251244681, 0.4693429470062256, 0.471686635698591, 0.462078332901001, 0.4628957680293492, 0.4573252371379307, 0.4592229979378836, 0.45053001812526156, 0.46226370334625244, 0.4478929042816162, 0.44713001591818674, 0.4697407994951521, 0.43988583769117084], "val_accuracy": [0.4286666810512543, 0.5273333191871643, 0.6200000047683716, 0.6543333530426025, 0.6986666917800903, 0.722000002861023, 0.7223333120346069, 0.7413333058357239, 0.75, 0.7543333172798157, 0.7553333044052124, 0.7673333287239075, 0.7599999904632568, 0.7793333530426025, 0.7829999923706055, 0.7630000114440918, 0.768666684627533, 0.7776666879653931, 0.7829999923706055, 0.7886666655540466, 0.793666660785675, 0.7856666445732117, 0.7933333516120911, 0.7896666526794434, 0.7860000133514404, 0.7940000295639038, 0.8059999942779541, 0.8066666722297668, 0.8006666898727417, 0.7946666479110718, 0.812333345413208, 0.8013333082199097, 0.8069999814033508, 0.8026666641235352, 0.7766666412353516, 0.8066666722297668]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 3, 7, 6, 8, 3, 1, 3, 5, 0, 1, 5, 2, 5, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 0, 2, 3, 3, 3, 3, 3, 0, 3, 3, 1, 2, 0, 4, 0, 2, 0, 1, 3, 5, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [98, 74, 64, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7788571715354919, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 13, 10, 2, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, alpha)), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(beta)))))), grad), tf.math.add(beta, grad)))), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.179732875580864, 1.4824910561138722, 1.1511509916360714, 1.0225971617230714, 0.861491683412458, 0.8251733553250546, 0.8021791331236783, 0.7623319320863878, 0.7332345565170613, 0.6964084789926476, 0.685123415513518, 0.6967250638397977, 0.6700960566984617, 0.6600136044569901, 0.6445960110094506, 0.6300588580343655, 0.6295485255220988, 0.5992852446268011, 0.6008399309593657], "accuracy": [0.2775062620639801, 0.5094439387321472, 0.6008453369140625, 0.6260731816291809, 0.6888125538825989, 0.7018887996673584, 0.7022850513458252, 0.7154933214187622, 0.7298903465270996, 0.7412495017051697, 0.741909921169281, 0.7396644949913025, 0.7520803213119507, 0.754589855670929, 0.7607977986335754, 0.7655527591705322, 0.7660810947418213, 0.7820631265640259, 0.7763835787773132], "val_loss": [1.5179165772029333, 0.9234468596322196, 0.7770540033067975, 0.6480002232960292, 0.5726259265627179, 0.6067110810961042, 0.5707514115742275, 0.5437993151800973, 0.5123233795166016, 0.5142447437558856, 0.5007427590233939, 0.5134879180363247, 0.5224789381027222, 0.46421498911721365, 0.48580857685634066, 0.5217961243220738, 0.467363749231611, 0.4558860404150827, 0.4578549180712019], "val_accuracy": [0.562666654586792, 0.5929999947547913, 0.67166668176651, 0.7203333377838135, 0.7513333559036255, 0.7196666598320007, 0.7273333072662354, 0.7606666684150696, 0.7639999985694885, 0.765666663646698, 0.7866666913032532, 0.7646666765213013, 0.7673333287239075, 0.796999990940094, 0.777999997138977, 0.7450000047683716, 0.7766666412353516, 0.7956666946411133, 0.7903333306312561]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 7, 6, 2, 3, 1, 2, 4, 2, 9, 5, 2, 3, 9, 2, 3, 2, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 6, 3, 4, 8, 1, 1, 6, 6, 8, 4, 6, 8, 4, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 2, 2, 3, 2, 3, 3, 3, 0, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 51, 44, 50, 87, 41, 42, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7662857174873352, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 12, 10, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(grad, tf.math.add(beta, beta))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), grad)), tf.math.square(tf.math.add(beta, grad))))), grad)), tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.4701309060817382, 2.208667889782592, 2.4179013948147055, 2.3049358060378533, 2.3007609688642083, 2.273841239237404, 2.301677407747278, 2.0825326511368947, 1.6250658517878336, 1.155492625735959, 1.043594739605895, 0.9733485427546448, 0.8556939230193835, 0.8003805964976537, 0.7767558795759282, 0.7967465319622147, 0.7276901518742737, 0.7003075106977519, 0.6760542271962617, 0.6842514036149239, 0.6472735442757497], "accuracy": [0.1978602558374405, 0.20155857503414154, 0.18755778670310974, 0.09708096832036972, 0.11570466309785843, 0.17910447716712952, 0.11161009222269058, 0.24224013090133667, 0.4768194556236267, 0.6100911498069763, 0.6452252268791199, 0.6596222519874573, 0.6876237988471985, 0.7140403985977173, 0.7201162576675415, 0.7187954187393188, 0.7380794882774353, 0.7470611333847046, 0.7504953145980835, 0.7512878179550171, 0.7560427784919739], "val_loss": [1.9852332387651717, 1.9472590173993791, 1.9767745562962122, 1.9737003190176827, 1.9576421465192522, 1.982743263244629, 1.8616913386753626, 1.286698239190238, 0.8454944917133876, 0.9180024351392474, 0.659531695502145, 0.773289510181972, 0.6149257591792515, 0.6032125949859619, 0.5381748676300049, 0.5321069615227836, 0.5561019863401141, 0.5569414070674351, 0.5138310704912458, 0.4790093047278268, 0.4912034102848598], "val_accuracy": [0.09733333438634872, 0.1809999942779541, 0.10233332961797714, 0.1003333330154419, 0.17666666209697723, 0.10233332961797714, 0.1979999989271164, 0.5203333497047424, 0.671999990940094, 0.6353333592414856, 0.7326666712760925, 0.6896666884422302, 0.7279999852180481, 0.7453333139419556, 0.762333333492279, 0.7926666736602783, 0.7536666393280029, 0.7536666393280029, 0.7773333191871643, 0.7829999923706055, 0.7896666526794434]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 3, 1, 6, 2, 9, 1, 3, 4, 4, 4, 6, 2, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 2, 3, 3, 3, 3, 3, 0, 3, 3, 1, 2, 0, 4, 0, 3, 0, 1, 3, 5, 0, 2, 3, 1, 3, 3, 2, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 24, 50, 87, 41, 42, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7657142877578735, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, grad), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.470402485879342, 2.2049744719952606, 2.3042382941726585, 2.3028714013468115, 2.2397009601147104, 2.5104330222147833, 2.2671031500952763, 2.034320700264657, 1.8691355454970533, 1.630593470767536, 1.7183444026816774, 1.306492957582626, 1.1123736080885909, 1.0489772503968984, 0.9494564651718639, 0.9107080690219276, 0.7964834302187501, 0.7617636113008724, 0.7218500229235669, 0.7029866585169706, 0.6695307214829144, 0.6608591053495633, 0.6422210377220937, 0.6256007872725585, 0.6211152531766557, 0.6182181144497572, 0.5981096192483873, 0.5803107822323992, 0.5521871317347767, 0.5532851665798763, 0.5926684912767991, 0.5399631304574634, 0.5305230251046346, 0.5203007747547234, 0.5172817866721283, 0.49079820768408977, 0.4918994775474693, 0.4893801622481441, 0.488916954792974, 0.4795559106359959, 0.4841538846902151, 0.44963313123301557, 0.46537645139304984, 0.43157318260030125, 0.4479332709033743, 0.4216187781724538, 0.4499091333709042, 0.4205655179727882], "accuracy": [0.19680359959602356, 0.218465194106102, 0.15281997621059418, 0.10368511080741882, 0.19574692845344543, 0.18795403838157654, 0.14978206157684326, 0.2748646140098572, 0.3555673062801361, 0.4341566562652588, 0.43904373049736023, 0.5492008924484253, 0.6036190986633301, 0.6115440726280212, 0.6375643610954285, 0.6583014130592346, 0.7046625018119812, 0.7166820764541626, 0.7297582626342773, 0.7374191284179688, 0.7409853339195251, 0.748249888420105, 0.7559106945991516, 0.7617223858833313, 0.76106196641922, 0.7629110813140869, 0.7744023203849792, 0.7792893648147583, 0.7950072884559631, 0.7965922355651855, 0.7746664881706238, 0.793422281742096, 0.800818920135498, 0.8034605979919434, 0.8054417967796326, 0.8162726163864136, 0.8156121969223022, 0.8186501264572144, 0.8208954930305481, 0.8153480291366577, 0.8183859586715698, 0.8327829837799072, 0.8280280232429504, 0.8408400416374207, 0.8304054737091064, 0.8457271456718445, 0.83119797706604, 0.848368763923645], "val_loss": [1.9863773073468889, 1.9769618170601981, 1.9741497039794922, 1.9641156877790178, 1.9721719878060477, 1.9738633292061942, 1.7975187301635742, 1.388594048363822, 1.2264021124158586, 1.1041876247950964, 1.0615978581564767, 0.8769029889787946, 0.7279964004244123, 0.7404591866901943, 0.6317099503108433, 0.58247823374612, 0.564124618257795, 0.53505197593144, 0.5293494292667934, 0.5305880308151245, 0.5025861603873116, 0.47895889622824533, 0.4708287375313895, 0.5182935340063912, 0.5323221853801182, 0.4631692852292742, 0.43442645243235994, 0.44979971647262573, 0.4483062539781843, 0.5265466485704694, 0.4280158962522234, 0.4530125345502581, 0.43857509749276297, 0.40507590770721436, 0.44051919664655415, 0.4536969150815691, 0.395936872277941, 0.4169041173798697, 0.39738409008298603, 0.4470494304384504, 0.39322366033281597, 0.3930326444762094, 0.36746747153145926, 0.3772069641521999, 0.4313178062438965, 0.3688186747687204, 0.38252695969172884, 0.3931027054786682], "val_accuracy": [0.09733333438634872, 0.10000000149011612, 0.10233332961797714, 0.18266665935516357, 0.12433333694934845, 0.1550000011920929, 0.2409999966621399, 0.46133333444595337, 0.4596666693687439, 0.6016666889190674, 0.5806666612625122, 0.6673333048820496, 0.6539999842643738, 0.652999997138977, 0.7020000219345093, 0.7310000061988831, 0.7436666488647461, 0.7549999952316284, 0.7609999775886536, 0.7646666765213013, 0.7580000162124634, 0.7870000004768372, 0.7903333306312561, 0.7580000162124634, 0.7596666812896729, 0.7986666560173035, 0.8026666641235352, 0.7950000166893005, 0.8056666851043701, 0.7523333430290222, 0.8033333420753479, 0.793666660785675, 0.8033333420753479, 0.8213333487510681, 0.7770000100135803, 0.796999990940094, 0.8243333101272583, 0.8180000185966492, 0.8253333568572998, 0.7950000166893005, 0.8213333487510681, 0.82833331823349, 0.8446666598320007, 0.8383333086967468, 0.8076666593551636, 0.843999981880188, 0.8316666483879089, 0.8326666951179504]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 3, 7, 6, 8, 3, 1, 3, 2, 0, 1, 5, 2, 5, 8, 3, 3, 3, 1, 0, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 1, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 2, 3, 3, 3, 3, 3, 0, 3, 3, 1, 2, 0, 4, 3, 3, 0, 1, 3, 0, 0, 2, 3, 1, 3, 3, 2, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [82, 90, 2, 50, 41, 41, 13, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 20, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.7014285922050476, "mapping_values": [1, 1, 1, 0, 1, 0, 64, 64, 36, 28, 6, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.sqrt(grad)), grad))), grad), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), grad), tf.math.multiply(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(grad))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.subtract(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), grad))))), tf.math.subtract(grad, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301907585313087, 2.2958168560220047, 2.290824624887783, 2.2861405273611832, 2.280797418838227, 2.2769162804144187, 2.2708392506655986, 2.266515112729388, 2.2619653925242567, 2.255162050852828, 2.248525672033872, 2.2434149539513184, 2.237752083632389, 2.2306800366014836, 2.223228800581777, 2.2182181470382485, 2.2098043794094093, 2.2010380687998303, 2.194676250687774, 2.1867365198459106, 2.1757393748989164, 2.1651980260328263, 2.154863653591107, 2.14214696460286, 2.132400621339362, 2.115450504543822, 2.1040669369297635, 2.0910447681773654, 2.0754308668125763, 2.062180014019393, 2.037565671693789, 2.027615549321566, 2.0090371301822563, 1.9860621937324878, 1.962636170496227, 1.9449339283613276, 1.9259034729337712, 1.9013807937815803, 1.8815050886260236, 1.8611575836644685, 1.8354851203650657, 1.8076988364317792, 1.7784168045550068, 1.7589704349072162, 1.7368211279203862, 1.7161889057023383, 1.689158276103318, 1.6605522546470912, 1.6388775849811563, 1.614297573765775, 1.5932046046047288, 1.576084659225858, 1.5416857206180599, 1.5188906787330165, 1.5142848391999595, 1.4829453068355196, 1.4641979503247402, 1.4467857414469065, 1.4290831169164444, 1.4045703569029804, 1.3924280731291614, 1.3815812176055817, 1.3589811135969614, 1.3437724953172638, 1.3319526324733815, 1.3109223528182927, 1.30665561221043, 1.2891295480847815, 1.276765883764051, 1.277122087309216, 1.2468159965724992, 1.2364103794570265, 1.2305552132330266, 1.2260390173851963, 1.2288055942672953, 1.1996543751479676, 1.1942281529352634, 1.1850772673474987, 1.180589996371775, 1.1646521696718755, 1.1532303214372346, 1.1509006457038449, 1.143774085686648, 1.137257607747472, 1.1268400580513636, 1.1215902708776875, 1.1106710929943664, 1.1001947785349664, 1.0952891816458037, 1.0861706218982747, 1.0762004955900406, 1.072574476461369, 1.0672766263883946, 1.068229024027002, 1.0630159489687454, 1.058661658986527, 1.0461205515910637, 1.0542089159871924, 1.0475020652685845, 1.0446602277248103], "accuracy": [0.09536388516426086, 0.10500594228506088, 0.1158367469906807, 0.1344604343175888, 0.13974376022815704, 0.15189538896083832, 0.17157575488090515, 0.18636904656887054, 0.19918107986450195, 0.21674811840057373, 0.22916391491889954, 0.23999471962451935, 0.25161802768707275, 0.2631092369556427, 0.28160083293914795, 0.27644962072372437, 0.29441288113594055, 0.3031303584575653, 0.3156782388687134, 0.3187161684036255, 0.33020737767219543, 0.3361510932445526, 0.34341567754745483, 0.36005812883377075, 0.3572843670845032, 0.3671905994415283, 0.37604016065597534, 0.3823801279067993, 0.3843613862991333, 0.3885880410671234, 0.4061550796031952, 0.3959846794605255, 0.40628713369369507, 0.41883501410484314, 0.4313828945159912, 0.4263637661933899, 0.4419495463371277, 0.43428874015808105, 0.43864747881889343, 0.4469687044620514, 0.44908201694488525, 0.45145952701568604, 0.4653282165527344, 0.46387532353401184, 0.46691322326660156, 0.4764232039451599, 0.47351735830307007, 0.48527276515960693, 0.4909523129463196, 0.4954431354999542, 0.4986131191253662, 0.49570730328559875, 0.5120856165885925, 0.5147272348403931, 0.5105006098747253, 0.5194822549819946, 0.527010977268219, 0.5320301055908203, 0.5284639000892639, 0.5428609251976013, 0.5340113639831543, 0.551050066947937, 0.55791836977005, 0.5502575635910034, 0.5543521046638489, 0.5616167187690735, 0.5585787892341614, 0.5665037631988525, 0.570730447769165, 0.5638620853424072, 0.5801082849502563, 0.5756174921989441, 0.5884295105934143, 0.5811649560928345, 0.5740324854850769, 0.5881653428077698, 0.5879011750221252, 0.5947695374488831, 0.590278685092926, 0.6028265953063965, 0.6040153503417969, 0.6016378402709961, 0.6004490852355957, 0.6041474342346191, 0.6095628142356873, 0.6120724081993103, 0.6148461103439331, 0.6156386137008667, 0.620261549949646, 0.6215823292732239, 0.6227710843086243, 0.6272619366645813, 0.6287148594856262, 0.627129852771759, 0.6299035549163818, 0.6256769299507141, 0.6301677227020264, 0.6288469433784485, 0.6391493678092957, 0.6317527294158936], "val_loss": [1.9654693603515625, 1.9608066422598702, 1.9561763490949358, 1.9516100883483887, 1.946901525769915, 1.9422171456473214, 1.9374374662126814, 1.9325814928327287, 1.9275744301932198, 1.922311510358538, 1.9168942996433802, 1.9111650330679757, 1.9052511623927526, 1.8988844326564245, 1.892232894897461, 1.8852384431021554, 1.877840450831822, 1.8699416433061873, 1.861692224230085, 1.8528753008161272, 1.8435205732073103, 1.8334526334490096, 1.8228962762015206, 1.8116353579929896, 1.799769605909075, 1.7870298794337682, 1.7735859325953893, 1.7595337459019251, 1.7445378303527832, 1.7289165088108607, 1.7119952951158797, 1.6945490496499198, 1.6763759681156702, 1.6571501323154993, 1.6368136405944824, 1.6159381866455078, 1.5942725113459997, 1.5717925684792655, 1.5488906928471156, 1.5255036013466972, 1.5014327594212122, 1.4769452980586462, 1.451838527406965, 1.4268372399466378, 1.4017159938812256, 1.3768417154039656, 1.3518975121634347, 1.3268359729221888, 1.3019366604941232, 1.2775095871516637, 1.2534755298069544, 1.2302240984780448, 1.2071022306169783, 1.184769936970302, 1.1634127412523543, 1.1424978119986398, 1.1220926557268416, 1.1025665828159876, 1.084007671901158, 1.0657812867845808, 1.048501832144601, 1.0319338526044572, 1.0155470030648368, 0.9999898842402867, 0.9855107239314488, 0.971341712134225, 0.9578652722494942, 0.9448856626238141, 0.9324621473039899, 0.9209081786019462, 0.9093316623142788, 0.8980687686375209, 0.8877498081752232, 0.8777891567775181, 0.8683346339634487, 0.858663524900164, 0.8498586416244507, 0.8414132254464286, 0.8334607226508004, 0.8253999267305646, 0.8177378518240792, 0.8105768305914742, 0.803890415600368, 0.7968790871756417, 0.7902876479285104, 0.7838208164487567, 0.7775083780288696, 0.7716731003352574, 0.7655702999659947, 0.7600940976824079, 0.7548856054033551, 0.7495745931352887, 0.7443034137998309, 0.7394364901951381, 0.7345683574676514, 0.7301902089800153, 0.7255925110408238, 0.721685562814985, 0.7175090994153704, 0.71378036907741], "val_accuracy": [0.06333333253860474, 0.10266666859388351, 0.15133333206176758, 0.20033332705497742, 0.2486666738986969, 0.28200000524520874, 0.3199999928474426, 0.3476666808128357, 0.36800000071525574, 0.38066667318344116, 0.3916666805744171, 0.39933332800865173, 0.40433332324028015, 0.41466665267944336, 0.4230000078678131, 0.4309999942779541, 0.4386666715145111, 0.44600000977516174, 0.45399999618530273, 0.460999995470047, 0.46833333373069763, 0.4729999899864197, 0.47999998927116394, 0.4860000014305115, 0.4950000047683716, 0.5026666522026062, 0.5096666812896729, 0.5196666717529297, 0.5273333191871643, 0.5350000262260437, 0.5376666784286499, 0.5423333048820496, 0.5496666431427002, 0.5526666641235352, 0.5559999942779541, 0.5596666932106018, 0.5630000233650208, 0.5686666369438171, 0.5716666579246521, 0.5746666789054871, 0.5753333568572998, 0.5830000042915344, 0.5860000252723694, 0.5893333554267883, 0.5926666855812073, 0.5953333377838135, 0.5996666550636292, 0.6050000190734863, 0.6079999804496765, 0.6103333234786987, 0.6136666536331177, 0.6153333187103271, 0.6209999918937683, 0.6256666779518127, 0.628000020980835, 0.6333333253860474, 0.6399999856948853, 0.6433333158493042, 0.6489999890327454, 0.6546666622161865, 0.6573333144187927, 0.6616666913032532, 0.6646666526794434, 0.6669999957084656, 0.6710000038146973, 0.6729999780654907, 0.6759999990463257, 0.6779999732971191, 0.6813333630561829, 0.6830000281333923, 0.6866666674613953, 0.6883333325386047, 0.6883333325386047, 0.6936666369438171, 0.6953333616256714, 0.6959999799728394, 0.6963333487510681, 0.6976666450500488, 0.6986666917800903, 0.7006666660308838, 0.7016666531562805, 0.7049999833106995, 0.7070000171661377, 0.7053333520889282, 0.7089999914169312, 0.7110000252723694, 0.7106666564941406, 0.7110000252723694, 0.7126666903495789, 0.7133333086967468, 0.7139999866485596, 0.7139999866485596, 0.7153333425521851, 0.7176666855812073, 0.718666672706604, 0.718666672706604, 0.7183333039283752, 0.7200000286102295, 0.7206666469573975, 0.7210000157356262]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 5, 5, 8, 3, 1, 3, 4, 4, 4, 5, 2, 3, 9, 2, 3, 3, 1, 1, 5, 6, 9, 3, 6, 6, 6, 1, 2, 3, 2, 0, 8, 1, 6, 6, 8, 4, 6, 3, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 0, 4, 0, 2, 0, 0, 3, 5, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 41, 87, 1, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.6071428656578064, "mapping_values": [1, 3, 3, 1, 2, 0, 10, 10, 6, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, alpha)), tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0581772022117573, 1.3828802613723294, 0.9253763077108221, 0.8300941990524345, 0.736882533867755, 0.7335398011691913, 0.7128426665406988, 0.7126640522831136, 0.7861884806402103, 0.9043834941451103, 0.8365919721628838, 0.8546480162741092], "accuracy": [0.3481706380844116, 0.5247655510902405, 0.6676793098449707, 0.702681303024292, 0.7219653725624084, 0.7285695672035217, 0.7363624572753906, 0.7413815855979919, 0.7279091477394104, 0.7045304179191589, 0.6876237988471985, 0.6894729733467102], "val_loss": [1.3600030626569475, 0.6916891506740025, 0.612066251891, 0.5638788768223354, 0.5264983347484044, 0.49284848145076204, 0.48188183988843647, 0.524331978389195, 0.6821906907217843, 0.5941634178161621, 0.5998179231371198, 0.5973781517573765], "val_accuracy": [0.47099998593330383, 0.6766666769981384, 0.7353333234786987, 0.746999979019165, 0.7620000243186951, 0.7756666541099548, 0.7919999957084656, 0.7876666784286499, 0.7753333449363708, 0.731333315372467, 0.7139999866485596, 0.7540000081062317]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 3, 7, 6, 4, 3, 1, 3, 5, 0, 1, 5, 2, 5, 5, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 2, 3, 3, 3, 3, 0, 0, 3, 3, 1, 2, 0, 4, 0, 2, 0, 1, 3, 5, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 12, 64, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 43, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.3822857141494751, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 16, 12, 3, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.add(beta, grad))), tf.math.add(beta, grad)))))), grad)), grad), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.square(tf.math.add(tf.math.add(beta, grad), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.046220838826771, 1.3615008801706021, 0.9542476049724146, 0.8682905473508824, 0.7696881183165885, 0.7406975246376413, 0.7485538760054743, 0.7453024274779191, 0.733683077028761, 0.7515877401194222, 0.7482027597651584, 0.8836254900897798, 1.3509596133858788, 3.482202708555833], "accuracy": [0.3457931578159332, 0.5312376022338867, 0.665830135345459, 0.6851142644882202, 0.7160216569900513, 0.7209087014198303, 0.7280412316322327, 0.7205125093460083, 0.7429665923118591, 0.7342491149902344, 0.7257958054542542, 0.7104741930961609, 0.6439043879508972, 0.316470742225647], "val_loss": [1.343318258013044, 0.6737789767129081, 0.7273874112537929, 0.5414572102682931, 0.5400691543306623, 0.5357949563435146, 0.5127672808510917, 0.5284328630992344, 0.4814173494066511, 0.5403836965560913, 0.7196507624217442, 0.5442239556993756, 2.4728503908429826, 2.0178273745945523], "val_accuracy": [0.4726666808128357, 0.6909999847412109, 0.6623333096504211, 0.7553333044052124, 0.7450000047683716, 0.762333333492279, 0.7703333497047424, 0.7850000262260437, 0.7903333306312561, 0.7746666669845581, 0.7713333368301392, 0.7723333239555359, 0.38066667318344116, 0.3199999928474426]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 7, 6, 2, 2, 6, 6, 4, 2, 4, 5, 2, 3, 9, 2, 3, 2, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 6, 3, 4, 8, 1, 1, 6, 6, 8, 4, 6, 8, 4, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 3, 3, 2, 3, 3, 3, 0, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 10, 50, 87, 41, 42, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.3434285819530487, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 12, 12, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.divide_no_nan(grad, beta)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), grad), tf.math.add(beta, beta)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.469510754542564, 2.1437499076934965, 2.2705137444336057, 2.30596837356909, 2.3294030156637526, 2.3369206501398074, 2.124699783252766, 1.8559030505880594, 2.306575540475338, 2.305817517968469, 2.254557507306735, 2.308109561890942, 2.304321252060541], "accuracy": [0.19693566858768463, 0.2417117953300476, 0.1542728841304779, 0.1018359512090683, 0.15334829688072205, 0.12561088800430298, 0.21991810202598572, 0.34526482224464417, 0.1562541276216507, 0.10091137140989304, 0.15876370668411255, 0.10328886657953262, 0.09985470771789551], "val_loss": [1.9835597446986608, 1.9793113299778529, 1.9799267223903112, 1.9738009997776575, 1.9625574520656042, 1.9708154542105538, 1.9633546556745256, 1.7856973239353724, 1.9749716350010462, 1.9729627881731306, 1.9819350242614746, 1.9743003845214844, 1.97373138155256], "val_accuracy": [0.09733333438634872, 0.10000000149011612, 0.10233332961797714, 0.10000000149011612, 0.10233332961797714, 0.109333336353302, 0.1146666631102562, 0.2800000011920929, 0.1003333330154419, 0.10266666859388351, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 7, 6, 2, 3, 1, 1, 4, 1, 4, 5, 2, 5, 9, 2, 3, 2, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 6, 3, 4, 8, 1, 1, 6, 6, 8, 4, 6, 8, 4, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 2, 3, 2, 3, 3, 3, 0, 3, 1, 3, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 53, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [5, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [83, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.13685713708400726, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 14, 13, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, beta)), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, beta)), tf.math.add(beta, grad))))), tf.math.add(beta, grad))), grad)), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.square(grad)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.3011898417845065, 2.299876391533391, 2.3019709507424864, 2.3029435004351586, 2.3038703167773886, 2.3175250569102848], "accuracy": [0.09628847241401672, 0.09351472556591034, 0.10315678268671036, 0.12138422578573227, 0.11240258812904358, 0.09985470771789551], "val_loss": [1.9680773190089635, 1.9726856776646204, 1.9738872391836983, 1.974518094744001, 1.9780738013131278, 2.024252619062151], "val_accuracy": [0.11999999731779099, 0.07466666400432587, 0.11633333563804626, 0.10166666656732559, 0.10300000011920929, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], [1, 3, 7, 4, 6, 3, 1, 3, 5, 0, 1, 5, 2, 5, 9, 2, 3, 3, 6, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 0, 1, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 2, 6, 9, 8, 1, 2, 9, 9], [1, 3, 3, 3, 2, 3, 3, 3, 0, 3, 3, 1, 1, 3, 4, 1, 2, 0, 1, 3, 3, 2, 2, 3, 1, 3, 3, 1, 3, 3, 3, 0, 0, 3, 0, 1, 4, 3, 1], [49, 13, 3, 31, 84, 28, 18, 17, 0, 22, 91, 55], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 66, 66, 38, 28, 3, 1, 0, 0, 0, 0, 7, 3, 4, 3], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.multiply(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))))))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.pow(tf.math.add(beta, grad), tf.math.negative(alpha))), tf.math.add(beta, beta))), tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), alpha))))))), tf.math.add(beta, grad))), tf.math.negative(grad)))))), beta))), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), grad))))), tf.math.pow(alpha, grad)), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 3, 7, 2, 8, 3, 1, 3, 5, 0, 1, 5, 2, 5, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 1, 1, 3, 4, 1, 2, 0, 1, 3, 3, 2, 2, 3, 3, 3, 0, 1, 3, 3, 3, 0, 0, 3, 0, 1, 4, 3, 1], [38, 90, 64, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 15, 9, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, alpha)), tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.math.square(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), grad), grad), grad)), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07700435817241669, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 3, 7, 2, 3, 3, 6, 0, 1, 0, 4, 2, 5, 5, 9, 2, 3, 3, 1, 1, 8, 9, 3, 3, 6, 5, 2, 1, 2, 8, 3, 0, 8, 1, 6, 6, 0, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 2, 1, 2, 2, 3, 3, 0, 3, 3, 1, 2, 0, 4, 0, 3, 0, 1, 3, 5, 0, 2, 3, 1, 3, 3, 2, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 53, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [0, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 20, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 14, 10, 2, 1, 1, 0, 1, 0, 7, 3, 4, 4], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(beta)), alpha))), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, beta)), tf.math.add(beta, grad))), grad)))), tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1166336507.3838773, 21957520172.870163, 104448905142.96341, 288686798818.51483, 626032343681.3694, 1144158054090.8118], "accuracy": [0.10249637067317963, 0.10394927859306335, 0.09734513610601425, 0.09813763201236725, 0.10077928751707077, 0.09668471664190292], "val_loss": [4336433005.714286, 34680823808.0, 117035546331.42857, 277403954614.8571, 541788864512.0, 936191459328.0], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 7, 6, 2, 3, 3, 9, 4, 0, 4, 2, 2, 2, 0, 2, 3, 3, 1, 6, 3, 6, 3, 0, 3, 2, 6, 1, 2, 3, 4, 5, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 2, 6, 1, 8, 6, 4, 8, 1, 2, 9, 9], [3, 0, 2, 3, 3, 3, 3, 3, 0, 3, 3, 1, 2, 0, 4, 0, 3, 0, 1, 3, 5, 0, 2, 3, 1, 3, 3, 2, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 13, 3, 31, 84, 28, 18, 17, 0, 22, 91, 55], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 6, 7, 1, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, grad))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 3, 7, 6, 8, 3, 1, 2, 5, 0, 1, 5, 2, 8, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 0, 2, 3, 3, 3, 3, 3, 0, 3, 3, 1, 2, 0, 4, 0, 2, 0, 1, 3, 5, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 74, 74, 43, 31, 7, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, alpha)), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(grad, grad))))), grad)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), grad), tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))))))))), beta), tf.math.divide_no_nan(grad, beta)))), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08268392831087112, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 5, 1, 6, 8, 3, 5, 9, 9, 0, 4, 5, 9, 3, 9, 2, 3, 3, 1, 1, 9, 6, 3, 3, 6, 5, 1, 1, 2, 3, 4, 2, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 2, 0, 3, 3, 0, 2, 0, 3, 3, 1, 2, 0, 4, 3, 1, 0, 1, 2, 1, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [13, 40, 57, 41, 87, 41, 18, 17, 0, 92, 91, 16], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 1], [3, 2, 3, 9, 1, 8, 3, 0], [4, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [63, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 5, 2, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [709426429.2679083, 13354481367.255053, 63523478060.9716, 175570805661.1301, 380731261594.5265, 695834840696.8485], "accuracy": [0.10249637067317963, 0.10394927859306335, 0.09734513610601425, 0.09813763201236725, 0.10077928751707077, 0.09668471664190292], "val_loss": [2637500196.571429, 21092377161.142857, 71178452992.0, 168708898816.0, 329496142994.2857, 569354747904.0], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 3, 7, 6, 6, 3, 4, 2, 5, 0, 1, 5, 2, 5, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 2, 3, 3, 3, 3, 3, 0, 3, 3, 1, 2, 0, 4, 0, 2, 0, 1, 3, 5, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 10, 50, 87, 41, 42, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 20, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 13, 11, 1, 1, 1, 0, 1, 0, 7, 3, 4, 3], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.square(tf.math.add(grad, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(tf.math.add(sigma, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303731168533565, 2.3029210861600573, 2.303011211752498, 2.302950436712146, 2.3028940848072272, 2.3029843068881797, 2.3029883840946614, 2.3030184980522703, 2.3030481327164205, 2.3029100309509754], "accuracy": [0.09232597798109055, 0.09509972482919693, 0.09298639744520187, 0.09853387624025345, 0.09774138033390045, 0.09430722147226334, 0.09576013684272766, 0.09734513610601425, 0.0952318087220192, 0.09628847241401672], "val_loss": [1.9737205505371094, 1.9736924171447754, 1.9736838340759277, 1.9736809730529785, 1.973621027810233, 1.9736548832484655, 1.973714760371617, 1.9737566539219447, 1.973726408822196, 1.9736602646963937], "val_accuracy": [0.10000000149011612, 0.10133333504199982, 0.10233332961797714, 0.10133333504199982, 0.10266666859388351, 0.1003333330154419, 0.1003333330154419, 0.10266666859388351, 0.1003333330154419, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 4, 1, 6, 2, 3, 1, 6, 4, 6, 9, 5, 2, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 1, 3, 3, 3, 1, 0, 3, 3, 1, 2, 0, 4, 0, 3, 0, 1, 3, 5, 0, 2, 3, 1, 3, 3, 2, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [8, 1, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 20, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 4, 7, 4, 3, 1, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.math.divide_no_nan(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), grad), grad)), tf.math.add(beta, alpha)))), tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 3, 7, 6, 8, 3, 1, 3, 5, 0, 1, 5, 2, 5, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 6, 5, 6, 1, 2, 3, 4, 0, 8, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [2, 0, 2, 3, 3, 1, 3, 2, 0, 3, 3, 1, 2, 0, 4, 0, 2, 0, 1, 3, 5, 0, 2, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [4, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 3, 7, 2, 9, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [7, 39, 70, 3, 74, 13, 47, 86, 30]], "fitness": -0.04285714402794838, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 2, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.square(grad), tf.math.add(beta, grad))), tf.math.negative(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, beta))), tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303962669194949, 2.3029288141529998, 2.3029060882741685, 2.3028134901321105, 2.302841232941214, 2.303801978851558], "accuracy": [0.09113723784685135, 0.08585391938686371, 0.08889182657003403, 0.09074098616838455, 0.08479725569486618, 0.0816272646188736], "val_loss": [1.9701835087367467, 1.9702232224600655, 1.9702627999441964, 1.970301696232387, 1.970341750553676, 1.9703811236790247], "val_accuracy": [0.03799999877810478, 0.03733333200216293, 0.03700000047683716, 0.03700000047683716, 0.03633333370089531, 0.03633333370089531]}}]