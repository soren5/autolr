[{"genotype": [[0], [1, 0], [1, 1], [0], [2], [], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1], [2, 4], [0, 4, 1, 5], [86, 14], [1], [], [], [1], [], [0, 1, 0], [5], [1, 0, 2, 1, 2], [12]], "fitness": -0.12142857164144516, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.299866152067919, 2.3016728966888924, 2.3030161763761714, 2.3022929052273042, 2.3032798910374024, 2.3085197094582357], "accuracy": [0.1002509593963623, 0.08849557489156723, 0.06987188011407852, 0.09615638852119446, 0.09668471664190292, 0.09325055778026581], "val_loss": [1.9696869850158691, 1.974146911076137, 1.9734579495021276, 1.973980154309954, 1.975759846823556, 1.9952801295689173], "val_accuracy": [0.11666666716337204, 0.05066666752099991, 0.08233333379030228, 0.09799999743700027, 0.0976666659116745, 0.09733333438634872]}}, {"genotype": [[0], [1, 0], [1, 1], [0], [2], [], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1], [2, 3, 9], [0, 4, 1, 5], [86, 14], [1], [], [], [1], [], [0, 1, 0], [5], [1, 0, 2, 1, 2], [12]], "fitness": -0.12114285677671432, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.299867298782242, 2.3016769087089446, 2.303027370051307, 2.3023068899208323, 2.3032995758905637, 2.3085226619941146], "accuracy": [0.1002509593963623, 0.0882314071059227, 0.07026813179254532, 0.09602430462837219, 0.0948355570435524, 0.09298639744520187], "val_loss": [1.9696884155273438, 1.9741627829415458, 1.973461083003453, 1.9739979335239954, 1.9757650239127023, 1.9952757017953056], "val_accuracy": [0.11633333563804626, 0.05133333429694176, 0.08266666531562805, 0.0976666659116745, 0.0989999994635582, 0.09733333438634872]}}, {"genotype": [[0], [0, 0], [0, 1], [0], [3], [], [0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0], [7, 1, 6, 7, 9], [3, 3, 1, 2], [16, 56], [0], [1], [], [6], [], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 3, 9, 4, 6, 6, 6, 6, 0], [1, 0, 1, 1, 3, 3], [52, 10]], "fitness": -0.10000000149011612, "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, alpha), tf.math.negative(sigma))), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 15, 9, 6, 2]}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], [5, 6, 5, 3, 4, 1, 1, 6, 6, 0, 2, 3, 7, 6, 5, 7, 3, 9, 2, 1, 6, 4, 3, 5, 2, 9, 0, 0, 3, 5, 3, 8, 8, 5, 5, 4, 3, 6, 4, 0, 6, 1, 0, 3, 2, 1, 6, 0, 6, 1, 8, 5, 3, 5, 8, 7, 4, 6, 8, 7, 9, 6, 4, 4, 0, 6, 9], [3, 0, 1, 2, 3, 2, 1, 2, 1, 3, 1, 2, 3, 0, 2, 1, 2, 1, 0, 2, 3, 0, 3, 3, 3, 1, 2, 1, 2, 3, 2, 2, 2, 1, 1, 2, 0, 2, 0], [56, 43, 29, 69, 15, 91, 56, 94, 19, 57], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [8, 1, 4, 0, 3, 3, 6], [0, 3, 1, 5, 2, 3], [64], [0, 1], [0], [8], [1], [], [1], [], [2], [41]], "fitness": -0.10000000149011612, "mapping_values": [1, 106, 106, 67, 39, 10, 13, 13, 7, 6, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, grad))), tf.math.add(alpha, alpha))))), tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha)))))))), tf.math.add(alpha, grad))))), tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, alpha))))))))), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))))))))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.subtract(tf.math.sqrt(grad), tf.math.square(tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.add(grad, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(grad, tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))))))), grad), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.pow(alpha, grad))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(alpha, grad))))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [2, 5, 3, 6, 6, 4, 2, 1, 2, 2, 4, 9, 7, 4, 8, 1, 0, 9, 7], [2, 3, 3, 3, 1, 3, 1, 0, 2, 2, 2, 3, 1], [38, 13, 76], [0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [9], [0, 3, 1, 5, 4, 2], [28, 68], [1], [1], [], [], [], [0, 0, 1, 0, 1, 1, 0, 1, 1], [8, 4, 2], [1, 2, 2], [41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 6, 3, 3, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.pow(alpha, tf.math.add(beta, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 2, 6, 9, 3, 9], [0, 1, 2], [26, 16], [0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0], [7, 1, 6, 7, 9, 9], [2, 0, 1, 5, 4, 2], [45, 14, 22], [0, 1, 1], [0], [3], [6], [], [1], [], [1], [6]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 9, 9, 6, 3, 3, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [7], [2, 0], [80], [1], [1], [], [1, 2], [86, 14], [1], [], [5], [1], [], [0, 1, 0], [1, 9], [1, 0, 2, 1, 2], [66, 3]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [8.880390757001659e+25, 41.877068678433034, 137.283064733769, 289.6976482455347, 500.27591051618896, 768.2295355272173], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [14.914965493338448, 76.524658203125, 187.59148733956474, 348.4090576171875, 558.8489467075893, 818.8895089285714], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}, {"genotype": [[0], [1, 0, 1, 0], [1], [2, 5], [2], [], [0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [6, 2, 9, 5], [0, 3, 1, 5, 4, 2], [28, 68], [0, 1], [1], [], [6], [], [1, 1, 1], [8], [1], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08334434032440186, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0], [8], [3, 0, 1, 2, 3, 2, 1, 2, 1], [56], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [5, 2, 4, 1, 5, 1, 4, 2, 8, 3, 8, 0, 4, 5, 0, 2, 0, 0, 9], [1], [16, 56, 75, 94], [0, 1], [0], [8], [1], [], [1], [], [0], [41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025189173172778, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [8, 9], [1, 1, 2, 2, 0, 3, 3, 1, 0, 1], [38, 13, 76], [0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1], [9], [0, 4, 1, 5], [86, 14], [1], [0, 1], [], [], [], [0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 0], [1, 0, 2, 1, 2], [12]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024554628942306, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0], [1, 1], [0], [2], [], [0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1], [2, 6], [0, 4, 1, 5], [86, 14], [1], [], [], [1], [], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 4, 2, 0, 2], [1, 0, 2, 1, 2], [12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 10, 5, 5, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(tf.math.add(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.math.add(alpha, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0], [1, 1], [2, 5, 9], [2], [26, 70], [0, 0, 0, 1, 0], [0, 0, 1, 1, 1], [2, 4], [2, 3, 1, 5, 4, 2], [86, 14], [0], [1], [], [6], [], [0, 1], [8], [2], [12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), grad)), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0], [1, 1], [0], [2], [], [0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0], [2, 4, 1], [3, 3, 1, 0], [86, 14], [1], [1], [], [1], [], [0, 1, 0, 1, 0], [2, 6, 9], [1, 0, 3, 1, 2], [12, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303289664530121, 2.6557345020615144, 16.36702223054611, 79.72792235417153, 201.05434393438728, 379.8002702911784], "accuracy": [0.10619468986988068, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9964298520769392, 4.206029619489398, 38.25159018380301, 122.20470319475446, 255.78011648995536, 438.9561331612723], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}, {"genotype": [[0], [0, 0], [1], [8], [1, 0, 1, 2, 3, 2, 1, 2, 1], [], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [7, 2, 0, 2, 3, 7, 5, 6], [0, 3, 3, 2, 2], [15], [0], [1], [5], [6], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [9], [2], [12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024554628942306, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0], [1, 1], [0], [2], [52], [0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0], [7, 4, 6, 7, 9], [3, 3, 1, 2], [16, 56], [0], [1], [], [1], [], [1], [], [1], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, alpha), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08453308790922165, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0], [1, 1], [0], [2], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [2, 4, 2, 8, 1, 9, 4, 4, 9, 7, 9, 7, 8, 3, 8, 6], [0, 3, 1, 5, 4, 5, 2, 1], [16, 56, 75, 94], [0, 0, 1], [0], [9], [1], [23], [1], [], [1, 0, 2, 1, 2], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08334434032440186, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1], [2, 0, 5, 0], [1, 0], [70], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [3, 9, 9], [2, 3, 1, 5, 4, 5, 3, 3, 0, 0, 1, 5, 5, 0], [16, 8, 38], [0], [1], [], [6], [], [1], [], [1], [6]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3025189173172778, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0], [1, 1], [2, 5], [2], [], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1], [9, 2, 9, 5], [0, 1, 2, 5], [28, 68], [1], [1], [], [6], [], [1, 1, 0], [5], [1, 0, 2, 1, 2], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08334434032440186, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [0], [3, 0, 1, 2, 3, 2, 1, 2, 1], [], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 4, 5, 6, 5], [0, 4, 1, 5], [86, 14], [1], [], [], [1], [], [0, 1, 0], [5], [0], [12]], "fitness": -0.081142857670784, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3015258207045304, 2.302095585086043, 2.302217090480977, 2.3025007554647425, 2.303104713561119, 2.3028105163712778, 2.302998330252691, 2.3009059740929887, 2.3019575453264336, 2.3018251101511846, 2.3016652316465165, 2.3028261751593884, 2.3026478664356373, 2.3029501110634167, 2.3033062831647895, 2.301200618833331, 2.3028495994777476, 2.3021376572264938, 2.302508542786783, 2.302520955259207, 2.2997125632664344, 2.300916085043572, 2.302162001901661, 2.3029750510135014, 2.300984426905781, 2.302027462999724, 2.30215574013102, 2.3005593401833675, 2.3013129826975125, 2.300782065586155, 2.300404141654963, 2.3016085209013246, 2.3013683178830755, 2.3018821328779993, 2.3011629077594957, 2.301247307180713, 2.3012893279278046, 2.3008898584960145, 2.3012905654622546, 2.300797527271916, 2.3008377604622487, 2.301211078798987, 2.3012112744842397, 2.3016251640989953, 2.300527206548626, 2.3007272369337906, 2.3009734760579685, 2.2997961487390297, 2.3015238662453186, 2.300403020605829, 2.3002047135357246, 2.300914132694259, 2.2991103231631342, 2.301272631415822, 2.3011335032632747, 2.300746858080601, 2.3008843854496805, 2.302034180319588, 2.300432250799205, 2.300482466929089, 2.3001817341226203, 2.300704528249061, 2.3007475639205204, 2.3007966316985478, 2.3013012179955514, 2.301158951069181, 2.3005093963249186, 2.3014775315421905, 2.300535358347834, 2.301920422536507, 2.3018588771311173, 2.3004017358978173, 2.3005493408999724, 2.3010718271386246, 2.3005376488478144, 2.3014800981870023, 2.300085976076258, 2.301333826168606, 2.3000196340833248, 2.30111766129185], "accuracy": [0.09377889335155487, 0.0886276587843895, 0.08968432247638702, 0.09113723784685135, 0.08809932321310043, 0.08836349099874496, 0.09153348207473755, 0.09232597798109055, 0.09087307006120682, 0.09496764093637466, 0.09430722147226334, 0.08506141602993011, 0.08942015469074249, 0.09430722147226334, 0.0948355570435524, 0.08955223858356476, 0.08506141602993011, 0.08809932321310043, 0.09034473448991776, 0.08492933213710785, 0.08875974267721176, 0.09391097724437714, 0.09153348207473755, 0.08466517180204391, 0.09615638852119446, 0.09576013684272766, 0.09074098616838455, 0.09800554811954498, 0.09060890227556229, 0.09325055778026581, 0.09325055778026581, 0.09311848133802414, 0.09377889335155487, 0.08955223858356476, 0.09391097724437714, 0.08875974267721176, 0.09259014576673508, 0.10196803510189056, 0.0936468094587326, 0.09100515395402908, 0.09602430462837219, 0.09285431355237961, 0.09470347315073013, 0.08955223858356476, 0.09245806187391281, 0.09219389408826828, 0.09945846349000931, 0.09787346422672272, 0.09470347315073013, 0.09285431355237961, 0.0948355570435524, 0.0948355570435524, 0.0956280529499054, 0.09549596905708313, 0.09681680053472519, 0.0940430611371994, 0.0948355570435524, 0.09113723784685135, 0.10011887550354004, 0.09549596905708313, 0.09945846349000931, 0.09192973375320435, 0.09866596013307571, 0.09576013684272766, 0.09628847241401672, 0.10038304328918457, 0.09589222073554993, 0.0944393053650856, 0.09932637959718704, 0.08717474341392517, 0.09021265059709549, 0.09391097724437714, 0.09430722147226334, 0.09351472556591034, 0.1018359512090683, 0.09259014576673508, 0.10249637067317963, 0.09774138033390045, 0.09972262382507324, 0.10196803510189056], "val_loss": [1.9713585717337472, 1.9713352748325892, 1.9713127272469657, 1.971290179661342, 1.971268926348005, 1.9712488991873605, 1.971229076385498, 1.971209934779576, 1.9711905206952776, 1.9711711747305733, 1.9711525780814034, 1.9711337089538574, 1.9711155210222517, 1.9710982186453683, 1.9710815293448312, 1.971064499446324, 1.9710475376674108, 1.9710321426391602, 1.971017565046038, 1.971003804888044, 1.9709901809692383, 1.9709769657679967, 1.9709649767194475, 1.9709535326276506, 1.9709420885358537, 1.9709309850420271, 1.9709208352225167, 1.9709110260009766, 1.970902647290911, 1.9708946091788155, 1.9708867073059082, 1.9708794866289412, 1.9708715166364397, 1.9708642278398787, 1.9708579608372279, 1.9708519663129533, 1.9708468573434013, 1.9708424976893835, 1.9708385467529297, 1.9708353451320104, 1.9708325522286552, 1.9708303724016463, 1.970827647617885, 1.9708251953125, 1.9708236285618372, 1.9708224024091447, 1.9708226748875208, 1.9708226748875208, 1.9708232879638672, 1.9708247865949358, 1.9708266258239746, 1.9708290781293596, 1.970832415989467, 1.970837116241455, 1.9708434513636999, 1.9708501952035087, 1.970858369554792, 1.9708675656999861, 1.970876829964774, 1.9708868435450964, 1.9708975383213587, 1.9709087780543737, 1.9709205627441406, 1.97093289239066, 1.9709459713527135, 1.9709593909127372, 1.9709734235491072, 1.9709877286638533, 1.9710027149745397, 1.971017837524414, 1.9710334369114466, 1.9710499899727958, 1.9710668155125208, 1.9710844584873743, 1.971101897103446, 1.9711204256330217, 1.9711392947605677, 1.9711589132036482, 1.971179417201451, 1.9711995124816895], "val_accuracy": [0.03733333200216293, 0.03766666725277901, 0.03799999877810478, 0.03866666555404663, 0.039000000804662704, 0.03933333232998848, 0.04066666588187218, 0.04066666588187218, 0.041333332657814026, 0.041333332657814026, 0.04266666620969772, 0.04333333298563957, 0.04333333298563957, 0.04466666653752327, 0.04500000178813934, 0.045666664838790894, 0.04600000008940697, 0.04833333194255829, 0.04833333194255829, 0.04933333396911621, 0.050333332270383835, 0.050333332270383835, 0.050999999046325684, 0.05066666752099991, 0.05066666752099991, 0.05166666582226753, 0.052000001072883606, 0.052000001072883606, 0.05400000140070915, 0.054999999701976776, 0.05533333495259285, 0.055666666477918625, 0.05666666850447655, 0.0573333315551281, 0.05766666680574417, 0.058666665107011795, 0.05999999865889549, 0.060333333909511566, 0.061666667461395264, 0.06199999898672104, 0.06199999898672104, 0.06199999898672104, 0.06266666948795319, 0.06266666948795319, 0.06266666948795319, 0.06266666948795319, 0.06233333423733711, 0.06300000101327896, 0.06333333253860474, 0.06400000303983688, 0.06466666609048843, 0.06599999964237213, 0.0663333311676979, 0.06700000166893005, 0.0676666647195816, 0.0676666647195816, 0.06833333522081375, 0.06866666674613953, 0.0689999982714653, 0.07000000029802322, 0.07066666334867477, 0.07199999690055847, 0.0729999989271164, 0.07233333587646484, 0.07333333045244217, 0.07333333045244217, 0.07266666740179062, 0.07366666942834854, 0.07433333247900009, 0.07500000298023224, 0.07699999958276749, 0.07800000160932541, 0.07866666465997696, 0.07866666465997696, 0.0793333351612091, 0.0793333351612091, 0.07833333313465118, 0.07900000363588333, 0.0793333351612091, 0.0793333351612091]}}, {"genotype": [[0], [0, 0], [1, 1], [], [2], [], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 3, 2, 8, 7, 5, 6], [0, 4, 1, 5, 0], [46, 63], [1], [], [], [6], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [7, 7, 7, 2, 1, 5, 9, 0], [3, 2, 2, 2, 3], [61, 64, 76]], "fitness": -0.0357142873108387, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3015434257326945, 2.3021439548339258, 2.3023342875882604, 2.302626708904514, 2.303342790242121, 2.3030742305601435], "accuracy": [0.09417514503002167, 0.0886276587843895, 0.08942015469074249, 0.09166556596755981, 0.0870426595211029, 0.08875974267721176], "val_loss": [1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717, 1.971381732395717], "val_accuracy": [0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236]}}]