[{"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 2, 2, 2, 3, 1, 4, 3, 2, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 3, 0, 3, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.8285714387893677, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 13, 13, 4, 3, 1, 1, 0, 0, 11, 6, 5, 3], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, grad), grad))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))))))), tf.math.add(beta, grad)), grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.pow(tf.math.add(tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), sigma), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.1048765670606064, 1.661596899334277, 1.198787383777496, 1.0068760663762997, 0.9279322798745571, 0.7922429980193745, 0.7552064419217853, 0.7712824533108817, 0.6777768405578738, 0.6925103410974139, 0.6495065391181781, 0.6657271171604968, 0.6165329377412827, 0.6149982913704659, 0.5713297138597042, 0.5711075609953112, 0.5638719290522474, 0.5433537296379058, 0.5626704646863674, 0.5352963175535549, 0.5100505816591666, 0.5113310311779354, 0.5126823702461258, 0.49208297585893096, 0.49879236876956695, 0.469797607709577, 0.4624882156917243, 0.445761037284609, 0.45001752625571706, 0.4534448806588613, 0.4400014873658504, 0.4462159020537635, 0.4235861646957433, 0.42337310113816795, 0.4232345579511627, 0.40259817967309675, 0.3908301968348418], "accuracy": [0.3039228618144989, 0.47747984528541565, 0.579447865486145, 0.6390172839164734, 0.6457535624504089, 0.6960771083831787, 0.7129837274551392, 0.707568347454071, 0.7395324110984802, 0.7272487282752991, 0.7510236501693726, 0.7405890822410583, 0.7584202885627747, 0.7642319202423096, 0.7864218950271606, 0.7839123010635376, 0.7774402499198914, 0.7936864495277405, 0.7860256433486938, 0.7979130744934082, 0.8064984679222107, 0.8043851256370544, 0.8029322624206543, 0.8119139075279236, 0.806630551815033, 0.826310932636261, 0.8278959393501282, 0.8345000743865967, 0.8281601071357727, 0.8231409192085266, 0.8323867321014404, 0.8318583965301514, 0.8481045961380005, 0.8408400416374207, 0.8388587832450867, 0.8453308939933777, 0.8573504090309143], "val_loss": [1.2894677775246757, 1.2924649034227644, 0.751279320035662, 0.7484699147088187, 0.5499229260853359, 0.5674995354243687, 0.6112007243292672, 0.5118443965911865, 0.5113258361816406, 0.4955938032695225, 0.5132995843887329, 0.4826827219554356, 0.47310287611825125, 0.448802045413426, 0.5203728675842285, 0.45294608388628277, 0.450165969984872, 0.43854091848645893, 0.40915035349982126, 0.40490812063217163, 0.4564091648374285, 0.4484487090791975, 0.41311912877219065, 0.3831402659416199, 0.3874570642198835, 0.3911535569599697, 0.3892246059009007, 0.37178787163325716, 0.42935666867664884, 0.36727391821997507, 0.3714697616440909, 0.356634863785335, 0.3570282203810556, 0.3557962604931423, 0.35083157675606863, 0.35565712622233797, 0.37881702184677124], "val_accuracy": [0.5016666650772095, 0.5920000076293945, 0.6830000281333923, 0.6356666684150696, 0.7559999823570251, 0.753000020980835, 0.7106666564941406, 0.7573333382606506, 0.7676666378974915, 0.7590000033378601, 0.7536666393280029, 0.7720000147819519, 0.800000011920929, 0.7893333435058594, 0.7523333430290222, 0.7823333144187927, 0.793666660785675, 0.8036666512489319, 0.8090000152587891, 0.828000009059906, 0.7799999713897705, 0.8040000200271606, 0.8180000185966492, 0.8306666612625122, 0.8399999737739563, 0.8166666626930237, 0.8180000185966492, 0.8453333377838135, 0.8133333325386047, 0.8316666483879089, 0.8303333520889282, 0.8539999723434448, 0.8366666436195374, 0.8503333330154419, 0.846666693687439, 0.8443333506584167, 0.8190000057220459]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 1, 2, 2, 4, 0, 1, 4, 5, 2, 6, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 3, 0, 3, 1, 3, 0, 3, 2, 2, 3, 3, 2, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 7, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [2, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 8, 4, 0, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 3, 0, 1, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [92, 71, 99, 12, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 24, 24, 13, 11, 2, 3, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(grad, grad), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, alpha))))), grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, beta), tf.math.add(beta, beta)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 2, 2, 2, 0, 1, 4, 3, 5, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 1, 3, 0, 3, 0, 2, 3, 3, 2, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [26, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 12, 10, 4, 3, 1, 1, 0, 0, 11, 6, 5, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.add(sigma, tf.math.pow(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), sigma), tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [1.0034963399844735e+22, 958.0491476103048, 1745.3884617225165, 2533.481166990253, 3321.3072304192187, 4109.2124746411055], "accuracy": [0.09206181764602661, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [541.11962890625, 1214.1801060267858, 1887.9505440848213, 2561.43359375, 3235.058523995536, 3908.474051339286], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 9, 2, 2, 2, 2, 2, 3, 1, 4, 3, 5, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 0, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [34, 79, 37, 41, 87, 41, 18, 17, 0, 92, 91], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [9, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 2, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 1, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [74, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 9, 4, 5, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.pow(tf.math.add(alpha, sigma), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 8, 8, 2, 8, 2, 2, 5, 1, 4, 3, 5, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 2, 2, 2, 3, 3, 3, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [64, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 2, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [37, 71, 99, 12, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 4, 4, 3, 1, 0, 1, 0, 0, 0, 0, 11, 6, 5, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.math.pow(tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.306051572237379, 2612.358612844044, 171223331.99049827, 11094413614619.795, 7.213468387384654e+17, 5.057362416396724e+22, 3.2269342233496283e+27], "accuracy": [0.08902391046285629, 0.09153348207473755, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.5324290820530484, 75409.34151785714, 4942676260.571428, 323923365630537.1, 2.122864168996288e+19, 1.3912402617934074e+24, 9.117632179689275e+28], "val_accuracy": [0.056333333253860474, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 2, 2, 2, 2, 1, 4, 3, 2, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 1, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 5, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 3, 3, 3, 1, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 1, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [63, 79, 37, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 0, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 3, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 71, 71, 39, 32, 7, 3, 1, 1, 0, 0, 6, 3, 3, 1], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(grad, grad), grad)), tf.math.multiply(alpha, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), alpha)), beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad))))))))), tf.math.divide_no_nan(alpha, alpha))))))))), grad), tf.math.add(beta, alpha)), tf.math.add(beta, alpha))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06577730923891068, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 3, 2, 1, 2, 2, 2, 0, 4, 4, 4, 2, 6, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 2, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 82, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 2, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 2, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [37, 71, 99, 12, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 11, 5, 6, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(sigma, tf.math.pow(tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08334434032440186, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 2, 2, 2, 3, 1, 4, 3, 2, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 2, 3, 3, 3, 0, 3, 3, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 69, 47, 41, 87, 41, 18, 17, 0, 92, 91], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 0, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [0, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 59, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 13, 13, 2, 1, 0, 0, 0, 0, 10, 6, 4, 3], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), grad)), grad)), tf.math.add(beta, beta))))), tf.math.add(beta, grad)), grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.pow(tf.math.add(tf.math.negative(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), sigma)))", "other_info": {"loss": [43905938.8935807, 855868243.6370361, 3970302284.8574824, 11030320643.85471, 23391374427.56624, 42973954508.401], "accuracy": [0.09879804402589798, 0.09879804402589798, 0.09813763201236725, 0.09721305221319199, 0.09734513610601425, 0.09972262382507324], "val_loss": [165385321.14285713, 1321871177.142857, 4459965586.285714, 10570152521.142857, 20642959360.0, 35668883163.42857], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [1, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 9, 2, 2, 8, 2, 2, 4, 1, 4, 3, 0, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [0, 2, 0, 3, 3, 3, 3, 2, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 1, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 94, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 6, 9, 6, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 3, 0, 2, 3, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 9, 5, 4, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(beta, sigma), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [2.3026794900731673, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 3, 4, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 3, 0, 3, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 79, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [1, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 6, 1, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 3, 0, 3, 3, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 13, 13, 4, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(grad, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), tf.math.add(beta, grad))), grad)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0940430611371994, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 1, 8, 5, 5, 4, 2, 5, 3, 2, 3, 5, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 2, 3, 3, 3, 0, 1, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [63, 79, 37, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 2, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 26, 26, 15, 11, 3, 3, 1, 1, 0, 0, 9, 4, 5, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, grad))))))), tf.math.multiply(tf.math.multiply(grad, tf.math.pow(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.pow(tf.math.add(beta, sigma), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 0, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 1, 8, 5, 8, 2, 2, 4, 1, 4, 3, 8, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 2, 3, 3, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 1, 4, 2, 2, 9, 5, 1, 2, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 2, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 16, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 23, 23, 13, 10, 3, 1, 1, 0, 1, 0, 21, 12, 9, 4], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, grad))))), tf.math.multiply(grad, tf.math.add(beta, grad))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.pow(alpha, sigma), tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.add(tf.math.negative(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), sigma), tf.math.pow(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 2, 2, 0, 3, 1, 4, 3, 2, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 2, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 2, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 4, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08136309683322906, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 3, 2, 2, 3, 1, 4, 3, 2, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 3, 2, 3, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [8, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 99, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 74, 74, 41, 33, 7, 4, 3, 2, 1, 0, 11, 6, 5, 3], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.multiply(grad, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), beta))), tf.math.add(beta, grad))), tf.math.add(beta, grad)))))), grad), tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), grad), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(grad, alpha))))), tf.math.add(beta, alpha))))))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.pow(tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), sigma), tf.math.multiply(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 8, 2, 2, 2, 3, 1, 4, 0, 2, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 3, 0, 3, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 1, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 1, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [26, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 19, 11, 8, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.pow(tf.math.add(tf.math.multiply(sigma, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.square(tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.pow(alpha, beta)), sigma), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 0, 2, 2, 3, 1, 4, 3, 2, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 3, 0, 3, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 2, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [31, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043714284896850586, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 2, 1, 0, 0, 0, 0, 11, 6, 5, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.math.pow(tf.math.add(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), sigma), beta)))", "other_info": {"loss": [2.3032071411869453, 2.3015898097192826, 2.3022500648317146, 2.302735905338036, 2.3017272176743813, 2.3016158964466724], "accuracy": [0.08175934851169586, 0.09153348207473755, 0.09351472556591034, 0.09113723784685135, 0.09179764986038208, 0.09074098616838455], "val_loss": [1.9698835100446428, 1.9698835100446428, 1.9698835100446428, 1.9698835100446428, 1.9698835100446428, 1.9698835100446428], "val_accuracy": [0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 6, 2, 2, 2, 2, 3, 1, 4, 3, 2, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 2, 2, 3, 3, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 3, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 2, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303445035566381, 2.3018637703646285, 2.3025260319594523, 2.3030106048258996, 2.3020007927120796, 2.3018951843033975], "accuracy": [0.0812310129404068, 0.09126931428909302, 0.09298639744520187, 0.09060890227556229, 0.09047681838274002, 0.09008057415485382], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 1, 8, 5, 8, 2, 2, 5, 1, 4, 5, 5, 3, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 2, 0, 3, 2, 3, 2, 3, 0, 2, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [63, 79, 37, 41, 87, 41, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 2, 2, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 3, 2, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 71, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 0, 65, 65, 38, 27, 6, 7, 4, 3, 1, 0, 3, 1, 2, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, beta), tf.math.square(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta))))))))), tf.math.multiply(tf.math.pow(grad, beta), tf.math.add(grad, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), grad)))))))), tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), alpha)), beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(grad)))), tf.math.pow(beta, alpha))))))))), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.303445035566381, 2.3018637703646285, 2.3025260319594523, 2.3030106048258996, 2.3020007927120796, 2.3018951843033975], "accuracy": [0.0812310129404068, 0.09126931428909302, 0.09298639744520187, 0.09060890227556229, 0.09047681838274002, 0.09008057415485382], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 2, 2, 2, 5, 2, 3, 1, 4, 3, 2, 4, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 0, 1, 6, 6, 8, 4, 4, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 0, 3, 3, 2, 3, 3, 0, 2, 3, 3, 3, 2, 4, 0, 0, 3, 2, 3, 5, 0, 2, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [26, 79, 37, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [6, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 1, 4, 2, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 2, 0, 0, 1, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [46, 64, 99, 3, 74, 13, 47, 86, 30]], "fitness": -0.043142858892679214, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 27, 15, 12, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.math.pow(tf.math.add(tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), beta), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.pow(alpha, beta)), sigma), tf.math.pow(sigma, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, sigma))))))))", "other_info": {"loss": [2.303445035566381, 2.3018637703646285, 2.3025260319594523, 2.3030106048258996, 2.3020007927120796, 2.3018951843033975], "accuracy": [0.0812310129404068, 0.09126931428909302, 0.09298639744520187, 0.09060890227556229, 0.09047681838274002, 0.09008057415485382], "val_loss": [1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586, 1.970144271850586], "val_accuracy": [0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [7, 8, 8, 7, 2, 8, 4, 4, 8, 8, 1, 4, 0, 8, 4, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 2, 6, 1, 2, 9, 2, 0, 1, 4, 4, 2, 6, 3, 4, 2, 3, 3, 5, 1, 3, 2, 3, 3, 6, 2, 6, 1, 2, 8, 2, 0, 9, 1, 6, 6, 8, 4, 6, 8, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 0, 2, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 0, 1, 2, 3, 5, 0, 3, 3, 2, 1, 3, 1, 1, 3, 2, 1, 3, 3, 0, 1, 4, 3], [99, 83, 47, 41, 87, 41, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1], [2, 2, 1, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 2, 9, 6, 3, 9, 5, 1, 4, 0, 4, 4, 4, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 1, 0, 3, 0, 2, 3, 3, 0, 0, 1, 3, 3, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [37, 71, 99, 12, 74, 13, 47, 86, 30]], "fitness": -0.0037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 0, 10, 10, 6, 4, 2, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), tf.math.add(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.451278056450933, 2.73276794994386, 2.497596672859489, 2.444708836376234, 2.4103361374005163, 2.383078385400829, 2.3900236245458784, 2.410494130883691, 2.4370499071018683, 2.4705837400219997, 2.5139411444267843, 2.5619026663564437, 2.615476173794643, 2.662489265577432, 2.726543375057331, 2.8034653383365096, 2.883043922689597, 2.975467490009927, 3.0605993261111806, 3.155127208561331, 3.2426071198798128], "accuracy": [0.02588825859129429, 0.019284110516309738, 0.023378681391477585, 0.02324659936130047, 0.04345529153943062, 0.05560692027211189, 0.06036190688610077, 0.06551314145326614, 0.07211729139089584, 0.07594769448041916, 0.08268392831087112, 0.08558975160121918, 0.08096684515476227, 0.08981640636920929, 0.08677849918603897, 0.09113723784685135, 0.09747721254825592, 0.09576013684272766, 0.10077928751707077, 0.09536388516426086, 0.0956280529499054], "val_loss": [2.2125425338745117, 2.1545462608337402, 2.0790933200291226, 2.0653325489589145, 2.0582607814243863, 2.046100275857108, 2.062171254839216, 2.0904010363987515, 2.1019067764282227, 2.141512257712228, 2.177665506090437, 2.2320782116481235, 2.264540195465088, 2.308317252567836, 2.379148415156773, 2.439530168260847, 2.5315987042018344, 2.6023547308785573, 2.6845338685171947, 2.7486707142421176, 2.838228225708008], "val_accuracy": [0.017666665837168694, 0.01133333332836628, 0.009666666388511658, 0.024000000208616257, 0.01366666704416275, 0.020666666328907013, 0.012333333492279053, 0.02566666714847088, 0.017999999225139618, 0.03466666489839554, 0.04899999871850014, 0.09399999678134918, 0.03966666758060455, 0.10000000149011612, 0.10000000149011612, 0.10133333504199982, 0.09866666793823242, 0.09866666793823242, 0.09966666996479034, 0.1003333330154419, 0.10066666454076767]}}]