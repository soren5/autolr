[{"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 1, 3, 3, 3, 2, 0, 2, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.8325714468955994, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2656791705213535, 2.0971677495094574, 1.7316800383780815, 1.384571921477433, 0.995449453722201, 0.8712912522302627, 0.8359525640485403, 0.770479703749396, 0.7253675065130653, 0.6857336963078035, 0.6514607636117035, 0.6637577260600231, 0.6713818172343482, 0.5913549281303452, 0.5882958551014357, 0.5836105452883182, 0.5652050804531318, 0.5450062100535544, 0.5217644552891013, 0.5274199375607445, 0.5360217308717837, 0.4923538842441824, 0.49880329210209323, 0.49946079725649817, 0.474285799990776, 0.4795436130900818, 0.4522027746679414, 0.46554897751365404, 0.43422958369362763, 0.45032323251909284, 0.43950523302429434, 0.43302428249228886, 0.4353331592750272, 0.4112340797443967, 0.43801247182775405, 0.38507760422907766, 0.39475433817550315], "accuracy": [0.2565050721168518, 0.2957337200641632, 0.43983620405197144, 0.5239730477333069, 0.635979413986206, 0.6778497099876404, 0.683529257774353, 0.7067758440971375, 0.7194558382034302, 0.7364945411682129, 0.7553823590278625, 0.7453441023826599, 0.7413815855979919, 0.7759873270988464, 0.7745344042778015, 0.7775723338127136, 0.7905164361000061, 0.7964601516723633, 0.8000264167785645, 0.7991018295288086, 0.7967243194580078, 0.8153480291366577, 0.8117818236351013, 0.8129705190658569, 0.8169330358505249, 0.8148196935653687, 0.828820526599884, 0.8265751004219055, 0.8315942287445068, 0.8297450542449951, 0.8329150676727295, 0.8364813327789307, 0.8347642421722412, 0.8422929644584656, 0.8317263126373291, 0.8531237840652466, 0.8511425256729126], "val_loss": [1.9592763355800085, 1.8818793296813965, 1.0699761595044817, 0.941962548664638, 0.6439777782985142, 0.5895517553601947, 0.605719906943185, 0.548404506274632, 0.5279077461787632, 0.4762595551354544, 0.46539556980133057, 0.568224378994533, 0.4645484856196812, 0.4335551176752363, 0.4738328627177647, 0.427885787827628, 0.4296391691480364, 0.4276638116155352, 0.44180875165121897, 0.40771918637411936, 0.42642269815717426, 0.4019775816372463, 0.3762421693120684, 0.37802023547036306, 0.3813154527119228, 0.37247343574251446, 0.3894919923373631, 0.3670931543622698, 0.3798828125, 0.4136770452771868, 0.370839033808027, 0.35600984948022024, 0.364057719707489, 0.3911928279059274, 0.3500624639647348, 0.3620431934084211, 0.37613426787512644], "val_accuracy": [0.25333333015441895, 0.3266666531562805, 0.5360000133514404, 0.6179999709129333, 0.6926666498184204, 0.7203333377838135, 0.7076666951179504, 0.7540000081062317, 0.7683333158493042, 0.7860000133514404, 0.7919999957084656, 0.7493333220481873, 0.7863333225250244, 0.7956666946411133, 0.7873333096504211, 0.8016666769981384, 0.8100000023841858, 0.8009999990463257, 0.7976666688919067, 0.8299999833106995, 0.8119999766349792, 0.8263333439826965, 0.8349999785423279, 0.8299999833106995, 0.8309999704360962, 0.8353333473205566, 0.8303333520889282, 0.843666672706604, 0.8366666436195374, 0.8080000281333923, 0.8259999752044678, 0.8489999771118164, 0.8429999947547913, 0.8159999847412109, 0.8486666679382324, 0.8426666855812073, 0.8293333053588867]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 2, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 3, 0, 2, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [85, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.17171429097652435, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(alpha, grad)), beta)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.add(sigma, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.682236964219849, 3.562242052952186, 4.934235094277268, 8.404661444247186, 24.261984857255126, NaN], "accuracy": [0.160084530711174, 0.12917712330818176, 0.11900673806667328, 0.1200634017586708, 0.11715757846832275, 0.09734513610601425], "val_loss": [2.550924233027867, 3.368013313838414, 4.9250673566545755, 9.273268835885185, 420.20509556361606, NaN], "val_accuracy": [0.20233333110809326, 0.16566666960716248, 0.13233333826065063, 0.1366666704416275, 0.06233333423733711, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 1, 3, 3, 3, 2, 0, 2, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [7, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [0, 0, 3, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 8, 9, 0, 1, 1, 0, 1, 0, 10, 6, 4, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.math.subtract(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.square(sigma))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302614366625593, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [3, 8, 7, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 1, 3, 3, 3, 2, 0, 2, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0], [6, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [7, 1, 4, 6, 8, 4, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 7, 7, 3, 4, 0, 5, 4, 2, 2, 0, 22, 13, 9, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, alpha)), beta)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.pow(tf.math.negative(beta), tf.math.pow(sigma, tf.math.pow(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 3, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 6, 4, 3], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.pow(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [3, 8, 7, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 8, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [6, 1, 7, 6, 5, 1, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 3, 3, 2, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 22, 13, 9, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.math.subtract(sigma, tf.math.add(tf.math.divide_no_nan(sigma, tf.math.square(beta)), tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.pow(tf.math.negative(beta), tf.math.pow(sigma, tf.math.pow(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 1, 3, 3, 3, 2, 0, 2, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [0, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 3, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [8, 8, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 3, 0, 2, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [85, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 3, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 3, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 0, 3, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 6, 4, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.multiply(tf.math.pow(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.square(sigma))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07251353561878204, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [6, 7, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 1, 3, 3, 3, 2, 0, 2, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [3, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [0, 2, 7], [99], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [6, 1, 4, 6, 5, 9, 2, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [0, 0, 2, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 34, 22, 12, 7], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.negative(tf.math.pow(tf.math.pow(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(beta, tf.math.multiply(sigma, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(sigma, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), beta), alpha)))))), tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 3, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [6, 1, 4, 6, 5, 9, 2, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 3, 0, 2, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [4.5187258985754055e+31, 631.6628820892685, 163700.83344133865, 41965725.94135517, 10620266803.497557, 2813644175477.67], "accuracy": [0.11187426000833511, 0.1002509593963623, 0.10130762308835983, 0.10051512718200684, 0.10091137140989304, 0.09589222073554993], "val_loss": [26.397091456821986, 7189.6484375, 1841447.857142857, 471411949.71428573, 120681459126.85715, 30894453536475.43], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1], [8, 8, 3, 9, 1, 8, 3, 0], [5, 2, 7], [99], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 0, 0, 2, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 2, 0, 0, 10, 6, 4, 3], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.math.pow(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1252770080.098112, 23658911168.092987, 108252799310.34526, 307349060601.91364, 661685719564.2404, 1205866528672.782], "accuracy": [0.10196803510189056, 0.1014397069811821, 0.10170386731624603, 0.1022322028875351, 0.09932637959718704, 0.10434553027153015], "val_loss": [4577548288.0, 36609449984.0, 123544034157.71428, 292831990345.1429, 571927241874.2858, 988272469138.2858], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 1, 3, 3, 3, 2, 0, 2, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 1, 4, 6, 5, 6, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 17, 17, 8, 9, 0, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.math.subtract(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 3, 3, 3, 2, 1, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [9, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [0, 1, 2, 0, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025804507875676, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 1, 3, 3, 3, 2, 0, 2, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [1, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), sigma)))), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [3, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 1, 2, 6, 1, 3, 3, 3, 2, 0, 2, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0], [9, 0, 9, 9, 1, 8, 3, 0], [4, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [6, 1, 7, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [0, 1, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 69, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025804507875676, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [1, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 3, 3, 3, 2, 1, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [7, 1, 8, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [21, 41, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.subtract(grad, grad)), tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [2, 8, 8, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [1, 3, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [8, 8, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 1, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [1, 3, 0, 2, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [85, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [3, 8, 7, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 1, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 0, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 48, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.304514160655068, 2.302889571135086, 2.3055712207433428, 2.3068700171480594, 2.308932171049308, 2.3098904953940105], "accuracy": [0.0812310129404068, 0.09047681838274002, 0.08228767663240433, 0.080042265355587, 0.08136309683322906, 0.08083476126194], "val_loss": [1.9713809830801827, 1.9726334299360002, 1.973898206438337, 1.9751646859305245, 1.9764336858476912, 1.977698871067592], "val_accuracy": [0.03233333304524422, 0.0273333340883255, 0.02266666665673256, 0.017999999225139618, 0.016333334147930145, 0.015333333052694798]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [3, 8, 7, 7, 6, 8, 4, 4, 8, 8, 1, 4, 0, 6, 6, 9, 3, 0, 0, 8, 4, 2, 1, 8, 0, 2, 2, 0, 4, 2, 1, 0, 7, 2, 5, 0, 3, 0, 3, 8, 4, 7], [2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 3, 0, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1], [86, 11, 19, 14, 97, 27, 5, 61], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 3, 0, 1, 3, 3, 3, 2, 0, 4, 5, 5, 3, 9, 2, 3, 3, 1, 1, 3, 6, 3, 3, 9, 5, 6, 1, 2, 3, 4, 0, 2, 1, 6, 6, 8, 4, 6, 0, 8, 2, 4, 3, 3, 6, 1, 8, 6, 9, 8, 1, 2, 9, 9], [5, 3, 2, 3, 2, 3, 3, 3, 1, 3, 2, 1, 3, 0, 4, 0, 2, 0, 1, 3, 2, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 3, 0, 1, 4, 3], [49, 90, 64, 6, 87, 92, 18, 17, 0, 92, 91], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [6, 2, 3, 9, 1, 8, 3, 0], [2, 2, 7], [99], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 9, 4, 6, 5, 9, 5, 1, 4, 0, 4, 4, 9, 3, 3, 0, 6, 7, 3, 8, 9, 0, 6, 9, 1], [2, 3, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 1, 0, 3, 3, 0, 2], [13, 30, 86, 3, 74, 13, 47, 86, 30]], "fitness": -0.037142857909202576, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.304514160655068, 2.3028896341171436, 2.3055712207433428, 2.3068699856570305, 2.3089321395582796, 2.3098904953940105], "accuracy": [0.0812310129404068, 0.09047681838274002, 0.08228767663240433, 0.080042265355587, 0.08136309683322906, 0.08083476126194], "val_loss": [1.9713809830801827, 1.9726334299360002, 1.973898206438337, 1.9751646178109306, 1.9764337539672852, 1.977698871067592], "val_accuracy": [0.03233333304524422, 0.0273333340883255, 0.02266666665673256, 0.017999999225139618, 0.016333334147930145, 0.015333333052694798]}}]