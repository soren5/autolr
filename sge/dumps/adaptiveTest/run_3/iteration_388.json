[{"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [98, 98, 99], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 1, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8242856860160828, "mapping_values": [1, 5, 5, 3, 2, 2, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.146842120991501, 2.258509216275843, 2.1868555455270178, 1.96865411406857, 1.3580840177634264, 1.0505149220872345, 0.8513396143472395, 0.8033747233341179, 0.6986797612970846, 0.6796989508230042, 0.641180335121258, 0.6573419029985704, 0.6113067073057419, 0.5758078591289175, 0.5779656128892179, 0.548350704832635, 0.5436539076747927, 0.5324763602836335, 0.5448010393562664, 0.5000277214975499, 0.5148515102610124, 0.5000363911942814, 0.47396062222989543, 0.4823195885090922, 0.4842435501199971, 0.4787016829022831, 0.453552463862087, 0.45072969779708777, 0.4545252310593587, 0.467983125695589, 0.4372566835345877, 0.4335707755270509, 0.42708314318525287, 0.4245356244063727, 0.4073900683775491, 0.4001944926845997, 0.3891376396959736, 0.40047157015845825, 0.40045401208735476, 0.38185480683392475, 0.39938726062709157, 0.3587553438265184, 0.39608523890862235, 0.36268491222086585, 0.34825536988950156, 0.3762133671756843, 0.3571111629423669, 0.3481311079273607, 0.34965253900133814, 0.35073338984939256, 0.32575057060601076, 0.3569941488333886, 0.3386794099710432, 0.3233867491540215, 0.3148681477682544], "accuracy": [0.28701624274253845, 0.14951789379119873, 0.24144762754440308, 0.33205652236938477, 0.49227315187454224, 0.6091665625572205, 0.6839255094528198, 0.6925109028816223, 0.7403249144554138, 0.7396644949913025, 0.7539294958114624, 0.7477215528488159, 0.7650244235992432, 0.7865539789199829, 0.7803460359573364, 0.7960638999938965, 0.7924976944923401, 0.7992339134216309, 0.7918372750282288, 0.8096684813499451, 0.8049134612083435, 0.8105930685997009, 0.8239334225654602, 0.8171972036361694, 0.8120459914207458, 0.8230088353157043, 0.8274996876716614, 0.8327829837799072, 0.8294808864593506, 0.8240655064582825, 0.834632158279419, 0.8358209133148193, 0.8417646288871765, 0.8396512866020203, 0.8446704745292664, 0.8543124794960022, 0.8516708612442017, 0.8471800088882446, 0.8511425256729126, 0.857218325138092, 0.847840428352356, 0.8677849769592285, 0.8519350290298462, 0.863558292388916, 0.8702945709228516, 0.8555012345314026, 0.8672566413879395, 0.8689737319946289, 0.8632941246032715, 0.8660678863525391, 0.8787478804588318, 0.8688416481018066, 0.8739928603172302, 0.8768987059593201, 0.8787478804588318], "val_loss": [1.6164229256766183, 1.9618133817400252, 1.6506739343915666, 1.2850147996629988, 0.7431249277932304, 0.7348004409245082, 0.6331866468702044, 0.5451502459389823, 0.5230333294187274, 0.5106457301548549, 0.5331751108169556, 0.5406270367758614, 0.4769293751035418, 0.4449105603354318, 0.4755382708140782, 0.446676390511649, 0.43437428985323223, 0.49669686385563444, 0.43168775524411884, 0.4189038702419826, 0.4151834419795445, 0.4225264702524458, 0.39470171076910837, 0.41223602635519846, 0.4037270631108965, 0.4190392919949123, 0.4190564921924046, 0.41152005536215647, 0.3817237274987357, 0.4099599974496024, 0.4109425800187247, 0.39561114992414204, 0.387577440057482, 0.38945634024483816, 0.3810885548591614, 0.37361305952072144, 0.3825844781739371, 0.4029557364327567, 0.40920103447777884, 0.4218808668000357, 0.39309453112738474, 0.37057481493268696, 0.36995555673326763, 0.3608741249356951, 0.3645916325705392, 0.372482282774789, 0.36732785190854755, 0.3832417811666216, 0.3595084377697536, 0.35458002771650043, 0.4177098274230957, 0.3707986899784633, 0.3749280061040606, 0.34535431010382517, 0.3626351271356855], "val_accuracy": [0.3930000066757202, 0.24566666781902313, 0.2750000059604645, 0.5146666765213013, 0.6486666798591614, 0.668666660785675, 0.6856666803359985, 0.7573333382606506, 0.7663333415985107, 0.7703333497047424, 0.7546666860580444, 0.7393333315849304, 0.7846666574478149, 0.8009999990463257, 0.7773333191871643, 0.7990000247955322, 0.8136666417121887, 0.7493333220481873, 0.8083333373069763, 0.8223333358764648, 0.8169999718666077, 0.8180000185966492, 0.8293333053588867, 0.8149999976158142, 0.8259999752044678, 0.8209999799728394, 0.8230000138282776, 0.8336666822433472, 0.8373333215713501, 0.8226666450500488, 0.8196666836738586, 0.8363333344459534, 0.8403333425521851, 0.8363333344459534, 0.8389999866485596, 0.8360000252723694, 0.843666672706604, 0.8236666917800903, 0.8330000042915344, 0.8243333101272583, 0.8420000076293945, 0.843999981880188, 0.8500000238418579, 0.8523333072662354, 0.8443333506584167, 0.8429999947547913, 0.8533333539962769, 0.8320000171661377, 0.8529999852180481, 0.8586666584014893, 0.8169999718666077, 0.8503333330154419, 0.8433333039283752, 0.8569999933242798, 0.8476666808128357]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 5, 5, 5, 1, 7, 1, 2, 5, 7, 5, 2, 1, 2, 2, 1, 8, 9], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2], [93, 80, 61], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 9, 1, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8077142834663391, "mapping_values": [1, 32, 32, 20, 12, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))))), alpha), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.147058620617894, 2.264605202080945, 2.20368291989703, 1.6389828145212706, 1.2433899221104119, 0.9034456674527688, 0.9364968192670261, 0.7564628953868214, 0.7200805433296241, 0.6739957451883356, 0.6591416139408046, 0.6745397701806333, 0.589576485858948, 0.587815204537099, 0.573428110581316, 0.5585356439503035, 0.5552613799755584, 0.5254739068912052, 0.534395296457752, 0.4906311111954996, 0.5083716291485997, 0.5008108887997097, 0.4781138162098981, 0.47267082954331663, 0.4743854173611278, 0.4584806581821109, 0.45627450748536064, 0.4430859711554072, 0.4565456630161425, 0.458933362934363, 0.4296286700542152], "accuracy": [0.28701624274253845, 0.15017831325531006, 0.23206974565982819, 0.40509840846061707, 0.5559371113777161, 0.6637167930603027, 0.6548672318458557, 0.7154933214187622, 0.7277770638465881, 0.7428345084190369, 0.7530049085617065, 0.7400607466697693, 0.7734777331352234, 0.7807422876358032, 0.7792893648147583, 0.789988100528717, 0.7878747582435608, 0.7985734939575195, 0.8020076751708984, 0.8162726163864136, 0.8103289008140564, 0.806630551815033, 0.8201030492782593, 0.8178576231002808, 0.8177255392074585, 0.828292191028595, 0.8302733898162842, 0.8335754871368408, 0.8239334225654602, 0.82683926820755, 0.8376700282096863], "val_loss": [1.6235334192003523, 1.9620929445539201, 1.602614198412214, 0.9303322178976876, 0.7498170137405396, 0.664005092212132, 0.5754551887512207, 0.5919430255889893, 0.6191620315824237, 0.6134847572871617, 0.6754535947527204, 0.47995623520442415, 0.4707534483500889, 0.4512980154582432, 0.4989098480769566, 0.4768984998975481, 0.4252793533461435, 0.5109621626990182, 0.48112796034131733, 0.4282506193433489, 0.4100256221635001, 0.4063957248415266, 0.4150198442595346, 0.4413302625928606, 0.40306689058031353, 0.3959074190684727, 0.3890094586781093, 0.4040711947849819, 0.3919198768479483, 0.4261963793209621, 0.39814325741359163], "val_accuracy": [0.3970000147819519, 0.26499998569488525, 0.29866665601730347, 0.6026666760444641, 0.6660000085830688, 0.6940000057220459, 0.7356666922569275, 0.7136666774749756, 0.6993333101272583, 0.7136666774749756, 0.6813333630561829, 0.7820000052452087, 0.7896666526794434, 0.793666660785675, 0.7616666555404663, 0.7636666893959045, 0.8173333406448364, 0.7546666860580444, 0.7713333368301392, 0.8113333582878113, 0.8209999799728394, 0.8303333520889282, 0.8133333325386047, 0.8076666593551636, 0.8180000185966492, 0.8363333344459534, 0.8323333263397217, 0.831333339214325, 0.8270000219345093, 0.8159999847412109, 0.8256666660308838]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 3, 9, 4, 8, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8, 0], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1], [93, 80, 61], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8057143092155457, "mapping_values": [1, 32, 32, 20, 12, 3, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha)))))), grad))), tf.math.add(alpha, tf.math.negative(grad))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.147124213218815, 2.259345671063354, 2.21756962211361, 1.806243649437254, 1.7469100571579355, 1.087235313616944, 0.8946705898352428, 0.823466500263204, 0.7011019510678674, 0.6853925117553894, 0.664745777589518, 0.637337205148943, 0.6139641438792048, 0.6024222741226526, 0.5740502462521236, 0.5652119549998298, 0.5459112239677546, 0.5541773179676145, 0.5337481459197021, 0.51747674520273, 0.4956165106777407, 0.524394759570036, 0.48866280605921797, 0.4912763855256078, 0.47276824697795056, 0.485838905998335, 0.47151513161707737, 0.4477616739570662], "accuracy": [0.2871483266353607, 0.15057456493377686, 0.21925769746303558, 0.34566107392311096, 0.38964468240737915, 0.6059965491294861, 0.6577730774879456, 0.6870955228805542, 0.7382115721702576, 0.7403249144554138, 0.7416457533836365, 0.7611940503120422, 0.765949010848999, 0.7773081660270691, 0.7812706232070923, 0.7824593782424927, 0.7911768555641174, 0.7893276810646057, 0.7938185334205627, 0.7977809906005859, 0.8137630224227905, 0.7954035401344299, 0.8177255392074585, 0.8153480291366577, 0.8178576231002808, 0.8168009519577026, 0.8260467648506165, 0.8319904804229736], "val_loss": [1.6152238505227225, 1.9628498894827706, 1.5351627894810267, 1.3127094677516393, 1.1471121311187744, 0.8407912765230451, 0.6341868979590279, 0.5504732983452933, 0.5476788452693394, 0.5663482802254813, 0.570792692048209, 0.49108731746673584, 0.49926282678331646, 0.4615008660725185, 0.4498041016714914, 0.4360331892967224, 0.5328294890267509, 0.46462741919926237, 0.4612384523664202, 0.4474549208368574, 0.46988812514713835, 0.4263198120253427, 0.4025010211127145, 0.4368510586874826, 0.4182494453021458, 0.4323124885559082, 0.41633751562663485, 0.4332331674439566], "val_accuracy": [0.3970000147819519, 0.24433332681655884, 0.34700000286102295, 0.40566667914390564, 0.5483333468437195, 0.6460000276565552, 0.7009999752044678, 0.7516666650772095, 0.746999979019165, 0.7366666793823242, 0.7390000224113464, 0.778333306312561, 0.7693333625793457, 0.7929999828338623, 0.7933333516120911, 0.8069999814033508, 0.7676666378974915, 0.7863333225250244, 0.7866666913032532, 0.8119999766349792, 0.7893333435058594, 0.8180000185966492, 0.8330000042915344, 0.7996666431427002, 0.8180000185966492, 0.8136666417121887, 0.8199999928474426, 0.8149999976158142]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 5, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [2, 80, 61, 16], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8042857050895691, "mapping_values": [1, 9, 9, 6, 3, 3, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.pow(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.146865496498766, 2.26317534272256, 2.20422436575045, 1.6567422668333334, 1.300721858927382, 0.9826696558462206, 0.8164576813057035, 0.7651960263871372, 0.7209296697528528, 0.7057877356633534, 0.6571726349004429, 0.656582968739817, 0.6126858520470023, 0.6009727365793317, 0.5803602508203685, 0.5662640669263664, 0.5712831878721942, 0.539789839238696, 0.5430422482190115], "accuracy": [0.2868841588497162, 0.15057456493377686, 0.23101307451725006, 0.39228636026382446, 0.535332202911377, 0.6235635876655579, 0.6914542317390442, 0.7057191729545593, 0.722757875919342, 0.7321357727050781, 0.7460044622421265, 0.750231146812439, 0.7618544697761536, 0.7746664881706238, 0.7821952104568481, 0.7882710099220276, 0.7905164361000061, 0.7960638999938965, 0.7968564033508301], "val_loss": [1.6203922884804862, 1.9622047288077218, 1.6210435799189977, 0.968597548348563, 0.9316052368709019, 0.7121369157518659, 0.6316060168402535, 0.5937771115984235, 0.5292211089815412, 0.5424500022615705, 0.5531825848988124, 0.5238838536398751, 0.48624684129442486, 0.45111661297934397, 0.5474524327686855, 0.45580227034432547, 0.47493079730442594, 0.506135106086731, 0.4727083444595337], "val_accuracy": [0.39633333683013916, 0.273333340883255, 0.2849999964237213, 0.5839999914169312, 0.5686666369438171, 0.6796666383743286, 0.7163333296775818, 0.7093333601951599, 0.7633333206176758, 0.7429999709129333, 0.7393333315849304, 0.7509999871253967, 0.7796666622161865, 0.8023333549499512, 0.734000027179718, 0.7929999828338623, 0.7946666479110718, 0.7570000290870667, 0.7739999890327454]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 6, 1, 2, 5, 4, 7, 1, 6, 5, 7, 5, 0, 2, 9, 2, 1, 8, 9], [0, 2, 2, 1, 0, 1, 1, 2, 1, 2, 2, 1], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8037142753601074, "mapping_values": [1, 29, 29, 17, 12, 3, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), alpha))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))))))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.14717275689165, 2.2565752679897635, 2.193650826172129, 1.8573405495913053, 1.528938755194241, 1.139376738312033, 0.9083253281574051, 0.8534402508210387, 0.7409272110457465, 0.7191755419094895, 0.6871726409854544, 0.7095472632760086, 0.6366760159259963, 0.6028534507612904, 0.6029734942639399, 0.585261570684599, 0.5695004708589643, 0.5611604949140341, 0.550525300798163, 0.5196499811376422, 0.515804518892497], "accuracy": [0.28701624274253845, 0.15031039714813232, 0.2370888888835907, 0.36441686749458313, 0.4600449204444885, 0.5823537111282349, 0.6527539491653442, 0.6886804699897766, 0.7185312509536743, 0.7263241410255432, 0.7416457533836365, 0.7359662055969238, 0.7518161535263062, 0.7711002230644226, 0.772288978099823, 0.7765156626701355, 0.7881389260292053, 0.7849689722061157, 0.7902522683143616, 0.8042530417442322, 0.8053097128868103], "val_loss": [1.6142667021070207, 1.9623749596732003, 1.5507338728223528, 1.238222530909947, 1.0003407001495361, 0.804186190877642, 0.838432788848877, 0.572278652872358, 0.5841500929423741, 0.5182664053780692, 0.5742478540965489, 0.5475141661507743, 0.49564554010118755, 0.47922698089054655, 0.5554769550051007, 0.4510944059916905, 0.4938767467226301, 0.5203167710985456, 0.47774161611284527, 0.511840650013515, 0.4977140426635742], "val_accuracy": [0.3930000066757202, 0.25066667795181274, 0.3063333332538605, 0.41499999165534973, 0.6179999709129333, 0.6596666574478149, 0.6383333206176758, 0.7393333315849304, 0.7223333120346069, 0.7646666765213013, 0.737333357334137, 0.737333357334137, 0.7683333158493042, 0.7900000214576721, 0.7580000162124634, 0.8033333420753479, 0.7833333611488342, 0.753333330154419, 0.7710000276565552, 0.7696666717529297, 0.7566666603088379]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 9, 3, 0, 6, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 2, 3, 1, 8, 4, 3, 4, 2, 4, 3], [0, 2, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.7937142848968506, "mapping_values": [1, 9, 9, 6, 3, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3155790453715457, 2.0489774643548206, 2.1565381617609694, 2.1282254642641005, 1.580853587096913, 1.0703460544863428, 0.86623446629772, 0.7798617366692016, 0.7167838766842218, 0.6846392324272793, 0.6320120631632883, 0.6634735115892961, 0.6169559089436176, 0.5883994834801902, 0.5865611927683453, 0.5676481541176797, 0.5630483996866559, 0.5792530693902064, 0.533641894330375, 0.5160717828760939], "accuracy": [0.2623167335987091, 0.3435477614402771, 0.292959988117218, 0.2542596757411957, 0.48170650005340576, 0.6180161237716675, 0.6847180128097534, 0.71100252866745, 0.7226257920265198, 0.7368907928466797, 0.7600052952766418, 0.7490423917770386, 0.7656848430633545, 0.7828556299209595, 0.7816668748855591, 0.7876105904579163, 0.7907806038856506, 0.7820631265640259, 0.8031964302062988, 0.807158887386322], "val_loss": [1.6997654778616769, 1.6386504173278809, 2.0191946029663086, 1.1344138554164342, 1.1217563492911202, 0.7470181158610752, 0.6505942174366542, 0.5444386516298566, 0.5827259847096035, 0.5102679048265729, 0.4959490810121809, 0.5297211919512067, 0.4675697939736502, 0.4972428594316755, 0.46784770488739014, 0.44297284739358084, 0.5574760777609689, 0.4698688643319266, 0.434562657560621, 0.4428686329296657], "val_accuracy": [0.32466667890548706, 0.4143333435058594, 0.2370000034570694, 0.5326666831970215, 0.559333324432373, 0.656000018119812, 0.6909999847412109, 0.749666690826416, 0.7239999771118164, 0.7639999985694885, 0.7853333353996277, 0.7583333253860474, 0.7923333048820496, 0.7723333239555359, 0.8096666932106018, 0.8046666383743286, 0.7583333253860474, 0.7940000295639038, 0.8016666769981384, 0.8026666641235352]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 3, 2, 4, 4, 7, 0, 6, 5, 3, 5, 0, 2, 9, 6, 1, 8, 9], [0, 2, 2, 1, 0, 1, 1, 1, 1, 2, 2, 2], [93, 80, 61, 20], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 0, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7791428565979004, "mapping_values": [1, 31, 31, 20, 11, 4, 26, 26, 15, 11, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.square(tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, alpha)))), grad), tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.add(beta, alpha), tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)), tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.21354165717737, 2.1318759140227024, 2.0374727313072296, 1.9639264721014495, 1.3408442937844403, 1.0154868198691296, 0.8428657955465819, 0.7775392738457416, 0.7325811696216304, 0.7144637837102621, 0.6524737235687633, 0.6245354958938459, 0.6601556786189006, 0.5684833083375098, 0.5937472293641762, 0.5454248883437329, 0.5403368235374438, 0.5422950924789082], "accuracy": [0.2635054886341095, 0.25082552433013916, 0.3028661906719208, 0.3140932619571686, 0.5256901383399963, 0.6322810649871826, 0.6837934255599976, 0.7034738063812256, 0.7279091477394104, 0.7309470176696777, 0.7483819723129272, 0.7613261342048645, 0.7547219395637512, 0.7835160493850708, 0.7720248103141785, 0.7924976944923401, 0.7942147850990295, 0.7930260300636292], "val_loss": [1.9623393331255232, 2.103254113878523, 1.5900298186710902, 1.4644561154501778, 0.8687442370823452, 0.6308162042072841, 0.643361006464277, 0.6979896681649345, 0.6423754351479667, 0.49366733006068636, 0.48782151085989817, 0.5770446062088013, 0.4727939026696341, 0.5036647149494716, 0.4833139181137085, 0.46439026083265034, 0.4605529138020107, 0.521426830972944], "val_accuracy": [0.15966667234897614, 0.2696666717529297, 0.4386666715145111, 0.49966666102409363, 0.5866666436195374, 0.7076666951179504, 0.6946666836738586, 0.7080000042915344, 0.6926666498184204, 0.7820000052452087, 0.7696666717529297, 0.7333333492279053, 0.7886666655540466, 0.7770000100135803, 0.7856666445732117, 0.7873333096504211, 0.7749999761581421, 0.7316666841506958]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 3, 2, 5, 4, 7, 1, 6, 5, 7, 5, 0, 2, 9, 2, 1, 8, 9], [0, 2, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7760000228881836, "mapping_values": [1, 31, 31, 19, 12, 3, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, alpha)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, grad))), grad)))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.213519451908227, 2.1611596542248055, 2.1019731196807974, 1.6683595391343913, 1.136851038828565, 0.9588098664167866, 0.8670729234659157, 0.7644510855291813, 0.7556873200560416, 0.6800139519863156, 0.6973294850117526, 0.6355319900472387, 0.6465582360429, 0.5909706998447685, 0.6141799897360937, 0.56496072772818, 0.551094369125593, 0.5451439540651669, 0.551537201223813], "accuracy": [0.26324132084846497, 0.23642848432064056, 0.28780874609947205, 0.3796063959598541, 0.5695416927337646, 0.6346585750579834, 0.6651697158813477, 0.7055870890617371, 0.7100779414176941, 0.7400607466697693, 0.7362303733825684, 0.7555144429206848, 0.7543256878852844, 0.774270236492157, 0.7672698497772217, 0.7849689722061157, 0.7917051911354065, 0.7956677079200745, 0.7884030938148499], "val_loss": [1.9627131734575545, 1.8105213982718331, 1.722907202584403, 1.0534885951450892, 0.7857059410640171, 0.6647522619792393, 0.6160549947193691, 0.6370643036706107, 0.5579521315438407, 0.5334560019629342, 0.5203653403690883, 0.545967664037432, 0.49096693311418804, 0.47932990959712435, 0.4841829368046352, 0.4777815171650478, 0.49224194458552767, 0.4652662788118635, 0.4731874295643398], "val_accuracy": [0.15566666424274445, 0.2906666696071625, 0.37466666102409363, 0.5743333101272583, 0.6150000095367432, 0.6796666383743286, 0.7009999752044678, 0.7083333134651184, 0.7360000014305115, 0.7663333415985107, 0.7473333477973938, 0.7416666746139526, 0.7756666541099548, 0.7820000052452087, 0.7770000100135803, 0.778333306312561, 0.7696666717529297, 0.7799999713897705, 0.7816666960716248]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 8, 6, 5, 5, 1, 1, 7, 1, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8, 9], [2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 0, 0, 2, 1, 1, 1], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 4, 3, 3, 3, 0, 1, 0, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.5297142863273621, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2483416153943425, 1.8910217063144497, 1.5102881152695038, 1.9965579499972888, 2.2377908772418307, 2.2029061150226483, 2.1784660162123957], "accuracy": [0.25280675292015076, 0.3369435966014862, 0.45291242003440857, 0.3707568347454071, 0.22361643612384796, 0.21344605088233948, 0.216880202293396], "val_loss": [1.4774233954293388, 1.0187980106898717, 2.181970868791853, 1.95235994883946, 1.974076202937535, 1.8470733506338937, 1.9777469635009766], "val_accuracy": [0.37433332204818726, 0.5443333387374878, 0.46266666054725647, 0.0989999994635582, 0.09866666793823242, 0.27300000190734863, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 8, 6, 5, 5, 5, 1, 7, 5, 6, 5, 7, 5, 0, 2, 2, 2, 1, 9, 9], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [8, 9, 76, 58]], "fitness": -0.3514285683631897, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3025797644091037, 2.302656517178706, 2.30206429131704, 2.301126850594493, 2.3010019942706745, 2.2993217806979223, 2.29968698206453, 2.299019970488885, 2.298195901343442, 2.2974914113811735, 2.297822400075318, 2.296710926228983, 2.2976664853464452, 2.296084159684298, 2.295589669663058, 2.295046279018172, 2.294005031583174, 2.296895846242304, 2.295061257379623, 2.2944985112777365, 2.2932636738768215, 2.291807004127205, 2.292991789497987, 2.292837496399643, 2.2920698173892275, 2.2914748592399383, 2.2899096369538654, 2.288107535275706, 2.2891006328646752, 2.287628884549154, 2.2897887190240738, 2.2881428849632557, 2.287316252416576, 2.287696716886517, 2.287742955038151, 2.287252072188297, 2.2859898088725017, 2.284827448641226, 2.2841895025923677, 2.2856100418343757, 2.283643811338881, 2.283900306051937, 2.2827753938184423, 2.281968281678772, 2.280718068216203, 2.2806911963544834, 2.2814871168344437, 2.280874440793143, 2.280344574505926, 2.2799665014332215, 2.280062432743224, 2.2787867298751, 2.278879953617937, 2.279072408993577, 2.277769911542718, 2.278238393816068, 2.276377098136149, 2.2766433835045348, 2.2742792421312474, 2.2760954001450253, 2.273860484034929, 2.27464456823382, 2.273628569329498, 2.272913021512901, 2.2726912621918953, 2.2724359499669706, 2.2708463004047625, 2.271339953079546, 2.2705684198821148, 2.269526052878061, 2.2693365043448166, 2.2693334865280352, 2.2689530652952765, 2.2667858710835054, 2.2684751493803907, 2.2668204751894567, 2.2668924752070274, 2.2663065569984315, 2.2663297394341986, 2.2673443971670943, 2.264565105404222, 2.2653133213527923, 2.2636627358625656, 2.263768377305337, 2.26356901689181, 2.2618529232596014, 2.2598167487328253, 2.2611569229637896, 2.2611831355923124, 2.259221998613272, 2.2596597494529207, 2.2583126010297705, 2.2597667209822756, 2.258891966553601, 2.2583454220821797, 2.2569865163574603, 2.2565435820944697, 2.256341265586578, 2.25658013291284, 2.2557532774096765], "accuracy": [0.09325055778026581, 0.09192973375320435, 0.09615638852119446, 0.09787346422672272, 0.09509972482919693, 0.10500594228506088, 0.1002509593963623, 0.09642054885625839, 0.10394927859306335, 0.10077928751707077, 0.10738343745470047, 0.1010434553027153, 0.10408136248588562, 0.10910051316022873, 0.11055342853069305, 0.10593052208423615, 0.10949676483869553, 0.10130762308835983, 0.11147800832986832, 0.11161009222269058, 0.11002509295940399, 0.11834631860256195, 0.1158367469906807, 0.11636507511138916, 0.1158367469906807, 0.12217672914266586, 0.11993131786584854, 0.12323339283466339, 0.12468630075454712, 0.1286487877368927, 0.12455421686172485, 0.12600713968276978, 0.1310262829065323, 0.12574297189712524, 0.1258750557899475, 0.1270637959241867, 0.13432836532592773, 0.1348566859960556, 0.13710209727287292, 0.12640337646007538, 0.13921542465686798, 0.1394795924425125, 0.13802668452262878, 0.1434420794248581, 0.14714039862155914, 0.15057456493377686, 0.14014001190662384, 0.14542332291603088, 0.1438383311033249, 0.1500462293624878, 0.15097081661224365, 0.14780081808567047, 0.15242372453212738, 0.15017831325531006, 0.15598995983600616, 0.15414080023765564, 0.15810328722000122, 0.1582353711128235, 0.16682076454162598, 0.16219785809516907, 0.1666886806488037, 0.1612732857465744, 0.1686699241399765, 0.17170783877372742, 0.16483952105045319, 0.17210407555103302, 0.1752740740776062, 0.1768590658903122, 0.1760665625333786, 0.17870822548866272, 0.17316074669361115, 0.17553824186325073, 0.17936864495277405, 0.18082155287265778, 0.18016114830970764, 0.1814819723367691, 0.18201030790805817, 0.18253862857818604, 0.18412363529205322, 0.18597279489040375, 0.19297318160533905, 0.177255317568779, 0.18478403985500336, 0.19310526549816132, 0.1935015171766281, 0.1935015171766281, 0.20036983489990234, 0.19812442362308502, 0.19799233973026276, 0.20776647329330444, 0.19997358322143555, 0.20644564926624298, 0.20657773315906525, 0.2008981704711914, 0.20882314443588257, 0.21595561504364014, 0.21318188309669495, 0.20631356537342072, 0.21080438792705536, 0.20644564926624298], "val_loss": [1.9707461084638322, 1.9703030586242676, 1.9698614392961775, 1.9694200243268694, 1.9689790861947196, 1.9685382843017578, 1.9680991853986467, 1.9676620619637626, 1.9672211919512068, 1.9667822974068778, 1.9663482393537248, 1.9659100260053362, 1.965475286756243, 1.9650397300720215, 1.9646021297999792, 1.9641667774745397, 1.9637251581464494, 1.9632940292358398, 1.9628611973353796, 1.9624287060328893, 1.961991786956787, 1.9615608624049596, 1.9611335481916154, 1.9607017380850655, 1.9602719715663366, 1.9598421369280135, 1.9594133240836007, 1.9589806284223283, 1.9585462978907995, 1.9581132616315569, 1.9576821327209473, 1.9572492327008928, 1.9568144934517997, 1.9563817296709334, 1.9559524399893624, 1.95551974432809, 1.955082620893206, 1.9546434538705009, 1.9542087146214075, 1.953772681100028, 1.9533443450927734, 1.9529126031058175, 1.9524788175310408, 1.9520456450326102, 1.9516102927071708, 1.9511728967939104, 1.9507355690002441, 1.9502989224025182, 1.9498606409345354, 1.949420588357108, 1.948984009878976, 1.9485464777265276, 1.9481123515537806, 1.947676658630371, 1.9472391945975167, 1.9467973709106445, 1.9463591575622559, 1.945915903363909, 1.9454761232648576, 1.9450372968401228, 1.9445979254586356, 1.9441558974129813, 1.9437123707362585, 1.9432625089372908, 1.9428161212376185, 1.9423700741359167, 1.9419252531869071, 1.9414756638663155, 1.9410225323268346, 1.9405664035252161, 1.940112727028983, 1.939662320273263, 1.9392112323216029, 1.9387522424970354, 1.9382946150643485, 1.9378315380641393, 1.9373726163591658, 1.9369138990129744, 1.9364493915012904, 1.9359874725341797, 1.935525826045445, 1.9350600242614746, 1.9345893178667342, 1.9341246059962682, 1.9336549213954382, 1.9331886427743095, 1.93271119253976, 1.93223660332816, 1.9317654882158553, 1.9312872886657715, 1.9308151517595564, 1.9303339549473353, 1.9298573902675085, 1.9293758528573173, 1.9288934980119978, 1.9284063066755022, 1.9279192515781947, 1.9274333545139857, 1.9269468443734306, 1.9264538628714425], "val_accuracy": [0.03933333232998848, 0.041333332657814026, 0.04266666620969772, 0.043666668236255646, 0.04699999839067459, 0.05066666752099991, 0.05366666615009308, 0.054999999701976776, 0.05766666680574417, 0.05999999865889549, 0.06433333456516266, 0.06733333319425583, 0.07233333587646484, 0.07566666603088379, 0.0806666687130928, 0.08533333241939545, 0.08833333104848862, 0.09133332967758179, 0.09466666728258133, 0.1003333330154419, 0.10466666519641876, 0.10633333027362823, 0.1106666699051857, 0.11433333158493042, 0.11800000071525574, 0.12266666442155838, 0.12566666305065155, 0.13099999725818634, 0.1366666704416275, 0.1393333375453949, 0.14633333683013916, 0.1496666669845581, 0.15199999511241913, 0.1586666703224182, 0.16333332657814026, 0.16833333671092987, 0.17466667294502258, 0.17766666412353516, 0.18199999630451202, 0.18566666543483734, 0.18966667354106903, 0.1913333386182785, 0.19733333587646484, 0.2006666660308838, 0.20399999618530273, 0.20533333718776703, 0.20933333039283752, 0.21266666054725647, 0.21566666662693024, 0.21966665983200073, 0.22300000488758087, 0.2280000001192093, 0.2303333282470703, 0.23199999332427979, 0.23666666448116302, 0.23866666853427887, 0.24133333563804626, 0.24633333086967468, 0.25033333897590637, 0.2540000081062317, 0.257666677236557, 0.2613333463668823, 0.2643333375453949, 0.2693333327770233, 0.27300000190734863, 0.2763333320617676, 0.2783333361148834, 0.2809999883174896, 0.2836666703224182, 0.28733333945274353, 0.2906666696071625, 0.2943333387374878, 0.2983333468437195, 0.30000001192092896, 0.30266666412353516, 0.30399999022483826, 0.3050000071525574, 0.3063333332538605, 0.3086666762828827, 0.3113333284854889, 0.312666654586792, 0.31433331966400146, 0.3190000057220459, 0.32066667079925537, 0.32233333587646484, 0.32499998807907104, 0.32633334398269653, 0.3293333351612091, 0.33133333921432495, 0.3333333432674408, 0.3333333432674408, 0.3356666564941406, 0.33799999952316284, 0.3386666774749756, 0.34066668152809143, 0.34299999475479126, 0.34466665983200073, 0.3466666638851166, 0.3490000069141388, 0.34833332896232605]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [77, 6, 61], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 4, 7, 9, 6, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07898560166358948, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 2, 9, 4, 4, 5, 1, 7, 8, 8, 5, 7, 5, 0, 2, 2, 2, 1, 8, 5, 3, 1, 8, 9], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 0], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 13, 6, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, grad))))))), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [2.3062805897366685, 2.316748608120712, 2.3298468206536893, 2.3478832341865417, 2.3753093830456806, 2.441481343318348, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08638224750757217, 0.06406023353338242, 0.055210672318935394, 0.04054946452379227, 0.03143574297428131, 0.044511955231428146, 0.09311848133802414, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9792028154645647, 1.9895809037344796, 2.003251280103411, 2.0226629120962962, 2.0557288442339217, 2.2056100027901784, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.012000000104308128, 0.007333333138376474, 0.0063333334401249886, 0.006666666828095913, 0.01666666753590107, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 9, 6, 5, 6, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 2, 3, 1, 8, 4, 3, 4, 2, 4, 3], [1, 2, 0, 1, 1, 1, 1, 2, 1, 2, 2, 2], [91, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 5, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [46, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 2, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad)))), tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 2, 3, 4, 4, 6, 1, 1, 9, 6, 4, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 0, 1, 1, 1, 2, 2], [77, 80, 61, 47], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 9, 6, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 0, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 12, 11, 4, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha)))), tf.math.subtract(tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha)), tf.math.add(grad, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [23213353.657903247, 445168138.73570204, 2055137017.778365, 5707535478.278695, 12190574209.504688, 22550910592.693172], "accuracy": [0.09747721254825592, 0.10170386731624603, 0.09906221181154251, 0.10289261490106583, 0.09800554811954498, 0.10540219396352768], "val_loss": [87319618.28571428, 697761920.0, 2354058313.142857, 5578944658.285714, 10895192649.142857, 18825458249.142857], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 6, 5, 6, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 2, 3, 1, 8, 4, 3, 4, 2, 4, 3], [3, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 0, 0, 2, 1, 1, 1], [77, 80, 61, 44], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 4, 1, 2, 3, 9, 2, 2, 0, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 3, 0, 3, 3, 2, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1424658.9246413736, 2.3137804610051216, 2.3058621063995766, 2.303774540623685, 2.3030570898042173, 2.3029689007211025, 2.302858004086935], "accuracy": [0.09549596905708313, 0.09747721254825592, 0.09853387624025345, 0.09998679161071777, 0.09576013684272766, 0.09496764093637466, 0.09774138033390045], "val_loss": [1.987675394330706, 1.9771809577941895, 1.9744552203587122, 1.973719596862793, 1.9737843785967146, 1.9736741610935755, 1.9737465041024345], "val_accuracy": [0.09799999743700027, 0.10066666454076767, 0.09799999743700027, 0.09833333641290665, 0.09666666388511658, 0.09799999743700027, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [84, 80, 61, 76], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 7, 7, 6, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 1, 7, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [37, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 23, 23, 12, 11, 1, 1, 1, 0, 1, 0, 10, 5, 5, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.add(beta, alpha))), tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.4665696971121402, 5.5600968944706924e+26, 2.3105412219194545, 2.311808299394788, 2.3132902810350306, 2.3150357022938586, 2.3171254603807023], "accuracy": [0.03473781421780586, 0.09589222073554993, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [4.407130513872419, 1.9806809425354004, 1.9817474228995187, 1.98297119140625, 1.9844059262956892, 1.9861223357064384, 1.9881022998264857], "val_accuracy": [0.07699999958276749, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 8, 1, 4, 6, 1, 7, 8, 6, 5, 7, 0, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 0], [77, 80, 61, 63], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 2, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 1, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 28, 28, 16, 12, 2, 39, 39, 24, 15, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), grad)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, alpha), alpha))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), grad))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.add(tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))))), tf.math.sqrt(tf.math.negative(tf.math.pow(alpha, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), grad))))), tf.math.negative(tf.math.add(beta, grad))))))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [2.30277523375962, 2.3033269961685505, 2.3032107906822734, 2.30275719664305, 2.303097235701418, 2.3018967475810497], "accuracy": [0.09285431355237961, 0.08981640636920929, 0.09192973375320435, 0.09351472556591034, 0.09100515395402908, 0.09906221181154251], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 3, 5, 5, 4, 7, 1, 6, 5, 7, 5, 0, 2, 9, 0, 1, 4, 9, 4, 3, 6, 5, 4], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 0, 1], [58, 80, 61, 58, 57], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 3, 6, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 8, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 39, 39, 25, 14, 5, 17, 17, 9, 8, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, alpha)))), grad)))), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.pow(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha))))), alpha)))), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), grad), tf.math.divide_no_nan(tf.math.square(alpha), tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))))), grad)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.30277523375962, 2.3033269961685505, 2.3032107906822734, 2.30275719664305, 2.303097235701418, 2.3018967475810497], "accuracy": [0.09285431355237961, 0.08981640636920929, 0.09192973375320435, 0.09351472556591034, 0.09100515395402908, 0.09906221181154251], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 9, 6, 5, 6, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 2, 3, 1, 8, 4, 3, 4, 2, 4, 3], [1, 0, 2, 1, 0, 1, 1, 1, 1, 2, 2], [92, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 2, 1, 6, 2, 5, 9, 2, 2, 5, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 0, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 5, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [30, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 19, 19, 12, 7, 3, 16, 16, 9, 7, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.square(sigma))", "other_info": {"loss": [2.30277523375962, 2.3033269961685505, 2.3032107906822734, 2.30275719664305, 2.303097235701418, 2.3018967475810497], "accuracy": [0.09285431355237961, 0.08981640636920929, 0.09192973375320435, 0.09351472556591034, 0.09100515395402908, 0.09906221181154251], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 8, 6, 3, 2, 5, 4, 7, 1, 6, 5, 7, 5, 0, 2, 9, 2, 1, 8, 9], [0, 2, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2], [93, 80, 61], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [2, 9, 7, 1, 2, 6, 2, 1, 9, 2, 2, 3, 4, 0, 4, 0, 4, 6, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 3, 3, 2, 3, 2, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [12, 9, 76, 58]], "fitness": -0.03342857211828232, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3032144471056286, 2.3048370974080563, 2.3058009509790875, 2.3064452770788906, 2.307863161532697, 2.307774554847049], "accuracy": [0.09179764986038208, 0.08677849918603897, 0.08532558381557465, 0.08717474341392517, 0.08136309683322906, 0.08730682730674744], "val_loss": [1.9721810477120536, 1.973182541983468, 1.9741855348859514, 1.9751921381269182, 1.9762071200779505, 1.9772284371512276], "val_accuracy": [0.03233333304524422, 0.029333332553505898, 0.023666666820645332, 0.020999999716877937, 0.018333332613110542, 0.014999999664723873]}}]