[{"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7991428375244141, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.140917503129946, 1.4472945589730137, 1.1342509286971438, 0.9448554411445863, 0.894605916772363, 0.8246222455047141, 0.7669456456362879, 0.7926753150820024, 0.7247645221586634, 0.7102973459812755, 0.6958992548779946, 0.6559551350901297, 0.6770834433183757, 0.6733430055280198, 0.6345029394577176, 0.6200098776625227, 0.631844118585865, 0.6106358316076619, 0.58994495092429, 0.5921304945806549, 0.5920314882740353, 0.5707150422476538, 0.5792783535451087, 0.5752757699529587], "accuracy": [0.29480913281440735, 0.499009370803833, 0.5954299569129944, 0.6618676781654358, 0.6749438643455505, 0.6947563290596008, 0.7141724824905396, 0.7025492191314697, 0.7279091477394104, 0.7284374833106995, 0.7386078238487244, 0.7539294958114624, 0.7473253011703491, 0.7396644949913025, 0.76542067527771, 0.7691190242767334, 0.7633073329925537, 0.7744023203849792, 0.7773081660270691, 0.7814027070999146, 0.7761194109916687, 0.7891955971717834, 0.783119797706604, 0.7820631265640259], "val_loss": [1.3534987313406808, 1.0097506046295166, 0.748721889087132, 0.7240089859281268, 0.6083022356033325, 0.6161634581429618, 0.5841936213629586, 0.5885926825659615, 0.5522584744862148, 0.5727898563657489, 0.5588956049510411, 0.5394579342433384, 0.5421522515160697, 0.5210937942777362, 0.4920880113329206, 0.5768750735691616, 0.49228995186941965, 0.47933859484536306, 0.4726707254137312, 0.4772205012185233, 0.46467157772609163, 0.49785053730010986, 0.46301266125270296, 0.4868644305637905], "val_accuracy": [0.5569999814033508, 0.5706666707992554, 0.6819999814033508, 0.6656666398048401, 0.7336666584014893, 0.7276666760444641, 0.7456666827201843, 0.7293333411216736, 0.7523333430290222, 0.7303333282470703, 0.7523333430290222, 0.7463333606719971, 0.7549999952316284, 0.7716666460037231, 0.7860000133514404, 0.7310000061988831, 0.7910000085830688, 0.7950000166893005, 0.800000011920929, 0.7893333435058594, 0.796999990940094, 0.7720000147819519, 0.7929999828338623, 0.7796666622161865]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 4, 3, 2, 1, 1, 6, 7, 1, 6, 5, 7, 5, 9, 2, 2, 2, 9, 8, 2, 0, 6, 0, 4, 3, 9, 2, 8, 9, 8], [1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [6, 67, 7, 81, 61, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7977142930030823, "mapping_values": [1, 31, 31, 17, 14, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))))))), lambda shape,  alpha, beta, grad: tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2297611907961, 1.8093046338062844, 1.2810080032370046, 1.0778594524821647, 0.9830318501659782, 0.9019656017267189, 0.8395708534286448, 0.8327259195794078, 0.788795454989272, 0.7712985788196574, 0.747065620069034, 0.7175301606581747, 0.7270044147251872, 0.7064309491614907, 0.683518288228742, 0.675086841804004, 0.6798953062129799, 0.6631963148156115, 0.6378308408264439, 0.6391403642171221, 0.6370720022531816, 0.6227622292202698, 0.6209200075462808, 0.6196553412209318, 0.6250622613460569, 0.6000885111213974, 0.5935165229222841, 0.5956743638654978, 0.5895778321949026, 0.593210294947034, 0.569593799364581], "accuracy": [0.23563598096370697, 0.4423457980155945, 0.5572579503059387, 0.6196011304855347, 0.6454893946647644, 0.6729626059532166, 0.6963412761688232, 0.6952846646308899, 0.7071720957756042, 0.7132478952407837, 0.7269845604896545, 0.733060359954834, 0.7308149337768555, 0.7376832365989685, 0.7437590956687927, 0.7490423917770386, 0.7437590956687927, 0.757099449634552, 0.7663452625274658, 0.7611940503120422, 0.7623828053474426, 0.774270236492157, 0.7647602558135986, 0.7666094303131104, 0.7700436115264893, 0.7775723338127136, 0.7827235460281372, 0.7778365015983582, 0.7810064554214478, 0.7798177003860474, 0.7903843522071838], "val_loss": [1.7480269159589494, 1.1093348094395228, 0.8279195172446114, 0.728973422731672, 0.6800965751920428, 0.6475554534367153, 0.6318044662475586, 0.6602058580943516, 0.5794551542827061, 0.6117340156010219, 0.5716023445129395, 0.5377422741481236, 0.545831390789577, 0.5337106330054147, 0.5177142790385655, 0.5821647984640939, 0.5149174928665161, 0.5010724578584943, 0.49829207147870747, 0.4969931329999651, 0.49094431740897043, 0.5100915431976318, 0.48873163972582134, 0.4833900587899344, 0.48166745049612864, 0.4696318081447056, 0.47850303990500315, 0.4714305911745344, 0.491466794695173, 0.469259398324149, 0.4783024106706892], "val_accuracy": [0.5026666522026062, 0.6313333511352539, 0.6793333292007446, 0.6916666626930237, 0.7243333458900452, 0.7160000205039978, 0.7269999980926514, 0.687333345413208, 0.7463333606719971, 0.7166666388511658, 0.7400000095367432, 0.7713333368301392, 0.7523333430290222, 0.7670000195503235, 0.7763333320617676, 0.7229999899864197, 0.7730000019073486, 0.7866666913032532, 0.7846666574478149, 0.7913333177566528, 0.7793333530426025, 0.7703333497047424, 0.7816666960716248, 0.7929999828338623, 0.7910000085830688, 0.8043333292007446, 0.7929999828338623, 0.7940000295639038, 0.7956666946411133, 0.8016666769981384, 0.7863333225250244]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [4, 2, 3, 2, 1, 8, 7, 7, 1, 6, 4, 7, 0, 1, 2, 2, 2, 1, 8, 2, 3, 6, 0, 1, 3, 2, 2, 8, 9, 8, 1, 1, 6, 8, 6, 2, 4, 2, 9], [0, 1, 2, 0, 2, 1, 2, 1, 2, 1, 1, 1, 2, 0, 1, 1, 2, 1, 0, 0, 1, 1, 2, 0, 0, 3, 2, 2, 3], [6, 85, 98, 10, 42, 68, 27, 53, 33], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.797428548336029, "mapping_values": [1, 68, 68, 39, 29, 9, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha)))), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))), tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))))))))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(alpha, grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), grad)), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2297611278140423, 1.809319282929029, 1.2808776260634707, 1.0792157584177646, 0.9801778227834811, 0.9007246611046202, 0.8406552547917878, 0.8379597872271277, 0.7901544245463069, 0.7687480995809681, 0.7463634206933463, 0.7170019991850384, 0.7244094475196448, 0.7091011413572456, 0.6843191956201518, 0.6726208545544112, 0.6779062259372011, 0.6578712106900461, 0.6373121256070005, 0.6400183527980734, 0.6346196905654324, 0.6273797005710191, 0.6198278509347099, 0.6184161001539124, 0.6243407285807077, 0.6001560524816542, 0.5942662692325085, 0.5905887192707366, 0.6030532753919456, 0.5851989778875911, 0.5746241758811617], "accuracy": [0.23563598096370697, 0.4423457980155945, 0.55791836977005, 0.6184123754501343, 0.6465460062026978, 0.6725663542747498, 0.694360077381134, 0.6910579800605774, 0.7083608508110046, 0.7141724824905396, 0.7248712182044983, 0.7357020378112793, 0.7321357727050781, 0.7346453666687012, 0.7400607466697693, 0.752740740776062, 0.7437590956687927, 0.7600052952766418, 0.7652885913848877, 0.7602694630622864, 0.7644960880279541, 0.7712323069572449, 0.7667415142059326, 0.7670056819915771, 0.7687227725982666, 0.7795535326004028, 0.7821952104568481, 0.780610203742981, 0.7700436115264893, 0.7815347909927368, 0.7881389260292053], "val_loss": [1.7480271203177316, 1.1093634537288122, 0.8275424752916608, 0.7317092078072684, 0.680687699999128, 0.6490458590643746, 0.6186230863843646, 0.6324805532182965, 0.5789452620915004, 0.6024893351963588, 0.568179556301662, 0.5382536479404995, 0.5449541466576713, 0.5368692193712506, 0.5167539460318429, 0.581460986818586, 0.5121157509940011, 0.5015705142702375, 0.4973775659288679, 0.4963597570146833, 0.49095351355416433, 0.5068879127502441, 0.49017776761736187, 0.4872837577547346, 0.47951970781598774, 0.47180051462990896, 0.471951995577131, 0.4845742668424334, 0.48700354780469624, 0.4710765906742641, 0.4651397636958531], "val_accuracy": [0.5026666522026062, 0.6306666731834412, 0.6796666383743286, 0.6916666626930237, 0.7233333587646484, 0.7123333215713501, 0.7419999837875366, 0.7110000252723694, 0.7480000257492065, 0.7200000286102295, 0.7440000176429749, 0.7683333158493042, 0.7519999742507935, 0.7639999985694885, 0.7763333320617676, 0.7236666679382324, 0.7743333578109741, 0.7853333353996277, 0.7839999794960022, 0.7896666526794434, 0.7786666750907898, 0.7763333320617676, 0.777999997138977, 0.7900000214576721, 0.7926666736602783, 0.8026666641235352, 0.7953333258628845, 0.7826666831970215, 0.8016666769981384, 0.8016666769981384, 0.8019999861717224]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 2, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8], [1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [6, 67, 98, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7894285917282104, "mapping_values": [1, 51, 51, 29, 22, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, grad))), tf.math.subtract(alpha, tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))))))))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2297612087774774, 1.809312762113185, 1.2811038426561852, 1.0785809722653374, 0.9819555044678051, 0.9019938758288424, 0.8394576790641092, 0.8382499794430343, 0.7902262300516651, 0.7654015672614688, 0.7463414342002531, 0.7147514413785878, 0.726197973289321, 0.7078775388217322, 0.6815949933734536, 0.6741352689705504, 0.6803431637204318, 0.6578993725423973, 0.6372660324872996, 0.6402586015570417, 0.6349343994605054, 0.6229126724694871, 0.6237431527711397, 0.6196230329054536, 0.6248839483788898], "accuracy": [0.23563598096370697, 0.44247788190841675, 0.5577862858772278, 0.6188086271286011, 0.6457535624504089, 0.6742834448814392, 0.6955488324165344, 0.6917183995246887, 0.7077004313468933, 0.7166820764541626, 0.7251353859901428, 0.735569953918457, 0.7338528633117676, 0.7346453666687012, 0.7428345084190369, 0.7497028112411499, 0.744419515132904, 0.7574957013130188, 0.7651565074920654, 0.761590301990509, 0.7644960880279541, 0.7751948237419128, 0.7660810947418213, 0.76542067527771, 0.7677981853485107], "val_loss": [1.7480273927961076, 1.1092897823878698, 0.8279683419636318, 0.7300044809068952, 0.6795764480318341, 0.6474977220807757, 0.6192747695105416, 0.633453369140625, 0.5800200871058873, 0.6046419995171683, 0.5648658445903233, 0.5373314789363316, 0.544788122177124, 0.5311435120446342, 0.5165504217147827, 0.588752201625279, 0.5129795755658831, 0.5015820946012225, 0.4975993973868234, 0.4959314210074289, 0.49067366123199463, 0.5164983783449445, 0.49137091636657715, 0.4894529751368931, 0.48020882265908377], "val_accuracy": [0.5026666522026062, 0.6309999823570251, 0.6793333292007446, 0.6899999976158142, 0.7239999771118164, 0.7149999737739563, 0.7406666874885559, 0.7099999785423279, 0.7486666440963745, 0.718999981880188, 0.7456666827201843, 0.7713333368301392, 0.7546666860580444, 0.7683333158493042, 0.777999997138977, 0.7213333249092102, 0.7723333239555359, 0.7856666445732117, 0.7833333611488342, 0.7910000085830688, 0.781333327293396, 0.765999972820282, 0.7823333144187927, 0.7853333353996277, 0.7879999876022339]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 3, 2, 1, 2, 7, 7, 4, 3, 5, 7, 5, 1, 2, 1, 2, 1, 8, 4, 0, 6, 0, 1, 3, 2, 0, 8, 2, 8], [1, 2, 2, 0, 2, 1, 1, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [41, 67, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7540000081062317, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.2972928402902837, 2.2855268036763365, 2.2744693734374706, 2.2627468671560633, 2.2495013791115657, 2.2342027436000578, 2.218040341131754, 2.1986382246615785, 2.178160436432737, 2.154966647047739, 2.129283946502982, 2.0947158272082795, 2.053540912869269, 2.0162744352515536, 1.9643363656148682, 1.9178780939569249, 1.8603097075531747, 1.803941414277819, 1.7444820113075628, 1.6915741942231493, 1.629572304925426, 1.5727351380534507, 1.5177009367057912, 1.470783587790688, 1.4345952803511361, 1.3863286434651492, 1.3523234995270228, 1.3248511970381711, 1.2830773703158571, 1.2725847025337063, 1.2300594582486508, 1.2141060686508238, 1.1939333485039139, 1.1633865888549226, 1.1550636173570004, 1.1330020964625898, 1.1136244736831296, 1.0996993208731392, 1.0845247049845599, 1.0680130434672375, 1.0694569021624785, 1.0439819060044597, 1.0317814354536918, 1.0185019737536394, 1.0132875847400786, 0.9933524698455966, 0.9898320441437498, 0.9881380309659917, 0.9683290353272932, 0.9694175797367864, 0.9495993524400109, 0.9537827498121442, 0.9467317475823521, 0.9319545173799325, 0.92648617489274, 0.917364008989411, 0.921383418324853, 0.9085061495582173, 0.9120538357683161, 0.9063915065597344, 0.8837410638896371, 0.8932018556048165, 0.8825732923029531, 0.8721217427113903, 0.8724097703284497, 0.8637754473908545, 0.8631636871559084, 0.8625195908697605, 0.8597362318279532, 0.8488080606972616, 0.8449531042926961, 0.8426079161966072, 0.8433243650502659, 0.8460218140698222, 0.8312156556100105, 0.8398537021806889, 0.8331591507714926, 0.8274371953389081, 0.8234399760860603, 0.8185480308570504, 0.8064906082888951, 0.8164756453079774, 0.8088935133866378, 0.8052273116264802, 0.8079426504397011, 0.804504886775394, 0.7843416512382502, 0.7895000767414958, 0.7909211988745742, 0.7899421664229662, 0.7812122417132396, 0.7889679629080615, 0.7809099230972878, 0.7838495724693407, 0.7795252992634162, 0.7709560612126302, 0.7718519912876426, 0.7672098360561094, 0.761761137798651, 0.7670620491696449], "accuracy": [0.10355303436517715, 0.1348566859960556, 0.16312244534492493, 0.190859854221344, 0.2262580841779709, 0.2583542466163635, 0.2833179235458374, 0.3063003420829773, 0.31686699390411377, 0.34803855419158936, 0.3563597798347473, 0.378549724817276, 0.40206050872802734, 0.4069475531578064, 0.4301941692829132, 0.4365341365337372, 0.44208163022994995, 0.46070531010627747, 0.4674415588378906, 0.47285696864128113, 0.49412229657173157, 0.5070664286613464, 0.5119535326957703, 0.5256901383399963, 0.5346717834472656, 0.544181764125824, 0.5534275770187378, 0.5567296147346497, 0.5715228915214539, 0.5651829242706299, 0.5820895433425903, 0.5844670534133911, 0.5884295105934143, 0.6003170013427734, 0.6044115424156189, 0.6066569685935974, 0.6118082404136658, 0.6176198720932007, 0.6173557043075562, 0.6284506916999817, 0.6231673359870911, 0.632941484451294, 0.6444327235221863, 0.6465460062026978, 0.6481310129165649, 0.651168942451477, 0.6507726907730103, 0.6519614458084106, 0.6598864197731018, 0.6557918190956116, 0.6676793098449707, 0.6641130447387695, 0.6660943031311035, 0.6705851554870605, 0.6717738509178162, 0.6769251227378845, 0.6720380187034607, 0.6800950765609741, 0.6773213744163513, 0.6749438643455505, 0.6839255094528198, 0.6752080321311951, 0.6866992712020874, 0.6921146512031555, 0.6882842183113098, 0.6905296444892883, 0.6936996579170227, 0.6921146512031555, 0.6951525807380676, 0.695813000202179, 0.6929071545600891, 0.7041342258453369, 0.6976621150970459, 0.6952846646308899, 0.6944921612739563, 0.6972658634185791, 0.7005679607391357, 0.7041342258453369, 0.7041342258453369, 0.7132478952407837, 0.7079645991325378, 0.7078325152397156, 0.7123233675956726, 0.7116629481315613, 0.707568347454071, 0.7119271159172058, 0.7199841737747192, 0.7131158113479614, 0.7137762308120728, 0.7164179086685181, 0.7234182953834534, 0.7120591998100281, 0.7160216569900513, 0.717870831489563, 0.713379979133606, 0.7191916704177856, 0.7228899598121643, 0.7189275026321411, 0.7230220437049866, 0.7234182953834534], "val_loss": [1.960136958530971, 1.9491964748927526, 1.9379298346383231, 1.9261332239423479, 1.9133106640407018, 1.89892612184797, 1.8824025562831335, 1.863267149244036, 1.8414771216256278, 1.8163298198154993, 1.787766933441162, 1.754704134804862, 1.7164344446999686, 1.6738392284938268, 1.6257686614990234, 1.5739668096814836, 1.5180617741176061, 1.4597599506378174, 1.4001199517931258, 1.3408821991511755, 1.282271146774292, 1.2262366158621651, 1.1740735258374895, 1.1259034020560128, 1.0827882289886475, 1.0433336326054163, 1.007887363433838, 0.9766753401075091, 0.9472013541630336, 0.9227164132254464, 0.8991226128169468, 0.8783677305494036, 0.8596688849585397, 0.8420688765389579, 0.8268268789563861, 0.8115103415080479, 0.7979382617133004, 0.7857019901275635, 0.7744008472987584, 0.7635526486805507, 0.7548992804118565, 0.7450671877179827, 0.7366435527801514, 0.7273010866982597, 0.7193771089826312, 0.7125487157276699, 0.7054316997528076, 0.6991785594395229, 0.6934604304177421, 0.6887935400009155, 0.6831920828138079, 0.6781532764434814, 0.6738428218024117, 0.6693182332175118, 0.6644769736698696, 0.6602132661002023, 0.6565024341855731, 0.6525828327451434, 0.6492783342088971, 0.6450336660657611, 0.6407839400427682, 0.6381220306668963, 0.6348022222518921, 0.6313497849873134, 0.6286267212459019, 0.6255239077976772, 0.6227723360061646, 0.6197919845581055, 0.6173235348292759, 0.6142723730632237, 0.6122484036854335, 0.6095983471189227, 0.6074573993682861, 0.6048244067600795, 0.6031115225383213, 0.6014886924198696, 0.5996735606874738, 0.5970769950321743, 0.5957013879503522, 0.5929414204188755, 0.5907442740031651, 0.5899755103247506, 0.5880582162312099, 0.5860022987638202, 0.5840973172869001, 0.5818180016108921, 0.5794588327407837, 0.578518271446228, 0.5768558297838483, 0.5754396574837821, 0.573891452380589, 0.572498985699245, 0.5713583912168231, 0.5699813195637294, 0.5688406569617135, 0.5668419599533081, 0.565854583467756, 0.5637732063020978, 0.5622689894267491, 0.5604983227593558], "val_accuracy": [0.12200000137090683, 0.22100000083446503, 0.3016666769981384, 0.3473333418369293, 0.375, 0.40400001406669617, 0.429666668176651, 0.44333332777023315, 0.45266667008399963, 0.4663333296775818, 0.4909999966621399, 0.5063333511352539, 0.5176666378974915, 0.5299999713897705, 0.5376666784286499, 0.543666660785675, 0.550000011920929, 0.5576666593551636, 0.5619999766349792, 0.5706666707992554, 0.5796666741371155, 0.593999981880188, 0.6026666760444641, 0.6156666874885559, 0.6306666731834412, 0.6460000276565552, 0.6526666879653931, 0.656000018119812, 0.6639999747276306, 0.6690000295639038, 0.675000011920929, 0.6806666851043701, 0.6836666464805603, 0.6859999895095825, 0.6903333067893982, 0.6940000057220459, 0.6943333148956299, 0.6970000267028809, 0.6983333230018616, 0.6983333230018616, 0.7053333520889282, 0.7039999961853027, 0.7076666951179504, 0.7086666822433472, 0.7110000252723694, 0.7136666774749756, 0.7146666646003723, 0.7160000205039978, 0.718999981880188, 0.7196666598320007, 0.7200000286102295, 0.7210000157356262, 0.7243333458900452, 0.7256666421890259, 0.7276666760444641, 0.7266666889190674, 0.7296666502952576, 0.7296666502952576, 0.7316666841506958, 0.7323333621025085, 0.734333336353302, 0.734000027179718, 0.7333333492279053, 0.734000027179718, 0.7363333106040955, 0.7383333444595337, 0.7406666874885559, 0.7403333187103271, 0.7379999756813049, 0.7409999966621399, 0.7409999966621399, 0.7423333525657654, 0.7423333525657654, 0.7433333396911621, 0.7413333058357239, 0.7423333525657654, 0.7423333525657654, 0.7436666488647461, 0.7406666874885559, 0.7436666488647461, 0.7436666488647461, 0.7453333139419556, 0.7456666827201843, 0.7450000047683716, 0.7493333220481873, 0.7486666440963745, 0.7476666569709778, 0.7506666779518127, 0.750333309173584, 0.75, 0.7516666650772095, 0.753000020980835, 0.753000020980835, 0.7523333430290222, 0.7559999823570251, 0.7546666860580444, 0.753333330154419, 0.7546666860580444, 0.7553333044052124, 0.7540000081062317]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 2, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 6, 2, 8, 2, 1, 8, 2, 0, 0, 0, 1, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 9, 8, 6, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [99, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0], [2, 2, 0, 2, 9, 2, 7, 7, 1, 0, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [5, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.302456659553325, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 3, 2, 1, 2, 7, 9, 1, 6, 5, 5, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [2, 0, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [80, 67, 98, 79], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [75, 19, 41, 7, 45, 13], [1], [0, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 0, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302456659553325, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 6, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8, 2, 5, 8, 4, 8], [0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1, 3, 2], [6, 67, 98, 79, 42, 68, 88], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [5, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 59, 59, 35, 24, 7, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.add(grad, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(alpha)), grad))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma))", "other_info": {"loss": [2.3028294790091848, 2.3027603651758954, 2.302727740344087, 2.30289167350766, 2.30282801206259, 2.302763236212992, 2.302777516512807, 2.302795879278106, 2.3027995625318174, 2.3028134816610235], "accuracy": [0.09245806187391281, 0.09417514503002167, 0.09655263274908066, 0.09047681838274002, 0.09576013684272766, 0.09549596905708313, 0.09747721254825592, 0.09245806187391281, 0.09087307006120682, 0.09536388516426086], "val_loss": [1.9736531121390206, 1.973640033176967, 1.9736229351588659, 1.973623207637242, 1.97358615057809, 1.9736298152378626, 1.9736156463623047, 1.973618507385254, 1.973630087716239, 1.9737003871372767], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.10066666454076767, 0.09866666793823242, 0.10566666722297668, 0.09833333641290665, 0.10566666722297668, 0.10133333504199982, 0.10000000149011612, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [80, 67, 98, 79, 99, 4], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 7, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 50, 50, 29, 21, 6, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 16, 11, 5, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.subtract(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))))), alpha)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(alpha, alpha)))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.add(beta, sigma))), tf.math.divide_no_nan(tf.math.negative(beta), tf.math.pow(tf.math.square(alpha), tf.math.divide_no_nan(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 9, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [3, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [6, 67, 98, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [30, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 7, 6, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 17, 11, 6, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.math.divide_no_nan(tf.math.negative(beta), alpha)), tf.math.pow(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8], [2, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [7, 4, 5, 8, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 10, 6, 4, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.pow(tf.math.square(tf.math.sqrt(beta)), sigma), tf.math.divide_no_nan(tf.math.negative(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 9, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [0, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302456659553325, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [3, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [3, 1], [52], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [7, 3, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [21, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 10, 6, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma)), tf.math.divide_no_nan(tf.math.negative(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [80, 67, 98, 79], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 7, 8, 7, 3, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [1, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 0, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 6, 4, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(beta))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [6, 67, 98, 79, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [2, 0, 2, 1, 0, 0, 2, 2], [58, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302456659553325, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [2, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [6, 5, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.302456659553325, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 3, 2, 2, 1, 7, 4, 1, 2, 5, 6, 5, 1, 2, 2, 2, 1, 8, 2, 0, 4, 0, 1, 3, 2, 4, 8, 9, 8], [3, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [80, 67, 98, 79], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [1], [0, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma))", "other_info": {"loss": [2.302166801638308, 2.30215749465369, 2.3032075472322706, 2.3033151975507513, 2.303126422468666, 2.3022196869792846], "accuracy": [0.08955223858356476, 0.08968432247638702, 0.09153348207473755, 0.0878351628780365, 0.09259014576673508, 0.09391097724437714], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 1, 3, 9, 5, 7, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2], [27, 67, 98, 79], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [24, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [5, 1], [65], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [6, 4, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 2, 1, 1, 0, 0, 2, 2], [21, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 6, 3, 3, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(alpha), beta), alpha)", "other_info": {"loss": [2.302166801638308, 2.30215749465369, 2.3032075472322706, 2.3033151975507513, 2.303126422468666, 2.3022196869792846], "accuracy": [0.08955223858356476, 0.08968432247638702, 0.09153348207473755, 0.0878351628780365, 0.09259014576673508, 0.09391097724437714], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]