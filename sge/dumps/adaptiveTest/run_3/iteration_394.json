[{"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 8, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 5, 1, 4, 6, 2, 1, 2, 2, 0, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 2, 3, 1, 3, 3, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.824571430683136, "mapping_values": [1, 4, 4, 3, 1, 1, 16, 16, 8, 8, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.221230816485277, 2.117497905433422, 1.7525530685885329, 1.3612998652499129, 1.0190657791192617, 0.9491741875962275, 0.7761062389556301, 0.7181422328747432, 0.7288882860244934, 0.6554423287686041, 0.6317888501219194, 0.6241506900234371, 0.6067815392071844, 0.5647388851606394, 0.5481792141685491, 0.5539750925239051, 0.5412732963832205, 0.5284131333072503, 0.5229398695752763, 0.502257914890183, 0.48864703761934525, 0.4820468935551125, 0.4784881713100318, 0.4793936660607509, 0.4636466556914242, 0.4617667319893979, 0.4410865004815918, 0.4516715595058053, 0.4313742104869052, 0.4234157065831281, 0.43452712958042633, 0.4105476982770516, 0.41598803881152807, 0.3812178659393425, 0.4010758621778313, 0.40614612450720594, 0.36265794315421274, 0.35543511454234933, 0.37594665309236885, 0.3661831400027884, 0.3760338650442873], "accuracy": [0.24686303734779358, 0.31845200061798096, 0.40245673060417175, 0.5337471961975098, 0.6305639743804932, 0.6564522385597229, 0.705058753490448, 0.7294940948486328, 0.7252674698829651, 0.7504953145980835, 0.7518161535263062, 0.7584202885627747, 0.7717606425285339, 0.7759873270988464, 0.793422281742096, 0.7858935594558716, 0.7950072884559631, 0.8030643463134766, 0.8043851256370544, 0.8086118102073669, 0.8162726163864136, 0.8157442808151245, 0.8175934553146362, 0.8157442808151245, 0.8230088353157043, 0.8220842480659485, 0.8339717388153076, 0.8249900937080383, 0.8330471515655518, 0.8412362933158875, 0.8381983637809753, 0.8426892161369324, 0.8459912538528442, 0.8603883385658264, 0.8485008478164673, 0.8465195894241333, 0.8628978729248047, 0.8668603897094727, 0.8601241707801819, 0.8603883385658264, 0.8595958352088928], "val_loss": [1.9518156051635742, 1.8998280252729143, 1.2460994379861015, 0.9376182896750314, 0.9187811783381871, 0.6415628705705915, 0.6176164150238037, 0.7342851161956787, 0.5458288703645978, 0.5189012289047241, 0.5045653411320278, 0.5031749861580985, 0.4699134145464216, 0.46751798902239117, 0.4878194843019758, 0.5141338620867048, 0.46841607775006977, 0.470183048929487, 0.47356063979012625, 0.4361381786210196, 0.43433600664138794, 0.4292781523295811, 0.4935950381415231, 0.45548507145472933, 0.4173984101840428, 0.3931302853993007, 0.4997409071241106, 0.4122335910797119, 0.4002968668937683, 0.4185892939567566, 0.37847992352076937, 0.4098482472555978, 0.40071022510528564, 0.40966359206608366, 0.40317257813044954, 0.3610289437430246, 0.3849478704588754, 0.3710360016141619, 0.36391009603227886, 0.39377948216029574, 0.39144268206187655], "val_accuracy": [0.2750000059604645, 0.25333333015441895, 0.528333306312561, 0.6313333511352539, 0.6626666784286499, 0.6966666579246521, 0.7239999771118164, 0.6726666688919067, 0.7599999904632568, 0.7663333415985107, 0.7720000147819519, 0.7749999761581421, 0.7926666736602783, 0.7900000214576721, 0.762333333492279, 0.7456666827201843, 0.8013333082199097, 0.7816666960716248, 0.7753333449363708, 0.8046666383743286, 0.8086666464805603, 0.8146666884422302, 0.7459999918937683, 0.7926666736602783, 0.8303333520889282, 0.8339999914169312, 0.7720000147819519, 0.8153333067893982, 0.8266666531562805, 0.8236666917800903, 0.8370000123977661, 0.8330000042915344, 0.8346666693687439, 0.8190000057220459, 0.8209999799728394, 0.8529999852180481, 0.8413333296775818, 0.8366666436195374, 0.8426666855812073, 0.828000009059906, 0.824999988079071]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 7, 1, 4, 6, 6, 1, 9, 9, 2, 3, 4, 9, 8, 0, 4, 1, 5, 0, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 0, 3, 1, 3, 3, 1, 3, 3, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 27, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8214285969734192, "mapping_values": [1, 5, 5, 3, 2, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.221239148570625, 2.1249842948885864, 2.101688151629751, 1.7095955761432207, 1.172021774095614, 0.9473355621032553, 0.739897985602288, 0.7214308913751379, 0.6386673357177798, 0.6312129061377327, 0.6226879050388092, 0.6188833552061244, 0.5817406113593964, 0.5528820094935032, 0.5247858754868332, 0.5245209225117491, 0.5445034868248607, 0.514260176544129, 0.513666410235807, 0.4890016958761083, 0.48072466364452915, 0.48590943551082433], "accuracy": [0.24686303734779358, 0.3206973969936371, 0.31145158410072327, 0.4443270266056061, 0.5914674401283264, 0.6655659675598145, 0.7173424959182739, 0.7251353859901428, 0.7563069462776184, 0.7619865536689758, 0.7666094303131104, 0.7683265209197998, 0.7812706232070923, 0.7835160493850708, 0.7964601516723633, 0.8059701323509216, 0.7969884872436523, 0.8099326491355896, 0.8038568496704102, 0.8178576231002808, 0.8189142942428589, 0.8175934553146362], "val_loss": [1.9517865862165178, 1.9310235977172852, 1.5454412869044714, 1.235400574547904, 0.978971174785069, 0.6498895032065255, 0.6602883679526192, 0.5461697578430176, 0.5836225577763149, 0.5069435834884644, 0.4836521489279611, 0.4776250294276646, 0.47481623717716764, 0.48574135984693256, 0.4434010982513428, 0.4681601694652012, 0.42601542813437326, 0.48060788427080425, 0.4363986338887896, 0.4417357785361154, 0.43632376194000244, 0.4410054768834795], "val_accuracy": [0.27933332324028015, 0.2460000067949295, 0.5296666622161865, 0.5350000262260437, 0.6129999756813049, 0.7020000219345093, 0.6556666493415833, 0.7426666617393494, 0.750333309173584, 0.781000018119812, 0.7839999794960022, 0.7900000214576721, 0.7833333611488342, 0.762333333492279, 0.8069999814033508, 0.7870000004768372, 0.8140000104904175, 0.7760000228881836, 0.8040000200271606, 0.8016666769981384, 0.8119999766349792, 0.809333324432373]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 6, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 27, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8199999928474426, "mapping_values": [1, 4, 4, 2, 2, 2, 16, 16, 9, 7, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, grad), alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2212090994215536, 2.1128398360294076, 1.9065173053628088, 1.8322457239344734, 1.1657776268733695, 0.8862852366561699, 0.7653631833345662, 0.7039251626836878, 0.6445923203868384, 0.6444443771001795, 0.585334019646149, 0.6146786475792505, 0.546604275837267, 0.5578504340161485, 0.5570339485402624, 0.5397515000133088, 0.5827715235332126, 0.5389100466705411, 0.4984839400280232, 0.48563823321586463, 0.4809691307881977, 0.49526843094019574, 0.476007185029064], "accuracy": [0.24659886956214905, 0.3175274133682251, 0.36745476722717285, 0.387399286031723, 0.59225994348526, 0.6749438643455505, 0.709549605846405, 0.7313432693481445, 0.7621186375617981, 0.757099449634552, 0.7799497842788696, 0.7683265209197998, 0.7901201844215393, 0.7882710099220276, 0.785101056098938, 0.7921014428138733, 0.7833839654922485, 0.7998943328857422, 0.8080834746360779, 0.8178576231002808, 0.8214238286018372, 0.8083476424217224, 0.8202351331710815], "val_loss": [1.9517738478524345, 1.8744002069745744, 1.4659183706556047, 1.2529370444161552, 0.8500166620526995, 0.6883243833269391, 0.5858340093067714, 0.5865659202848162, 0.6199970926557269, 0.4814047983714512, 0.5058810881205967, 0.5066380841391427, 0.46393457480839323, 0.5006043910980225, 0.45939735003880094, 0.44783314636775423, 0.4446332114083426, 0.44409591811043875, 0.4436777489525931, 0.45654315607888357, 0.4655568940298898, 0.44902208021708895, 0.43716229711260113], "val_accuracy": [0.2770000100135803, 0.2603333294391632, 0.3996666669845581, 0.4386666715145111, 0.6413333415985107, 0.6743333339691162, 0.7203333377838135, 0.7226666808128357, 0.7236666679382324, 0.7923333048820496, 0.768666684627533, 0.7683333158493042, 0.7956666946411133, 0.7739999890327454, 0.7846666574478149, 0.8033333420753479, 0.8009999990463257, 0.8046666383743286, 0.8026666641235352, 0.7919999957084656, 0.7926666736602783, 0.8046666383743286, 0.7963333129882812]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 7, 1, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 32, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8171428442001343, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, alpha), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2212319541616745, 2.1249654085849334, 2.113010771585383, 1.5822419834615626, 0.9960553076100025, 0.9352934119361598, 0.7438127559252607, 0.7064671416591896, 0.6409032401344512, 0.6378035595498585, 0.6261101323836169, 0.601115970138577, 0.5617906950436815, 0.5549191595729883, 0.5607154498073829, 0.5326498747423041, 0.5337820358799749, 0.5343125366799316, 0.5008150704737432, 0.49512726055113015, 0.48838949035014206, 0.48592169362997034, 0.4628897022144465, 0.47679897041809544, 0.44183489129984493, 0.4453815772722048, 0.43900539415340223], "accuracy": [0.24686303734779358, 0.3191123902797699, 0.3082816004753113, 0.4694227874279022, 0.6476026773452759, 0.6701889038085938, 0.7217012047767639, 0.7363624572753906, 0.7543256878852844, 0.7593448758125305, 0.7606657147407532, 0.7730814814567566, 0.7887993454933167, 0.7887993454933167, 0.7810064554214478, 0.7968564033508301, 0.7987055778503418, 0.7998943328857422, 0.8113855719566345, 0.8150838613510132, 0.8165367841720581, 0.8169330358505249, 0.8260467648506165, 0.819970965385437, 0.8335754871368408, 0.8323867321014404, 0.8325188159942627], "val_loss": [1.9518021856035506, 1.9275053569248743, 1.5765489510127477, 0.836787496294294, 0.9966552938733783, 0.6267742429460798, 0.5941144909177508, 0.5111127751214164, 0.5906411749976022, 0.6190678562436785, 0.47530339445386616, 0.4810794081006731, 0.4657578298023769, 0.49304347378867014, 0.44213255814143587, 0.49143569810049875, 0.46825729097638813, 0.4308531624930246, 0.4545795406614031, 0.42580975805010113, 0.4555807794843401, 0.4071837748800005, 0.4105179565293448, 0.4442759241376604, 0.4160324079649789, 0.4070215310369219, 0.39505707366125925], "val_accuracy": [0.2770000100135803, 0.2549999952316284, 0.5, 0.6669999957084656, 0.6266666650772095, 0.7003333568572998, 0.7476666569709778, 0.762666642665863, 0.7509999871253967, 0.7286666631698608, 0.7883333563804626, 0.7873333096504211, 0.7923333048820496, 0.7730000019073486, 0.8076666593551636, 0.7670000195503235, 0.8069999814033508, 0.8140000104904175, 0.8033333420753479, 0.8220000267028809, 0.7979999780654907, 0.8336666822433472, 0.8296666741371155, 0.8100000023841858, 0.8163333535194397, 0.8303333520889282, 0.8276666402816772]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 3, 2, 2, 6, 2, 5, 2, 5, 3, 3, 4, 6, 8, 0, 4, 1, 5, 2, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 78, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8165714144706726, "mapping_values": [1, 6, 6, 5, 1, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.221239414386399, 2.116212907484289, 2.083779298492379, 1.5721394389989811, 1.153528350030332, 0.8380512942286562, 0.7255759832409032, 0.6970008590658815, 0.6582244931588698, 0.61078500214695, 0.6212827802617646, 0.619556416696514, 0.5742340215193109, 0.5598544891421285, 0.5319373473404988, 0.5497445470589877, 0.5312563467098186, 0.5247297368785252, 0.48957660099880934, 0.4940328121169557, 0.49464404719176, 0.4748442369547534, 0.475943838010107, 0.48125520271789507], "accuracy": [0.24686303734779358, 0.31765949726104736, 0.3090741038322449, 0.4815744161605835, 0.6028265953063965, 0.6882842183113098, 0.722229540348053, 0.7366266250610352, 0.752740740776062, 0.7749306559562683, 0.767930269241333, 0.7643640041351318, 0.7852331399917603, 0.7807422876358032, 0.7997622489929199, 0.789459764957428, 0.8038568496704102, 0.8063663840293884, 0.816008448600769, 0.816008448600769, 0.8128384351730347, 0.819970965385437, 0.8215559124946594, 0.8206313848495483], "val_loss": [1.9517396518162318, 1.9178576469421387, 1.5376057624816895, 0.8889177526746478, 0.6267349379403251, 0.60124785559518, 0.5612552336284092, 0.5496258395058768, 0.5646675825119019, 0.47911146708897184, 0.5031518765858242, 0.49269635336739676, 0.4720627920968192, 0.4849177598953247, 0.45372302191598074, 0.47621008328029085, 0.4800978899002075, 0.4371639830725534, 0.4436578324862889, 0.42552132265908377, 0.4693618672234671, 0.4375803470611572, 0.4424314158303397, 0.4836760589054653], "val_accuracy": [0.27900001406669617, 0.273333340883255, 0.5270000100135803, 0.6486666798591614, 0.7266666889190674, 0.7329999804496765, 0.7416666746139526, 0.7400000095367432, 0.7446666955947876, 0.7916666865348816, 0.7760000228881836, 0.7806666493415833, 0.7903333306312561, 0.7766666412353516, 0.7990000247955322, 0.7799999713897705, 0.7976666688919067, 0.8136666417121887, 0.8203333616256714, 0.8203333616256714, 0.7829999923706055, 0.8196666836738586, 0.7983333468437195, 0.7863333225250244]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 1, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 7, 8, 4, 5, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 3, 1, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8165714144706726, "mapping_values": [1, 5, 5, 2, 3, 1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.pow(grad, tf.math.square(grad))))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.221242314804625, 2.1254255336430945, 2.0649255612869273, 1.5584955756155066, 0.9816347773143439, 1.145990273538692, 0.8203567805905557, 0.7135329442001558, 0.6627262873247142, 0.6436396682692274, 0.6125982333294011, 0.633931805413271, 0.5608833391810326, 0.5579554254447212, 0.5457073908440425, 0.5387865305655447, 0.5373332601858877, 0.5423423840212013], "accuracy": [0.24686303734779358, 0.32003697752952576, 0.3148857355117798, 0.49148064851760864, 0.6400739550590515, 0.6244881749153137, 0.700171709060669, 0.7290979027748108, 0.750759482383728, 0.7547219395637512, 0.7695152759552002, 0.7630431652069092, 0.785629391670227, 0.7841764688491821, 0.7911768555641174, 0.7942147850990295, 0.8037247657775879, 0.7964601516723633], "val_loss": [1.9517596789768763, 1.9283926146371024, 1.4889135020119804, 0.7517670563289097, 1.327979462487357, 0.746034060205732, 0.5637725761958531, 0.5442688465118408, 0.6005728074482509, 0.6034689971378872, 0.523194704736982, 0.502510564667838, 0.4484515530722482, 0.46658073152814594, 0.45324288095746723, 0.45157183919634136, 0.47243194920676096, 0.4638820546013968], "val_accuracy": [0.2773333191871643, 0.25866666436195374, 0.5316666960716248, 0.6993333101272583, 0.5266666412353516, 0.6916666626930237, 0.7416666746139526, 0.75, 0.7269999980926514, 0.734000027179718, 0.7556666731834412, 0.7670000195503235, 0.8096666932106018, 0.7933333516120911, 0.7916666865348816, 0.8043333292007446, 0.7940000295639038, 0.7806666493415833]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 1, 4, 6, 2, 1, 9, 2, 2, 3, 5, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 36, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.805142879486084, "mapping_values": [1, 5, 5, 3, 2, 2, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)))))))))))), grad)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2212391930989397, 2.1165376438236096, 2.1691366556439937, 1.6238038454860697, 1.0759706376581744, 0.8462420728984148, 0.7455551947396051, 0.6963627994603737, 0.6409071888339172, 0.6355475247449501, 0.6003370513895232, 0.6068796793215657, 0.5644990359362263, 0.551896463169823, 0.5485253666826857, 0.5254108197244088, 0.536086458398398, 0.5143064979737886, 0.49903591923694157, 0.4945293573372085, 0.4713604085205442, 0.50269172011255, 0.46547150302084445, 0.479687310819219, 0.44679743234964175, 0.4766276036790806, 0.4465526341250418, 0.434444208178837, 0.45388180591395316, 0.4329534031892607, 0.4236682732627062, 0.4142683435031184, 0.43396160898506525, 0.40652471715039457, 0.40362407034650505, 0.41361212318268875, 0.38340350874127527, 0.39338843765165576, 0.38102318361261817, 0.3652344078018429, 0.38865994191157144, 0.407405938108316, 0.37271183552034715, 0.37027794635606054, 0.3601479366463031, 0.3832795599456067, 0.34313821421795676, 0.34856691950615515, 0.34979049883278024, 0.3419443359385707, 0.3565004708083267], "accuracy": [0.24686303734779358, 0.3181878328323364, 0.29639413952827454, 0.4649319648742676, 0.6223748326301575, 0.6893408894538879, 0.7176066637039185, 0.7337207794189453, 0.7560427784919739, 0.7592127919197083, 0.7775723338127136, 0.7728173136711121, 0.785101056098938, 0.7895918488502502, 0.7848368883132935, 0.7973847389221191, 0.7971205711364746, 0.8112534880638123, 0.8104609847068787, 0.8153480291366577, 0.8239334225654602, 0.8108572363853455, 0.8219521641731262, 0.8195747137069702, 0.8298771381378174, 0.8181217908859253, 0.8317263126373291, 0.8380662798881531, 0.8290846943855286, 0.8380662798881531, 0.8384625315666199, 0.8455950617790222, 0.8363492488861084, 0.8473120927810669, 0.8432175517082214, 0.8407079577445984, 0.8577466607093811, 0.8521991968154907, 0.8605204224586487, 0.8618412613868713, 0.847840428352356, 0.8510104417800903, 0.8615770936012268, 0.8607845902442932, 0.8595958352088928, 0.852859616279602, 0.8687095642089844, 0.8665962219238281, 0.8692378997802734, 0.8737286925315857, 0.8684453964233398], "val_loss": [1.9517228943961007, 1.922806944165911, 1.6568334783826555, 1.1014620576586043, 0.8792845181056431, 0.5928104945591518, 0.5692233869007656, 0.5187619924545288, 0.6145935739789691, 0.5596172979899815, 0.48933511120932444, 0.48193681240081787, 0.4658318928309849, 0.47323461941310335, 0.44655466079711914, 0.4748614515577044, 0.4569002560206822, 0.42999943665095736, 0.4550725221633911, 0.4130310075623648, 0.4260621666908264, 0.43152343375342234, 0.40551122597285677, 0.4242501514298575, 0.41069612332752775, 0.3990750994001116, 0.3959296090262277, 0.4046142101287842, 0.42691744225365774, 0.38581033263887676, 0.38233792781829834, 0.40931616510663715, 0.41616714000701904, 0.4025126780782427, 0.38504927498953684, 0.38308290924344746, 0.373281683240618, 0.4076840281486511, 0.3581941894122532, 0.392325188432421, 0.3978715113231114, 0.39693592275891987, 0.36115841354642597, 0.35935149874006, 0.3897695541381836, 0.35446217230388094, 0.3718553696359907, 0.3762117453983852, 0.459984370640346, 0.3830014041491917, 0.36677737746919903], "val_accuracy": [0.27666667103767395, 0.2683333456516266, 0.543666660785675, 0.612333357334137, 0.656000018119812, 0.734666645526886, 0.7353333234786987, 0.7553333044052124, 0.7440000176429749, 0.765999972820282, 0.7853333353996277, 0.7823333144187927, 0.7906666398048401, 0.7903333306312561, 0.796999990940094, 0.7786666750907898, 0.8059999942779541, 0.8169999718666077, 0.8006666898727417, 0.8203333616256714, 0.8223333358764648, 0.8169999718666077, 0.8289999961853027, 0.812666654586792, 0.8330000042915344, 0.8309999704360962, 0.8326666951179504, 0.8253333568572998, 0.812666654586792, 0.8363333344459534, 0.8399999737739563, 0.8296666741371155, 0.8286666870117188, 0.8233333230018616, 0.8383333086967468, 0.8413333296775818, 0.8450000286102295, 0.824999988079071, 0.8516666889190674, 0.8396666646003723, 0.8330000042915344, 0.8366666436195374, 0.8500000238418579, 0.8523333072662354, 0.8360000252723694, 0.8546666502952576, 0.8393333554267883, 0.8483333587646484, 0.8286666870117188, 0.8443333506584167, 0.8503333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 3, 2, 4, 6, 3, 5, 2, 5, 3, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 2, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [49, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7914285659790039, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.393364305934571, 1.89088254380519, 1.648266172239006, 1.4386972247837808, 1.1220927822465485, 0.9002817841789207, 0.8277669513560935, 0.7572507858670005, 0.761788432868307, 0.7376042542723995, 0.6970010172295737, 0.6435961777649661, 0.6493007279169826, 0.619781993100231, 0.6024582451990551, 0.561577092473848, 0.5818660178865975, 0.557218199117293], "accuracy": [0.26443007588386536, 0.3653414249420166, 0.4563465714454651, 0.5134063959121704, 0.6107515692710876, 0.6701889038085938, 0.6925109028816223, 0.7172104120254517, 0.7195879220962524, 0.722229540348053, 0.7380794882774353, 0.7625148296356201, 0.7478536367416382, 0.7642319202423096, 0.7777044177055359, 0.7935543656349182, 0.7832518815994263, 0.7947431206703186], "val_loss": [1.8573358399527413, 1.1628972462245397, 1.0587245055607386, 0.9567595549992153, 0.7536223445619855, 0.7503547498158046, 0.6098676579339164, 0.6940487793513707, 0.5980127028056553, 0.6134572199412754, 0.5214873722621373, 0.5635923317500523, 0.49846976143973215, 0.5185268606458392, 0.494665333202907, 0.5210934025900704, 0.47627389430999756, 0.5102167981011527], "val_accuracy": [0.19833333790302277, 0.5396666526794434, 0.6019999980926514, 0.5903333425521851, 0.6726666688919067, 0.6606666445732117, 0.7213333249092102, 0.6793333292007446, 0.7306666374206543, 0.7106666564941406, 0.7593333125114441, 0.7229999899864197, 0.7886666655540466, 0.7673333287239075, 0.7773333191871643, 0.753333330154419, 0.7883333563804626, 0.762333333492279]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [93, 80, 61], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 2, 1, 2, 6, 2, 1, 2, 2, 0, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 0, 3, 1, 3, 3, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 36, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7902857065200806, "mapping_values": [1, 5, 5, 3, 2, 2, 15, 15, 7, 8, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, alpha))), grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3933680206793113, 1.8868086811983196, 1.6412725352718216, 1.2826658664142072, 1.0311589403285357, 0.8957368701188603, 0.8723829965061751, 0.7645514322750604, 0.7438599274394976, 0.7393589628182067, 0.7101882559165759, 0.6689887048782154, 0.6466572578588513, 0.6188342212496999, 0.6153418352465037, 0.5879685757985567, 0.587108871523006, 0.5972884092364313], "accuracy": [0.26443007588386536, 0.36600184440612793, 0.4768194556236267, 0.5625412464141846, 0.6262052655220032, 0.6654338836669922, 0.6754721999168396, 0.7162858247756958, 0.7213049530982971, 0.7174745798110962, 0.7397965788841248, 0.7518161535263062, 0.7532690763473511, 0.7721568942070007, 0.7683265209197998, 0.77677983045578, 0.7795535326004028, 0.7726852297782898], "val_loss": [1.8573414257594518, 1.1804494857788086, 1.0103862285614014, 0.9266715390341622, 0.704194460596357, 0.7500096900122506, 0.6149494647979736, 0.6644431693213326, 0.6360016550336566, 0.5623676606587001, 0.573779991694859, 0.535103576523917, 0.5120805161339896, 0.5149772678102765, 0.5362067222595215, 0.4855537584849766, 0.5149673393794468, 0.5002932548522949], "val_accuracy": [0.19833333790302277, 0.5139999985694885, 0.5536666512489319, 0.5973333120346069, 0.6896666884422302, 0.6636666655540466, 0.7226666808128357, 0.6806666851043701, 0.70333331823349, 0.7480000257492065, 0.7269999980926514, 0.7583333253860474, 0.7870000004768372, 0.7733333110809326, 0.7556666731834412, 0.7823333144187927, 0.7689999938011169, 0.7586666941642761]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 1, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 3, 2, 1, 4, 6, 2, 1, 9, 2, 2, 3, 5, 1, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 3, 0, 1, 2, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [7, 9, 76, 58]], "fitness": -0.3160000145435333, "mapping_values": [1, 5, 5, 3, 2, 2, 67, 67, 40, 27, 6, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), beta))))), tf.math.negative(tf.math.pow(tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), beta))))), tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(tf.math.add(beta, grad), alpha), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, grad)))), tf.math.add(beta, beta)))))), tf.math.add(beta, grad)), grad), alpha)), tf.math.add(beta, grad))))))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3024932737631363, 2.3004281724590463, 2.3016933122913774, 2.3023952083061117, 2.3016266850527045, 2.302365154590841, 2.3021051018638947, 2.3005658654394465, 2.3007236315259023, 2.299385800668356, 2.299128735621277, 2.298024603404452, 2.298026972222621, 2.298143191911352, 2.297470770964234, 2.296628560372442, 2.29700893200683, 2.295479912563259, 2.2950074555237436, 2.2938901185517016, 2.2941897501483837, 2.2934520753493413, 2.2947570787618, 2.2933222372077475, 2.293498802525162, 2.293138114547276, 2.293490691569818, 2.2918674781763038, 2.2915200541252787, 2.289667825405356, 2.291114213145121, 2.290799376199652, 2.290011985159317, 2.289301607697285, 2.2899828696562676, 2.287678356262608, 2.287927967162731, 2.2888876377174237, 2.2900504285570276, 2.287674449328119, 2.287124098599028, 2.2870372002702015, 2.2868003308292804, 2.286888944096553, 2.2859925364364706, 2.285856389287692, 2.2850820443192807, 2.2839885664937234, 2.284905339622573, 2.284851194357025, 2.283584574477831, 2.282652698723931, 2.283235407114942, 2.282590330111557, 2.2821486689993704, 2.282002378369776, 2.281930412614445, 2.281608843768766, 2.282066153938335, 2.2800194086289722, 2.279364585057698, 2.280432674626885, 2.280147005302118, 2.280167730524398, 2.2787189925776623, 2.2775438399032093, 2.2765471363395133, 2.2779508529479684, 2.279014035648028, 2.2762488919226502, 2.275377958678393, 2.2776596281018633, 2.275907371053921, 2.2746343496783914, 2.2740545289517393, 2.274167831815418, 2.2733458944866607, 2.271671745109835, 2.2729582442678025, 2.271581719312465, 2.272312896126659, 2.2720138565613186, 2.271439848543237, 2.272142740965614, 2.2700131881695222, 2.271107536438607, 2.269198092581684, 2.269803695769405, 2.269332552661576, 2.2698273042787918, 2.268786721084065, 2.26854291335073, 2.2669883482586264, 2.2671863303728044, 2.266064164503423, 2.2649529537016515, 2.2665667982306763, 2.2639715997156546, 2.264119652425766, 2.263876435558605], "accuracy": [0.08994849026203156, 0.09734513610601425, 0.09826971590518951, 0.09272222965955734, 0.09840179979801178, 0.0952318087220192, 0.09311848133802414, 0.09496764093637466, 0.09245806187391281, 0.10553427785634995, 0.1026284471154213, 0.09853387624025345, 0.10421344637870789, 0.09972262382507324, 0.09985470771789551, 0.10355303436517715, 0.10540219396352768, 0.11002509295940399, 0.10394927859306335, 0.11293092370033264, 0.11240258812904358, 0.10989301651716232, 0.10513802617788315, 0.11015717685222626, 0.11015717685222626, 0.11345925182104111, 0.11015717685222626, 0.11742173880338669, 0.120459645986557, 0.12495046854019165, 0.12561088800430298, 0.1158367469906807, 0.11966715008020401, 0.12323339283466339, 0.1216483935713768, 0.12838461995124817, 0.12996962666511536, 0.11861048638820648, 0.12600713968276978, 0.1294412910938263, 0.13036586344242096, 0.13010171055793762, 0.13432836532592773, 0.12891295552253723, 0.13129045069217682, 0.13300752639770508, 0.13089419901371002, 0.13934750854969025, 0.13274335861206055, 0.13432836532592773, 0.14357416331768036, 0.14581957459449768, 0.13974376022815704, 0.1460837423801422, 0.14489498734474182, 0.1402720957994461, 0.14489498734474182, 0.14568749070167542, 0.1430458277463913, 0.14819706976413727, 0.1562541276216507, 0.14912164211273193, 0.14476291835308075, 0.14714039862155914, 0.15017831325531006, 0.15136705338954926, 0.16193369030952454, 0.1538766324520111, 0.15057456493377686, 0.15651829540729523, 0.1566503793001175, 0.15572579205036163, 0.15374454855918884, 0.16034869849681854, 0.1690661758184433, 0.16378284990787506, 0.17197199165821075, 0.17302866280078888, 0.1710474193096161, 0.16457535326480865, 0.16840575635433197, 0.17117950320243835, 0.17395325005054474, 0.17751948535442352, 0.17712323367595673, 0.17580240964889526, 0.1814819723367691, 0.17672698199748993, 0.17078325152397156, 0.177255317568779, 0.18002906441688538, 0.18240654468536377, 0.1826707124710083, 0.1846519559621811, 0.18623696267604828, 0.1846519559621811, 0.18280279636383057, 0.1872936189174652, 0.19772817194461823, 0.18914277851581573], "val_loss": [1.9708249909537179, 1.9704615729195731, 1.9701019014630998, 1.9697390965053014, 1.9693752697535925, 1.969015325818743, 1.9686553818838937, 1.9682936668395996, 1.9679351534162248, 1.967576231275286, 1.9672183990478516, 1.9668621335710799, 1.966505527496338, 1.9661483083452498, 1.965787751334054, 1.9654301915849959, 1.9650779451642717, 1.964721952165876, 1.9643662316458566, 1.9640109879629952, 1.9636553355625697, 1.963301113673619, 1.96294709614345, 1.9625888551984514, 1.962235995701381, 1.961886269705636, 1.9615332739693778, 1.9611800057547433, 1.960827350616455, 1.9604724475315638, 1.9601176806858607, 1.9597602571759904, 1.9594073295593262, 1.9590541975838798, 1.95869813646589, 1.9583418709891183, 1.9579884665352958, 1.9576339721679688, 1.9572785241263253, 1.9569238254002161, 1.95657137462071, 1.9562185151236398, 1.955866745540074, 1.9555158615112305, 1.955160072871617, 1.9548042842320033, 1.9544514928545271, 1.954092366354806, 1.9537365777151925, 1.9533846037728446, 1.9530269759041923, 1.952669279915946, 1.952314785548619, 1.951958247593471, 1.9516057286943709, 1.9512499400547572, 1.9508957862854004, 1.9505390439714705, 1.9501803943089075, 1.9498248781476701, 1.949467590876988, 1.949110780443464, 1.94875397000994, 1.9483989306858607, 1.9480446406773158, 1.9476849692208427, 1.94732700075422, 1.946965149470738, 1.946606227329799, 1.946247168949672, 1.9458858626229423, 1.9455270767211914, 1.9451663834708077, 1.9448058264596122, 1.9444419997079032, 1.9440787860325404, 1.9437109402247839, 1.9433461597987585, 1.9429853984287806, 1.9426191874912806, 1.9422587667192732, 1.941891806466239, 1.9415247780936105, 1.941161836896624, 1.9407951491219657, 1.9404295512608118, 1.9400576863970076, 1.9396894318716866, 1.9393202917916434, 1.9389518329075404, 1.9385792187282018, 1.938208988734654, 1.9378346034458704, 1.9374608993530273, 1.9370840617588587, 1.9367067473275321, 1.9363318170819963, 1.935955388205392, 1.935577665056501, 1.9351934024265833], "val_accuracy": [0.03866666555404663, 0.041333332657814026, 0.041999999433755875, 0.043666668236255646, 0.04399999976158142, 0.04699999839067459, 0.050333332270383835, 0.052666667848825455, 0.05433333292603493, 0.055666666477918625, 0.057999998331069946, 0.05966666713356972, 0.06366666406393051, 0.0663333311676979, 0.0689999982714653, 0.0729999989271164, 0.07633333653211594, 0.0793333351612091, 0.0846666693687439, 0.08699999749660492, 0.08866667002439499, 0.09099999815225601, 0.09466666728258133, 0.09833333641290665, 0.10133333504199982, 0.10466666519641876, 0.10700000077486038, 0.11033333092927933, 0.1133333370089531, 0.11699999868869781, 0.11999999731779099, 0.1236666664481163, 0.12600000202655792, 0.1303333342075348, 0.13333334028720856, 0.13766667246818542, 0.14166666567325592, 0.14733333885669708, 0.14900000393390656, 0.15199999511241913, 0.15600000321865082, 0.16099999845027924, 0.164000004529953, 0.16866666078567505, 0.17299999296665192, 0.1756666600704193, 0.17933332920074463, 0.18266665935516357, 0.1860000044107437, 0.18833333253860474, 0.1913333386182785, 0.19466666877269745, 0.19833333790302277, 0.2006666660308838, 0.20366667211055756, 0.20466665923595428, 0.2070000022649765, 0.20999999344348907, 0.21299999952316284, 0.2150000035762787, 0.21899999678134918, 0.22066666185855865, 0.22466666996479034, 0.22766666114330292, 0.22966666519641876, 0.23066666722297668, 0.23333333432674408, 0.2370000034570694, 0.23899999260902405, 0.24300000071525574, 0.2460000067949295, 0.24833333492279053, 0.2513333261013031, 0.2549999952316284, 0.25866666436195374, 0.2626666724681854, 0.26466667652130127, 0.2666666805744171, 0.27033331990242004, 0.27300000190734863, 0.27533334493637085, 0.27666667103767395, 0.27799999713897705, 0.2809999883174896, 0.28433331847190857, 0.2863333225250244, 0.2903333306312561, 0.2930000126361847, 0.29366666078567505, 0.296999990940094, 0.29899999499320984, 0.30133333802223206, 0.30266666412353516, 0.3036666810512543, 0.304666668176651, 0.30566665530204773, 0.3070000112056732, 0.31066668033599854, 0.31166666746139526, 0.31333333253860474]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 0, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2], [93, 98, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 3, 2, 4, 6, 5, 5, 4, 5, 3, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [49, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [3, 2, 8, 8, 6, 7, 4, 5, 6, 3, 1, 9, 8, 5, 8, 3, 1, 4, 4, 1, 4, 1, 0, 1, 9], [1, 3, 2, 1, 0, 0, 2, 2, 2, 0, 2, 1, 1, 2, 0], [48, 9, 76, 58, 52, 9]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 22, 22, 12, 10, 1, 1, 1, 0, 1, 0, 40, 25, 15, 6], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), grad), tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.square(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(sigma, tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.square(tf.math.sqrt(tf.math.multiply(beta, beta)))))), tf.math.subtract(tf.math.pow(tf.math.pow(beta, tf.math.subtract(tf.math.pow(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, alpha)), alpha)), tf.math.negative(tf.math.subtract(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 3, 1, 9, 0, 2, 1, 9, 0, 2, 0, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 0, 3, 1, 3, 3, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [3, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6, 9, 4, 6, 0, 5, 4, 0], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 24, 16, 8, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(grad, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.negative(beta), beta)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 9, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 0, 3, 1, 0, 0, 3, 2, 2, 0, 1, 1], [98, 98, 93, 70, 51, 38], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 1, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 69, 7, 51, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(sigma), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 1, 3, 6, 2, 1, 9, 2, 4, 3, 5, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 3, 0, 1, 3, 2, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 17, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [92, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, beta))))))))))))), grad)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 9, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 0, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 3, 7, 8, 4, 6, 5, 1, 9, 2, 2, 3, 3, 9, 8, 0, 4, 1, 5, 0, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 3, 3, 0, 3, 2, 3, 3, 0, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 69, 7, 51, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6, 7, 4, 7, 6, 5, 8, 7, 1], [0, 3, 2, 1, 0, 0, 2, 2, 0, 2, 0, 0], [48, 9, 76, 58, 16, 54]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 2, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 29, 17, 12, 6], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), beta)), tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), beta)))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 8, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [95, 80, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 5, 1, 4, 6, 2, 1, 2, 2, 0, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 16, 16, 8, 8, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, grad)))), alpha))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 6, 4, 6, 2, 1, 4, 2, 2, 3, 5, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 2, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 38, 38, 22, 16, 4, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))))), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), beta)))), tf.math.add(beta, tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.sqrt(grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, beta), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 9, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 9, 4, 6, 2, 1, 9, 2, 2, 3, 5, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 3, 3, 0, 3, 2, 3, 3, 0, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [34, 19, 36, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [8, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.30254420461341, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 5, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 3, 2, 4, 6, 2, 5, 2, 5, 3, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 2, 3, 3, 3, 3, 0, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 69, 7, 51, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [91, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 1, 26, 26, 15, 11, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, grad)), tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))), grad)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3029952516582237, 2.3030054151358432, 2.302952306114089, 2.303084141920586, 2.30308093969234, 2.303004892416256, 2.303038477566988, 2.3028838107016236], "accuracy": [0.09100515395402908, 0.09496764093637466, 0.09351472556591034, 0.09681680053472519, 0.1022322028875351, 0.09377889335155487, 0.09192973375320435, 0.09391097724437714], "val_loss": [1.9736899648393904, 1.9737201418195451, 1.97361387525286, 1.97370331627982, 1.9736370359148299, 1.9736078807285853, 1.9736740248543876, 1.973583493913923], "val_accuracy": [0.09799999743700027, 0.10133333504199982, 0.10233332961797714, 0.09666666388511658, 0.10000000149011612, 0.09666666388511658, 0.10066666454076767, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 9, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 0, 1, 2, 1, 2, 2, 2, 2, 3, 2, 3, 3], [93, 80, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 0, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [14, 19, 69, 7, 51, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [6, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.06771428883075714, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [1.8053991036781874e+24, 2.113910236889793e+24, 2.1457653993957205e+24, 2.1373578752403616e+24, 2.15256703723645e+24, 2.1731293525637717e+24], "accuracy": [0.08968432247638702, 0.09140139818191528, 0.08466517180204391, 0.09285431355237961, 0.08955223858356476, 0.08928807079792023], "val_loss": [1.4513405363251456e+24, 1.4513405363251456e+24, 1.4513405363251456e+24, 1.4513405363251456e+24, 1.4513405363251456e+24, 1.4513405363251456e+24], "val_accuracy": [0.07233333587646484, 0.07233333587646484, 0.07233333587646484, 0.07233333587646484, 0.07233333587646484, 0.07233333587646484]}}]