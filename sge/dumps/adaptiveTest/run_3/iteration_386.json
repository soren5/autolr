[{"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 5, 5, 5, 1, 7, 1, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8, 9], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.826285719871521, "mapping_values": [1, 31, 31, 20, 11, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, alpha)))), alpha)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2202309942705254, 1.8990428772868262, 1.5622057198470436, 1.1713712575602226, 0.986846077144579, 0.8805940929830287, 0.7834092868931651, 0.7202041050651212, 0.719788324366849, 0.662491936882678, 0.6328164091546066, 0.6205290109568646, 0.601079658030078, 0.569489163871234, 0.5555861289585271, 0.5796082894311778, 0.5251481025966246, 0.5141558662428911, 0.5130920912123249, 0.510845272016878, 0.4809364133294642, 0.4809333166748919, 0.48104538401561, 0.44868324331131276, 0.47190682600045547, 0.45330266524394114, 0.4516650573287138, 0.4275426633676691, 0.4340273386861166, 0.41763419867853024, 0.39899098919587694, 0.39981896718888943, 0.38740489205679857, 0.39766988492818195, 0.3925817603125564, 0.36055967506951725, 0.37156547958887703, 0.3765430292078942, 0.35381686180463917, 0.3474100855253061, 0.34926727649526607], "accuracy": [0.26760005950927734, 0.4027208983898163, 0.46889445185661316, 0.5538238286972046, 0.6342623233795166, 0.6626601219177246, 0.7021529674530029, 0.724210798740387, 0.7305507659912109, 0.7475894689559937, 0.7556465268135071, 0.7648923397064209, 0.7681944370269775, 0.7800818681716919, 0.7913089394569397, 0.7755910754203796, 0.8000264167785645, 0.8053097128868103, 0.8115176558494568, 0.8098005652427673, 0.8202351331710815, 0.81548011302948, 0.8131026029586792, 0.8334434032440186, 0.8240655064582825, 0.8290846943855286, 0.8271034359931946, 0.8350284099578857, 0.8363492488861084, 0.8412362933158875, 0.8494254350662231, 0.8451988101005554, 0.8561616539955139, 0.8508783578872681, 0.8549728989601135, 0.8594637513160706, 0.8576145768165588, 0.8536521196365356, 0.871879518032074, 0.8677849769592285, 0.8684453964233398], "val_loss": [1.8798845836094447, 0.957791805267334, 1.261202233178275, 0.6530308553150722, 0.7499619211469378, 0.6776702404022217, 0.6298737866537911, 0.561698419707162, 0.5334796224321637, 0.555716735976083, 0.5464014155524117, 0.5409214156014579, 0.45930186339787077, 0.4737146241324289, 0.49918571540287565, 0.4524034432002476, 0.43600378717694965, 0.4856651340212141, 0.42917304379599436, 0.4184086493083409, 0.43924224376678467, 0.39881575107574463, 0.4003582681928362, 0.4226529002189636, 0.3949378899165562, 0.3970433132989066, 0.4207438315664019, 0.45386251381465365, 0.3906974622181484, 0.37357835258756367, 0.3774080617087228, 0.3937737260546003, 0.38984179496765137, 0.4132885251726423, 0.3746097002710615, 0.36729136535099577, 0.3680764521871294, 0.40235999652317594, 0.3759712832314627, 0.3609249676976885, 0.3600256698472159], "val_accuracy": [0.3659999966621399, 0.624666690826416, 0.4216666519641876, 0.7263333201408386, 0.67166668176651, 0.6830000281333923, 0.7083333134651184, 0.7516666650772095, 0.7576666474342346, 0.7329999804496765, 0.7483333349227905, 0.7316666841506958, 0.7946666479110718, 0.7866666913032532, 0.7630000114440918, 0.7986666560173035, 0.8116666674613953, 0.768666684627533, 0.8153333067893982, 0.815666675567627, 0.8003333210945129, 0.8360000252723694, 0.8366666436195374, 0.8259999752044678, 0.8416666388511658, 0.8339999914169312, 0.8140000104904175, 0.7829999923706055, 0.8356666564941406, 0.843666672706604, 0.8443333506584167, 0.8446666598320007, 0.8326666951179504, 0.8103333115577698, 0.8416666388511658, 0.8496666550636292, 0.8486666679382324, 0.8306666612625122, 0.8413333296775818, 0.846666693687439, 0.847000002861023]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [1, 80, 61, 19], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8191428780555725, "mapping_values": [1, 5, 5, 2, 3, 2, 23, 23, 12, 11, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2202950208540746, 1.900610474705019, 1.4098239813057534, 1.433580899566093, 1.0312582487128492, 0.8527649581991308, 0.7838335113675918, 0.717359650876654, 0.6886820935255124, 0.666573307281472, 0.6139677426109948, 0.6094911407800855, 0.5866539329428163, 0.5604989491339136, 0.57434017965901, 0.5596484200648344, 0.5141355382641939, 0.5252741963604202, 0.5056863992386774, 0.5042015415109647, 0.47930906754931313, 0.46492139821700634, 0.46973520600800467, 0.44432058208465197, 0.4538650860631817, 0.44766510526076786, 0.4388259204702134, 0.4138899838896066, 0.4141585125371749, 0.4111762935333343, 0.39128807631497525, 0.3950698089920818, 0.3842408445296806, 0.38262797392370396, 0.3902624600937558, 0.36583703440634835], "accuracy": [0.2673358917236328, 0.4027208983898163, 0.5178972482681274, 0.5031039714813232, 0.6240919232368469, 0.6793025732040405, 0.7033417224884033, 0.7343811988830566, 0.739400327205658, 0.7420420050621033, 0.763967752456665, 0.7707040309906006, 0.7754589915275574, 0.7854973077774048, 0.7844406366348267, 0.7878747582435608, 0.8100647330284119, 0.7980451583862305, 0.8107251524925232, 0.8103289008140564, 0.8157442808151245, 0.8230088353157043, 0.8168009519577026, 0.8286884427070618, 0.8305375576019287, 0.8278959393501282, 0.8345000743865967, 0.8441421389579773, 0.839519202709198, 0.8449346423149109, 0.8510104417800903, 0.8504821062088013, 0.8569541573524475, 0.8558974862098694, 0.8544445633888245, 0.8605204224586487], "val_loss": [1.880305290222168, 0.9496751853397915, 1.8519351141793388, 0.866318941116333, 0.7053096124104091, 0.6651984793799264, 0.6377913100378854, 0.6059301751000541, 0.5342744759150914, 0.5211744138172695, 0.5082479204450335, 0.5186033248901367, 0.48112610408238005, 0.4456775188446045, 0.4712256874356951, 0.44154361316135954, 0.42776353870119366, 0.4546323333467756, 0.41336582388196674, 0.4107573798724583, 0.42103529827935354, 0.38721661056791035, 0.3935085449899946, 0.4575396605900356, 0.39622968435287476, 0.37906742095947266, 0.39882002558026997, 0.43551509720938547, 0.38044216803142, 0.3663628612245832, 0.3622080683708191, 0.3745006833757673, 0.3661692568234035, 0.38391687188829693, 0.3883510572569711, 0.38993195976529804], "val_accuracy": [0.367000013589859, 0.6269999742507935, 0.23133333027362823, 0.6056666374206543, 0.6859999895095825, 0.6869999766349792, 0.6976666450500488, 0.7129999995231628, 0.7563333511352539, 0.7559999823570251, 0.7676666378974915, 0.7473333477973938, 0.7736666798591614, 0.8083333373069763, 0.7946666479110718, 0.8009999990463257, 0.8106666803359985, 0.7923333048820496, 0.8226666450500488, 0.8186666369438171, 0.8059999942779541, 0.8356666564941406, 0.8386666774749756, 0.8066666722297668, 0.8293333053588867, 0.8420000076293945, 0.8286666870117188, 0.7950000166893005, 0.8353333473205566, 0.8446666598320007, 0.8493333458900452, 0.8476666808128357, 0.8393333554267883, 0.8233333230018616, 0.82833331823349, 0.8349999785423279]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0], [92, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8062857389450073, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.21999276199235, 1.8846678022915708, 1.4931333047555437, 1.0743370335950135, 1.0249980145504667, 0.8611229942018456, 0.7373581433875639, 0.7820367257529875, 0.699863649094818, 0.6747541402104571, 0.6347881185222752, 0.6411183229400939, 0.6137411414577094, 0.5704035525702372, 0.5568511228220668, 0.5712752999441892, 0.5360965417392218, 0.5175571240580171, 0.5496203995982276, 0.5255062597310617, 0.48385971723971444, 0.4827437285757525, 0.4934791561288447, 0.4632179661197685, 0.481982209828583, 0.45468227572177206, 0.45885768710677305, 0.42761950389489584], "accuracy": [0.2677321434020996, 0.4060229957103729, 0.48685774207115173, 0.5972790718078613, 0.6166952848434448, 0.6692643165588379, 0.7235503792762756, 0.7091533541679382, 0.7305507659912109, 0.7360982894897461, 0.7572315335273743, 0.7567031979560852, 0.7646281719207764, 0.7771760821342468, 0.7869502305984497, 0.7814027070999146, 0.7926297783851624, 0.8074230551719666, 0.7940827012062073, 0.7987055778503418, 0.8162726163864136, 0.8117818236351013, 0.8124422430992126, 0.8256505131721497, 0.8169330358505249, 0.8264430165290833, 0.8285563588142395, 0.8368775844573975], "val_loss": [1.8767292158944267, 1.0384583473205566, 0.8801964351109096, 0.8854364667619977, 0.7457876375743321, 0.6344576052256993, 0.6207945687430245, 0.6055188860212054, 0.5404801368713379, 0.5185841832842145, 0.5299297060285296, 0.5535433462687901, 0.46943019117627827, 0.49426606723240446, 0.487193090575082, 0.45475668566567556, 0.4328087057386126, 0.500935571534293, 0.45885768958500456, 0.42701977491378784, 0.43279593331473215, 0.4075534769466945, 0.40952626296452116, 0.45054732050214497, 0.40904069798333303, 0.43683625970567974, 0.4210340806416103, 0.4744916132518223], "val_accuracy": [0.36766666173934937, 0.578000009059906, 0.565666675567627, 0.5799999833106995, 0.6646666526794434, 0.7260000109672546, 0.7319999933242798, 0.7170000076293945, 0.753333330154419, 0.765333354473114, 0.7580000162124634, 0.7253333330154419, 0.7916666865348816, 0.7733333110809326, 0.7770000100135803, 0.7933333516120911, 0.8180000185966492, 0.7760000228881836, 0.7916666865348816, 0.8119999766349792, 0.8033333420753479, 0.8206666707992554, 0.8323333263397217, 0.8080000281333923, 0.8309999704360962, 0.8016666769981384, 0.8133333325386047, 0.7760000228881836]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 4, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [77, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8059999942779541, "mapping_values": [1, 10, 10, 6, 4, 3, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad)))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.pow(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.220011515813245, 1.8858985869545333, 1.527060781597792, 1.1285307883208595, 0.9162665063584439, 0.8086115914628081, 0.8007646826012355, 0.7393366816478115, 0.7076280779527431, 0.6615057915523934, 0.6466825717885213, 0.6331040170749794, 0.6077951957694198, 0.5728265855841712, 0.5541201059875897, 0.5668826839943069, 0.5332278934656873, 0.5372136101478977, 0.550479396042051, 0.5247124691547074, 0.487610399203451, 0.4826097690536362, 0.49559140752539926, 0.46946375049761874, 0.4729364013604169, 0.4640968404016506, 0.4552411907943579, 0.43496962270133954], "accuracy": [0.26760005950927734, 0.40562674403190613, 0.4873860776424408, 0.5901466012001038, 0.6680755615234375, 0.6927750706672668, 0.6972658634185791, 0.7277770638465881, 0.7294940948486328, 0.746268630027771, 0.7515519857406616, 0.7609298825263977, 0.7633073329925537, 0.7817989587783813, 0.7868181467056274, 0.7828556299209595, 0.7973847389221191, 0.796328067779541, 0.7977809906005859, 0.7969884872436523, 0.8142913579940796, 0.8127063512802124, 0.8087438941001892, 0.8230088353157043, 0.8244617581367493, 0.8248580098152161, 0.8273676037788391, 0.8350284099578857], "val_loss": [1.8768692016601562, 0.9761056559426444, 0.946894781930106, 0.8006714923041207, 0.6468543836048671, 0.6697157110486712, 0.6595455237797329, 0.5876402514321464, 0.5521570273808071, 0.5253691843577794, 0.5524407965796334, 0.5050395386559623, 0.47253009251185824, 0.49854096344539095, 0.4602483000074114, 0.4512765918459211, 0.44613518033708843, 0.48056496892656597, 0.44272066014153616, 0.42132203919546946, 0.42470903056008474, 0.41834844861711773, 0.41336339712142944, 0.4236580729484558, 0.39796152285167147, 0.4464076927730015, 0.4132311088698251, 0.4218099117279053], "val_accuracy": [0.36766666173934937, 0.5889999866485596, 0.637666642665863, 0.6623333096504211, 0.70333331823349, 0.6850000023841858, 0.6976666450500488, 0.715666651725769, 0.7350000143051147, 0.7570000290870667, 0.7429999709129333, 0.7749999761581421, 0.7886666655540466, 0.7743333578109741, 0.7913333177566528, 0.8016666769981384, 0.8069999814033508, 0.7956666946411133, 0.7996666431427002, 0.8130000233650208, 0.8053333163261414, 0.8113333582878113, 0.8379999995231628, 0.8220000267028809, 0.8356666564941406, 0.8090000152587891, 0.8159999847412109, 0.8090000152587891]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 6, 5, 6, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 2, 3, 1, 8, 4, 3, 4, 2, 4, 3], [2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 0, 0, 2, 1, 1, 1], [91, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.7634285688400269, "mapping_values": [1, 9, 9, 6, 3, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))), tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0948548901429063, 1.7043418938284458, 1.3923853863940467, 1.0587005661211277, 0.8824647480722557, 0.8421007360859066, 0.7269039049896157, 0.6702160473355465, 0.6780720036641686, 0.6335690123939464, 0.6322925715020713, 0.6036663682248851], "accuracy": [0.3255844712257385, 0.4084004759788513, 0.5111610293388367, 0.6112799048423767, 0.6812838315963745, 0.6900013089179993, 0.7263241410255432, 0.7452120184898376, 0.7471932172775269, 0.7511557340621948, 0.7588165402412415, 0.7707040309906006], "val_loss": [1.6665354796818324, 1.3359884534563338, 1.014810289655413, 0.8730597155434745, 0.6378202949251447, 0.5583513804844448, 0.5217604977743966, 0.5131773437772479, 0.5380736078534808, 0.5455544505800519, 0.5296105146408081, 0.5729277644838605], "val_accuracy": [0.44200000166893005, 0.4326666593551636, 0.5406666398048401, 0.6370000243186951, 0.7196666598320007, 0.746666669845581, 0.7570000290870667, 0.7563333511352539, 0.7306666374206543, 0.746666669845581, 0.7493333220481873, 0.7360000014305115]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [92, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.74657142162323, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.02033802986208, 1.4332401026446255, 1.077253663678447, 0.9099521038948254, 0.8040548555996786, 0.8046172639917719, 0.7407852528180586, 0.7388624812570687, 0.7049303483717383, 0.70561644702209, 0.6590531437923848], "accuracy": [0.3292827904224396, 0.5101043581962585, 0.6037511825561523, 0.6659622192382812, 0.6999075412750244, 0.6968696117401123, 0.7250033020973206, 0.7191916704177856, 0.7371549606323242, 0.7325320243835449, 0.7490423917770386], "val_loss": [1.3292178426470076, 0.9811914307730538, 0.6943776437214443, 0.6434515544346401, 0.5982123613357544, 0.5731968198503766, 0.564023528780256, 0.5577750376292637, 0.5909239394324166, 0.5562784331185477, 0.5461661475045341], "val_accuracy": [0.4026666581630707, 0.6106666922569275, 0.7113333344459534, 0.7099999785423279, 0.7210000157356262, 0.7523333430290222, 0.7480000257492065, 0.7440000176429749, 0.7253333330154419, 0.7326666712760925, 0.7443333268165588]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 4, 4, 8, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [92, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.74657142162323, "mapping_values": [1, 10, 10, 6, 4, 3, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, grad)))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.1700889641629897, 2.1411256385343957, 1.6250596863797406, 1.330749681494759, 0.9485393964445996, 0.8617439549817322, 0.803384137829108, 0.7275927677571482, 0.7315929152820372, 0.7056594855041237, 0.6769304179858695, 0.6534993431319681], "accuracy": [0.28424251079559326, 0.26482629776000977, 0.42926958203315735, 0.5217276215553284, 0.6532822847366333, 0.6761326193809509, 0.6942279934883118, 0.7215691208839417, 0.7268524765968323, 0.7306828498840332, 0.7441553473472595, 0.7464007139205933], "val_loss": [1.656465768814087, 1.725918974195208, 1.1619645186832972, 0.6798565898622785, 0.7171834366662162, 0.5793177230017525, 0.5583154303686959, 0.588449307850429, 0.5789226123264858, 0.5504582609449115, 0.5928829908370972, 0.5697508880070278], "val_accuracy": [0.3656666576862335, 0.19633333384990692, 0.5113333463668823, 0.6916666626930237, 0.6859999895095825, 0.7400000095367432, 0.75, 0.7179999947547913, 0.718666672706604, 0.7453333139419556, 0.7276666760444641, 0.7293333411216736]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 2, 2, 3, 2, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 91, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [3, 9, 76, 58]], "fitness": -0.1599999964237213, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), beta)), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3016962659924243, 2.3021753409346255, 2.3022062087244817, 2.302298983940595, 2.3028371210631096, 2.30285160079561, 2.3006676741091017, 2.2998999507908082, 2.300558755206016, 2.301567198908671, 2.299977948306306, 2.3007138597022085, 2.29994409182887, 2.300812313380636, 2.3000114174755795, 2.3002693780015537, 2.301052729404204, 2.299730525434356, 2.298970621023605, 2.299234011799605, 2.30004630868524, 2.29906028332003, 2.2985260773171143, 2.29792190010616, 2.298251374648657, 2.2987424768335263, 2.2997868389832012, 2.298238497400139, 2.298723153780795, 2.2986668861458694, 2.298540147477295, 2.2965691441384917, 2.2959244080254932, 2.296599736539301, 2.29692478687567, 2.296490015213311, 2.2957676204282844, 2.297557999476497, 2.2960617357099595, 2.2965126155374103, 2.2965772185012603, 2.2961930552840215, 2.293553273911804, 2.2951046235179384, 2.296074439568873, 2.2951813470323748, 2.293910793010443, 2.2942833184345663, 2.296539939704777, 2.2946955274675878, 2.2943019652174543, 2.2932891143138274, 2.2927333960018577, 2.2940313800639953, 2.2930649195711266, 2.293367339005607, 2.29252293786636, 2.29286998770949, 2.292583768582851, 2.2946234107757557, 2.293360706743012, 2.2929875272817113, 2.290700823072555, 2.291899344830103, 2.292566860671592, 2.290836071215443, 2.292226829800891, 2.2920935104205356, 2.290306942983468, 2.292184344246214, 2.2916488883958563, 2.289519052432434, 2.2923376421965567, 2.289158413297134, 2.291781264430953, 2.2897081317178576, 2.289198402180065, 2.289626104074966, 2.2889714639074437, 2.289466389827504, 2.2892126595544116, 2.2894984886016765, 2.2896111140933257, 2.287878341993494, 2.2881459030949474, 2.287687049235146, 2.288047907768444, 2.2883946176974086, 2.286644047529407, 2.2860972506258985, 2.2873461643907262, 2.286006430782237, 2.2877786076379065, 2.2874662957376004, 2.2864413349588455, 2.287564816901303, 2.286244749219867, 2.286460382905949, 2.2862124785361684, 2.2858283103748382], "accuracy": [0.0952318087220192, 0.09021265059709549, 0.09311848133802414, 0.08902391046285629, 0.09047681838274002, 0.09192973375320435, 0.09509972482919693, 0.09496764093637466, 0.09549596905708313, 0.09126931428909302, 0.09959053993225098, 0.09708096832036972, 0.09655263274908066, 0.09140139818191528, 0.10210011899471283, 0.09496764093637466, 0.09576013684272766, 0.09932637959718704, 0.09747721254825592, 0.09351472556591034, 0.09708096832036972, 0.10249637067317963, 0.10276053100824356, 0.10527011007070541, 0.09866596013307571, 0.10342095047235489, 0.1002509593963623, 0.09787346422672272, 0.1002509593963623, 0.09972262382507324, 0.09906221181154251, 0.10857218503952026, 0.10394927859306335, 0.10421344637870789, 0.10408136248588562, 0.10659094154834747, 0.10606260597705841, 0.10460969805717468, 0.10817593336105347, 0.10460969805717468, 0.10011887550354004, 0.10659094154834747, 0.10962884873151779, 0.10949676483869553, 0.10685510188341141, 0.10474177449941635, 0.11108175665140152, 0.11253467202186584, 0.1072513535618782, 0.11134592443704605, 0.11345925182104111, 0.11174217611551285, 0.11240258812904358, 0.11147800832986832, 0.11121384054422379, 0.11530841141939163, 0.10672302544116974, 0.11821424216032028, 0.11359133571386337, 0.10857218503952026, 0.11293092370033264, 0.11676132678985596, 0.11768590658903122, 0.11187426000833511, 0.11808215826749802, 0.12138422578573227, 0.11530841141939163, 0.11874257028102875, 0.12521463632583618, 0.11042134463787079, 0.11847840249538422, 0.12151630967855453, 0.11676132678985596, 0.12798838317394257, 0.12138422578573227, 0.12151630967855453, 0.12270505726337433, 0.11821424216032028, 0.12574297189712524, 0.12508255243301392, 0.12561088800430298, 0.1274600476026535, 0.12349755316972733, 0.12336547672748566, 0.13195087015628815, 0.12838461995124817, 0.1286487877368927, 0.1216483935713768, 0.12798838317394257, 0.13617752492427826, 0.12917712330818176, 0.12772421538829803, 0.1282525360584259, 0.12957337498664856, 0.1290450394153595, 0.13076211512088776, 0.13155461847782135, 0.13617752492427826, 0.12891295552253723, 0.13168670237064362], "val_loss": [1.971027101789202, 1.9708659989493233, 1.9707037380763464, 1.9705421583993095, 1.9703794888087682, 1.9702166829790388, 1.9700560569763184, 1.9698949541364397, 1.969735963003976, 1.969573906489781, 1.96941191809518, 1.9692505427769251, 1.9690893718174525, 1.968930993761335, 1.9687702996390206, 1.9686089243207658, 1.9684485707964217, 1.9682868548801966, 1.9681267738342285, 1.9679690088544572, 1.967808655330113, 1.9676503453935896, 1.9674910817827498, 1.9673322950090681, 1.9671717371259416, 1.9670130865914481, 1.9668537548610143, 1.9666930607386999, 1.9665357044764928, 1.9663753509521484, 1.9662164960588728, 1.966059616633824, 1.965900489262172, 1.965742588043213, 1.9655864579336983, 1.965428011757987, 1.9652690887451172, 1.965111187526158, 1.964954035622733, 1.9647957938058036, 1.9646380969456263, 1.9644793782915388, 1.9643212045942033, 1.9641636439732142, 1.9640045847211565, 1.9638467516217912, 1.9636866024562292, 1.9635272026062012, 1.9633685520717077, 1.9632088797433036, 1.963050365447998, 1.962892804827009, 1.9627351079668318, 1.962578501020159, 1.9624183518545968, 1.962259020124163, 1.9620991434369768, 1.9619402885437012, 1.9617836134774345, 1.9616264615740096, 1.9614686284746443, 1.9613114084516252, 1.9611520767211914, 1.9609945842197962, 1.960836342402867, 1.9606799398149763, 1.9605223791939872, 1.960362774985177, 1.9602046694074358, 1.9600460869925362, 1.959888117653983, 1.9597304889133997, 1.959573405129569, 1.9594159126281738, 1.9592564446585519, 1.9590981347220284, 1.9589411871773856, 1.9587819235665458, 1.9586239542279924, 1.9584659848894392, 1.9583092417035783, 1.9581504549298967, 1.9579928261893136, 1.9578351293291365, 1.9576767512730189, 1.9575176920209612, 1.9573604719979423, 1.957202775137765, 1.9570443289620536, 1.9568860190255302, 1.9567273684910365, 1.9565704209463937, 1.9564129965645927, 1.9562561852591378, 1.956099373953683, 1.9559390885489327, 1.9557819366455078, 1.9556241716657365, 1.9554664066859655, 1.9553075517926897], "val_accuracy": [0.03733333200216293, 0.03866666555404663, 0.03933333232998848, 0.04066666588187218, 0.04100000113248825, 0.041333332657814026, 0.041999999433755875, 0.041999999433755875, 0.043666668236255646, 0.043666668236255646, 0.04399999976158142, 0.044333335012197495, 0.04600000008940697, 0.04699999839067459, 0.04866666719317436, 0.05000000074505806, 0.05133333429694176, 0.052666667848825455, 0.05366666615009308, 0.05400000140070915, 0.054666668176651, 0.055666666477918625, 0.05666666850447655, 0.05700000002980232, 0.05766666680574417, 0.058666665107011795, 0.05900000035762787, 0.061000000685453415, 0.06300000101327896, 0.06466666609048843, 0.06566666811704636, 0.0663333311676979, 0.0676666647195816, 0.0689999982714653, 0.07199999690055847, 0.07266666740179062, 0.07366666942834854, 0.07599999755620956, 0.07733333110809326, 0.07833333313465118, 0.08033332973718643, 0.0820000022649765, 0.08433333039283752, 0.08566666394472122, 0.08666666597127914, 0.08799999952316284, 0.08833333104848862, 0.08900000154972076, 0.09000000357627869, 0.09133332967758179, 0.09366666525602341, 0.0949999988079071, 0.09533333033323288, 0.09866666793823242, 0.10000000149011612, 0.10133333504199982, 0.10300000011920929, 0.10433333367109299, 0.10466666519641876, 0.10566666722297668, 0.10833333432674408, 0.10899999737739563, 0.11100000143051147, 0.11166666448116302, 0.11366666853427887, 0.11566666513681412, 0.11699999868869781, 0.11766666918992996, 0.11966666579246521, 0.12066666781902313, 0.12333333492279053, 0.1236666664481163, 0.125, 0.1263333261013031, 0.12733332812786102, 0.12966667115688324, 0.13099999725818634, 0.13300000131130219, 0.1340000033378601, 0.13699999451637268, 0.13766667246818542, 0.13966666162014008, 0.14166666567325592, 0.1433333307504654, 0.14666666090488434, 0.14766666293144226, 0.14933332800865173, 0.15000000596046448, 0.15133333206176758, 0.15266667306423187, 0.15433333814144135, 0.15566666424274445, 0.1589999943971634, 0.16066665947437286, 0.1613333374261856, 0.16333332657814026, 0.16566666960716248, 0.16699999570846558, 0.16866666078567505, 0.17133332788944244]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 6, 5, 6, 5, 1, 7, 8, 2, 5, 9, 5, 0, 2, 2, 2, 1, 8, 1, 2, 4, 2, 4, 3], [2, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0, 3, 2, 0, 3, 0, 1], [1, 80, 61, 79, 66, 30, 25], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [22, 9, 76, 58]], "fitness": -0.10971428453922272, "mapping_values": [1, 19, 19, 12, 7, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), alpha))), alpha), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3013200268627645, 2.3008736884510514, 2.301104413551378, 2.301587206166985, 2.3019133359843305, 2.3023125768227426, 2.302464307873965, 2.3025572734533473, 2.3025738840892944, 2.3025849764577906, 2.302583316471189], "accuracy": [0.0948355570435524, 0.09417514503002167, 0.09800554811954498, 0.09734513610601425, 0.09760929644107819, 0.10355303436517715, 0.10077928751707077, 0.10249637067317963, 0.1006472036242485, 0.09985470771789551, 0.1002509593963623], "val_loss": [1.9706061908176966, 1.9715652465820312, 1.972632680620466, 1.9731179646083288, 1.9734576089041573, 1.9736057690211706, 1.9736411912100655, 1.973644460950579, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.07566666603088379, 0.0989999994635582, 0.08966666460037231, 0.08500000089406967, 0.10833333432674408, 0.11133333295583725, 0.10533333569765091, 0.1003333330154419, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 8, 6, 0, 4, 5, 2, 7, 3, 9, 5, 7, 2, 0, 2, 2, 2, 1, 8], [0, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 3, 3, 0, 0, 2, 1, 1, 3], [77, 80, 61], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 1, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [31, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [41, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 10, 6, 4, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(sigma, beta), alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 2, 9, 4, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 4, 2, 2, 2, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 0, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 9, 8, 4, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.add(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302577585103946, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 8, 6, 5, 3, 5, 2, 7, 8, 6, 3, 7, 5, 0, 2, 2, 2, 1, 8, 5, 0, 1], [0, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0], [77, 80, 61], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 7, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [78, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.negative(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.302213996707834, 2.302346588299023, 2.3031935823465997, 2.3064361482075317, 2.321481100210125, 2.398950771837659, 3.1767101102674546, 8.379690457360304], "accuracy": [0.10236428678035736, 0.10289261490106583, 0.10460969805717468, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9738405091421944, 1.97435120173863, 1.9761981964111328, 1.9830587250845773, 2.0137451035635814, 2.191486086164202, 4.690861701965332, 10.797580991472516], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 8, 6, 5, 3, 5, 2, 7, 8, 6, 3, 7, 5, 0, 2, 2, 2, 1, 8, 5, 0, 1], [3, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0], [89, 14, 61], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 4, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [78, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 1, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302577585103946, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [77, 84, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [33, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [89, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07013604789972305, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [89, 14, 61], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 4, 2, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [37, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha)), tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.406674551469397, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03513406589627266, 0.07911768555641174, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.503736291612898, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.008333333767950535, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 4, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 2], [77, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 6, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 3, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, alpha)))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(sigma)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 0, 5, 9, 5, 0, 2, 2, 2, 1, 8], [2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 8, 0, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 41, 37, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 12, 5, 1, 10, 10, 6, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha))), tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.square(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [5, 2, 9, 4, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [77, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 2, 1, 4, 6, 4, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [53, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [5, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 3, 23, 23, 12, 11, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.pow(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))), alpha)), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302577585103946, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [2, 6, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2], [39, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [55, 41, 37, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(sigma), sigma)", "other_info": {"loss": [2.301766532239913, 2.302419113870373, 2.302625938382021, 2.3028898287946835, 2.3036109952721313, 2.3038006807913507], "accuracy": [0.09496764093637466, 0.08994849026203156, 0.09298639744520187, 0.08836349099874496, 0.08942015469074249, 0.08955223858356476], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 8, 6, 5, 3, 5, 2, 7, 8, 6, 3, 7, 5, 0, 2, 2, 2, 1, 8, 5, 0, 1], [0, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0], [1, 80, 61, 19], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [51, 41, 37, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 10, 10, 6, 4, 2, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301766532239913, 2.302419113870373, 2.302625938382021, 2.3028898287946835, 2.3036109952721313, 2.3038006807913507], "accuracy": [0.09496764093637466, 0.08994849026203156, 0.09298639744520187, 0.08836349099874496, 0.08942015469074249, 0.08955223858356476], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]