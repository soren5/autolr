[{"genotype": [[0], [0, 1, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 4, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [23, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8105714321136475, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 6, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9834582973795638, 1.5820332316044787, 1.0371685071691248, 0.9127608666629713, 0.8162736418209119, 0.7604383493631807, 0.7165592599459895, 0.7198874368927088, 0.6848130826039353, 0.6301398418441252, 0.658340859627286, 0.617638907341547, 0.6085435815805993, 0.6058697303949708, 0.5848832778202592, 0.563603847356851, 0.5710128681959808, 0.5706972103659912, 0.5314927049804877, 0.5289151996291467, 0.5157098572181121, 0.5075222489194878, 0.5014196331427633, 0.491141169645279, 0.48959315623416405, 0.4836434574096336, 0.48189013758670574, 0.46346007349106616, 0.46052382956674115, 0.4561811249726295, 0.4472393383911777, 0.431720377455424, 0.4320998478952951, 0.4244417710437152, 0.4130430253442284, 0.40457782378018475, 0.39219374394356976], "accuracy": [0.3361510932445526, 0.4571390748023987, 0.6244881749153137, 0.659490168094635, 0.689869225025177, 0.7116629481315613, 0.7257958054542542, 0.7240787148475647, 0.739928662776947, 0.7601373791694641, 0.7498348951339722, 0.7668735980987549, 0.7713643908500671, 0.7588165402412415, 0.7774402499198914, 0.7816668748855591, 0.7836481332778931, 0.7816668748855591, 0.8004226684570312, 0.7987055778503418, 0.8053097128868103, 0.8072909712791443, 0.8037247657775879, 0.8173292875289917, 0.8113855719566345, 0.8157442808151245, 0.8195747137069702, 0.828820526599884, 0.8276317715644836, 0.8289526104927063, 0.8314621448516846, 0.8393871188163757, 0.8366134166717529, 0.8436138033866882, 0.8438779711723328, 0.8491612672805786, 0.8549728989601135], "val_loss": [1.4919306210109167, 0.8796242305210659, 0.7111401557922363, 0.6718488931655884, 0.6406146287918091, 0.6003772531236921, 0.6872534240995135, 0.5665464741843087, 0.5226454564503261, 0.5740506478718349, 0.5096180609294346, 0.5428524698529925, 0.4887911251613072, 0.47147442613329205, 0.4651263781956264, 0.44933654580797466, 0.47891790526253836, 0.4643167427607945, 0.4638504130499704, 0.4225844740867615, 0.4235043099948338, 0.43300070081438335, 0.44039249420166016, 0.40780989612851826, 0.4150068589619228, 0.4211138827460153, 0.4301829593522208, 0.38670418092182707, 0.38828286102839876, 0.3848587615149362, 0.3950967618397304, 0.3727600744792393, 0.39228315012795584, 0.3903352277619498, 0.3824739285877773, 0.3731794272150312, 0.3759481736591884], "val_accuracy": [0.40299999713897705, 0.6026666760444641, 0.6923333406448364, 0.7049999833106995, 0.6970000267028809, 0.7173333168029785, 0.6909999847412109, 0.7333333492279053, 0.7666666507720947, 0.7246666550636292, 0.7683333158493042, 0.7540000081062317, 0.7799999713897705, 0.7853333353996277, 0.7953333258628845, 0.8009999990463257, 0.7900000214576721, 0.7983333468437195, 0.7986666560173035, 0.8209999799728394, 0.8146666884422302, 0.8033333420753479, 0.8050000071525574, 0.831333339214325, 0.8199999928474426, 0.8163333535194397, 0.8206666707992554, 0.8363333344459534, 0.8356666564941406, 0.8353333473205566, 0.8270000219345093, 0.8446666598320007, 0.8349999785423279, 0.8366666436195374, 0.8379999995231628, 0.8416666388511658, 0.8446666598320007]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 4, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8088571429252625, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9833927048416249, 1.5850040013401847, 1.0315883742457668, 0.919306479062796, 0.8181132106355247, 0.7794714356063931, 0.7177175998829454, 0.7126380326473607, 0.6909716342261061, 0.6568767815895242, 0.6575183099003642, 0.6259791781527255, 0.603177423884037, 0.6042863888401067, 0.5849518150370654, 0.5612271792774329, 0.5750983065665123, 0.5593398220235835, 0.5379372893575161, 0.5280345054177277, 0.5154568357765872, 0.5037979942271266, 0.494426037641391, 0.49081609023875405, 0.49443107708774897, 0.48885518726167615, 0.4851289835777328, 0.4649958428359066, 0.4592665018516997, 0.46111412943314883, 0.4449285704265134, 0.43420423293126303, 0.4398926890734054, 0.41924657528473797, 0.41688555794747245, 0.4036324284040791, 0.39421585534447456], "accuracy": [0.3361510932445526, 0.4570069909095764, 0.6206578016281128, 0.6563201546669006, 0.6988508701324463, 0.7080966830253601, 0.7256637215614319, 0.7309470176696777, 0.7421740889549255, 0.7483819723129272, 0.7461365461349487, 0.7625148296356201, 0.7729493975639343, 0.7651565074920654, 0.7777044177055359, 0.7861577272415161, 0.7833839654922485, 0.7868181467056274, 0.7992339134216309, 0.7980451583862305, 0.8047813773155212, 0.8090080618858337, 0.8108572363853455, 0.8140271902084351, 0.8099326491355896, 0.8146876096725464, 0.8158763647079468, 0.8277638554573059, 0.8269713521003723, 0.8274996876716614, 0.833179235458374, 0.8381983637809753, 0.8355567455291748, 0.8444063067436218, 0.8421608805656433, 0.8508783578872681, 0.8543124794960022], "val_loss": [1.4933584758213587, 0.8802687781197684, 0.8251435245786395, 0.6954074076243809, 0.6059908015387399, 0.6151664938245501, 0.6661409480231149, 0.530550343649728, 0.5255117756979806, 0.5234151227133614, 0.5128057854516166, 0.5294534989765712, 0.49923416546412874, 0.4733144555773054, 0.4634066138948713, 0.466951710837228, 0.46001691477639334, 0.4648917572838919, 0.4623797621045794, 0.4228512389319284, 0.42159358092716764, 0.43518000841140747, 0.43283902747290476, 0.4063681023461478, 0.4192470482417515, 0.41696780920028687, 0.43010509865624563, 0.38753563165664673, 0.3851427946771894, 0.38218929937907625, 0.3944453937666757, 0.3771659902163914, 0.38933612619127544, 0.38849070242473055, 0.3812077982085092, 0.37653315918786184, 0.392758241721562], "val_accuracy": [0.4020000100135803, 0.6046666502952576, 0.6079999804496765, 0.6890000104904175, 0.737666666507721, 0.7070000171661377, 0.6916666626930237, 0.7606666684150696, 0.7643333077430725, 0.762666642665863, 0.7689999938011169, 0.7583333253860474, 0.7726666927337646, 0.7873333096504211, 0.7926666736602783, 0.7896666526794434, 0.7976666688919067, 0.7926666736602783, 0.8006666898727417, 0.8173333406448364, 0.8173333406448364, 0.8056666851043701, 0.8090000152587891, 0.8286666870117188, 0.8136666417121887, 0.8209999799728394, 0.8209999799728394, 0.8336666822433472, 0.8363333344459534, 0.8403333425521851, 0.8299999833106995, 0.8416666388511658, 0.8349999785423279, 0.8349999785423279, 0.8396666646003723, 0.8396666646003723, 0.8349999785423279]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0], [0, 1, 1], [8, 4, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 8, 1, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 0, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [36, 9, 76, 58]], "fitness": -0.7988571524620056, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.2477568935141856, 1.9589595114943879, 1.4304383423161182, 1.1474769513494603, 1.023446212433994, 0.9593022209447625, 0.8831604616501233, 0.8583122316903883, 0.8191167015708779, 0.7912868922333975, 0.7661599156847404, 0.7579604009154797, 0.7393230952921797, 0.7230392978207436, 0.7274957035573845, 0.7013509978928099, 0.6900702180517285, 0.6743601726235463, 0.6842057189968489, 0.6638089406444664, 0.6472244573905405, 0.6464922225407606, 0.6412501313257778, 0.6485770335759249, 0.624325212273757, 0.6182560702718685, 0.6192409943013285, 0.6194466666743236, 0.607337646157813, 0.6011253246982666, 0.6072236074353915, 0.5906360758341315, 0.603636468768419, 0.5931447077153335, 0.587890652979779, 0.5728178503664179, 0.5769436976393499, 0.5697920198658469, 0.5726845605364566], "accuracy": [0.2180689424276352, 0.41064587235450745, 0.5292563438415527, 0.6038832664489746, 0.6395456194877625, 0.6520935297012329, 0.6826046705245972, 0.6959450244903564, 0.7024171352386475, 0.7079645991325378, 0.7228899598121643, 0.7161537408828735, 0.7314753532409668, 0.733588695526123, 0.7325320243835449, 0.7401928305625916, 0.7489103078842163, 0.7516840696334839, 0.7442874312400818, 0.7549861073493958, 0.7646281719207764, 0.757099449634552, 0.7588165402412415, 0.7585523724555969, 0.763439416885376, 0.7745344042778015, 0.769911527633667, 0.7619865536689758, 0.7737419009208679, 0.7751948237419128, 0.774798572063446, 0.7832518815994263, 0.7713643908500671, 0.7815347909927368, 0.7814027070999146, 0.7884030938148499, 0.7812706232070923, 0.7843085527420044, 0.791441023349762], "val_loss": [1.8161475317818778, 1.3250723225729806, 0.9070756094796317, 0.7789505549839565, 0.7012837784630912, 0.6587694713047573, 0.6595378773553031, 0.6093110527311053, 0.6094752379826137, 0.5932017905371529, 0.5734767232622419, 0.5569174630301339, 0.5719228642327445, 0.5579661812101092, 0.5439207042966571, 0.5388711180005755, 0.5239155633108956, 0.5332216364996774, 0.5105527979987008, 0.5044851984296527, 0.5111383199691772, 0.5060654197420392, 0.5042896951947894, 0.5056165967668805, 0.5015312433242798, 0.4814786059515817, 0.49357504504067556, 0.47866642475128174, 0.47343991483960834, 0.4683992181505476, 0.4699275323322841, 0.4584974731717791, 0.48758816719055176, 0.45941431181771414, 0.45633176394871305, 0.4604776246207101, 0.45661725316728863, 0.45332380703517366, 0.46058828490121023], "val_accuracy": [0.42233332991600037, 0.5763333439826965, 0.6643333435058594, 0.6766666769981384, 0.7086666822433472, 0.7289999723434448, 0.718666672706604, 0.734666645526886, 0.7289999723434448, 0.7300000190734863, 0.7476666569709778, 0.7559999823570251, 0.7400000095367432, 0.7616666555404663, 0.7580000162124634, 0.7710000276565552, 0.7583333253860474, 0.7599999904632568, 0.7720000147819519, 0.7756666541099548, 0.7763333320617676, 0.7699999809265137, 0.7730000019073486, 0.7816666960716248, 0.7870000004768372, 0.7860000133514404, 0.778333306312561, 0.7950000166893005, 0.7853333353996277, 0.8019999861717224, 0.7953333258628845, 0.7986666560173035, 0.7770000100135803, 0.8069999814033508, 0.7996666431427002, 0.8050000071525574, 0.8040000200271606, 0.8033333420753479, 0.8016666769981384]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 4, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 0, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [7, 9, 76, 58]], "fitness": -0.31542858481407166, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3026140772545296, 2.301867809844858, 2.301154947866617, 2.302621930014928, 2.3024726363378445, 2.3006801487448163, 2.3004966499216253, 2.2992016737565955, 2.2982995240853024, 2.2986980305844136, 2.299030578966233, 2.2988690394672497, 2.298346991835647, 2.296378893008904, 2.2978999024888607, 2.2962151134585693, 2.2956986121529237, 2.2974661290291327, 2.2965488066652493, 2.294570140016077, 2.2933345213227376, 2.2943281024249633, 2.2939631354775742, 2.2940874480772893, 2.293012310060071, 2.293730417026615, 2.292389802677032, 2.2941816179365957, 2.290474826413186, 2.290485305556878, 2.2913304015141844, 2.2903344495468736, 2.2892009048351065, 2.289686879713648, 2.2888191823930377, 2.2887454071317004, 2.2881671299693167, 2.2885184745274643, 2.287180742677712, 2.2887777338379394, 2.286710153024714, 2.2863717338333767, 2.2862289447857482, 2.2852306193081047, 2.285876888719296, 2.286311313507973, 2.286925120895974, 2.285307020196951, 2.2860475514527434, 2.283003023067218, 2.284171226143979, 2.2832818792134293, 2.283920791312578, 2.283522202495917, 2.2814504699684357, 2.281720815097273, 2.283122676569221, 2.281286830710634, 2.2805314314064646, 2.2806908061806364, 2.2776505487029106, 2.280020228907291, 2.280250316156829, 2.2773459916888856, 2.2776245367982053, 2.278261120198756, 2.277827355871426, 2.2776519785530738, 2.277064462552658, 2.2764571455286764, 2.275614944478666, 2.276155195562453, 2.2763465352424337, 2.274480999641887, 2.2742448393159522, 2.2739340807106423, 2.275168046660317, 2.273571313002232, 2.273475050690026, 2.271791675858856, 2.2735155595528247, 2.272151984653264, 2.272389801470296, 2.271392747757851, 2.268901748585427, 2.2704557914617998, 2.2699236961450904, 2.270410048821504, 2.267238873595244, 2.2686020963936118, 2.268444719662236, 2.2684986057566174, 2.2662673318989133, 2.2658592249817775, 2.266332463817574, 2.266064605346335, 2.2653008278854423, 2.265821674732626, 2.266085997170713, 2.2638842373350276], "accuracy": [0.08611807972192764, 0.09536388516426086, 0.09311848133802414, 0.08796724677085876, 0.08994849026203156, 0.08809932321310043, 0.09034473448991776, 0.09668471664190292, 0.10196803510189056, 0.10276053100824356, 0.09628847241401672, 0.09787346422672272, 0.10051512718200684, 0.10328886657953262, 0.10328886657953262, 0.10342095047235489, 0.10434553027153015, 0.10130762308835983, 0.1080438494682312, 0.10276053100824356, 0.109232597053051, 0.11438383162021637, 0.11227050423622131, 0.10632677376270294, 0.10817593336105347, 0.11094967275857925, 0.1138555034995079, 0.1150442510843277, 0.11993131786584854, 0.1220446452498436, 0.12138422578573227, 0.12349755316972733, 0.12138422578573227, 0.12217672914266586, 0.12296922504901886, 0.12653546035289764, 0.1266675442457199, 0.12495046854019165, 0.13630960881710052, 0.12574297189712524, 0.13472460210323334, 0.12759213149547577, 0.13181878626346588, 0.12891295552253723, 0.12930920720100403, 0.12957337498664856, 0.1352529376745224, 0.13881917297840118, 0.13300752639770508, 0.14410249888896942, 0.14000792801380157, 0.1430458277463913, 0.13353586196899414, 0.13868708908557892, 0.1430458277463913, 0.148064985871315, 0.14581957459449768, 0.14449875056743622, 0.15097081661224365, 0.14436666667461395, 0.15440496802330017, 0.15215955674648285, 0.151234969496727, 0.15612204372882843, 0.15281997621059418, 0.1562541276216507, 0.15942411124706268, 0.1570466309785843, 0.1546691358089447, 0.15480121970176697, 0.16734910011291504, 0.16259410977363586, 0.16114120185375214, 0.16470743715763092, 0.16576409339904785, 0.1702549159526825, 0.15876370668411255, 0.16853784024715424, 0.16695284843444824, 0.17210407555103302, 0.16193369030952454, 0.17382116615772247, 0.1736890822649002, 0.17778365314006805, 0.18557654321193695, 0.17461365461349487, 0.17500990629196167, 0.17223615944385529, 0.18134988844394684, 0.18082155287265778, 0.1830669641494751, 0.1810857206583023, 0.18782195448875427, 0.18782195448875427, 0.18953903019428253, 0.18702945113182068, 0.18518029153347015, 0.18293488025665283, 0.1896711140871048, 0.19297318160533905], "val_loss": [1.9708271026611328, 1.9704649788992745, 1.9701028551374162, 1.9697423662458147, 1.96937928880964, 1.9690227508544922, 1.9686625344412667, 1.9683024542672294, 1.9679457800728934, 1.9675870622907365, 1.9672290257045202, 1.9668693542480469, 1.966510840824672, 1.9661558015005929, 1.9657999447413854, 1.9654481070382255, 1.9650940213884627, 1.9647391183035714, 1.9643808092389787, 1.9640239988054549, 1.9636639186314173, 1.9633070400782995, 1.9629498890468053, 1.9625955309186662, 1.962242807660784, 1.9618902206420898, 1.961534091404506, 1.9611788477216447, 1.9608261244637626, 1.9604719706944056, 1.9601152965000697, 1.9597621645246233, 1.9594076701572962, 1.9590542657034737, 1.958698068346296, 1.9583442551749093, 1.9579894202096122, 1.9576336315699987, 1.9572772979736328, 1.956923348563058, 1.9565721920558385, 1.9562176295689173, 1.955861977168492, 1.9555073465619768, 1.9551522391183036, 1.9547974722726005, 1.954441819872175, 1.9540858949933733, 1.9537327630179269, 1.9533797672816686, 1.9530250685555595, 1.9526694842747279, 1.9523188046046667, 1.9519625391278947, 1.9516034126281738, 1.9512478283473425, 1.9508909497942244, 1.9505362510681152, 1.9501786913190569, 1.9498208590916224, 1.9494615963527135, 1.949105671473912, 1.9487462724958147, 1.9483864648001534, 1.9480269977024622, 1.9476700510297502, 1.9473108564104353, 1.9469573838370187, 1.9466020720345634, 1.9462456021990096, 1.945880344935826, 1.9455212184361048, 1.9451604570661272, 1.9447959491184779, 1.9444333485194616, 1.944070271083287, 1.9437102590288435, 1.9433480671473913, 1.942979063306536, 1.942610808781215, 1.9422505242483956, 1.941884994506836, 1.9415157863071986, 1.9411500522068568, 1.9407788004193987, 1.9404100009373255, 1.9400408608572823, 1.9396751948765345, 1.9393043518066406, 1.9389356204441615, 1.938565799168178, 1.938194956098284, 1.9378205026899065, 1.9374465261186873, 1.937070301600865, 1.9366959163120814, 1.936311994280134, 1.9359362465994698, 1.935556207384382, 1.9351787567138672], "val_accuracy": [0.039000000804662704, 0.04066666588187218, 0.0416666679084301, 0.043666668236255646, 0.04399999976158142, 0.046666666865348816, 0.04933333396911621, 0.052666667848825455, 0.05400000140070915, 0.0560000017285347, 0.0573333315551281, 0.059333331882953644, 0.06333333253860474, 0.06533333659172058, 0.0689999982714653, 0.07266666740179062, 0.07599999755620956, 0.07800000160932541, 0.0833333358168602, 0.0860000029206276, 0.08900000154972076, 0.09033333510160446, 0.09466666728258133, 0.09799999743700027, 0.10133333504199982, 0.10433333367109299, 0.10700000077486038, 0.11033333092927933, 0.11400000005960464, 0.11666666716337204, 0.12066666781902313, 0.1223333328962326, 0.12600000202655792, 0.1313333362340927, 0.13333334028720856, 0.1366666704416275, 0.14166666567325592, 0.1469999998807907, 0.14900000393390656, 0.15166667103767395, 0.1550000011920929, 0.1613333374261856, 0.164000004529953, 0.16866666078567505, 0.17399999499320984, 0.17633333802223206, 0.179666668176651, 0.18299999833106995, 0.1850000023841858, 0.1889999955892563, 0.1913333386182785, 0.19499999284744263, 0.19766665995121002, 0.20033332705497742, 0.2043333351612091, 0.20533333718776703, 0.20766666531562805, 0.20999999344348907, 0.2123333364725113, 0.21566666662693024, 0.21799999475479126, 0.22100000083446503, 0.2253333330154419, 0.2290000021457672, 0.2303333282470703, 0.2303333282470703, 0.234333336353302, 0.2370000034570694, 0.23866666853427887, 0.2409999966621399, 0.2460000067949295, 0.24933333694934845, 0.2513333261013031, 0.2549999952316284, 0.25866666436195374, 0.2616666555404663, 0.2639999985694885, 0.2669999897480011, 0.2696666717529297, 0.273333340883255, 0.2759999930858612, 0.27666667103767395, 0.2783333361148834, 0.2823333442211151, 0.28433331847190857, 0.28833332657814026, 0.28966665267944336, 0.29233333468437195, 0.29366666078567505, 0.296999990940094, 0.2993333339691162, 0.3009999990463257, 0.30266666412353516, 0.30433332920074463, 0.304666668176651, 0.3063333332538605, 0.30799999833106995, 0.31033334136009216, 0.31166666746139526, 0.31200000643730164]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 2, 6, 0, 2, 8, 4, 1, 2, 2, 5, 3, 6, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 0, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 13, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 12, 9, 2, 1, 1, 1, 0, 1, 4, 2, 2, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(beta, beta)))), alpha)), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), sigma)", "other_info": {"loss": [72353353.51316231, 1393949577.0112271, 6505425566.854577, 18240463515.067493, 38900787168.350815, 70899209806.92009], "accuracy": [0.09668471664190292, 0.09826971590518951, 0.09932637959718704, 0.10210011899471283, 0.09813763201236725, 0.09813763201236725], "val_loss": [276060818.28571427, 2206784877.714286, 7445998445.714286, 17647493705.142857, 34465285266.28571, 59552563200.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1], [1, 1, 1], [9, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 8, 4, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 13, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [1, 9, 5, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 4, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 7, 2, 2, 1, 1, 1, 0, 1, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302990212054411, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 4, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 13, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [44.44133139758802, 229955249.6919208, 2.338645655607204, 49091611.57191329, 2.175620154618947e+19, 6.252353421855067e+26, 2.3093415045105252, 2.3041110227388586, 2.3031439654909938, 2.303044152124415, 2.3029428134583654, 2.3030201809328497], "accuracy": [0.09681680053472519, 0.10342095047235489, 0.09998679161071777, 0.09721305221319199, 0.09536388516426086, 0.09721305221319199, 0.09615638852119446, 0.09800554811954498, 0.09166556596755981, 0.09747721254825592, 0.09470347315073013, 0.09774138033390045], "val_loss": [12.85258320399693, 2.0208097185407365, 1.9884424890790666, 1.977320602961949, 4.164641424439102e+27, 1.9811965397426061, 1.974898133959089, 1.9736717087881905, 1.9736131940569197, 1.9736127172197615, 1.9737213679722376, 1.9738411903381348], "val_accuracy": [0.09866666793823242, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.10000000149011612, 0.09799999743700027, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665, 0.10000000149011612, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 8, 4, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 6, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08651433140039444, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 4, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [3, 2, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 0, 1, 1, 0, 1, 0, 10, 6, 4, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.math.divide_no_nan(tf.math.add(sigma, beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 4, 2, 8, 1, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 1, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [75, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 17, 17, 11, 6, 1, 1, 1, 1, 0, 1, 5, 3, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), tf.math.add(tf.math.add(beta, grad), tf.math.negative(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [1261439804.5861382, 24322322588.352398, 113537889564.70744, 318382381590.2491, 679042628032.7693, 1237648019203.3474], "accuracy": [0.09668471664190292, 0.09826971590518951, 0.09932637959718704, 0.10210011899471283, 0.09813763201236725, 0.09800554811954498], "val_loss": [4815316845.714286, 38511110436.57143, 129962723620.57143, 308044047506.2857, 601629655040.0, 1039602024448.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 8, 4, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 5, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.302990212054411, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 0, 0, 4, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08651433140039444, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1], [3, 4, 6, 9, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 2, 4, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 1, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 3, 6, 6, 4, 2, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.pow(alpha, tf.math.divide_no_nan(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [2.326319269232699, 2.453003713247279, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.052172765135765076, 0.021661603823304176, 0.0944393053650856, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0330937930515836, 2.460178783961705, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004666666500270367, 0.08366666734218597, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 2, 0, 4, 2, 4, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 17, 17, 11, 6, 2, 1, 1, 1, 0, 1, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.math.add(tf.math.add(beta, grad), tf.math.negative(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302990212054411, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [9, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 5, 6, 0, 2, 8, 3, 5, 2, 2, 5, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 0, 0, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.09714286029338837, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 11, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(tf.math.add(beta, grad), tf.math.square(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3032741015377205, 2.304144267156659, 2.306064411728153, 2.3108189235730587, 2.3144565112303277, 2.315527208603101, 2.319685042888544, 2.3227563117867085, 2.328917430234765, 2.3350292822908747, 2.344335228649538, 2.3540585215821355, 2.3661609447674743, 2.3725946151097026, 2.399582061596267, 2.4070386818261147, 2.418924089058153, 2.443070209635688, 2.4606714119858917, 2.4873271271253796, 2.4996194221308645, 2.5411465359779633, 2.5625705635857825, 2.587264771222785, 2.6283617011150744, 2.652666657970188, 2.698319593582486], "accuracy": [0.08558975160121918, 0.09192973375320435, 0.08677849918603897, 0.08189142495393753, 0.08638224750757217, 0.08466517180204391, 0.08572183549404144, 0.09470347315073013, 0.09060890227556229, 0.09576013684272766, 0.09298639744520187, 0.09694888442754745, 0.09457138925790787, 0.09615638852119446, 0.09325055778026581, 0.09813763201236725, 0.09549596905708313, 0.09853387624025345, 0.09576013684272766, 0.09509972482919693, 0.10117553919553757, 0.09642054885625839, 0.09259014576673508, 0.09760929644107819, 0.09628847241401672, 0.09470347315073013, 0.09509972482919693], "val_loss": [1.9719862937927246, 1.9730101994105749, 1.9740887369428362, 1.9751900945390974, 1.9761476516723633, 1.9770455360412598, 1.978163719177246, 1.9797314235142298, 1.981919629233224, 1.98476961680821, 1.9883050237383162, 1.9925105231148856, 1.9973581177847726, 2.002870900290353, 2.009070873260498, 2.0159874643598283, 2.023658343723842, 2.032127720969064, 2.041426454271589, 2.051592077527727, 2.062659876687186, 2.07466949735369, 2.0876645360674178, 2.101679597582136, 2.116758278438023, 2.132938657488142, 2.150263581957136], "val_accuracy": [0.023000000044703484, 0.01966666616499424, 0.022333333268761635, 0.029999999329447746, 0.04233333468437195, 0.057999998331069946, 0.07400000095367432, 0.08733333647251129, 0.09133332967758179, 0.09433333575725555, 0.09533333033323288, 0.09533333033323288, 0.0949999988079071, 0.09566666930913925, 0.09666666388511658, 0.09733333438634872, 0.09833333641290665, 0.09833333641290665, 0.09866666793823242, 0.09933333098888397, 0.09966666996479034, 0.1003333330154419, 0.10000000149011612, 0.09966666996479034, 0.09933333098888397, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 2, 4, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.0965714305639267, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 6, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3141837703270007, 2.407618214409853, 2.6785476525792546, 3.2021094201782896, 3.9795121313353823, 4.984592376462599, 6.268027053674797], "accuracy": [0.08928807079792023, 0.09391097724437714, 0.1006472036242485, 0.09985470771789551, 0.10130762308835983, 0.09945846349000931, 0.10302469879388809], "val_loss": [1.9869770322527205, 2.066084589276995, 2.253718989236014, 2.5913193566458568, 3.1030571120125905, 3.791754722595215, 4.648372513907296], "val_accuracy": [0.09433333575725555, 0.10000000149011612, 0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 4, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [7, 8, 0, 9, 4, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [5, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.07257142663002014, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 4, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.3023350157553195, 2.3012214822697366, 2.3006063141543804, 2.3019538921781457, 2.301361140983137, 2.3004190920523806, 2.30036051388918, 2.2993470981939517, 2.2990647151784778, 2.299408599385937, 2.2998135259296, 2.2999480848598317, 2.299898132498805, 2.299148137464562, 2.3001314535306006, 2.2999477819791165, 2.2999081802154024, 2.301189984816759, 2.300592030516516, 2.3006465895741828], "accuracy": [0.08625016361474991, 0.09800554811954498, 0.0936468094587326, 0.09021265059709549, 0.08875974267721176, 0.09219389408826828, 0.09311848133802414, 0.09959053993225098, 0.09681680053472519, 0.10368511080741882, 0.09708096832036972, 0.09945846349000931, 0.10011887550354004, 0.10276053100824356, 0.09668471664190292, 0.10051512718200684, 0.1010434553027153, 0.09113723784685135, 0.09285431355237961, 0.09457138925790787], "val_loss": [1.9704012189592635, 1.9700660705566406, 1.9699204308646066, 1.969773428780692, 1.969583579472133, 1.9696293558393205, 1.9695865086146764, 1.969466073172433, 1.9694013595581055, 1.9693638937813895, 1.9694112368992396, 1.9696288790021623, 1.969844205038888, 1.9700790813991003, 1.9703516278948103, 1.9705681119646346, 1.9707604816981725, 1.9709489686148507, 1.971118722643171, 1.9713291440691267], "val_accuracy": [0.0430000014603138, 0.05066666752099991, 0.055666666477918625, 0.058666665107011795, 0.06366666406393051, 0.06700000166893005, 0.07266666740179062, 0.07900000363588333, 0.08166666328907013, 0.0806666687130928, 0.08500000089406967, 0.08533333241939545, 0.08399999886751175, 0.0860000029206276, 0.08799999952316284, 0.0860000029206276, 0.08399999886751175, 0.08266666531562805, 0.08266666531562805, 0.07733333110809326]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 8, 4, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [18, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3027723910644493, 2.3024161892985275, 2.30209247600826, 2.303952746592209, 2.3041959542639896, 2.302763961230948], "accuracy": [0.08545766770839691, 0.09338264167308807, 0.09206181764602661, 0.08545766770839691, 0.08625016361474991, 0.08321225643157959], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 5, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [24, 9, 76, 58]], "fitness": -0.03400000184774399, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 7, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3028873200618736, 2.302764340319953, 2.302827342311389, 2.3051353960839625, 2.305964969766768, 2.3046190963838833], "accuracy": [0.08585391938686371, 0.09576013684272766, 0.09060890227556229, 0.08413683623075485, 0.08730682730674744, 0.08321225643157959], "val_loss": [1.9713576861790247, 1.9715457643781389, 1.9717494419642858, 1.9719763483319963, 1.9722236905779158, 1.9724696023123605], "val_accuracy": [0.03266666829586029, 0.03033333271741867, 0.026333333924412727, 0.023000000044703484, 0.021666666492819786, 0.020999999716877937]}}]