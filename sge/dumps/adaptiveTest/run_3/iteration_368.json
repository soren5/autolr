[{"genotype": [[0], [0, 0, 1, 0], [0, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8057143092155457, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 9, 3, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1094670359957033, 2.429124955314734, 2.178029903331374, 1.6821344168178944, 1.8601024367191756, 1.6829136250246124, 1.1818748646093602, 1.0710508133819971, 0.9182418643160739, 0.8739992722056057, 0.7661417219317931, 0.7420545560556899, 0.7390416590702328, 0.7123325063237236, 0.6948953172975071, 0.6576366793714132, 0.628649636305964, 0.64226246562695, 0.5937811781024542, 0.5997770403464708, 0.5630577381308116, 0.5677560718382952, 0.5589816316857928, 0.5498184154786612, 0.5397480483131323, 0.5025894359874058, 0.5181817485750501, 0.5136578898931523, 0.49981918865269864, 0.491742420158744, 0.5085563305157712, 0.46343949520199007, 0.46227986455404557, 0.48386245707731207, 0.4599445889087763, 0.4591855471947599], "accuracy": [0.27922335267066956, 0.25320300459861755, 0.26218464970588684, 0.44168537855148315, 0.41566503047943115, 0.41368380188941956, 0.5663716793060303, 0.614317774772644, 0.6598864197731018, 0.6668868064880371, 0.7113987803459167, 0.7164179086685181, 0.7207766771316528, 0.7271166443824768, 0.7320036888122559, 0.7516840696334839, 0.7630431652069092, 0.7539294958114624, 0.7724210619926453, 0.7730814814567566, 0.785629391670227, 0.7796856164932251, 0.7917051911354065, 0.7930260300636292, 0.7922335267066956, 0.8094043135643005, 0.8030643463134766, 0.8017435073852539, 0.813498854637146, 0.8193105459213257, 0.8080834746360779, 0.8264430165290833, 0.826310932636261, 0.8136309385299683, 0.8285563588142395, 0.8300092220306396], "val_loss": [1.9058118547712053, 1.740445273263114, 1.313304833003453, 1.4329187529427665, 1.967703069959368, 0.9262993335723877, 0.875204188483102, 0.6950300761631557, 0.6201615674155099, 0.5989661387034825, 0.5802899599075317, 0.5459468875612531, 0.6060132810047695, 0.5567177023206439, 0.5196508169174194, 0.505979061126709, 0.5268810135977608, 0.4712985243116106, 0.47744550023760113, 0.4858357906341553, 0.4667950017111642, 0.45564394337790354, 0.49347775323050364, 0.44277593067714144, 0.43105666978018625, 0.4449769769396101, 0.4348278215953282, 0.4483396325792585, 0.4361104539462498, 0.42552277020045687, 0.40673844303403583, 0.42194312810897827, 0.4104673947606768, 0.4042362059865679, 0.41298030955450876, 0.4256232806614467], "val_accuracy": [0.3009999990463257, 0.36000001430511475, 0.45766666531562805, 0.5076666474342346, 0.10000000149011612, 0.6309999823570251, 0.6349999904632568, 0.6853333115577698, 0.7256666421890259, 0.7363333106040955, 0.734666645526886, 0.753333330154419, 0.7153333425521851, 0.7369999885559082, 0.7666666507720947, 0.7766666412353516, 0.7736666798591614, 0.796999990940094, 0.7923333048820496, 0.7770000100135803, 0.7839999794960022, 0.8050000071525574, 0.750333309173584, 0.8013333082199097, 0.8056666851043701, 0.8040000200271606, 0.8046666383743286, 0.7929999828338623, 0.8146666884422302, 0.8193333148956299, 0.8270000219345093, 0.815666675567627, 0.8169999718666077, 0.8246666789054871, 0.8119999766349792, 0.812666654586792]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8037142753601074, "mapping_values": [1, 9, 9, 5, 4, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.109444112479175, 2.420055978758901, 2.1962124382452863, 1.8269600241868535, 1.3226629260382743, 1.140026268501166, 0.9831687528396469, 0.8962605852161841, 0.8527965592103565, 0.7912081437670812, 0.742334547705418, 0.739886239346197, 0.7066425507992266, 0.6857651441939014, 0.6808199818186897, 0.6561434715179294, 0.6094743946461142, 0.6247204710637039, 0.6031422885008114, 0.5779910898321986, 0.5492915418705117, 0.5630182802417354, 0.5505216604037417, 0.5270091739580726, 0.5556225930978405, 0.5068162602676676], "accuracy": [0.27922335267066956, 0.2533350884914398, 0.27922335267066956, 0.39043718576431274, 0.5572579503059387, 0.581429123878479, 0.6235635876655579, 0.6725663542747498, 0.6840575933456421, 0.7000396251678467, 0.7131158113479614, 0.7149649858474731, 0.7325320243835449, 0.7331924438476562, 0.741909921169281, 0.7479857206344604, 0.7671377658843994, 0.7601373791694641, 0.7687227725982666, 0.7759873270988464, 0.793422281742096, 0.7873464822769165, 0.7910447716712952, 0.8000264167785645, 0.7890635132789612, 0.8067626357078552], "val_loss": [1.905660561152867, 1.6748202868870325, 1.7322778020586287, 1.11211701801845, 1.061826569693429, 0.7223050424030849, 0.6964053596769061, 0.7438034670693534, 0.6593765701566424, 0.6657217911311558, 0.5833691699164254, 0.6195073127746582, 0.5708944627216884, 0.5720207691192627, 0.5057057653154645, 0.483845659664699, 0.5135589327130999, 0.45957607882363455, 0.46987119742802214, 0.4987391744341169, 0.4440013681139265, 0.4564155510493687, 0.48581712586539133, 0.5170033999851772, 0.4338416542325701, 0.48122659751347135], "val_accuracy": [0.2966666519641876, 0.3816666603088379, 0.36633333563804626, 0.5946666598320007, 0.5516666769981384, 0.6833333373069763, 0.6966666579246521, 0.6793333292007446, 0.7049999833106995, 0.6850000023841858, 0.7179999947547913, 0.7083333134651184, 0.7326666712760925, 0.7253333330154419, 0.7689999938011169, 0.7786666750907898, 0.7713333368301392, 0.8063333630561829, 0.7946666479110718, 0.7786666750907898, 0.8083333373069763, 0.8056666851043701, 0.7559999823570251, 0.7586666941642761, 0.7973333597183228, 0.7726666927337646]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 7, 3, 9, 8, 4, 1, 9, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [5, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.7991428375244141, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1785273837879457, 2.1233129752326274, 2.0410216335197875, 1.881846488758148, 1.8154417074839861, 1.1964757919091087, 0.8625984957756352, 0.8036966009257162, 0.7006486371964543, 0.6812828836849164, 0.6604860122287908, 0.6582004195978424, 0.6113228086608985, 0.5924081518712722, 0.5782650725055192, 0.5998150392483097, 0.5712099863459106, 0.5357374724631989, 0.5559847866224497, 0.5208144591406053], "accuracy": [0.260071337223053, 0.2615242302417755, 0.32505613565444946, 0.3617751896381378, 0.3657376766204834, 0.5840708017349243, 0.6847180128097534, 0.6995112895965576, 0.7325320243835449, 0.7475894689559937, 0.7504953145980835, 0.7475894689559937, 0.7666094303131104, 0.7779685854911804, 0.7798177003860474, 0.7688548564910889, 0.7847048044204712, 0.8050455451011658, 0.7841764688491821, 0.8094043135643005], "val_loss": [1.880960123879569, 1.7481086594717843, 1.649193320955549, 1.8650802884783064, 0.8775351558412824, 0.6959394046238491, 0.630840710231236, 0.5326864719390869, 0.538077712059021, 0.5179127965654645, 0.5032369920185634, 0.47424146107264925, 0.46851907457624165, 0.46903090817587717, 0.44164311034338816, 0.48107642786843435, 0.44380630765642437, 0.452776415007455, 0.4714555059160505, 0.45638682161058697], "val_accuracy": [0.3190000057220459, 0.39233332872390747, 0.4416666626930237, 0.30433332920074463, 0.6153333187103271, 0.7099999785423279, 0.7283333539962769, 0.7553333044052124, 0.7596666812896729, 0.7689999938011169, 0.7733333110809326, 0.7953333258628845, 0.7893333435058594, 0.7806666493415833, 0.8023333549499512, 0.7896666526794434, 0.7829999923706055, 0.7893333435058594, 0.7990000247955322, 0.7953333258628845]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [13, 16, 61], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 4, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 0, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [99, 0, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.795714259147644, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.5658073199502294, 1.9064452616514358, 1.6235028149634148, 1.5998173091452843, 1.1598217956866446, 1.0774285026812802, 0.87544088458278, 0.8443747444348706, 0.7499017383853568, 0.7128442885648651, 0.7128569266075282, 0.6736084613912157, 0.651552462889581, 0.6210346378591697, 0.6335640243566929, 0.610715552154801, 0.5726292711034222, 0.5787379654202368], "accuracy": [0.26865673065185547, 0.3899088501930237, 0.4659886360168457, 0.4571390748023987, 0.5894861817359924, 0.6217144131660461, 0.6839255094528198, 0.6911900639533997, 0.7259278893470764, 0.7322678565979004, 0.7305507659912109, 0.7421740889549255, 0.752212405204773, 0.7675340175628662, 0.7614582180976868, 0.7751948237419128, 0.7872143983840942, 0.7861577272415161], "val_loss": [1.9063414164951868, 1.5673548153468542, 1.0510997772216797, 0.8703925609588623, 1.1345048972538538, 0.740512524332319, 0.7487285648073468, 0.6141842092786517, 0.5721172775541034, 0.5446678570338658, 0.5790724924632481, 0.5460572413035801, 0.4973310913358416, 0.5382112434932164, 0.5392813682556152, 0.47600322110312326, 0.5053937094552177, 0.49685377734048025], "val_accuracy": [0.2763333320617676, 0.42800000309944153, 0.6056666374206543, 0.6516666412353516, 0.5716666579246521, 0.6713333129882812, 0.652999997138977, 0.7326666712760925, 0.7390000224113464, 0.7549999952316284, 0.7229999899864197, 0.734666645526886, 0.7836666703224182, 0.749666690826416, 0.7509999871253967, 0.7829999923706055, 0.7703333497047424, 0.7580000162124634]}}, {"genotype": [[0], [0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 56, 20, 7, 45, 13], [0], [1, 1, 1], [6], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 12, 12, 9, 3, 4, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06445647776126862, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [4, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 2, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 2, 2, 6, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [93, 36, 20, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [8, 2, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026463615108614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [8, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [61, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026463615108614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1], [0, 0, 1, 1], [2, 5, 6, 5, 2, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 2, 6, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [89, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 15, 15, 9, 6, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, alpha))), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3023546312967262, 2.3022509305200964, 2.3026882628124814, 2.304444797664759, 2.3127082526298044, 2.3541411153707426], "accuracy": [0.1014397069811821, 0.10421344637870789, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9737392153058733, 1.9739439828055245, 1.9748363494873047, 1.9786572456359863, 1.9953714779445104, 2.087615762438093], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [9, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 57], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 1, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 5, 37, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), tf.math.multiply(grad, tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(sigma), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha))))", "other_info": {"loss": [2.3948590742236413, 2.314022915663421, 2.306659111273114, 2.307133853774045, 2.3047024434693912, 2.304573386651713, 2.304662955325309], "accuracy": [0.09060890227556229, 0.09232597798109055, 0.0948355570435524, 0.0936468094587326, 0.10157178342342377, 0.09391097724437714, 0.1002509593963623], "val_loss": [1.9915075983319963, 1.9800330570765905, 1.9772405624389648, 1.9757206099373954, 1.9758033071245467, 1.9753351892743791, 1.974703243800572], "val_accuracy": [0.10066666454076767, 0.10133333504199982, 0.09666666388511658, 0.10000000149011612, 0.10066666454076767, 0.09833333641290665, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 3, 9, 8, 9, 8, 0, 2, 0, 3, 8, 8, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 19, 19, 14, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), grad)))), grad))))), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026463615108614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 0, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 6, 8, 8, 5, 7, 4, 5, 6], [0, 3, 1, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026463615108614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [0, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 5, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [1], [0, 1, 1], [9], [6, 1], [52], [1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026463615108614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 5, 6, 5, 3, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 6, 2, 6, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 2, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 3, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3029426891947655, 2.3030525271005446, 2.3029098988776004, 2.3031170507699836, 2.3029356919826376, 2.3028826487771337, 2.3029772798855386, 2.302835056574243], "accuracy": [0.09417514503002167, 0.09536388516426086, 0.09721305221319199, 0.09576013684272766, 0.0956280529499054, 0.09470347315073013, 0.09813763201236725, 0.09470347315073013], "val_loss": [1.9736428941999162, 1.9737044743129186, 1.973780291421073, 1.9736712319510323, 1.9737039974757604, 1.973745550428118, 1.973604610988072, 1.9737053598676408], "val_accuracy": [0.09866666793823242, 0.09833333641290665, 0.10133333504199982, 0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.10000000149011612, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 2, 1, 1, 1, 2, 1, 2, 2], [30, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 1, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [24, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 2, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302942707176143, 2.3030525585915735, 2.3029099303686293, 2.3031170867327386, 2.3029355345274936, 2.302882680268162, 2.3029771539214234, 2.3028349621011563], "accuracy": [0.09417514503002167, 0.09536388516426086, 0.09721305221319199, 0.09576013684272766, 0.0956280529499054, 0.09470347315073013, 0.09813763201236725, 0.09470347315073013], "val_loss": [1.9736427579607283, 1.9737042699541365, 1.9737801551818848, 1.9736712319510323, 1.9737039974757604, 1.97374541418893, 1.9736045428684779, 1.9737050873892648], "val_accuracy": [0.09866666793823242, 0.09833333641290665, 0.10133333504199982, 0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.10000000149011612, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [62, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 3, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026463615108614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 2, 1, 1, 1, 2, 1, 2, 2], [94, 69, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 2, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09338264167308807, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 6, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 3, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06445647776126862, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 1, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 1, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026463615108614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0], [4, 7, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 1, 2, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 8, 2, 6, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 0, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [1, 0, 0, 0, 1, 0, 0, 1, 1], [7, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.sqrt(alpha), tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026463615108614, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 0, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 2, 8, 6, 0, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 1, 3, 3, 2, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [28, 56, 20, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 23, 23, 15, 8, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))))), tf.math.add(beta, beta)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]