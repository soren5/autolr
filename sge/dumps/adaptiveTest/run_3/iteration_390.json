[{"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [98, 98, 99], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 1, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8094285726547241, "mapping_values": [1, 5, 5, 3, 2, 2, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.194077107884613, 2.26089793809763, 2.2380029348066817, 2.0858113317599214, 1.8090898439380645, 1.3682262586675, 0.9620840017428063, 0.7766603849598949, 0.7469453219456711, 0.6785562183201636, 0.6817178062601584, 0.6098995065613508, 0.6050505426266662, 0.6131088850740996, 0.6064533747623405, 0.5413937908177205, 0.5477762837860924, 0.5389196860075406, 0.5365505684966724, 0.5292143598523642, 0.49486147914155126, 0.5188612275749638, 0.5040389601312939, 0.47000249625118323, 0.48935745006791037], "accuracy": [0.29480913281440735, 0.27460044622421265, 0.21476687490940094, 0.31303659081459045, 0.39004093408584595, 0.544710099697113, 0.6473385095596313, 0.709549605846405, 0.7181349992752075, 0.7437590956687927, 0.7429665923118591, 0.7617223858833313, 0.7670056819915771, 0.772288978099823, 0.7642319202423096, 0.793422281742096, 0.7964601516723633, 0.7947431206703186, 0.7932901978492737, 0.7993659973144531, 0.8100647330284119, 0.8000264167785645, 0.8104609847068787, 0.8208954930305481, 0.8182538747787476], "val_loss": [1.8937679018293108, 1.6004046031406947, 1.9372690745762415, 1.9423027038574219, 1.620523452758789, 0.9639477048601423, 0.6413498435701642, 0.6764377185276577, 0.5212485619953701, 0.6298009157180786, 0.5193657534463065, 0.4996638468333653, 0.6285384382520404, 0.5325137036187308, 0.47146524701799664, 0.45739398683820454, 0.44838716302599224, 0.47827097347804476, 0.4500270571027483, 0.4212994660649981, 0.46378942898341585, 0.44015577861240934, 0.470636248588562, 0.4428185054234096, 0.4473545891898019], "val_accuracy": [0.32899999618530273, 0.40966665744781494, 0.2866666615009308, 0.1863333284854889, 0.3556666672229767, 0.6140000224113464, 0.7143333554267883, 0.6823333501815796, 0.7540000081062317, 0.7310000061988831, 0.7553333044052124, 0.7603333592414856, 0.7160000205039978, 0.7603333592414856, 0.7900000214576721, 0.7976666688919067, 0.8073333501815796, 0.7870000004768372, 0.8050000071525574, 0.8216666579246521, 0.7979999780654907, 0.812333345413208, 0.7916666865348816, 0.793666660785675, 0.7953333258628845]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 9, 5, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2], [93, 80, 61], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 3, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8011428713798523, "mapping_values": [1, 4, 4, 3, 1, 1, 23, 23, 12, 11, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1940716592438263, 2.286097314804615, 1.9388166462756293, 2.058803194045643, 1.806804166840304, 1.1583293828320558, 0.8445473383477871, 0.7562358406839936, 0.7022577102441577, 0.7162062618726469, 0.6517560315437604, 0.6322999625961149, 0.5965195508397503, 0.6042222016286919, 0.5976406358740411, 0.5594629436010982, 0.5537561562712859, 0.5305463762614611, 0.5426326293467278, 0.5178691907927911, 0.5016171286575641, 0.5333179606107783, 0.5125307297867209, 0.4811530861958789, 0.4930318917155565, 0.475790945128868], "accuracy": [0.29480913281440735, 0.2561088502407074, 0.34526482224464417, 0.2981112003326416, 0.42887333035469055, 0.601109504699707, 0.6900013089179993, 0.7059833407402039, 0.7428345084190369, 0.7368907928466797, 0.7498348951339722, 0.7626469135284424, 0.7765156626701355, 0.7728173136711121, 0.7741381525993347, 0.7895918488502502, 0.7931581139564514, 0.8000264167785645, 0.7975168228149414, 0.8105930685997009, 0.81548011302948, 0.7952714562416077, 0.8088759779930115, 0.8182538747787476, 0.8157442808151245, 0.8189142942428589], "val_loss": [1.8932909284319197, 1.86047397341047, 1.2740963527134486, 1.3156264168875558, 1.2059249877929688, 0.6448473760059902, 0.6058633838381086, 0.6453005075454712, 0.5364891801561628, 0.5168888057981219, 0.6079692499978202, 0.4723114286150251, 0.5285132612500872, 0.5044164146695819, 0.46535730361938477, 0.4477893284388951, 0.48356127738952637, 0.47824580328805105, 0.44823718070983887, 0.43872662101473126, 0.4247036746570042, 0.466698374067034, 0.4536607265472412, 0.45047097546713694, 0.420285701751709, 0.49656527382986887], "val_accuracy": [0.32866665720939636, 0.4129999876022339, 0.47600001096725464, 0.5740000009536743, 0.5416666865348816, 0.7076666951179504, 0.7223333120346069, 0.6986666917800903, 0.765999972820282, 0.7649999856948853, 0.7443333268165588, 0.7976666688919067, 0.7836666703224182, 0.7753333449363708, 0.800000011920929, 0.8130000233650208, 0.7683333158493042, 0.7883333563804626, 0.8103333115577698, 0.8050000071525574, 0.8256666660308838, 0.781333327293396, 0.7983333468437195, 0.7933333516120911, 0.8163333535194397, 0.75]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 2, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2], [98, 98, 99], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 1, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7991428375244141, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(grad, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4440121031582174, 2.165179848592232, 1.95992105532442, 1.424478116650796, 1.1050194056436229, 0.9526722318130068, 0.8667089021153942, 0.827744422855158, 0.7600428175381414, 0.7461542931482886, 0.7019106573227799, 0.6906374580808807, 0.6346569392879831, 0.6515834326867525, 0.6166891177978183, 0.605885607770185, 0.5977233495726136, 0.5587067395358148, 0.54466372260706, 0.558862026679974], "accuracy": [0.2673358917236328, 0.2689208686351776, 0.37207767367362976, 0.5011227130889893, 0.6057323813438416, 0.6516972780227661, 0.677189290523529, 0.6939638257026672, 0.709021270275116, 0.7150970697402954, 0.7306828498840332, 0.7357020378112793, 0.750759482383728, 0.7537974119186401, 0.7613261342048645, 0.7741381525993347, 0.7693831920623779, 0.7910447716712952, 0.7955356240272522, 0.7906485199928284], "val_loss": [1.9182247434343611, 1.9065070152282715, 1.2200914791652135, 0.953650985445295, 0.7952055931091309, 0.7375900575092861, 0.6935219083513532, 0.6134528262274606, 0.6132794959204537, 0.5588465077536446, 0.5732086045401437, 0.5347952161516462, 0.5317213365009853, 0.5041065045765468, 0.475877046585083, 0.4774468626294817, 0.4793431077684675, 0.456402199608939, 0.49918414865221294, 0.5133472340447562], "val_accuracy": [0.42100000381469727, 0.35766667127609253, 0.4806666672229767, 0.5516666769981384, 0.6233333349227905, 0.6866666674613953, 0.6696666479110718, 0.7113333344459534, 0.7103333473205566, 0.7319999933242798, 0.7213333249092102, 0.746666669845581, 0.753000020980835, 0.7716666460037231, 0.7933333516120911, 0.7866666913032532, 0.7796666622161865, 0.7903333306312561, 0.7493333220481873, 0.7450000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [2, 2, 6, 1, 6, 5, 4, 7, 0, 6, 5, 7, 1, 9, 2, 9, 2, 1, 8, 9], [2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 2, 1], [98, 98, 99], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7968571186065674, "mapping_values": [1, 19, 19, 10, 9, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(alpha)), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, grad)))))), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.021666884910413, 1.8576285222171556, 1.3979345508113654, 1.035707186659046, 0.8903801802237272, 0.7583245525994966, 0.7066638719813542, 0.6641148122278706, 0.6459151619083106, 0.6049945731724196, 0.612431056086004, 0.5792965499433025, 0.5705359548216152, 0.5535272098472483, 0.5387583706577646, 0.5171425600550068, 0.5592188204614919, 0.49200828630280863, 0.4704559844844865, 0.4893231819830456], "accuracy": [0.29877161979675293, 0.4017963409423828, 0.4966318905353546, 0.6201294660568237, 0.6736230254173279, 0.7172104120254517, 0.7300224304199219, 0.7479857206344604, 0.7536653280258179, 0.767401933670044, 0.7707040309906006, 0.7849689722061157, 0.791441023349762, 0.7951393723487854, 0.7932901978492737, 0.8063663840293884, 0.7849689722061157, 0.8121780753135681, 0.8310658931732178, 0.8148196935653687], "val_loss": [1.8847857883998327, 1.6274006366729736, 1.0201494693756104, 0.6257480382919312, 0.5630922317504883, 0.5502930879592896, 0.5185151100158691, 0.5441129718508039, 0.5081828151430402, 0.5379996980939593, 0.4672288043158395, 0.4945582832608904, 0.48172591413770405, 0.42511401006153654, 0.4236756478037153, 0.5401571818760463, 0.4174861226763044, 0.40954558338437763, 0.42548481055668425, 0.5081639289855957], "val_accuracy": [0.19066666066646576, 0.32199999690055847, 0.5273333191871643, 0.7266666889190674, 0.7440000176429749, 0.7406666874885559, 0.765333354473114, 0.7570000290870667, 0.7636666893959045, 0.7620000243186951, 0.7883333563804626, 0.7546666860580444, 0.7876666784286499, 0.8090000152587891, 0.8169999718666077, 0.7440000176429749, 0.8163333535194397, 0.8166666626930237, 0.8073333501815796, 0.8003333210945129]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 4, 6, 1, 6, 5, 4, 7, 1, 6, 5, 7, 5, 9, 2, 9, 2, 1, 8, 9], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [98, 98, 99], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [78, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7965714335441589, "mapping_values": [1, 26, 26, 16, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), alpha))))), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0216652127997654, 1.8601794369452822, 1.309040552589478, 0.9285387183381991, 0.8492563610551789, 0.7418166644710827, 0.7409684391557706, 0.6750192452950831, 0.6551148888929692, 0.621166425547375, 0.5927629204568546, 0.5907247813543733, 0.5615692049158626, 0.5942921155101477, 0.5252981279992535, 0.5380771091475289, 0.5317913591664906, 0.4931665368367337, 0.4964583858113483, 0.4910747580020624, 0.4885641093290934, 0.469007734270805], "accuracy": [0.29863953590393066, 0.39426758885383606, 0.5337471961975098, 0.6497160196304321, 0.6820763349533081, 0.7190595865249634, 0.7186633348464966, 0.7397965788841248, 0.750759482383728, 0.7648923397064209, 0.7755910754203796, 0.7765156626701355, 0.7902522683143616, 0.7741381525993347, 0.8000264167785645, 0.7924976944923401, 0.7938185334205627, 0.8124422430992126, 0.8168009519577026, 0.8145555257797241, 0.8175934553146362, 0.8249900937080383], "val_loss": [1.8866281509399414, 1.303755419594901, 0.8096844128199986, 0.7296952179500035, 0.5694221258163452, 0.552575945854187, 0.5176991735185895, 0.5348265852246966, 0.4982200690678188, 0.4950120278767177, 0.4943784305027553, 0.4909228937966483, 0.49708734239850727, 0.442032984324864, 0.4598825829369681, 0.46354385784694124, 0.42228645937783377, 0.4457567589623587, 0.4499932016645159, 0.43437384707587107, 0.4292461701801845, 0.4443204828671047], "val_accuracy": [0.18766666948795319, 0.45133334398269653, 0.6303333044052124, 0.668666660785675, 0.721666693687439, 0.7506666779518127, 0.7616666555404663, 0.7586666941642761, 0.762666642665863, 0.7760000228881836, 0.7730000019073486, 0.753000020980835, 0.7820000052452087, 0.8016666769981384, 0.7806666493415833, 0.7816666960716248, 0.812666654586792, 0.8059999942779541, 0.8026666641235352, 0.8116666674613953, 0.8100000023841858, 0.8100000023841858]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 2, 3, 0, 0, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 9, 3, 1, 8, 4, 3, 4, 2, 4, 3, 2], [1, 2, 2, 1, 0, 1, 1, 1, 1, 2, 2, 2, 0, 1, 0, 0, 2, 0], [21, 80, 61, 57, 62, 92], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.7865714430809021, "mapping_values": [1, 44, 44, 26, 18, 6, 23, 23, 13, 10, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, alpha))))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), alpha))))), tf.math.add(alpha, alpha))))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, grad)), grad)))), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), grad), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.pow(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0250723002971265, 2.0473356639011553, 1.8169962487531266, 1.85603504964405, 1.254470171520282, 0.9384122655502226, 0.7925162284507444, 0.7461940144047116, 0.6977047273401319, 0.6490145361954116, 0.6292379124053418, 0.6050481102832194, 0.5781853900703976, 0.5840540643160952, 0.5560136028977433, 0.5272614639338532, 0.5376574952037753, 0.4930174870340501, 0.5018565863776342], "accuracy": [0.3053757846355438, 0.30484744906425476, 0.40985339879989624, 0.4057588279247284, 0.5497292280197144, 0.6539427042007446, 0.7080966830253601, 0.7210407853126526, 0.7383436560630798, 0.7541936039924622, 0.76106196641922, 0.7734777331352234, 0.780610203742981, 0.7758552432060242, 0.7936864495277405, 0.800818920135498, 0.7964601516723633, 0.8150838613510132, 0.8115176558494568], "val_loss": [1.05977691922869, 1.6100946835109167, 1.9055635588509696, 1.271598952157157, 0.8497943196977887, 0.703179155077253, 0.6190023081643241, 0.5807837758745465, 0.5229276759283883, 0.5012792178562709, 0.48942884377070833, 0.5116455895560128, 0.4692668914794922, 0.4368215118135725, 0.4495948042188372, 0.4867351395743234, 0.41949983154024395, 0.43415537050792147, 0.4368905339922224], "val_accuracy": [0.5523333549499512, 0.4973333477973938, 0.1469999998807907, 0.45500001311302185, 0.6710000038146973, 0.7049999833106995, 0.7303333282470703, 0.7260000109672546, 0.7593333125114441, 0.7710000276565552, 0.7770000100135803, 0.7419999837875366, 0.7826666831970215, 0.8173333406448364, 0.7883333563804626, 0.7633333206176758, 0.815666675567627, 0.8173333406448364, 0.8033333420753479]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [6, 2, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 4, 3, 3, 3, 0, 1, 0, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [6, 1, 7, 8, 6, 7, 4, 5, 6, 9, 9], [3, 0, 2, 1, 0, 0, 2, 2], [37, 25, 76, 58, 17]], "fitness": -0.7757142782211304, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 17, 11, 6, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2755753273473296, 2.187431418931936, 2.016631137929525, 1.7161271639346383, 1.4243327733185849, 1.2516180264589227, 1.1362929685067633, 1.0524533189692438, 0.9914795132581474, 0.9391016613034178, 0.9118249414855495, 0.8891816303131996, 0.8609350842491763, 0.83618453725643, 0.8174897657251944, 0.8037817678226692, 0.7885712503505153, 0.7663800313078795, 0.7823489034700198, 0.7563577429446184, 0.7476989986275827, 0.7405220891711042, 0.7193798009493663, 0.7185034919739274, 0.7121261182383712, 0.7044003496175083, 0.6970215389332074, 0.6897729914091708, 0.6875773843930397, 0.6814057401788233, 0.6710604723686114, 0.68428332328387, 0.6743377608126181, 0.654311732546119, 0.6562343696325431, 0.6547468774007879, 0.6457270836754561, 0.6398816045957738, 0.6375238487686165, 0.6413149589702454, 0.6361824190533156], "accuracy": [0.16642451286315918, 0.31026285886764526, 0.39690926671028137, 0.4691586196422577, 0.5344076156616211, 0.5679566860198975, 0.6073173880577087, 0.6293752193450928, 0.6472064256668091, 0.6684718132019043, 0.6794346570968628, 0.6802271604537964, 0.6935675740242004, 0.7025492191314697, 0.7073041796684265, 0.7106062769889832, 0.7160216569900513, 0.7209087014198303, 0.7112666964530945, 0.7246070504188538, 0.724210798740387, 0.7263241410255432, 0.7386078238487244, 0.7368907928466797, 0.7420420050621033, 0.7390040755271912, 0.7420420050621033, 0.7469290494918823, 0.7432307600975037, 0.7427024245262146, 0.7541936039924622, 0.7469290494918823, 0.7479857206344604, 0.7574957013130188, 0.7618544697761536, 0.7557786107063293, 0.761590301990509, 0.7637035846710205, 0.7623828053474426, 0.7592127919197083, 0.7586844563484192], "val_loss": [1.9056805883135115, 1.7835964475359236, 1.5416417121887207, 1.2153638771602087, 0.9817886011941093, 0.8563369171960014, 0.7765955073492867, 0.7278922285352435, 0.6916442598615374, 0.6631859881537301, 0.6480024882725307, 0.6346645695822579, 0.6115250076566424, 0.599729095186506, 0.5947686433792114, 0.5815342324120658, 0.5735071046011788, 0.5671966246196202, 0.5686074665614537, 0.5612132038388934, 0.5498248338699341, 0.5433322191238403, 0.5407551016126361, 0.5345666238239833, 0.524017368044172, 0.529610174042838, 0.5202043737683978, 0.5269916227885655, 0.5123153243746076, 0.511548502104623, 0.5105616535459246, 0.5058842897415161, 0.5016661201204572, 0.5010923487799508, 0.49834154333387104, 0.4913504123687744, 0.4919248989650181, 0.4927961826324463, 0.4865680081503732, 0.4851455347878592, 0.4818547623498099], "val_accuracy": [0.4090000092983246, 0.47200000286102295, 0.5446666479110718, 0.5653333067893982, 0.6433333158493042, 0.6833333373069763, 0.6986666917800903, 0.7106666564941406, 0.7153333425521851, 0.7243333458900452, 0.7260000109672546, 0.7250000238418579, 0.7363333106040955, 0.7436666488647461, 0.7429999709129333, 0.7526666522026062, 0.7473333477973938, 0.7536666393280029, 0.746999979019165, 0.7509999871253967, 0.7593333125114441, 0.7566666603088379, 0.762666642665863, 0.7639999985694885, 0.7689999938011169, 0.7643333077430725, 0.7649999856948853, 0.7583333253860474, 0.7680000066757202, 0.7716666460037231, 0.7753333449363708, 0.7733333110809326, 0.777999997138977, 0.7739999890327454, 0.7796666622161865, 0.7876666784286499, 0.781333327293396, 0.7753333449363708, 0.7846666574478149, 0.7823333144187927, 0.781333327293396]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 0, 5, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2], [93, 80, 61], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 3, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [8, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 0, 2, 0, 8, 6, 7, 8, 6, 3, 7, 5, 0, 2, 2, 2, 9, 8, 0], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1], [98, 98, 99], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 3, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [59, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 10, 10, 5, 5, 0, 1, 1, 1, 0, 1, 5, 2, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.sqrt(tf.math.add(alpha, grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 5, 5, 5, 1, 7, 1, 2, 5, 6, 5, 6, 1, 2, 2, 1, 8, 9, 6, 8, 8], [0, 0, 0, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1], [93, 80, 92, 22], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 9, 1, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [55, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 36, 23, 13, 4, 2, 2, 2, 0, 1, 1, 1, 1, 0, 1, 4, 2, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad)))))))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)))))), tf.math.add(alpha, grad)))))), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), sigma)", "other_info": {"loss": [73438846.20174152, 1396132032.5325584, 6499558892.996963, 17947970360.772423, 39115689008.5558, 71513962916.63664], "accuracy": [0.09536388516426086, 0.09668471664190292, 0.10342095047235489, 0.10236428678035736, 0.10408136248588562, 0.09708096832036972], "val_loss": [276060818.28571427, 2206784877.714286, 7445998445.714286, 17647493705.142857, 34465285266.28571, 59552563200.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 9, 5, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1], [93, 48, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [59, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 4, 4, 2, 2, 0, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [200652399.34419298, 3815999071.6914544, 17767038147.711002, 49064499565.45344, 106934063751.59106, 195508200279.88058], "accuracy": [0.09536388516426086, 0.09668471664190292, 0.10342095047235489, 0.10236428678035736, 0.10408136248588562, 0.09708096832036972], "val_loss": [754435090.2857143, 6032155794.285714, 20354843209.142857, 48244010422.85714, 94221699364.57143, 162809034459.42856], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [9, 2, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 0, 1, 2, 1, 2, 0], [93, 80, 61], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 0, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [57, 93, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026247586651, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 8, 6, 5, 5, 5, 1, 7, 1, 2, 5, 7, 5, 2, 1, 2, 2, 1, 8, 9], [3, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [98, 98, 99], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 1, 2, 1, 0, 0, 2, 2], [23, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026247586651, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 2, 5, 1, 9, 2, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 2, 3, 0, 0, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 9, 3, 1, 8, 4, 3, 4, 2, 4, 3], [0, 2, 2, 1, 0, 1, 1, 1, 1, 2, 2, 2, 0], [93, 80, 61, 57], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 3, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 2, 3, 0, 0, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 9, 3, 1, 8, 4, 3, 4, 2, 4, 3], [0, 2, 2, 1, 0, 1, 1, 1, 1, 2, 2, 2, 0], [93, 80, 61, 57], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3493355958689444, 2.830029028502154, 4.198449716591926, 6.463859717576039, 9.772415887189974, 13.920234567437898, 19.215683238853664], "accuracy": [0.08942015469074249, 0.09615638852119446, 0.10236428678035736, 0.10117553919553757, 0.1022322028875351, 0.09721305221319199, 0.09232597798109055], "val_loss": [2.0560150146484375, 2.5235751696995328, 3.604152406964983, 5.309633663722447, 7.59472165788923, 10.466771806989398, 13.960474286760602], "val_accuracy": [0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 2, 3, 0, 0, 4, 1, 7, 8, 6, 0, 7, 5, 1, 0, 9, 3, 1, 8, 4, 3, 4, 2, 4, 3], [2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 2, 1], [93, 80, 61, 57], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [47, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [1, 4, 8, 8, 6, 7, 4, 5, 6], [0, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 20, 12, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, alpha), grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(alpha))))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, alpha), grad), alpha)))))))))), tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 9, 5, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 2, 2, 1, 1, 1, 1, 2, 2], [93, 80, 61], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 2, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [17, 9, 76, 58]], "fitness": -0.06342857331037521, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3031325872469384, 2.3015345011121484, 2.301491473313446, 2.3016374434903315, 2.3022242605158714, 2.3024772064734003, 2.3020617143116797], "accuracy": [0.09113723784685135, 0.09351472556591034, 0.09813763201236725, 0.09087307006120682, 0.08532558381557465, 0.0796460211277008, 0.08268392831087112], "val_loss": [1.970857892717634, 1.9700946807861328, 1.971740654536656, 1.9727293423243932, 1.972757271357945, 1.9726435116359167, 1.9728033202035087], "val_accuracy": [0.050999999046325684, 0.09066666662693024, 0.06700000166893005, 0.05000000074505806, 0.06933332979679108, 0.07900000363588333, 0.08133333176374435]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 9, 2, 9, 5, 0, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 0, 0, 2, 1, 1, 1], [48, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [85, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 5, 5, 3, 2, 1, 23, 23, 13, 10, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), sigma)", "other_info": {"loss": [2.3031734845515777, 2.3034969991649445, 2.3046038477979143, 2.3022359771940137, 2.3029397806518537, 2.3044262686583186], "accuracy": [0.09325055778026581, 0.08796724677085876, 0.08968432247638702, 0.09417514503002167, 0.09206181764602661, 0.09008057415485382], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 9, 5, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [93, 80, 61], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 5, 3, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3031734845515777, 2.3034969991649445, 2.3046038477979143, 2.3022359771940137, 2.3029397806518537, 2.3044262686583186], "accuracy": [0.09325055778026581, 0.08796724677085876, 0.08968432247638702, 0.09417514503002167, 0.09206181764602661, 0.09008057415485382], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]