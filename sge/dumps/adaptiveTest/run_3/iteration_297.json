[{"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0152354261831382, 1.440369090305233, 1.039860429560362, 0.8926119216680999, 0.8468146726219425, 0.7864778986255554, 0.7316215340141071, 0.7007558678103759, 0.7139156285986814, 0.6505169087019358, 0.6652041577927551, 0.6187017315004983, 0.6352394798003199, 0.5946225688174385, 0.5843634896227365, 0.5522412873766189, 0.5628803277358938, 0.5452243115026182, 0.5378441817221026, 0.5262225953705354, 0.517354026178973, 0.5108629936366396, 0.5188933524551991, 0.5008588307144116, 0.4827913016242248, 0.48567387268386103, 0.4677937336845673, 0.46721150346514634, 0.45168118878929386, 0.4477069514845781, 0.4397126307710759, 0.45357418179968645, 0.4481098129213636, 0.425589118237981, 0.41001114133106265, 0.42719063321833345, 0.4085063019118147, 0.41605083365104045, 0.38880722414249, 0.4124339376741696, 0.3896922264959141, 0.38516621846469984, 0.3818341771318078, 0.3840666725068375, 0.37171840478778434, 0.3702014578158719, 0.35899340508478883, 0.3519878539356022, 0.349523139399875, 0.34483085095827304, 0.3563551565383986, 0.3403490874840048, 0.3493852269624313, 0.3258244516378412, 0.3334465372863148, 0.36414921103042147, 0.3227024725785329, 0.32894611080340613, 0.31186599367172835, 0.3176201656431239, 0.31503902217849306, 0.3039431581762032, 0.3037837956402327, 0.2948041489103514, 0.3116007805059552], "accuracy": [0.32333904504776, 0.5176330804824829, 0.6205257177352905, 0.6659622192382812, 0.6758684515953064, 0.7049266695976257, 0.7252674698829651, 0.7313432693481445, 0.7263241410255432, 0.7518161535263062, 0.7479857206344604, 0.7637035846710205, 0.7588165402412415, 0.7716285586357117, 0.7737419009208679, 0.7898560166358948, 0.7862898111343384, 0.7915731072425842, 0.7942147850990295, 0.8033285140991211, 0.802271842956543, 0.8049134612083435, 0.8034605979919434, 0.8072909712791443, 0.817989706993103, 0.8149517774581909, 0.8251221776008606, 0.822348415851593, 0.8334434032440186, 0.8300092220306396, 0.8362171649932861, 0.8313300609588623, 0.8302733898162842, 0.842028796672821, 0.8470479249954224, 0.837537944316864, 0.8487650156021118, 0.8436138033866882, 0.8521991968154907, 0.8469158411026001, 0.8548408150672913, 0.8560295701026917, 0.8610487580299377, 0.8543124794960022, 0.8569541573524475, 0.8623695969581604, 0.8667283058166504, 0.8729361891746521, 0.8689737319946289, 0.8728041052818298, 0.8644828796386719, 0.8708229064941406, 0.8660678863525391, 0.8741249442100525, 0.874389111995697, 0.8632941246032715, 0.8774270415306091, 0.8717474341392517, 0.8809932470321655, 0.8799365758895874, 0.8795403242111206, 0.8877294659614563, 0.8894465565681458, 0.8868049383163452, 0.8823140859603882], "val_loss": [1.6766855716705322, 0.7817582743508475, 0.8047620228358677, 0.6747418982642037, 0.6275140387671334, 0.5843265056610107, 0.5462063380650112, 0.5402243137359619, 0.542231695992606, 0.5581927980695452, 0.5017960241862706, 0.5362393685749599, 0.4815905434744699, 0.49078994137900217, 0.4674750736781529, 0.47675277505602154, 0.4937511682510376, 0.4493123974118914, 0.46386541639055523, 0.4693740946905954, 0.44560318333762033, 0.5183553355080741, 0.4219950182097299, 0.4203064356531416, 0.4055794818060739, 0.41143166167395456, 0.41119996138981413, 0.40807696751185824, 0.40241342782974243, 0.39294908727918354, 0.4062170812061855, 0.399468651839665, 0.40378940956933157, 0.37463016169411795, 0.37360657112939016, 0.38348465306418283, 0.38934860059193205, 0.36666507380349295, 0.38619273049490793, 0.3675439017159598, 0.3545013155255999, 0.36399080072130474, 0.3750227008547102, 0.3500743167740958, 0.3839470148086548, 0.35306388991219656, 0.3569231118474688, 0.3435121178627014, 0.3513485704149519, 0.33490727628980366, 0.3535558581352234, 0.3629642724990845, 0.3354239634105137, 0.34630830798830303, 0.3767256311007908, 0.343900203704834, 0.3342621922492981, 0.33502679211752756, 0.33557355403900146, 0.32570528984069824, 0.33406369175229755, 0.3379762853894915, 0.34058416741234915, 0.3420286774635315, 0.34035840204783846], "val_accuracy": [0.3766666650772095, 0.6549999713897705, 0.6316666603088379, 0.6713333129882812, 0.7523333430290222, 0.7443333268165588, 0.7506666779518127, 0.7546666860580444, 0.7513333559036255, 0.746666669845581, 0.777999997138977, 0.7509999871253967, 0.7816666960716248, 0.7903333306312561, 0.7860000133514404, 0.7886666655540466, 0.7893333435058594, 0.79666668176651, 0.7896666526794434, 0.7916666865348816, 0.7993333339691162, 0.7720000147819519, 0.8196666836738586, 0.8230000138282776, 0.8316666483879089, 0.8199999928474426, 0.8159999847412109, 0.8193333148956299, 0.8236666917800903, 0.8343333601951599, 0.8226666450500488, 0.8316666483879089, 0.8256666660308838, 0.8383333086967468, 0.8386666774749756, 0.840666651725769, 0.8276666402816772, 0.8496666550636292, 0.8326666951179504, 0.8453333377838135, 0.8550000190734863, 0.8500000238418579, 0.8326666951179504, 0.8560000061988831, 0.8270000219345093, 0.8493333458900452, 0.8446666598320007, 0.8586666584014893, 0.8503333330154419, 0.8550000190734863, 0.846666693687439, 0.8460000157356262, 0.859333336353302, 0.8529999852180481, 0.8363333344459534, 0.859666645526886, 0.8560000061988831, 0.8576666712760925, 0.8610000014305115, 0.8653333187103271, 0.8606666922569275, 0.859666645526886, 0.859333336353302, 0.8519999980926514, 0.8516666889190674]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8105714321136475, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0151248902472143, 1.4404865563773932, 1.0348681144710576, 0.8974851044791643, 0.8538981320174331, 0.770522058443103, 0.7346038481090457, 0.705852306112716, 0.6999512564284124, 0.6502605433776442, 0.6519757338943829, 0.6319703159393998, 0.6173395271534933, 0.6192309190536991, 0.594821830632554, 0.553673353775885, 0.5530842594214875, 0.5531316469484364, 0.5326534563902111, 0.5295318774086782, 0.5208751273240239, 0.5101944592020783, 0.5230646821501831, 0.4973269041030792, 0.4869357995101411, 0.4881047208027959, 0.46571312031300627, 0.47208045857016595, 0.4533227463369089, 0.449481070057402, 0.4429795231565335, 0.45448024505007584, 0.44942014675334996, 0.43293869938628077, 0.4138054710888765, 0.42581158476089365, 0.4175499034020816, 0.4159771302286125, 0.3931682900218223, 0.40883300236234765, 0.38791500441134646, 0.3861098026618383, 0.3847144474293247, 0.3814186622689917, 0.3679234436190974, 0.37369054828290343], "accuracy": [0.3234711289405823, 0.518161416053772, 0.6211860775947571, 0.6651697158813477, 0.6783780455589294, 0.7079645991325378, 0.7201162576675415, 0.7271166443824768, 0.7320036888122559, 0.750759482383728, 0.748778223991394, 0.7602694630622864, 0.763967752456665, 0.7600052952766418, 0.7643640041351318, 0.7891955971717834, 0.791969358921051, 0.7889314293861389, 0.7985734939575195, 0.8039889335632324, 0.8018755912780762, 0.8037247657775879, 0.7998943328857422, 0.8099326491355896, 0.817989706993103, 0.8108572363853455, 0.8257825970649719, 0.8235371708869934, 0.83119797706604, 0.8329150676727295, 0.837537944316864, 0.8297450542449951, 0.8321225643157959, 0.8404437899589539, 0.846387505531311, 0.8374059200286865, 0.846387505531311, 0.8444063067436218, 0.8500858545303345, 0.8499537706375122, 0.8544445633888245, 0.8574824929237366, 0.8581429123878479, 0.8573504090309143, 0.8584070801734924, 0.8603883385658264], "val_loss": [1.6769401005336217, 0.7820227657045636, 0.8028317008699689, 0.6853877816881452, 0.6235804557800293, 0.5925075326647077, 0.550375086920602, 0.5494262490953717, 0.5544122798102242, 0.5291401658739362, 0.508925233568464, 0.55413099697658, 0.479973350252424, 0.47711113521030973, 0.4667710065841675, 0.48180530752454487, 0.4868943010057722, 0.4481353078569685, 0.4653256450380598, 0.47679812567574636, 0.44916622979300364, 0.5140683140073504, 0.42219637972967966, 0.4290643504687718, 0.4108020237513951, 0.41860566820417133, 0.40601084913526264, 0.4047021610396249, 0.40175981181008474, 0.3951376676559448, 0.395717305796487, 0.4027093393462045, 0.4114174672535488, 0.3753073045185634, 0.37129907097135273, 0.3839606557573591, 0.3813966853278024, 0.36911472252437044, 0.3721127084323338, 0.3701628361429487, 0.35833425181252615, 0.36605033704212736, 0.3759341410228184, 0.3523990341595241, 0.39192419392721994, 0.3530782972063337], "val_accuracy": [0.3773333430290222, 0.6546666622161865, 0.6309999823570251, 0.6933333277702332, 0.7436666488647461, 0.7260000109672546, 0.7506666779518127, 0.7480000257492065, 0.7456666827201843, 0.7576666474342346, 0.7763333320617676, 0.7379999756813049, 0.7873333096504211, 0.7926666736602783, 0.7913333177566528, 0.7836666703224182, 0.7933333516120911, 0.796999990940094, 0.7866666913032532, 0.7839999794960022, 0.7993333339691162, 0.7726666927337646, 0.8240000009536743, 0.8240000009536743, 0.8306666612625122, 0.8173333406448364, 0.8216666579246521, 0.8203333616256714, 0.8259999752044678, 0.8356666564941406, 0.831333339214325, 0.8306666612625122, 0.8246666789054871, 0.840666651725769, 0.8433333039283752, 0.8396666646003723, 0.8366666436195374, 0.8516666889190674, 0.8429999947547913, 0.8479999899864197, 0.8550000190734863, 0.8486666679382324, 0.8343333601951599, 0.8529999852180481, 0.8233333230018616, 0.8503333330154419]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [27, 9, 76, 58]], "fitness": -0.7682856917381287, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.294160474639417, 2.273746964292535, 2.248165343431607, 2.2232178038200447, 2.1896458082132337, 2.143883471412744, 2.0877724084966234, 2.017193771655675, 1.9287112628023275, 1.8244203779093104, 1.7195245966604593, 1.6110203472095128, 1.5112357457489338, 1.4212026728804021, 1.357058462544266, 1.2998467178203648, 1.256165758289004, 1.2004572136716096, 1.166568380935144, 1.1351868729502566, 1.1079458791692227, 1.0816738108098467, 1.0616598198867635, 1.0367246767029457, 1.0108558314745026, 0.9963465037520347, 0.9825118263132143, 0.9681262310076194, 0.9539223883004315, 0.941751288243446, 0.9161221800683716, 0.920184497552352, 0.9095833816894876, 0.9014138497413189, 0.8774336420108834, 0.8733275985642195, 0.8619461912977193, 0.8600855258005233, 0.85429664495646, 0.8392945978352108, 0.8371914659020703, 0.8298685670827972, 0.8293618597547848, 0.8203509284788355, 0.8238353298765683, 0.812273198154388, 0.8004740046047185, 0.7991463098827055, 0.795935599567112, 0.7913340079219129, 0.7796813743603527, 0.7850072592823591, 0.7774538767336224, 0.7765286940042574, 0.7675790982302453, 0.7697256898851663, 0.7660122148160212, 0.7581370056596619, 0.7632476315758467, 0.7547679157966258, 0.7535231513842269, 0.7405044825290251, 0.7342726542587215, 0.7441706508063464, 0.7357561617180373, 0.7218147021920186, 0.7217184820777909, 0.7303444271184639, 0.7228797324077565, 0.7231680656058866, 0.7111310691346014, 0.7016916616702077, 0.7168701568598981, 0.7081184157794886, 0.7095016075194615, 0.7079693329899523, 0.7120230926451445, 0.7015395730698444, 0.6938995903021057, 0.6960669717122976, 0.695543811274337, 0.6941260192545728, 0.6926701519987162, 0.6794512446105221, 0.6925493500267652], "accuracy": [0.11200633645057678, 0.16523577272891998, 0.22784309089183807, 0.26601505279541016, 0.30841368436813354, 0.35147273540496826, 0.3777572214603424, 0.4029850661754608, 0.42926958203315735, 0.45608243346214294, 0.47325319051742554, 0.5000660419464111, 0.5211992859840393, 0.5379738211631775, 0.5468233823776245, 0.5617488026618958, 0.5741645693778992, 0.5921278595924377, 0.5958262085914612, 0.6026945114135742, 0.6073173880577087, 0.6148461103439331, 0.6281865239143372, 0.6357152462005615, 0.6419231295585632, 0.6497160196304321, 0.6522256135940552, 0.6527539491653442, 0.6596222519874573, 0.6693964004516602, 0.6777176260948181, 0.6729626059532166, 0.6782459616661072, 0.6822084188461304, 0.6852463483810425, 0.6880200505256653, 0.6931713223457336, 0.6934354901313782, 0.6955488324165344, 0.6946242451667786, 0.6966054439544678, 0.6980583667755127, 0.7030775547027588, 0.7055870890617371, 0.7057191729545593, 0.7092854380607605, 0.713379979133606, 0.7096816897392273, 0.7127195596694946, 0.7127195596694946, 0.7220974564552307, 0.713379979133606, 0.7161537408828735, 0.719852089881897, 0.7228899598121643, 0.7205125093460083, 0.7205125093460083, 0.724739134311676, 0.7219653725624084, 0.7251353859901428, 0.7220974564552307, 0.7301545143127441, 0.7326641082763672, 0.7252674698829651, 0.7316074371337891, 0.733588695526123, 0.7292299270629883, 0.7306828498840332, 0.7342491149902344, 0.7376832365989685, 0.7424382567405701, 0.7446836829185486, 0.7358341217041016, 0.7387399077415466, 0.737022876739502, 0.7420420050621033, 0.7325320243835449, 0.7415136694908142, 0.7490423917770386, 0.7412495017051697, 0.7458723783493042, 0.7466648817062378, 0.7475894689559937, 0.7530049085617065, 0.739928662776947], "val_loss": [1.9513249397277832, 1.9309823172433036, 1.9072063991001673, 1.8783691951206751, 1.8410633632114954, 1.7925865309579032, 1.7309563500540597, 1.652651582445417, 1.559262786592756, 1.453420911516462, 1.3448357582092285, 1.2393429279327393, 1.1448796817234583, 1.0650151797703333, 0.9993385928017753, 0.9449300765991211, 0.9018428325653076, 0.8645039285932269, 0.8328965391431536, 0.8066493613379342, 0.7839144127709525, 0.7635566166469029, 0.7465582404817853, 0.7318565504891532, 0.7185301610401699, 0.7059458834784371, 0.695640001978193, 0.6853387015206474, 0.6745861428124564, 0.666880556515285, 0.6584852763584682, 0.6515711205346244, 0.6457348551068988, 0.640270505632673, 0.6329219170979091, 0.6262473378862653, 0.6242361409323556, 0.6184483425957816, 0.6137522799628121, 0.6085034608840942, 0.6060061284473964, 0.6009149040494647, 0.5963509253093174, 0.5932813371930804, 0.5907906123570034, 0.5875218255179269, 0.5831330333437238, 0.5809849500656128, 0.5777917930058071, 0.5748042208807809, 0.5717757769993373, 0.5698220559528896, 0.5662532704217094, 0.5640920741217477, 0.5619440249034336, 0.5602413415908813, 0.5572528668812343, 0.5596094642366681, 0.5537040403911045, 0.5509053128106254, 0.5503590277263096, 0.5473639283861432, 0.5447407790592739, 0.5435349430356707, 0.5418735061373029, 0.5409378664834159, 0.5381041935511998, 0.535704357283456, 0.5363977296011788, 0.5334883417401995, 0.5306365319660732, 0.5286061082567487, 0.5280905961990356, 0.5266285112925938, 0.5257303374154227, 0.5236939532416207, 0.5226261104856219, 0.5220564774104527, 0.5201493331364223, 0.517583966255188, 0.5162968465260097, 0.516907981463841, 0.514798607145037, 0.512681416102818, 0.5125402893338885], "val_accuracy": [0.20766666531562805, 0.32600000500679016, 0.36766666173934937, 0.4193333387374878, 0.45100000500679016, 0.49033331871032715, 0.5176666378974915, 0.531333327293396, 0.5423333048820496, 0.5546666383743286, 0.5673333406448364, 0.5860000252723694, 0.6163333058357239, 0.6263333559036255, 0.6570000052452087, 0.6650000214576721, 0.6763333082199097, 0.6803333163261414, 0.6880000233650208, 0.6896666884422302, 0.6949999928474426, 0.6983333230018616, 0.7020000219345093, 0.7096666693687439, 0.7099999785423279, 0.7160000205039978, 0.7200000286102295, 0.7210000157356262, 0.7226666808128357, 0.7279999852180481, 0.7286666631698608, 0.7329999804496765, 0.7306666374206543, 0.7319999933242798, 0.737666666507721, 0.7419999837875366, 0.7356666922569275, 0.737333357334137, 0.737333357334137, 0.7426666617393494, 0.7419999837875366, 0.7459999918937683, 0.7446666955947876, 0.7429999709129333, 0.7453333139419556, 0.7493333220481873, 0.7476666569709778, 0.7480000257492065, 0.7506666779518127, 0.7509999871253967, 0.7506666779518127, 0.7523333430290222, 0.7549999952316284, 0.7553333044052124, 0.7536666393280029, 0.7540000081062317, 0.7549999952316284, 0.7580000162124634, 0.7536666393280029, 0.7563333511352539, 0.7613333463668823, 0.7590000033378601, 0.7583333253860474, 0.7616666555404663, 0.7566666603088379, 0.7563333511352539, 0.7633333206176758, 0.762666642665863, 0.7646666765213013, 0.7643333077430725, 0.762666642665863, 0.7643333077430725, 0.765999972820282, 0.768666684627533, 0.7689999938011169, 0.762333333492279, 0.7696666717529297, 0.768666684627533, 0.765666663646698, 0.7733333110809326, 0.765999972820282, 0.7726666927337646, 0.7689999938011169, 0.7720000147819519, 0.7713333368301392]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [53, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 9, 2, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.23600000143051147, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.6540040371519087, 2.3114223391105, 2.3932717950856444, 2.3052896240588585, 2.303390443380152, 2.303052578745832], "accuracy": [0.18438778817653656, 0.12257297337055206, 0.19019944965839386, 0.09879804402589798, 0.09879804402589798, 0.09576013684272766], "val_loss": [1.7619264125823975, 1.9661705834524972, 1.977607318333217, 1.9743287222726005, 1.973832471030099, 1.9736228670392717], "val_accuracy": [0.24966666102409363, 0.1446666717529297, 0.09666666388511658, 0.09666666388511658, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 2, 4, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [99, 9, 76, 58]], "fitness": -0.21799999475479126, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 11, 5, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, grad))), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.647532888863931, 2.273706825417834, 2.3239492191661855, 2.304315990444975, 2.3026458673536374, 2.299119152050953], "accuracy": [0.1850482076406479, 0.1282525360584259, 0.16576409339904785, 0.09708096832036972, 0.10540219396352768, 0.11161009222269058], "val_loss": [1.6794490814208984, 1.9398164067949568, 1.9759606633867537, 1.9735650335039412, 1.972386700766427, 1.9574992997305733], "val_accuracy": [0.24633333086967468, 0.16599999368190765, 0.10233332961797714, 0.1353333294391632, 0.11166666448116302, 0.1913333386182785]}}, {"genotype": [[0], [1, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [53, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [97, 9, 76, 58]], "fitness": -0.14885714650154114, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.1717976829111616, 2.311940694230029, 2.2952186163815496, 2.303857704210968, 2.3023466360709137, 2.2208447916758702, 2.30572803828852, 2.303411632780197, 2.303395857601244, 2.3012854753153404], "accuracy": [0.2246730923652649, 0.10276053100824356, 0.16153743863105774, 0.09272222965955734, 0.1026284471154213, 0.19931316375732422, 0.09998679161071777, 0.09668471664190292, 0.09919429570436478, 0.11768590658903122], "val_loss": [1.9980159487043108, 1.9722801617213659, 1.9741368974958147, 1.9733702795846122, 1.96198947089059, 1.9757578713553292, 1.9736052240644182, 1.9734116281781877, 1.9735522951398576, 1.965177127293178], "val_accuracy": [0.10133333504199982, 0.10066666454076767, 0.10000000149011612, 0.09666666388511658, 0.2460000067949295, 0.10133333504199982, 0.10566666722297668, 0.10566666722297668, 0.09666666388511658, 0.17900000512599945]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 4, 2, 4, 8, 1, 0, 3, 2, 3, 3, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 43, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 2, 9, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.11428571492433548, "mapping_values": [1, 1, 1, 0, 1, 0, 39, 39, 23, 16, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(grad, grad), tf.math.add(beta, grad))), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha))))))))))))), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.square(tf.math.add(beta, grad))))), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))))))), tf.math.square(grad)))), beta), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.1242157772090913, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.3230748772621155, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.5420051302228654, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 0, 1, 0, 0, 1, 1], [9, 6, 4, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302994746762559, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [53, 73, 20, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 6, 4, 8, 6, 7, 4, 5, 6, 7, 1], [2, 3, 2, 1, 0, 0, 2, 2, 2, 2], [62, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 21, 11, 10, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(beta), tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.pow(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(beta, beta), beta)))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [43, 73, 20, 7, 45, 13], [0, 1], [0, 1, 1], [8], [0, 1], [52], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 7, 1, 8, 7, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 15, 8, 7, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.pow(beta, tf.math.square(alpha))))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 0, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 29, 20, 7, 45, 13], [0], [1, 1, 1], [9], [2, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 1, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [3, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 3, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(tf.math.subtract(sigma, tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 0, 1, 0, 0, 1, 1], [4, 5, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 6, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07568352669477463, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [1, 0, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [43, 73, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 3, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 13, 7, 6, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.sqrt(beta), tf.math.divide_no_nan(tf.math.add(sigma, beta), alpha))), tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 0, 0, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [3, 2, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 4, 4, 3, 1, 0, 1, 1, 1, 0, 1, 10, 6, 4, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(sigma, beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [53, 73, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1], [2, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 1, 1, 0, 1, 5, 4, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 1, 8, 6, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0, 0, 1], [0, 1, 1], [2], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.0965714305639267, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 4, 3, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3156226976530947, 2.4100108085574883, 2.667398931863301, 3.1805289637190617, 3.9468683248592202, 5.017969641498429, 6.293503716889154], "accuracy": [0.09074098616838455, 0.09628847241401672, 0.1010434553027153, 0.09919429570436478, 0.09879804402589798, 0.10011887550354004, 0.10328886657953262], "val_loss": [1.9869770322527205, 2.066084589276995, 2.253718989236014, 2.5913193566458568, 3.1030571120125905, 3.791754722595215, 4.648372513907296], "val_accuracy": [0.09433333575725555, 0.10000000149011612, 0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [53, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.06828571110963821, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [2.3024937953490463, 2.3022328907267893, 2.299985745359075, 2.3008052537847803, 2.30118865120318, 2.300670018332777, 2.2998809372633993, 2.3009969504470633, 2.3001229860653196, 2.299117598755957, 2.2991744388348043, 2.2996273697359433, 2.2993139265204277, 2.298849103819535, 2.300118831138979, 2.300885837564001, 2.3010791108561324, 2.30017588223921], "accuracy": [0.09192973375320435, 0.09179764986038208, 0.09391097724437714, 0.09047681838274002, 0.09377889335155487, 0.09430722147226334, 0.09840179979801178, 0.09457138925790787, 0.1018359512090683, 0.10355303436517715, 0.10355303436517715, 0.10077928751707077, 0.10091137140989304, 0.10685510188341141, 0.10011887550354004, 0.09509972482919693, 0.09166556596755981, 0.10077928751707077], "val_loss": [1.9703260149274553, 1.969794477735247, 1.9697070121765137, 1.969512939453125, 1.9694230897086007, 1.9694069453648158, 1.9693786757332938, 1.9692585127694267, 1.9691687992640905, 1.9690757478986467, 1.9692059244428362, 1.9693937982831682, 1.9696528570992606, 1.9699882098606654, 1.9702483585902624, 1.970433030809675, 1.9706427710396903, 1.970830031803676], "val_accuracy": [0.0416666679084301, 0.05233333259820938, 0.057999998331069946, 0.060333333909511566, 0.0663333311676979, 0.07133333384990692, 0.07466666400432587, 0.07599999755620956, 0.0806666687130928, 0.08399999886751175, 0.08433333039283752, 0.08866667002439499, 0.09033333510160446, 0.08833333104848862, 0.08666666597127914, 0.08666666597127914, 0.08533333241939545, 0.0820000022649765]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 2, 1, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.06828571110963821, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [2.3024937953490463, 2.302233399054976, 2.299986312197593, 2.300804588001449, 2.301190050318099, 2.300666621962338, 2.2998761781186885, 2.3009917276914265, 2.3001208716946633, 2.2991143418592848, 2.2991723424455257, 2.299626645442281, 2.2993120642669482, 2.298848636114775, 2.3001137972350416, 2.3008813746868895, 2.301079371727815, 2.3001759047867867], "accuracy": [0.09192973375320435, 0.09179764986038208, 0.09391097724437714, 0.09047681838274002, 0.09377889335155487, 0.09430722147226334, 0.09840179979801178, 0.09457138925790787, 0.1018359512090683, 0.10368511080741882, 0.10381719470024109, 0.10077928751707077, 0.10077928751707077, 0.10685510188341141, 0.10038304328918457, 0.09509972482919693, 0.09206181764602661, 0.10038304328918457], "val_loss": [1.9703264917646135, 1.969795090811593, 1.9697068078177316, 1.9695149149213518, 1.9694228853498186, 1.9694030625479562, 1.9693734986441476, 1.9692543574741908, 1.9691666194370814, 1.9690754754202706, 1.9692059925624303, 1.9693917546953474, 1.9696519034249442, 1.9699863025120325, 1.9702446120125907, 1.970433030809675, 1.9706435203552246, 1.9708267620631628], "val_accuracy": [0.0416666679084301, 0.05233333259820938, 0.05766666680574417, 0.060333333909511566, 0.0663333311676979, 0.0716666653752327, 0.07466666400432587, 0.07566666603088379, 0.0806666687130928, 0.08366666734218597, 0.08500000089406967, 0.08833333104848862, 0.09033333510160446, 0.08833333104848862, 0.0860000029206276, 0.0860000029206276, 0.08566666394472122, 0.0820000022649765]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 0, 2, 1, 2, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [71, 73, 20, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302984163320579, 2.3037445591803256, 2.3015946736661372, 2.3030890318160484, 2.3038830695418695, 2.303287054018306], "accuracy": [0.09179764986038208, 0.08928807079792023, 0.09034473448991776, 0.08347642421722412, 0.0944393053650856, 0.08889182657003403], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 1, 2, 9, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [53, 73, 20, 7, 45, 13], [1], [1, 1, 1], [9], [0, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302984163320579, 2.3037445591803256, 2.3015946736661372, 2.3030890318160484, 2.3038830695418695, 2.303287054018306], "accuracy": [0.09179764986038208, 0.08928807079792023, 0.09034473448991776, 0.08347642421722412, 0.0944393053650856, 0.08889182657003403], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]