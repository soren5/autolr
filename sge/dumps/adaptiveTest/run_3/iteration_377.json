[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.819428563117981, "mapping_values": [1, 9, 9, 5, 4, 0, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1218219652088988, 1.7242522872812194, 1.322547348309911, 1.014278753542897, 0.8407563082829537, 0.7773380043909393, 0.7456358933823535, 0.6564263050440611, 0.6418824157364034, 0.6220581288965009, 0.5941604140286338, 0.5711544653475324, 0.5539257524823153, 0.5445448891786836, 0.5219930692780933, 0.5265410319925252, 0.5035074485244216, 0.4893284768098381, 0.4854373835600945, 0.47824126381238596, 0.4849766052638409, 0.44105392549614536, 0.44031983077045855, 0.4665537857699152, 0.42158178393284346, 0.4268627389625803, 0.4252168048547637, 0.4048669891838605, 0.3968236942403683, 0.39432127820407836, 0.385187183841502, 0.38836087497659033, 0.366972239388136, 0.3813787128600651], "accuracy": [0.3035266101360321, 0.3975696861743927, 0.5066701769828796, 0.6127327680587769, 0.6779817938804626, 0.7062475085258484, 0.7211728692054749, 0.7520803213119507, 0.7602694630622864, 0.7609298825263977, 0.774270236492157, 0.7781006693840027, 0.7931581139564514, 0.7944789528846741, 0.8033285140991211, 0.8012151718139648, 0.8082155585289001, 0.8190463781356812, 0.8156121969223022, 0.8186501264572144, 0.8158763647079468, 0.8366134166717529, 0.8364813327789307, 0.8236692547798157, 0.839519202709198, 0.8389908671379089, 0.839519202709198, 0.8453308939933777, 0.8518029451370239, 0.8491612672805786, 0.8543124794960022, 0.852859616279602, 0.8613129258155823, 0.8524633646011353], "val_loss": [1.7138182776314872, 0.9110916682652065, 0.7627781288964408, 0.7780127695628575, 0.6564912625721523, 0.5472355229513985, 0.5438514947891235, 0.5336598668779645, 0.5220574821744647, 0.46942717688424246, 0.4719172205243792, 0.4727825607572283, 0.4488495247704642, 0.4391247715268816, 0.44530470030648367, 0.42541247606277466, 0.4070512482098171, 0.46614318234579905, 0.43536390577043804, 0.4244568347930908, 0.3943334477288382, 0.4076506495475769, 0.4009108287947519, 0.36999400172914776, 0.37076856408800396, 0.381540196282523, 0.3674760546003069, 0.3659183979034424, 0.35840312923703876, 0.38419791630336214, 0.36639503070286344, 0.35538014343806673, 0.35596299171447754, 0.3451951401574271], "val_accuracy": [0.22499999403953552, 0.5713333487510681, 0.6830000281333923, 0.6236666440963745, 0.7053333520889282, 0.7426666617393494, 0.7506666779518127, 0.7540000081062317, 0.7673333287239075, 0.7846666574478149, 0.7853333353996277, 0.8003333210945129, 0.7986666560173035, 0.800000011920929, 0.8116666674613953, 0.8076666593551636, 0.8323333263397217, 0.7853333353996277, 0.8159999847412109, 0.8136666417121887, 0.8366666436195374, 0.8146666884422302, 0.8256666660308838, 0.8453333377838135, 0.8410000205039978, 0.8416666388511658, 0.8410000205039978, 0.8486666679382324, 0.8543333411216736, 0.8386666774749756, 0.8423333168029785, 0.8476666808128357, 0.8503333330154419, 0.8516666889190674]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [8, 8, 2, 2, 2, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 7, 3, 4, 6, 6, 1, 4, 2, 9, 3, 8, 6, 5, 6, 4, 2, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 2, 3, 3, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [67, 13, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7994285821914673, "mapping_values": [1, 9, 9, 5, 4, 0, 21, 21, 11, 10, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), grad)))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.025710204179497, 1.3961897482882717, 1.038963404896552, 0.9155086462271921, 0.8280521512913304, 0.8006894317883794, 0.7452472543845544, 0.7166380264645381, 0.70444677947078, 0.6906718396003677, 0.6680076954591827, 0.6599090282297594, 0.6453667765343273, 0.6185234786260869, 0.6236612072096147, 0.6057021860055416, 0.5998782707070001, 0.5816054107443437, 0.5628150176882287, 0.5786441363332262, 0.5426972668562362, 0.5502057743976302, 0.5380489798805198, 0.5254397445414061, 0.5203522240418044, 0.5421447768077213, 0.5042180241280071, 0.49986428171179753, 0.49752700205224615], "accuracy": [0.33562275767326355, 0.5136705636978149, 0.6186765432357788, 0.6633205413818359, 0.6935675740242004, 0.6933034062385559, 0.7187954187393188, 0.7257958054542542, 0.7312111854553223, 0.7445515990257263, 0.7425703406333923, 0.748249888420105, 0.7563069462776184, 0.7684586048126221, 0.761590301990509, 0.7771760821342468, 0.7693831920623779, 0.7730814814567566, 0.7880068421363831, 0.7794214487075806, 0.7935543656349182, 0.7923656105995178, 0.7976489067077637, 0.8005547523498535, 0.8050455451011658, 0.7935543656349182, 0.8109893202781677, 0.8124422430992126, 0.8149517774581909], "val_loss": [1.3370467935289656, 0.9079247883387974, 0.774276682308742, 0.6649093117032733, 0.5875507082257952, 0.6430607523236956, 0.5832364729472569, 0.5701460497719901, 0.5558264085224697, 0.5227904490062169, 0.5112746613366264, 0.5085275513785226, 0.549330643245152, 0.49572302613939556, 0.490001916885376, 0.5222743919917515, 0.4851310934339251, 0.4585334743772234, 0.4548857552664621, 0.4522796869277954, 0.4509495326450893, 0.47675624915531706, 0.4446709666933332, 0.4295346907206944, 0.44907781055995394, 0.4322193775858198, 0.4345627171652658, 0.44603162152426584, 0.4494260549545288], "val_accuracy": [0.46033334732055664, 0.5836666822433472, 0.6589999794960022, 0.6963333487510681, 0.7379999756813049, 0.6903333067893982, 0.715666651725769, 0.7293333411216736, 0.7426666617393494, 0.753333330154419, 0.7746666669845581, 0.7666666507720947, 0.7673333287239075, 0.781000018119812, 0.7863333225250244, 0.7473333477973938, 0.7676666378974915, 0.7979999780654907, 0.7960000038146973, 0.8006666898727417, 0.8100000023841858, 0.7739999890327454, 0.8029999732971191, 0.8153333067893982, 0.7960000038146973, 0.8006666898727417, 0.8076666593551636, 0.8016666769981384, 0.7896666526794434]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 0, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7979999780654907, "mapping_values": [1, 9, 9, 5, 4, 1, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.217234658054971, 1.8733361797436054, 1.992856623962366, 1.8425756490871403, 1.2126366409407063, 1.0906299936804458, 0.8650010978666988, 0.7807942373861868, 0.7446430265360252, 0.7046490357442067, 0.6691828642255516, 0.6538592289152587, 0.6154754560274959, 0.6049224775165946, 0.5983149752703798, 0.5665545660932034, 0.5821221216936405, 0.5475034152968622, 0.5280956840077411, 0.5347489101019801, 0.5091227482747975, 0.5033708439920682, 0.4939206275193919, 0.4743512437060493, 0.4794921888659234], "accuracy": [0.2806762754917145, 0.34143441915512085, 0.3535860478878021, 0.3747193217277527, 0.5550125241279602, 0.6082419753074646, 0.6737551093101501, 0.703209638595581, 0.7181349992752075, 0.739400327205658, 0.7510236501693726, 0.7578919529914856, 0.7651565074920654, 0.7668735980987549, 0.7670056819915771, 0.7910447716712952, 0.7804781198501587, 0.7886672616004944, 0.7993659973144531, 0.8045172095298767, 0.8063663840293884, 0.8100647330284119, 0.8187822103500366, 0.8224804997444153, 0.821820080280304], "val_loss": [1.870501926967076, 1.2158832209450858, 1.1435182435171944, 0.9821880544934954, 0.7688811676842826, 0.6946002755846296, 0.6742224182401385, 0.5936748811176845, 0.5458799260003226, 0.5025350196020943, 0.5187358685902187, 0.47715738841465544, 0.49364984035491943, 0.47697036606924875, 0.4371719019753592, 0.5388381821768624, 0.4543424504143851, 0.4273485967091152, 0.4616138594491141, 0.41522198063986643, 0.40583300590515137, 0.42859515122004915, 0.4157661369868687, 0.3985955970627921, 0.4258995056152344], "val_accuracy": [0.20333333313465118, 0.503000020980835, 0.5006666779518127, 0.6293333172798157, 0.6486666798591614, 0.6809999942779541, 0.6813333630561829, 0.7206666469573975, 0.7526666522026062, 0.765666663646698, 0.768666684627533, 0.7820000052452087, 0.7746666669845581, 0.781333327293396, 0.8096666932106018, 0.7486666440963745, 0.7829999923706055, 0.8163333535194397, 0.7919999957084656, 0.8259999752044678, 0.8203333616256714, 0.8040000200271606, 0.8130000233650208, 0.8230000138282776, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [2, 9, 6, 5, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 0, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 0, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7965714335441589, "mapping_values": [1, 3, 3, 2, 1, 1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.217418757443572, 1.9473632652808992, 1.7394313048126044, 1.5516270665507732, 1.098962753511234, 0.9680509833832301, 0.8702960358225297, 0.8489845754085924, 0.7538257547341884, 0.7327665054424958, 0.6888797355365791, 0.6569613960157407, 0.6594069647105646, 0.6134531195483991, 0.6187337217644583, 0.5784360868992854, 0.5678189442559571, 0.5746198866140919, 0.5224909479859609, 0.5461834779804126, 0.5128279898412601, 0.5163012771101959, 0.4971766331491532], "accuracy": [0.2813366651535034, 0.32241448760032654, 0.40945714712142944, 0.47127196192741394, 0.5844670534133911, 0.6342623233795166, 0.6744155287742615, 0.6779817938804626, 0.713379979133606, 0.724210798740387, 0.7363624572753906, 0.7486461400985718, 0.7449478507041931, 0.7663452625274658, 0.7626469135284424, 0.7843085527420044, 0.785101056098938, 0.7781006693840027, 0.8063663840293884, 0.7915731072425842, 0.8059701323509216, 0.8055738806724548, 0.8115176558494568], "val_loss": [1.867295742034912, 1.2468209947858537, 1.017479521887643, 0.876255886895316, 0.717015300478254, 0.7398568221500942, 0.6093308074133736, 0.6367870228631156, 0.6029271398271833, 0.5323404925210136, 0.5552331038883754, 0.5035903113228934, 0.5296330792563302, 0.49848757471357075, 0.4591963461467198, 0.4688974789210728, 0.46093009199414936, 0.44637610231127056, 0.47116092273167204, 0.42837717703410555, 0.4324172650064741, 0.435995306287493, 0.45571751253945486], "val_accuracy": [0.20333333313465118, 0.49533334374427795, 0.5379999876022339, 0.5846666693687439, 0.6746666431427002, 0.6893333196640015, 0.7213333249092102, 0.7136666774749756, 0.718666672706604, 0.7519999742507935, 0.7506666779518127, 0.765999972820282, 0.7563333511352539, 0.7736666798591614, 0.7956666946411133, 0.7996666431427002, 0.784333348274231, 0.8036666512489319, 0.7820000052452087, 0.8036666512489319, 0.7996666431427002, 0.7940000295639038, 0.7950000166893005]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 3, 4, 6, 2, 1, 4, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.795714259147644, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 16, 11, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.multiply(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, alpha))))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.negative(grad))), beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.025702601646813, 1.3946685323373846, 1.0438754719324934, 0.9139072210435083, 0.8242282150302187, 0.8235192572467472, 0.7445042342982823, 0.7125533559948714, 0.7073567199070913, 0.6858895961335464, 0.6632746378538741, 0.6555501988157384, 0.6443484542297728, 0.6281059441502226, 0.6078086470993928, 0.6245316792362637, 0.5957990289994077, 0.5797862796546635, 0.5564213738764565, 0.5599008733097903, 0.5469496091437803, 0.5538076986852118, 0.5403798467227103, 0.5269250342906064, 0.5186186949645586, 0.5340135832031909], "accuracy": [0.3354906737804413, 0.5136705636978149, 0.6178840398788452, 0.6613393425941467, 0.6922467350959778, 0.6863030195236206, 0.722229540348053, 0.7320036888122559, 0.7322678565979004, 0.739928662776947, 0.7471932172775269, 0.7449478507041931, 0.7567031979560852, 0.7638356685638428, 0.7726852297782898, 0.7576277852058411, 0.7721568942070007, 0.7732135653495789, 0.7928939461708069, 0.7880068421363831, 0.7946110367774963, 0.7918372750282288, 0.7965922355651855, 0.7997622489929199, 0.8035926818847656, 0.7955356240272522], "val_loss": [1.3373761858258928, 0.9088449478149414, 0.7986713988440377, 0.6541018315723964, 0.5925862448556083, 0.6138053280966622, 0.5625999995640346, 0.5520447833197457, 0.5214863334383283, 0.5395883662360055, 0.5087314673832485, 0.5069262640816825, 0.525180629321507, 0.502956748008728, 0.5111718348094395, 0.5182200499943325, 0.4837007863180978, 0.45614627429417204, 0.4569669621331351, 0.4620793717248099, 0.45300919669015066, 0.4818728821618216, 0.4703685556139265, 0.43355105604444233, 0.46093554156167166, 0.43213772773742676], "val_accuracy": [0.46133333444595337, 0.57833331823349, 0.6416666507720947, 0.7123333215713501, 0.7310000061988831, 0.7176666855812073, 0.7473333477973938, 0.7486666440963745, 0.7636666893959045, 0.7450000047683716, 0.7683333158493042, 0.7689999938011169, 0.7733333110809326, 0.7706666588783264, 0.7633333206176758, 0.7516666650772095, 0.7720000147819519, 0.7996666431427002, 0.7933333516120911, 0.7903333306312561, 0.8069999814033508, 0.765999972820282, 0.7756666541099548, 0.8050000071525574, 0.7900000214576721, 0.8009999990463257]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7931428551673889, "mapping_values": [1, 9, 9, 5, 4, 0, 23, 23, 13, 10, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, grad)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.217213361113063, 1.8812277333422454, 2.232956566342651, 2.046347629660235, 1.79666292593385, 1.2897471771768023, 0.9356403072291928, 0.8680430699522155, 0.763090946765356, 0.7515686361497782, 0.7115832952428975, 0.6746390630083786, 0.6477507774100217, 0.6242827733887847, 0.6309681858652382, 0.5727088326287386, 0.5879516622267852, 0.5798842831767073, 0.5363708364728923, 0.5399841403980076, 0.5344727971471611, 0.5482375883722287, 0.5207243155038053], "accuracy": [0.28080835938453674, 0.3403777480125427, 0.25742965936660767, 0.29718664288520813, 0.3703605830669403, 0.5359926223754883, 0.6613393425941467, 0.6775855422019958, 0.7092854380607605, 0.7168141603469849, 0.7257958054542542, 0.7430986762046814, 0.7500990629196167, 0.7663452625274658, 0.7543256878852844, 0.7835160493850708, 0.7788931727409363, 0.7769119143486023, 0.8045172095298767, 0.7981772422790527, 0.7981772422790527, 0.7979130744934082, 0.8042530417442322], "val_loss": [1.8704308782305037, 1.1285395962851388, 1.695173672267369, 1.8189383915492467, 1.0910937104906355, 0.7576173884528024, 0.7240987845829555, 0.6011357648032052, 0.6148280586515155, 0.6026269197463989, 0.5581224645887103, 0.5014557668140956, 0.5310711179460798, 0.5092604330607823, 0.4755415746143886, 0.5032680204936436, 0.4403672388621739, 0.44103661605290007, 0.45825631277901785, 0.4634833676474435, 0.4418957233428955, 0.45908662251063753, 0.45805748871394564], "val_accuracy": [0.20466665923595428, 0.5636666417121887, 0.47433334589004517, 0.23999999463558197, 0.637333333492279, 0.687333345413208, 0.6683333516120911, 0.7173333168029785, 0.7073333263397217, 0.7110000252723694, 0.7559999823570251, 0.778333306312561, 0.7580000162124634, 0.7609999775886536, 0.7796666622161865, 0.7683333158493042, 0.8086666464805603, 0.8100000023841858, 0.7946666479110718, 0.7963333129882812, 0.7926666736602783, 0.7823333144187927, 0.7863333225250244]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 8, 6, 5, 1, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 52, 61], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 6, 7, 0, 9, 6, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.4708571434020996, "mapping_values": [1, 9, 9, 5, 4, 2, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), alpha)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [3.202267846064781, 2.188411227086311, 2.2421709110928627, 2.0595414431623227, 2.2937739348887076, 2.1683430649333264], "accuracy": [0.22572976350784302, 0.28556331992149353, 0.17474573850631714, 0.3082816004753113, 0.12230881303548813, 0.23352265357971191], "val_loss": [1.6404361384255546, 1.9854792186192103, 1.6358180046081543, 1.978203364780971, 1.7507168906075614, 1.9833333151681083], "val_accuracy": [0.43833333253860474, 0.09799999743700027, 0.4046666622161865, 0.09866666793823242, 0.37966665625572205, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 6, 5, 5, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 88, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 7, 3, 4, 6, 6, 1, 6, 2, 9, 3, 8, 6, 5, 6, 4, 2, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 3, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [51, 13, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [62, 9, 76, 58]], "fitness": -0.11857143044471741, "mapping_values": [1, 7, 7, 5, 2, 1, 26, 26, 14, 12, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.add(beta, grad)))))))), tf.math.add(beta, grad)), tf.math.divide_no_nan(beta, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [3.38354462711897, 2.7298750224886255, 2.3045535290072765, 2.303312608830728, 2.3030867228938163, 2.3031300854421546, 2.3030083494699074, 2.3029558897301854, 2.3029864139529175, 2.3030777199235906, 2.302973567187715, 2.3030111006836393], "accuracy": [0.20116232335567474, 0.10289261490106583, 0.09945846349000931, 0.0948355570435524, 0.09655263274908066, 0.09219389408826828, 0.09998679161071777, 0.09747721254825592, 0.09430722147226334, 0.09272222965955734, 0.09628847241401672, 0.09457138925790787], "val_loss": [4.327675819396973, 1.9755367551531111, 1.973942688533238, 1.9737204824175154, 1.973724433353969, 1.9736411230904716, 1.9735713005065918, 1.9736225945608956, 1.9736240931919642, 1.973576477595738, 1.973614011492048, 1.9735657828194755], "val_accuracy": [0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10566666722297668, 0.09833333641290665, 0.10000000149011612, 0.10566666722297668, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 0, 6, 5, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [15, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 6, 7, 0, 9, 6, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3027051237706164, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 8, 4, 4, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 0, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 9, 7, 3, 4, 6, 5, 1, 4, 2, 1, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 97, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [64, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 1, 16, 16, 9, 7, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027051237706164, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 9, 5, 3, 4, 6, 2, 1, 4, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [7, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.303003253560135, 2.302997338568703, 2.302965684006983, 2.302939130645528, 2.302972736958232, 2.303120589920747, 2.3029868216042853, 2.302965639478668, 2.3030195171334533, 2.303011902697161, 2.3029634710379154, 2.3030264520563266], "accuracy": [0.09576013684272766, 0.09311848133802414, 0.09734513610601425, 0.09377889335155487, 0.09457138925790787, 0.09615638852119446, 0.09998679161071777, 0.09747721254825592, 0.09430722147226334, 0.09311848133802414, 0.09166556596755981, 0.09457138925790787], "val_loss": [1.9736579486301966, 1.973630155835833, 1.9736366271972656, 1.9736880574907576, 1.9737546784537179, 1.9736645562308175, 1.9735772269112724, 1.9736221177237374, 1.973616600036621, 1.9735923494611467, 1.9736315863473075, 1.9735703468322754], "val_accuracy": [0.09866666793823242, 0.09799999743700027, 0.10133333504199982, 0.10133333504199982, 0.10000000149011612, 0.10133333504199982, 0.10566666722297668, 0.09833333641290665, 0.10000000149011612, 0.10566666722297668, 0.09866666793823242, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 6, 5, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 0, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 8, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [8, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [83, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3027051237706164, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 0, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 8, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [2, 8, 6, 5, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 7, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 0, 1, 3, 2, 3, 3, 0, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 8, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 23, 23, 12, 11, 3, 1, 1, 1, 0, 1, 2, 1, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [95845103.28510019, 1838053682.415533, 8535117002.338396, 23200526038.71404, 50548142825.5142, 92693635206.17091], "accuracy": [0.10117553919553757, 0.09853387624025345, 0.09655263274908066, 0.10460969805717468, 0.10196803510189056, 0.10434553027153015], "val_loss": [359688566.85714287, 2875481526.857143, 9702472265.142857, 22995771977.142857, 44910346240.0, 77601350802.28572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 9, 7, 3, 4, 6, 0, 1, 4, 2, 2, 4, 2, 9, 8, 3, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 26, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 0, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [32794356828.22842, 1.4046772528004472e+34, 2.397049177875451, 2.4663073314950923, 2.6070772686402686, 2.9101151475942904], "accuracy": [0.05692775174975395, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [8.963703683356738e+34, 2.0403977121625627, 2.0853018079485213, 2.172964300428118, 2.358900955745152, 2.754234177725656], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [8, 8, 2, 3, 2, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 7, 3, 8, 6, 6, 1, 4, 3, 9, 3, 8, 6, 5, 6, 4, 2, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 0, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [69, 48, 30, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07911768555641174, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [2, 0, 6, 5, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [61, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 9, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 3, 2, 1, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(beta, grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301826279224138, 2.302582340249296, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644460950579, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [6, 8, 2, 0, 2, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 4, 3, 4, 6, 1, 1, 8, 2, 9, 3, 8, 6, 5, 6, 4, 2, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 3, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [69, 68, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [97, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 0, 22, 22, 12, 10, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))), grad)), tf.math.add(beta, tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07924976944923401, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [4, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [70, 80, 61], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 1, 7, 3, 4, 6, 6, 1, 4, 2, 9, 3, 8, 6, 5, 6, 4, 2, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 2, 0, 1, 3, 3, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 87, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [12, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 2, 71, 71, 42, 29, 6, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 70, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), beta), grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha))), tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad), tf.math.add(beta, beta)), grad)))))))), tf.math.add(beta, grad))), tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad))), tf.math.add(beta, tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(alpha, tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302540898055385, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [4, 8, 4, 2, 2, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 1, 0, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 4, 6, 4, 1, 4, 2, 9, 3, 8, 6, 5, 6, 4, 2, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 0, 3, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [69, 13, 41, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 12, 11, 3, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(grad, alpha), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3027051237706164, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]