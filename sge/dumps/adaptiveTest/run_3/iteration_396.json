[{"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 5, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.803428590297699, "mapping_values": [1, 4, 4, 3, 1, 1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha)))))), tf.math.add(grad, tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.4174917967973557, 2.0786300041042285, 1.842496516383036, 1.408673651592213, 1.178294142696127, 1.0942208211278053, 0.9235582521972309, 0.8771529189898841, 0.8698012114531644, 0.8008529091586747, 0.7767375044110366, 0.7724943354286932, 0.7089671233011794, 0.6881920342920258, 0.694663496758125, 0.6333690000846323, 0.6227876387803215, 0.6104667046523254, 0.5951593391899388, 0.5880501991045112, 0.5548127182974493, 0.5646106729638449, 0.5372513635299304, 0.5537783374537283, 0.5405366982467076, 0.5303830297875635, 0.5439740957412045, 0.49526980505123774, 0.5123391902016894, 0.49575090761418356, 0.47663982851614556, 0.4927534981292583, 0.46729157977431063, 0.46703930019844225, 0.4512310884317245, 0.4630313703900772, 0.4477395966910825, 0.45914818116419065, 0.4424753253486068, 0.4195628570386085, 0.43308307563687015, 0.4178477666751505, 0.42233029211422457, 0.423738055390736, 0.3952522170526351, 0.3890949163564743, 0.39664301494675985, 0.4029313287502267, 0.38089097639305436, 0.3905005590900879, 0.3680003930383654, 0.37607583851153586, 0.39545923247470866, 0.34901299846328215, 0.36051082129271245, 0.35421892616018535, 0.34907552922689966, 0.35464278881450007, 0.3218144536167954], "accuracy": [0.22705058753490448, 0.2957337200641632, 0.4127592146396637, 0.5038964748382568, 0.5815612077713013, 0.5888257622718811, 0.6601505875587463, 0.6716417670249939, 0.6761326193809509, 0.6944921612739563, 0.7020208835601807, 0.7104741930961609, 0.7308149337768555, 0.7441553473472595, 0.7357020378112793, 0.7580240368843079, 0.7593448758125305, 0.7627789974212646, 0.7721568942070007, 0.7777044177055359, 0.7907806038856506, 0.7898560166358948, 0.7975168228149414, 0.7922335267066956, 0.7926297783851624, 0.7984414100646973, 0.7930260300636292, 0.8156121969223022, 0.8125742673873901, 0.8150838613510132, 0.8216879963874817, 0.8165367841720581, 0.8234050869941711, 0.8232730031013489, 0.829216718673706, 0.8276317715644836, 0.8296129703521729, 0.8297450542449951, 0.8334434032440186, 0.8400475382804871, 0.8358209133148193, 0.8429533839225769, 0.8400475382804871, 0.8425571322441101, 0.850350022315979, 0.8539162874221802, 0.8504821062088013, 0.8499537706375122, 0.8577466607093811, 0.8508783578872681, 0.8617091774940491, 0.8570862412452698, 0.8511425256729126, 0.8681812286376953, 0.863029956817627, 0.8689737319946289, 0.8663320541381836, 0.8627657890319824, 0.8747853636741638], "val_loss": [1.9568039349147253, 1.614387001310076, 1.2663462843213762, 1.0405080659048898, 1.0610925129481725, 1.006312676838466, 0.6715355941227504, 0.7530646664755685, 0.6421663931437901, 0.6453722715377808, 0.5910154751368931, 0.5801211425236293, 0.5330477271761213, 0.5283684730529785, 0.5189449446541923, 0.5110459157398769, 0.48258464676993235, 0.5172313792364938, 0.46184684549059185, 0.5454474687576294, 0.48980060645512175, 0.4509966884340559, 0.4498881442206247, 0.462844831602914, 0.5003945486886161, 0.4922715595790318, 0.42104662316186087, 0.4089258313179016, 0.41602217299597605, 0.4244439261300223, 0.4582264593669346, 0.4084855999265398, 0.42493163687842234, 0.4110231569835118, 0.39571437665394377, 0.4366050362586975, 0.4432811992509024, 0.4107674615723746, 0.3992400084223066, 0.3845074602535793, 0.3860271828515189, 0.39941948652267456, 0.383644095488957, 0.43965744972229004, 0.39336689029421124, 0.3688280326979501, 0.40277089391435894, 0.37642306089401245, 0.3932321241923741, 0.36756259202957153, 0.38232082980019705, 0.37928238936832975, 0.3587716392108372, 0.35415856327329365, 0.3700863378388541, 0.367919385433197, 0.375221277986254, 0.35882712262017386, 0.374973509992872], "val_accuracy": [0.21466666460037231, 0.4819999933242798, 0.46566668152809143, 0.5743333101272583, 0.49966666102409363, 0.6000000238418579, 0.7143333554267883, 0.6613333225250244, 0.699999988079071, 0.7110000252723694, 0.7213333249092102, 0.7473333477973938, 0.753000020980835, 0.7646666765213013, 0.7743333578109741, 0.7649999856948853, 0.7893333435058594, 0.753333330154419, 0.7956666946411133, 0.7319999933242798, 0.7923333048820496, 0.8090000152587891, 0.7996666431427002, 0.7996666431427002, 0.7736666798591614, 0.7829999923706055, 0.8173333406448364, 0.8246666789054871, 0.8233333230018616, 0.8073333501815796, 0.7973333597183228, 0.8323333263397217, 0.8153333067893982, 0.8196666836738586, 0.8373333215713501, 0.8073333501815796, 0.8146666884422302, 0.8169999718666077, 0.8273333311080933, 0.8393333554267883, 0.8366666436195374, 0.8339999914169312, 0.8473333120346069, 0.8226666450500488, 0.8413333296775818, 0.8386666774749756, 0.82833331823349, 0.8516666889190674, 0.8493333458900452, 0.8569999933242798, 0.8353333473205566, 0.8426666855812073, 0.856333315372467, 0.8573333621025085, 0.8460000157356262, 0.8513333201408386, 0.8443333506584167, 0.8539999723434448, 0.8516666889190674]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8031428456306458, "mapping_values": [1, 7, 7, 4, 3, 3, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(beta, tf.math.negative(alpha)))))), tf.math.add(beta, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.417515980081, 2.080056870980364, 1.6850376962245557, 1.3252964372789824, 1.3367550030612454, 1.0926044376503286, 0.9598139867397143, 0.8926445572934587, 0.844668537272029, 0.7760215139250477, 0.7787563253261505, 0.728420045877791, 0.7077676379181501, 0.6926321339345863, 0.6666503951786028, 0.6459524160630636, 0.6147638149249508, 0.611485580742367, 0.598203560978808, 0.6040411405575321, 0.564326102368946, 0.5560595903414242, 0.544565875008909, 0.5572877438108383, 0.5263422558714197, 0.5215615532330833, 0.536178318764697, 0.4971028735703481, 0.4832724243374926, 0.5107764783489422, 0.47473327333523124, 0.49099273641725744, 0.4663412272379052, 0.4539786684372957, 0.4474844417166102, 0.44009313515195947, 0.448815556305306, 0.45163678642686617, 0.4337735471314821, 0.4035887897463365, 0.41444858461087014, 0.39844201647877897, 0.41996355628167414, 0.4050359991106611, 0.3876455717665597, 0.3986675394225382, 0.3898285745299015, 0.3976270717250956, 0.36888404543830294, 0.3817853757718204, 0.3547984696949289, 0.36681002970888726, 0.40437626556839373, 0.34792035106796365, 0.35621703840549107, 0.34254419854792306, 0.34942507522217336, 0.3586752363372992, 0.3360718864971668, 0.3167348493674428, 0.3276726752303107, 0.33216103805511255, 0.32953628194629714, 0.31186777110018543, 0.32294603985818054, 0.30064962572267956, 0.3061429921425943, 0.30111816434528943, 0.314777367268697], "accuracy": [0.22718267142772675, 0.2953374683856964, 0.44366663694381714, 0.548540472984314, 0.5390304923057556, 0.5980715751647949, 0.6439043879508972, 0.6675472259521484, 0.6773213744163513, 0.7059833407402039, 0.705058753490448, 0.7243428826332092, 0.7308149337768555, 0.733060359954834, 0.7498348951339722, 0.7555144429206848, 0.7648923397064209, 0.7617223858833313, 0.7729493975639343, 0.7744023203849792, 0.7877426743507385, 0.7922335267066956, 0.7965922355651855, 0.7895918488502502, 0.8004226684570312, 0.8033285140991211, 0.7988376617431641, 0.8162726163864136, 0.8232730031013489, 0.8095363974571228, 0.8231409192085266, 0.8145555257797241, 0.8264430165290833, 0.8325188159942627, 0.8345000743865967, 0.8333113193511963, 0.8298771381378174, 0.829216718673706, 0.834632158279419, 0.8519350290298462, 0.8482366800308228, 0.8455950617790222, 0.8337075710296631, 0.8438779711723328, 0.8537842035293579, 0.8507462739944458, 0.8524633646011353, 0.8519350290298462, 0.8660678863525391, 0.8570862412452698, 0.8693699836730957, 0.8626337051391602, 0.8498216867446899, 0.8697662353515625, 0.8654074668884277, 0.8725399374961853, 0.86553955078125, 0.8597279191017151, 0.8725399374961853, 0.8815215826034546, 0.8751816153526306, 0.8721436858177185, 0.8747853636741638, 0.886672854423523, 0.8772949576377869, 0.8885219693183899, 0.8837670087814331, 0.8858803510665894, 0.8766345381736755], "val_loss": [1.9569063186645508, 1.574472188949585, 1.0117321695600237, 1.724386215209961, 0.824014595576695, 0.9595535482679095, 0.7306801080703735, 0.71727340562003, 0.6086162328720093, 0.60200754233769, 0.595189026423863, 0.5406906775065831, 0.5481325217655727, 0.5363474914005825, 0.5091371876852853, 0.5165060588291713, 0.48383072444370817, 0.5408018486840385, 0.45325212819235666, 0.519904341016497, 0.5032704046794346, 0.4617511204310826, 0.47503461156572613, 0.45482780252184185, 0.44314398084368023, 0.4686555692127773, 0.4033581955092294, 0.4054539459092276, 0.4484211206436157, 0.4328687787055969, 0.42761932952063425, 0.407272960458483, 0.3972115090915135, 0.40486055612564087, 0.3919326066970825, 0.3837707298142569, 0.4418287788118635, 0.3867782439504351, 0.37593463488987516, 0.3807863252503531, 0.38465051140104023, 0.38200102533612934, 0.41717534405844553, 0.3821208817618234, 0.40671139104025705, 0.37785046441214426, 0.4213385581970215, 0.3711489864758083, 0.38823828526905607, 0.36663321937833515, 0.41160041093826294, 0.3633001617022923, 0.3541761892182486, 0.36274685178484234, 0.3692573138645717, 0.38255129541669575, 0.355182945728302, 0.3542688659259251, 0.35639576401029316, 0.36482204709734234, 0.3662308028766087, 0.36348298617771696, 0.36193679911749704, 0.3562673330307007, 0.37183726685387747, 0.3558469670159476, 0.35614828552518574, 0.3861220053264073, 0.38988929986953735], "val_accuracy": [0.21166667342185974, 0.4896666705608368, 0.6206666827201843, 0.3316666781902313, 0.6546666622161865, 0.6356666684150696, 0.6826666593551636, 0.6733333468437195, 0.7113333344459534, 0.7289999723434448, 0.7120000123977661, 0.7553333044052124, 0.7473333477973938, 0.7683333158493042, 0.7746666669845581, 0.765666663646698, 0.7829999923706055, 0.7383333444595337, 0.796999990940094, 0.7566666603088379, 0.7903333306312561, 0.8013333082199097, 0.7943333387374878, 0.8019999861717224, 0.8050000071525574, 0.7889999747276306, 0.8320000171661377, 0.8273333311080933, 0.8109999895095825, 0.8096666932106018, 0.8246666789054871, 0.8360000252723694, 0.8333333134651184, 0.8240000009536743, 0.8326666951179504, 0.8389999866485596, 0.8116666674613953, 0.8339999914169312, 0.8349999785423279, 0.8423333168029785, 0.8363333344459534, 0.8399999737739563, 0.8153333067893982, 0.8463333249092102, 0.8326666951179504, 0.8349999785423279, 0.8193333148956299, 0.8483333587646484, 0.8426666855812073, 0.8526666760444641, 0.8233333230018616, 0.8546666502952576, 0.8516666889190674, 0.8483333587646484, 0.8496666550636292, 0.8446666598320007, 0.8550000190734863, 0.8516666889190674, 0.8579999804496765, 0.8539999723434448, 0.8576666712760925, 0.8543333411216736, 0.8513333201408386, 0.862333357334137, 0.8606666922569275, 0.8566666841506958, 0.8519999980926514, 0.846666693687439, 0.8496666550636292]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 8, 3, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 3, 5, 1, 4, 6, 2, 3, 2, 2, 2, 3, 4, 9, 8, 0, 3, 1, 5, 8, 2, 8, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 2, 3, 1, 3, 3, 2, 3, 1, 3, 2, 3, 3, 0, 3, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8022857308387756, "mapping_values": [1, 8, 8, 5, 3, 3, 38, 38, 23, 15, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.pow(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)))), tf.math.sqrt(beta)))))))))))), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.sqrt(grad))), tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.4174919451201013, 2.0785395921796086, 1.7422051672701822, 1.4162358095176373, 1.2110876133413269, 1.0109972031266699, 0.9405779174101304, 0.9035973220280274, 0.8754400548650257, 0.799851942079698, 0.7664235106092072, 0.7530705461160713, 0.7230311179630288, 0.6789831105964594, 0.6752579750527858, 0.6502630357902284, 0.6262166012531699, 0.6258113895267496, 0.5991810019919114, 0.6181801010305541, 0.5927477747993132, 0.5664883522766299, 0.5754573338689302, 0.5345161899190144, 0.5411575602667915, 0.5451109367016206, 0.5523218653142539, 0.5170430672828469, 0.4933953748096045, 0.5048877000690625, 0.4926932316296577, 0.4879639478187047, 0.47440653122994, 0.4702436961730584, 0.4672773163851777, 0.4591968126458231, 0.45930041084829937, 0.45766057087256845, 0.4429909349267257, 0.4278389910673185], "accuracy": [0.22705058753490448, 0.29520538449287415, 0.433760404586792, 0.527010977268219, 0.5809007883071899, 0.6299035549163818, 0.6532822847366333, 0.6664905548095703, 0.670320987701416, 0.7013604640960693, 0.7020208835601807, 0.7140403985977173, 0.7238145470619202, 0.739400327205658, 0.7477215528488159, 0.7543256878852844, 0.7655527591705322, 0.7604015469551086, 0.7734777331352234, 0.763967752456665, 0.7721568942070007, 0.7853652238845825, 0.7803460359573364, 0.7943468689918518, 0.7932901978492737, 0.7972526550292969, 0.7910447716712952, 0.8035926818847656, 0.8166688680648804, 0.8133667707443237, 0.8146876096725464, 0.8141592741012573, 0.8208954930305481, 0.8297450542449951, 0.8253863453865051, 0.8259146809577942, 0.828292191028595, 0.8272355198860168, 0.8334434032440186, 0.8396512866020203], "val_loss": [1.956822190965925, 1.5943500995635986, 1.2855901036943709, 0.9357052530561175, 0.8651880536760602, 0.852367639541626, 0.6740371329443795, 0.7716151816504342, 0.5930410964148385, 0.5859516348157611, 0.6248254776000977, 0.5579525743212018, 0.5386943306241717, 0.5455577714102608, 0.5267725672040667, 0.5108940601348877, 0.5194485187530518, 0.49243668147495817, 0.5043695143290928, 0.5268664530345372, 0.4847903251647949, 0.4996363605771746, 0.4485189914703369, 0.5023130348750523, 0.48943480423518587, 0.4547898769378662, 0.4237738421985081, 0.4092170851571219, 0.4187001500810896, 0.43434672696249826, 0.42554253339767456, 0.41704597643443514, 0.4332304171153477, 0.4070437891142709, 0.4027942248753139, 0.43121669973645893, 0.4057768498148237, 0.4044193540300642, 0.4109105552945818, 0.38238050256456646], "val_accuracy": [0.21433334052562714, 0.48533332347869873, 0.5833333134651184, 0.6003333330154419, 0.625, 0.6163333058357239, 0.7133333086967468, 0.6813333630561829, 0.7263333201408386, 0.7300000190734863, 0.7026666402816772, 0.7463333606719971, 0.753333330154419, 0.7676666378974915, 0.7576666474342346, 0.7680000066757202, 0.7599999904632568, 0.7716666460037231, 0.7683333158493042, 0.7476666569709778, 0.7990000247955322, 0.7770000100135803, 0.8083333373069763, 0.7796666622161865, 0.784333348274231, 0.8003333210945129, 0.8226666450500488, 0.8270000219345093, 0.8233333230018616, 0.8056666851043701, 0.8216666579246521, 0.8299999833106995, 0.8143333196640015, 0.8266666531562805, 0.8416666388511658, 0.812333345413208, 0.8296666741371155, 0.8209999799728394, 0.8173333406448364, 0.8416666388511658]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 4, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 85], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7951428294181824, "mapping_values": [1, 7, 7, 4, 3, 3, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.016620079350903, 1.7216841288844844, 1.1471227779364495, 0.9700161772491658, 0.8543006527016049, 0.741340743213707, 0.7767684823958755, 0.6838558167829301, 0.6468428176832772, 0.5999634346674148, 0.598106392827158, 0.6054138519099171, 0.57610171690845, 0.5442646400425586, 0.5283637539806021, 0.5357892951000447, 0.5156656639718613, 0.4850985124488753, 0.49698629981223474], "accuracy": [0.32822611927986145, 0.4301941692829132, 0.5832782983779907, 0.6556597352027893, 0.677189290523529, 0.7199841737747192, 0.7046625018119812, 0.7371549606323242, 0.7511557340621948, 0.7773081660270691, 0.7754589915275574, 0.7683265209197998, 0.7833839654922485, 0.7936864495277405, 0.8014793395996094, 0.7971205711364746, 0.8037247657775879, 0.8182538747787476, 0.8201030492782593], "val_loss": [1.9265601294381278, 0.9819379874638149, 0.8621292454855782, 0.7553532293864659, 0.617385710988726, 0.6846950224467686, 0.5881130354745048, 0.5169897930962699, 0.51324805191585, 0.5190059287207467, 0.5045286587306431, 0.5280786582401821, 0.5123710291726249, 0.4395969935825893, 0.4919286625725882, 0.4848799875804356, 0.4561499697821481, 0.45665333952222553, 0.43661251238414217], "val_accuracy": [0.24066667258739471, 0.5490000247955322, 0.5943333506584167, 0.6526666879653931, 0.7310000061988831, 0.6639999747276306, 0.7336666584014893, 0.765333354473114, 0.7646666765213013, 0.7663333415985107, 0.7773333191871643, 0.7566666603088379, 0.7583333253860474, 0.8130000233650208, 0.7713333368301392, 0.7703333497047424, 0.8016666769981384, 0.7833333611488342, 0.8066666722297668]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 8, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [2, 2, 3, 2, 2, 6, 2, 5, 6, 4, 3, 3, 4, 1, 8, 0, 4, 1, 2, 2, 1, 2, 5, 0, 1, 1, 3, 4, 0, 3, 5, 2, 7, 7, 8, 1, 8, 6, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 3, 1, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 2, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7917143106460571, "mapping_values": [1, 10, 10, 7, 3, 2, 66, 66, 37, 29, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), grad))))))), tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.add(beta, grad), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.negative(tf.math.add(beta, grad))), beta)))))), tf.math.add(beta, tf.math.multiply(tf.math.square(grad), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.subtract(grad, tf.math.sqrt(alpha)))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.016489948547433, 1.7689732096025483, 1.2618901529615707, 0.9614538344504291, 0.8250196228693694, 0.748449953587111, 0.7716486323086057, 0.6826064024367084, 0.6507896625165848, 0.6416168941356849, 0.5924086462646789, 0.6222483134225627, 0.584376919412846, 0.5492485234088996, 0.5455850303653303, 0.5403694488022542, 0.5244655099763469, 0.498859332289127, 0.5073073932743816], "accuracy": [0.3280940353870392, 0.42187294363975525, 0.5606921315193176, 0.6384889483451843, 0.6948884129524231, 0.7152291536331177, 0.7016246318817139, 0.7412495017051697, 0.7519482374191284, 0.7567031979560852, 0.778232753276825, 0.763439416885376, 0.7774402499198914, 0.7911768555641174, 0.7954035401344299, 0.7968564033508301, 0.8004226684570312, 0.8083476424217224, 0.8142913579940796], "val_loss": [1.9243309838431222, 1.3107292311532157, 0.8417436735970634, 0.6443548032215664, 0.5751892498561314, 0.5852533749171666, 0.5756068399974278, 0.5132159335272652, 0.5154658215386527, 0.4815650156566075, 0.5568681103842599, 0.500913143157959, 0.5151289020265851, 0.44780661378587994, 0.4711191824504307, 0.48331412247249056, 0.4618539128984724, 0.4570776735033308, 0.4424611670630319], "val_accuracy": [0.24166665971279144, 0.47066667675971985, 0.6489999890327454, 0.6933333277702332, 0.7429999709129333, 0.7303333282470703, 0.7513333559036255, 0.7643333077430725, 0.765999972820282, 0.7853333353996277, 0.7549999952316284, 0.7753333449363708, 0.7519999742507935, 0.8033333420753479, 0.7833333611488342, 0.7710000276565552, 0.8013333082199097, 0.7850000262260437, 0.7990000247955322]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7894285917282104, "mapping_values": [1, 7, 7, 4, 3, 3, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0166562589845163, 1.7253284495126586, 1.1990429398374567, 0.9995825551504378, 0.8112877326839242, 0.7620951767453366, 0.7345801607146318, 0.6957207092629794, 0.653515937014688, 0.6135956460710655, 0.5853107196307532, 0.5892763071056402, 0.5920795602742408, 0.5430109182825619, 0.5423489483104107, 0.5456690004693519], "accuracy": [0.32822611927986145, 0.43085458874702454, 0.5793157815933228, 0.6436402201652527, 0.6940959095954895, 0.7028133869171143, 0.7214370369911194, 0.7337207794189453, 0.7485140562057495, 0.76542067527771, 0.7841764688491821, 0.7766477465629578, 0.7713643908500671, 0.7954035401344299, 0.7924976944923401, 0.7932901978492737], "val_loss": [1.9269417354038783, 1.0237467629568917, 0.806020838873727, 0.620224016053336, 0.6073301008769444, 0.5801332507814679, 0.5735757861818586, 0.545886652810233, 0.5198619535991124, 0.49550202914646696, 0.4598583323614938, 0.4980952058519636, 0.5079773323876517, 0.4449442965643747, 0.4837268761226109, 0.4894965546471732], "val_accuracy": [0.2409999966621399, 0.5326666831970215, 0.6859999895095825, 0.7099999785423279, 0.7203333377838135, 0.7433333396911621, 0.7453333139419556, 0.7570000290870667, 0.7649999856948853, 0.7676666378974915, 0.8063333630561829, 0.7723333239555359, 0.7563333511352539, 0.793666660785675, 0.7736666798591614, 0.762333333492279]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 0, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 3, 5, 1, 4, 8, 0, 1, 2, 2, 0, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 3, 1, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7868571281433105, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 7, 5, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), alpha), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.subtract(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.016627308163802, 1.724966932061074, 1.1296092017829662, 0.99281631238299, 0.8311024095404024, 0.7526776528377354, 0.7347309988298594, 0.6880654001343032, 0.6500709664709832, 0.6248792223548688, 0.5890977396437237, 0.5933322783836583, 0.5775016549319765, 0.5524941084249821, 0.5363249652862171, 0.5437329819787842, 0.5241590008728099, 0.48687621059907094, 0.49418670678293036], "accuracy": [0.32822611927986145, 0.42926958203315735, 0.5849953889846802, 0.63096022605896, 0.6804913282394409, 0.7176066637039185, 0.7148329019546509, 0.733588695526123, 0.7514199018478394, 0.7622507214546204, 0.7792893648147583, 0.7754589915275574, 0.7795535326004028, 0.7911768555641174, 0.7994980812072754, 0.7952714562416077, 0.7988376617431641, 0.8125742673873901, 0.8203672170639038], "val_loss": [1.9273366928100586, 0.9409330572400775, 0.983849048614502, 0.6663540772029332, 0.6455813135419574, 0.607120156288147, 0.5876426867076329, 0.5135052033833095, 0.4955943822860718, 0.4894087144306728, 0.4988546371459961, 0.5150384221758161, 0.5294158118111747, 0.4474975381578718, 0.48016137736184256, 0.4658761875970023, 0.4527870672089713, 0.45826452119009836, 0.44576241288866314], "val_accuracy": [0.2409999966621399, 0.5733333230018616, 0.5519999861717224, 0.6796666383743286, 0.6940000057220459, 0.7236666679382324, 0.7243333458900452, 0.7689999938011169, 0.781333327293396, 0.7773333191871643, 0.7736666798591614, 0.7603333592414856, 0.7506666779518127, 0.8116666674613953, 0.7770000100135803, 0.7856666445732117, 0.8029999732971191, 0.7860000133514404, 0.7886666655540466]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 0, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [9, 3, 7, 8, 4, 5, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 3, 1, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [60, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.23571428656578064, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, sigma)", "other_info": {"loss": [2.740234474291214, 2.299490979917297, 2.2094062917409807, 2.3096097763959897, 2.293471841165938, 2.3989832946700256], "accuracy": [0.2296922504901886, 0.19138818979263306, 0.2546559274196625, 0.10117553919553757, 0.13142253458499908, 0.12415797263383865], "val_loss": [2.082804339272635, 1.9637808799743652, 1.9845327649797713, 1.9747259957449776, 2.4202812739780972, 1.9351863861083984], "val_accuracy": [0.2329999953508377, 0.10133333504199982, 0.09666666388511658, 0.09666666388511658, 0.15399999916553497, 0.22966666519641876]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 2, 1, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [4, 19, 78, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [6, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [95, 9, 76, 58]], "fitness": -0.10371428728103638, "mapping_values": [1, 5, 5, 3, 2, 2, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [4.783995298255445e+24, 5.464653972551799e+24, 5.478210303876646e+24, 5.501282280301549e+24, 5.542050030507868e+24, 5.582172473218451e+24], "accuracy": [0.09694888442754745, 0.10077928751707077, 0.09813763201236725, 0.09840179979801178, 0.09879804402589798, 0.10196803510189056], "val_loss": [3.7999269162248655e+24, 3.7999269162248655e+24, 3.7999269162248655e+24, 3.7999269162248655e+24, 3.7999269162248655e+24, 3.7999269162248655e+24], "val_accuracy": [0.10700000077486038, 0.10700000077486038, 0.10700000077486038, 0.10700000077486038, 0.10700000077486038, 0.10700000077486038]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 2, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 1, 1, 2, 1, 2, 1, 1, 2, 2], [46, 80, 61], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 3, 4, 1, 4, 6, 2, 1, 2, 2, 2, 0, 2, 9, 8, 0, 4, 1, 5, 8, 1, 0, 2, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 1, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 55, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3025366152754674, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 3, 7, 8, 4, 5, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 3, 1, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07792893797159195, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 0, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 3, 7, 8, 4, 5, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 2, 3, 1, 3, 3, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025366152754674, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 9, 6, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [95, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025366152754674, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 1, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 3, 2, 4, 0, 9, 5, 2, 5, 3, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 2, 3, 1, 3, 3, 2, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [49, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 0, 8, 8, 6, 7, 4, 5, 6], [2, 1, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 7, 5, 1, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha))))), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 8, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 1, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 5, 1, 9, 6, 2, 1, 2, 2, 2, 3, 5, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 3, 3, 1, 3, 1, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [53, 19, 78, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [72, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 2, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(alpha))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1182219556.2792523, 23315849701.287544, 107645344646.1371, 297426722033.697, 633130372172.6885, 1160919464099.115], "accuracy": [0.09509972482919693, 0.09694888442754745, 0.10289261490106583, 0.09760929644107819, 0.1014397069811821, 0.09840179979801178], "val_loss": [4541661330.285714, 36322265380.57143, 122575140571.42857, 290533642825.1429, 567430723291.4286, 980497128301.7142], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 6, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 7, 4, 4, 0, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 1, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 31, 41, 12, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6, 4, 9, 2, 6, 5, 8, 7, 1, 0, 3, 9, 6, 1, 2, 5, 5, 3, 7, 8, 6, 0, 9, 4, 4, 6, 0, 7], [0, 0, 2, 1, 0, 0, 2, 2, 0, 0, 1, 0, 1, 3, 0, 3, 0, 1, 3, 3, 1, 3], [48, 9, 76, 30, 3, 17, 30, 6, 55, 73]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 16, 16, 9, 7, 2, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), alpha)))), tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.335952143643306, 2.706590302537508, 3.7503628468138746, 5.530825010616357, 8.05205662797518, 11.302696897400653, 15.450829232200388], "accuracy": [0.09206181764602661, 0.09681680053472519, 0.10342095047235489, 0.09708096832036972, 0.09959053993225098, 0.09708096832036972, 0.09708096832036972], "val_loss": [2.0344836371285573, 2.378772054399763, 3.1926254544939314, 4.519745145525251, 6.320887156895229, 8.583845955984932, 11.325605937412806], "val_accuracy": [0.09799999743700027, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 2, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.pow(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, beta))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.080042265355587, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 0, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 3, 7, 8, 4, 5, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 3, 1, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [2, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1213973582.7962248, 23942188766.0177, 110536919686.23854, 305416394366.5291, 650137346940.6694, 1192106511185.659], "accuracy": [0.09509972482919693, 0.09694888442754745, 0.10289261490106583, 0.09760929644107819, 0.1014397069811821, 0.09826971590518951], "val_loss": [4663659958.857142, 37298023862.85714, 125868090514.28572, 298339027236.5714, 582670764324.5714, 1006832638829.7142], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 7, 1, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.08485714346170425, "mapping_values": [1, 7, 7, 4, 3, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(sigma))", "other_info": {"loss": [1.716587544347869e+22, 2.3679685523056193, 2.6196755954791304, 3.5544048484920148, 4.837101783797788, 5.8889778306250875], "accuracy": [0.0878351628780365, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.0005078996930803, 2.0990782465253557, 2.5966269629342213, 3.721884318760463, 4.708527565002441, 5.522888319832938], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 6, 9, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [88, 80, 61], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [9, 3, 7, 8, 4, 5, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 0, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 36, 7, 45, 13], [1], [0, 1, 1], [9], [1, 1], [52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6, 6, 0, 7, 1, 2, 8, 5, 5, 5, 3, 5], [2, 3, 2, 1, 0, 0, 2, 2, 2, 0, 3], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 31, 20, 11, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(beta), beta)), tf.math.square(tf.math.square(tf.math.square(beta))))), tf.math.multiply(tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), sigma)))))))", "other_info": {"loss": [2.302630576758636, 2.3038257856599533, 2.3033043064729113, 2.303161530210641, 2.3029200640557352, 2.3031456570316062], "accuracy": [0.08942015469074249, 0.08796724677085876, 0.09417514503002167, 0.09311848133802414, 0.08717474341392517, 0.09417514503002167], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]