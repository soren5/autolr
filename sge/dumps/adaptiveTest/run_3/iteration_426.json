[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8080000281333923, "mapping_values": [1, 9, 9, 7, 2, 2, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.225906690759524, 2.136587996067797, 1.7937819180692018, 1.646328359641545, 1.1286572326349151, 0.8829138551830946, 0.7742852012101197, 0.6929816070123828, 0.671418940787932, 0.6545076529820046, 0.63372554416591, 0.5952181806811221, 0.603247778243424, 0.5859411419059906, 0.5588068136559847, 0.5168775969398115, 0.5404418036410554, 0.5259392303860561, 0.5164817478229751, 0.4990482896137326, 0.49698181206114683, 0.4742776734276911, 0.48654456103419613, 0.47073637502714, 0.4555714374968814, 0.4434883116754669, 0.4466626484553733, 0.4146357446597977, 0.4310966985628133, 0.4272086277354143, 0.40129384452782413, 0.39462614681396063], "accuracy": [0.24580636620521545, 0.2705058753490448, 0.39400342106819153, 0.4581957459449768, 0.6020340919494629, 0.6741513609886169, 0.7041342258453369, 0.7429665923118591, 0.7392682433128357, 0.7467969655990601, 0.7593448758125305, 0.7773081660270691, 0.7771760821342468, 0.7815347909927368, 0.7907806038856506, 0.805177628993988, 0.798309326171875, 0.8030643463134766, 0.8026680946350098, 0.8113855719566345, 0.8165367841720581, 0.8182538747787476, 0.81112140417099, 0.8195747137069702, 0.8310658931732178, 0.8370096683502197, 0.8297450542449951, 0.8555012345314026, 0.8421608805656433, 0.8378021121025085, 0.8485008478164673, 0.8500858545303345], "val_loss": [1.7937466076442175, 1.7004177229745048, 1.5647454261779785, 1.0391829354422433, 0.7242682150432042, 0.6068646567208427, 0.586025493485587, 0.5304539544241769, 0.6299625975745065, 0.5308900730950492, 0.4950564588819231, 0.4964240959712437, 0.4637785979679653, 0.46493286745888845, 0.4510629177093506, 0.493855391229902, 0.44616382462637766, 0.4917012793677194, 0.42488143273762297, 0.43258229323795866, 0.40908452442714144, 0.42215108019965036, 0.3953706281525748, 0.3960782544953482, 0.4165358117648533, 0.4002801179885864, 0.3773122344698225, 0.3772160155432565, 0.3863981621606009, 0.3870772974831717, 0.4029666270528521, 0.40979438168661936], "val_accuracy": [0.3893333375453949, 0.4676666557788849, 0.5216666460037231, 0.5113333463668823, 0.6866666674613953, 0.7246666550636292, 0.7363333106040955, 0.7586666941642761, 0.7039999961853027, 0.7576666474342346, 0.7693333625793457, 0.7786666750907898, 0.8040000200271606, 0.7983333468437195, 0.8073333501815796, 0.7649999856948853, 0.7983333468437195, 0.7523333430290222, 0.8193333148956299, 0.815666675567627, 0.8223333358764648, 0.8183333277702332, 0.8309999704360962, 0.8216666579246521, 0.8223333358764648, 0.8276666402816772, 0.8416666388511658, 0.8323333263397217, 0.8330000042915344, 0.831333339214325, 0.8299999833106995, 0.8199999928474426]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 0, 9, 0, 9, 7, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 3, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [7, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [15, 9, 76, 58]], "fitness": -0.7362856864929199, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.301430512759443, 2.283946517719616, 2.2553251333177493, 2.213187278679034, 2.1454689993976115, 2.0380972382131426, 1.8750390919554487, 1.6544847608856506, 1.48152856890709, 1.3996767192673547, 1.3557083294014054, 1.3504190668690048, 1.2185107780532625, 1.0789544547254446, 0.9678724956487258, 0.9285729654775934, 0.9380642669611226, 0.9368077480498558, 0.9062465412064692, 0.8333990361239885, 0.8194336381177105, 0.8133000397033475, 0.8171867068653739, 0.8154845532251781, 0.8266203190278635, 0.8007313913641478, 0.7781467421762444, 0.7527608787221459, 0.7307971421879642, 0.7438511579988687, 0.7472702790528493, 0.7411044492162276, 0.731094326711271, 0.7115518255335166, 0.7040282894182261, 0.7019575773339152], "accuracy": [0.0956280529499054, 0.1426495909690857, 0.2145027071237564, 0.2949412167072296, 0.34803855419158936, 0.3907013535499573, 0.4235900044441223, 0.45766741037368774, 0.49306565523147583, 0.5148593187332153, 0.5513142347335815, 0.5609562993049622, 0.6058644652366638, 0.6362435817718506, 0.6476026773452759, 0.654999315738678, 0.663848876953125, 0.6668868064880371, 0.6720380187034607, 0.6923788189888, 0.6940959095954895, 0.6964733600616455, 0.695813000202179, 0.6975300312042236, 0.6913221478462219, 0.7057191729545593, 0.7086250185966492, 0.7102100253105164, 0.726192057132721, 0.7180029153823853, 0.7153612375259399, 0.7223616242408752, 0.7277770638465881, 0.7339849472045898, 0.7351737022399902, 0.7430986762046814], "val_loss": [1.963021687098912, 1.9411896978105818, 1.9077167510986328, 1.8591235024588448, 1.779163019997733, 1.6449227673666817, 1.4370321205684118, 1.1906325135912215, 0.9938866070338658, 0.8597519738333566, 0.8099465540477208, 0.7516965866088867, 0.7410207305635724, 0.6908674240112305, 0.688050559588841, 0.7130342211042132, 0.7293351377759661, 0.713168808392116, 0.6592552321297782, 0.6184229339872088, 0.6101598228727069, 0.6072493110384259, 0.6096081393105643, 0.6178708246776036, 0.6109392302376884, 0.5937390327453613, 0.5753910541534424, 0.5614919662475586, 0.5615452017102923, 0.5728345087596348, 0.5768045868192401, 0.5686995983123779, 0.5545728547232491, 0.5451457159859794, 0.5432545968464443, 0.5397207566670009], "val_accuracy": [0.09600000083446503, 0.28600001335144043, 0.3553333282470703, 0.398333340883255, 0.42500001192092896, 0.4690000116825104, 0.5236666798591614, 0.5773333311080933, 0.6359999775886536, 0.6710000038146973, 0.659333348274231, 0.6923333406448364, 0.7049999833106995, 0.7089999914169312, 0.703000009059906, 0.6896666884422302, 0.7093333601951599, 0.7093333601951599, 0.7136666774749756, 0.7213333249092102, 0.7239999771118164, 0.7296666502952576, 0.7210000157356262, 0.718666672706604, 0.7269999980926514, 0.7310000061988831, 0.7353333234786987, 0.7379999756813049, 0.746999979019165, 0.753000020980835, 0.7590000033378601, 0.7559999823570251, 0.7553333044052124, 0.7556666731834412, 0.7583333253860474, 0.7590000033378601]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 6, 1, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [37, 67, 98, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [22, 9, 76, 58]], "fitness": -0.7200000286102295, "mapping_values": [1, 9, 9, 6, 3, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3004728353979282, 2.290009427206029, 2.2824622241969847, 2.276166768798959, 2.2656849894651474, 2.2578484741231595, 2.251063418001027, 2.240991380567076, 2.2294693729424315, 2.2180207869663624, 2.2055343958081632, 2.192601949185145, 2.178890362265812, 2.1659567459085283, 2.1488345867575687, 2.126695856867276, 2.1072783894023055, 2.083620203736436, 2.058849224340741, 2.0266404461473315, 2.0007293381947315, 1.9731284732501173, 1.9403591486819116, 1.8984924171736464, 1.8617410489423574, 1.8216080483097867, 1.7869277232043763, 1.7426458178352544, 1.710499326613727, 1.672735437394574, 1.626129022505557, 1.592364744928456, 1.5530516424073266, 1.5244278020358688, 1.4971730563272465, 1.457074296835029, 1.4249941525347811, 1.40319583461962, 1.379246410566503, 1.353146311267177, 1.3270441373073822, 1.302947677531184, 1.2905048863636803, 1.2676759072582027, 1.2540416263271206, 1.2316331638557374, 1.219850197034883, 1.2032334400662468, 1.1827629703367548, 1.1758575047389817, 1.1594782764917004, 1.1486516532455815, 1.132481496867219, 1.1237167387811058, 1.1026143097307515, 1.10225811975822, 1.0890326855630135, 1.0815053777042207, 1.0677127417886987, 1.0655885886018617, 1.0652454353641636, 1.0559717434870648, 1.0386866390775964, 1.0371752478710774, 1.021966564019185, 1.0211599823065312, 1.0037492409263855, 0.9970015450444094, 0.9930153129878942, 0.9973293174574357, 0.9810101739356641, 0.9781603687679636, 0.9767837043309869, 0.9600505288313912, 0.9504075467846318, 0.953863759625621, 0.9445790919676874, 0.9604460597038269, 0.940688219462183, 0.9256119439079462, 0.9382187781112227, 0.9284842571940137, 0.9164041563063533, 0.9094216466075976, 0.906665525258792, 0.9112981134213004, 0.9066065195418934, 0.8991023891905217, 0.9084019387371395, 0.8975298141664786, 0.9010794559222297, 0.8975746696651289], "accuracy": [0.09721305221319199, 0.12481838464736938, 0.14132875204086304, 0.160084530711174, 0.1872936189174652, 0.20631356537342072, 0.22137102484703064, 0.23933430016040802, 0.26178839802742004, 0.2793554365634918, 0.30379077792167664, 0.31924447417259216, 0.3275656998157501, 0.3333773612976074, 0.34341567754745483, 0.3667943477630615, 0.3700964152812958, 0.3833047151565552, 0.39149385690689087, 0.4099854826927185, 0.4123629629611969, 0.41606128215789795, 0.42491084337234497, 0.428609162569046, 0.4423457980155945, 0.4539690911769867, 0.4616298973560333, 0.469819039106369, 0.4765552878379822, 0.4834235906600952, 0.5005943775177002, 0.4962356388568878, 0.5128780603408813, 0.5144630670547485, 0.5107647776603699, 0.5280676484107971, 0.5399550795555115, 0.538237988948822, 0.5452384352684021, 0.5513142347335815, 0.5610883831977844, 0.5608242154121399, 0.5679566860198975, 0.5736362338066101, 0.5719191431999207, 0.5758816599845886, 0.581429123878479, 0.585919976234436, 0.5906749367713928, 0.5937128663063049, 0.6012415885925293, 0.6021661758422852, 0.6112799048423767, 0.6111478209495544, 0.6086382269859314, 0.614317774772644, 0.6259410977363586, 0.6210539937019348, 0.6248844265937805, 0.63096022605896, 0.6289790272712708, 0.635451078414917, 0.6391493678092957, 0.6370360851287842, 0.6413947939872742, 0.6404702067375183, 0.6462818384170532, 0.6501122713088989, 0.6494518518447876, 0.6432439684867859, 0.654999315738678, 0.6476026773452759, 0.6565843224525452, 0.6629242897033691, 0.6634526252746582, 0.6618676781654358, 0.6642451286315918, 0.6616035103797913, 0.6690001487731934, 0.6724342703819275, 0.6660943031311035, 0.6674151420593262, 0.6767930388450623, 0.6719059348106384, 0.6793025732040405, 0.6748117804527283, 0.6816800832748413, 0.6782459616661072, 0.6775855422019958, 0.6843217611312866, 0.6798309087753296, 0.6769251227378845], "val_loss": [1.9637154170445033, 1.9563671520778112, 1.949019227709089, 1.9415454864501953, 1.9338075774056571, 1.9257066590445382, 1.9171526091439384, 1.9079463822501046, 1.8978736741202218, 1.886934689113072, 1.8749324253627233, 1.8618199484688895, 1.847442558833531, 1.831639017377581, 1.8142608915056502, 1.795036792755127, 1.7740293911525182, 1.751009464263916, 1.726022379738944, 1.698403767177037, 1.6688591752733504, 1.6372268540518624, 1.603541646684919, 1.5676768507276262, 1.5302279336111886, 1.4913741179874964, 1.4520768438066756, 1.4120168345315116, 1.372232505253383, 1.3325800555092948, 1.2934722559792655, 1.2553149632045202, 1.2184219700949532, 1.183812482016427, 1.150989191872733, 1.1196089812687464, 1.0903165340423584, 1.0634448868887765, 1.0386667592184884, 1.0151081425803048, 0.9927514961787632, 0.9720538343702044, 0.9528807912554059, 0.934964793069022, 0.9183405808040074, 0.9027572699955532, 0.8886323656354632, 0.8753294604165214, 0.8626650742122105, 0.8509275572640556, 0.8392569167273385, 0.8283107451030186, 0.8179269688470023, 0.8081432410648891, 0.7987527336393084, 0.7902853318623134, 0.7819196326392037, 0.7746284518923078, 0.7673349210194179, 0.7602237292698452, 0.7541047845567975, 0.7480649777821132, 0.7418022666658673, 0.7368624210357666, 0.7308260713304792, 0.7254248857498169, 0.7202525990349906, 0.7150506292070661, 0.7105035100664411, 0.7070032528468541, 0.702051213809422, 0.6983004467827933, 0.6942778314862933, 0.6901657581329346, 0.6858375413077218, 0.6820880004337856, 0.6787055560520717, 0.6758773837770734, 0.6730241775512695, 0.6694326060158866, 0.6668916940689087, 0.6638284581048148, 0.661173837525504, 0.6581130368368966, 0.6555107321058001, 0.6528145245143345, 0.6505716868809291, 0.6477086544036865, 0.6459221158708844, 0.6430532591683524, 0.6407058409282139, 0.6389171736580985], "val_accuracy": [0.08866667002439499, 0.16333332657814026, 0.22366666793823242, 0.28066667914390564, 0.31333333253860474, 0.34299999475479126, 0.3596666753292084, 0.37433332204818726, 0.3916666805744171, 0.4176666736602783, 0.43066665530204773, 0.4403333365917206, 0.45233333110809326, 0.46533334255218506, 0.48133334517478943, 0.49000000953674316, 0.4963333308696747, 0.5049999952316284, 0.5176666378974915, 0.5236666798591614, 0.5286666750907898, 0.5339999794960022, 0.5396666526794434, 0.5460000038146973, 0.5490000247955322, 0.5533333420753479, 0.5606666803359985, 0.562333345413208, 0.565666675567627, 0.5759999752044678, 0.5799999833106995, 0.5876666903495789, 0.5920000076293945, 0.5989999771118164, 0.609000027179718, 0.6196666955947876, 0.6299999952316284, 0.6386666893959045, 0.6470000147819519, 0.6539999842643738, 0.6546666622161865, 0.6600000262260437, 0.6643333435058594, 0.6703333258628845, 0.6726666688919067, 0.6763333082199097, 0.6776666641235352, 0.6800000071525574, 0.6823333501815796, 0.6833333373069763, 0.6863333582878113, 0.687666654586792, 0.6930000185966492, 0.6943333148956299, 0.6933333277702332, 0.6949999928474426, 0.6973333358764648, 0.6976666450500488, 0.6986666917800903, 0.699999988079071, 0.7013333439826965, 0.7036666870117188, 0.7059999704360962, 0.7073333263397217, 0.7070000171661377, 0.7099999785423279, 0.7120000123977661, 0.7143333554267883, 0.7133333086967468, 0.7133333086967468, 0.7146666646003723, 0.7163333296775818, 0.718999981880188, 0.7196666598320007, 0.7196666598320007, 0.718999981880188, 0.7210000157356262, 0.7239999771118164, 0.7213333249092102, 0.7246666550636292, 0.7266666889190674, 0.7273333072662354, 0.7256666421890259, 0.7266666889190674, 0.7289999723434448, 0.7286666631698608, 0.7316666841506958, 0.7316666841506958, 0.7293333411216736, 0.7293333411216736, 0.7306666374206543, 0.7303333282470703]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 4, 9, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 3, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 2, 98, 79], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 9, 8, 7, 0, 9, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [8, 9, 76, 58]], "fitness": -0.10114285349845886, "mapping_values": [1, 5, 5, 3, 2, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.add(beta, beta), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303412756474578, 2.300732121570251, 2.300589066990268, 2.301443344031059, 2.2998126865362276, 2.299890392728218, 2.301373535915058, 2.3009309807725633, 2.3007273660784997, 2.300784097481807, 2.301219487753936, 2.300935990113498, 2.3010268188061387], "accuracy": [0.09074098616838455, 0.09760929644107819, 0.09325055778026581, 0.09259014576673508, 0.10157178342342377, 0.09866596013307571, 0.09377889335155487, 0.09642054885625839, 0.10355303436517715, 0.10368511080741882, 0.09879804402589798, 0.10685510188341141, 0.10051512718200684], "val_loss": [1.9708755356924874, 1.9706760134015764, 1.9705713817051478, 1.970619065420968, 1.9707835061209542, 1.9710243088858468, 1.9713186536516463, 1.9716439247131348, 1.9719687870570592, 1.972247532435826, 1.972499098096575, 1.9726986203874861, 1.9728341783796037], "val_accuracy": [0.041999999433755875, 0.0533333346247673, 0.06433333456516266, 0.07666666805744171, 0.08233333379030228, 0.08866667002439499, 0.09466666728258133, 0.09966666996479034, 0.09933333098888397, 0.09666666388511658, 0.09399999678134918, 0.08766666799783707, 0.08366666734218597]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 2, 9, 5, 4, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [79, 67, 98, 79], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 7, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 2, 4, 4, 2, 2, 0, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [23622523.291062627, 440171619.2502972, 2054580476.6186764, 5648371609.681151, 12229374558.744684, 22387256985.0387], "accuracy": [0.09391097724437714, 0.10434553027153015, 0.09602430462837219, 0.09694888442754745, 0.1006472036242485, 0.10606260597705841], "val_loss": [87319618.28571428, 697761920.0, 2354058313.142857, 5578944658.285714, 10895192649.142857, 18825458249.142857], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 1, 8, 8, 6, 9, 4, 5, 6, 0, 9], [2, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 12, 8, 4, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, beta)))), tf.math.square(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 9, 2, 4, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [4, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [32, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 4, 4, 2, 2, 0, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3026577927543186, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 7, 3, 4, 9, 5, 2, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [80, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 14, 7, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha))))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 6, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [93, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 7, 2, 2, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.pow(alpha, beta))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 4, 9, 8, 9, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 38, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [7, 0, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 7, 2, 2, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.pow(sigma, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [8, 4, 8, 8, 6, 9, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [63, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(sigma))", "other_info": {"loss": [5836680099077.853, 18019748.275720444, 1228508047138.4219, 9.074687699311088e+16, 6.332057651177464e+21, 4.148781273956219e+26, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08096684515476227, 0.1006472036242485, 0.1026284471154213, 0.09628847241401672, 0.1002509593963623, 0.09496764093637466, 0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1185.2103445870537, 71154320.0, 5301180076617.143, 3.7147178033344864e+17, 3.452905459379607e+22, 1.653348235285329e+27, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.09666666388511658, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10233332961797714, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 9, 2, 9, 2, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 56, 98, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 7, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 0, 1, 1, 1, 0, 1, 4, 2, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3424706646102122, 2.6902287754919927, 3.733490654821047, 5.524916331309211, 8.064261339973891, 11.315573052801964, 15.39023248624367], "accuracy": [0.09206181764602661, 0.1026284471154213, 0.09708096832036972, 0.09813763201236725, 0.10170386731624603, 0.10540219396352768, 0.10157178342342377], "val_loss": [2.0344836371285573, 2.378772054399763, 3.1926254544939314, 4.519745145525251, 6.320887156895229, 8.583845955984932, 11.325605937412806], "val_accuracy": [0.09799999743700027, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 7, 1, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [57], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 4, 2, 2, 6, 9, 4, 5, 6, 0, 9], [1, 1, 3, 1, 0, 0, 2, 2], [80, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 5, 2, 3, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(alpha, sigma))", "other_info": {"loss": [2.3026577927543186, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 4, 9, 2, 9, 5, 4, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 3, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [7, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [48, 41, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [2.3042625559319467, 2.3617479489101885, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08875974267721176, 0.06485272943973541, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9754817826407296, 4.881204877580915, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.019333332777023315, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 4, 6, 2, 9, 5, 4, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 3, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 9, 4, 5, 6, 0, 9], [3, 0, 2, 1, 0, 0, 2, 2], [94, 40, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad)))), alpha))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [7, 8, 9, 2, 4, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 4, 1, 8, 6, 9, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [80, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 4, 4, 2, 2, 0, 1, 1, 1, 0, 1, 16, 11, 5, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.math.subtract(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, beta)))), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 4, 9, 2, 9, 5, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [5, 1], [52], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 7, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [8, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 12, 8, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(sigma, beta)), tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 0, 9, 0, 9, 7, 5, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 67, 98, 79], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0, 1], [0, 1, 1], [0], [4, 1], [57], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 3, 8, 8, 6, 9, 4, 5, 6, 0, 9], [0, 0, 2, 1, 0, 0, 2, 2], [48, 13, 76, 58]], "fitness": -0.05000000074505806, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 12, 8, 4, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), beta)))), tf.math.square(alpha))", "other_info": {"loss": [2.3037649978972254, 2.301274270051506, 2.301388038824956, 2.302996304371826, 2.3007693645929255, 2.3010280822891964, 2.3027989759169327, 2.3024435209922505, 2.3018406186641056, 2.3009431156830593, 2.3010789018186832, 2.3008745907005177, 2.301624398615067, 2.30365826724275, 2.3026577270640325, 2.301179500099155, 2.3024808651956, 2.3023090599676275, 2.301809482507702, 2.2995050239714145, 2.3006649926479987, 2.303430112471686, 2.3026072229486902, 2.3009375356302098, 2.3005996129264323, 2.300649667129446, 2.301852580405434, 2.3013337709333412, 2.3025341488666005, 2.3013350784093665, 2.3014572776146474, 2.302677598375576, 2.2997447931377595, 2.3017963487962456, 2.3020491494541675, 2.3014562581240807, 2.3011758686166948, 2.3010709415479123, 2.300833712542424, 2.301174494568635, 2.30150188119294, 2.3011278473800276, 2.3019724994397923, 2.301858385902559, 2.300592515761779, 2.3002797147113223, 2.3001800978487634, 2.2998060391264477, 2.300004995762003, 2.300421725899048, 2.301564931995471, 2.3005894129822013, 2.300068313608458, 2.301319078258504, 2.300424318051593, 2.2995293786607287, 2.3010701265600866, 2.299353693580552, 2.3006754860256358], "accuracy": [0.09047681838274002, 0.09576013684272766, 0.08955223858356476, 0.08585391938686371, 0.09351472556591034, 0.09774138033390045, 0.09153348207473755, 0.08994849026203156, 0.09377889335155487, 0.09311848133802414, 0.09642054885625839, 0.09959053993225098, 0.09325055778026581, 0.08413683623075485, 0.0866464152932167, 0.0878351628780365, 0.08942015469074249, 0.09047681838274002, 0.09747721254825592, 0.09800554811954498, 0.1018359512090683, 0.09259014576673508, 0.09351472556591034, 0.09245806187391281, 0.08902391046285629, 0.09100515395402908, 0.09800554811954498, 0.09417514503002167, 0.09113723784685135, 0.09311848133802414, 0.09021265059709549, 0.09166556596755981, 0.09192973375320435, 0.0940430611371994, 0.0878351628780365, 0.09536388516426086, 0.09536388516426086, 0.09430722147226334, 0.09734513610601425, 0.08849557489156723, 0.09668471664190292, 0.09417514503002167, 0.09245806187391281, 0.09470347315073013, 0.09549596905708313, 0.09338264167308807, 0.0956280529499054, 0.09602430462837219, 0.09602430462837219, 0.09642054885625839, 0.09879804402589798, 0.09192973375320435, 0.10210011899471283, 0.09536388516426086, 0.09602430462837219, 0.10011887550354004, 0.0940430611371994, 0.09747721254825592, 0.09813763201236725], "val_loss": [1.9711247171674455, 1.9710679054260254, 1.9710348674229212, 1.9709758077348982, 1.9709296226501465, 1.9708864348275321, 1.970834527696882, 1.9707859584263392, 1.970738751547677, 1.9706981522696358, 1.9706629344395228, 1.9706181798662459, 1.9705781936645508, 1.9705356189182825, 1.970489161355155, 1.9704474721636092, 1.9704127992902483, 1.9703726087297713, 1.9703307151794434, 1.9702901159014021, 1.9702601432800293, 1.970216955457415, 1.9701895032610213, 1.9701620510646276, 1.9701292174203056, 1.9701160022190638, 1.9700867107936315, 1.9700555120195662, 1.970020089830671, 1.9699925695146834, 1.9699687957763672, 1.9699416841779436, 1.9699272428240096, 1.969900267464774, 1.9698810577392578, 1.9698685237339564, 1.9698477472577776, 1.9698330334254675, 1.9698190007890974, 1.9698025158473425, 1.96978793825422, 1.9697753361293249, 1.9697530610220773, 1.969730990273612, 1.9697165489196777, 1.969710213797433, 1.9697095326014928, 1.969710077558245, 1.969703129359654, 1.9696955680847168, 1.969688960484096, 1.969684328351702, 1.969682012285505, 1.969674859728132, 1.9696736335754395, 1.9696743147713798, 1.9696668216160365, 1.969672679901123, 1.9696685246058874], "val_accuracy": [0.03700000047683716, 0.03766666725277901, 0.038333334028720856, 0.03866666555404663, 0.038333334028720856, 0.03866666555404663, 0.03799999877810478, 0.03866666555404663, 0.039000000804662704, 0.039000000804662704, 0.03933333232998848, 0.03966666758060455, 0.0403333343565464, 0.04100000113248825, 0.041333332657814026, 0.0416666679084301, 0.0416666679084301, 0.041999999433755875, 0.04233333468437195, 0.0430000014603138, 0.04333333298563957, 0.04399999976158142, 0.04466666653752327, 0.044333335012197495, 0.04633333161473274, 0.047333333641290665, 0.04800000041723251, 0.04766666516661644, 0.04933333396911621, 0.050333332270383835, 0.050333332270383835, 0.050999999046325684, 0.050999999046325684, 0.05166666582226753, 0.052000001072883606, 0.05233333259820938, 0.05299999937415123, 0.05366666615009308, 0.05400000140070915, 0.05433333292603493, 0.055666666477918625, 0.0560000017285347, 0.0560000017285347, 0.0560000017285347, 0.056333333253860474, 0.05666666850447655, 0.0573333315551281, 0.0573333315551281, 0.0573333315551281, 0.05766666680574417, 0.05766666680574417, 0.05900000035762787, 0.059333331882953644, 0.05966666713356972, 0.05966666713356972, 0.058666665107011795, 0.059333331882953644, 0.058666665107011795, 0.058666665107011795]}}]