[{"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 8, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8], [1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 0, 1, 1], [6, 67, 58, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [23, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7965714335441589, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2310639205562786, 1.8012375349791263, 1.2767211227935964, 1.0840608682362882, 0.9676391445587434, 0.9309794610249856, 0.8578240149969973, 0.799098917285701, 0.7964251194143843, 0.78514074006211, 0.7439175139974373, 0.7355674819041866, 0.7099750827426656, 0.6993641014568968, 0.6870270925836635, 0.67851615107968, 0.6830958098058987, 0.6531034926649539, 0.6433703148401235, 0.6402776448985825, 0.6337587830176711, 0.6185464424904957, 0.6156447750938535, 0.6257919746619237, 0.603358691788274, 0.591893860141536, 0.6010660981269104], "accuracy": [0.23286223411560059, 0.45145952701568604, 0.561352550983429, 0.6197332143783569, 0.6577730774879456, 0.6610751748085022, 0.6930392384529114, 0.7123233675956726, 0.7106062769889832, 0.7086250185966492, 0.7197200059890747, 0.7251353859901428, 0.7396644949913025, 0.7437590956687927, 0.7432307600975037, 0.7376832365989685, 0.7434949278831482, 0.7573636174201965, 0.7622507214546204, 0.7607977986335754, 0.76106196641922, 0.7695152759552002, 0.7630431652069092, 0.7648923397064209, 0.7749306559562683, 0.7773081660270691, 0.7758552432060242], "val_loss": [1.7519339152744837, 1.0930471420288086, 0.8599463020052228, 0.7144758190427508, 0.7864588669368199, 0.6313918999263218, 0.601085730961391, 0.6182419572557721, 0.6076214824404035, 0.5633185591016497, 0.5502088580812726, 0.541644709450858, 0.5640760149274554, 0.5279404435838971, 0.5331329788480487, 0.5396074056625366, 0.5021668161664691, 0.4986968551363264, 0.5008785043443952, 0.5114979914256504, 0.5025654009410313, 0.4872356482914516, 0.47702366965157644, 0.49714512484414236, 0.47270582403455463, 0.4793377603803362, 0.48899718693324495], "val_accuracy": [0.5393333435058594, 0.6033333539962769, 0.6526666879653931, 0.6996666789054871, 0.6453333497047424, 0.7229999899864197, 0.7350000143051147, 0.7170000076293945, 0.7179999947547913, 0.746666669845581, 0.7513333559036255, 0.7536666393280029, 0.749666690826416, 0.7639999985694885, 0.7546666860580444, 0.7400000095367432, 0.7826666831970215, 0.7806666493415833, 0.7860000133514404, 0.765333354473114, 0.7789999842643738, 0.7893333435058594, 0.7870000004768372, 0.7776666879653931, 0.7873333096504211, 0.7856666445732117, 0.7836666703224182]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [7, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7954285740852356, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1407335138969636, 1.4152043325522194, 1.0998006602949737, 0.9715370142527575, 0.8653197679159396, 0.8144434547191283, 0.7667626720755848, 0.7509024473874797, 0.7335108342801796, 0.70585466575125, 0.7133540201889383, 0.6734180697250391, 0.6622956701635668, 0.6666913953329421, 0.6422217370827342, 0.6347473359000901, 0.6356980363060817, 0.6178120388693074, 0.6191721296565502, 0.6093050208562212, 0.5809920302172379, 0.5723130629204677, 0.5697995327908082, 0.5905413122665865, 0.5822261283898696, 0.5584906364916936], "accuracy": [0.29362040758132935, 0.5189539194107056, 0.6070532202720642, 0.650640606880188, 0.6822084188461304, 0.69673752784729, 0.7143045663833618, 0.7230220437049866, 0.7276449799537659, 0.7428345084190369, 0.7288337349891663, 0.7442874312400818, 0.7518161535263062, 0.7467969655990601, 0.7588165402412415, 0.7578919529914856, 0.7598732113838196, 0.7655527591705322, 0.7647602558135986, 0.7695152759552002, 0.7858935594558716, 0.7901201844215393, 0.7828556299209595, 0.7738739848136902, 0.7808743715286255, 0.7898560166358948], "val_loss": [1.352323293685913, 0.8385712248938424, 0.7861230713980538, 0.6846536568232945, 0.637680104800633, 0.5836533308029175, 0.6102546112877982, 0.582566670009068, 0.5994842903954642, 0.5437847546168736, 0.5426803997584752, 0.5345607655388969, 0.518924457686288, 0.5082992655890328, 0.5152844360896519, 0.5077105760574341, 0.5123864752905709, 0.5283187627792358, 0.4962850298200335, 0.46695949350084576, 0.46859274591718403, 0.49231127330235075, 0.4602576494216919, 0.47221224648611887, 0.47866172449929373, 0.46866726875305176], "val_accuracy": [0.5836666822433472, 0.6786666512489319, 0.6549999713897705, 0.7003333568572998, 0.7183333039283752, 0.7453333139419556, 0.7070000171661377, 0.7276666760444641, 0.7490000128746033, 0.7543333172798157, 0.7506666779518127, 0.7563333511352539, 0.7680000066757202, 0.7713333368301392, 0.7680000066757202, 0.7753333449363708, 0.7693333625793457, 0.7480000257492065, 0.7756666541099548, 0.8006666898727417, 0.8016666769981384, 0.7649999856948853, 0.7990000247955322, 0.7916666865348816, 0.7776666879653931, 0.7940000295639038]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [9, 2, 3, 2, 1, 8, 7, 7, 1, 6, 4, 7, 0, 2, 2, 2, 2, 1, 8, 2, 3, 6, 0, 1, 3, 1, 2, 8, 9, 8, 1, 1, 6, 5, 6, 2, 4, 2, 5], [1, 1, 2, 0, 2, 2, 2, 1, 1, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1, 0, 3, 1, 2, 3, 2, 3], [6, 85, 26, 10, 42, 68, 27, 53, 33], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7942857146263123, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2310636688169945, 1.8012258813617692, 1.2767457270650595, 1.0844687737682948, 0.9676231302369178, 0.9301463619923594, 0.8581443529292152, 0.7993518266821455, 0.79536841219096, 0.7824664363897613, 0.742307407264586, 0.7351204745049301, 0.710458672034065, 0.6989900934430099, 0.6875022991049039, 0.6802484724169252, 0.6817819554146648, 0.6536399759809811, 0.6435649045517321, 0.6440589427711816, 0.6376623310480356, 0.6188623538153945, 0.615113466186861, 0.6249402291613201, 0.6043912294423969, 0.5896995227019769, 0.6007471993583273], "accuracy": [0.23286223411560059, 0.45172369480133057, 0.5612204670906067, 0.6193369626998901, 0.6572447419166565, 0.6616035103797913, 0.6906617283821106, 0.7120591998100281, 0.7100779414176941, 0.7091533541679382, 0.722229540348053, 0.7252674698829651, 0.7387399077415466, 0.744419515132904, 0.7412495017051697, 0.7375511527061462, 0.7421740889549255, 0.7568352818489075, 0.7621186375617981, 0.7576277852058411, 0.7597411274909973, 0.7683265209197998, 0.765949010848999, 0.7642319202423096, 0.7783648371696472, 0.7817989587783813, 0.77677983045578], "val_loss": [1.7519291469029017, 1.0930206775665283, 0.8602140630994525, 0.7157441207340786, 0.777485728263855, 0.6329616819109235, 0.6013276066098895, 0.6189948150089809, 0.6029487677982875, 0.5589236191340855, 0.5494182620729718, 0.5413610935211182, 0.56290602684021, 0.5241728339876447, 0.5325593778065273, 0.5449008941650391, 0.5012921094894409, 0.49865639209747314, 0.5055561917168754, 0.5127366610935756, 0.5036336353846959, 0.48731229986463276, 0.4781860964638846, 0.4992480107716152, 0.4722715105329241, 0.47885325976780485, 0.4892101458140782], "val_accuracy": [0.5393333435058594, 0.6039999723434448, 0.6520000100135803, 0.7016666531562805, 0.6470000147819519, 0.7243333458900452, 0.734000027179718, 0.7149999737739563, 0.7226666808128357, 0.7519999742507935, 0.7509999871253967, 0.753000020980835, 0.7519999742507935, 0.7646666765213013, 0.7549999952316284, 0.7366666793823242, 0.7820000052452087, 0.7803333401679993, 0.7823333144187927, 0.7676666378974915, 0.7760000228881836, 0.7889999747276306, 0.7836666703224182, 0.7749999761581421, 0.7873333096504211, 0.7863333225250244, 0.784333348274231]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7828571200370789, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1407301344057164, 1.4155641297591188, 1.0974036901067388, 0.9758365282513572, 0.863782828659697, 0.8131044812725835, 0.7761796554475491, 0.7618616017226483, 0.7268982609863593, 0.6998813397313437, 0.716901942329825, 0.6728241841838093, 0.6600298157315827, 0.6661492342631484, 0.6469644017113104, 0.6341692099969904, 0.6359409400421977, 0.6200630077990118], "accuracy": [0.29362040758132935, 0.5177651643753052, 0.6118082404136658, 0.6498481035232544, 0.6819442510604858, 0.7020208835601807, 0.7150970697402954, 0.718399167060852, 0.7308149337768555, 0.7432307600975037, 0.7306828498840332, 0.744419515132904, 0.7528728246688843, 0.7477215528488159, 0.7564390301704407, 0.7561748623847961, 0.759609043598175, 0.7621186375617981], "val_loss": [1.3522603511810303, 0.8382190806525094, 0.7932509524481637, 0.6889431476593018, 0.6432496309280396, 0.5882111276899066, 0.5867119005748204, 0.5949597358703613, 0.5959841864449638, 0.5538536480494908, 0.5373328924179077, 0.5390022311891828, 0.5073316778455462, 0.504779509135655, 0.5169121537889753, 0.5047708238874163, 0.5155461515699115, 0.5294162034988403], "val_accuracy": [0.5830000042915344, 0.6786666512489319, 0.6503333449363708, 0.6943333148956299, 0.7149999737739563, 0.7396666407585144, 0.7386666536331177, 0.7243333458900452, 0.7423333525657654, 0.7540000081062317, 0.753333330154419, 0.7443333268165588, 0.7743333578109741, 0.7743333578109741, 0.765333354473114, 0.7733333110809326, 0.7666666507720947, 0.7453333139419556]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 2, 3, 2, 9, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 6, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 0, 0, 2, 1], [6, 67, 7, 81, 61, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7342857122421265, "mapping_values": [1, 42, 42, 24, 18, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.square(grad)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), grad))))))), tf.math.add(alpha, grad))), alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.297802054351426, 2.2866352098870824, 2.273620382260338, 2.261515384053573, 2.249474602100824, 2.234904904580308, 2.2195443886303554, 2.199423063322538, 2.1795615874985663, 2.1568336046886736, 2.124059086131886, 2.095702511460286, 2.05701713564531, 2.0105772258079346, 1.9722220726678275, 1.916162292388263, 1.8600042361184008, 1.8028678897821893, 1.743047132184713, 1.6780952146701715, 1.6277578414439084, 1.5655116922804047, 1.5201343433684709, 1.4836183972346737, 1.4205361643739427, 1.3764117960255333, 1.3522444726170297, 1.3157758536418793, 1.2812734607849705, 1.2733709718793407, 1.2367928133601636, 1.2105203353339937, 1.191155404541329, 1.161145987700887, 1.1411029045466246, 1.1315657481730275, 1.1105403726630916, 1.1035865361207764, 1.0934176360926278, 1.0808601179426498, 1.0552852817294054, 1.0447172151816724, 1.0450931605630154, 1.028554474200555, 1.0132340581945187, 1.004286743457433, 0.9921465336197891, 0.9854839649560697, 0.9738979227570275, 0.9765671017682941, 0.9658442027045121, 0.9521804836841543, 0.9374049971163816, 0.935065704219613, 0.9270625955959936, 0.9253660986814296, 0.9223474634479396, 0.9057670847110902, 0.9061063227557771, 0.896006010550518, 0.8915537638340518, 0.882393490731236, 0.8813408374109319, 0.8786083670056744, 0.8768959160588594, 0.8716055276828152, 0.8530902259495626, 0.8500909335372974, 0.8526571333258773, 0.8534940648718187, 0.8484236306407905, 0.8464102823232631, 0.8351837675868402, 0.8324791835031773, 0.830262360547937, 0.8200665679684624], "accuracy": [0.09853387624025345, 0.12429005652666092, 0.16629242897033691, 0.19204860925674438, 0.22678641974925995, 0.25478801131248474, 0.2740721106529236, 0.30022454261779785, 0.3209615647792816, 0.337339848279953, 0.36705851554870605, 0.37141725420951843, 0.39624884724617004, 0.41606128215789795, 0.4123629629611969, 0.4377228915691376, 0.44128912687301636, 0.4600449204444885, 0.46704530715942383, 0.48408401012420654, 0.4896314740180969, 0.5082551836967468, 0.5144630670547485, 0.5202747583389282, 0.5419363379478455, 0.5458987951278687, 0.5497292280197144, 0.5587108731269836, 0.5694096088409424, 0.5696737766265869, 0.5781270861625671, 0.5885615944862366, 0.5906749367713928, 0.5992603302001953, 0.6053361296653748, 0.6077136397361755, 0.6218464970588684, 0.611411988735199, 0.6232994198799133, 0.6250165104866028, 0.6367719173431396, 0.6306960582733154, 0.63096022605896, 0.6355831623077393, 0.644300639629364, 0.6474705934524536, 0.6478668451309204, 0.6557918190956116, 0.6579051613807678, 0.6544709801673889, 0.6606789231300354, 0.6616035103797913, 0.665830135345459, 0.6740192770957947, 0.6675472259521484, 0.6687359809875488, 0.67666095495224, 0.6804913282394409, 0.6744155287742615, 0.6901333928108215, 0.6843217611312866, 0.68101966381073, 0.6808875799179077, 0.687887966632843, 0.6872276067733765, 0.6889446377754211, 0.6902654767036438, 0.6956809163093567, 0.6952846646308899, 0.6960771083831787, 0.6909258961677551, 0.6940959095954895, 0.7016246318817139, 0.6992471218109131, 0.7038700580596924, 0.7103421092033386], "val_loss": [1.9602720396859306, 1.9493614605494909, 1.9380597387041365, 1.9262489591326033, 1.9133826664515905, 1.8989714213779993, 1.882726056235177, 1.8640530450003487, 1.8424194199698312, 1.8176767485482352, 1.7886230604989188, 1.755877903529576, 1.7180004119873047, 1.6745654855455672, 1.6272615364619665, 1.5749554974692208, 1.5184360912867956, 1.4596054894583566, 1.399711983544486, 1.3389857155936105, 1.2807892731257848, 1.2247698988233293, 1.1723517690386092, 1.125617844717843, 1.0816484519413538, 1.0416258062635149, 1.006981406893049, 0.9747592040470668, 0.9463301726749965, 0.9212909426007952, 0.8983826977866036, 0.8776182447160993, 0.8589882680347988, 0.8412696123123169, 0.8249119860785348, 0.8109666109085083, 0.797228387423924, 0.7849206243242536, 0.7739541360310146, 0.7640257052012852, 0.7537365470613752, 0.7444901296070644, 0.7364809342793056, 0.7283714839390346, 0.7204258441925049, 0.713980896132333, 0.7074965579169137, 0.699981689453125, 0.6938346794673375, 0.688713788986206, 0.6838747092655727, 0.6780680928911481, 0.6738725049155099, 0.6686315877096993, 0.6633538688932147, 0.6595452002116612, 0.6556605100631714, 0.6521263633455548, 0.6482924733843122, 0.6447173016411918, 0.6412957395826068, 0.6374632460730416, 0.6344182661601475, 0.6314263343811035, 0.6290097066334316, 0.6256519215447562, 0.622325096811567, 0.6196936709540231, 0.6167227710996356, 0.6140200410570417, 0.6117887156350272, 0.609916125025068, 0.6077070236206055, 0.6049443142754691, 0.6028459583009992, 0.5998294694083077], "val_accuracy": [0.11733333021402359, 0.21933333575725555, 0.3009999990463257, 0.34066668152809143, 0.367333322763443, 0.39366665482521057, 0.4259999990463257, 0.44066667556762695, 0.45633333921432495, 0.4726666808128357, 0.49266666173934937, 0.5043333172798157, 0.518666684627533, 0.5286666750907898, 0.5373333096504211, 0.5429999828338623, 0.5493333339691162, 0.5536666512489319, 0.562333345413208, 0.5703333616256714, 0.5786666870117188, 0.5883333086967468, 0.5993333458900452, 0.612666666507721, 0.6226666569709778, 0.6416666507720947, 0.6543333530426025, 0.6639999747276306, 0.668666660785675, 0.6710000038146973, 0.6766666769981384, 0.6800000071525574, 0.6836666464805603, 0.6866666674613953, 0.6899999976158142, 0.6933333277702332, 0.6953333616256714, 0.6966666579246521, 0.6980000138282776, 0.6990000009536743, 0.7013333439826965, 0.7043333053588867, 0.7076666951179504, 0.7103333473205566, 0.7106666564941406, 0.7143333554267883, 0.7143333554267883, 0.7163333296775818, 0.7170000076293945, 0.7193333506584167, 0.7210000157356262, 0.7223333120346069, 0.7239999771118164, 0.7260000109672546, 0.7269999980926514, 0.7276666760444641, 0.7279999852180481, 0.7289999723434448, 0.7289999723434448, 0.7300000190734863, 0.7306666374206543, 0.7326666712760925, 0.7333333492279053, 0.7329999804496765, 0.734666645526886, 0.7383333444595337, 0.7386666536331177, 0.7413333058357239, 0.7409999966621399, 0.7416666746139526, 0.7446666955947876, 0.7426666617393494, 0.7409999966621399, 0.7426666617393494, 0.7426666617393494, 0.7436666488647461]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [2, 6, 3, 2, 1, 2, 7, 7, 4, 3, 5, 7, 5, 1, 2, 1, 2, 1, 8, 4, 0, 6, 0, 1, 3, 2, 0, 8, 2, 8, 3, 9], [1, 2, 2, 0, 2, 1, 1, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1, 1], [41, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7342857122421265, "mapping_values": [1, 55, 55, 32, 23, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), tf.math.subtract(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(alpha)))))), alpha)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))))))), tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.297802054351426, 2.2866352728691397, 2.273620382260338, 2.261515384053573, 2.2494741567546948, 2.234904490725208, 2.219542958118881, 2.199423198135632, 2.1795634364313408, 2.1568365375426595, 2.124063476516649, 2.0957077386876484, 2.057021215497038, 2.0105820391801967, 1.9722292657541545, 1.9161728614388425, 1.8600162288311561, 1.8028801225825482, 1.7430637694935616, 1.6781161746265802, 1.6277748117861321, 1.5655221150079188, 1.520149297277138, 1.483625326930036, 1.4205458876384705, 1.3764172329516569, 1.352249899308569, 1.3157781453542643, 1.2812855168104391, 1.2733793695290108, 1.236810470411507, 1.2105345500694873, 1.1911658135545, 1.1611648031654707, 1.1411299868471445, 1.131597073086658, 1.11057982778883, 1.1036248898635277, 1.0934469916832807, 1.080888596303459, 1.0553017453494844, 1.0447475166998488, 1.0451044604101547, 1.0285655297088019, 1.013248510451097, 1.0042956808475911, 0.9921551640275258, 0.9854853316824654, 0.9738965872382412, 0.9765753092200229, 0.9658635100432201, 0.9521942229444765, 0.9374136047324862, 0.9350777204404213, 0.9270818325994887, 0.9253577954339912, 0.9223375507648737, 0.9057687115770022, 0.906112787871864, 0.8960120769901803, 0.8915594431466242, 0.8823747086707612, 0.8813123876597226, 0.8786072310376649, 0.8768812780839388, 0.8716142630029143, 0.8530870774213932, 0.8500979714515801, 0.8526519020597901, 0.853479724723303, 0.8484388117021211, 0.8464211636703752, 0.835181344304937, 0.8325061367455884, 0.8302319884426196, 0.8200980529037559], "accuracy": [0.09853387624025345, 0.12429005652666092, 0.16629242897033691, 0.19204860925674438, 0.22678641974925995, 0.25478801131248474, 0.2740721106529236, 0.3000924587249756, 0.3209615647792816, 0.337339848279953, 0.36705851554870605, 0.3715493381023407, 0.39624884724617004, 0.41606128215789795, 0.4123629629611969, 0.4377228915691376, 0.44128912687301636, 0.4600449204444885, 0.46704530715942383, 0.48408401012420654, 0.4897635579109192, 0.5081230998039246, 0.5144630670547485, 0.5202747583389282, 0.5419363379478455, 0.5458987951278687, 0.5497292280197144, 0.5588429570198059, 0.5694096088409424, 0.5696737766265869, 0.5782591700553894, 0.5886936783790588, 0.5909391045570374, 0.5988640785217285, 0.6056002974510193, 0.6075815558433533, 0.6214502453804016, 0.6111478209495544, 0.6234315037727356, 0.6252806782722473, 0.6366398334503174, 0.6308281421661377, 0.63096022605896, 0.6357152462005615, 0.6444327235221863, 0.6474705934524536, 0.6478668451309204, 0.6559239029884338, 0.6579051613807678, 0.6546030640602112, 0.6608110070228577, 0.6616035103797913, 0.6659622192382812, 0.6738871932029724, 0.6674151420593262, 0.6687359809875488, 0.6769251227378845, 0.6800950765609741, 0.6745476126670837, 0.6901333928108215, 0.6843217611312866, 0.6812838315963745, 0.6808875799179077, 0.6882842183113098, 0.6872276067733765, 0.6885483860969543, 0.6901333928108215, 0.6955488324165344, 0.6952846646308899, 0.695813000202179, 0.6910579800605774, 0.6942279934883118, 0.7016246318817139, 0.6995112895965576, 0.7041342258453369, 0.7096816897392273], "val_loss": [1.9602720396859306, 1.9493614605494909, 1.9380597387041365, 1.9262486866542272, 1.9133823258536202, 1.8989708764212472, 1.8827248982020788, 1.8640542030334473, 1.842420986720494, 1.8176806313650948, 1.7886290550231934, 1.7558819907052177, 1.7180046694619315, 1.6745714119502477, 1.6272698129926408, 1.574967418398176, 1.5184499536241804, 1.4596223149980818, 1.399728502546038, 1.3390066623687744, 1.2808071885790144, 1.2247942515781947, 1.172358751296997, 1.125626700265067, 1.0816446713038854, 1.0416288035256522, 1.0069828374045235, 0.9747695582253593, 0.946347883769444, 0.9213107313428607, 0.8984040873391288, 0.8776321751730782, 0.8589977366583688, 0.8412948335920062, 0.8249398640223912, 0.8109882729394096, 0.7972503559929984, 0.7849608659744263, 0.7739959274019513, 0.764067360333034, 0.7537644760949271, 0.7445427690233503, 0.7365430763789585, 0.7284128325326102, 0.7204703262874058, 0.7140078033719744, 0.7075035912649972, 0.6999904428209577, 0.6938263859067645, 0.6887135335377285, 0.6838673012597221, 0.678069029535566, 0.6738589831760952, 0.6686080864497593, 0.6633439064025879, 0.6595429522650582, 0.655672448022025, 0.6521453516823905, 0.6483168601989746, 0.6447269235338483, 0.6413261209215436, 0.6374953304018293, 0.634435738836016, 0.6314308813640049, 0.628990820475987, 0.6256594657897949, 0.6223351785114833, 0.6196972472327096, 0.6167193991797311, 0.6140107257025582, 0.6118052346365792, 0.609906826700483, 0.6077192170279366, 0.6049617188317435, 0.6028401170458112, 0.5998045716966901], "val_accuracy": [0.11733333021402359, 0.21933333575725555, 0.3009999990463257, 0.34066668152809143, 0.367333322763443, 0.39366665482521057, 0.4259999990463257, 0.44066667556762695, 0.45633333921432495, 0.4726666808128357, 0.49266666173934937, 0.5043333172798157, 0.518666684627533, 0.5286666750907898, 0.5373333096504211, 0.5429999828338623, 0.5493333339691162, 0.5536666512489319, 0.562333345413208, 0.5703333616256714, 0.57833331823349, 0.5883333086967468, 0.5993333458900452, 0.612333357334137, 0.6233333349227905, 0.6416666507720947, 0.6543333530426025, 0.6636666655540466, 0.668666660785675, 0.6706666946411133, 0.6766666769981384, 0.6800000071525574, 0.6836666464805603, 0.6869999766349792, 0.6896666884422302, 0.6933333277702332, 0.6956666707992554, 0.6966666579246521, 0.6980000138282776, 0.6990000009536743, 0.7013333439826965, 0.7043333053588867, 0.7076666951179504, 0.7099999785423279, 0.7110000252723694, 0.7143333554267883, 0.7143333554267883, 0.7163333296775818, 0.7170000076293945, 0.7193333506584167, 0.7210000157356262, 0.7223333120346069, 0.7243333458900452, 0.7260000109672546, 0.7269999980926514, 0.7276666760444641, 0.7283333539962769, 0.7289999723434448, 0.7289999723434448, 0.7300000190734863, 0.7300000190734863, 0.7326666712760925, 0.734000027179718, 0.7329999804496765, 0.734333336353302, 0.7383333444595337, 0.7386666536331177, 0.7416666746139526, 0.7409999966621399, 0.7413333058357239, 0.7443333268165588, 0.7426666617393494, 0.7409999966621399, 0.7426666617393494, 0.7423333525657654, 0.7436666488647461]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 4, 3, 2, 1, 1, 6, 7, 1, 6, 5, 7, 5, 9, 2, 2, 2, 9, 8, 2, 0, 6, 0, 4, 3, 9, 2, 8, 9, 8], [1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [6, 67, 98, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7342857122421265, "mapping_values": [1, 31, 31, 17, 14, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))), tf.math.square(grad)), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.297802054351426, 2.2866352728691397, 2.273620382260338, 2.2615152895804864, 2.249474476136709, 2.234904616689323, 2.219543434956039, 2.199423594009355, 2.17956322950379, 2.1568363756157893, 2.1240638454655425, 2.0957071943967067, 2.05702215128445, 2.010582887154875, 1.9722295355692894, 1.9161766152954405, 1.8600186691969425, 1.8028806222979388, 1.7430623797472238, 1.6781130300898988, 1.627775047874375, 1.565528363410618, 1.520150164288143, 1.4836374410407072, 1.4205547927503241, 1.37642685383885, 1.3522619790152914, 1.3157898512152382, 1.281289977026559, 1.273389442280976, 1.2368133306786715, 1.2105419325743527, 1.1911752866542948, 1.1611717983306815, 1.1411250033760902, 1.1315851715246856, 1.1105634749069537, 1.1036164363802636, 1.0934378445471251, 1.0808769652336785, 1.0552941884945382, 1.0447359794260977, 1.045102981717406, 1.0285557184425942, 1.0132427724235014, 1.0042745544768406, 0.9921563655834755, 0.9854651271564739, 0.9738709897948389, 0.9765501384485699, 0.965845826397703, 0.9521826870090941, 0.937399719692319, 0.9350640765585526, 0.9270712884661859, 0.9253412248861237, 0.9223311465603092, 0.9057568749495312, 0.9061027195365154, 0.8960310049564643, 0.8915679777192874, 0.8823571307799914, 0.8813318641682374, 0.8786184734609133, 0.8768871194178544, 0.8716088474119628, 0.853064059290069, 0.850088911293646, 0.8526513742386562, 0.8534986529966245, 0.8484520883119936, 0.8464077743147469, 0.8351794822010398, 0.8325049305683303, 0.8302302475398196, 0.8200936499383267], "accuracy": [0.09853387624025345, 0.12429005652666092, 0.16629242897033691, 0.19204860925674438, 0.22678641974925995, 0.25478801131248474, 0.2740721106529236, 0.3000924587249756, 0.3209615647792816, 0.337339848279953, 0.36705851554870605, 0.37141725420951843, 0.39624884724617004, 0.41606128215789795, 0.4123629629611969, 0.4377228915691376, 0.44128912687301636, 0.45991283655166626, 0.46704530715942383, 0.48408401012420654, 0.4896314740180969, 0.5083872675895691, 0.5145951509475708, 0.5202747583389282, 0.54220050573349, 0.5460308790206909, 0.5495971441268921, 0.5587108731269836, 0.5694096088409424, 0.5698058605194092, 0.5781270861625671, 0.5885615944862366, 0.5906749367713928, 0.599128246307373, 0.605468213558197, 0.6077136397361755, 0.6217144131660461, 0.611411988735199, 0.6232994198799133, 0.6250165104866028, 0.6365077495574951, 0.6308281421661377, 0.6310923099517822, 0.6358473300933838, 0.6444327235221863, 0.6472064256668091, 0.6478668451309204, 0.6563201546669006, 0.6579051613807678, 0.6546030640602112, 0.6608110070228577, 0.6619997620582581, 0.6655659675598145, 0.6737551093101501, 0.6671509742736816, 0.6687359809875488, 0.6769251227378845, 0.6799629926681519, 0.6744155287742615, 0.6900013089179993, 0.6844538450241089, 0.6812838315963745, 0.6807554960250854, 0.6880200505256653, 0.6870955228805542, 0.6890767216682434, 0.6902654767036438, 0.6960771083831787, 0.6951525807380676, 0.6960771083831787, 0.6909258961677551, 0.694360077381134, 0.7014925479888916, 0.6993792057037354, 0.7040021419525146, 0.7099458575248718], "val_loss": [1.9602720396859306, 1.9493614605494909, 1.9380597387041365, 1.9262486866542272, 1.9133825302124023, 1.8989711488996233, 1.8827255793980189, 1.8640538624354772, 1.8424208504813058, 1.8176806994846888, 1.7886278969900948, 1.7558824675423759, 1.718006168093, 1.6745720931461878, 1.6272708347865514, 1.5749707221984863, 1.518451247896467, 1.4596218041011266, 1.3997269017355782, 1.33900819505964, 1.2808097771235876, 1.2247870309012276, 1.1723637580871582, 1.1256307193211146, 1.081662314278739, 1.0416374887738908, 1.006993225642613, 0.974771329334804, 0.9463399478367397, 0.9213017395564488, 0.8983969688415527, 0.8776329244886126, 0.8590007168906075, 0.8412900481905256, 0.8249402897698539, 0.8109838111060006, 0.7972456046513149, 0.7849324771336147, 0.7739745378494263, 0.7640478100095477, 0.7537528617041451, 0.7445075511932373, 0.7365125077111381, 0.7283849886485508, 0.7204393148422241, 0.7139736413955688, 0.7074935776846749, 0.6999652215412685, 0.6938119275229317, 0.6886993816920689, 0.6838669606617519, 0.6780594076429095, 0.6738537209374564, 0.668602705001831, 0.6633299589157104, 0.6595331941332135, 0.655651330947876, 0.6521390676498413, 0.6482810803822109, 0.6447070496422904, 0.6412862539291382, 0.6374543564660209, 0.6344119650976998, 0.6314135619572231, 0.628986086164202, 0.6256556510925293, 0.6223345824650356, 0.6197042635508946, 0.6167163848876953, 0.6140093973704747, 0.6118038552148002, 0.6099023648670742, 0.6077056441988263, 0.6049396310533796, 0.6028365067073277, 0.5998213291168213], "val_accuracy": [0.11733333021402359, 0.21933333575725555, 0.3009999990463257, 0.34066668152809143, 0.367333322763443, 0.39366665482521057, 0.4259999990463257, 0.44066667556762695, 0.45633333921432495, 0.4726666808128357, 0.49266666173934937, 0.5043333172798157, 0.518666684627533, 0.5286666750907898, 0.5373333096504211, 0.5429999828338623, 0.5493333339691162, 0.5536666512489319, 0.562333345413208, 0.5706666707992554, 0.5786666870117188, 0.5886666774749756, 0.5993333458900452, 0.612666666507721, 0.6223333477973938, 0.6416666507720947, 0.6543333530426025, 0.6639999747276306, 0.668666660785675, 0.6710000038146973, 0.6766666769981384, 0.6800000071525574, 0.6836666464805603, 0.6866666674613953, 0.6899999976158142, 0.6933333277702332, 0.6953333616256714, 0.6966666579246521, 0.6980000138282776, 0.6990000009536743, 0.7013333439826965, 0.7046666741371155, 0.7076666951179504, 0.7103333473205566, 0.7110000252723694, 0.7143333554267883, 0.7146666646003723, 0.7163333296775818, 0.7170000076293945, 0.7193333506584167, 0.7213333249092102, 0.7223333120346069, 0.7243333458900452, 0.7260000109672546, 0.7269999980926514, 0.7276666760444641, 0.7279999852180481, 0.7289999723434448, 0.7289999723434448, 0.7303333282470703, 0.7303333282470703, 0.7326666712760925, 0.7336666584014893, 0.7329999804496765, 0.734333336353302, 0.7383333444595337, 0.7386666536331177, 0.7416666746139526, 0.7409999966621399, 0.7413333058357239, 0.7443333268165588, 0.7429999709129333, 0.7409999966621399, 0.7426666617393494, 0.7426666617393494, 0.7436666488647461]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [4, 8, 3, 2, 1, 8, 0, 7, 1, 6, 4, 7, 0, 1, 2, 2, 2, 1, 8, 2, 3, 6, 0, 9, 3, 2, 2, 8, 6, 8, 1, 1, 6, 8, 6, 2, 4, 2, 9], [2, 1, 2, 0, 2, 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0, 3, 2, 1, 3], [6, 85, 98, 4, 42, 68, 27, 53, 33], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7311428785324097, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2325889128955945, 1.8056420742040455, 1.2802545557625462, 1.1035770170125885, 0.9797753925021803, 0.8868405510327126, 0.8585387546042126, 0.79617833118901, 0.7895897084916226, 0.7510980349553181, 0.7565466987222271], "accuracy": [0.23576806485652924, 0.4435345530509949, 0.5583146214485168, 0.6056002974510193, 0.654999315738678, 0.6819442510604858, 0.6837934255599976, 0.7073041796684265, 0.7096816897392273, 0.7271166443824768, 0.7272487282752991], "val_loss": [1.7546304294041224, 1.0946211133684431, 0.9013882023947579, 0.7902204990386963, 0.7007273265293666, 0.6230595622743879, 0.6199233191353934, 0.6443078517913818, 0.5937220028468541, 0.6088297537394932, 0.587338924407959], "val_accuracy": [0.5233333110809326, 0.6043333411216736, 0.6353333592414856, 0.687666654586792, 0.6846666932106018, 0.7369999885559082, 0.7296666502952576, 0.7043333053588867, 0.7300000190734863, 0.7200000286102295, 0.7296666502952576]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 4, 3, 2, 1, 1, 4, 4, 1, 0, 5, 7, 5, 9, 2, 2, 2, 9, 8, 2, 0, 6, 0, 4, 3, 9, 2, 8, 9, 8], [1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [6, 96, 7, 81, 61, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [56, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 2, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 10, 10, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.add(alpha, alpha), tf.math.subtract(grad, tf.math.negative(grad))), grad), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), sigma)), beta)", "other_info": {"loss": [2.3019185605034647, 8.007147693394701, 86.26913581135692, 221.46150326228113, 401.8853774558851, 627.8060880839124], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.97625732421875, 35.988499232700896, 135.6809343610491, 274.05228097098217, 451.4276820591518, 667.2586844308036], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [4, 8, 3, 2, 1, 8, 7, 7, 1, 2, 6, 7, 0, 3, 2, 2, 2, 1, 6, 2, 3, 6, 0, 0, 3, 2, 3, 8, 9, 8, 1, 1, 6, 5, 6, 2, 4, 2, 9], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 1], [6, 85, 98, 10, 42, 68, 27, 53, 33, 21], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [4, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [56, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3024866956336196, 2.3024726589169124, 2.3025018070761587, 2.3025230313997542, 2.3025267486637766, 2.302432289244461], "accuracy": [0.10447761416435242, 0.10566636174917221, 0.10817593336105347, 0.1006472036242485, 0.10500594228506088, 0.10540219396352768], "val_loss": [1.973670278276716, 1.9736662592206682, 1.9736554963248116, 1.9736739567347936, 1.9736810411725725, 1.9736881937299455], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 2, 3, 2, 1, 8, 7, 7, 1, 6, 4, 7, 0, 1, 2, 2, 2, 1, 8, 2, 3, 6, 0, 1, 3, 2, 2, 8, 9, 8, 1, 1, 6, 8, 6, 2, 4, 2, 9], [1, 2, 2, 0, 2, 1, 2, 0, 2, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [6, 85, 98, 10, 42, 68, 27, 53, 33], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302582119812094, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [4, 2, 2, 2, 1, 8, 7, 7, 4, 6, 4, 7, 4, 1, 2, 2, 2, 1, 8, 2, 3, 6, 0, 1, 5, 2, 2, 8, 9, 8, 1, 1, 6, 8, 6, 2, 4, 2, 9], [1, 1, 2, 0, 2, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 3, 2, 2, 3], [6, 85, 98, 10, 42, 68, 27, 53, 33], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 68, 68, 39, 29, 8, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))))), alpha), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), alpha))))))), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))), grad)), grad)))), lambda shape,  alpha, beta, grad: tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302582119812094, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 4, 3, 2, 1, 1, 6, 7, 1, 6, 5, 7, 2, 9, 2, 2, 2, 9, 8, 2, 0, 6, 0, 4, 3, 9, 2, 8, 9, 8], [1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [6, 67, 7, 81, 61, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [74, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 17, 15, 4, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 4, 2, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.square(grad)), tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(alpha, grad), grad))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(alpha), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 4, 3, 5, 7, 5, 1, 2, 1, 2, 1, 8, 4, 0, 6, 0, 1, 3, 2, 0, 8, 2, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [9.742108589780015, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03539822995662689, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [267553.1875, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 3, 0, 1, 9, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 57, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [62, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [5, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 17, 16, 3, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.square(grad)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [2.3028668065222893, 2.3029033357063224, 2.3028457122251513, 2.3027772534997344, 2.302778698843484, 2.3030054642618483], "accuracy": [0.09325055778026581, 0.09655263274908066, 0.09589222073554993, 0.09760929644107819, 0.09496764093637466, 0.09232597798109055], "val_loss": [1.973583493913923, 1.9736127853393555, 1.9736721175057548, 1.97361843926566, 1.9736223902021135, 1.9737319946289062], "val_accuracy": [0.10566666722297668, 0.10566666722297668, 0.09666666388511658, 0.10066666454076767, 0.10066666454076767, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 3, 3, 1, 2, 7, 7, 1, 2, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 3, 0, 1, 3, 2, 0, 8, 9, 8], [2, 2, 2, 0, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 1, 2, 1], [6, 89, 7, 81, 61, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [85, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 7, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 50, 50, 29, 21, 4, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))), alpha)), tf.math.add(alpha, tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(alpha))))))))), tf.math.add(alpha, grad))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(beta)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [9, 4, 3, 2, 1, 1, 6, 7, 1, 6, 5, 7, 5, 3, 2, 8, 2, 9, 8, 2, 0, 6, 0, 4, 3, 9, 2, 8, 9, 8], [1, 2, 2, 0, 2, 1, 2, 0, 2, 2, 0, 1, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [1, 67, 98, 79, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 0, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [2.3019950010710075, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 4, 3, 2, 1, 1, 6, 7, 1, 6, 5, 7, 5, 9, 2, 2, 2, 9, 8, 2, 0, 6, 0, 4, 3, 9, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [2, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 2, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 10, 6, 4, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.sqrt(alpha)), sigma), tf.math.divide_no_nan(tf.math.negative(beta), alpha))", "other_info": {"loss": [2.3026020214809892, 2.3030842712542414, 2.3020548458663685, 2.301769315417039, 2.3030660858779077, 2.3025364587650543], "accuracy": [0.08915598690509796, 0.08572183549404144, 0.09245806187391281, 0.08889182657003403, 0.08875974267721176, 0.08875974267721176], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [69, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 50, 50, 28, 22, 5, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), grad))), alpha), grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(alpha)))))))))))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3026020214809892, 2.3030842712542414, 2.3020548458663685, 2.301769315417039, 2.3030660858779077, 2.3025364587650543], "accuracy": [0.08915598690509796, 0.08572183549404144, 0.09245806187391281, 0.08889182657003403, 0.08875974267721176, 0.08875974267721176], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [4, 2, 3, 2, 1, 8, 7, 7, 1, 6, 4, 7, 0, 1, 2, 2, 2, 1, 8, 2, 3, 6, 0, 1, 3, 2, 2, 8, 9, 8, 1, 1, 6, 8, 6, 2, 4, 2, 9], [0, 1, 2, 0, 2, 1, 2, 1, 2, 1, 1, 1, 2, 0, 1, 1, 2, 1, 0, 0, 1, 1, 2, 0, 0, 3, 2, 2, 3], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.00800000037997961, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [2.308648883296577, 2.325007267883819, 2.3426779909943862, 2.3633802054249897, 2.3931239675993714, 2.429380743746996], "accuracy": [0.07806102186441422, 0.05071985349059105, 0.03209615498781204, 0.02588825859129429, 0.019019944593310356, 0.015453704632818699], "val_loss": [1.9851653235299247, 2.00081239427839, 2.019164902823312, 2.040931224822998, 2.0691468375069753, 2.1074722153799876], "val_accuracy": [0.009999999776482582, 0.004666666500270367, 0.004000000189989805, 0.003666666569188237, 0.004333333112299442, 0.004999999888241291]}}]