[{"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 1, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8102856874465942, "mapping_values": [1, 2, 2, 1, 1, 1, 57, 57, 33, 24, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad))), tf.math.add(beta, beta))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(alpha))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(alpha, tf.math.negative(beta))))))))), grad)))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.pow(grad, alpha), tf.math.add(beta, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, grad))))))), alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9420381900955894, 1.3965108224728702, 0.989919139748126, 0.9333054657861651, 0.8374806048769, 0.7618132595372883, 0.7216125721503809, 0.7140370289789073, 0.7052784244602603, 0.648350787106097, 0.6387590202184921, 0.6120704420726722, 0.6140588866154343, 0.5728473371014603, 0.57837338069521, 0.5751615637691186, 0.5664132294196966, 0.5259971843577017, 0.5546074130862317, 0.5469900419636173, 0.5118921953830988, 0.5127980252298555, 0.5159956564945457, 0.49142859206381034, 0.4770396756867628, 0.48344746677630834, 0.4586270449498798, 0.4701914704274256, 0.4639408259485628, 0.44947697620397514, 0.44710938824780344, 0.4314385266698284, 0.4205370556291037, 0.44053018742217964, 0.431953830359839, 0.4124129598387291], "accuracy": [0.3481706380844116, 0.5041606426239014, 0.6304318904876709, 0.6577730774879456, 0.6859067678451538, 0.711530864238739, 0.72672039270401, 0.7236824631690979, 0.7301545143127441, 0.750759482383728, 0.7593448758125305, 0.7677981853485107, 0.7589486241340637, 0.7803460359573364, 0.7783648371696472, 0.7802139520645142, 0.783119797706604, 0.8018755912780762, 0.7887993454933167, 0.7917051911354065, 0.8078193068504333, 0.806630551815033, 0.8013472557067871, 0.8144234418869019, 0.8133667707443237, 0.8120459914207458, 0.8249900937080383, 0.8261788487434387, 0.8253863453865051, 0.83119797706604, 0.8302733898162842, 0.8416325449943542, 0.841500461101532, 0.837537944316864, 0.8391229510307312, 0.8433496356010437], "val_loss": [1.4023589406694685, 0.7908427885600499, 0.7133099351610456, 0.713673438344683, 0.590693473815918, 0.6273338624409267, 0.5767518622534615, 0.5801690135683332, 0.52268385887146, 0.5268232822418213, 0.49025813170841764, 0.529922502381461, 0.4834200654711042, 0.5065374204090664, 0.4670393807547433, 0.49336494718279156, 0.4922564370291574, 0.46588970933641705, 0.4482725518090384, 0.4411376714706421, 0.42487857171467375, 0.4746314457484654, 0.422651469707489, 0.40868520736694336, 0.41005925621305195, 0.41781647716249737, 0.4077282803399222, 0.42625822339739117, 0.3865186401775905, 0.3889131716319493, 0.38720421280179707, 0.37867529903139385, 0.3831238491194589, 0.4209764429501125, 0.4019174150058201, 0.39249032735824585], "val_accuracy": [0.5139999985694885, 0.621666669845581, 0.6809999942779541, 0.7089999914169312, 0.7333333492279053, 0.706333339214325, 0.7276666760444641, 0.7519999742507935, 0.7609999775886536, 0.765333354473114, 0.781000018119812, 0.7473333477973938, 0.7853333353996277, 0.7746666669845581, 0.7983333468437195, 0.781000018119812, 0.777999997138977, 0.79666668176651, 0.8076666593551636, 0.815666675567627, 0.8149999976158142, 0.7883333563804626, 0.8159999847412109, 0.8180000185966492, 0.8286666870117188, 0.8140000104904175, 0.8286666870117188, 0.8046666383743286, 0.8370000123977661, 0.8286666870117188, 0.8399999737739563, 0.8383333086967468, 0.8333333134651184, 0.8086666464805603, 0.8173333406448364, 0.8299999833106995]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [73, 80, 61], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 6, 1, 3, 0, 2, 4, 3, 0, 4, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 3, 2, 1, 3, 3, 1, 0, 1, 3, 5, 1, 3, 5, 1, 0, 3, 3, 2, 2, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8091428279876709, "mapping_values": [1, 2, 2, 1, 1, 0, 59, 59, 34, 25, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)))), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, alpha)), tf.math.sqrt(grad))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.square(alpha)), tf.math.add(beta, tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(grad))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), beta), tf.math.add(beta, grad))))))))), tf.math.add(beta, alpha)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9420415098483552, 1.3972125436494127, 0.9941857303327274, 0.9490577097991517, 0.8172227682029377, 0.7544783235556729, 0.7552454015361855, 0.7020407584931919, 0.6721148778103945, 0.6490705488474772, 0.6542485561573652, 0.6126851555205544, 0.6072345427423814, 0.5664137475888302, 0.5775752096695119, 0.5703454251853687, 0.5511271073644691, 0.5292595225066368, 0.5441064380336637, 0.542185327892117, 0.5101565711644064, 0.5087480201870459, 0.5107752329968442, 0.48842060106573104, 0.46797218640892024, 0.4776641547034335, 0.45322440688037885, 0.4664120622960379, 0.4612115537406998, 0.4474327139858525, 0.44492169033345796, 0.4302365599787388, 0.4124946656275608, 0.4330026630153273, 0.42802923680013116, 0.4087565129915831, 0.4015277025918793, 0.4013083167300327, 0.3880973545284067, 0.3860711995180115, 0.37293711190115997, 0.3926958280027881, 0.3815337154158606, 0.3689567812516343, 0.37751560463660966, 0.3594155436249583, 0.3545927718338823], "accuracy": [0.3481706380844116, 0.5050851702690125, 0.6259410977363586, 0.6629242897033691, 0.6917183995246887, 0.7141724824905396, 0.7168141603469849, 0.7297582626342773, 0.7500990629196167, 0.752212405204773, 0.7493065595626831, 0.7713643908500671, 0.7614582180976868, 0.7827235460281372, 0.7777044177055359, 0.78113853931427, 0.7938185334205627, 0.7984414100646973, 0.7940827012062073, 0.7928939461708069, 0.8067626357078552, 0.8079513907432556, 0.8070268034934998, 0.8153480291366577, 0.8189142942428589, 0.8162726163864136, 0.8274996876716614, 0.8241975903511047, 0.8239334225654602, 0.8321225643157959, 0.8318583965301514, 0.8397833704948425, 0.8417646288871765, 0.8396512866020203, 0.8430854678153992, 0.8457271456718445, 0.8524633646011353, 0.8496896028518677, 0.8598600029945374, 0.854708731174469, 0.8601241707801819, 0.8536521196365356, 0.8564258217811584, 0.8651432991027832, 0.8578787446022034, 0.8692378997802734, 0.8664641380310059], "val_loss": [1.4024489266531808, 0.7885589940207345, 0.8348117555890765, 0.7365868602480207, 0.6419345481055123, 0.5615137304578509, 0.5614342519215175, 0.6033438784735543, 0.5273263965334211, 0.5002180337905884, 0.5014817714691162, 0.5482478993279594, 0.4745537723813738, 0.47926480429513113, 0.47579446860722135, 0.48038108008248465, 0.47707980019705637, 0.4682337726865496, 0.4566409247262137, 0.4391369138445173, 0.41993928807122366, 0.45578486578805105, 0.42455909081867765, 0.4050165244511196, 0.4106298089027405, 0.427508430821555, 0.4274124332836696, 0.41814171416418894, 0.3830134017126901, 0.3859890103340149, 0.3908833009856088, 0.37462719849177767, 0.3817014694213867, 0.4229064328329904, 0.38885216202054707, 0.38989330189568655, 0.37053034135273527, 0.37147139651434763, 0.35680558000292095, 0.35675048828125, 0.38478360005787443, 0.35641333886555265, 0.36350492920194355, 0.3641405020441328, 0.36385717562266756, 0.3717191049030849, 0.3980848363467625], "val_accuracy": [0.5139999985694885, 0.621999979019165, 0.6356666684150696, 0.6543333530426025, 0.6983333230018616, 0.7440000176429749, 0.746999979019165, 0.737666666507721, 0.765666663646698, 0.7699999809265137, 0.7850000262260437, 0.7396666407585144, 0.7879999876022339, 0.7846666574478149, 0.7863333225250244, 0.7860000133514404, 0.7903333306312561, 0.7993333339691162, 0.7979999780654907, 0.8190000057220459, 0.8209999799728394, 0.8026666641235352, 0.8080000281333923, 0.8233333230018616, 0.8286666870117188, 0.8106666803359985, 0.8090000152587891, 0.8090000152587891, 0.8376666903495789, 0.8296666741371155, 0.8363333344459534, 0.8429999947547913, 0.8323333263397217, 0.8100000023841858, 0.8276666402816772, 0.8316666483879089, 0.846666693687439, 0.843999981880188, 0.8510000109672546, 0.8496666550636292, 0.8420000076293945, 0.8513333201408386, 0.8489999771118164, 0.8506666421890259, 0.8513333201408386, 0.8333333134651184, 0.8383333086967468]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 3, 1, 4, 4, 9, 3, 2, 9, 6, 2, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.808571457862854, "mapping_values": [1, 2, 2, 2, 0, 1, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9420694828883704, 1.397012842707646, 1.005632559731337, 0.9515117802136231, 0.8151130579119708, 0.7527860486512139, 0.7418036329243964, 0.7003200175172979, 0.6804871911212769, 0.6538626613744167, 0.6268670324321278, 0.6147072518569383, 0.6033492186176244, 0.5524823976592806, 0.5855002873577793, 0.5810512350125477, 0.5565403804503821, 0.5310804381850468, 0.5434481999531178, 0.5417850148707742, 0.5090838839758688, 0.5099118028011745, 0.5121001592480416, 0.48784487947118976, 0.47516383383614497, 0.48180086057514576, 0.4533866333167913, 0.47773861722104727, 0.4586142967122342, 0.4492390242628748, 0.45167811204492453, 0.43383656682481286, 0.41684000341096467, 0.4306573163933994, 0.42760417163332676, 0.41252471374136473, 0.4061848286663804, 0.39788732378238134, 0.395637184964069, 0.38608782258504226, 0.38184270467803527, 0.38972413852828575, 0.38175977459279475, 0.3708557782746608, 0.37817942259680437, 0.35944527012482136, 0.37674897605276003], "accuracy": [0.3481706380844116, 0.5037643909454346, 0.6229031682014465, 0.6643772125244141, 0.6914542317390442, 0.7135120630264282, 0.7174745798110962, 0.7321357727050781, 0.739400327205658, 0.746268630027771, 0.7692511081695557, 0.7662131786346436, 0.7667415142059326, 0.7921014428138733, 0.7689869403839111, 0.7773081660270691, 0.7880068421363831, 0.7964601516723633, 0.7923656105995178, 0.7943468689918518, 0.8080834746360779, 0.8058380484580994, 0.8020076751708984, 0.8152159452438354, 0.8185180425643921, 0.8125742673873901, 0.8294808864593506, 0.8216879963874817, 0.82683926820755, 0.8343679904937744, 0.8260467648506165, 0.8391229510307312, 0.841500461101532, 0.8403117060661316, 0.8446704745292664, 0.8424250483512878, 0.850350022315979, 0.8510104417800903, 0.8562937378883362, 0.8560295701026917, 0.86118084192276, 0.852331280708313, 0.8564258217811584, 0.8588033318519592, 0.8558974862098694, 0.8663320541381836, 0.8581429123878479], "val_loss": [1.4031873430524553, 0.785373500415257, 0.9805704184940883, 0.6687948533466884, 0.6249940395355225, 0.5734801292419434, 0.573897089276995, 0.5869728326797485, 0.5285994836262294, 0.5147298915045602, 0.4922126701899937, 0.4996870926448277, 0.4773482765470232, 0.4833882876804897, 0.46764566217150005, 0.4948827879769461, 0.4886498621531895, 0.48051919255937847, 0.45734095573425293, 0.44121967043195454, 0.42105747972215923, 0.4640043463025774, 0.42628852810178486, 0.4079133527619498, 0.4113574538912092, 0.4188839537756784, 0.4132645981652396, 0.41356578043528963, 0.39093823943819317, 0.38629948241370066, 0.3841434802327837, 0.3814146944454738, 0.37764163528169903, 0.4554726907185146, 0.3914378115109035, 0.3958847437586103, 0.37183902093342375, 0.37704896926879883, 0.3704680119241987, 0.3592243790626526, 0.4036938462938581, 0.35820978028433664, 0.36504049812044415, 0.35812983342579435, 0.36377252851213726, 0.36075342553002493, 0.3929480654852731], "val_accuracy": [0.5133333206176758, 0.6293333172798157, 0.612666666507721, 0.7089999914169312, 0.7073333263397217, 0.7390000224113464, 0.7429999709129333, 0.7426666617393494, 0.7643333077430725, 0.7730000019073486, 0.7866666913032532, 0.7786666750907898, 0.7910000085830688, 0.7856666445732117, 0.7986666560173035, 0.7770000100135803, 0.7716666460037231, 0.7950000166893005, 0.8006666898727417, 0.8166666626930237, 0.8199999928474426, 0.7933333516120911, 0.8080000281333923, 0.8199999928474426, 0.8256666660308838, 0.8140000104904175, 0.8220000267028809, 0.812333345413208, 0.8339999914169312, 0.8316666483879089, 0.8373333215713501, 0.8403333425521851, 0.8420000076293945, 0.7876666784286499, 0.8266666531562805, 0.828000009059906, 0.8429999947547913, 0.840666651725769, 0.8456666469573975, 0.8473333120346069, 0.8276666402816772, 0.8519999980926514, 0.847000002861023, 0.8503333330154419, 0.8503333330154419, 0.8483333587646484, 0.8343333601951599]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8082857131958008, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 3, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9420435650946049, 1.3973840140175307, 0.9930029554358248, 0.947082076602057, 0.8188417127355687, 0.7571689962569229, 0.7322746301449963, 0.7106597340495878, 0.6732684854251235, 0.6506517172694254, 0.6470464399745515, 0.6160988828304846, 0.607265619632669, 0.5541583985905086, 0.6068595181429753, 0.5575987007623934, 0.5567659459109666, 0.5339817191710199, 0.5456917415740956, 0.5421188808687296, 0.5062818537534992, 0.5138085361689687, 0.5159732652866231, 0.49075748550106174, 0.473206156268647, 0.48044863068479604, 0.4532683248556742, 0.46748957546505837, 0.4580341085679401, 0.45322598451400364, 0.4497636905978967, 0.4355453241652407, 0.41387176948641713, 0.43399515799984184, 0.42490452462262357, 0.41141923533423136], "accuracy": [0.3481706380844116, 0.5038964748382568, 0.625148594379425, 0.6664905548095703, 0.6885483860969543, 0.7141724824905396, 0.7166820764541626, 0.7289658188819885, 0.7437590956687927, 0.7481178045272827, 0.7585523724555969, 0.7671377658843994, 0.76106196641922, 0.7876105904579163, 0.7692511081695557, 0.7902522683143616, 0.7895918488502502, 0.7955356240272522, 0.7931581139564514, 0.7948752045631409, 0.8100647330284119, 0.8068947196006775, 0.8050455451011658, 0.8133667707443237, 0.817461371421814, 0.8132346868515015, 0.8285563588142395, 0.8245938420295715, 0.828820526599884, 0.8305375576019287, 0.8259146809577942, 0.8404437899589539, 0.8433496356010437, 0.8408400416374207, 0.8425571322441101, 0.846387505531311], "val_loss": [1.402545997074672, 0.7858744008200509, 0.8850066832133702, 0.7357175350189209, 0.640269568988255, 0.6044201510293143, 0.5489353793007987, 0.5696553332465035, 0.54454505443573, 0.521272965839931, 0.49808015142168316, 0.5257697786603656, 0.4725616318838937, 0.5190667424883161, 0.4539746216365269, 0.4928221361977713, 0.4775106055395944, 0.47709708554404123, 0.44937130383082796, 0.440091678074428, 0.4204052346093314, 0.4599782739366804, 0.4343642592430115, 0.4085467883518764, 0.41418239048549105, 0.4177217824118478, 0.40236975465502056, 0.4119443552834647, 0.3879301888602121, 0.38728612661361694, 0.3856317826679775, 0.37719457490103586, 0.3834089381354196, 0.4116185052054269, 0.3906936390059335, 0.3902201397078378], "val_accuracy": [0.5139999985694885, 0.6266666650772095, 0.6276666522026062, 0.6586666703224182, 0.6983333230018616, 0.7146666646003723, 0.7540000081062317, 0.7396666407585144, 0.7459999918937683, 0.7566666603088379, 0.777999997138977, 0.7463333606719971, 0.7929999828338623, 0.7570000290870667, 0.8013333082199097, 0.7726666927337646, 0.7876666784286499, 0.7943333387374878, 0.8043333292007446, 0.8173333406448364, 0.8166666626930237, 0.7956666946411133, 0.8050000071525574, 0.8203333616256714, 0.8236666917800903, 0.8159999847412109, 0.8353333473205566, 0.8133333325386047, 0.8346666693687439, 0.8316666483879089, 0.8399999737739563, 0.8399999737739563, 0.8383333086967468, 0.8130000233650208, 0.8276666402816772, 0.8306666612625122]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [3, 0, 1, 4, 0, 2, 3, 8, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 3, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8074285984039307, "mapping_values": [1, 2, 2, 1, 1, 1, 29, 29, 17, 12, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad))), tf.math.add(beta, grad))))))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, grad))))), beta)))), tf.math.pow(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9420408490091157, 1.3971327033261456, 0.9903176008607922, 0.9519087676563598, 0.8148823110749615, 0.7835610774309407, 0.7160462659536777, 0.7138864372258709, 0.683547994857766, 0.6383803571534903, 0.6630588276290843, 0.6106196254975981, 0.6053171406301131, 0.5629555424757763, 0.5715822066692015, 0.5825594859651649, 0.5503105412085673, 0.5214784224043433, 0.5497613784470468, 0.5397447233013646, 0.5078074918321064, 0.5096640939080185, 0.5141347678755379, 0.4878459420926567, 0.46708826206426707, 0.4761268298670978, 0.4526705513808548, 0.46381931719196123, 0.45736380066098226, 0.44871240681062646, 0.4426883528410814, 0.4281955506461187, 0.41135311316442436, 0.43249640293865155, 0.4247816685774638, 0.407161884965394, 0.40185278401383007, 0.4011926824634637, 0.38785276973425453, 0.384968672190297, 0.3711459560086305, 0.3888158614743167, 0.37631956590731946, 0.3662789549219484, 0.3666148826178779, 0.35456699805646413, 0.3546470543727615, 0.37834514160481236, 0.34508423182659176], "accuracy": [0.3481706380844116, 0.5048210024833679, 0.6287148594856262, 0.6584334969520569, 0.6975300312042236, 0.7071720957756042, 0.7269845604896545, 0.7294940948486328, 0.7446836829185486, 0.7574957013130188, 0.7464007139205933, 0.7705719470977783, 0.7643640041351318, 0.7865539789199829, 0.78113853931427, 0.7770439982414246, 0.7946110367774963, 0.8031964302062988, 0.7918372750282288, 0.7935543656349182, 0.8079513907432556, 0.8050455451011658, 0.8050455451011658, 0.81548011302948, 0.8190463781356812, 0.8161405324935913, 0.8289526104927063, 0.8272355198860168, 0.8278959393501282, 0.8338396549224854, 0.832650899887085, 0.8421608805656433, 0.8454629778862, 0.8389908671379089, 0.8441421389579773, 0.8469158411026001, 0.8519350290298462, 0.8525954484939575, 0.8605204224586487, 0.8553691506385803, 0.8647470474243164, 0.8540483713150024, 0.8577466607093811, 0.8627657890319824, 0.8607845902442932, 0.8708229064941406, 0.8651432991027832, 0.8590674996376038, 0.8729361891746521], "val_loss": [1.402432646070208, 0.7897962161472866, 0.8115102393286568, 0.693777220589774, 0.6956435782568795, 0.5521436929702759, 0.5504610197884696, 0.6203867367335728, 0.526785135269165, 0.4995100327900478, 0.4941950525556292, 0.5392592293875558, 0.4722130809511457, 0.48647260665893555, 0.4695082902908325, 0.4804129089627947, 0.47565516403743197, 0.4686164855957031, 0.44967630931309294, 0.4404958656855992, 0.4189665743282863, 0.4584754875728062, 0.4215718082019261, 0.40633510691779, 0.40184719221932547, 0.4176234858376639, 0.4227932606424604, 0.4195443902696882, 0.38932829243796213, 0.3868814195905413, 0.3870808907917568, 0.3763325810432434, 0.3774244615009853, 0.439568110874721, 0.39470986809049335, 0.3811194726399013, 0.37548192909785677, 0.37227825607572285, 0.36218273639678955, 0.3540869780949184, 0.39750791447503225, 0.3563921707017081, 0.35728196586881367, 0.3489943657602583, 0.36918643542698454, 0.37260909591402325, 0.43188416957855225, 0.36547314269202097, 0.3619430490902492], "val_accuracy": [0.5139999985694885, 0.6206666827201843, 0.640999972820282, 0.6916666626930237, 0.675000011920929, 0.7613333463668823, 0.7486666440963745, 0.7120000123977661, 0.7673333287239075, 0.7706666588783264, 0.7836666703224182, 0.7393333315849304, 0.793666660785675, 0.7823333144187927, 0.796999990940094, 0.7886666655540466, 0.7893333435058594, 0.7993333339691162, 0.8029999732971191, 0.812333345413208, 0.8203333616256714, 0.7963333129882812, 0.8056666851043701, 0.8203333616256714, 0.8296666741371155, 0.8163333535194397, 0.8143333196640015, 0.8096666932106018, 0.8373333215713501, 0.8276666402816772, 0.8360000252723694, 0.8393333554267883, 0.8413333296775818, 0.7973333597183228, 0.8256666660308838, 0.8353333473205566, 0.8429999947547913, 0.8423333168029785, 0.8473333120346069, 0.8503333330154419, 0.8326666951179504, 0.847000002861023, 0.8513333201408386, 0.8553333282470703, 0.8483333587646484, 0.8336666822433472, 0.8243333101272583, 0.8453333377838135, 0.8489999771118164]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 3, 1, 4, 4, 9, 3, 3, 9, 6, 6, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7940000295639038, "mapping_values": [1, 2, 2, 1, 1, 1, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.multiply(beta, tf.math.add(beta, grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9921922484377608, 1.494778442124586, 1.0669346212899884, 0.9276714624509583, 0.8248184135073228, 0.7747449691757597, 0.7465198910735491, 0.6937865304468236, 0.7241111558347472, 0.6911895075620299, 0.6608423887226859, 0.6374882684328993, 0.6120218731755231, 0.6129652072866564, 0.5815457781197892, 0.5939890776390979, 0.5582057217549591, 0.5438378970809759, 0.5551871955591564, 0.5464024975425484, 0.5216954938448368], "accuracy": [0.33839651942253113, 0.5013868808746338, 0.6048077940940857, 0.648659348487854, 0.6956809163093567, 0.7074362635612488, 0.7103421092033386, 0.733060359954834, 0.7220974564552307, 0.7378153204917908, 0.741909921169281, 0.7461365461349487, 0.7725531458854675, 0.7677981853485107, 0.7766477465629578, 0.7697794437408447, 0.7927618622779846, 0.7981772422790527, 0.7902522683143616, 0.793950617313385, 0.8063663840293884], "val_loss": [1.613436494554792, 0.8320469515664237, 0.7052525111607143, 0.7117508820125035, 0.599059019769941, 0.6443538836070469, 0.5449709211077008, 0.6207205397742135, 0.6325534752437046, 0.5564522743225098, 0.5293617759432111, 0.4985347305025373, 0.4744442531040737, 0.4756267581667219, 0.48789048194885254, 0.4541546276637486, 0.4681748492377145, 0.46192686898367746, 0.45748952456883024, 0.48707875183650423, 0.4383264865194048], "val_accuracy": [0.40166667103767395, 0.6703333258628845, 0.6589999794960022, 0.6759999990463257, 0.7300000190734863, 0.7076666951179504, 0.749666690826416, 0.7139999866485596, 0.7023333311080933, 0.7509999871253967, 0.762666642665863, 0.7630000114440918, 0.7829999923706055, 0.7913333177566528, 0.768666684627533, 0.8059999942779541, 0.7883333563804626, 0.7863333225250244, 0.7993333339691162, 0.7663333415985107, 0.8036666512489319]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 8, 1, 4, 6, 2, 5, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7925714254379272, "mapping_values": [1, 2, 2, 1, 1, 1, 17, 17, 11, 6, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, beta)))))))))))))), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0761464715019713, 1.6769264512735351, 1.2639815144771283, 0.9738192658193863, 0.8774293538617451, 0.7890986340897131, 0.797771977876014, 0.7479860838047502, 0.6855398789136763, 0.7073837867297705, 0.697282104806468, 0.6330601301616476, 0.6577826768431476, 0.6369230040249304, 0.6059936237624922, 0.6076724720653085, 0.5961548291681119, 0.5708325566349248], "accuracy": [0.32082948088645935, 0.45145952701568604, 0.5670320987701416, 0.6328094005584717, 0.6691322326660156, 0.698190450668335, 0.6976621150970459, 0.7123233675956726, 0.7407211661338806, 0.7322678565979004, 0.7351737022399902, 0.7644960880279541, 0.7485140562057495, 0.7582882046699524, 0.769911527633667, 0.7711002230644226, 0.7775723338127136, 0.7829877138137817], "val_loss": [1.8582940782819475, 1.0972793102264404, 0.7937472036906651, 0.7281807490757534, 0.630773799760001, 0.6219381264277867, 0.5779467480523246, 0.5650818858827863, 0.5661759206226894, 0.6190909658159528, 0.5095204285212925, 0.5116382666996547, 0.5000317437308175, 0.4888327973229544, 0.5002139977046421, 0.4911837748118809, 0.493614707674299, 0.5276313849857875], "val_accuracy": [0.27166667580604553, 0.49266666173934937, 0.6669999957084656, 0.6690000295639038, 0.7143333554267883, 0.7153333425521851, 0.7360000014305115, 0.7423333525657654, 0.7506666779518127, 0.715666651725769, 0.7749999761581421, 0.7706666588783264, 0.7856666445732117, 0.7733333110809326, 0.7799999713897705, 0.7776666879653931, 0.7786666750907898, 0.762666642665863]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 6, 1, 3, 0, 2, 4, 3, 0, 4, 0, 6, 1, 6, 8, 6, 4, 6, 5, 5, 6, 2, 0, 0, 1, 1, 3, 4, 7, 8, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 0, 2, 1, 3, 3, 1, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7908571362495422, "mapping_values": [1, 2, 2, 1, 1, 1, 55, 55, 32, 23, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.square(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(tf.math.negative(tf.math.negative(tf.math.subtract(alpha, grad))), grad))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.subtract(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(alpha, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))))))))), beta)), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0760345655488397, 1.6741256180566615, 1.2643686562733265, 0.9818464103171445, 0.8562803822753452, 0.8358792219856679, 0.7767711458598555, 0.7568019559638155, 0.6896197421439587, 0.6997330413754621, 0.699879279556748, 0.6386174188550153, 0.6586029158292304, 0.6353728762707139, 0.6004521067132095, 0.6094871292796353, 0.5838243743337581, 0.5716360066592371], "accuracy": [0.3205653131008148, 0.45185577869415283, 0.5719191431999207, 0.6302998065948486, 0.6736230254173279, 0.6794346570968628, 0.7009642124176025, 0.709549605846405, 0.7391361594200134, 0.7372870445251465, 0.7322678565979004, 0.7626469135284424, 0.7453441023826599, 0.7581561207771301, 0.7730814814567566, 0.7709681391716003, 0.7833839654922485, 0.7839123010635376], "val_loss": [1.8574043001447404, 1.0466474464961462, 0.7498688697814941, 0.6486620221819196, 0.6802901029586792, 0.6105949027197701, 0.6021382978984288, 0.5600719962801252, 0.5782427276883807, 0.6099042211260114, 0.5055911540985107, 0.5253707851682391, 0.4990623337881906, 0.48758154256003244, 0.4975406953266689, 0.4933140277862549, 0.48949382986341206, 0.518885578427996], "val_accuracy": [0.27266666293144226, 0.5086666941642761, 0.6816666722297668, 0.7086666822433472, 0.6959999799728394, 0.7153333425521851, 0.7243333458900452, 0.7450000047683716, 0.7443333268165588, 0.7163333296775818, 0.7733333110809326, 0.7633333206176758, 0.7853333353996277, 0.7756666541099548, 0.7836666703224182, 0.778333306312561, 0.7833333611488342, 0.7646666765213013]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 1, 6, 4, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7554285526275635, "mapping_values": [1, 2, 2, 1, 1, 1, 21, 21, 12, 9, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9911240654032007, 1.5181577548437808, 1.0761133565359176, 0.9193843236657308, 0.8561607463453361, 0.8147255942302216, 0.7446292741990533, 0.7059456107166417, 0.7277987853741649, 0.6652755531510814, 0.6468405692238204], "accuracy": [0.3292827904224396, 0.5095760226249695, 0.6073173880577087, 0.6487914323806763, 0.6690001487731934, 0.6946242451667786, 0.7197200059890747, 0.735041618347168, 0.7218332886695862, 0.7524765729904175, 0.7598732113838196], "val_loss": [1.6506173270089286, 0.8987199919564384, 0.753104431288583, 0.6287528446742466, 0.6139966419764927, 0.5659435476575579, 0.5528652667999268, 0.625191296849932, 0.5420760597501483, 0.5531270674296788, 0.5414457150868007], "val_accuracy": [0.5693333148956299, 0.6449999809265137, 0.6446666717529297, 0.70333331823349, 0.7266666889190674, 0.7546666860580444, 0.7493333220481873, 0.7133333086967468, 0.734666645526886, 0.7256666421890259, 0.7490000128746033]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 6, 1, 3, 8, 2, 4, 3, 0, 4, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 1, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [15, 9, 76, 58]], "fitness": -0.5462856888771057, "mapping_values": [1, 2, 2, 1, 1, 1, 16, 16, 8, 8, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302532442241785, 2.298591384798261, 2.298220980956239, 2.2956387140117602, 2.295254781686745, 2.2921314338698693, 2.2914558504676745, 2.288491764403668, 2.2861693710966544, 2.283640726288753, 2.2826884773192924, 2.2804668204124026, 2.279428073081673, 2.276049901560203, 2.276267859158247, 2.273223702051951, 2.272146512614643, 2.268792664826806, 2.266664114831036, 2.264599658778126, 2.2635777022120283, 2.2616095674540215, 2.258770960763839, 2.257235782304854, 2.2542132843502793, 2.2509520252571917, 2.2498469685582343, 2.247983269703434, 2.2465027410907514, 2.244280426147324, 2.2392317207025547, 2.2373749711305364, 2.2384699823487595, 2.233407320048532, 2.2316240402748715, 2.2278738838412964, 2.2263715019347, 2.222647233488632, 2.2201285061189417, 2.2172614385612164, 2.2130550490142396, 2.2099891991238034, 2.2075156149626753, 2.2065966366745338, 2.203883593281766, 2.2012592678639424, 2.196153856932983, 2.1925860907124206, 2.1903329505550078, 2.186047802952696, 2.181464919356181, 2.177958730630367, 2.1749246081404006, 2.171230532064603, 2.165734883108002, 2.1638098312579976, 2.1569174464352616, 2.152666980690251, 2.1485362889004294, 2.1464845405168473, 2.1396391529999765, 2.1330725529473833, 2.130335431451008, 2.129464072164622, 2.1211032545908237, 2.111927093216898, 2.1113754899951176, 2.104909722768179, 2.100076322967445, 2.095464845107389, 2.0859661035533943, 2.0823255451584317, 2.0770797650134796, 2.070672784955699, 2.0657227855899536, 2.058003665528293, 2.051885053859867, 2.049497657463992, 2.038002530896448, 2.032216682819532, 2.0189597855752974, 2.0174786945958227, 2.0079322708690674, 2.003873285395736, 1.9982183754420504, 1.9882178270679818, 1.9789781381803309, 1.9717216380850797, 1.9635884671273596, 1.9550719040259867, 1.9446620749696655, 1.9395929872871562, 1.9313968322249042, 1.9215749940379672, 1.9158522548330394, 1.9056666371781734, 1.8930971758823196, 1.88089668522453, 1.878782311576689, 1.8700463661129103], "accuracy": [0.09681680053472519, 0.10038304328918457, 0.10553427785634995, 0.10566636174917221, 0.10817593336105347, 0.11834631860256195, 0.11517632752656937, 0.12415797263383865, 0.13512085378170013, 0.1328754425048828, 0.13934750854969025, 0.14634791016578674, 0.14278165996074677, 0.15915995836257935, 0.1558578759431839, 0.16880200803279877, 0.1694624274969101, 0.17831197381019592, 0.18002906441688538, 0.18293488025665283, 0.19653943181037903, 0.19759608805179596, 0.20684190094470978, 0.2067098170518875, 0.2156914472579956, 0.22599393129348755, 0.22454100847244263, 0.2238806039094925, 0.23405098915100098, 0.23378682136535645, 0.24976885318756104, 0.25042927265167236, 0.24633470177650452, 0.26059964299201965, 0.25795799493789673, 0.261260062456131, 0.27222296595573425, 0.2751287817955017, 0.28345000743865967, 0.2805441915988922, 0.29362040758132935, 0.2895258367061615, 0.2995641231536865, 0.29322415590286255, 0.29824328422546387, 0.29639413952827454, 0.30722492933273315, 0.3127724230289459, 0.31184783577919006, 0.320169061422348, 0.31898030638694763, 0.32320696115493774, 0.33522653579711914, 0.32967904210090637, 0.3354906737804413, 0.339321106672287, 0.3451327383518219, 0.3537181317806244, 0.3479065001010895, 0.35279354453086853, 0.35781270265579224, 0.35305771231651306, 0.36507725715637207, 0.34724608063697815, 0.3667943477630615, 0.378549724817276, 0.37287017703056335, 0.37022849917411804, 0.37287017703056335, 0.38462555408477783, 0.38502180576324463, 0.3851538896560669, 0.37947431206703186, 0.3895126283168793, 0.38964468240737915, 0.40549466013908386, 0.40245673060417175, 0.39307886362075806, 0.39704135060310364, 0.39743760228157043, 0.4181746244430542, 0.40509840846061707, 0.41962751746177673, 0.40985339879989624, 0.41104212403297424, 0.418570876121521, 0.4233258366584778, 0.419759601354599, 0.4224012792110443, 0.4297979176044464, 0.42742040753364563, 0.4283449947834015, 0.42887333035469055, 0.43243956565856934, 0.4373266398906708, 0.43323206901550293, 0.4340245723724365, 0.44551578164100647, 0.44327038526535034, 0.43745872378349304], "val_loss": [1.9693446159362793, 1.9675443513052804, 1.965759549822126, 1.963972772870745, 1.9621930122375488, 1.9604120254516602, 1.9586320604596819, 1.9568354742867606, 1.9550516264779227, 1.953277928488595, 1.9514812741960799, 1.9496782847813197, 1.9478746141706194, 1.9460651533944267, 1.9442436354500907, 1.9424193246023995, 1.940589427947998, 1.9387226785932268, 1.9368456431797572, 1.9349163600376673, 1.9329896654401506, 1.9310381753104073, 1.929067543574742, 1.9270728656223841, 1.9250505992344447, 1.9229694093976701, 1.920874731881278, 1.9187404768807548, 1.9165846960885184, 1.9143850462777274, 1.9121078763689314, 1.9098238945007324, 1.9075123241969518, 1.905137607029506, 1.9027238573346819, 1.9002513885498047, 1.8977060999189104, 1.8951409884861536, 1.8925059182303292, 1.8898187364850725, 1.8870518548148019, 1.8842496190752303, 1.8813882555280412, 1.8784420149666923, 1.875441006251744, 1.872389793395996, 1.8692453248160226, 1.8660259928022112, 1.8627473286220007, 1.8593758174351283, 1.8559163638523646, 1.852353777204241, 1.8487059048243932, 1.8449925013950892, 1.8411879539489746, 1.8373198509216309, 1.8333209582737513, 1.8292030606951033, 1.8250071661812919, 1.8207290513174874, 1.8163535935538155, 1.811807087489537, 1.8071901457650321, 1.8025454793657576, 1.797727039882115, 1.7927216802324568, 1.787693636757987, 1.78253173828125, 1.777294090815953, 1.7719411849975586, 1.7664129393441337, 1.7607856478009904, 1.7550348554338728, 1.7492034094674247, 1.7432677405221122, 1.7371817997523717, 1.7309152058192663, 1.724609102521624, 1.718121085848127, 1.7115066392081124, 1.7046404566083635, 1.697728225163051, 1.6906415394374303, 1.683518886566162, 1.676243782043457, 1.6688331535884313, 1.6612324033464705, 1.653555154800415, 1.6457605021340507, 1.6378024305616106, 1.6296958923339844, 1.6215950761522566, 1.613306965146746, 1.6048599651881628, 1.5963358879089355, 1.5876649107251848, 1.57890704699925, 1.569901704788208, 1.5609782082693917, 1.551950114113944], "val_accuracy": [0.04399999976158142, 0.055666666477918625, 0.06800000369548798, 0.08633333444595337, 0.10100000351667404, 0.11733333021402359, 0.1340000033378601, 0.1523333340883255, 0.17366667091846466, 0.1889999955892563, 0.20466665923595428, 0.2173333317041397, 0.22966666519641876, 0.24266666173934937, 0.2613333463668823, 0.2736666798591614, 0.2849999964237213, 0.296999990940094, 0.3050000071525574, 0.3140000104904175, 0.3226666748523712, 0.3319999873638153, 0.3383333384990692, 0.3453333377838135, 0.3479999899864197, 0.3540000021457672, 0.3580000102519989, 0.3630000054836273, 0.367000013589859, 0.3713333308696747, 0.375, 0.3786666691303253, 0.38199999928474426, 0.3866666555404663, 0.38966667652130127, 0.3946666717529297, 0.3986666798591614, 0.40400001406669617, 0.41100001335144043, 0.4166666567325592, 0.41999998688697815, 0.421999990940094, 0.4273333251476288, 0.42899999022483826, 0.4326666593551636, 0.4346666634082794, 0.4363333284854889, 0.43700000643730164, 0.44066667556762695, 0.44333332777023315, 0.445333331823349, 0.44699999690055847, 0.4493333399295807, 0.45233333110809326, 0.45633333921432495, 0.4593333303928375, 0.4606666564941406, 0.46266666054725647, 0.4650000035762787, 0.46700000762939453, 0.46966665983200073, 0.4713333249092102, 0.4753333330154419, 0.4790000021457672, 0.48133334517478943, 0.4846666753292084, 0.4880000054836273, 0.49000000953674316, 0.492000013589859, 0.49533334374427795, 0.49799999594688416, 0.5013333559036255, 0.5023333430290222, 0.5043333172798157, 0.5056666731834412, 0.5099999904632568, 0.5133333206176758, 0.5149999856948853, 0.5170000195503235, 0.5193333625793457, 0.5206666588783264, 0.5199999809265137, 0.5223333239555359, 0.5253333449363708, 0.5276666879653931, 0.5289999842643738, 0.5306666493415833, 0.5323333144187927, 0.5336666703224182, 0.5350000262260437, 0.5376666784286499, 0.5366666913032532, 0.5393333435058594, 0.5419999957084656, 0.5416666865348816, 0.5423333048820496, 0.5446666479110718, 0.5440000295639038, 0.5453333258628845, 0.5460000038146973]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 6, 1, 3, 0, 2, 4, 0, 0, 4, 5, 6, 1, 6, 8, 2, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 1, 3, 3, 1, 0, 1, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 23, 23, 13, 10, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.negative(tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), grad)))))), alpha), grad), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.subtract(alpha, tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.303865004744685, 2.30341687899665, 2.307170149578064, 2.308194299651773, 2.3132803575190506, 2.31421861710282, 2.320592812007964, 2.3239191037284983, 2.329265389507315, 2.3394596991742436, 2.364012858335762, 57191330591367.664, 2.856359358776074, 5.679671044551843, 11.254675789091014, 17.011909323629215, 22.752442948806554], "accuracy": [0.0944393053650856, 0.09179764986038208, 0.08585391938686371, 0.08070268481969833, 0.07806102186441422, 0.07779685407876968, 0.07251353561878204, 0.07066437602043152, 0.07753269374370575, 0.07687227427959442, 0.07726852595806122, 0.09325055778026581, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9723476682390486, 1.9738055637904577, 1.9755220413208008, 1.9772629737854004, 1.9795582635062081, 1.981888907296317, 1.9852228845868791, 1.9887538637433733, 1.9940213475908553, 2.0045134680611745, 2.035571643284389, NaN, 3.226649965558733, 7.6250506809779575, 12.561187199183873, 17.502149309430802, 22.454641614641464], "val_accuracy": [0.028333334252238274, 0.02433333359658718, 0.02133333310484886, 0.020999999716877937, 0.024666666984558105, 0.03200000151991844, 0.047333333641290665, 0.06300000101327896, 0.07733333110809326, 0.09466666728258133, 0.09833333641290665, 0.10066666454076767, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 3, 1, 2, 4, 1, 3, 0, 9, 6, 6, 3, 8, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 27, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 30, 30, 17, 13, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad))))))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 3, 6, 8, 6, 4, 1, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 2, 3, 1, 1, 3, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 30, 30, 17, 13, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad))), tf.math.add(beta, beta))))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, grad), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), sigma)", "other_info": {"loss": [2.303864991235034, 2.3034169734697363, 2.30717094132551, 2.3081958470894377, 2.313283119030349, 2.3142111898806936, 2.320578196171237, 2.3239075558422706, 2.329256343205434, 2.3394372272075774, 2.3638686978853203, 3417140694985.9844, 2.824444077380534, 5.5046148038795355, 11.047325897619881, 16.804452341624128, 22.544985804055834], "accuracy": [0.0944393053650856, 0.09179764986038208, 0.08585391938686371, 0.08070268481969833, 0.07819310575723648, 0.07753269374370575, 0.07251353561878204, 0.07053229212760925, 0.07740060985088348, 0.07687227427959442, 0.07713644206523895, 0.09272222965955734, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9723477363586426, 1.9738054275512695, 1.9755214963640486, 1.9772655623299735, 1.9795588084629603, 1.9818778719220842, 1.9852119854518346, 1.9887473242623466, 1.9940150124686105, 2.0044701439993724, 2.0352540697370256, NaN, 3.132490771157401, 7.4472759791782925, 12.38301386151995, 17.323974609375, 22.27646800449916], "val_accuracy": [0.028333334252238274, 0.02433333359658718, 0.02133333310484886, 0.020999999716877937, 0.024666666984558105, 0.03200000151991844, 0.04766666516661644, 0.06333333253860474, 0.07733333110809326, 0.09466666728258133, 0.09833333641290665, 0.10066666454076767, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [3, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [43, 80, 61], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 4, 0, 2, 9, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 2, 1, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 3, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 29, 29, 19, 10, 2, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.pow(alpha, tf.math.add(beta, tf.math.pow(grad, tf.math.negative(alpha)))))), tf.math.square(tf.math.add(beta, alpha)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(sigma, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 3, 1, 4, 4, 9, 3, 3, 9, 1, 6, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [5, 0, 2, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 24, 24, 15, 9, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.3024690997063635, 2.3023722565736215, 2.3024327657667087, 2.302436119718732, 2.3025281069978134, 2.302535014397527, 2.3028459894406783], "accuracy": [0.10368511080741882, 0.10540219396352768, 0.10236428678035736, 0.10408136248588562, 0.1026284471154213, 0.10210011899471283, 0.10011887550354004], "val_loss": [1.9736608096531458, 1.9736881256103516, 1.9737177576337541, 1.9737694604056222, 1.9738733427865165, 1.974074363708496, 1.9744501795087541], "val_accuracy": [0.09833333641290665, 0.10000000149011612, 0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [4, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [8, 80, 61], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 1, 4, 2, 2, 9, 1, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [27, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 18, 18, 11, 7, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.square(beta)))), alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 2, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 19, 19, 11, 8, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), beta)))), grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), sigma)", "other_info": {"loss": [2.303865004744685, 2.303416712598054, 2.307171224555823, 2.3082055771560275, 2.313290523988318, 2.3142216181663744, 2.320582775785592, 2.3239032736291914, 2.3292504776864082, 2.3394356904453715, 2.3639961348044762, 129899719858141.03, 2.8659506086912043, 5.730131039703212, 11.313548216809057, 17.070809551879414, 22.811344275463842], "accuracy": [0.0944393053650856, 0.09179764986038208, 0.08585391938686371, 0.08057060092687607, 0.07792893797159195, 0.07792893797159195, 0.07264561951160431, 0.07053229212760925, 0.07740060985088348, 0.07700435817241669, 0.07740060985088348, 0.09338264167308807, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9723477363586426, 1.973804337637765, 1.9755281039646693, 1.9772789137704032, 1.9795637130737305, 1.9818827765328544, 1.9852128710065569, 1.9887377875191825, 1.994001797267369, 2.004490852355957, 2.0356226648603166, NaN, 3.2547681672232494, 7.67553847176688, 12.61177362714495, 17.552736009870255, 22.50522777012416], "val_accuracy": [0.028333334252238274, 0.02433333359658718, 0.02133333310484886, 0.020999999716877937, 0.02500000037252903, 0.03233333304524422, 0.04766666516661644, 0.06333333253860474, 0.07733333110809326, 0.09466666728258133, 0.09833333641290665, 0.10066666454076767, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 8, 1, 4, 6, 2, 5, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 3, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 24, 24, 15, 9, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad))), tf.math.add(beta, grad))))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(grad))), tf.math.add(beta, grad)))), beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07238145917654037, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 9, 2, 4, 3, 4, 3, 5, 6, 0, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [60, 9, 76, 58]], "fitness": -0.07257142663002014, "mapping_values": [1, 3, 3, 2, 1, 2, 22, 22, 13, 9, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad)))))), beta)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), alpha)))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [2.302956756615226, 2.3002165589806833, 2.3011659992023024, 2.300330311693709, 2.30121326440235, 2.3006034644682014, 2.3009847861554378, 2.2999398826434865, 2.2995008806337722, 2.298690531027394, 2.2994759865976078, 2.29945182403506, 2.2999152485657643, 2.2994943682575237, 2.300759007760389, 2.2998512370349267, 2.3005248588294465, 2.300400750386071], "accuracy": [0.09576013684272766, 0.09985470771789551, 0.09853387624025345, 0.09298639744520187, 0.09377889335155487, 0.09589222073554993, 0.08902391046285629, 0.09787346422672272, 0.09549596905708313, 0.10038304328918457, 0.1002509593963623, 0.10091137140989304, 0.09945846349000931, 0.10130762308835983, 0.09100515395402908, 0.09893012791872025, 0.09708096832036972, 0.09457138925790787], "val_loss": [1.9704675674438477, 1.9700476782662528, 1.969729014805385, 1.9696319443838937, 1.9695498602730888, 1.9696574892316545, 1.9695300374712263, 1.9694088527134486, 1.9693805830819267, 1.969388825552804, 1.9694068091256278, 1.9695249966212682, 1.9697013582502092, 1.9699606895446777, 1.970207895551409, 1.970451763698033, 1.9706503323146276, 1.9708266258239746], "val_accuracy": [0.041333332657814026, 0.04833333194255829, 0.054999999701976776, 0.057999998331069946, 0.06433333456516266, 0.06733333319425583, 0.0716666653752327, 0.07866666465997696, 0.08133333176374435, 0.08433333039283752, 0.08433333039283752, 0.0833333358168602, 0.08633333444595337, 0.08533333241939545, 0.0833333358168602, 0.08166666328907013, 0.07833333313465118, 0.07699999958276749]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 3, 4, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 3, 3, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [70, 9, 76, 58]], "fitness": -0.07028571516275406, "mapping_values": [1, 2, 2, 1, 1, 1, 32, 32, 19, 13, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad)), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)))))), tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.square(beta))), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [3.6471065299354444, 2.3038255441237623, 2.3077357445788533, 2.302539752033865, 2.5553913227303497, 2.40724952830898, 2.3041800709133526, 2.3030769949056342, 2.302730689762354], "accuracy": [0.17870822548866272, 0.14832915365695953, 0.09945846349000931, 0.10276053100824356, 0.17699114978313446, 0.09840179979801178, 0.09932637959718704, 0.09787346422672272, 0.09840179979801178], "val_loss": [1.9825799124581474, 1.9868509428841727, 1.9732649666922433, 1.969036034175328, 2.4848145757402693, 1.9752540588378906, 1.9737841742379325, 1.9734632628304618, 1.9730871745518275], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10066666454076767, 0.12300000339746475, 0.09799999743700027, 0.09866666793823242, 0.09866666793823242, 0.10066666454076767, 0.11400000005960464]}}]