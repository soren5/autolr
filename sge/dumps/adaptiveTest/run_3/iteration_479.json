[{"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7842857241630554, "mapping_values": [1, 20, 20, 11, 9, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad))))), grad)))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1428658762596635, 1.4734154632299048, 1.1137225113965579, 0.962374438179514, 0.8957235433752699, 0.8418528916435534, 0.7807752668676501, 0.7552100719320398, 0.7309809091572654, 0.6877864338875824, 0.6940262794116736, 0.6784937825295525, 0.6787570217156124, 0.6459852759045475, 0.6481843811409773, 0.6220661452291758, 0.6053461772481353, 0.6214649991242168, 0.6064083838837573, 0.605916642462494, 0.5917637801960774], "accuracy": [0.2965262234210968, 0.48606523871421814, 0.6015057563781738, 0.6502443552017212, 0.6740192770957947, 0.6890767216682434, 0.7059833407402039, 0.7218332886695862, 0.724210798740387, 0.7440232634544373, 0.7375511527061462, 0.7481178045272827, 0.7384757399559021, 0.7585523724555969, 0.7584202885627747, 0.7697794437408447, 0.7740060687065125, 0.7635715007781982, 0.770439863204956, 0.7744023203849792, 0.7720248103141785], "val_loss": [1.3693020003182548, 0.9176915713718959, 0.8302034650530133, 0.677741459437779, 0.7039355039596558, 0.6036150114876884, 0.5909843104226249, 0.5651449305670602, 0.544958233833313, 0.52952926499503, 0.5340590306690761, 0.5337821074894497, 0.5041060277393886, 0.5168061597006661, 0.5309362581798008, 0.4960706574576242, 0.5267681905201503, 0.49787139892578125, 0.49167490005493164, 0.5017320428575788, 0.5022094249725342], "val_accuracy": [0.5533333420753479, 0.625333309173584, 0.6483333110809326, 0.6933333277702332, 0.6796666383743286, 0.7276666760444641, 0.7260000109672546, 0.7476666569709778, 0.7586666941642761, 0.7599999904632568, 0.7609999775886536, 0.7563333511352539, 0.7826666831970215, 0.7573333382606506, 0.7696666717529297, 0.7879999876022339, 0.7476666569709778, 0.7753333449363708, 0.7799999713897705, 0.7603333592414856, 0.7696666717529297]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 0, 3, 2, 6, 3, 6, 1, 4, 2, 7, 6, 1, 2, 1, 9, 1, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7825714349746704, "mapping_values": [1, 41, 41, 23, 18, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), alpha))), grad))))), tf.math.add(tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha)))))))), grad)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1428697083084858, 1.4712836759563734, 1.1129830807049859, 0.9640202142259842, 0.8913625340971256, 0.8448205981917779, 0.7757372865351263, 0.7568765462917061, 0.7317401839442588, 0.6870833939061173, 0.6940703163955032, 0.6783482781286017, 0.6768390775325197, 0.6466534922560996, 0.6453490514308706, 0.6215375876776247, 0.6228220230237824, 0.6193474058099726], "accuracy": [0.29679039120674133, 0.486989825963974, 0.6007132530212402, 0.6482630968093872, 0.6741513609886169, 0.687491774559021, 0.7098137736320496, 0.722229540348053, 0.7240787148475647, 0.7465327978134155, 0.7358341217041016, 0.7477215528488159, 0.7396644949913025, 0.7577598690986633, 0.759080708026886, 0.7709681391716003, 0.7629110813140869, 0.7655527591705322], "val_loss": [1.3695109571729387, 0.9236611979348319, 0.8364878041403634, 0.6691083567483085, 0.701805830001831, 0.5987016814095634, 0.5912446294512067, 0.5644454956054688, 0.5466036455971854, 0.5312285082680839, 0.531784006527492, 0.5369882413319179, 0.5042233296803066, 0.5218609741755894, 0.5279081889561245, 0.5071797881807599, 0.5360855715615409, 0.49318269320896696], "val_accuracy": [0.5529999732971191, 0.6226666569709778, 0.6426666378974915, 0.6956666707992554, 0.6819999814033508, 0.7316666841506958, 0.7243333458900452, 0.7450000047683716, 0.7580000162124634, 0.7609999775886536, 0.7606666684150696, 0.7536666393280029, 0.7823333144187927, 0.7509999871253967, 0.7753333449363708, 0.7793333530426025, 0.7390000224113464, 0.7799999713897705]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 0, 3, 2, 6, 3, 6, 1, 4, 5, 7, 6, 3, 2, 1, 9, 0, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 80, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7811428308486938, "mapping_values": [1, 43, 43, 25, 18, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(grad, alpha)))))))))), tf.math.negative(tf.math.sqrt(tf.math.multiply(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), grad)))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.142863954236211, 1.4720707170369052, 1.1140890590833745, 0.9617186675391665, 0.8929082242851448, 0.8445849278898696, 0.7766966302208125, 0.755838328860518, 0.7346909607815595, 0.6890450439684899, 0.6881009521517125, 0.6831059712208557, 0.6783826023737799, 0.647762642466019, 0.6457719614303911, 0.6235009002065174, 0.619708915317945, 0.6238398229708966], "accuracy": [0.2965262234210968, 0.4880464971065521, 0.6012415885925293, 0.6498481035232544, 0.6736230254173279, 0.6877558827400208, 0.709021270275116, 0.7219653725624084, 0.7219653725624084, 0.7432307600975037, 0.7390040755271912, 0.7452120184898376, 0.7395324110984802, 0.7578919529914856, 0.7613261342048645, 0.7700436115264893, 0.7625148296356201, 0.7646281719207764], "val_loss": [1.3693054403577531, 0.9214327675955636, 0.8260332686560494, 0.6811991930007935, 0.6957814693450928, 0.5991759811128888, 0.5892630645206997, 0.5663798536573138, 0.5471041372844151, 0.5296096120561872, 0.5430662291390556, 0.5328341211591449, 0.5039807558059692, 0.5159014122826713, 0.5285851614815849, 0.5081750324794224, 0.5456178869519915, 0.4957160268511091], "val_accuracy": [0.5523333549499512, 0.6236666440963745, 0.6510000228881836, 0.6953333616256714, 0.6863333582878113, 0.7296666502952576, 0.7286666631698608, 0.7459999918937683, 0.7580000162124634, 0.7609999775886536, 0.7556666731834412, 0.7630000114440918, 0.7823333144187927, 0.7580000162124634, 0.7760000228881836, 0.7816666960716248, 0.7383333444595337, 0.7803333401679993]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 9, 6, 3, 1, 6, 3, 2, 1, 6, 5, 7, 8, 1, 2, 1, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [47, 48, 98, 88, 42, 68, 83, 50, 30], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [30, 74, 76, 58]], "fitness": -0.7757142782211304, "mapping_values": [1, 49, 49, 29, 20, 9, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), grad)))))), grad))), tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad)))))))), tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.287244461310491, 2.245529835958837, 2.1916739145809743, 2.102136372197274, 1.9662388933333173, 1.7876195228331282, 1.5950026370751276, 1.43949220031244, 1.3144762449890568, 1.2104039418935115, 1.1591092328259407, 1.102619962543623, 1.0462091998448697, 1.020994527905829, 0.9789806328209053, 0.9476526531765663, 0.9394880555183376, 0.9124319306879216, 0.8966440020960399, 0.8859396036495354, 0.8593910061892674, 0.8495155952751771, 0.8330638914957904, 0.8349062900233971, 0.8159965108004953, 0.8034026432408947, 0.791620587116975, 0.7865366142549692, 0.7797432412182917, 0.7762668954697834, 0.7776241135351599, 0.7577321890905439, 0.7571521225764122, 0.7436361266416943, 0.7429461829288524, 0.7276636725561005, 0.72921275058049, 0.7259116464869819, 0.7160596892881261, 0.7130789476740929, 0.7188619129283946, 0.7015764540637788, 0.7062369251074871, 0.6932347068035875, 0.6902468724808815, 0.6939564329395992, 0.6867438829444292, 0.693233730951714, 0.6810066338543407, 0.6737936419376906, 0.6735450887031339, 0.6770143528199388, 0.6724441197995166, 0.6616454911962586, 0.6656967554314734, 0.6632446778244141, 0.6613088080423573], "accuracy": [0.13234710693359375, 0.2374851405620575, 0.31197991967201233, 0.3761722445487976, 0.42108044028282166, 0.4625544846057892, 0.5001981258392334, 0.5247655510902405, 0.5514463186264038, 0.5865803956985474, 0.602562427520752, 0.6205257177352905, 0.6332056522369385, 0.643772304058075, 0.6553955674171448, 0.6592260003089905, 0.6672830581665039, 0.6789063811302185, 0.6781138777732849, 0.6803592443466187, 0.6897371411323547, 0.6944921612739563, 0.698718786239624, 0.6992471218109131, 0.7066437602043152, 0.7136441469192505, 0.713908314704895, 0.7111346125602722, 0.7148329019546509, 0.7160216569900513, 0.7119271159172058, 0.720380425453186, 0.7260599732398987, 0.7238145470619202, 0.7257958054542542, 0.7345132827758789, 0.7334566116333008, 0.7359662055969238, 0.735041618347168, 0.7400607466697693, 0.7309470176696777, 0.739400327205658, 0.7432307600975037, 0.7434949278831482, 0.7449478507041931, 0.7498348951339722, 0.7449478507041931, 0.7423061728477478, 0.7470611333847046, 0.750759482383728, 0.752740740776062, 0.7448157668113708, 0.748249888420105, 0.7543256878852844, 0.7553823590278625, 0.7531369924545288, 0.7536653280258179], "val_loss": [1.9346483775547572, 1.8909076963152205, 1.8235885075160436, 1.715939726148333, 1.5584028788975306, 1.3646543366568429, 1.1774257251194544, 1.037229299545288, 0.9339396612984794, 0.8592731101172311, 0.8096995523997715, 0.7703849247523716, 0.7372710704803467, 0.7145499842507499, 0.6923799514770508, 0.6735714163099017, 0.661197338785444, 0.6468160493033273, 0.638805457523891, 0.6272650275911603, 0.6191124745777675, 0.6145059892109462, 0.6016492162431989, 0.5972848619733538, 0.5885912690843854, 0.5862771272659302, 0.5802006721496582, 0.5747959613800049, 0.5694940090179443, 0.5674488203866142, 0.5598500115530831, 0.5572549615587506, 0.5523889575685773, 0.5493901116507394, 0.5443820612771171, 0.5407494817461286, 0.539477961403983, 0.5365686076028007, 0.535644497190203, 0.5289622715541294, 0.5273411614554269, 0.5270986727305821, 0.5243900673730033, 0.5205339193344116, 0.5219612121582031, 0.519919616835458, 0.5145248174667358, 0.5134135825293404, 0.5107282740729195, 0.5105612107685634, 0.5045809745788574, 0.5032968010221209, 0.5039961508342198, 0.5023653677531651, 0.4982189621244158, 0.49724364280700684, 0.49579969474247526], "val_accuracy": [0.31833332777023315, 0.4189999997615814, 0.46666666865348816, 0.5193333625793457, 0.5396666526794434, 0.5613333582878113, 0.606333315372467, 0.6546666622161865, 0.6696666479110718, 0.6826666593551636, 0.687666654586792, 0.7013333439826965, 0.7036666870117188, 0.7153333425521851, 0.7179999947547913, 0.7206666469573975, 0.7289999723434448, 0.7273333072662354, 0.7310000061988831, 0.7379999756813049, 0.7286666631698608, 0.737333357334137, 0.7393333315849304, 0.7406666874885559, 0.746999979019165, 0.7493333220481873, 0.7429999709129333, 0.7453333139419556, 0.7476666569709778, 0.7486666440963745, 0.7549999952316284, 0.753000020980835, 0.7570000290870667, 0.7599999904632568, 0.7570000290870667, 0.7609999775886536, 0.7630000114440918, 0.7646666765213013, 0.7649999856948853, 0.7616666555404663, 0.7649999856948853, 0.7673333287239075, 0.765333354473114, 0.7676666378974915, 0.762333333492279, 0.7710000276565552, 0.7689999938011169, 0.7699999809265137, 0.7710000276565552, 0.7696666717529297, 0.7746666669845581, 0.7796666622161865, 0.7739999890327454, 0.7763333320617676, 0.7746666669845581, 0.7766666412353516, 0.7776666879653931]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 6, 6, 3, 2, 0, 9, 2, 1, 6, 5, 7, 2, 0, 2, 0, 1, 1, 0, 2, 0, 9, 3, 1, 3, 2, 0, 8, 9, 8], [2, 1, 2, 0, 2, 2, 2, 1, 2, 1, 1, 1, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [43, 74, 76, 58]], "fitness": -0.7725714445114136, "mapping_values": [1, 32, 32, 19, 13, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(tf.math.add(grad, tf.math.add(alpha, alpha)))))), tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, alpha)), alpha)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [1.965603743404398, 1.4319796057078722, 1.05062480067155, 0.862892171088274, 0.8353871829584368, 0.7564345230484336, 0.7529231998127182, 0.6924449527630512, 0.6873239521274257, 0.6999548926266539, 0.6456219016867952, 0.6470662388882191, 0.6480115100597709, 0.6266903135802028, 0.5904671499568868, 0.6014072595097999], "accuracy": [0.3471139967441559, 0.5099722743034363, 0.6236956715583801, 0.6819442510604858, 0.694360077381134, 0.7165499925613403, 0.7141724824905396, 0.7425703406333923, 0.7382115721702576, 0.733588695526123, 0.7531369924545288, 0.7544577717781067, 0.7582882046699524, 0.759609043598175, 0.7761194109916687, 0.7737419009208679], "val_loss": [1.4770429474966866, 0.8589882510049003, 0.6924100943974086, 0.6701522724969047, 0.6161671366010394, 0.6493703978402274, 0.5640066862106323, 0.5515843118940081, 0.5344341312135968, 0.5151073081152779, 0.5139858211789813, 0.6587457656860352, 0.5533228261130196, 0.5108788013458252, 0.5448882068906512, 0.5101290260042463], "val_accuracy": [0.4036666750907898, 0.6603333353996277, 0.6706666946411133, 0.6853333115577698, 0.718999981880188, 0.7099999785423279, 0.7383333444595337, 0.7419999837875366, 0.7553333044052124, 0.7723333239555359, 0.7749999761581421, 0.7066666483879089, 0.7459999918937683, 0.7733333110809326, 0.7423333525657654, 0.7733333110809326]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 6, 2, 3, 2, 6, 9, 2, 1, 6, 5, 7, 2, 0, 2, 1, 1, 1, 0, 1, 5, 9, 3, 1, 0, 1, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 98, 91, 38, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [80, 74, 76, 58]], "fitness": -0.4145714342594147, "mapping_values": [1, 19, 19, 10, 9, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [3.9441801778644447, 2.617949621820053, 3.8690654589058844, 2.1782446473486563, 2.0737095475590475, 1.8269388009654437, 1.7109957992314127, 1.553916943040207, 1.4830196814026264, 1.3389748237577364, 1.1619113902248301, 1.045693946079949, 0.9807612215286988, 0.9502379995106611, 0.9955625722846335, 0.8608214285442654, 0.8441011774037666, 0.8335872226859821, 0.8080889640183827, 0.782900671437117, 0.7652473868852625, 0.7648971990949489], "accuracy": [0.16919825971126556, 0.13908334076404572, 0.19033153355121613, 0.19270901381969452, 0.27380794286727905, 0.3855501115322113, 0.4213446080684662, 0.45344075560569763, 0.47364944219589233, 0.527010977268219, 0.5739004015922546, 0.6065248847007751, 0.6283186078071594, 0.6387531161308289, 0.6281865239143372, 0.6687359809875488, 0.6712455153465271, 0.6828688383102417, 0.6872276067733765, 0.6872276067733765, 0.6892088055610657, 0.6902654767036438], "val_loss": [2.1045853751046315, 1.9614171981811523, 1.918893814086914, 1.783597128731864, 1.6227154391152518, 1.4294515677860804, 1.2596583706992013, 1.472780432019915, 1.2025693825313024, 0.9521633556910923, 0.9495009013584682, 0.8014265128544399, 0.7788680621555873, 0.7984894684382847, 0.7086734771728516, 0.6942155701773507, 0.6771895885467529, 0.6954985175813947, 0.6664429732731411, 0.6573966911860875, 0.6969555956976754, 0.6633498838969639], "val_accuracy": [0.10066666454076767, 0.14800000190734863, 0.1693333387374878, 0.27399998903274536, 0.37533333897590637, 0.4033333361148834, 0.4729999899864197, 0.38366666436195374, 0.5116666555404663, 0.6179999709129333, 0.593666672706604, 0.6610000133514404, 0.6616666913032532, 0.6359999775886536, 0.6880000233650208, 0.6899999976158142, 0.7070000171661377, 0.6903333067893982, 0.7023333311080933, 0.7043333053588867, 0.6850000023841858, 0.7056666612625122]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 2, 3, 2, 6, 3, 2, 5, 6, 5, 7, 2, 1, 2, 1, 0, 4, 0, 2, 0, 8, 3, 2, 3, 2, 0, 8, 9, 8], [1, 1, 1, 0, 2, 0, 2, 2, 1, 2, 1, 2, 2, 2, 0, 3, 2, 1, 0, 0, 0, 1], [23, 48, 73, 88, 42, 68], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [9, 74, 76, 58]], "fitness": -0.37457144260406494, "mapping_values": [1, 43, 43, 24, 19, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), grad)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad)))))), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), grad))), grad)))), alpha)), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3028827539886607, 2.3014277484769345, 2.302729291844094, 2.300567109775959, 2.298703705488242, 2.299191314247322, 2.2982257802520114, 2.299037859786566, 2.298181066581082, 2.2964375367679177, 2.296416655570572, 2.2964089659651936, 2.294410042900687, 2.2954102693027933, 2.295217814966357, 2.292690215408684, 2.293489604027138, 2.2935449440938105, 2.292954861322619, 2.292564544223004, 2.2906353148990823, 2.291007601873136, 2.2881466221610993, 2.2911065070069525, 2.288075216977572, 2.288259040914144, 2.287468361108216, 2.286745790729213, 2.2859511115626256, 2.2853736275018024, 2.287435045111307, 2.286053242196559, 2.284534456298147, 2.2843075880615733, 2.28263651498037, 2.282851258698487, 2.2805355951817847, 2.281329217540936, 2.279886017952928, 2.280060469529506, 2.2802216388829364, 2.2769333754138796, 2.2798073159516243, 2.276780167559371, 2.27621426306475, 2.2769564693598556, 2.2759306855315717, 2.274428050279649, 2.27510213433098, 2.2743591715583804, 2.2730499525048775, 2.273629882064525, 2.272482823576075, 2.2728387537633643, 2.2717797916484406, 2.2706531795607017, 2.269959057988177, 2.2699586991164127, 2.268931815778858, 2.268192713774899, 2.2671313699934665, 2.2690170397611737, 2.267472903427116, 2.26576687848453, 2.2663746884375864, 2.265669680920259, 2.2648360582784246, 2.2638292868123817, 2.26157270345737, 2.262989051936246, 2.2624360275873183, 2.2605272064339985, 2.2617092774355525, 2.2607916304306537, 2.2609579000711095, 2.258496810983374, 2.2575034384777233, 2.256383652668808, 2.258369460475601, 2.2557446916640913, 2.256758147478891, 2.2565817209424406, 2.2536755404562414, 2.2535235063668493, 2.2528823123332797, 2.251447361190447, 2.252026835736219, 2.2515734731560575, 2.2508039355136304, 2.250769663606542, 2.2492053176213282, 2.24714783991742, 2.2456135620388764, 2.247156607523696, 2.2468774949775288, 2.2483149290620186, 2.2451737599680848, 2.2430592867141197, 2.244298528765234, 2.24074859881146], "accuracy": [0.09021265059709549, 0.08942015469074249, 0.09430722147226334, 0.09417514503002167, 0.09879804402589798, 0.09655263274908066, 0.10302469879388809, 0.09972262382507324, 0.1014397069811821, 0.10368511080741882, 0.10328886657953262, 0.10659094154834747, 0.10962884873151779, 0.1080438494682312, 0.11068551242351532, 0.1150442510843277, 0.11662924289703369, 0.11108175665140152, 0.11900673806667328, 0.11636507511138916, 0.12138422578573227, 0.11411966383457184, 0.12151630967855453, 0.12138422578573227, 0.12679962813854218, 0.12521463632583618, 0.13353586196899414, 0.13300752639770508, 0.13432836532592773, 0.13670584559440613, 0.12996962666511536, 0.13195087015628815, 0.13881917297840118, 0.1356491893529892, 0.14410249888896942, 0.14463083446025848, 0.146479994058609, 0.146479994058609, 0.14780081808567047, 0.14595165848731995, 0.14661207795143127, 0.15480121970176697, 0.15638621151447296, 0.1468762308359146, 0.16034869849681854, 0.15532954037189484, 0.1542728841304779, 0.16734910011291504, 0.16774533689022064, 0.16510368883609772, 0.16312244534492493, 0.16853784024715424, 0.16312244534492493, 0.16431118547916412, 0.1732928305864334, 0.17461365461349487, 0.17884030938148499, 0.17421740293502808, 0.18095363676548004, 0.17963281273841858, 0.18478403985500336, 0.18372738361358643, 0.18451987206935883, 0.1850482076406479, 0.18584071099758148, 0.1846519559621811, 0.1900673657655716, 0.1935015171766281, 0.19719983637332916, 0.19455818831920624, 0.1935015171766281, 0.19970941543579102, 0.19693566858768463, 0.20538897812366486, 0.1970677524805069, 0.201294407248497, 0.20803064107894897, 0.21714437007904053, 0.2040681540966034, 0.2156914472579956, 0.21212521195411682, 0.2094835489988327, 0.2180689424276352, 0.2180689424276352, 0.21912561357021332, 0.2215031087398529, 0.21516312658786774, 0.22031435370445251, 0.22163519263267517, 0.2234843522310257, 0.22797517478466034, 0.23180557787418365, 0.2316734939813614, 0.23444722592830658, 0.2250693440437317, 0.2226918488740921, 0.23642848432064056, 0.23814556002616882, 0.23325848579406738, 0.24461762607097626], "val_loss": [1.9706446783883231, 1.9701078278677804, 1.969566822052002, 1.969026974269322, 1.9684885569981165, 1.9679504122052873, 1.9674118586948939, 1.9668799809047155, 1.9663470132010323, 1.9658123425074987, 1.965280260358538, 1.964752197265625, 1.9642182758876257, 1.9636900765555245, 1.9631482533046178, 1.962613650730678, 1.96208769934518, 1.961559500013079, 1.9610305513654436, 1.9605048724583216, 1.9599731990269251, 1.959442138671875, 1.958901814052037, 1.9583723204476493, 1.9578423500061035, 1.9573123114449638, 1.9567788669041224, 1.956247397831508, 1.9557182448250907, 1.9551833697727747, 1.9546521050589425, 1.9541221346173967, 1.9535914148603166, 1.9530585833958216, 1.9525253432137626, 1.9519893101283483, 1.9514562061854772, 1.9509219442095076, 1.950390134538923, 1.9498510360717773, 1.9493161610194616, 1.948774746486119, 1.9482385090419225, 1.9477037702287947, 1.9471638543265206, 1.9466227803911482, 1.946080003465925, 1.9455424036298479, 1.9450010572160994, 1.9444594383239746, 1.943920407976423, 1.9433798108782088, 1.9428359440394811, 1.942288943699428, 1.9417390823364258, 1.9411844526018416, 1.9406346593584334, 1.9400837762015206, 1.9395290783473425, 1.9389794894627161, 1.9384198188781738, 1.937863758632115, 1.9372985703604562, 1.9367369243076868, 1.9361693518502372, 1.9355992589678084, 1.9350342750549316, 1.934464590890067, 1.9338885716029577, 1.9333140509469169, 1.9327332632882255, 1.9321511813572474, 1.931575162070138, 1.9309911727905273, 1.9304077965872628, 1.9298180171421595, 1.9292220388139998, 1.9286252430507116, 1.9280287878853934, 1.9274250439235143, 1.9268309048243932, 1.926231929234096, 1.9256231444222587, 1.9250141552516393, 1.924405574798584, 1.923788411276681, 1.92317077091762, 1.9225510188511439, 1.9219317436218262, 1.9213122640337263, 1.920677321297782, 1.9200446946280343, 1.9194042342049735, 1.9187679290771484, 1.9181344168526786, 1.9174981798444475, 1.9168518611363001, 1.9161953926086426, 1.9155423300606864, 1.914872714451381], "val_accuracy": [0.03999999910593033, 0.0416666679084301, 0.043666668236255646, 0.046666666865348816, 0.05066666752099991, 0.05400000140070915, 0.05666666850447655, 0.05900000035762787, 0.06433333456516266, 0.06800000369548798, 0.07433333247900009, 0.07866666465997696, 0.08500000089406967, 0.08733333647251129, 0.09200000017881393, 0.09700000286102295, 0.10300000011920929, 0.10633333027362823, 0.11100000143051147, 0.11633333563804626, 0.12166666984558105, 0.12566666305065155, 0.1313333362340927, 0.13733333349227905, 0.14300000667572021, 0.14866666495800018, 0.15299999713897705, 0.16033333539962769, 0.16599999368190765, 0.17299999296665192, 0.17733334004878998, 0.1836666613817215, 0.18733333051204681, 0.19166666269302368, 0.1966666728258133, 0.2016666680574417, 0.2043333351612091, 0.20800000429153442, 0.21166667342185974, 0.21433334052562714, 0.21833333373069763, 0.22433333098888397, 0.23000000417232513, 0.23199999332427979, 0.23533333837985992, 0.23800000548362732, 0.24433332681655884, 0.24933333694934845, 0.2529999911785126, 0.25966668128967285, 0.26366665959358215, 0.2680000066757202, 0.2736666798591614, 0.2759999930858612, 0.2786666750907898, 0.2809999883174896, 0.28433331847190857, 0.2906666696071625, 0.2939999997615814, 0.29733332991600037, 0.3009999990463257, 0.3036666810512543, 0.30566665530204773, 0.3070000112056732, 0.3096666634082794, 0.312333345413208, 0.3149999976158142, 0.31700000166893005, 0.3199999928474426, 0.3240000009536743, 0.3266666531562805, 0.328000009059906, 0.3316666781902313, 0.3330000042915344, 0.3346666693687439, 0.3370000123977661, 0.3386666774749756, 0.3413333296775818, 0.34299999475479126, 0.3449999988079071, 0.3466666638851166, 0.34833332896232605, 0.3486666679382324, 0.35100001096725464, 0.351666659116745, 0.3526666760444641, 0.35499998927116394, 0.35733333230018616, 0.35899999737739563, 0.3610000014305115, 0.3623333275318146, 0.3643333315849304, 0.3646666705608368, 0.36500000953674316, 0.3656666576862335, 0.367333322763443, 0.3683333396911621, 0.37033334374427795, 0.3723333477973938, 0.37299999594688416]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 6, 2, 3, 2, 6, 3, 2, 1, 6, 5, 2, 2, 5, 0, 6, 6, 4, 0, 2, 0, 3, 3, 1, 3, 1, 4, 8, 9, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1, 0], [56, 48, 98, 36, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [54, 74, 76, 58]], "fitness": -0.2794285714626312, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [3.290910820809212, 2.1858428687845253, 2.4919258748315123, 2.305420643051051, 2.30340403229443, 2.3031468937787807], "accuracy": [0.19601109623908997, 0.1802932173013687, 0.11953506618738174, 0.0956280529499054, 0.09509972482919693, 0.09840179979801178], "val_loss": [1.6063947677612305, 1.9074138232639857, 1.9764748300824846, 1.9739972523280553, 1.9736523628234863, 1.9736520903451102], "val_accuracy": [0.312666654586792, 0.17900000512599945, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 8, 5, 1, 6, 3, 2, 1, 6, 5, 7, 9, 1, 2, 1, 2, 1, 0, 2, 0, 8, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [98, 48, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 0, 2, 1, 0, 0, 2, 2], [5, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 11, 9, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.341738167503144, 2.751064516313639, 3.8869988940033253, 5.879544911808452, 8.57396316578706, 12.273528733667272, 16.617839948265953], "accuracy": [0.09126931428909302, 0.09681680053472519, 0.09919429570436478, 0.10130762308835983, 0.09972262382507324, 0.10593052208423615, 0.10487385839223862], "val_loss": [2.04170594896589, 2.4273016112191335, 3.3322103364127025, 4.789889063153948, 6.757139069693429, 9.228000913347516, 12.226034164428711], "val_accuracy": [0.09866666793823242, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 8, 5, 1, 6, 3, 2, 1, 6, 5, 7, 9, 3, 2, 1, 2, 1, 0, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [56, 75, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 11, 9, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.subtract(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 8, 5, 1, 6, 3, 2, 1, 6, 6, 7, 9, 1, 2, 8, 2, 5, 0, 2, 6, 8, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [81, 48, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [5, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), alpha))))), grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 6, 5, 1, 6, 3, 2, 1, 6, 6, 7, 9, 1, 2, 9, 2, 1, 0, 4, 0, 8, 5, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 2, 2, 2, 2, 1, 2, 0, 0, 3, 2, 1, 0, 0, 2, 1], [81, 48, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [5, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 23, 15, 5, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha)))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad))))))), tf.math.square(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3021462214637065, 2.3025812380632877, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1018359512090683, 0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 8, 5, 1, 6, 3, 2, 1, 6, 5, 7, 9, 3, 2, 1, 2, 1, 1, 2, 0, 8, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 1, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [1, 48, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [11, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 22, 16, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.negative(grad)))))))))), grad)), tf.math.add(alpha, tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [2.302420665307398, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 3, 8, 5, 1, 5, 3, 3, 1, 6, 5, 7, 5, 1, 2, 1, 3, 1, 0, 2, 4, 8, 5, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [71, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))))), grad)), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302969931831859, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 8, 3, 4, 2, 8, 2, 1, 6, 5, 2, 5, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 2, 4, 0, 9, 8], [1, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 1], [81, 48, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [9, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.302969931831859, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 6, 2, 4, 2, 6, 3, 8, 1, 6, 5, 7, 2, 1, 2, 2, 0, 5, 0, 8, 0, 9, 3, 1, 3, 2, 0, 8, 9, 8], [2, 1, 2, 0, 2, 0, 0, 1, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 4, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [81, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [2.302969931831859, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 2, 3, 2, 6, 3, 2, 1, 5, 9, 7, 2, 1, 2, 2, 0, 2, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [56, 48, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [9, 0, 0, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 28, 20, 5, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, alpha), alpha), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), grad)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302969931831859, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 4, 0, 3, 2, 6, 3, 6, 1, 4, 2, 7, 6, 1, 2, 1, 9, 1, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [98, 48, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), sigma), beta)", "other_info": {"loss": [2.3031195047084037, 2.302245436658193, 2.3041326657671735, 2.3025516259467143, 2.3012668219508274, 2.3023526233342566], "accuracy": [0.09008057415485382, 0.0878351628780365, 0.08981640636920929, 0.09021265059709549, 0.09285431355237961, 0.09047681838274002], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 6, 2, 3, 2, 6, 3, 2, 1, 6, 5, 7, 2, 1, 6, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 35, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [3, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(sigma)), sigma)", "other_info": {"loss": [2.3031195047084037, 2.302245436658193, 2.3041326657671735, 2.3025516259467143, 2.3012668219508274, 2.3023526233342566], "accuracy": [0.09008057415485382, 0.0878351628780365, 0.08981640636920929, 0.09021265059709549, 0.09285431355237961, 0.09047681838274002], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 8, 5, 1, 6, 5, 2, 1, 1, 5, 7, 9, 2, 2, 8, 3, 1, 0, 8, 1, 8, 2, 1, 2, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 0, 3, 2, 1, 0, 0, 2, 1], [98, 48, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 3, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [5, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), sigma), beta)", "other_info": {"loss": [2.303119441726346, 2.3022452792030488, 2.3041321529672603, 2.302550096490427, 2.30126406443889, 2.302348259874323], "accuracy": [0.09008057415485382, 0.0878351628780365, 0.08981640636920929, 0.09021265059709549, 0.09285431355237961, 0.09047681838274002], "val_loss": [1.9711875915527344, 1.9711874553135462, 1.9711868422372, 1.9711858204432897, 1.971184458051409, 1.9711825507027763], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]