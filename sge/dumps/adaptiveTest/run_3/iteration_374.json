[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8154285550117493, "mapping_values": [1, 9, 9, 5, 4, 0, 15, 15, 11, 4, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2848269704184623, 2.2071891607090057, 1.9474262677604464, 1.8295334940651986, 1.2511697399334396, 0.8655620829351448, 0.7916280435706489, 0.7326927321099839, 0.6511805133419014, 0.660735888913197, 0.6415272035366981, 0.5993496939931579, 0.6031538626741755, 0.592783866391883, 0.563471481194192, 0.5691560713559283, 0.5459431134525496, 0.5076625386501237, 0.5242656325194909, 0.5030369327178862, 0.524882721969433, 0.48994742267954666, 0.4816110557836549, 0.47312948251790876, 0.4670749467283019, 0.4700126975692101], "accuracy": [0.2786950170993805, 0.2102760523557663, 0.3361510932445526, 0.3739268183708191, 0.5583146214485168, 0.668339729309082, 0.703209638595581, 0.7244749665260315, 0.7524765729904175, 0.7518161535263062, 0.7561748623847961, 0.7693831920623779, 0.76542067527771, 0.7684586048126221, 0.7857614755630493, 0.7790252566337585, 0.7944789528846741, 0.807158887386322, 0.7989697456359863, 0.8055738806724548, 0.8039889335632324, 0.8136309385299683, 0.8220842480659485, 0.8227446675300598, 0.8249900937080383, 0.8208954930305481], "val_loss": [1.969855512891497, 1.5849010603768485, 1.4489439555576868, 1.176034791128976, 0.685125572340829, 0.6444038663591657, 0.5725804567337036, 0.5283971173422677, 0.5301213775362287, 0.5666158199310303, 0.48100308009556364, 0.5125859805515834, 0.5136983905519757, 0.46660101413726807, 0.47884890011378695, 0.4810823713030134, 0.435598509652274, 0.4594572271619524, 0.4485305888312204, 0.5043564353670392, 0.4232187952314104, 0.4260425737925938, 0.4202631967408316, 0.4550640753337315, 0.44206465993608746, 0.46646242482321604], "val_accuracy": [0.10233332961797714, 0.3869999945163727, 0.4233333468437195, 0.6033333539962769, 0.6763333082199097, 0.703000009059906, 0.7333333492279053, 0.7580000162124634, 0.746666669845581, 0.7363333106040955, 0.7773333191871643, 0.7683333158493042, 0.7490000128746033, 0.7993333339691162, 0.7786666750907898, 0.7689999938011169, 0.8090000152587891, 0.793666660785675, 0.8100000023841858, 0.7699999809265137, 0.8146666884422302, 0.8063333630561829, 0.8003333210945129, 0.800000011920929, 0.8133333325386047, 0.8013333082199097]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 0, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 8, 6, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.8042857050895691, "mapping_values": [1, 9, 9, 5, 4, 0, 35, 35, 21, 14, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, grad)))), tf.math.add(beta, grad))))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.sqrt(alpha))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.018044518804065, 1.3443450390025058, 1.0819600291255915, 0.8839532595583949, 0.804367532725064, 0.817015251510604, 0.7360406994599203, 0.7278875557737989, 0.7110739061231264, 0.6606420911203963, 0.6547202730002484, 0.6301376237420201, 0.6156390712497698, 0.6310889068501359, 0.5925754976467827, 0.6242412281483549, 0.5750228317422228, 0.5764839694468793, 0.5638525736424839, 0.5824262217885829, 0.5345440387899031, 0.5414920513419869, 0.5389563945920287, 0.5253212327860161, 0.5043393562120643, 0.5012310410629189, 0.5251895396574976, 0.4913254859047228], "accuracy": [0.3323206901550293, 0.5246334671974182, 0.6189407110214233, 0.6653017997741699, 0.6977941989898682, 0.6881521344184875, 0.7223616242408752, 0.7195879220962524, 0.7285695672035217, 0.748249888420105, 0.750231146812439, 0.7618544697761536, 0.7663452625274658, 0.755118191242218, 0.7721568942070007, 0.7560427784919739, 0.7810064554214478, 0.7790252566337585, 0.7860256433486938, 0.7736098170280457, 0.7943468689918518, 0.7973847389221191, 0.7930260300636292, 0.7985734939575195, 0.8141592741012573, 0.8082155585289001, 0.7964601516723633, 0.8182538747787476], "val_loss": [1.3123666899544852, 1.196814741407122, 0.6886608941214425, 0.6342763219560895, 0.6399881669453212, 0.60355315889631, 0.5634750468390328, 0.5637548821313041, 0.55177755015237, 0.5349936144692558, 0.5226821899414062, 0.5010924679892403, 0.4988381692341396, 0.5082205023084369, 0.5248595816748483, 0.4781968763896397, 0.5050048317228045, 0.46811841215406147, 0.4984107187816075, 0.45011370522635324, 0.48006672518593924, 0.485135589327131, 0.4385264090129307, 0.4708633763449533, 0.46765363216400146, 0.4513557638440813, 0.428413919040135, 0.42263015678950716], "val_accuracy": [0.39766666293144226, 0.515666663646698, 0.7089999914169312, 0.7143333554267883, 0.690666675567627, 0.7136666774749756, 0.7429999709129333, 0.750333309173584, 0.7506666779518127, 0.7593333125114441, 0.7670000195503235, 0.7730000019073486, 0.7726666927337646, 0.7743333578109741, 0.762333333492279, 0.7850000262260437, 0.7716666460037231, 0.7910000085830688, 0.7823333144187927, 0.8066666722297668, 0.7863333225250244, 0.7913333177566528, 0.815666675567627, 0.7879999876022339, 0.7993333339691162, 0.8036666512489319, 0.8146666884422302, 0.8133333325386047]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 0, 9, 6, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.8040000200271606, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 9, 3, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.018071027605714, 1.3462039261540686, 1.0742651097621145, 0.9487027682727118, 0.8527454425708855, 0.7727146317709738, 0.7396080259082655, 0.7087726050505879, 0.7145864796943951, 0.6758466105828936, 0.6633837057252712, 0.6311735122856635, 0.6252354980066168, 0.636871557926316, 0.5905299159388075, 0.6127103418170847, 0.5753827201392688, 0.5712690342686605, 0.5646092956879545, 0.5762492026540786, 0.5311529002626102, 0.5340758256861216, 0.5417150638957207, 0.5256449484223655, 0.5056023941717411, 0.5007610270659276, 0.5225341055788746, 0.491811033906623, 0.4846918966004625, 0.4829791962446994, 0.4756592906634601, 0.4829158494422433, 0.47887408735336107, 0.46020423981806763, 0.45192234576527845, 0.4504000139297858, 0.4500537224260571, 0.4323294408144086, 0.44005096338570254, 0.43040812339891044, 0.41744445956945264, 0.42504805596891004, 0.4211155860187229, 0.40795049910941505, 0.4138599132951445, 0.4156254983226999, 0.4058622473368886, 0.40415542546658234, 0.3979942356677276, 0.38915349651541864, 0.39531097430925266, 0.3821871000360646, 0.37919095599845004, 0.3773323557104779, 0.3676750725483331, 0.36513121719168884, 0.36184534855632733, 0.36490018977354927, 0.3459092682032396, 0.3499343190895741, 0.3521493994611806, 0.36055791486271654, 0.3621878698714232, 0.33745491424367063, 0.3377729994769519, 0.34097189863344396, 0.340531957718706], "accuracy": [0.3323206901550293, 0.5241051316261292, 0.6211860775947571, 0.6538106203079224, 0.6816800832748413, 0.7127195596694946, 0.7224937081336975, 0.7317395210266113, 0.724739134311676, 0.7407211661338806, 0.7453441023826599, 0.7602694630622864, 0.7584202885627747, 0.7519482374191284, 0.7701756954193115, 0.7618544697761536, 0.7821952104568481, 0.7815347909927368, 0.7893276810646057, 0.7711002230644226, 0.7987055778503418, 0.8017435073852539, 0.7931581139564514, 0.8004226684570312, 0.8136309385299683, 0.8088759779930115, 0.7992339134216309, 0.8178576231002808, 0.8206313848495483, 0.8228767514228821, 0.8224804997444153, 0.8206313848495483, 0.8183859586715698, 0.8239334225654602, 0.8290846943855286, 0.8323867321014404, 0.8322546482086182, 0.8368775844573975, 0.8372738361358643, 0.8384625315666199, 0.844010055065155, 0.8381983637809753, 0.8392550349235535, 0.8485008478164673, 0.8411042094230652, 0.8450667262077332, 0.8514066934585571, 0.8491612672805786, 0.8498216867446899, 0.8560295701026917, 0.8541803956031799, 0.8544445633888245, 0.8564258217811584, 0.8603883385658264, 0.8638224601745605, 0.863029956817627, 0.8642187118530273, 0.8673887252807617, 0.8741249442100525, 0.8697662353515625, 0.8672566413879395, 0.8648791313171387, 0.8598600029945374, 0.8742570281028748, 0.8767666220664978, 0.8702945709228516, 0.8733324408531189], "val_loss": [1.3132657664162772, 1.1743910312652588, 0.691100903919765, 0.7544276884623936, 0.668783460344587, 0.5983984640666417, 0.563746588570731, 0.5560590539659772, 0.5627702133996146, 0.5411714315414429, 0.5177908965519497, 0.5018147230148315, 0.5342155184064593, 0.5218990870884487, 0.4923273665564401, 0.4785056454794748, 0.502518926348005, 0.4630877120154245, 0.490351813180106, 0.4507101433617728, 0.4615818772997175, 0.4857245002474104, 0.4380610500063215, 0.4679153987339565, 0.46421866757529123, 0.46056910923549105, 0.4280561889920916, 0.4154955063547407, 0.4299278514725821, 0.4089211736406599, 0.4240191749164036, 0.40465024539402555, 0.4063886489186968, 0.4050206882613046, 0.3911874294281006, 0.39859868798937115, 0.3888480578150068, 0.40212844950812204, 0.4046730399131775, 0.38449661220823017, 0.4148069534982954, 0.372288031237466, 0.3850916198321751, 0.40426303659166607, 0.3891803962843759, 0.36782428196498324, 0.37099528312683105, 0.38159872804369244, 0.3703473040035793, 0.3806340438979013, 0.36079029526029316, 0.3669929930141994, 0.38633768047605244, 0.35182780027389526, 0.3542588012559073, 0.35685765743255615, 0.3498231257711138, 0.35756427901131765, 0.35139760800770353, 0.3548602887562343, 0.3680912171091352, 0.34423943928309847, 0.3493066855839321, 0.35560265609196257, 0.35256080968039377, 0.35671270745141165, 0.37510561091559275], "val_accuracy": [0.3973333239555359, 0.5180000066757202, 0.7066666483879089, 0.6386666893959045, 0.6956666707992554, 0.7179999947547913, 0.7483333349227905, 0.7433333396911621, 0.7423333525657654, 0.7513333559036255, 0.7666666507720947, 0.7730000019073486, 0.7559999823570251, 0.7580000162124634, 0.777999997138977, 0.7879999876022339, 0.7746666669845581, 0.7923333048820496, 0.7870000004768372, 0.8013333082199097, 0.7963333129882812, 0.7919999957084656, 0.8186666369438171, 0.7946666479110718, 0.8003333210945129, 0.7990000247955322, 0.8130000233650208, 0.8233333230018616, 0.8043333292007446, 0.8286666870117188, 0.8133333325386047, 0.8333333134651184, 0.8266666531562805, 0.8323333263397217, 0.8320000171661377, 0.8259999752044678, 0.8403333425521851, 0.8203333616256714, 0.8259999752044678, 0.8349999785423279, 0.8240000009536743, 0.843999981880188, 0.8270000219345093, 0.8196666836738586, 0.8403333425521851, 0.8450000286102295, 0.8389999866485596, 0.8316666483879089, 0.8416666388511658, 0.8393333554267883, 0.8496666550636292, 0.8413333296775818, 0.8393333554267883, 0.8510000109672546, 0.8483333587646484, 0.847000002861023, 0.8516666889190674, 0.8450000286102295, 0.8503333330154419, 0.8486666679382324, 0.8443333506584167, 0.8576666712760925, 0.8463333249092102, 0.8420000076293945, 0.8506666421890259, 0.8446666598320007, 0.8476666808128357]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [39, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [8, 19, 15, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7977142930030823, "mapping_values": [1, 6, 6, 3, 3, 2, 16, 16, 12, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.026977984550339, 1.417928693474339, 1.1075335204750871, 0.9061410754836389, 0.8248424372495425, 0.8148091400083755, 0.7480481871839338, 0.7265590041572738, 0.7150121934976654, 0.6703242982509287, 0.6567235285926253, 0.6574241579279624, 0.644609764787137, 0.6161463988565765, 0.6153107645048395, 0.6195905074278408, 0.5927923848411395, 0.5803280225629583, 0.5946381096795188, 0.579507252701112, 0.549114315859504, 0.546911306077967, 0.5454277158995913, 0.5221858958621083, 0.5408422120526608, 0.5055386636589717], "accuracy": [0.33443403244018555, 0.516180157661438, 0.605468213558197, 0.6708492636680603, 0.6968696117401123, 0.7022850513458252, 0.726192057132721, 0.7285695672035217, 0.7329282760620117, 0.7530049085617065, 0.7556465268135071, 0.7471932172775269, 0.7565711140632629, 0.7700436115264893, 0.7683265209197998, 0.767930269241333, 0.7745344042778015, 0.7860256433486938, 0.7750627398490906, 0.7783648371696472, 0.7946110367774963, 0.7971205711364746, 0.7940827012062073, 0.8059701323509216, 0.7947431206703186, 0.8165367841720581], "val_loss": [1.2043281963893346, 1.1788013662610735, 0.7543515648160662, 0.6785615171704974, 0.608844518661499, 0.5865882294518607, 0.6290006807872227, 0.6322731460843768, 0.5494025775364467, 0.5372158288955688, 0.5222447088786534, 0.5118684087480817, 0.49508520535060335, 0.5185542617525373, 0.487541811806815, 0.5060100044522967, 0.4836563893726894, 0.5323739222117833, 0.47270631790161133, 0.45865280287606375, 0.45498878615243094, 0.46887937613895964, 0.4581365925925119, 0.46238887310028076, 0.44637346267700195, 0.4403701680047171], "val_accuracy": [0.5120000243186951, 0.46666666865348816, 0.6460000276565552, 0.6980000138282776, 0.731333315372467, 0.7303333282470703, 0.7020000219345093, 0.7233333587646484, 0.7513333559036255, 0.7540000081062317, 0.7583333253860474, 0.7666666507720947, 0.7913333177566528, 0.7546666860580444, 0.7746666669845581, 0.7803333401679993, 0.7956666946411133, 0.7450000047683716, 0.7846666574478149, 0.8013333082199097, 0.8046666383743286, 0.7886666655540466, 0.7963333129882812, 0.7963333129882812, 0.800000011920929, 0.8013333082199097]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 1, 6, 9, 1, 9, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 2, 1, 1, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 11, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7940000295639038, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.subtract(grad, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0218433599745387, 1.376417629124545, 1.0857279049863653, 0.879341619425068, 0.8521591956431855, 0.8151429021882816, 0.7464494053020989, 0.7152832262646079, 0.7181638702504183, 0.7154762070838093, 0.65287927127297, 0.6632758189957644, 0.628107597232416, 0.6022169208325069, 0.6023531308531241, 0.6124047261848898, 0.6035882022008919, 0.5949790057189995, 0.5919058834163347, 0.5488754091576468, 0.5467506902266046, 0.5518931811905462, 0.5231022820685597, 0.5356075159310822, 0.525624449478873], "accuracy": [0.3354906737804413, 0.5182934999465942, 0.6108836531639099, 0.6828688383102417, 0.6818121671676636, 0.6923788189888, 0.7162858247756958, 0.7256637215614319, 0.7322678565979004, 0.7230220437049866, 0.7511557340621948, 0.7520803213119507, 0.7574957013130188, 0.7763835787773132, 0.7705719470977783, 0.7671377658843994, 0.7724210619926453, 0.7812706232070923, 0.7734777331352234, 0.7950072884559631, 0.7931581139564514, 0.7881389260292053, 0.8039889335632324, 0.8006868362426758, 0.8009510040283203], "val_loss": [1.1398773193359375, 1.0094859259469169, 0.7609397002628872, 0.6955864259174892, 0.6483792577471051, 0.5717986311231341, 0.5776713575635638, 0.598772474697658, 0.5669559240341187, 0.5129602806908744, 0.5640255383082798, 0.4985947438648769, 0.49836230278015137, 0.4904658283506121, 0.5590581553322929, 0.5283108949661255, 0.47454772676740375, 0.482789192880903, 0.4726867846080235, 0.4511121852057321, 0.46032280581338064, 0.4560885599681309, 0.4869181939533779, 0.44700660024370464, 0.46058123452322824], "val_accuracy": [0.5533333420753479, 0.5603333115577698, 0.6819999814033508, 0.6726666688919067, 0.7009999752044678, 0.7459999918937683, 0.7286666631698608, 0.7233333587646484, 0.7383333444595337, 0.7703333497047424, 0.7336666584014893, 0.7730000019073486, 0.7749999761581421, 0.7836666703224182, 0.7276666760444641, 0.7559999823570251, 0.7879999876022339, 0.7773333191871643, 0.7853333353996277, 0.8040000200271606, 0.7850000262260437, 0.7896666526794434, 0.7749999761581421, 0.8019999861717224, 0.7863333225250244]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 7, 3, 3, 8, 9, 1, 2, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [69, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7937142848968506, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0218170348128246, 1.376814705915203, 1.0802619357103402, 0.8769073396499966, 0.863450056250699, 0.7658487962788406, 0.7771112803911505, 0.714755068058666, 0.7176736790144117, 0.7205628453858571, 0.6490061146834145, 0.6573684062263072, 0.6386441614224438, 0.6101675985070771, 0.6040050672927411, 0.6152398427637136, 0.5972075932502369, 0.5870038790867202, 0.5931707334997096], "accuracy": [0.3353586196899414, 0.5188218355178833, 0.6126006841659546, 0.6822084188461304, 0.6796988248825073, 0.7112666964530945, 0.7057191729545593, 0.7301545143127441, 0.7320036888122559, 0.7219653725624084, 0.7536653280258179, 0.7524765729904175, 0.7534011602401733, 0.7685906887054443, 0.7684586048126221, 0.7648923397064209, 0.7749306559562683, 0.7820631265640259, 0.7773081660270691], "val_loss": [1.1383466720581055, 1.0123209953308105, 0.7350144897188459, 0.6819414581571307, 0.6027590547289167, 0.6016932725906372, 0.5621980088097709, 0.6271688938140869, 0.5786587681089129, 0.5157077482768467, 0.5277713877814156, 0.5065863132476807, 0.488038318497794, 0.4803767715181623, 0.5371245656694684, 0.5224005324499947, 0.4708914927073887, 0.4771364756992885, 0.4701575892312186], "val_accuracy": [0.5526666641235352, 0.5613333582878113, 0.6953333616256714, 0.6826666593551636, 0.7243333458900452, 0.7223333120346069, 0.7463333606719971, 0.7080000042915344, 0.734666645526886, 0.7663333415985107, 0.7639999985694885, 0.7699999809265137, 0.781000018119812, 0.7940000295639038, 0.7493333220481873, 0.7636666893959045, 0.7900000214576721, 0.7789999842643738, 0.7883333563804626]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 6, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 11, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7928571701049805, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0287794979288436, 1.3823498182167009, 1.0611752853921343, 0.9068091975589234, 0.8222798208015123, 0.7880524770222509, 0.7383361314234559, 0.722246074980402, 0.7163528100831114, 0.6605015211589679, 0.656467094932801, 0.6624163622554456, 0.6175713599192673, 0.6219794163771939, 0.599829468736874, 0.5799633057960477, 0.5961215374350406, 0.5735396039626066, 0.5717480399620893, 0.5577231570635458], "accuracy": [0.3295469582080841, 0.5275393128395081, 0.607449471950531, 0.6680755615234375, 0.7004358768463135, 0.7029454708099365, 0.7201162576675415, 0.7309470176696777, 0.7351737022399902, 0.7470611333847046, 0.7553823590278625, 0.7518161535263062, 0.7640998363494873, 0.7667415142059326, 0.7819310426712036, 0.7845727205276489, 0.7751948237419128, 0.780610203742981, 0.7868181467056274, 0.7927618622779846], "val_loss": [1.2711682319641113, 0.8387564420700073, 0.7831965344292777, 0.6533343110765729, 0.5898817096437726, 0.577649746622358, 0.5956176008496966, 0.5746119703565326, 0.5509427956172398, 0.5423580578395298, 0.5070034265518188, 0.5168384994779315, 0.5049583060400826, 0.48584611075265066, 0.4782361813953945, 0.5213074343545097, 0.47093551499503, 0.4659340722220285, 0.47798478603363037, 0.4699028900691441], "val_accuracy": [0.4033333361148834, 0.652999997138977, 0.643666684627533, 0.7200000286102295, 0.7300000190734863, 0.7329999804496765, 0.7153333425521851, 0.7446666955947876, 0.7400000095367432, 0.7573333382606506, 0.7770000100135803, 0.7699999809265137, 0.7680000066757202, 0.7823333144187927, 0.7943333387374878, 0.7639999985694885, 0.7853333353996277, 0.7943333387374878, 0.7829999923706055, 0.7879999876022339]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 5, 9, 8, 9, 1, 6, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [92, 19, 11, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7879999876022339, "mapping_values": [1, 10, 10, 6, 4, 2, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.sqrt(alpha)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.026980245653444, 1.419903185546768, 1.1061299843732093, 0.9118181925565654, 0.8248410082890011, 0.8126915787913622, 0.7410492934193106, 0.7236591303951595, 0.7049817567834639, 0.6826834813037868, 0.6596406546991262, 0.642930337269828, 0.6344607464861892, 0.6168760854523053, 0.6268924283408186, 0.6180062779755467, 0.5956294238449261, 0.5814664312688163], "accuracy": [0.33443403244018555, 0.5151234865188599, 0.6062607169151306, 0.6655659675598145, 0.6964733600616455, 0.6993792057037354, 0.7265883088111877, 0.7289658188819885, 0.737022876739502, 0.7448157668113708, 0.7540615797042847, 0.7577598690986633, 0.7606657147407532, 0.7685906887054443, 0.7631752490997314, 0.7700436115264893, 0.774798572063446, 0.7880068421363831], "val_loss": [1.2049737317221505, 1.1729930809565954, 0.7701617649623326, 0.6791877916881016, 0.6098473242350987, 0.5831506252288818, 0.6246452501841954, 0.6333801746368408, 0.5569671222141811, 0.5334047079086304, 0.5175871678761074, 0.5355840240206037, 0.48341526303972515, 0.5341333491461617, 0.48329836981637136, 0.5135115385055542, 0.4824604647500174, 0.5258788551603045], "val_accuracy": [0.5106666684150696, 0.4673333466053009, 0.6430000066757202, 0.7003333568572998, 0.7289999723434448, 0.7379999756813049, 0.7096666693687439, 0.7160000205039978, 0.734000027179718, 0.7633333206176758, 0.7536666393280029, 0.7440000176429749, 0.796999990940094, 0.7386666536331177, 0.7846666574478149, 0.7723333239555359, 0.7960000038146973, 0.7486666440963745]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 6, 6, 9, 1, 8, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 11, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7768571376800537, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 13, 10, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.add(beta, tf.math.add(tf.math.add(grad, grad), tf.math.multiply(tf.math.add(beta, beta), alpha)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.026976321698054, 1.3873357289912223, 1.0674378335625505, 0.9279419793397397, 0.8223148459897553, 0.7891986259789342, 0.750709625432646, 0.6928847872066208, 0.7212150509661971, 0.6853114875898763, 0.6905425597868418, 0.6458255155699648, 0.6289572337315839, 0.6297339725928961, 0.6236595648501165], "accuracy": [0.3411702513694763, 0.5151234865188599, 0.6122044920921326, 0.6596222519874573, 0.6968696117401123, 0.7049266695976257, 0.7195879220962524, 0.733060359954834, 0.7313432693481445, 0.7371549606323242, 0.7366266250610352, 0.7578919529914856, 0.7621186375617981, 0.7576277852058411, 0.7627789974212646], "val_loss": [1.1964507784162248, 0.8489997046334403, 0.7209804909569877, 0.6089989117213658, 0.6215560776846749, 0.5887277977807182, 0.5733890192849296, 0.597853285925729, 0.5707627875464303, 0.5216420718601772, 0.517497079713004, 0.4973717927932739, 0.5190979412623814, 0.5173888206481934, 0.5171691179275513], "val_accuracy": [0.49133333563804626, 0.6230000257492065, 0.7043333053588867, 0.7300000190734863, 0.7163333296775818, 0.7393333315849304, 0.7423333525657654, 0.7333333492279053, 0.7356666922569275, 0.7806666493415833, 0.7703333497047424, 0.7789999842643738, 0.7713333368301392, 0.7799999713897705, 0.7630000114440918]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 8, 8, 8, 6, 7, 4, 5, 6], [0, 1, 2, 1, 0, 0, 2, 2], [65, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 14, 14, 10, 4, 3, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027642009406595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 1, 8, 9, 1, 6, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 11, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 16, 16, 10, 6, 2, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(alpha))), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3027642009406595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 7, 8, 2, 1, 9, 1, 9, 2, 0, 0, 4, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [23, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027642009406595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 6, 6, 9, 1, 9, 2, 1, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [68, 57, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(alpha, grad))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7348012.0797785325, 139652708.22665435, 641903650.4810461, 1774861939.3369436, 3844731365.625677, 7050215846.665434], "accuracy": [0.09998679161071777, 0.09853387624025345, 0.10157178342342377, 0.10513802617788315, 0.09826971590518951, 0.1010434553027153], "val_loss": [27495209.714285713, 219591584.0, 740711131.4285715, 1755273618.2857144, 3427701467.428571, 5922414592.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 1, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 10, 10, 7, 3, 3, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3027642009406595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 6, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 55, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 1, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 14, 8, 2, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(tf.math.square(tf.math.add(alpha, alpha)), tf.math.negative(alpha))))))))))))), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11808215826749802, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 5, 9, 1, 6, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0], [0, 1, 1, 1], [9, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 1, 8, 9, 1, 2, 2, 1, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 1, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 26, 26, 16, 10, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(grad)), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), beta), tf.math.subtract(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))), tf.math.sqrt(tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [303599853.87055093, 5782066487.893277, 26593160885.44182, 73550486574.93277, 159350389028.95786, 292234895620.76764], "accuracy": [0.10011887550354004, 0.09853387624025345, 0.10157178342342377, 0.10513802617788315, 0.09826971590518951, 0.1010434553027153], "val_loss": [1137466148.5714285, 9095395620.571428, 30692058258.285713, 72746074112.0, 142075400777.14285, 245497743652.57144], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 7, 3, 1, 8, 9, 8, 9, 2, 0, 0, 5, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 15, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 11, 5, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(alpha))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.negative(alpha), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7348012.0797785325, 139652708.22665435, 641903650.4810461, 1774861939.3369436, 3844731365.625677, 7050215846.665434], "accuracy": [0.09998679161071777, 0.09853387624025345, 0.10157178342342377, 0.10513802617788315, 0.09826971590518951, 0.1010434553027153], "val_loss": [27495209.714285713, 219591584.0, 740711131.4285715, 1755273618.2857144, 3427701467.428571, 5922414592.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 7, 5, 9, 6, 1, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [5, 19, 37, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302031427909197, 2.3023736207334986, 2.302633451511674, 2.3016175857199306, 2.3035049450443155, 2.301312140029073], "accuracy": [0.09576013684272766, 0.09126931428909302, 0.09192973375320435, 0.08849557489156723, 0.09087307006120682, 0.08836349099874496], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 6, 6, 9, 1, 9, 2, 2, 3, 8, 6, 8, 8, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [72, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 16, 10, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))))), grad)), tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.302031427909197, 2.3023736207334986, 2.302633451511674, 2.3016175857199306, 2.3035049450443155, 2.301312140029073], "accuracy": [0.09576013684272766, 0.09126931428909302, 0.09192973375320435, 0.08849557489156723, 0.09087307006120682, 0.08836349099874496], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]