[{"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [7, 4, 2, 3, 1, 1, 7], [1, 2, 3], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.8117142915725708, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 15, 10, 7, 3, 0, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))))), tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, sigma))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1065094236054707, 1.6822922813138155, 1.3079640747706935, 0.9082643160368425, 0.8635202661764825, 0.7386395906759622, 0.7259909248922038, 0.6776398792872733, 0.6643606067931946, 0.6238079039790075, 0.5880044486150765, 0.5937951664331961, 0.6149861100107026, 0.5609927165383881, 0.5231961141078543, 0.5318502974374781, 0.5137032083768446, 0.49251153170393286, 0.509498765132903, 0.49736403239606286, 0.46177402493377734, 0.46047959477988687, 0.46632575029867707, 0.4469059402200099, 0.4216634137849955, 0.4468525928111675, 0.4369251974947527], "accuracy": [0.3039228618144989, 0.43072250485420227, 0.5473517179489136, 0.6630563735961914, 0.6752080321311951, 0.72672039270401, 0.7193237543106079, 0.7378153204917908, 0.7392682433128357, 0.7573636174201965, 0.7738739848136902, 0.7750627398490906, 0.7675340175628662, 0.7814027070999146, 0.7993659973144531, 0.7996301651000977, 0.8084797263145447, 0.8109893202781677, 0.8092722296714783, 0.8096684813499451, 0.8327829837799072, 0.8234050869941711, 0.8240655064582825, 0.8323867321014404, 0.8437458872795105, 0.8348963260650635, 0.8345000743865967], "val_loss": [1.4075088500976562, 1.0508637087685722, 0.8381812402180263, 0.6437908240727016, 0.5986526693616595, 0.6606577975409371, 0.5706310953412738, 0.5200665507997785, 0.5485146556581769, 0.4766806364059448, 0.49997264998299734, 0.466625588280814, 0.4831788880484445, 0.4560376065117972, 0.43133338008608135, 0.4422848905835833, 0.44082216705594746, 0.4131860477583749, 0.4103380101067679, 0.3978551541055952, 0.44361913204193115, 0.3909919091633388, 0.3975658587047032, 0.4376480409077236, 0.411212112222399, 0.3942919373512268, 0.3703965204102652], "val_accuracy": [0.5213333368301392, 0.5556666851043701, 0.6383333206176758, 0.7046666741371155, 0.7210000157356262, 0.6896666884422302, 0.7293333411216736, 0.7590000033378601, 0.7519999742507935, 0.7839999794960022, 0.7663333415985107, 0.7910000085830688, 0.778333306312561, 0.7973333597183228, 0.8023333549499512, 0.8029999732971191, 0.8066666722297668, 0.8286666870117188, 0.8226666450500488, 0.8259999752044678, 0.7923333048820496, 0.8366666436195374, 0.8209999799728394, 0.8090000152587891, 0.8320000171661377, 0.8240000009536743, 0.8360000252723694]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [1, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [63, 71, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0], [7, 4, 8, 2], [0, 3, 3], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 2, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.23314285278320312, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2997594109899127, 2.290010099287566, 2.3056939159323275, 2.3054889695141467, 2.3032026008419026, 2.3030327005062623], "accuracy": [0.20578522980213165, 0.1592920422554016, 0.12851670384407043, 0.1002509593963623, 0.09853387624025345, 0.09919429570436478], "val_loss": [1.7163331849234444, 1.9420572008405412, 1.9781829289027624, 1.9739021573747908, 1.9736076763698034, 1.9736239569527763], "val_accuracy": [0.24533332884311676, 0.17800000309944153, 0.09833333641290665, 0.10233332961797714, 0.10133333504199982, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1], [7, 4, 8, 2], [1, 1, 3], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 1, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.18400000035762787, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.4526138937374102, 2.750216596744725, 2.3580373732673023, 2.327436328485358, 2.4384068985499283, NaN, NaN, NaN], "accuracy": [0.19178444147109985, 0.12679962813854218, 0.14449875056743622, 0.18901069462299347, 0.09853387624025345, 0.0956280529499054, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.2104811668395996, 1.9343922478812081, 1.8522071157182967, 2.1541476249694824, 2.3747590609959195, NaN, NaN, NaN], "val_accuracy": [0.1599999964237213, 0.14766666293144226, 0.2123333364725113, 0.10066666454076767, 0.10100000351667404, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [95, 68, 58, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 7, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 4, 2, 3, 1, 1, 7], [1, 7, 3, 0], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [0, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.11342857033014297, "mapping_values": [1, 1, 1, 1, 0, 1, 4, 4, 2, 2, 0, 15, 11, 7, 4, 1, 3, 1, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.subtract(sigma, sigma)), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, sigma), sigma)))))))), sigma)), tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3015138168596967, 2.3025480060844434, 2.3025848595316005, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9735353333609444, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1120000034570694, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1], [5, 4, 8, 2], [1, 1, 3], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.1014285683631897, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [8.098547303145981, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.24342887103557587, 0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [245.21732875279017, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [87, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [7, 4, 2, 3, 1, 1, 9], [1, 2, 3], [28], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 6, 6, 4, 2, 0, 9, 5, 4, 1, 0, 18, 11, 7, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.square(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), beta)), alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10474177449941635, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [1, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 2, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [63, 71, 56, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0], [7, 0, 8, 2, 2, 0, 4, 6], [0, 3, 3], [28], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 2, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 2, 2, 2, 0, 2, 2, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(alpha)))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07674019038677216, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 2, 5, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1], [7, 4, 2, 3, 1, 1, 7], [1, 2, 3], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 6, 6, 5, 1, 1, 5, 3, 2, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [0, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [7, 4, 2, 3, 1, 1, 7], [1, 1, 3], [28], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 1, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 25, 15, 10, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.square(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), beta)))))))), alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(beta), beta), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [7, 4, 8, 2], [1, 2, 3], [28], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 1, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 18, 11, 7, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.divide_no_nan(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.square(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), beta)), alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [95, 68, 58, 41, 55, 68], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1], [7, 4, 8, 2], [1, 4, 7], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [0, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 45, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 6, 6, 5, 1, 1, 6, 5, 3, 2, 0, 3, 1, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.sqrt(sigma)), tf.math.add(sigma, alpha))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302719641134897, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1], [7, 4, 8, 2], [1, 1, 3], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 1, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 4, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10394927859306335, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [1, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 3, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [63, 57, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1], [7, 4, 8, 2], [1, 6, 3], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [0, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [64, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302719641134897, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1], [7, 4, 2, 3, 1, 1, 7], [1, 2, 3], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 1, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, alpha)", "other_info": {"loss": [34813414.119971804, 5244016210.774798, 91147462418.22533, 634995446455.2001, 2814474695919.262, 9318642314231.209], "accuracy": [0.09893012791872025, 0.1006472036242485, 0.10249637067317963, 0.09945846349000931, 0.09681680053472519, 0.10051512718200684], "val_loss": [292050139.4285714, 15728396580.571428, 168785777225.14285, 920108007424.0, 3446388143835.4287, 10165473059986.285], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [5, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 2, 5, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1], [7, 4, 8, 2], [1, 1, 3], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 1, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 6, 6, 5, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303813268385386, 2.3048020765498296, 2.306587474032195, 2.307818511851538, 2.307246651049256, 2.307408393885812, 2.3095103216807384, 2.30944178148803], "accuracy": [0.09338264167308807, 0.09972262382507324, 0.09893012791872025, 0.09959053993225098, 0.09985470771789551, 0.10077928751707077, 0.09628847241401672, 0.09959053993225098], "val_loss": [1.9761712210518974, 1.975383962903704, 1.9750960894993372, 1.9778221675327845, 1.977654184613909, 1.9782677377973283, 1.978414876120431, 1.9783880370003837], "val_accuracy": [0.10066666454076767, 0.10000000149011612, 0.10566666722297668, 0.09799999743700027, 0.09833333641290665, 0.09799999743700027, 0.10000000149011612, 0.10566666722297668]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 8, 0, 0, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [7, 9, 8, 2, 4], [1, 2, 3], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [5, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 6, 6, 5, 1, 0, 4, 3, 3, 0, 1, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [78, 68, 58, 41, 55, 68], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [7, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0], [5, 4, 8, 2], [1, 1, 3], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 2, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302719641134897, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [7, 4, 2, 3, 1, 1, 7], [1, 2, 3], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 2, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.06942857056856155, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 9, 7, 4, 3, 0, 3, 1, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, sigma))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, beta)", "other_info": {"loss": [2.301781351351231, 2.3018773862037363, 2.301095781262052, 2.3005645861478925, 2.300592388128639, 2.2999694836437268, 2.299788378611091, 2.3002267707340502, 2.2999512514402336, 2.3005861518972224, 2.2997422013945976, 2.2995692360371236, 2.2998619466929497, 2.300622585065109, 2.2998790568081047, 2.3005026278321328], "accuracy": [0.09470347315073013, 0.09008057415485382, 0.09615638852119446, 0.09536388516426086, 0.09602430462837219, 0.09549596905708313, 0.1026284471154213, 0.09985470771789551, 0.09668471664190292, 0.09602430462837219, 0.09840179979801178, 0.10157178342342377, 0.1006472036242485, 0.09100515395402908, 0.09945846349000931, 0.09232597798109055], "val_loss": [1.9704004696437292, 1.969886643545968, 1.9695643016270228, 1.9694766998291016, 1.9693757465907507, 1.9693660054888045, 1.9694224085126604, 1.9692255428859167, 1.96921477999006, 1.9692560604640417, 1.9694739069257463, 1.9696720668247767, 1.9699709074837821, 1.9702246529715401, 1.9704991749354772, 1.9706942694527763], "val_accuracy": [0.04266666620969772, 0.05133333429694176, 0.057999998331069946, 0.061666667461395264, 0.0663333311676979, 0.0689999982714653, 0.07266666740179062, 0.07699999958276749, 0.07999999821186066, 0.0820000022649765, 0.0846666693687439, 0.08233333379030228, 0.08033332973718643, 0.07833333313465118, 0.07866666465997696, 0.07900000363588333]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1], [7, 4, 8, 2], [1, 1, 3], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 1, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302170626822086, 2.3031777619780205, 2.303107316326141, 2.3027847171569813, 2.3031115172293837, 2.302886741855094], "accuracy": [0.0940430611371994, 0.08506141602993011, 0.08942015469074249, 0.0886276587843895, 0.08770307898521423, 0.09153348207473755], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [9, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 68, 58, 41, 55, 68], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 7, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1], [7, 4, 8, 2], [1, 4, 7], [28], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 8, 8, 8, 6, 0, 6, 5, 6, 0, 2, 2, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 2, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [57, 7, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 1, 0, 1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.sqrt(tf.math.sqrt(beta)))", "other_info": {"loss": [2.302170626822086, 2.3031777619780205, 2.303107316326141, 2.3027847171569813, 2.3031115172293837, 2.302886741855094], "accuracy": [0.0940430611371994, 0.08506141602993011, 0.08942015469074249, 0.0886276587843895, 0.08770307898521423, 0.09153348207473755], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]