[{"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8040000200271606, "mapping_values": [1, 2, 2, 1, 1, 1, 31, 31, 18, 13, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad))), tf.math.add(beta, grad))))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(alpha, tf.math.negative(tf.math.add(beta, beta)))))))))))), grad), grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.01561693750935, 1.4516211769379614, 1.0393572867570096, 0.8859498937919454, 0.818066787104077, 0.7470510189228715, 0.7198766354777006, 0.7085315620800003, 0.6698266732741529, 0.6311091511020602, 0.6326587489173712, 0.6000683558237567, 0.6025698562544476, 0.5992516891248726, 0.5878302642320047, 0.5580510785629752, 0.5422719699626963, 0.5484492215088661, 0.5301377298518289, 0.522121189835994, 0.5098267016692988, 0.5173354064547516, 0.5048497264348379, 0.46567501948651635, 0.4754393309169772, 0.47155134691034467, 0.4866810347882433, 0.4524066651486261, 0.44281415170713767, 0.43472561102816615, 0.44393599904869935, 0.424713707473284, 0.4316781811340374, 0.4202551580793302, 0.41329864529161375, 0.4138798845001672, 0.3999757004719463, 0.4199323283564759, 0.38062391567223924, 0.38709934179210675, 0.4033057301264272, 0.3724363439386358, 0.3638165099761584, 0.35230091598370544, 0.36092415495697283, 0.36013960558441355, 0.34972610416240413, 0.3457294866480076, 0.3555190832725747, 0.3343725833815984, 0.3359229722948532, 0.33643477589478504, 0.3394036843178058, 0.3323393554940058, 0.3309626571648093], "accuracy": [0.32003697752952576, 0.48566898703575134, 0.6201294660568237, 0.6604147553443909, 0.695813000202179, 0.7168141603469849, 0.7213049530982971, 0.7310791015625, 0.7445515990257263, 0.7556465268135071, 0.7585523724555969, 0.7720248103141785, 0.7652885913848877, 0.7713643908500671, 0.7740060687065125, 0.7874785661697388, 0.7948752045631409, 0.7906485199928284, 0.7979130744934082, 0.8010830879211426, 0.8090080618858337, 0.806630551815033, 0.8082155585289001, 0.8228767514228821, 0.81548011302948, 0.8220842480659485, 0.8228767514228821, 0.8319904804229736, 0.8315942287445068, 0.8341038227081299, 0.8314621448516846, 0.8417646288871765, 0.8392550349235535, 0.842028796672821, 0.8461233377456665, 0.8488970994949341, 0.846387505531311, 0.8411042094230652, 0.8569541573524475, 0.8529917001724243, 0.8544445633888245, 0.8627657890319824, 0.8672566413879395, 0.869502067565918, 0.8656716346740723, 0.8627657890319824, 0.8683133125305176, 0.8728041052818298, 0.8648791313171387, 0.8746532797813416, 0.8713511824607849, 0.8754457831382751, 0.8747853636741638, 0.873860776424408, 0.8737286925315857], "val_loss": [1.5824378558567591, 0.7639287199292865, 0.684292197227478, 0.6498040471758161, 0.5890265873500279, 0.5775668280465263, 0.5795873233250209, 0.5396049703870501, 0.5272406339645386, 0.5942623274666923, 0.5011324201311383, 0.49647326128823416, 0.48198183945247103, 0.5416171210152763, 0.4676917110170637, 0.46484569140842985, 0.48467694010053364, 0.46993025711604525, 0.43746321541922434, 0.4388678584780012, 0.4248508300100054, 0.4349923985345023, 0.41826266050338745, 0.4359808223588126, 0.4008431775229318, 0.4188107507569449, 0.43096033164433073, 0.3926955461502075, 0.3928399085998535, 0.3913216846329825, 0.38737721954073223, 0.38139255557741436, 0.3835641997201102, 0.38119649035590036, 0.3793426581791469, 0.3762845822743007, 0.4315000517027719, 0.39625807319368633, 0.36257180145808626, 0.3604816624096462, 0.35468895946230206, 0.3708764059203012, 0.3500941736357553, 0.3741638830729893, 0.3583904504776001, 0.3564216068812779, 0.35307471241269794, 0.3563092606408255, 0.3908554571015494, 0.35909466232572285, 0.33985462359019686, 0.3537082927567618, 0.3455053056989397, 0.3445225102560861, 0.3463677849088396], "val_accuracy": [0.31200000643730164, 0.6769999861717224, 0.6863333582878113, 0.7149999737739563, 0.7363333106040955, 0.7386666536331177, 0.734666645526886, 0.7586666941642761, 0.7630000114440918, 0.7196666598320007, 0.7743333578109741, 0.7763333320617676, 0.7860000133514404, 0.7639999985694885, 0.7923333048820496, 0.793666660785675, 0.7903333306312561, 0.7870000004768372, 0.8069999814033508, 0.8003333210945129, 0.8180000185966492, 0.8003333210945129, 0.8259999752044678, 0.8046666383743286, 0.831333339214325, 0.8159999847412109, 0.8029999732971191, 0.8330000042915344, 0.8266666531562805, 0.8403333425521851, 0.8330000042915344, 0.843999981880188, 0.8333333134651184, 0.8389999866485596, 0.8476666808128357, 0.8429999947547913, 0.812666654586792, 0.8263333439826965, 0.8503333330154419, 0.8473333120346069, 0.8479999899864197, 0.8396666646003723, 0.8526666760444641, 0.8493333458900452, 0.8516666889190674, 0.8506666421890259, 0.8519999980926514, 0.8556666374206543, 0.8346666693687439, 0.859000027179718, 0.8586666584014893, 0.8460000157356262, 0.8519999980926514, 0.8553333282470703, 0.8493333458900452]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 1, 4, 2, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8040000200271606, "mapping_values": [1, 2, 2, 1, 1, 1, 32, 32, 20, 12, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, alpha))), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), alpha), grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.square(tf.math.sqrt(beta))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, alpha)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0156927432177514, 1.45348198346773, 1.0393443205305897, 0.8781902726772612, 0.8087078412730759, 0.7507581501793726, 0.6984692698519511, 0.7068418155272623, 0.6782142108284392, 0.6345522153678272, 0.6297210943209197, 0.6072626700648196, 0.597901710941492, 0.5925093079759555, 0.5888197465406481, 0.5523450695654311, 0.5808051070280834, 0.5500670863322106, 0.5166760882043631, 0.5196734487325476, 0.5117381172346448, 0.5207534962169026, 0.5059387669225079, 0.4681840067833422, 0.4764377085201461, 0.47049907591081236, 0.48760808621887614, 0.45397067216834247, 0.44647722252686545, 0.43312208569596206, 0.44238522654715906, 0.42529887005464356, 0.43769052192094443, 0.4171874975846381, 0.41497652579638716, 0.4134818192100512, 0.4030985435860394, 0.42043696674751396, 0.382456426969404, 0.3834784460373212, 0.40471638589329834, 0.37509194078651387, 0.36513383562349766, 0.36475874588883483], "accuracy": [0.3199048936367035, 0.4858010709285736, 0.618280291557312, 0.6573768258094788, 0.6954167485237122, 0.7145687341690063, 0.7343811988830566, 0.7313432693481445, 0.7397965788841248, 0.7594769597053528, 0.7581561207771301, 0.7711002230644226, 0.7683265209197998, 0.7683265209197998, 0.7745344042778015, 0.7895918488502502, 0.7792893648147583, 0.7885351777076721, 0.8053097128868103, 0.8050455451011658, 0.8064984679222107, 0.8042530417442322, 0.8090080618858337, 0.8247259259223938, 0.81548011302948, 0.8211596608161926, 0.8251221776008606, 0.8341038227081299, 0.8308017253875732, 0.8342359066009521, 0.83119797706604, 0.8438779711723328, 0.8343679904937744, 0.843481719493866, 0.8450667262077332, 0.8491612672805786, 0.8454629778862, 0.8413683772087097, 0.8576145768165588, 0.8533879518508911, 0.852331280708313, 0.8622375130653381, 0.8659358024597168, 0.8640866279602051], "val_loss": [1.5827537264142717, 0.762703537940979, 0.690663354737418, 0.6316875559943063, 0.584449291229248, 0.5731153317860195, 0.6665201527731759, 0.5429385900497437, 0.5331709555217198, 0.576393757547651, 0.5076994385038104, 0.5182220765522548, 0.49018897329057964, 0.5656959159033639, 0.47899321147373747, 0.5440982920782906, 0.4920872620173863, 0.44667824677058626, 0.4317419273512704, 0.4349463837487357, 0.4270716735294887, 0.4259243437222072, 0.4178776911326817, 0.42423353024891447, 0.39892243487494333, 0.4205694964953831, 0.4291564055851528, 0.39541620867592947, 0.39121733392987934, 0.387667783669063, 0.3926795721054077, 0.37945484263556345, 0.38000147683279856, 0.3726491246904646, 0.37506119694028583, 0.3739368830408369, 0.42944986479622976, 0.4029815282140459, 0.3595541204724993, 0.3691935879843576, 0.35258494104657856, 0.3738234043121338, 0.3466483269418989, 0.38385569197790964], "val_accuracy": [0.3173333406448364, 0.6779999732971191, 0.6853333115577698, 0.7143333554267883, 0.7416666746139526, 0.7350000143051147, 0.6786666512489319, 0.7506666779518127, 0.7549999952316284, 0.7316666841506958, 0.7723333239555359, 0.7556666731834412, 0.784333348274231, 0.7549999952316284, 0.7850000262260437, 0.7616666555404663, 0.7836666703224182, 0.8059999942779541, 0.8103333115577698, 0.8063333630561829, 0.809333324432373, 0.8113333582878113, 0.8259999752044678, 0.8100000023841858, 0.8320000171661377, 0.8163333535194397, 0.8023333549499512, 0.8306666612625122, 0.8293333053588867, 0.8383333086967468, 0.831333339214325, 0.8463333249092102, 0.8379999995231628, 0.8410000205039978, 0.846666693687439, 0.8416666388511658, 0.8159999847412109, 0.8193333148956299, 0.8523333072662354, 0.8450000286102295, 0.8516666889190674, 0.8370000123977661, 0.8500000238418579, 0.8416666388511658]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [43, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 4, 0, 2, 9, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8005714416503906, "mapping_values": [1, 2, 2, 1, 1, 1, 16, 16, 11, 5, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0156253254597827, 1.4543223317273146, 1.041833832838343, 0.8853559602032783, 0.8064242910006736, 0.7540262182627089, 0.7087175874205597, 0.6977819096631126, 0.6680466051681749, 0.6509502172202419, 0.6501828777303533, 0.6103134583945067, 0.6050484318459873, 0.5735049573988757, 0.5866937192282137, 0.5470288166469508, 0.5822831936610641, 0.5561189219668525, 0.5220186666821318, 0.5223195111479159, 0.5172135425423272, 0.5156100864864501, 0.5017802288991711, 0.46985237530083657, 0.47592851878188747, 0.46682868985105674, 0.4861290967302268, 0.45288401728749605, 0.4490331891954158, 0.43341736266200787, 0.4392670136771229, 0.42973385552263466, 0.43687605637018284, 0.42195822171578556, 0.41544894116539854, 0.41280613700475327, 0.39930766375309534, 0.41832086259284906, 0.38169072848883573, 0.3841977871294114, 0.40109530788418357, 0.3741197212890879, 0.36630701518030434, 0.35609079309111935, 0.3610504584352747, 0.35297055613520656, 0.3503601280272424, 0.3526487720050454, 0.3574825365348751, 0.33714951077440963, 0.3396239977242877, 0.3351693945420086, 0.34164921383359537, 0.33513233515926877, 0.3294824824325633], "accuracy": [0.32003697752952576, 0.4858010709285736, 0.6192048788070679, 0.6571126580238342, 0.6956809163093567, 0.7137762308120728, 0.7321357727050781, 0.7358341217041016, 0.7380794882774353, 0.7479857206344604, 0.7477215528488159, 0.769911527633667, 0.7664773464202881, 0.7835160493850708, 0.7784969210624695, 0.7951393723487854, 0.7771760821342468, 0.7866860628128052, 0.8020076751708984, 0.8038568496704102, 0.8054417967796326, 0.807158887386322, 0.8094043135643005, 0.8227446675300598, 0.8144234418869019, 0.8253863453865051, 0.8252542614936829, 0.8329150676727295, 0.8264430165290833, 0.8368775844573975, 0.8294808864593506, 0.8408400416374207, 0.8374059200286865, 0.839519202709198, 0.842028796672821, 0.8492933511734009, 0.8491612672805786, 0.8399154543876648, 0.8573504090309143, 0.8544445633888245, 0.8518029451370239, 0.8634262084960938, 0.86553955078125, 0.8648791313171387, 0.8665962219238281, 0.8667283058166504, 0.8689737319946289, 0.8659358024597168, 0.8646149635314941, 0.8706908226013184, 0.8696341514587402, 0.8751816153526306, 0.8728041052818298, 0.8739928603172302, 0.8720116019248962], "val_loss": [1.5823094163622176, 0.7612736054829189, 0.6918999297278268, 0.641251938683646, 0.5846004656382969, 0.5665029457637242, 0.6138805832181659, 0.54824355670384, 0.5675734111240932, 0.6873578684670585, 0.5034882000514439, 0.48829456738063265, 0.49263153757367817, 0.4777554954801287, 0.48399857112339567, 0.5058844600405011, 0.5036218677248273, 0.45759332180023193, 0.43834203481674194, 0.43594884872436523, 0.4233049750328064, 0.4349672624043056, 0.4220636912754604, 0.4261509094919477, 0.3971865773200989, 0.4143340928213937, 0.43582604612622944, 0.39760885919843403, 0.393595210143498, 0.393085845879146, 0.3926961762564523, 0.38006778274263653, 0.3836558886936733, 0.37597109590257916, 0.3761929188455854, 0.3737715908459255, 0.4234454035758972, 0.4022384541375296, 0.3603446568761553, 0.36609816551208496, 0.35166618653706144, 0.3821903041430882, 0.35207882949284147, 0.35414741720472065, 0.34355410507747103, 0.3596219761031015, 0.36369756289890837, 0.3569332105772836, 0.3811731679098947, 0.36514945541109356, 0.34319472312927246, 0.35617474147251676, 0.35071416412081036, 0.34546193054744173, 0.3496719854218619], "val_accuracy": [0.31333333253860474, 0.6806666851043701, 0.6830000281333923, 0.7143333554267883, 0.7450000047683716, 0.7440000176429749, 0.7166666388511658, 0.7483333349227905, 0.7246666550636292, 0.684333324432373, 0.7706666588783264, 0.7876666784286499, 0.7833333611488342, 0.7876666784286499, 0.7896666526794434, 0.7793333530426025, 0.7763333320617676, 0.8026666641235352, 0.8066666722297668, 0.8043333292007446, 0.8140000104904175, 0.8013333082199097, 0.8259999752044678, 0.8080000281333923, 0.8333333134651184, 0.8146666884422302, 0.7950000166893005, 0.8306666612625122, 0.8276666402816772, 0.8349999785423279, 0.8320000171661377, 0.8423333168029785, 0.8346666693687439, 0.8433333039283752, 0.8500000238418579, 0.8446666598320007, 0.8166666626930237, 0.8183333277702332, 0.8510000109672546, 0.8443333506584167, 0.8496666550636292, 0.8330000042915344, 0.8489999771118164, 0.8513333201408386, 0.8539999723434448, 0.8446666598320007, 0.8426666855812073, 0.8539999723434448, 0.840666651725769, 0.856333315372467, 0.8553333282470703, 0.8450000286102295, 0.8446666598320007, 0.8543333411216736, 0.8486666679382324]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 3, 1, 4, 4, 2, 3, 3, 0, 6, 0, 6, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 3, 2, 1, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7954285740852356, "mapping_values": [1, 2, 2, 1, 1, 1, 31, 31, 18, 13, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), grad))), tf.math.add(beta, beta))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.sqrt(alpha))))), tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, grad), tf.math.negative(grad))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9987974062004992, 1.6178011704335171, 1.1328835285980594, 0.9302304974479005, 0.8257044334736608, 0.7870251819316217, 0.7521240427714171, 0.7392571022670817, 0.6776452389895216, 0.7218169803947522, 0.6773462070056461, 0.6561116921651349, 0.6367426460224797, 0.5938673141515644, 0.5972009206397612, 0.5870575509791235, 0.5679136814773201, 0.5579183637316453, 0.5630548527416788, 0.5503885486122482, 0.5488771456674484, 0.5141509999184639, 0.5267966376980928], "accuracy": [0.33166027069091797, 0.47430986166000366, 0.5954299569129944, 0.6551313996315002, 0.6936996579170227, 0.698190450668335, 0.7209087014198303, 0.7181349992752075, 0.7416457533836365, 0.7177387475967407, 0.7425703406333923, 0.7405890822410583, 0.7588165402412415, 0.7763835787773132, 0.7769119143486023, 0.769911527633667, 0.7845727205276489, 0.7858935594558716, 0.7869502305984497, 0.791969358921051, 0.7927618622779846, 0.8038568496704102, 0.7994980812072754], "val_loss": [1.6288549559456962, 0.8903516020093646, 0.7588908842631749, 0.6998584270477295, 0.6193453924996513, 0.5742044959749494, 0.598400388445173, 0.5331124578203473, 0.5538292101451329, 0.5869372912815639, 0.5259557621819633, 0.5554380757468087, 0.5040704182216099, 0.4958799566541399, 0.4961261238370623, 0.46880212851933073, 0.4845243011202131, 0.44709893635341097, 0.46248842988695416, 0.4373517206736973, 0.43640140124729704, 0.43488167013440815, 0.44062123128346037], "val_accuracy": [0.29866665601730347, 0.6366666555404663, 0.6570000052452087, 0.7116666436195374, 0.7073333263397217, 0.7406666874885559, 0.7110000252723694, 0.7616666555404663, 0.7353333234786987, 0.7360000014305115, 0.7400000095367432, 0.734666645526886, 0.7796666622161865, 0.7760000228881836, 0.762333333492279, 0.7886666655540466, 0.7693333625793457, 0.8086666464805603, 0.7896666526794434, 0.8086666464805603, 0.8069999814033508, 0.8076666593551636, 0.7983333468437195]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [1, 80, 61], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 3, 4, 3, 0, 5, 5, 6, 1, 2, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [7, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [12, 9, 76, 58]], "fitness": -0.4497142732143402, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3030865219495613, 2.300344033941003, 2.2990919234588585, 2.29926963224702, 2.2983755218259976, 2.2982159060194918, 2.2951202701190208, 2.2931854544125527, 2.293656306889677, 2.293675320133667, 2.2907551305798837, 2.2924358159827203, 2.2890207911400573, 2.2891157480546465, 2.288178317724139, 2.286058788459535, 2.285672769350005, 2.284024416920122, 2.284282045247233, 2.282035478275245, 2.2810973196832056, 2.2785528725825754, 2.2792316841616245, 2.2782383210088093, 2.276965956000793, 2.276820016244242, 2.2752339436850133, 2.274868370787248, 2.2726743390704693, 2.271191238176081, 2.2713125743382263, 2.2702230717826906, 2.2696494981833517, 2.2676390403958675, 2.266782186381207, 2.2657388745203244, 2.2639591987689474, 2.2616789476384325, 2.2622594492641093, 2.260856856444508, 2.259377889818346, 2.2575439622987608, 2.2570048641960114, 2.257073456632337, 2.255008202722721, 2.252749772828253, 2.253430070909826, 2.2511116811832683, 2.250986441582138, 2.248073588241408, 2.2486153256702637, 2.24631629426639, 2.2452304077312193, 2.2456715764496793, 2.243074298393079, 2.241963086363158, 2.239401180888085, 2.238523175703489, 2.237068289763199, 2.235901362262051, 2.2337136552034984, 2.233227348787406, 2.2317983233114638, 2.23177433747657, 2.2277978856282354, 2.225899112852825, 2.2266828470919124, 2.2232595196709957, 2.2219765628758767, 2.2212734481268366, 2.219345509872114, 2.2190701524421854, 2.2172622519115084, 2.216022741556829, 2.21423615846872, 2.212599097493617, 2.212359164227521, 2.209098626216011, 2.2074310364834684, 2.2065072367298697, 2.2029707643412926, 2.20280324441252, 2.1999603590047623, 2.197792695482189, 2.196814706847967, 2.19492314019617, 2.1941969895076285, 2.1921901769012018, 2.1881084740988537, 2.186917550244808, 2.1875934618150144, 2.1813801718016403, 2.1837643223856857, 2.180686689622965, 2.177608762859999, 2.1759583118049743, 2.1747979348472017, 2.171136438791479, 2.169975330297107, 2.1683753023624988], "accuracy": [0.0940430611371994, 0.09774138033390045, 0.09668471664190292, 0.09615638852119446, 0.10091137140989304, 0.09879804402589798, 0.10579843819141388, 0.11094967275857925, 0.1142517477273941, 0.1138555034995079, 0.11834631860256195, 0.10989301651716232, 0.1254788041114807, 0.12296922504901886, 0.12812046706676483, 0.13591335713863373, 0.13617752492427826, 0.13538502156734467, 0.1394795924425125, 0.14568749070167542, 0.14397041499614716, 0.15440496802330017, 0.14912164211273193, 0.15849953889846802, 0.15400871634483337, 0.15321621298789978, 0.16074495017528534, 0.16510368883609772, 0.16563200950622559, 0.17197199165821075, 0.17183992266654968, 0.17540615797042847, 0.17382116615772247, 0.18134988844394684, 0.18584071099758148, 0.1872936189174652, 0.19059570133686066, 0.19931316375732422, 0.19376568496227264, 0.2024831622838974, 0.20340773463249207, 0.20604939758777618, 0.2052568942308426, 0.20684190094470978, 0.21291771531105042, 0.21912561357021332, 0.21793685853481293, 0.22493726015090942, 0.22084268927574158, 0.23312640190124512, 0.22744683921337128, 0.2343151569366455, 0.22744683921337128, 0.23418307304382324, 0.2339189052581787, 0.2475234419107437, 0.2425042986869812, 0.2440892904996872, 0.2487121969461441, 0.25016510486602783, 0.25795799493789673, 0.2545238435268402, 0.2596750855445862, 0.2627129852771759, 0.2654867172241211, 0.26997753977775574, 0.2681283950805664, 0.27024170756340027, 0.27420419454574585, 0.2767137885093689, 0.28503501415252686, 0.2843745946884155, 0.2900541424751282, 0.28278958797454834, 0.28939375281333923, 0.2895258367061615, 0.28345000743865967, 0.28899750113487244, 0.29982829093933105, 0.2930920720100403, 0.30260202288627625, 0.30603620409965515, 0.31039494276046753, 0.30603620409965515, 0.30722492933273315, 0.31726324558258057, 0.3152819871902466, 0.3078853487968445, 0.32505613565444946, 0.31382909417152405, 0.31422534584999084, 0.33126401901245117, 0.32624489068984985, 0.3229427933692932, 0.3299432098865509, 0.32743361592292786, 0.33126401901245117, 0.3327169418334961, 0.3279619514942169, 0.3354906737804413], "val_loss": [1.9701876640319824, 1.969203335898263, 1.9682277270725794, 1.9672496659415108, 1.9662683350699288, 1.9652776036943709, 1.96428986958095, 1.9633073125566756, 1.9623351097106934, 1.9613708087376185, 1.9604062352861678, 1.9594410487583704, 1.958463260105678, 1.9574833597455705, 1.9565119743347168, 1.955538068498884, 1.9545586449759347, 1.953585147857666, 1.9526159422738212, 1.9516327040536063, 1.9506532124110632, 1.9496613911220007, 1.948674133845738, 1.9476887157985143, 1.9466994149344308, 1.9457072530473982, 1.9447063037327357, 1.9437082835606165, 1.9427063124520438, 1.9416978699820382, 1.940690517425537, 1.9396910667419434, 1.9386717932564872, 1.937662056514195, 1.9366301809038435, 1.9356000764029366, 1.9345604351588659, 1.9335073743547713, 1.9324535642351424, 1.931382656097412, 1.9303103855678014, 1.9292329379490443, 1.9281388010297502, 1.9270504542759486, 1.925943170275007, 1.9248316628592355, 1.9237230164664132, 1.9225905963352747, 1.9214566094534737, 1.920297622680664, 1.9191478320530482, 1.9179870741707938, 1.9168081964765276, 1.9156225068228585, 1.9144087518964494, 1.913184574672154, 1.9119393484933036, 1.9107015473502023, 1.90943786076137, 1.9081644330705916, 1.9068733624049596, 1.9055706432887487, 1.90426424571446, 1.9029430661882674, 1.9015919821602958, 1.90023102079119, 1.8988631793430872, 1.897474765777588, 1.896066529410226, 1.8946428298950195, 1.8932112285069056, 1.8917698860168457, 1.8903065408979143, 1.8888141087123327, 1.8873122079031808, 1.8858041082109724, 1.8842761175973075, 1.882720674787249, 1.881136757986886, 1.8795442581176758, 1.8779192652021135, 1.8762835775102888, 1.8746156011308943, 1.8729234422956194, 1.87121547971453, 1.8694902147565569, 1.8677613394601005, 1.8660002435956682, 1.8641853332519531, 1.862384864262172, 1.86053923198155, 1.8586594036647253, 1.8567829813276018, 1.8548668452671595, 1.8529087475367956, 1.8509368215288435, 1.8489582198006767, 1.8469360215323312, 1.844886234828404, 1.842804227556501], "val_accuracy": [0.041333332657814026, 0.044333335012197495, 0.05299999937415123, 0.0573333315551281, 0.06533333659172058, 0.07366666942834854, 0.0846666693687439, 0.09099999815225601, 0.10133333504199982, 0.10766666382551193, 0.11866666376590729, 0.12700000405311584, 0.13600000739097595, 0.1483333259820938, 0.1576666682958603, 0.16866666078567505, 0.17866666615009308, 0.18733333051204681, 0.19633333384990692, 0.2029999941587448, 0.2096666693687439, 0.21666666865348816, 0.2253333330154419, 0.23266667127609253, 0.2383333295583725, 0.24766667187213898, 0.2553333342075348, 0.2643333375453949, 0.2720000147819519, 0.2759999930858612, 0.28466665744781494, 0.29100000858306885, 0.29733332991600037, 0.30300000309944153, 0.3059999942779541, 0.3109999895095825, 0.3153333365917206, 0.32100000977516174, 0.3256666660308838, 0.33033332228660583, 0.3330000042915344, 0.3383333384990692, 0.3409999907016754, 0.34466665983200073, 0.3473333418369293, 0.3490000069141388, 0.351666659116745, 0.3540000021457672, 0.3569999933242798, 0.35866665840148926, 0.36033332347869873, 0.3623333275318146, 0.3656666576862335, 0.37033334374427795, 0.3720000088214874, 0.3736666738986969, 0.37599998712539673, 0.3786666691303253, 0.3799999952316284, 0.38199999928474426, 0.38333332538604736, 0.38600000739097595, 0.3880000114440918, 0.3903333246707916, 0.390666663646698, 0.3930000066757202, 0.3973333239555359, 0.398333340883255, 0.40166667103767395, 0.4050000011920929, 0.4086666703224182, 0.4129999876022339, 0.4143333435058594, 0.4180000126361847, 0.4206666648387909, 0.4233333468437195, 0.42399999499320984, 0.42500001192092896, 0.4269999861717224, 0.4283333420753479, 0.43033334612846375, 0.4326666593551636, 0.4336666762828827, 0.43533334136009216, 0.43533334136009216, 0.43666666746139526, 0.437666654586792, 0.4403333365917206, 0.44066667556762695, 0.4426666796207428, 0.44433334469795227, 0.4449999928474426, 0.4466666579246521, 0.44866666197776794, 0.4490000009536743, 0.4503333270549774, 0.4519999921321869, 0.4533333480358124, 0.45533332228660583, 0.4569999873638153]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [14, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 0, 1, 4, 0, 3, 4, 3, 0, 5, 5, 6, 1, 2, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 3, 3, 3, 1, 3, 4, 3, 2, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [7, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [12, 9, 76, 58]], "fitness": -0.4497142732143402, "mapping_values": [1, 2, 2, 1, 1, 1, 27, 27, 16, 11, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.square(grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))), grad)), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.sqrt(beta)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.30308655344059, 2.300344033941003, 2.29909189196783, 2.29926963224702, 2.2983755218259976, 2.2982159060194918, 2.295120238627992, 2.2931854544125527, 2.293656306889677, 2.2936752886426386, 2.2907551305798837, 2.2924358159827203, 2.289020809121435, 2.2891157480546465, 2.2881783492151677, 2.2860588199505636, 2.2856728008410334, 2.2840244349014993, 2.2842820137562043, 2.282035509766274, 2.281097256701148, 2.2785528410915465, 2.2792316841616245, 2.2782382400453742, 2.276965956000793, 2.276819998262864, 2.2752339436850133, 2.274868402278277, 2.2726743390704693, 2.271191206685052, 2.271312605829255, 2.2702230717826906, 2.2696495296743806, 2.2676390403958675, 2.266782154890178, 2.2657388745203244, 2.2639592302599763, 2.2616789476384325, 2.262259480755138, 2.260856856444508, 2.259377889818346, 2.2575439622987608, 2.2570048327049825, 2.257073456632337, 2.255008202722721, 2.252749772828253, 2.253430070909826, 2.2511116002198333, 2.2509863786000808, 2.248073556750379, 2.2486153076888864, 2.246316325757419, 2.2452304077312193, 2.2456716709227655, 2.243074329884108, 2.241963167326593, 2.239401212379114, 2.238523270176575, 2.237068285291473, 2.235901362262051, 2.233713686694527, 2.2332274117694633, 2.2317983862935216, 2.231774368967599, 2.2277979171192643, 2.225899162325231, 2.2266829595463764, 2.2232594881799668, 2.2219767068213696, 2.221273578562678, 2.219345541363143, 2.2190701524421854, 2.217262314893566, 2.216022773047858, 2.21423615846872, 2.212599160475675, 2.2123592587006073, 2.209098626216011, 2.2074311309565546, 2.2065073491843337, 2.2029709532874655, 2.2028033073945776, 2.199960547950935, 2.1977929203911164, 2.196814769830025, 2.1949232841416624, 2.1941971469627726, 2.1921903208466946, 2.188108586553317, 2.186917694190301, 2.1875935427784494, 2.181380347238162, 2.1837646552773515, 2.1806869010222414, 2.1776089832972008, 2.1759585637332046, 2.174798110283723, 2.171136677210058, 2.1699756631887728, 2.168375603763135], "accuracy": [0.0940430611371994, 0.09774138033390045, 0.09668471664190292, 0.09615638852119446, 0.10091137140989304, 0.09879804402589798, 0.10579843819141388, 0.11094967275857925, 0.1142517477273941, 0.1138555034995079, 0.11834631860256195, 0.10989301651716232, 0.1254788041114807, 0.12296922504901886, 0.12812046706676483, 0.13591335713863373, 0.13617752492427826, 0.13538502156734467, 0.1394795924425125, 0.14568749070167542, 0.14397041499614716, 0.15440496802330017, 0.14912164211273193, 0.15849953889846802, 0.15400871634483337, 0.15321621298789978, 0.16074495017528534, 0.16510368883609772, 0.16563200950622559, 0.17197199165821075, 0.17183992266654968, 0.17540615797042847, 0.17382116615772247, 0.18134988844394684, 0.18584071099758148, 0.1872936189174652, 0.19059570133686066, 0.19931316375732422, 0.19376568496227264, 0.2024831622838974, 0.20340773463249207, 0.20604939758777618, 0.2052568942308426, 0.20684190094470978, 0.21291771531105042, 0.21912561357021332, 0.21793685853481293, 0.22493726015090942, 0.22084268927574158, 0.23312640190124512, 0.22744683921337128, 0.2343151569366455, 0.22744683921337128, 0.23418307304382324, 0.2339189052581787, 0.2475234419107437, 0.2425042986869812, 0.2440892904996872, 0.2487121969461441, 0.25016510486602783, 0.25795799493789673, 0.2545238435268402, 0.2596750855445862, 0.2627129852771759, 0.2654867172241211, 0.26997753977775574, 0.2681283950805664, 0.27024170756340027, 0.27420419454574585, 0.2767137885093689, 0.28503501415252686, 0.2843745946884155, 0.2900541424751282, 0.28278958797454834, 0.28939375281333923, 0.2895258367061615, 0.28345000743865967, 0.28899750113487244, 0.29982829093933105, 0.2930920720100403, 0.30260202288627625, 0.30603620409965515, 0.31039494276046753, 0.30603620409965515, 0.30722492933273315, 0.31726324558258057, 0.3152819871902466, 0.3078853487968445, 0.32505613565444946, 0.31382909417152405, 0.31422534584999084, 0.33126401901245117, 0.32624489068984985, 0.3229427933692932, 0.3299432098865509, 0.32743361592292786, 0.33126401901245117, 0.3327169418334961, 0.3279619514942169, 0.3353586196899414], "val_loss": [1.9701876640319824, 1.969203335898263, 1.9682277270725794, 1.9672496659415108, 1.9662684031895228, 1.9652776036943709, 1.9642898014613561, 1.9633073125566756, 1.9623351097106934, 1.9613708087376185, 1.9604062352861678, 1.9594410487583704, 1.958463260105678, 1.9574833597455705, 1.9565120424543108, 1.955538068498884, 1.9545586449759347, 1.95358521597726, 1.9526159422738212, 1.9516326359340124, 1.9506532124110632, 1.9496613911220007, 1.9486740657261439, 1.9476888520377023, 1.9466994149344308, 1.945707184927804, 1.9447063718523299, 1.9437082835606165, 1.9427063124520438, 1.9416978699820382, 1.940690381186349, 1.9396909986223494, 1.9386717932564872, 1.937662056514195, 1.9366300446646554, 1.9356000082833427, 1.9345603670392717, 1.9335074424743652, 1.9324536323547363, 1.931382656097412, 1.9303104536873954, 1.9292329379490443, 1.9281388010297502, 1.9270504542759486, 1.925943170275007, 1.9248316628592355, 1.9237230164664132, 1.9225905963352747, 1.9214566094534737, 1.920297690800258, 1.9191477639334542, 1.9179870741707938, 1.9168082645961217, 1.9156225068228585, 1.9144088881356376, 1.913184574672154, 1.9119394166128976, 1.9107016154697962, 1.909437997000558, 1.9081644330705916, 1.9068733624049596, 1.9055705751691545, 1.904264313834054, 1.9029430661882674, 1.9015921183994837, 1.900230952671596, 1.8988632474626814, 1.8974748338971819, 1.896066529410226, 1.8946428980146135, 1.8932112966264998, 1.8917699541364397, 1.8903066090175085, 1.8888141768319267, 1.8873122079031808, 1.8858041082109724, 1.8842761175973075, 1.882720674787249, 1.881136757986886, 1.8795445305960519, 1.8779191970825195, 1.8762837137494768, 1.8746156011308943, 1.8729234422956194, 1.871215547834124, 1.869490350995745, 1.8677614756992884, 1.8660003798348563, 1.8641856057303292, 1.8623850005013602, 1.86053923198155, 1.8586597442626953, 1.85678311756679, 1.8548669815063477, 1.8529090200151717, 1.8509369577680315, 1.8489584922790527, 1.8469363621303014, 1.8448865073067802, 1.8428043637956892], "val_accuracy": [0.041333332657814026, 0.044333335012197495, 0.05299999937415123, 0.0573333315551281, 0.06533333659172058, 0.07366666942834854, 0.0846666693687439, 0.09099999815225601, 0.10133333504199982, 0.10766666382551193, 0.11866666376590729, 0.12700000405311584, 0.13600000739097595, 0.1483333259820938, 0.1576666682958603, 0.16866666078567505, 0.17866666615009308, 0.18733333051204681, 0.19633333384990692, 0.2029999941587448, 0.2096666693687439, 0.21666666865348816, 0.2253333330154419, 0.23266667127609253, 0.2383333295583725, 0.24766667187213898, 0.2553333342075348, 0.2643333375453949, 0.2720000147819519, 0.2759999930858612, 0.28466665744781494, 0.29100000858306885, 0.29733332991600037, 0.30300000309944153, 0.3059999942779541, 0.3109999895095825, 0.3153333365917206, 0.32100000977516174, 0.3256666660308838, 0.33033332228660583, 0.3330000042915344, 0.3383333384990692, 0.3409999907016754, 0.34466665983200073, 0.3473333418369293, 0.3490000069141388, 0.351666659116745, 0.3540000021457672, 0.3569999933242798, 0.35866665840148926, 0.36033332347869873, 0.3623333275318146, 0.3656666576862335, 0.37033334374427795, 0.3720000088214874, 0.3736666738986969, 0.37599998712539673, 0.3786666691303253, 0.3799999952316284, 0.38199999928474426, 0.38333332538604736, 0.38600000739097595, 0.3880000114440918, 0.3903333246707916, 0.390666663646698, 0.3930000066757202, 0.3973333239555359, 0.398333340883255, 0.40166667103767395, 0.4050000011920929, 0.4086666703224182, 0.4129999876022339, 0.4143333435058594, 0.4180000126361847, 0.4206666648387909, 0.4233333468437195, 0.42399999499320984, 0.42500001192092896, 0.4269999861717224, 0.4283333420753479, 0.43033334612846375, 0.4326666593551636, 0.4336666762828827, 0.43533334136009216, 0.43533334136009216, 0.4363333284854889, 0.437666654586792, 0.4403333365917206, 0.44066667556762695, 0.4426666796207428, 0.44433334469795227, 0.4449999928474426, 0.4466666579246521, 0.44866666197776794, 0.4490000009536743, 0.4503333270549774, 0.4519999921321869, 0.4533333480358124, 0.45533332228660583, 0.4569999873638153]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [4, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [2, 0, 1, 2, 2, 2, 4, 3, 4, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 2, 2, 1, 2, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [61, 9, 76, 58]], "fitness": -0.3440000116825104, "mapping_values": [1, 3, 3, 1, 2, 2, 82, 82, 50, 32, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.square(beta)))), tf.math.add(beta, tf.math.square(alpha)))))))), tf.math.divide_no_nan(tf.math.add(beta, beta), alpha))), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(beta)), tf.math.add(tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(alpha, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(beta, grad))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.square(grad)), grad)))), tf.math.sqrt(tf.math.add(tf.math.multiply(alpha, grad), tf.math.sqrt(alpha))))), tf.math.add(beta, tf.math.sqrt(grad))), alpha)))), tf.math.add(beta, grad)), tf.math.add(grad, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.836482253419158, 2.2364958426609425, 2.2779622124548617, 2.3051320033035005, 2.294473784962791, 2.1674886714387105, 2.3046580632254745, 2.3035652641890434, 2.2990334987199508, 2.332973233870291], "accuracy": [0.20261524617671967, 0.14370624721050262, 0.1526878923177719, 0.10236428678035736, 0.1270637959241867, 0.22097477316856384, 0.10368511080741882, 0.09906221181154251, 0.11689341068267822, 0.13300752639770508], "val_loss": [1.805550983973912, 1.9726407868521554, 1.9794955253601074, 1.9727916717529297, 1.832688331604004, 1.9745497703552246, 1.9738169397626604, 1.9735590389796667, 1.8987765312194824, 1.9758870942252023], "val_accuracy": [0.24666666984558105, 0.11166666448116302, 0.10233332961797714, 0.10233332961797714, 0.382999986410141, 0.10000000149011612, 0.10000000149011612, 0.09866666793823242, 0.3776666522026062, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0], [2, 3, 1, 1, 0, 2, 3, 3, 0, 6, 0, 6, 1, 6, 8, 9, 1, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 29, 29, 17, 12, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta))), grad)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [1, 0, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [2, 0, 1, 4, 0, 6, 2, 3, 0, 2, 5, 2, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 3, 2, 3, 2, 3, 3, 3, 2, 2, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 6, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 31, 31, 18, 13, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), grad))), grad)))), beta), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(beta, grad), tf.math.negative(beta))))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [50, 80, 61], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [2, 3, 9, 4, 0, 2, 0, 3, 0, 6, 0, 6, 1, 6, 8, 6, 2, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 5, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 17, 17, 11, 6, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), grad))), tf.math.add(beta, beta)))))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [14, 80, 61], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 9, 1, 4, 2, 0, 4, 3, 0, 1, 5, 6, 1, 2, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 1, 3, 3, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0], [3, 2, 3, 4, 6, 7, 4, 5, 6, 4, 6, 4, 4, 7, 1, 1, 7, 4, 6, 9, 6, 8, 9], [0, 3, 2, 1, 0, 0, 2, 2, 0, 2, 0, 0, 2, 3, 1, 3, 3, 0], [51, 55, 76, 58, 83, 76, 10, 36, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 22, 22, 13, 9, 1, 1, 1, 0, 1, 1, 41, 23, 18, 9], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.negative(grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, grad), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.pow(tf.math.square(tf.math.divide_no_nan(alpha, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(beta, tf.math.add(tf.math.subtract(beta, tf.math.subtract(tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), sigma))))), tf.math.divide_no_nan(tf.math.sqrt(alpha), sigma)))), sigma), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [14, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 0, 1, 4, 0, 9, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 1, 3, 4, 3, 2, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [57, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 16, 16, 10, 6, 1, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), grad), tf.math.add(beta, tf.math.add(grad, alpha))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.5106174640683228, 4.79150176391531, 10.509873745038666, 19.646438263820194, 32.545579622324354, 49.867622998758726], "accuracy": [0.0874389111995697, 0.10421344637870789, 0.10011887550354004, 0.10011887550354004, 0.10077928751707077, 0.10051512718200684], "val_loss": [2.4562584332057407, 4.948361124311175, 9.605643681117467, 16.49139949253627, 25.88599395751953, 38.09034402029855], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 3, 2, 4, 0, 2, 3, 3, 4, 2, 0, 6, 2, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 0, 1, 1, 0, 3, 3, 0, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 3, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 34, 34, 19, 15, 3, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.add(beta, grad), beta), tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(grad)))), tf.math.add(beta, grad))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(beta, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 4, 0, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [6, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 29, 29, 17, 12, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), alpha)))), grad)))), alpha))))), alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(sigma)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [5, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 3, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [9, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [60, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302663964995965, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [2, 8, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 15, 15, 8, 7, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(grad, tf.math.add(beta, beta)), tf.math.add(beta, alpha))), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 4, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 2, 3, 2, 1, 3, 3, 1, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [91, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 67, 67, 40, 27, 2, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad))), tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.square(tf.math.square(beta)))))))))))))))), alpha)), tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(alpha, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, beta)))), tf.math.add(beta, grad))), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))))))))))))), tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [297818351.7328202, 5737826029.70704, 26877877782.38436, 74482914468.60283, 159596340161.9189, 295602777126.81757], "accuracy": [0.0944393053650856, 0.10434553027153015, 0.09919429570436478, 0.09985470771789551, 0.10117553919553757, 0.10077928751707077], "val_loss": [1137466148.5714285, 9095395620.571428, 30692058258.285713, 72746074112.0, 142075400777.14285, 245497743652.57144], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [46, 80, 61], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 1, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [7, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 8, 1, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 26, 26, 15, 11, 0, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), grad)))))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(alpha, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.sqrt(grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(tf.math.subtract(sigma, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [6, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.09714286029338837, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3637084790029356e+24, 2.5101200554578225e+24, 2.784336678201856e+24, 2.624544509956973e+24, 2.6871519710591426e+24, 2.8517554512216326e+24], "accuracy": [0.09192973375320435, 0.10236428678035736, 0.0940430611371994, 0.09694888442754745, 0.10487385839223862, 0.1006472036242485], "val_loss": [2.1632328778105664e+24, 2.1632328778105664e+24, 2.1632328778105664e+24, 2.1632328778105664e+24, 2.1632328778105664e+24, 2.1632328778105664e+24], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 0, 0, 2, 2, 5, 2, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 2, 1, 3, 1, 3, 3, 2, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 0, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [93, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 1, 15, 15, 9, 6, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(alpha, tf.math.add(beta, grad)))), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.303530983464467, 2.301841598318521, 2.3016319644607024, 2.30287582158507, 2.3030158483026333, 2.3039953055839653], "accuracy": [0.09351472556591034, 0.09232597798109055, 0.09298639744520187, 0.08809932321310043, 0.08902391046285629, 0.0866464152932167], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]