[{"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 1, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8231428861618042, "mapping_values": [1, 7, 7, 4, 3, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.238665538236623, 2.023779306697052, 1.6792137066386772, 1.233610242081671, 1.0470002550002433, 0.9207949745593652, 0.8965356671389745, 0.784900288800081, 0.7975115659860116, 0.7134832012308524, 0.6973653834383517, 0.6607424896532723, 0.6434020006094532, 0.5959528366556698, 0.5968590842545418, 0.5734951015649895, 0.5867199269283906, 0.5345370058748212, 0.5605546181243818, 0.5376262188256928, 0.5014635072864829, 0.5110316232147942, 0.502230547623407, 0.5127581606262694, 0.48467044561231426, 0.4696399066914594], "accuracy": [0.28741249442100525, 0.3357548415660858, 0.43983620405197144, 0.565711259841919, 0.6203936338424683, 0.6618676781654358, 0.6719059348106384, 0.7104741930961609, 0.7028133869171143, 0.7337207794189453, 0.7321357727050781, 0.7520803213119507, 0.759080708026886, 0.7775723338127136, 0.7754589915275574, 0.7853652238845825, 0.7781006693840027, 0.802800178527832, 0.7828556299209595, 0.7942147850990295, 0.8090080618858337, 0.8064984679222107, 0.8064984679222107, 0.8064984679222107, 0.8171972036361694, 0.8204993009567261], "val_loss": [1.7522751944405692, 1.2481945242200578, 0.9518711566925049, 0.8802567550114223, 0.7261126041412354, 0.7379928827285767, 0.5838926008769444, 0.6105714525495257, 0.5552599089486259, 0.5233188697269985, 0.550316435950143, 0.5370297261646816, 0.489051239831107, 0.5047023126057216, 0.46469833169664654, 0.4442723308290754, 0.44310840538569857, 0.4547124079295567, 0.4623101609093802, 0.4252768414361136, 0.4159307565007891, 0.4275481530598232, 0.41911131143569946, 0.4143139634813581, 0.4029501676559448, 0.47496029308864046], "val_accuracy": [0.4869999885559082, 0.5346666574478149, 0.6073333621025085, 0.5720000267028809, 0.6330000162124634, 0.6916666626930237, 0.7396666407585144, 0.718666672706604, 0.7263333201408386, 0.7630000114440918, 0.7400000095367432, 0.7413333058357239, 0.781000018119812, 0.7570000290870667, 0.7943333387374878, 0.815666675567627, 0.8016666769981384, 0.7893333435058594, 0.7956666946411133, 0.8220000267028809, 0.8270000219345093, 0.8069999814033508, 0.8166666626930237, 0.8213333487510681, 0.8246666789054871, 0.8100000023841858]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 9, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.821142852306366, "mapping_values": [1, 3, 3, 3, 0, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.239223865737784, 2.0261917479868656, 1.670822608740165, 1.290176270282374, 1.030546548415043, 1.0144052847013372, 0.8226210161081127, 0.7959042467996665, 0.7518805694413175, 0.6987166357015212, 0.6949883347504867, 0.6987515302413585, 0.6467585946905489, 0.5920211935103168, 0.6212222583463022, 0.5895688666753828, 0.5707149389492066, 0.5749431157612829, 0.5543059633550013, 0.5392391729301323, 0.505033261921459, 0.5247761065052045, 0.509656890815417, 0.5057857788005887, 0.473133469356947, 0.48368233846178965, 0.47792794736794286, 0.4662169043170053, 0.4804758140833276, 0.44245352680184635], "accuracy": [0.2875445783138275, 0.33601900935173035, 0.44445911049842834, 0.5370492935180664, 0.6293752193450928, 0.6210539937019348, 0.6915863156318665, 0.6993792057037354, 0.7182670831680298, 0.7441553473472595, 0.7297582626342773, 0.7392682433128357, 0.7549861073493958, 0.7751948237419128, 0.7638356685638428, 0.7746664881706238, 0.7847048044204712, 0.7815347909927368, 0.7886672616004944, 0.7936864495277405, 0.8095363974571228, 0.8014793395996094, 0.8101968169212341, 0.805177628993988, 0.8256505131721497, 0.8149517774581909, 0.8171972036361694, 0.8251221776008606, 0.8186501264572144, 0.8337075710296631], "val_loss": [1.7516638210841589, 1.2592762197766985, 1.0613854953220911, 0.7726513998849052, 0.7556183849062238, 0.6704939774104527, 0.6248619556427002, 0.5633713688169207, 0.6282003777367728, 0.5229805878230503, 0.5276358808789935, 0.49570657525743755, 0.5045564685549054, 0.5676194940294538, 0.4750868592943464, 0.44854581356048584, 0.43551911626543316, 0.43823392050606863, 0.4538727487836565, 0.42614892550877165, 0.4160113675253732, 0.4492185115814209, 0.43563846179417204, 0.4125880939619882, 0.399904157434191, 0.4484935317720686, 0.4130799429757254, 0.40190564734595163, 0.3982533812522888, 0.3879616856575012], "val_accuracy": [0.4869999885559082, 0.527999997138977, 0.5303333401679993, 0.6589999794960022, 0.612666666507721, 0.715666651725769, 0.7089999914169312, 0.7386666536331177, 0.7176666855812073, 0.7663333415985107, 0.7570000290870667, 0.777999997138977, 0.784333348274231, 0.7423333525657654, 0.7953333258628845, 0.8016666769981384, 0.8096666932106018, 0.8113333582878113, 0.7990000247955322, 0.8243333101272583, 0.8199999928474426, 0.7973333597183228, 0.8023333549499512, 0.8226666450500488, 0.8370000123977661, 0.8213333487510681, 0.8333333134651184, 0.8159999847412109, 0.8259999752044678, 0.8326666951179504]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [38, 80, 41], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 2, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8100000023841858, "mapping_values": [1, 7, 7, 4, 3, 2, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.pow(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, alpha)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2387780372917914, 2.024374085001076, 1.6618013080116496, 1.235215317681796, 1.0641147583593167, 0.9525933809457375, 0.8210824183768379, 0.778867750324672, 0.7620491076060542, 0.7216079540539884, 0.7021824549044663, 0.6464194362551828, 0.6432107208332822, 0.6052122022166874, 0.6017490111841517, 0.5892086066920696, 0.5471666840089232, 0.5644031450607049, 0.5467797357802063, 0.5325834833242008, 0.5033594474910886, 0.5178212989133977], "accuracy": [0.2875445783138275, 0.3362831771373749, 0.4566107392311096, 0.5461629629135132, 0.6136573553085327, 0.6493197679519653, 0.69673752784729, 0.7107383608818054, 0.7211728692054749, 0.7285695672035217, 0.739400327205658, 0.7474573850631714, 0.7540615797042847, 0.765949010848999, 0.7680623531341553, 0.7802139520645142, 0.7959318161010742, 0.7841764688491821, 0.7890635132789612, 0.7944789528846741, 0.8020076751708984, 0.8049134612083435], "val_loss": [1.7528061866760254, 1.2453563213348389, 1.100607190813337, 0.9277841023036412, 0.7694528443472726, 0.6462171248027256, 0.6628814765385219, 0.595595223563058, 0.5433126858302525, 0.5202646936689105, 0.5713781799588885, 0.48962720802852083, 0.5111630303519112, 0.5254884277071271, 0.48436272144317627, 0.45626206057412283, 0.4334016101700919, 0.44552438599722727, 0.44139557225363596, 0.4229009917804173, 0.448262129511152, 0.41972313608442036], "val_accuracy": [0.4866666793823242, 0.5460000038146973, 0.5019999742507935, 0.6399999856948853, 0.6356666684150696, 0.70333331823349, 0.6943333148956299, 0.7210000157356262, 0.7459999918937683, 0.7756666541099548, 0.718999981880188, 0.7883333563804626, 0.7763333320617676, 0.7703333497047424, 0.777999997138977, 0.8009999990463257, 0.8183333277702332, 0.8023333549499512, 0.8013333082199097, 0.8119999766349792, 0.8019999861717224, 0.8149999976158142]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 8, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [93, 47, 61], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [4, 9, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8062857389450073, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2386917461729823, 2.0279167024860323, 1.6408282547358588, 1.3433683834307701, 1.100844696732938, 0.9140160936941449, 0.8486072325656097, 0.7483644272043185, 0.7680296147850605, 0.7088978726866065, 0.6743532521629283, 0.6496967036159457, 0.6058981242023675, 0.6203977719998363, 0.5883830148136737, 0.6004305365472626, 0.556193510578482, 0.5675993747148123, 0.5353837849331444, 0.5205295398297988, 0.4910630414420115, 0.5087548376641269, 0.4959101328413957, 0.49894257334040426, 0.48412978973103366, 0.46803440171902944, 0.44796655886145853, 0.4462876452698668, 0.47113143169191835, 0.43060531297443, 0.42353994911924064, 0.43152907615513486, 0.4258209818925179, 0.41335891998675456, 0.4078766390860372], "accuracy": [0.287280410528183, 0.3353586196899414, 0.4559503495693207, 0.5156518220901489, 0.5989961624145508, 0.6579051613807678, 0.6907938122749329, 0.7213049530982971, 0.7147008180618286, 0.7308149337768555, 0.7374191284179688, 0.7573636174201965, 0.774270236492157, 0.7637035846710205, 0.7808743715286255, 0.7660810947418213, 0.7902522683143616, 0.7876105904579163, 0.7957997918128967, 0.7973847389221191, 0.8125742673873901, 0.8058380484580994, 0.8137630224227905, 0.8078193068504333, 0.816008448600769, 0.817461371421814, 0.8310658931732178, 0.8356888294219971, 0.8193105459213257, 0.8366134166717529, 0.8363492488861084, 0.8354246616363525, 0.8376700282096863, 0.8450667262077332, 0.8462554216384888], "val_loss": [1.7528738975524902, 1.2205182484218053, 1.1657236644199915, 0.8201495579310826, 0.7725136450358799, 0.6824020487921578, 0.584288477897644, 0.5749269723892212, 0.5909238542829242, 0.5327714000429425, 0.514521564756121, 0.5075010742459979, 0.5006654603140694, 0.5335330963134766, 0.46855630193437847, 0.4539710794176374, 0.4357918756348746, 0.4423884323665074, 0.4408509986741202, 0.4238670553479876, 0.44107891832079205, 0.42563835212162565, 0.4436316319874355, 0.42258394615990774, 0.39757412672042847, 0.45258588450295584, 0.3921329975128174, 0.4172976698194231, 0.4010633315358843, 0.36965603487832205, 0.3850283622741699, 0.45201666014535086, 0.3754850115094866, 0.3893393192972456, 0.4183031405721392], "val_accuracy": [0.4869999885559082, 0.550000011920929, 0.4970000088214874, 0.6620000004768372, 0.6650000214576721, 0.7146666646003723, 0.7440000176429749, 0.7293333411216736, 0.7173333168029785, 0.7559999823570251, 0.7683333158493042, 0.7789999842643738, 0.765999972820282, 0.7526666522026062, 0.7950000166893005, 0.8083333373069763, 0.8140000104904175, 0.8003333210945129, 0.8040000200271606, 0.8213333487510681, 0.8119999766349792, 0.8153333067893982, 0.8013333082199097, 0.812666654586792, 0.8223333358764648, 0.8303333520889282, 0.8403333425521851, 0.8096666932106018, 0.824999988079071, 0.8523333072662354, 0.8403333425521851, 0.7893333435058594, 0.840666651725769, 0.8356666564941406, 0.8163333535194397]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 8, 3, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 3, 5, 1, 4, 6, 2, 3, 2, 2, 9, 3, 4, 9, 8, 0, 3, 1, 5, 8, 2, 8, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 2, 3, 1, 3, 3, 2, 1, 1, 3, 2, 3, 3, 0, 3, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 46, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7940000295639038, "mapping_values": [1, 4, 4, 2, 2, 2, 24, 24, 14, 10, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)), tf.math.add(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha))))))))))), tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, alpha), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0448783896996314, 1.4521045717880032, 1.096711231134571, 1.0433732444237662, 0.8245184607021466, 0.7316192271309191, 0.7007537641702878, 0.6909706409754393, 0.6565339550869954, 0.6289645270302374, 0.6079320136849843, 0.6079965997302789, 0.5791544434637237, 0.5463697666253364, 0.5522968962585858, 0.5086888543303931, 0.5203858524533373, 0.5100077939559409], "accuracy": [0.3288865387439728, 0.4994056224822998, 0.5997886657714844, 0.6174877882003784, 0.6811517477035522, 0.7253995537757874, 0.7366266250610352, 0.7380794882774353, 0.7510236501693726, 0.7619865536689758, 0.769911527633667, 0.7740060687065125, 0.7783648371696472, 0.7994980812072754, 0.7948752045631409, 0.809140145778656, 0.8053097128868103, 0.8121780753135681], "val_loss": [1.6173045294625419, 1.083110979625157, 1.1306943893432617, 0.6639190231050763, 0.5899789844240461, 0.5561761004584176, 0.5620924745287214, 0.5558547122137887, 0.564626659665789, 0.5390898500170026, 0.512079153742109, 0.48772237982068745, 0.4399266413279942, 0.44624974046434673, 0.45366668701171875, 0.45434835978916716, 0.4390562261853899, 0.44344760690416607], "val_accuracy": [0.47566667199134827, 0.5476666688919067, 0.4819999933242798, 0.6866666674613953, 0.7273333072662354, 0.7383333444595337, 0.7396666407585144, 0.7459999918937683, 0.7289999723434448, 0.7426666617393494, 0.750333309173584, 0.7773333191871643, 0.8133333325386047, 0.7993333339691162, 0.8029999732971191, 0.7983333468437195, 0.8063333630561829, 0.7870000004768372]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 4, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 96, 85], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 3, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7900000214576721, "mapping_values": [1, 7, 7, 4, 3, 3, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.044960962798633, 1.4497631096238426, 1.1612863302262326, 0.919303067970301, 0.7867527304465949, 0.7795379605464585, 0.7027811045738621, 0.6734865970930262, 0.6444708261712195, 0.6250309923290025, 0.6025138367215923, 0.5889732398455878, 0.5771440841250683, 0.5653474700567414, 0.554967388020625, 0.508544644769692, 0.5093476451414766, 0.522823480086918], "accuracy": [0.3287544548511505, 0.5003302097320557, 0.5789195895195007, 0.6623960137367249, 0.6995112895965576, 0.7059833407402039, 0.7327961921691895, 0.7442874312400818, 0.7510236501693726, 0.7630431652069092, 0.7711002230644226, 0.7754589915275574, 0.7802139520645142, 0.7918372750282288, 0.7951393723487854, 0.8105930685997009, 0.8138951063156128, 0.8078193068504333], "val_loss": [1.6167903627668108, 1.1031160354614258, 0.6874219690050397, 0.6477632863180978, 0.6825320550373623, 0.5956007412501744, 0.5581945521490914, 0.5633238554000854, 0.5483566011701312, 0.48663112095424105, 0.4780975580215454, 0.4797724825995309, 0.44782418864113943, 0.43827782358442036, 0.4704336779458182, 0.4436285155160086, 0.44274212632860455, 0.4465340716498239], "val_accuracy": [0.4763333201408386, 0.5443333387374878, 0.6886666417121887, 0.687666654586792, 0.6886666417121887, 0.7256666421890259, 0.7293333411216736, 0.7329999804496765, 0.7446666955947876, 0.781000018119812, 0.7839999794960022, 0.7796666622161865, 0.8083333373069763, 0.8076666593551636, 0.7946666479110718, 0.8009999990463257, 0.8059999942779541, 0.7803333401679993]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 5, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7882857322692871, "mapping_values": [1, 4, 4, 3, 1, 1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha)))))), tf.math.add(grad, tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0449575762691405, 1.459801321724985, 1.1857804557225644, 0.9031283529269901, 0.8190797622713036, 0.7542007238227835, 0.7068322391290203, 0.6729615906667022, 0.6477013186866172, 0.6115541843343892, 0.6128755710411853, 0.5899743804794969, 0.6042023946848118, 0.5432573009271033, 0.5959069275852868], "accuracy": [0.32901862263679504, 0.5019152164459229, 0.5711266398429871, 0.6682076454162598, 0.6859067678451538, 0.7187954187393188, 0.7280412316322327, 0.7440232634544373, 0.7516840696334839, 0.7696473598480225, 0.7726852297782898, 0.7794214487075806, 0.7711002230644226, 0.8035926818847656, 0.7829877138137817], "val_loss": [1.6233683313642229, 1.0501232828412737, 0.6938048771449498, 0.6325957434517997, 0.7138921022415161, 0.5592952966690063, 0.5523102794374738, 0.5264262471880231, 0.548383355140686, 0.46465654032570974, 0.5119546822139195, 0.49556243419647217, 0.4574798345565796, 0.45748865604400635, 0.46750378608703613], "val_accuracy": [0.47466665506362915, 0.5566666722297668, 0.6856666803359985, 0.7099999785423279, 0.6883333325386047, 0.7443333268165588, 0.7543333172798157, 0.7549999952316284, 0.7403333187103271, 0.8003333210945129, 0.7593333125114441, 0.7749999761581421, 0.7956666946411133, 0.7910000085830688, 0.7950000166893005]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 8, 3, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [46, 80, 61], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 3, 5, 1, 4, 6, 2, 3, 2, 2, 1, 3, 4, 9, 8, 0, 3, 1, 5, 8, 2, 8, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 2, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 3, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302183506369449, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 5, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 2, 0, 1, 0, 2, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302183506369449, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 5, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 2, 0, 4, 0, 8, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 86, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 16, 16, 10, 6, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 6, 8, 9, 3, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2], [93, 80, 6], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 3, 1, 1, 1, 6, 2, 2, 2, 2, 2, 3, 4, 9, 8, 0, 8, 1, 5, 8, 2, 8, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 2, 3, 1, 3, 3, 2, 3, 1, 3, 2, 3, 3, 0, 3, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [94, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 20, 12, 3, 66, 66, 39, 27, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), alpha))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(alpha, tf.math.add(alpha, alpha)), alpha)), grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(beta, tf.math.subtract(grad, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), grad)))))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), grad)))))))))))), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))))), tf.math.square(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, alpha))))))))))))))))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(alpha, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 9, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 2, 0, 8, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 16, 16, 10, 6, 2, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(grad))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302183506369449, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [3, 5, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2], [95, 80, 85], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 3, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 1, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6, 4, 9, 2, 6, 5, 8, 7, 1, 0, 3, 9, 6, 1, 2, 5, 5, 3, 7, 8, 6, 0, 9, 4, 4, 6, 0, 7], [3, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 30, 3, 17, 30, 6, 55, 73]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), sigma)", "other_info": {"loss": [2.304278361090359, 2.3057178239213982, 2.3080884761278733, 2.3094464183845664, 2.3140642401123754, 2.3150860028196996, 2.3195249682262573, 2.32262471622527, 2.3305722146128085, 2.344266042764775, 2.3718764860364567, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08994849026203156, 0.08070268481969833, 0.08281600475311279, 0.07740060985088348, 0.08228767663240433, 0.07977809756994247, 0.07687227427959442, 0.07845727354288101, 0.07766477018594742, 0.07198520749807358, 0.07819310575723648, 0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9725007329668318, 1.9738843781607491, 1.9754157066345215, 1.9775971003941126, 1.9799105099269323, 1.9823220116751534, 1.9849166188921248, 1.988403252192906, 1.9946654183523995, 2.0075374330793108, 2.0511796133858815, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02800000086426735, 0.024000000208616257, 0.02199999988079071, 0.023666666820645332, 0.023666666820645332, 0.033666666597127914, 0.04833333194255829, 0.06266666948795319, 0.08299999684095383, 0.09666666388511658, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 8, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2], [93, 80, 61], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 3, 2, 2, 6, 8, 5, 4, 4, 3, 3, 4, 1, 8, 0, 4, 1, 2, 0, 1, 2, 5, 0, 1, 5, 3, 4, 0, 3, 9, 2, 7, 7, 8, 0, 8, 6, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 2, 4, 1, 0, 3, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 66, 66, 41, 25, 5, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.sqrt(grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), grad))), tf.math.negative(tf.math.add(beta, grad)))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.square(alpha))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), beta)))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 4, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 2, 3, 4, 0, 4, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 9, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [98144499.95701285, 1825982448.00634, 8439807235.820895, 23177275595.42042, 50877429090.497955, 92456825390.86514], "accuracy": [0.09470347315073013, 0.1022322028875351, 0.10038304328918457, 0.1006472036242485, 0.1018359512090683, 0.10711926966905594], "val_loss": [359688566.85714287, 2875481526.857143, 9702472265.142857, 22995771977.142857, 44910346240.0, 77601350802.28572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [9, 80, 61], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [6, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 3, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(beta, tf.math.negative(alpha)))))), tf.math.add(beta, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 0, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2], [46, 80, 61], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 8, 5, 3, 4, 8, 6, 3, 2, 2, 2, 3, 4, 9, 8, 0, 3, 1, 5, 8, 2, 8, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 2, 3, 1, 3, 3, 1, 2, 1, 3, 2, 3, 3, 0, 3, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.multiply(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.304278361090359, 2.3057179588289656, 2.3080879724603585, 2.30944516749792, 2.3140611182177433, 2.315078967849828, 2.3195139422723408, 2.32261991179646, 2.3305697356705117, 2.34425963733206, 2.371903608976149, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08994849026203156, 0.08070268481969833, 0.08294808864593506, 0.07740060985088348, 0.08228767663240433, 0.07977809756994247, 0.07687227427959442, 0.07845727354288101, 0.07766477018594742, 0.07211729139089584, 0.07832518965005875, 0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9725007329668318, 1.973884037562779, 1.9754136630467005, 1.9775949205671037, 1.9799062183925085, 1.9823107719421387, 1.9849065371922083, 1.9883990287780762, 1.994662080492292, 2.0075298036847795, 2.0513003894260953, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02800000086426735, 0.024000000208616257, 0.02199999988079071, 0.023666666820645332, 0.023333333432674408, 0.033666666597127914, 0.04833333194255829, 0.06266666948795319, 0.08299999684095383, 0.09666666388511658, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 8, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 5, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 3, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 6, 8, 8, 6, 7, 4, 5, 6, 3, 8], [0, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 7, 5, 0, 1, 0, 0, 0, 0, 19, 11, 8, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.negative(tf.math.pow(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta)), beta))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 1, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 3, 2, 2, 6, 2, 5, 6, 4, 5, 3, 4, 8, 8, 0, 4, 2, 2, 2, 1, 2, 5, 0, 1, 1, 3, 4, 0, 3, 5, 2, 7, 7, 8, 1, 8, 6, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 2, 1, 3, 3, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 2, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6, 0, 1, 4], [0, 3, 2, 1, 0, 0, 2, 2, 1], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 38, 38, 21, 17, 1, 1, 1, 0, 1, 0, 21, 12, 9, 3], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, beta), alpha)))))), tf.math.pow(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.multiply(grad, grad)))))), tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.sqrt(beta)), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), alpha))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(beta, tf.math.pow(beta, alpha))))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 2, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 61], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [4, 2, 3, 9, 2, 6, 2, 2, 6, 4, 3, 3, 4, 1, 8, 4, 4, 1, 2, 2, 1, 2, 5, 0, 1, 1, 3, 4, 0, 3, 5, 2, 7, 7, 8, 1, 8, 6, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 1, 0, 1, 1, 3, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 2, 1, 3, 2, 0, 1, 1, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [37, 9, 76, 58]], "fitness": -0.09714286029338837, "mapping_values": [1, 21, 21, 14, 7, 1, 21, 21, 11, 10, 2, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), grad)))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))), tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(alpha, grad)), grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3060312443689, 2.313110643200918, 2.325597634798563, 2.347608038526028, 2.3929666715480113, 2.437247184509803, 2.5146801395816825, 2.5936323757798934, 2.7236718494091305, 2.8327345614105153, 2.994366875917936, 3.1561203484112608], "accuracy": [0.08691058307886124, 0.08677849918603897, 0.08994849026203156, 0.09391097724437714, 0.09628847241401672, 0.09840179979801178, 0.09681680053472519, 0.09893012791872025, 0.09642054885625839, 0.10302469879388809, 0.10117553919553757, 0.10302469879388809], "val_loss": [1.9742936406816756, 1.9774154935564314, 1.9834236417497908, 1.996049199785505, 2.015469891684396, 2.0425453867231096, 2.0784651892525807, 2.1244799068995883, 2.181860991886684, 2.251723970685686, 2.335122585296631, 2.4329427991594588], "val_accuracy": [0.023333333432674408, 0.06066666543483734, 0.09366666525602341, 0.0949999988079071, 0.09733333438634872, 0.0989999994635582, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612]}}]