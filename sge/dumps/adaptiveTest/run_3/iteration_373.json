[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8154285550117493, "mapping_values": [1, 9, 9, 5, 4, 0, 15, 15, 11, 4, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.021364372057796, 1.8826451121131111, 1.6357019299828475, 1.11948405661052, 0.8208377645504142, 0.7439529933729161, 0.7200459162982038, 0.6675442768566644, 0.6643348894477, 0.6784730328859796, 0.5871785417083012, 0.5586701075099542, 0.5384209009130727, 0.5606904731072675, 0.5284951058093504, 0.5143468576242203, 0.5044158835413276, 0.4860555606983625, 0.48135115803193423], "accuracy": [0.30920618772506714, 0.39981508255004883, 0.4357416331768036, 0.5828820466995239, 0.6901333928108215, 0.7150970697402954, 0.7162858247756958, 0.7454761862754822, 0.7539294958114624, 0.7424382567405701, 0.772288978099823, 0.7868181467056274, 0.7940827012062073, 0.7862898111343384, 0.7964601516723633, 0.8064984679222107, 0.8090080618858337, 0.8142913579940796, 0.8173292875289917], "val_loss": [1.670951979500907, 1.8780860219682967, 0.8419805765151978, 0.6812623739242554, 0.6103638240269252, 0.5596610137394497, 0.6124870095934186, 0.6079698971339634, 0.5257461411612374, 0.47760389532361713, 0.46936055592128206, 0.457288350377764, 0.481122578893389, 0.42551045758383615, 0.47166471821921213, 0.4371187516621181, 0.4210498758724758, 0.4493825776236398, 0.44252635751451763], "val_accuracy": [0.27433332800865173, 0.36800000071525574, 0.625333309173584, 0.6926666498184204, 0.7226666808128357, 0.7446666955947876, 0.7080000042915344, 0.762333333492279, 0.7593333125114441, 0.7803333401679993, 0.8003333210945129, 0.8016666769981384, 0.7789999842643738, 0.8223333358764648, 0.7763333320617676, 0.7943333387374878, 0.8109999895095825, 0.79666668176651, 0.7953333258628845]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 6, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 11, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.8040000200271606, "mapping_values": [1, 4, 4, 3, 1, 1, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.sqrt(alpha))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.012353941056203, 1.3862079711496365, 1.0220272527898637, 0.8901315962460535, 0.8311775010243981, 0.7435929422617242, 0.7303240590753053, 0.7077490521806217, 0.677620473318663, 0.6962542588747629, 0.6435784857428353, 0.6499065647366465, 0.6208717277210307, 0.5964552424666022, 0.585615214749161, 0.6099086030284412, 0.573188130747861, 0.5999147697934826, 0.5542560463662728, 0.5529957262673918, 0.5333132721870457, 0.5488284649299104, 0.5269097774421786, 0.512725208067324, 0.5258836270386376], "accuracy": [0.33786818385124207, 0.5157839059829712, 0.6178840398788452, 0.6744155287742615, 0.6876237988471985, 0.7205125093460083, 0.7191916704177856, 0.7288337349891663, 0.7470611333847046, 0.7264562249183655, 0.7512878179550171, 0.7495707273483276, 0.7629110813140869, 0.7751948237419128, 0.7802139520645142, 0.7646281719207764, 0.7829877138137817, 0.769911527633667, 0.7964601516723633, 0.7924976944923401, 0.800290584564209, 0.7901201844215393, 0.8043851256370544, 0.8092722296714783, 0.7959318161010742], "val_loss": [1.1772900649479456, 0.7950120312826974, 0.7311040163040161, 0.6499699694769723, 0.5918641260692051, 0.5633250645228794, 0.5697258710861206, 0.5536060503550938, 0.528261661529541, 0.5668887581144061, 0.5148911646434239, 0.5330563613346645, 0.5051117283957345, 0.48281879084450857, 0.5565371343067714, 0.46965597357068745, 0.4652918917792184, 0.46861423764910015, 0.4577163117272513, 0.444534284727914, 0.47548857757023405, 0.44845736026763916, 0.4413414852959769, 0.44672201360974995, 0.44780107906886507], "val_accuracy": [0.5120000243186951, 0.6576666831970215, 0.6446666717529297, 0.7116666436195374, 0.7429999709129333, 0.7419999837875366, 0.7413333058357239, 0.7473333477973938, 0.765999972820282, 0.7250000238418579, 0.7766666412353516, 0.7546666860580444, 0.7776666879653931, 0.7900000214576721, 0.7300000190734863, 0.7896666526794434, 0.796999990940094, 0.7973333597183228, 0.800000011920929, 0.8076666593551636, 0.7900000214576721, 0.8043333292007446, 0.8009999990463257, 0.8050000071525574, 0.7986666560173035]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 6, 6, 9, 1, 9, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7897142767906189, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 16, 10, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.add(tf.math.add(grad, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.math.sqrt(tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0123123753387318, 1.388225790689398, 1.0200455152221628, 0.8876141635197942, 0.8395701118621529, 0.7483986134006992, 0.7605518509824877, 0.7084622390596795, 0.6704029163837496, 0.7040067784711591, 0.648221087485666, 0.640757834379148, 0.6148528781517889, 0.6034132376511997, 0.5903788819651263, 0.5798168674341645, 0.5898956187948212, 0.5770223886896481, 0.5693877945722858], "accuracy": [0.3377360999584198, 0.5145951509475708, 0.6185444593429565, 0.674679696559906, 0.6839255094528198, 0.7177387475967407, 0.7137762308120728, 0.7253995537757874, 0.750759482383728, 0.7281733155250549, 0.7446836829185486, 0.7500990629196167, 0.7680623531341553, 0.767401933670044, 0.7773081660270691, 0.7837802171707153, 0.7791573405265808, 0.778232753276825, 0.7835160493850708], "val_loss": [1.1760644231523787, 0.7923906190054757, 0.7415812526430402, 0.6470362969807216, 0.5992806128093174, 0.6289726666041783, 0.5699183600289481, 0.5485102108546666, 0.5619515180587769, 0.5365721157618931, 0.5232773338045392, 0.5146822077887399, 0.5174047436032977, 0.4828376429421561, 0.5111890009471348, 0.47964790889195036, 0.4934396062578474, 0.47304861886160715, 0.4870251076562064], "val_accuracy": [0.5143333077430725, 0.6589999794960022, 0.6430000066757202, 0.7120000123977661, 0.7390000224113464, 0.706333339214325, 0.7403333187103271, 0.753333330154419, 0.7553333044052124, 0.7513333559036255, 0.7636666893959045, 0.7730000019073486, 0.7746666669845581, 0.7893333435058594, 0.7689999938011169, 0.784333348274231, 0.7703333497047424, 0.7870000004768372, 0.7726666927337646]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 7, 3, 9, 1, 9, 1, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7888571619987488, "mapping_values": [1, 6, 6, 3, 3, 2, 13, 13, 9, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0124214830620257, 1.3883704081376498, 1.0235421992548075, 0.8890214303638547, 0.8422859260796902, 0.7419656999374755, 0.7473377394969075, 0.7167447319576816, 0.6799015766200357, 0.6855619196185756, 0.6492030052791702, 0.6394432276987271, 0.6147415429026994, 0.608852346118856, 0.5854720491869196, 0.583707899433857, 0.5890343318273993, 0.5731438709807481, 0.5673363535647631], "accuracy": [0.33800026774406433, 0.5126138925552368, 0.6176198720932007, 0.6769251227378845, 0.6828688383102417, 0.7205125093460083, 0.7141724824905396, 0.7238145470619202, 0.7454761862754822, 0.7346453666687012, 0.7437590956687927, 0.7510236501693726, 0.7667415142059326, 0.7630431652069092, 0.7810064554214478, 0.7823272943496704, 0.7770439982414246, 0.7803460359573364, 0.7852331399917603], "val_loss": [1.1785213266100203, 0.8038738114493233, 0.7309427772249494, 0.642631105014256, 0.5944724253245762, 0.5659019095557076, 0.5766875914164952, 0.5448810713631767, 0.549802337374006, 0.5235843488148281, 0.5169543879372733, 0.519412636756897, 0.5177525111607143, 0.48736793654305594, 0.5055692195892334, 0.490651045526777, 0.4778688635144915, 0.473713891846793, 0.48580850873674664], "val_accuracy": [0.5113333463668823, 0.6513333320617676, 0.6489999890327454, 0.7126666903495789, 0.7409999966621399, 0.7409999966621399, 0.734333336353302, 0.7540000081062317, 0.7576666474342346, 0.7616666555404663, 0.7699999809265137, 0.7689999938011169, 0.7720000147819519, 0.7883333563804626, 0.7646666765213013, 0.7689999938011169, 0.781333327293396, 0.7850000262260437, 0.7713333368301392]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 5, 9, 6, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7848571538925171, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.020674631281016, 1.395405875976768, 1.0801455634948112, 0.930578693690443, 0.8468874328408211, 0.7724352221620585, 0.759324660587462, 0.7450841739114407, 0.6999839096415107, 0.6853625628343899, 0.6523473421265468, 0.6668035975930366, 0.6441652283865652, 0.6218813146582495, 0.5911070952688179, 0.5742334705443981, 0.5903928803336336, 0.5670569593313427], "accuracy": [0.3350944519042969, 0.5151234865188599, 0.6214502453804016, 0.6499801874160767, 0.6861709356307983, 0.713908314704895, 0.7135120630264282, 0.7186633348464966, 0.7403249144554138, 0.7428345084190369, 0.7490423917770386, 0.7424382567405701, 0.754589855670929, 0.7652885913848877, 0.7777044177055359, 0.7847048044204712, 0.7745344042778015, 0.7819310426712036], "val_loss": [1.2614681720733643, 1.1593833991459437, 0.6921508993421283, 0.6907517058508736, 0.657450795173645, 0.5735514845166888, 0.5628478867667062, 0.5638248409543719, 0.577742508479527, 0.5427850825445992, 0.5107719046728951, 0.49724788325173513, 0.48667800426483154, 0.49411662987300325, 0.4942620311464582, 0.48768816675458637, 0.5058022396905082, 0.4821488176073347], "val_accuracy": [0.518666684627533, 0.46833333373069763, 0.6919999718666077, 0.6816666722297668, 0.6970000267028809, 0.7463333606719971, 0.750333309173584, 0.7366666793823242, 0.737333357334137, 0.7426666617393494, 0.7766666412353516, 0.7703333497047424, 0.7866666913032532, 0.7853333353996277, 0.7683333158493042, 0.7760000228881836, 0.7683333158493042, 0.7793333530426025]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 7, 3, 2, 1, 9, 1, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [13, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [23, 9, 76, 58]], "fitness": -0.7474285960197449, "mapping_values": [1, 3, 3, 1, 2, 1, 22, 22, 14, 8, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.subtract(alpha, tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), alpha)))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, grad)))), tf.math.negative(tf.math.add(beta, tf.math.sqrt(beta)))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.297720139194489, 2.288991096139096, 2.2799166762959513, 2.2699003147175127, 2.2612644487037605, 2.2497429121534163, 2.236874705276721, 2.2242203920808024, 2.209341151981054, 2.1951793131653847, 2.17887753785924, 2.158176592643062, 2.1339820462951034, 2.1086323313221182, 2.080900656501489, 2.047422172969374, 2.0163703727495434, 1.9710457043766803, 1.9355060827809238, 1.893430664712223, 1.8447083189282452, 1.794414699668063, 1.7511672073461755, 1.7005812503626758, 1.6531302493403632, 1.6068100627576198, 1.5644523136966249, 1.5143911277518816, 1.4842368626024556, 1.4436268016977427, 1.4074146752627676, 1.373261314121141, 1.3505515223087305, 1.3236895671940718, 1.2954958168396844, 1.2719925409452302, 1.248950447105319, 1.2311731188792625, 1.212702380384295, 1.20178072884917, 1.1714627763551413, 1.1577608806582143, 1.1456808273141348, 1.1334330314784364, 1.116919170722135, 1.1040398748622295, 1.0731712087050027, 1.0755502065458413, 1.0647444781248108, 1.0521391037511567, 1.0460812485906128, 1.0380957336977503, 1.036956523301154, 1.0285527012398876, 1.0180020470818225, 1.006297967610594, 0.9865683621072876, 0.991562868515577, 0.9765138335515164, 0.9571579760957812, 0.9699710934090655, 0.9669876163819242, 0.9603085648098705, 0.950039864452429, 0.9476518051152878, 0.9301367326498252, 0.9212640182075404, 0.925481330622551, 0.9063706626005302, 0.9277233684366846, 0.9074973340094947, 0.9039755227338715, 0.8956608100731642, 0.8947543651672513, 0.8921502949444845, 0.8852022097977067, 0.8817617269932806, 0.8865906896214554, 0.8775946057987503, 0.8647964682246495, 0.8670138986969448, 0.8645279895297256, 0.8588880153931111, 0.8473086121642531, 0.847932270481413, 0.8447042158125193, 0.8471268334204195, 0.8454355366194426, 0.8437634949214297, 0.8389076305229304, 0.837223463338112, 0.8251979603916663, 0.8373225662985718, 0.82796245568527, 0.8243116076989905, 0.8210528332953125, 0.8214725293046873, 0.8193218537120771, 0.820142395610366, 0.8124801877892454], "accuracy": [0.10196803510189056, 0.12296922504901886, 0.14581957459449768, 0.17421740293502808, 0.20103025436401367, 0.22718267142772675, 0.2491084337234497, 0.2697133719921112, 0.2895258367061615, 0.3125082552433014, 0.3271694481372833, 0.33443403244018555, 0.36903974413871765, 0.3796063959598541, 0.3917580246925354, 0.39862632751464844, 0.41368380188941956, 0.4241183400154114, 0.4291374981403351, 0.4356095492839813, 0.44710078835487366, 0.46427157521247864, 0.46546030044555664, 0.4753665328025818, 0.47932901978492737, 0.4916127324104309, 0.5023114681243896, 0.5138026475906372, 0.5234447121620178, 0.5321621894836426, 0.5375775694847107, 0.5468233823776245, 0.5527671575546265, 0.5534275770187378, 0.5602958798408508, 0.570202112197876, 0.5760137438774109, 0.5831462144851685, 0.5861841440200806, 0.5807687044143677, 0.5972790718078613, 0.5999207496643066, 0.6059965491294861, 0.6045436263084412, 0.6056002974510193, 0.6089023947715759, 0.6296393871307373, 0.6289790272712708, 0.622639000415802, 0.6363756656646729, 0.6362435817718506, 0.6392814517021179, 0.6357152462005615, 0.6349227428436279, 0.6404702067375183, 0.6458855867385864, 0.6548672318458557, 0.6490556001663208, 0.6551313996315002, 0.6605468392372131, 0.6563201546669006, 0.6606789231300354, 0.6616035103797913, 0.6588297486305237, 0.6626601219177246, 0.6730946898460388, 0.6719059348106384, 0.6737551093101501, 0.6804913282394409, 0.666358470916748, 0.6760005354881287, 0.6812838315963745, 0.6777176260948181, 0.6807554960250854, 0.6844538450241089, 0.6824725866317749, 0.684982180595398, 0.6865671873092651, 0.6820763349533081, 0.6985867023468018, 0.6917183995246887, 0.6926429867744446, 0.687887966632843, 0.6983225345611572, 0.6997754573822021, 0.6944921612739563, 0.6952846646308899, 0.7016246318817139, 0.6964733600616455, 0.7004358768463135, 0.69673752784729, 0.7022850513458252, 0.6911900639533997, 0.7003037929534912, 0.7074362635612488, 0.7028133869171143, 0.7047945857048035, 0.7016246318817139, 0.7016246318817139, 0.7074362635612488], "val_loss": [1.9622066361563546, 1.9533181871686662, 1.944261142185756, 1.9349987166268485, 1.9251572063991003, 1.914600167955671, 1.9029084614345007, 1.8900854246956962, 1.875899110521589, 1.8601081030709403, 1.8422438757760184, 1.822122505732945, 1.7993604796273368, 1.7738404955182756, 1.7453267914908273, 1.7135991368974959, 1.6786962917872839, 1.6400142397199358, 1.5987020220075334, 1.5546398503439767, 1.5079747949327742, 1.4593545368739538, 1.4106396266392298, 1.3617606503622872, 1.3132274491446358, 1.2663259165627616, 1.221313442502703, 1.1782281398773193, 1.1386193207332067, 1.102107320513044, 1.0674517495291573, 1.035797119140625, 1.0077192102159773, 0.9820846148899623, 0.9576028755732945, 0.9354009287697929, 0.9153634139469692, 0.8970110416412354, 0.8797095162527901, 0.8646637371608189, 0.8493216548647199, 0.8351632186344692, 0.821689077786037, 0.8100314310618809, 0.7989963293075562, 0.7889590774263654, 0.7788521221705845, 0.7694213049752372, 0.7613590785435268, 0.7527249881199428, 0.7455464431217739, 0.7381228889737811, 0.7318824359348842, 0.7259997640337262, 0.7196022612707955, 0.7145682913916451, 0.7088458708354405, 0.7036219664982387, 0.698401927947998, 0.6931617770876203, 0.6888189145496914, 0.6843001672199794, 0.6802508149828229, 0.6762816565377372, 0.6725347212382725, 0.6685459273202079, 0.6642423357282367, 0.661467432975769, 0.6573621715818133, 0.6547117914472308, 0.6515968356813703, 0.6484262262071881, 0.6454576594488961, 0.6428792476654053, 0.6395603929247174, 0.637291601725987, 0.6341933012008667, 0.631838151386806, 0.6298361846378872, 0.6270334890910557, 0.6247145448412214, 0.6218670436314174, 0.6197657414845058, 0.6174079009464809, 0.6149462802069527, 0.6133810962949481, 0.6114809853690011, 0.6099461827959333, 0.6081857510975429, 0.6058036940438407, 0.604155148778643, 0.6023091077804565, 0.6005674260003226, 0.598878026008606, 0.5972057580947876, 0.5958180768149239, 0.5938283034733364, 0.5925262314932687, 0.5907093627112252, 0.5890496288027082], "val_accuracy": [0.10300000011920929, 0.18966667354106903, 0.2590000033378601, 0.31200000643730164, 0.3440000116825104, 0.36766666173934937, 0.38366666436195374, 0.40933331847190857, 0.4266666769981384, 0.4413333237171173, 0.4566666781902313, 0.46799999475479126, 0.4793333411216736, 0.4946666657924652, 0.5063333511352539, 0.5193333625793457, 0.527999997138977, 0.5350000262260437, 0.5379999876022339, 0.5463333129882812, 0.5519999861717224, 0.5576666593551636, 0.5646666884422302, 0.5690000057220459, 0.5830000042915344, 0.5823333263397217, 0.5929999947547913, 0.6016666889190674, 0.6119999885559082, 0.6196666955947876, 0.6356666684150696, 0.6463333368301392, 0.6526666879653931, 0.6579999923706055, 0.6636666655540466, 0.6683333516120911, 0.6723333597183228, 0.6763333082199097, 0.6793333292007446, 0.6800000071525574, 0.6850000023841858, 0.6883333325386047, 0.6919999718666077, 0.6936666369438171, 0.6946666836738586, 0.6973333358764648, 0.6973333358764648, 0.6990000009536743, 0.699999988079071, 0.70333331823349, 0.7043333053588867, 0.7080000042915344, 0.7073333263397217, 0.7083333134651184, 0.7133333086967468, 0.7123333215713501, 0.7116666436195374, 0.7160000205039978, 0.715666651725769, 0.7176666855812073, 0.718999981880188, 0.7200000286102295, 0.7210000157356262, 0.7226666808128357, 0.7233333587646484, 0.7263333201408386, 0.7253333330154419, 0.7263333201408386, 0.7300000190734863, 0.731333315372467, 0.7289999723434448, 0.7316666841506958, 0.7316666841506958, 0.731333315372467, 0.734000027179718, 0.734666645526886, 0.7360000014305115, 0.7360000014305115, 0.7350000143051147, 0.737333357334137, 0.7383333444595337, 0.7403333187103271, 0.7419999837875366, 0.7416666746139526, 0.7416666746139526, 0.7419999837875366, 0.7436666488647461, 0.7426666617393494, 0.7409999966621399, 0.7440000176429749, 0.7429999709129333, 0.7443333268165588, 0.7433333396911621, 0.7440000176429749, 0.7426666617393494, 0.7433333396911621, 0.7453333139419556, 0.7453333139419556, 0.7436666488647461, 0.7450000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 4, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [88, 19, 36, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [5, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [23, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 3, 12, 12, 9, 3, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3024692244738194, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 2, 9, 8, 9, 1, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 57, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [5, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 9, 3, 3, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024692244738194, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1], [9, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 3, 8, 9, 1, 9, 4, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 0, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 16, 16, 10, 6, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), alpha)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(beta, grad), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06907938420772552, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 2, 4, 3, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [57, 80, 61], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 7, 3, 1, 8, 9, 1, 8, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 75, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 4, 5, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024692244738194, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0], [0, 1, 1, 1], [9, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 3, 8, 9, 1, 2, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 75, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 35, 35, 23, 12, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(beta)))))))), tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), alpha))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3348466113983224, 2.700584607621257, 3.748393589211745, 5.577366782626645, 8.102574368226072, 11.42140845864472, 15.375689249438002], "accuracy": [0.0878351628780365, 0.09628847241401672, 0.09681680053472519, 0.0956280529499054, 0.0952318087220192, 0.09721305221319199, 0.09576013684272766], "val_loss": [2.0344836371285573, 2.378772054399763, 3.1926254544939314, 4.519745145525251, 6.320887156895229, 8.583845955984932, 11.325605937412806], "val_accuracy": [0.09799999743700027, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 0, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [9, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024692244738194, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 4, 7, 8, 9, 8, 9, 1, 3, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 27, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 7, 2, 2, 1, 1, 1, 0, 1, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 2, 3, 9, 8, 9, 1, 4, 2, 6, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 0, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 37, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 2, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 35, 35, 23, 12, 3, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(beta))))))), tf.math.add(beta, alpha)), tf.math.add(beta, grad))))), tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), alpha))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 7, 3, 4, 8, 9, 4, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 57, 39, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [5, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [45, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 13, 6, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), grad))), tf.math.negative(tf.math.add(beta, tf.math.sqrt(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024692244738194, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0], [1, 0, 0, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 7, 3, 9, 6, 9, 1, 9, 2, 6, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 2, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 9, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [68, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 9, 4, 3, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.divide_no_nan(tf.math.add(beta, beta), grad))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024692244738194, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0], [0, 0, 1, 1], [1, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 7, 3, 9, 8, 9, 2, 3, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 2, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [23, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 22, 22, 15, 7, 2, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, alpha)))))), alpha)), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(beta)))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [9, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 1, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [2.301706177667777, 2.302515068609701, 2.3030708820245773, 2.302756501415607, 2.30416680815166, 2.303018123938848], "accuracy": [0.09272222965955734, 0.09272222965955734, 0.08585391938686371, 0.09074098616838455, 0.08875974267721176, 0.08902391046285629], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 1, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [97, 19, 18, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(alpha, tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha)), tf.math.multiply(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.301706177667777, 2.302515068609701, 2.3030708820245773, 2.302756501415607, 2.30416680815166, 2.303018123938848], "accuracy": [0.09272222965955734, 0.09272222965955734, 0.08585391938686371, 0.09074098616838455, 0.08875974267721176, 0.08902391046285629], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 7, 3, 9, 6, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 2, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 11, 5, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), beta))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.301706177667777, 2.302515068609701, 2.3030708820245773, 2.302756501415607, 2.30416680815166, 2.303018123938848], "accuracy": [0.09272222965955734, 0.09272222965955734, 0.08585391938686371, 0.09074098616838455, 0.08875974267721176, 0.08902391046285629], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]