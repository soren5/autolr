[{"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 8, 5, 8, 2, 4, 3, 5, 0, 2, 5, 8, 1, 8, 9], [3, 1, 5, 3, 1, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8065714240074158, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 11, 6, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)))))))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3221445446079905, 2.129911160566677, 1.9660148963227861, 1.4051463937305928, 1.0498894555552005, 0.9693552712644049, 0.8232131862306576, 0.8124509829146562, 0.7666434872624361, 0.7301782450860502, 0.6698810682950507, 0.6887583681904424, 0.6397630748275154, 0.6260804692515766, 0.62200425291074, 0.5986175737156135, 0.5893661893669011, 0.5883312131734714, 0.5474949222608658, 0.5310411629596832, 0.5269501973782486, 0.5174668292485334, 0.5000654944591298, 0.4854560606412884, 0.49103264934776353, 0.47088045684448276, 0.4577254145223514, 0.4619691802085178, 0.4763170801936643, 0.46113460458910555, 0.4382333452313284, 0.42097557484985515, 0.4424156307693895, 0.427171414948064, 0.41249555981532376, 0.4057186511505738], "accuracy": [0.2292959988117218, 0.2771100103855133, 0.3549068868160248, 0.5068022608757019, 0.6058644652366638, 0.6462818384170532, 0.6865671873092651, 0.6861709356307983, 0.7057191729545593, 0.7260599732398987, 0.7415136694908142, 0.7345132827758789, 0.7574957013130188, 0.7658169269561768, 0.7602694630622864, 0.7683265209197998, 0.774270236492157, 0.7777044177055359, 0.789459764957428, 0.8001585006713867, 0.8014793395996094, 0.8063663840293884, 0.8109893202781677, 0.8175934553146362, 0.8190463781356812, 0.8197067975997925, 0.8251221776008606, 0.8256505131721497, 0.8224804997444153, 0.8255184292793274, 0.8383304476737976, 0.8459912538528442, 0.8334434032440186, 0.8367455005645752, 0.8448025584220886, 0.8450667262077332], "val_loss": [1.9358837263924735, 1.9107815878731864, 1.033151354108538, 0.8063428401947021, 0.7961764335632324, 0.6784353256225586, 0.6361802816390991, 0.7028012616293771, 0.623145512172154, 0.5505599805286953, 0.5881471293313163, 0.4953694002968924, 0.4916581766945975, 0.5423609699521746, 0.4759058100836618, 0.5263951676232475, 0.4860647065298898, 0.4589212281363351, 0.45766283784593853, 0.4554046903337751, 0.481499331338065, 0.41080182790756226, 0.42284901653017315, 0.44212889671325684, 0.42779805830546785, 0.4043791719845363, 0.42729373489107403, 0.39874498333249775, 0.4129925114767892, 0.42218189580099924, 0.37561151811054777, 0.39881761584963116, 0.3837288873536246, 0.3644503951072693, 0.3724825211933681, 0.3840719631740025], "val_accuracy": [0.23066666722297668, 0.2996666729450226, 0.6243333220481873, 0.652999997138977, 0.6069999933242798, 0.6869999766349792, 0.6983333230018616, 0.6679999828338623, 0.7086666822433472, 0.746999979019165, 0.718999981880188, 0.7680000066757202, 0.7806666493415833, 0.7383333444595337, 0.8016666769981384, 0.7523333430290222, 0.7726666927337646, 0.8026666641235352, 0.8033333420753479, 0.7929999828338623, 0.781000018119812, 0.8259999752044678, 0.8213333487510681, 0.7956666946411133, 0.8046666383743286, 0.8339999914169312, 0.8216666579246521, 0.8293333053588867, 0.8199999928474426, 0.8199999928474426, 0.8443333506584167, 0.8316666483879089, 0.8366666436195374, 0.8443333506584167, 0.8423333168029785, 0.8349999785423279]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 7, 5, 2, 5, 4, 2, 5, 9, 2, 1, 9, 6, 0, 1, 1, 5], [2, 1, 5, 3, 1, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7934285998344421, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(beta)), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.353830395404925, 2.104104108515039, 1.7093918701566646, 1.4319521167164606, 1.233307007297218, 1.081904734815384, 0.9824186066405931, 1.0109022540218557, 0.8869998662652215, 0.8684028468395284, 0.8345805459002997, 0.7659316524428273, 0.8057459234923672, 0.7478056896505985, 0.7471288752168508, 0.7127324149136561, 0.6973861298619669, 0.6874306045345674, 0.6840862497331097, 0.6811125876566265, 0.6360759090958428, 0.6400461621319755, 0.5973188750511778, 0.6107301039466485], "accuracy": [0.23893804848194122, 0.2736758589744568, 0.45727115869522095, 0.5048210024833679, 0.5670320987701416, 0.6123365759849548, 0.6411306262016296, 0.6317527294158936, 0.6708492636680603, 0.6789063811302185, 0.6886804699897766, 0.7100779414176941, 0.6959450244903564, 0.7137762308120728, 0.7176066637039185, 0.7323999404907227, 0.7331924438476562, 0.7376832365989685, 0.7449478507041931, 0.7471932172775269, 0.7637035846710205, 0.7650244235992432, 0.7701756954193115, 0.767930269241333], "val_loss": [1.9558409282139368, 1.330627407346453, 1.2330971445356096, 0.9682330404009137, 0.9536238397870745, 0.7263801779065814, 0.8323062317711967, 0.6989066089902606, 0.6937498024531773, 0.6947165727615356, 0.613835198538644, 0.6807360649108887, 0.5766792808260236, 0.5399473224367414, 0.5345125538962228, 0.5627190726143974, 0.537794658115932, 0.6066724061965942, 0.48929784979139057, 0.5058422258922032, 0.5027478592736381, 0.48612994807107107, 0.5236920629228864, 0.4777575901576451], "val_accuracy": [0.1899999976158142, 0.5536666512489319, 0.6143333315849304, 0.5659999847412109, 0.5879999995231628, 0.6666666865348816, 0.5943333506584167, 0.7113333344459534, 0.6693333387374878, 0.6779999732971191, 0.7246666550636292, 0.6980000138282776, 0.7363333106040955, 0.7583333253860474, 0.7593333125114441, 0.7273333072662354, 0.7509999871253967, 0.715666651725769, 0.7860000133514404, 0.7733333110809326, 0.7730000019073486, 0.784333348274231, 0.7586666941642761, 0.7856666445732117]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [4, 7, 5, 2, 2, 4, 2, 3, 9, 2, 1, 9, 6, 0, 1, 1, 5], [2, 3, 5, 3, 1, 3, 4, 1, 2, 0, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7720000147819519, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 17, 11, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), alpha)))), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.322106048651753, 2.127231236477853, 1.7531717569127987, 1.333430308675911, 1.081296000655742, 0.9321755619018212, 0.8388742485916799, 0.7914614844804018, 0.7561770432723779, 0.7615202355850894, 0.6758442496059908, 0.7159139072543925, 0.6409040731981273, 0.6536140513221711, 0.6209474919557477, 0.616764757044642, 0.5846893027820418], "accuracy": [0.2292959988117218, 0.28239333629608154, 0.43547746539115906, 0.5156518220901489, 0.5926561951637268, 0.657508909702301, 0.6868313550949097, 0.6976621150970459, 0.7168141603469849, 0.7119271159172058, 0.7382115721702576, 0.7214370369911194, 0.7585523724555969, 0.7578919529914856, 0.7629110813140869, 0.7621186375617981, 0.7800818681716919], "val_loss": [1.9360479627336775, 1.8649843760899134, 0.9824783802032471, 0.9840494905199323, 0.9228381769997733, 0.7577641010284424, 0.6233338798795428, 0.6222931146621704, 0.5698188202721732, 0.5483565330505371, 0.623382534299578, 0.5206022943769183, 0.5323542186192104, 0.5311694996697562, 0.516803366797311, 0.49722443308149067, 0.4932260343006679], "val_accuracy": [0.2303333282470703, 0.37400001287460327, 0.6076666712760925, 0.5833333134651184, 0.5843333601951599, 0.656333327293396, 0.6956666707992554, 0.7276666760444641, 0.7423333525657654, 0.7459999918937683, 0.7016666531562805, 0.7646666765213013, 0.7416666746139526, 0.7409999966621399, 0.7646666765213013, 0.7536666393280029, 0.762333333492279]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 7, 5, 6, 2, 4, 4, 5, 9, 5, 1, 9, 6, 0, 1, 1, 5], [3, 1, 5, 3, 1, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7559999823570251, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 17, 9, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, grad)))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.square(beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.272796226199655, 1.9795344552154854, 1.5274400747904073, 1.23247439084099, 1.045244049977129, 0.9299246665745238, 0.8702328837212319, 0.8243755101449045, 0.7850682162700029, 0.7222864891339318, 0.6950449273964481, 0.720303705135089, 0.6855510993719321], "accuracy": [0.28860124945640564, 0.37247392535209656, 0.476951539516449, 0.5523709058761597, 0.6111478209495544, 0.6610751748085022, 0.6814159154891968, 0.6964733600616455, 0.698718786239624, 0.7272487282752991, 0.7387399077415466, 0.7308149337768555, 0.7405890822410583], "val_loss": [1.6018806525639124, 1.3287248270852225, 0.866239241191319, 0.8976317133222308, 0.704165884426662, 0.6414255584989276, 0.6602288143975394, 0.5572916609900338, 0.5989147765295846, 0.5924030372074672, 0.5905142681939262, 0.5555095842906407, 0.5766711745943341], "val_accuracy": [0.5856666564941406, 0.5483333468437195, 0.6103333234786987, 0.6370000243186951, 0.6976666450500488, 0.7213333249092102, 0.690666675567627, 0.753000020980835, 0.7303333282470703, 0.7383333444595337, 0.7179999947547913, 0.7369999885559082, 0.737333357334137]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [2, 7, 2, 2, 2, 4, 2, 5, 9, 2, 1, 9, 6, 0, 1, 1, 5], [3, 1, 5, 3, 1, 3, 4, 1, 2], [98, 29, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7368571162223816, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(grad, alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(alpha, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.35389264069843, 2.10590281568073, 1.684423078351946, 1.5954022565301793, 1.2484952427723373, 1.0494150991027917, 0.9607030137529021, 0.990720838501217, 0.9519620424862535, 0.8511300822290621, 0.8215120603474234, 0.8341885620828758, 0.791791482521889, 0.778310479552219], "accuracy": [0.23893804848194122, 0.27420419454574585, 0.4651961326599121, 0.4504028558731079, 0.5420684218406677, 0.6252806782722473, 0.6462818384170532, 0.6252806782722473, 0.6439043879508972, 0.6820763349533081, 0.7014925479888916, 0.6921146512031555, 0.7033417224884033, 0.7091533541679382], "val_loss": [1.9557718549455916, 1.3092020920344762, 1.6937243257250105, 1.0672749791826521, 0.7412278992789132, 0.7092196089880807, 0.8653225217546735, 0.661880612373352, 0.6278678008488247, 0.6236458165305001, 0.6179721014840263, 0.577378647668021, 0.5811101368495396, 0.5972223281860352], "val_accuracy": [0.19033333659172058, 0.5569999814033508, 0.32100000977516174, 0.5093333125114441, 0.6986666917800903, 0.684333324432373, 0.5636666417121887, 0.6790000200271606, 0.737333357334137, 0.718999981880188, 0.7120000123977661, 0.7223333120346069, 0.7113333344459534, 0.7176666855812073]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 8, 5, 8, 0, 3, 4, 5, 9, 2, 1, 9, 6, 0, 1, 1, 5], [3, 1, 2, 3, 0, 3, 4, 1, 1], [46, 83, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.5697143077850342, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.353803185675957, 2.1181115196554527, 2.2120136877391725, 2.301005906369692, 2.2662582173559724, 1.9016395710746232, 1.4820334895915832], "accuracy": [0.23893804848194122, 0.2763175368309021, 0.2292959988117218, 0.1200634017586708, 0.23537181317806244, 0.3179236650466919, 0.47668737173080444], "val_loss": [1.9558022362845284, 1.2183494567871094, 1.973860536302839, 1.9661642483302526, 1.8072592871529716, 1.3474601677485876, 0.9897464343479702], "val_accuracy": [0.1899999976158142, 0.5809999704360962, 0.09666666388511658, 0.22633333504199982, 0.25600001215934753, 0.49166667461395264, 0.5776666402816772]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 7, 5, 2, 2, 4, 2, 5, 9, 2, 1, 9, 6, 0, 1, 1, 5], [2, 1, 5, 3, 0, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [11, 9, 76, 58]], "fitness": -0.425428569316864, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3028254956459686, 2.300878000769554, 2.3021007419624473, 2.300928646342598, 2.2992710362745394, 2.2989969001296897, 2.296425963059046, 2.296048860224939, 2.295928417242844, 2.295350124649856, 2.294693005004689, 2.2934370711337557, 2.292993264254357, 2.2913607418607995, 2.291048143927479, 2.2899390337662755, 2.288019419125814, 2.2878953827968944, 2.287590663037233, 2.287327083441024, 2.2843964857243275, 2.283808872101723, 2.2828868366330135, 2.2842407178381228, 2.282095649002754, 2.281607603526087, 2.279947379135799, 2.280273109772863, 2.278344175929265, 2.2790729159361587, 2.2770962441491887, 2.2759710177926813, 2.2751040146918013, 2.2752446262922428, 2.2733798628517223, 2.2713032191723346, 2.2723279929888514, 2.2699615071084693, 2.26802459951594, 2.2686460502489982, 2.267824994385628, 2.266616340830436, 2.2661367135670805, 2.265426062762918, 2.2641513302593563, 2.26367150463401, 2.262136423104412, 2.26009784833142, 2.2618260948869926, 2.2606061408390947, 2.261501036236992, 2.257920158348693, 2.255985760843088, 2.256748266538782, 2.256142751840852, 2.255292489465359, 2.25388085472113, 2.2528375907581024, 2.2489807351295896, 2.250138626122566, 2.248749429681093, 2.247078911408835, 2.2489693399748516, 2.2455708271067425, 2.2436080495710655, 2.2434235647637624, 2.242799364234069, 2.241973681425327, 2.2396972962279817, 2.2401361940968636, 2.2403460479510096, 2.238002725296867, 2.2373497894238237, 2.236662684776811, 2.2358593548356644, 2.2318177790044085, 2.2328374311514914, 2.231407982184194, 2.228680130387058, 2.229384382686532, 2.2279963395724978, 2.2244135340553437, 2.2251298477967434, 2.2246951685605536, 2.224218429496905, 2.2224004089777196, 2.221698692052466, 2.2186695627800272, 2.218594165415796, 2.217470034758145, 2.212844713756736, 2.2150136833697296, 2.2130891048928705, 2.211673980785194, 2.2101450233789497, 2.210170900533543, 2.2073489430558175, 2.2042904967692363, 2.202524533628898, 2.2023631000027537], "accuracy": [0.08994849026203156, 0.10315678268671036, 0.09351472556591034, 0.09536388516426086, 0.10157178342342377, 0.10210011899471283, 0.10276053100824356, 0.10289261490106583, 0.10685510188341141, 0.1022322028875351, 0.10870426893234253, 0.11649715900421143, 0.11478008329868317, 0.1150442510843277, 0.12310130894184113, 0.1274600476026535, 0.1220446452498436, 0.1278562992811203, 0.1274600476026535, 0.13419628143310547, 0.13961167633533478, 0.13749834895133972, 0.14357416331768036, 0.13868708908557892, 0.14212125539779663, 0.14278165996074677, 0.14714039862155914, 0.15295206010341644, 0.15136705338954926, 0.15189538896083832, 0.15215955674648285, 0.16602826118469238, 0.15321621298789978, 0.16483952105045319, 0.1698586642742157, 0.17421740293502808, 0.16523577272891998, 0.1768590658903122, 0.17963281273841858, 0.17923656105995178, 0.18663319945335388, 0.1810857206583023, 0.1896711140871048, 0.1888786107301712, 0.189274862408638, 0.19218069314956665, 0.1982565075159073, 0.2036719024181366, 0.20063400268554688, 0.2016906589269638, 0.19653943181037903, 0.20036983489990234, 0.21040813624858856, 0.21542729437351227, 0.2110685557126999, 0.21040813624858856, 0.21238937973976135, 0.21503104269504547, 0.23352265357971191, 0.22705058753490448, 0.22652225196361542, 0.23259806632995605, 0.22599393129348755, 0.23312640190124512, 0.2343151569366455, 0.2370888888835907, 0.2343151569366455, 0.2448817789554596, 0.24963676929473877, 0.24422137439250946, 0.24659886956214905, 0.24818386137485504, 0.24237221479415894, 0.251750111579895, 0.24805177748203278, 0.25941091775894165, 0.25439175963401794, 0.258090078830719, 0.26363757252693176, 0.2646942138671875, 0.2658829689025879, 0.27341169118881226, 0.27578920125961304, 0.26958128809928894, 0.2670717239379883, 0.2744683623313904, 0.2712983787059784, 0.29163914918899536, 0.2856954038143158, 0.2817329168319702, 0.29599788784980774, 0.282129168510437, 0.2871483266353607, 0.29058247804641724, 0.2950733006000519, 0.29943203926086426, 0.2949412167072296, 0.2949412167072296, 0.3028661906719208, 0.299299955368042], "val_loss": [1.9703804424830846, 1.9695681844438826, 1.9687590599060059, 1.9679529326302665, 1.9671553203037806, 1.9663584572928292, 1.965564591544015, 1.9647645269121443, 1.9639786311558314, 1.9631809507097517, 1.9623785018920898, 1.9615916524614607, 1.9608041899544852, 1.9600157056535994, 1.9592244284493583, 1.9584321975708008, 1.9576444625854492, 1.9568519592285156, 1.9560622487749373, 1.9552622522626604, 1.9544610977172852, 1.9536639622279577, 1.9528682572501046, 1.9520765032087053, 1.9512745993477958, 1.9504777363368444, 1.949674197605678, 1.948875904083252, 1.948073387145996, 1.947270733969552, 1.946467399597168, 1.9456589562552316, 1.9448447908673967, 1.9440342358180456, 1.9432156426565987, 1.9423982756478446, 1.9415747097560339, 1.9407461711338587, 1.9399174962724959, 1.9390854835510254, 1.9382502010890417, 1.937403338296073, 1.9365596771240234, 1.9357175827026367, 1.9348766463143485, 1.9340184756687708, 1.9331600325448173, 1.9322900772094727, 1.9314276150294714, 1.9305529594421387, 1.9296835490635462, 1.928804806300572, 1.9279108728681291, 1.9270153726850237, 1.9261130605425154, 1.9252029146466936, 1.92429290499006, 1.9233765602111816, 1.9224358286176408, 1.9215140342712402, 1.9205843380519323, 1.9196280070713587, 1.9186882291521346, 1.9177130971636092, 1.9167328562055315, 1.915755340031215, 1.9147639955793108, 1.913776465824672, 1.9127677508762904, 1.9117631912231445, 1.9107588359287806, 1.9097326823643275, 1.908700942993164, 1.9076637540544783, 1.9066171646118164, 1.9055485044206892, 1.9044854300362724, 1.9034123420715332, 1.9023163659232003, 1.9012208666120256, 1.9001131738935197, 1.8989770753043038, 1.8978440420968192, 1.8967088290623255, 1.8955581528799874, 1.8944083622523717, 1.8932459694998605, 1.892073699406215, 1.890883105141776, 1.8896871294294084, 1.8884572301592146, 1.8872310093470983, 1.8860011781964983, 1.8847392627171107, 1.8834813662937708, 1.8822122982570104, 1.8809078080313546, 1.8795955521719796, 1.8782640865870885, 1.8769264902387346], "val_accuracy": [0.041333332657814026, 0.043666668236255646, 0.04899999871850014, 0.05433333292603493, 0.05766666680574417, 0.06499999761581421, 0.07199999690055847, 0.07900000363588333, 0.08666666597127914, 0.09233333170413971, 0.10000000149011612, 0.1066666692495346, 0.11400000005960464, 0.1223333328962326, 0.1289999932050705, 0.13633333146572113, 0.1459999978542328, 0.15299999713897705, 0.16433332860469818, 0.17133332788944244, 0.17933332920074463, 0.18700000643730164, 0.19366666674613953, 0.20233333110809326, 0.20666666328907013, 0.21166667342185974, 0.21666666865348816, 0.22433333098888397, 0.23066666722297668, 0.23600000143051147, 0.24166665971279144, 0.25, 0.25566667318344116, 0.2633333206176758, 0.2706666588783264, 0.2763333320617676, 0.28033334016799927, 0.28600001335144043, 0.29233333468437195, 0.2993333339691162, 0.3019999861717224, 0.304666668176651, 0.3089999854564667, 0.3113333284854889, 0.3163333237171173, 0.32066667079925537, 0.32499998807907104, 0.3293333351612091, 0.3316666781902313, 0.3336666524410248, 0.33766666054725647, 0.3409999907016754, 0.3449999988079071, 0.3473333418369293, 0.3490000069141388, 0.34966665506362915, 0.3526666760444641, 0.35499998927116394, 0.35733333230018616, 0.359333336353302, 0.3623333275318146, 0.3646666705608368, 0.36533331871032715, 0.367333322763443, 0.3696666657924652, 0.3720000088214874, 0.3723333477973938, 0.3733333349227905, 0.37533333897590637, 0.37833333015441895, 0.3803333342075348, 0.3816666603088379, 0.38233333826065063, 0.3843333423137665, 0.38499999046325684, 0.38733333349227905, 0.3883333206176758, 0.39133334159851074, 0.39133334159851074, 0.39366665482521057, 0.3946666717529297, 0.39633333683013916, 0.39899998903274536, 0.40166667103767395, 0.4033333361148834, 0.40666666626930237, 0.40966665744781494, 0.4126666784286499, 0.4143333435058594, 0.4180000126361847, 0.4193333387374878, 0.4206666648387909, 0.42266666889190674, 0.42366665601730347, 0.4246666729450226, 0.42633333802223206, 0.42800000309944153, 0.4283333420753479, 0.43066665530204773, 0.4313333332538605]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 8, 5, 8, 2, 4, 3, 5, 0, 2, 5, 8, 1, 8, 9], [3, 1, 0, 3, 1, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 6, 6, 4, 2, 0, 1, 0, 0, 0, 0, 5, 4, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.sqrt(tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 5, 5, 0, 2, 4, 4, 4, 2, 2, 1, 9, 6, 0, 1, 1, 5], [3, 1, 5, 3, 1, 3, 4, 1, 2, 0, 1], [16, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 16, 11, 2, 1, 0, 0, 0, 0, 3, 3, 0, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), alpha))))))))))))), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301918162960717, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 8, 5, 3, 4, 4, 3, 5, 0, 2, 5, 8, 1, 8, 9], [3, 1, 5, 3, 1, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 7, 5, 8, 2, 4, 4, 5, 9, 2, 1, 9, 6, 0, 1, 1, 5], [3, 1, 5, 3, 1, 3, 4, 1], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [8, 0, 9, 8, 4, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 3, 3, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 8, 5, 8, 2, 4, 4, 5, 9, 2], [3, 1, 5, 3, 1, 3, 4, 1], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [8, 0, 9, 8, 4, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [98, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 8, 5, 8, 2, 4, 4, 5, 9, 2], [3, 1, 5, 3, 1, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 4, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [557.9777455756283, 9151.323756717657, 41961.121334182244, 114163.4959136838, 243655.13949610354, 444870.5120608242], "accuracy": [0.10487385839223862, 0.1006472036242485, 0.09536388516426086, 0.09628847241401672, 0.09945846349000931, 0.09747721254825592], "val_loss": [1886.1669224330358, 14116.12974330357, 46783.404017857145, 109962.01785714286, 213727.4375, 368155.65178571426], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 8, 5, 8, 2, 4, 4, 5, 9, 2], [3, 1, 5, 3, 1, 3, 4, 1], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [8, 1, 9, 8, 4, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 8, 5, 8, 2, 4, 4, 5, 9, 2], [0, 1, 5, 3, 1, 3, 4, 1], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [3, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [4, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [80, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [4, 7, 5, 8, 2, 4, 4, 1, 9, 2, 1, 9, 2, 0, 1, 1, 5], [3, 1, 5, 3, 1, 3, 3, 1, 3], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [6, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [18, 9, 76, 58]], "fitness": -0.0868571400642395, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [320983564400496.06, 379482702889507.5, 372330913562083.0, 398844796914955.1, 378573782753410.94, 379475705330101.94], "accuracy": [0.09126931428909302, 0.07832518965005875, 0.08294808864593506, 0.08625016361474991, 0.08387266844511032, 0.08440100401639938], "val_loss": [246789132405028.56, 246789132405028.56, 246789132405028.56, 246789132405028.56, 246789132405028.56, 246789132405028.56], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 7, 5, 5, 2, 3, 4, 5, 9, 2, 2, 9, 6, 0, 1, 1, 5], [3, 1, 5, 3, 1, 3, 4, 1, 2], [37, 22, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 17, 9, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, grad))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.square(beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha), sigma)", "other_info": {"loss": [2.3031816253289255, 2.302112500082784, 2.3042088195144257, 2.3039046810476647, 2.3031092854916633, 2.303686263554636], "accuracy": [0.0886276587843895, 0.09932637959718704, 0.08994849026203156, 0.08796724677085876, 0.09206181764602661, 0.09008057415485382], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [2, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 7, 5, 2, 2, 4, 2, 5, 9, 2, 1, 9, 6, 0, 1, 1, 5], [2, 1, 5, 2, 1, 3, 4, 1, 2], [98, 83, 20, 7, 45, 13], [1], [1, 1, 1], [9], [3, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 4, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [37, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 3, 3, 2, 1, 1, 15, 15, 9, 6, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, beta), alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), beta))), alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), alpha), sigma)", "other_info": {"loss": [2.3031816253289255, 2.302112500082784, 2.3042088195144257, 2.3039046810476647, 2.3031092854916633, 2.303686263554636], "accuracy": [0.0886276587843895, 0.09932637959718704, 0.08994849026203156, 0.08796724677085876, 0.09206181764602661, 0.09008057415485382], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [7, 2, 5, 8, 2, 4, 4, 5, 9, 2], [4, 1, 0, 3, 1, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 7, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 2, 1, 0, 0, 0, 0, 9, 5, 4, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(sigma, tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))))", "other_info": {"loss": [2.3031816253289255, 2.302112500082784, 2.3042088195144257, 2.3039046810476647, 2.3031092854916633, 2.303686263554636], "accuracy": [0.0886276587843895, 0.09932637959718704, 0.08994849026203156, 0.08796724677085876, 0.09206181764602661, 0.09008057415485382], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 8, 5, 8, 2, 4, 4, 5, 9, 2], [3, 1, 5, 3, 1, 3, 4, 1, 2], [98, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [79, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 6, 6, 4, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), sigma)", "other_info": {"loss": [2.3031816253289255, 2.302112500082784, 2.3042088195144257, 2.3039046810476647, 2.3031092854916633, 2.303686263554636], "accuracy": [0.0886276587843895, 0.09932637959718704, 0.08994849026203156, 0.08796724677085876, 0.09206181764602661, 0.09008057415485382], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]