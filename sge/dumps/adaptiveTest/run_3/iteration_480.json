[{"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8251428604125977, "mapping_values": [1, 20, 20, 11, 9, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad))))), grad)))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1355409332789828, 1.4567215213560236, 1.0778747450847195, 0.9490633087230003, 0.8948526250892517, 0.7938002830939821, 0.7555707144998619, 0.7326751185477512, 0.7430227373994462, 0.714967444257619, 0.6829563084138052, 0.648253752381936, 0.6611275892247613, 0.6444664472019541, 0.6288049861251434, 0.6133555068693866, 0.6164920847838848, 0.5983906238228024, 0.5939138737321293, 0.5764818351502746, 0.6039286708047661, 0.5636314868360164, 0.5719863457167075, 0.5537892899587563, 0.5584615697131385, 0.5512950309609945, 0.5358019925426608, 0.547453169439447, 0.5240058025679553, 0.5255928614852514, 0.5156554917476086, 0.5150196642183499, 0.5252518166703414, 0.5010046204949382, 0.5040452518735217, 0.4877033535917091, 0.48813155323774776, 0.4863461098099712, 0.4764658223171874, 0.47520554427851175, 0.4852582731928414, 0.46346970264071785, 0.46725618479085274, 0.4754778017945467, 0.45450968013195836, 0.4693198936206947], "accuracy": [0.3015453815460205, 0.4935939908027649, 0.6135252714157104, 0.6563201546669006, 0.6630563735961914, 0.7099458575248718, 0.7210407853126526, 0.7281733155250549, 0.717870831489563, 0.7343811988830566, 0.7364945411682129, 0.7536653280258179, 0.7510236501693726, 0.754589855670929, 0.7670056819915771, 0.769911527633667, 0.7644960880279541, 0.7766477465629578, 0.7781006693840027, 0.785629391670227, 0.772288978099823, 0.7874785661697388, 0.7800818681716919, 0.789459764957428, 0.7885351777076721, 0.7924976944923401, 0.8000264167785645, 0.7865539789199829, 0.7997622489929199, 0.7997622489929199, 0.8068947196006775, 0.8045172095298767, 0.800818920135498, 0.8129705190658569, 0.8107251524925232, 0.817461371421814, 0.8170651197433472, 0.8178576231002808, 0.8195747137069702, 0.8214238286018372, 0.8170651197433472, 0.8245938420295715, 0.8216879963874817, 0.8203672170639038, 0.8334434032440186, 0.8232730031013489], "val_loss": [1.3525543553488595, 0.9187099252428327, 0.7558966534478324, 0.6646542038236346, 0.6204521996634347, 0.6283103057316372, 0.5772030012948173, 0.5706588711057391, 0.6052831070763725, 0.5479945284979684, 0.524984325681414, 0.5394682032721383, 0.5214296068464007, 0.5139701536723545, 0.49697743143354145, 0.5011029584067208, 0.5119729382651192, 0.50014214856284, 0.4768703154155186, 0.48321010385240826, 0.4906687225614275, 0.46364002568381174, 0.46038009439195904, 0.4914051294326782, 0.4580621208463396, 0.45057521547589985, 0.4403552327837263, 0.45279807703835623, 0.44254468168531147, 0.4353468247822353, 0.43292248249053955, 0.4490701811654227, 0.42284748383930754, 0.43550986903054373, 0.4441843714032854, 0.4139682820865086, 0.4115483249936785, 0.4107690453529358, 0.4198869126183646, 0.4066709109715053, 0.40110634905951364, 0.4109734467097691, 0.41850110462733675, 0.41219923325947355, 0.39682040895734516, 0.41201398202351164], "val_accuracy": [0.528333306312561, 0.6023333072662354, 0.6880000233650208, 0.7183333039283752, 0.7289999723434448, 0.7106666564941406, 0.7456666827201843, 0.7463333606719971, 0.7226666808128357, 0.7590000033378601, 0.7636666893959045, 0.7616666555404663, 0.7676666378974915, 0.7696666717529297, 0.7789999842643738, 0.7723333239555359, 0.7789999842643738, 0.7713333368301392, 0.7893333435058594, 0.7856666445732117, 0.7866666913032532, 0.7929999828338623, 0.8046666383743286, 0.7710000276565552, 0.7943333387374878, 0.8056666851043701, 0.8059999942779541, 0.79666668176651, 0.8046666383743286, 0.8100000023841858, 0.8163333535194397, 0.812666654586792, 0.8173333406448364, 0.8186666369438171, 0.8063333630561829, 0.8233333230018616, 0.8293333053588867, 0.8289999961853027, 0.8166666626930237, 0.8273333311080933, 0.8320000171661377, 0.8263333439826965, 0.8083333373069763, 0.8140000104904175, 0.8266666531562805, 0.815666675567627]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 0, 3, 3, 6, 3, 6, 1, 4, 5, 7, 6, 3, 2, 1, 9, 0, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 80, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.800000011920929, "mapping_values": [1, 20, 20, 10, 10, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.13554406543969, 1.4565088633202354, 1.0787603258141878, 0.9536692681660222, 0.8844347840853812, 0.8014797573202338, 0.7621092180597343, 0.7305153926932627, 0.7192825084238981, 0.7141037985412846, 0.6851591895662987, 0.6437406746813051, 0.6601864368121039, 0.6341895294180006, 0.6457312603148613, 0.6171669635506921, 0.615493614282181, 0.604287612809796, 0.5903735395120892, 0.5738602565846753, 0.6065636851595156, 0.5634958690986689, 0.5684103580545268, 0.5768638993880972, 0.554096710995251, 0.5562342592061015, 0.5322779314455938, 0.5426886354644049, 0.5237667125056464, 0.525093064678501, 0.519116835917905, 0.5096651570766421, 0.5236750474663899, 0.4985012462653693, 0.5022155816261212, 0.48580711991039677, 0.49147296173855015, 0.4874872296060538, 0.474398230513593, 0.4752661728029159, 0.4828900383361468, 0.4653374127597857, 0.4661930761104562], "accuracy": [0.30141329765319824, 0.49385812878608704, 0.6123365759849548, 0.6584334969520569, 0.6645092964172363, 0.7040021419525146, 0.7186633348464966, 0.7279091477394104, 0.7223616242408752, 0.7310791015625, 0.7374191284179688, 0.7605336308479309, 0.7511557340621948, 0.7559106945991516, 0.7524765729904175, 0.7676661014556885, 0.7664773464202881, 0.7741381525993347, 0.7810064554214478, 0.7849689722061157, 0.7720248103141785, 0.7922335267066956, 0.783119797706604, 0.7711002230644226, 0.7909126877784729, 0.7886672616004944, 0.8014793395996094, 0.7901201844215393, 0.800290584564209, 0.8001585006713867, 0.8059701323509216, 0.8075551390647888, 0.8001585006713867, 0.8129705190658569, 0.8101968169212341, 0.8150838613510132, 0.8158763647079468, 0.8189142942428589, 0.8197067975997925, 0.8207634687423706, 0.8164047002792358, 0.8231409192085266, 0.824329674243927], "val_loss": [1.3527326924460275, 0.9194181646619525, 0.7638338804244995, 0.6666996649333409, 0.6485950606209892, 0.6315741539001465, 0.5869327102388654, 0.5803875582558768, 0.5459860903876168, 0.5561776161193848, 0.5240979194641113, 0.5405129534857613, 0.5259062732969012, 0.5025339807782855, 0.4991858346121652, 0.5009893008640834, 0.5156700100217547, 0.49715416772024973, 0.4775858776909964, 0.46786676134381977, 0.4908357688358852, 0.46817186900547575, 0.47670277527400423, 0.4579671451023647, 0.45688492911202566, 0.4507054771695818, 0.4350616080420358, 0.45418156896318707, 0.4420030287333897, 0.43553493704114643, 0.4323950154440744, 0.4463998079299927, 0.42448375054768156, 0.43368283339909147, 0.439855762890407, 0.4143165349960327, 0.4121946862765721, 0.4111217515809195, 0.41813985790525166, 0.4093730534826006, 0.4021005204745701, 0.40879824331828524, 0.4188647355352129], "val_accuracy": [0.5270000100135803, 0.6013333201408386, 0.6766666769981384, 0.7120000123977661, 0.7020000219345093, 0.7146666646003723, 0.7456666827201843, 0.734666645526886, 0.7593333125114441, 0.7559999823570251, 0.765999972820282, 0.7540000081062317, 0.7616666555404663, 0.7730000019073486, 0.7746666669845581, 0.7743333578109741, 0.7756666541099548, 0.7716666460037231, 0.7873333096504211, 0.7943333387374878, 0.7866666913032532, 0.7940000295639038, 0.7773333191871643, 0.7963333129882812, 0.796999990940094, 0.8043333292007446, 0.8116666674613953, 0.793666660785675, 0.8076666593551636, 0.8106666803359985, 0.8166666626930237, 0.8143333196640015, 0.8149999976158142, 0.8206666707992554, 0.8113333582878113, 0.8230000138282776, 0.828000009059906, 0.8296666741371155, 0.824999988079071, 0.8243333101272583, 0.8296666741371155, 0.8259999752044678, 0.8086666464805603]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [1, 9, 6, 3, 1, 6, 3, 2, 1, 6, 5, 7, 8, 9, 2, 1, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 2, 1], [47, 27, 63, 88, 42, 68, 83, 50, 30], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [30, 74, 76, 58]], "fitness": -0.7988571524620056, "mapping_values": [1, 39, 39, 23, 16, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), grad))))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), grad)), grad), tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(tf.math.multiply(grad, tf.math.negative(grad)), tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2861906307531843, 2.2434275122901877, 2.1871721294530553, 2.0991190491004814, 1.962312661488263, 1.7871166553637134, 1.5966283782377786, 1.4264467698298646, 1.3138895596117628, 1.218479684724658, 1.160171120677878, 1.0949754678436228, 1.057131559274704, 1.0049656838347898, 0.9947634877435535, 0.9542677316919467, 0.9293344605395728, 0.9004965189142219, 0.8944645145266614, 0.8680948643809722, 0.8585525928802021, 0.8547929044979722, 0.848087032473303, 0.8181328216737146, 0.8184135246270557, 0.8101146842793797, 0.8051972588244494, 0.7900968044897853, 0.7883949690349444, 0.7638766111761996, 0.7650604280561363, 0.7606496713605807, 0.7573969301656568, 0.7512687343915597, 0.7394110494915835, 0.7357008158491429, 0.7321455122898315, 0.7207563646465418, 0.7240745806895573, 0.723265098527186, 0.7192185121898276, 0.7116681704778146, 0.7087204799817742, 0.7032919399427495, 0.6848484714269607, 0.6978396083684787, 0.6948605321653767, 0.6853190708815414, 0.6780396921759694, 0.6768756982137373, 0.6741828730455589, 0.6754182291194637, 0.6651796173142436, 0.6743069858740601, 0.6612795321633709, 0.6613138764998255, 0.6537243307243013, 0.6633461875182416, 0.6610716620865845, 0.6548360808807956, 0.6511467355999099, 0.638298285596359, 0.6450921664022577, 0.6370321038439761, 0.6374508519970021, 0.6367415109440918, 0.6258098454743707, 0.6304959049944109, 0.6324600646004874, 0.6244041756742178, 0.627877648236367, 0.6278947152796674, 0.6168195285565345, 0.6207905713404331, 0.6272114469878757, 0.6111770642825626, 0.6082784057513771, 0.6105752373179425, 0.6040342957226198, 0.6077753960212398, 0.6058066334502099, 0.6120955231261842, 0.6008105999946972, 0.5986232585312432, 0.6022625812733445, 0.591786203729541, 0.5980506913615665, 0.5994214866816675, 0.594847170408486, 0.5971328045603559, 0.582678470117478, 0.5889148151381708, 0.5956214544575024, 0.5729593622008996, 0.5816313233184713, 0.5894763274687849, 0.5754290951666594, 0.5793435109636299, 0.5793544336742084, 0.5738204645049287], "accuracy": [0.13221503794193268, 0.23101307451725006, 0.3197728097438812, 0.3739268183708191, 0.4266279339790344, 0.4651961326599121, 0.5024435520172119, 0.5387663245201111, 0.5604279637336731, 0.5806366205215454, 0.6019020080566406, 0.6155065298080444, 0.6353189945220947, 0.6491876840591431, 0.6495839357376099, 0.6634526252746582, 0.6749438643455505, 0.6832650899887085, 0.6843217611312866, 0.6892088055610657, 0.6906617283821106, 0.6956809163093567, 0.6940959095954895, 0.7079645991325378, 0.7040021419525146, 0.7117950320243835, 0.7014925479888916, 0.7180029153823853, 0.7100779414176941, 0.7206445932388306, 0.7283053994178772, 0.7187954187393188, 0.7219653725624084, 0.7219653725624084, 0.7269845604896545, 0.7277770638465881, 0.7316074371337891, 0.7388719916343689, 0.7397965788841248, 0.7326641082763672, 0.737947404384613, 0.7409853339195251, 0.7425703406333923, 0.7413815855979919, 0.7437590956687927, 0.7440232634544373, 0.744419515132904, 0.7489103078842163, 0.7469290494918823, 0.7515519857406616, 0.7504953145980835, 0.7524765729904175, 0.7574957013130188, 0.7485140562057495, 0.7614582180976868, 0.7560427784919739, 0.7572315335273743, 0.7582882046699524, 0.7581561207771301, 0.7592127919197083, 0.7582882046699524, 0.7648923397064209, 0.7623828053474426, 0.7652885913848877, 0.76542067527771, 0.7614582180976868, 0.7701756954193115, 0.7683265209197998, 0.7700436115264893, 0.7746664881706238, 0.7677981853485107, 0.7692511081695557, 0.7707040309906006, 0.7711002230644226, 0.7717606425285339, 0.7741381525993347, 0.7771760821342468, 0.7705719470977783, 0.7779685854911804, 0.7738739848136902, 0.7757231593132019, 0.7728173136711121, 0.77677983045578, 0.776251494884491, 0.7786290049552917, 0.7784969210624695, 0.778232753276825, 0.7718927264213562, 0.7836481332778931, 0.7730814814567566, 0.7874785661697388, 0.7781006693840027, 0.7821952104568481, 0.7880068421363831, 0.7819310426712036, 0.7814027070999146, 0.7874785661697388, 0.7910447716712952, 0.7827235460281372, 0.7861577272415161], "val_loss": [1.9348866598946708, 1.889777524130685, 1.820596626826695, 1.711061716079712, 1.551121609551566, 1.35701550756182, 1.1724989073617118, 1.0305048738207137, 0.932837894984654, 0.8623458657945905, 0.8089684247970581, 0.7698397466114589, 0.7355709416525704, 0.7154714890888759, 0.6931988171168736, 0.6764175040381295, 0.6631790740149361, 0.6452020066125053, 0.6359175273350307, 0.628185340336391, 0.6198662860052926, 0.6133647816521781, 0.6058086327144078, 0.5973717825753349, 0.5905513933726719, 0.5851198434829712, 0.5820848430906024, 0.5774352550506592, 0.5719631569726127, 0.5661957263946533, 0.5627197708402362, 0.5606355667114258, 0.5532437903540475, 0.5498244592121669, 0.5456897701535907, 0.5474347216742379, 0.5415916783469064, 0.5371112142290387, 0.5377417973109654, 0.5307912485940116, 0.5291932310376849, 0.5240882124219622, 0.5234662634985787, 0.5255436726978847, 0.5185499020985195, 0.5233450446810041, 0.5132684026445661, 0.5138293504714966, 0.5121067251477923, 0.5065273216792515, 0.5098283972058978, 0.5023423944200788, 0.5017835923603603, 0.5019794021333966, 0.5094552721296038, 0.5000370059694562, 0.49711780888693674, 0.49302749974387033, 0.4924844673701695, 0.4928051062992641, 0.4891641991479056, 0.4875243050711496, 0.486387951033456, 0.48605336461748394, 0.4841340609959194, 0.48413385663713726, 0.4815272433417184, 0.4800042084285191, 0.480205842426845, 0.47776644570486887, 0.47766062191554476, 0.47730902263096403, 0.4727017879486084, 0.47467497416904997, 0.4707930428641183, 0.4709073305130005, 0.470679657799857, 0.471537675176348, 0.46669975348881315, 0.46965624604906353, 0.466119612966265, 0.46462929248809814, 0.46536922454833984, 0.4619759832109724, 0.4621574197496687, 0.4603379453931536, 0.4632145847593035, 0.4597449813570295, 0.4594680070877075, 0.45855156012943815, 0.4585298810686384, 0.45643363680158344, 0.45520366941179546, 0.45351946353912354, 0.4539443254470825, 0.45166357925959993, 0.4505961111613682, 0.45385355608803885, 0.450103827885219, 0.450434718813215], "val_accuracy": [0.32066667079925537, 0.39533331990242004, 0.46833333373069763, 0.5199999809265137, 0.5403333306312561, 0.5730000138282776, 0.6036666631698608, 0.668666660785675, 0.6706666946411133, 0.668666660785675, 0.6819999814033508, 0.6953333616256714, 0.7073333263397217, 0.7103333473205566, 0.718999981880188, 0.7206666469573975, 0.7246666550636292, 0.7353333234786987, 0.734666645526886, 0.734333336353302, 0.7333333492279053, 0.7390000224113464, 0.7416666746139526, 0.7403333187103271, 0.746666669845581, 0.746666669845581, 0.7423333525657654, 0.7443333268165588, 0.7526666522026062, 0.7526666522026062, 0.7586666941642761, 0.7543333172798157, 0.7566666603088379, 0.7586666941642761, 0.7586666941642761, 0.7590000033378601, 0.765666663646698, 0.765666663646698, 0.7633333206176758, 0.7666666507720947, 0.7633333206176758, 0.765999972820282, 0.7649999856948853, 0.7683333158493042, 0.7720000147819519, 0.7639999985694885, 0.7716666460037231, 0.765999972820282, 0.7683333158493042, 0.7746666669845581, 0.7710000276565552, 0.7723333239555359, 0.7749999761581421, 0.7749999761581421, 0.7680000066757202, 0.7776666879653931, 0.7799999713897705, 0.7789999842643738, 0.777999997138977, 0.7870000004768372, 0.7836666703224182, 0.7839999794960022, 0.7826666831970215, 0.7860000133514404, 0.7883333563804626, 0.7856666445732117, 0.7833333611488342, 0.7893333435058594, 0.7906666398048401, 0.7893333435058594, 0.7913333177566528, 0.793666660785675, 0.7923333048820496, 0.7916666865348816, 0.7973333597183228, 0.7913333177566528, 0.7883333563804626, 0.7953333258628845, 0.7929999828338623, 0.7976666688919067, 0.7960000038146973, 0.793666660785675, 0.79666668176651, 0.8013333082199097, 0.7993333339691162, 0.8033333420753479, 0.8016666769981384, 0.8009999990463257, 0.7950000166893005, 0.8050000071525574, 0.8036666512489319, 0.8059999942779541, 0.8006666898727417, 0.8043333292007446, 0.8033333420753479, 0.8046666383743286, 0.8083333373069763, 0.8043333292007446, 0.8096666932106018, 0.8063333630561829]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [8, 6, 6, 3, 2, 0, 9, 2, 1, 6, 5, 7, 2, 0, 2, 0, 2, 1, 0, 2, 0, 9, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [59, 74, 76, 58]], "fitness": -0.797428548336029, "mapping_values": [1, 26, 26, 16, 10, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, alpha), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3823910537034987, 2.2262072568839772, 3.5709611152724, 2.3027062620138525, 2.0978268925004615, 1.6803152118423879, 1.8392635852653494, 1.5374741308315318, 1.4373590069959634, 1.3680727927912464, 1.4474256209504603, 1.4330585237192424, 1.3005472648696437, 1.224883907364974, 1.2282215568131585, 1.3801182798028637, 1.198989896978354, 1.135702711936584, 1.0999371401622169, 1.0703480255649451, 1.0012990826109318, 0.9794021344156534, 0.9545776894646487, 0.9002230831219803, 0.8957463035163405, 0.893881395114742, 0.851261444119194, 0.8578150133572675, 0.89271742319623, 0.8505305490079982, 0.783430996713952, 0.760122138590089, 0.9790513049090276, 0.8483082208383385, 0.8618180574584773, 0.7678204802175035, 0.7379229741168296, 0.7352622668063872, 0.7018925755125672, 0.664988498158065, 0.6458574562276815, 0.6709484139989003, 0.6178075060584935, 0.5855114444009758, 0.615134371372498, 0.6090476979763437, 0.5574224652190328, 0.5657844754683107, 0.5471307499895888, 0.5385151129782302, 0.5296252201403672, 0.5394512516175909], "accuracy": [0.19865275919437408, 0.19693566858768463, 0.14093250036239624, 0.21793685853481293, 0.27777042984962463, 0.43349623680114746, 0.3987584114074707, 0.4753665328025818, 0.5079910159111023, 0.5301809310913086, 0.5011227130889893, 0.5190860033035278, 0.5431250929832458, 0.5655791759490967, 0.5703341960906982, 0.5350680351257324, 0.5827499628067017, 0.5978074073791504, 0.6145819425582886, 0.6091665625572205, 0.641791045665741, 0.6441685557365417, 0.6502443552017212, 0.6758684515953064, 0.6762647032737732, 0.6827367544174194, 0.6864351034164429, 0.6933034062385559, 0.6736230254173279, 0.6913221478462219, 0.7077004313468933, 0.7166820764541626, 0.6556597352027893, 0.6963412761688232, 0.694360077381134, 0.7164179086685181, 0.7289658188819885, 0.7360982894897461, 0.7416457533836365, 0.7534011602401733, 0.7604015469551086, 0.7500990629196167, 0.7675340175628662, 0.7802139520645142, 0.7684586048126221, 0.7693831920623779, 0.7877426743507385, 0.7799497842788696, 0.7868181467056274, 0.7909126877784729, 0.7943468689918518, 0.7960638999938965], "val_loss": [1.9713889530726842, 1.958172185080392, 1.8130297660827637, 1.9347761699131556, 1.6629000391278947, 1.5265929698944092, 1.321225643157959, 1.1451787267412459, 1.184394155229841, 1.3628524030957903, 1.013732978275844, 1.0090889930725098, 0.9814232076917376, 0.9368786811828613, 0.8829006637845721, 0.9151029586791992, 0.9058285100119454, 0.809790849685669, 0.9374263286590576, 0.8312558276312692, 0.7513527870178223, 0.7269185611179897, 0.7096105813980103, 0.711745057787214, 0.7529704400471279, 0.7559978451047625, 0.668949944632394, 0.686778153691973, 0.7111056532178607, 0.6469694546290806, 0.6564978190830776, 0.7040283509663173, 0.708275318145752, 0.6788592338562012, 0.637347902570452, 0.6462796415601458, 0.6480834654399327, 0.641793932233538, 0.6263024977275303, 0.5728326184409005, 0.6180851970400129, 0.5587071350642613, 0.5536090476172311, 0.5489836250032697, 0.591294697352818, 0.5242996386119297, 0.4978130885532924, 0.5044440712247577, 0.5367609262466431, 0.522823521069118, 0.5006038461412702, 0.4978473016193935], "val_accuracy": [0.11299999803304672, 0.2626666724681854, 0.35733333230018616, 0.17599999904632568, 0.3316666781902313, 0.46266666054725647, 0.5086666941642761, 0.5543333292007446, 0.5230000019073486, 0.4163333475589752, 0.5833333134651184, 0.597000002861023, 0.5950000286102295, 0.6259999871253967, 0.6333333253860474, 0.6209999918937683, 0.625333309173584, 0.6773333549499512, 0.5733333230018616, 0.6783333420753479, 0.6830000281333923, 0.7056666612625122, 0.7093333601951599, 0.7123333215713501, 0.7070000171661377, 0.684333324432373, 0.731333315372467, 0.7103333473205566, 0.6763333082199097, 0.7316666841506958, 0.7326666712760925, 0.7110000252723694, 0.7316666841506958, 0.7223333120346069, 0.7393333315849304, 0.7336666584014893, 0.7303333282470703, 0.7369999885559082, 0.7363333106040955, 0.7596666812896729, 0.7553333044052124, 0.765333354473114, 0.7733333110809326, 0.7736666798591614, 0.7433333396911621, 0.7786666750907898, 0.7996666431427002, 0.7893333435058594, 0.7876666784286499, 0.7910000085830688, 0.79666668176651, 0.7870000004768372]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 0, 3, 2, 6, 3, 6, 3, 4, 5, 7, 6, 3, 2, 4, 9, 0, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7962856888771057, "mapping_values": [1, 32, 32, 18, 14, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))))), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, grad)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1422385586062287, 1.4432832280075734, 1.1032446174258805, 0.9558959522535142, 0.8564410061254288, 0.8089815740887011, 0.8110892869666929, 0.7583203541682995, 0.7261406306451448, 0.7145442881950723, 0.6964769769086498, 0.6857366986388717, 0.6553026154891233, 0.647731977124114, 0.6427875170067175, 0.6314016277716695, 0.6410454003534706, 0.6082153958399471, 0.5960723070452132, 0.6010338121543172, 0.5839885611811869, 0.5799694547343327, 0.5703862331184681, 0.5715104180036708], "accuracy": [0.29626205563545227, 0.5012547969818115, 0.6078457236289978, 0.6530181169509888, 0.6917183995246887, 0.707568347454071, 0.6980583667755127, 0.7170783281326294, 0.7327961921691895, 0.7294940948486328, 0.7392682433128357, 0.7353057861328125, 0.759080708026886, 0.7508915662765503, 0.7597411274909973, 0.7627789974212646, 0.7552502751350403, 0.7688548564910889, 0.770439863204956, 0.7737419009208679, 0.7852331399917603, 0.7810064554214478, 0.7858935594558716, 0.7876105904579163], "val_loss": [1.3509025914328439, 0.9232485975537982, 0.7394630057471139, 0.659202149936131, 0.652263845716204, 0.6736390590667725, 0.6715456077030727, 0.5916437762124198, 0.5815862246922084, 0.5353625501905169, 0.5321669748851231, 0.5631527389798846, 0.5216443027768817, 0.5394007819039481, 0.518487674849374, 0.5091833046504429, 0.49094443661826, 0.5048148461750576, 0.476087144442967, 0.48429051467350553, 0.4941478116171701, 0.4642291409628732, 0.4693847213472639, 0.4736313990184239], "val_accuracy": [0.54666668176651, 0.5803333520889282, 0.6943333148956299, 0.7206666469573975, 0.721666693687439, 0.6936666369438171, 0.6943333148956299, 0.7153333425521851, 0.7253333330154419, 0.7590000033378601, 0.7559999823570251, 0.7436666488647461, 0.765999972820282, 0.7419999837875366, 0.7636666893959045, 0.7609999775886536, 0.7900000214576721, 0.7673333287239075, 0.7976666688919067, 0.781333327293396, 0.7693333625793457, 0.7953333258628845, 0.7953333258628845, 0.7796666622161865]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 1, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 37, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7891428470611572, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1422416704394767, 1.4439438449204354, 1.1003403532632574, 0.9583971809481177, 0.8432634999455714, 0.813096356201386, 0.7826290128883228, 0.7715774777306856, 0.7216606702881404, 0.7272576194681181, 0.6894629327470853, 0.6860069927443697, 0.6532423923658326, 0.6506015414716766, 0.6428001988297833, 0.6292380477301653, 0.6386332555123293, 0.6010944712761922, 0.6042442734467276, 0.5913343391146375, 0.5819772649450609, 0.5798730973428377, 0.5659547264644293, 0.5601459801897727], "accuracy": [0.29612997174263, 0.5000660419464111, 0.6082419753074646, 0.6479989290237427, 0.6976621150970459, 0.7086250185966492, 0.7099458575248718, 0.7125874757766724, 0.7323999404907227, 0.7240787148475647, 0.7411174178123474, 0.7347774505615234, 0.7623828053474426, 0.7494386434555054, 0.7581561207771301, 0.7672698497772217, 0.7576277852058411, 0.7744023203849792, 0.767930269241333, 0.7799497842788696, 0.7866860628128052, 0.7824593782424927, 0.7885351777076721, 0.7901201844215393], "val_loss": [1.3509178502219064, 0.9215337548937116, 0.7390607936041695, 0.6506086077008929, 0.6345209564481463, 0.6235537358692714, 0.6845543384552002, 0.5839255367006574, 0.5954775639942714, 0.5375041961669922, 0.5266776936394828, 0.555242827960423, 0.5196905476706368, 0.5355288812092373, 0.5187615837369647, 0.5173145702907017, 0.4893549680709839, 0.5056742259434291, 0.47800205435071674, 0.49755503450121197, 0.49658381938934326, 0.4640908581869943, 0.46263110637664795, 0.4882634026663644], "val_accuracy": [0.5473333597183228, 0.5809999704360962, 0.6926666498184204, 0.7239999771118164, 0.7206666469573975, 0.715666651725769, 0.690666675567627, 0.722000002861023, 0.7243333458900452, 0.7616666555404663, 0.7620000243186951, 0.746999979019165, 0.765999972820282, 0.7476666569709778, 0.7630000114440918, 0.7566666603088379, 0.7826666831970215, 0.7646666765213013, 0.8003333210945129, 0.7676666378974915, 0.7670000195503235, 0.7943333387374878, 0.7990000247955322, 0.7703333497047424]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 5, 3, 3, 2, 3, 9, 2, 1, 0, 5, 7, 2, 0, 2, 1, 1, 1, 0, 1, 5, 9, 3, 1, 0, 1, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 98, 91, 38, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [60, 74, 76, 58]], "fitness": -0.45342856645584106, "mapping_values": [1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.376779539710133, 2.315855302578895, 2.1920851864409783, 2.2469635655331714, 2.146250549576396, 2.339399238634796, 2.303847244906624, 2.3036221313501755, 2.3030915616163568, 2.303468941823445], "accuracy": [0.19719983637332916, 0.16074495017528534, 0.1872936189174652, 0.1612732857465744, 0.2509576082229614, 0.12996962666511536, 0.09985470771789551, 0.09074098616838455, 0.1006472036242485, 0.09906221181154251], "val_loss": [1.9707896368844169, 1.925579002925328, 1.5778310298919678, 1.8639911924089705, 1.4542678083692278, 1.9743870326450892, 1.9738366263253349, 1.9735206195286341, 1.9735829489571708, 1.9736381939479284], "val_accuracy": [0.16699999570846558, 0.20800000429153442, 0.3256666660308838, 0.24966666102409363, 0.44566667079925537, 0.10566666722297668, 0.09666666388511658, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [9, 3, 2, 3, 0, 9, 3, 2, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 12, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 2, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, beta))", "other_info": {"loss": [21786.403630544733, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05032360181212425, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6658489026122313.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 6, 0, 3, 2, 6, 3, 6, 1, 4, 2, 7, 6, 1, 2, 1, 9, 1, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [0, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [56, 48, 98, 36, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [0, 1], [52], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [54, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 43, 43, 24, 19, 5, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 10, 7, 3, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), alpha)))), grad), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.pow(sigma, beta)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [3, 6, 0, 3, 2, 3, 3, 6, 1, 4, 2, 7, 6, 1, 2, 1, 9, 1, 0, 2, 0, 6, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 2, 2, 0, 2, 1, 2, 2, 1, 1, 1, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 9, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 3, 2, 1, 2], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3025180670595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 6, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 29, 19, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad)))), grad)))), tf.math.multiply(tf.math.subtract(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 6, 6, 1, 6, 3, 2, 1, 6, 6, 7, 9, 1, 2, 9, 2, 1, 5, 4, 0, 8, 5, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [98, 48, 98, 8, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [88, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 0, 2, 1, 0, 0, 2, 2], [5, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 23, 16, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), grad)))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3015747501424686, 2.3025850799688024, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 0, 3, 2, 6, 3, 6, 1, 4, 2, 5, 6, 1, 2, 1, 5, 1, 0, 2, 0, 2, 1, 1, 3, 2, 0, 8, 9, 8], [1, 2, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 0, 0, 0, 2, 1], [81, 48, 52, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, grad))))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025180670595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 6, 0, 3, 2, 6, 3, 6, 1, 4, 5, 7, 6, 3, 2, 1, 9, 0, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 0, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [13, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 43, 43, 25, 18, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), alpha)))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.sqrt(grad)), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 6, 2, 3, 4, 6, 2, 2, 1, 6, 5, 7, 2, 0, 2, 1, 1, 1, 2, 1, 5, 9, 3, 1, 0, 1, 0, 8, 9, 8], [1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 0, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [47, 48, 98, 53, 42, 6, 83, 50, 30], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [99, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 0, 2, 1, 0, 0, 2, 2], [80, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 2, 2], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3025180670595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 0, 3, 2, 6, 3, 6, 1, 6, 5, 7, 6, 3, 2, 1, 9, 0, 0, 2, 9, 8, 6, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 2, 1], [23, 48, 73, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [0, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [9, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 42, 25, 17, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 4, 2, 2, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad))))))), alpha))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), grad))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3017541576826877, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 1, 2, 1, 1, 1, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [43, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1674811840057373, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 6, 0, 0, 2, 4, 3, 6, 1, 0, 2, 7, 6, 1, 6, 1, 9, 1, 0, 2, 3, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 0, 0, 0, 2, 1], [81, 48, 69, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [4, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(alpha))))))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3022692494183925, 2.3135272252356547, 2.646026094339905, 6.619628430987393, 14.149269377094107, 21.861967127604366], "accuracy": [0.1006472036242485, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9756884574890137, 2.020775181906564, 3.385148457118443, 9.418897083827428, 16.04138401576451, 22.663834708077566], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 6, 2, 4, 2, 6, 3, 8, 1, 6, 5, 7, 2, 1, 6, 2, 0, 5, 0, 8, 6, 9, 3, 1, 3, 2, 0, 8, 9, 8], [2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 0, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 4, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [81, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 43, 43, 25, 18, 4, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, grad))))), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), alpha)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad)))))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), alpha)), grad)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [2.3019259195790047, 2.3010332131540108, 2.3014222335790238, 2.3025787614513273, 2.302668248153775, 2.30450708509326], "accuracy": [0.09259014576673508, 0.08902391046285629, 0.09126931428909302, 0.09047681838274002, 0.09272222965955734, 0.09470347315073013], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 2, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 2, 2, 0, 2, 2, 1, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [13, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [3, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.03371428698301315, "mapping_values": [1, 48, 48, 28, 20, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, alpha), grad))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, alpha))))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), grad)))))))), alpha)), grad)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.3024720195230635, 2.3029319565482913, 2.305016647476672, 2.3084966609538147, 2.3108796634379316, 2.3169725967231383], "accuracy": [0.09179764986038208, 0.08677849918603897, 0.08677849918603897, 0.08585391938686371, 0.08175934851169586, 0.08149518072605133], "val_loss": [1.972318376813616, 1.9735180309840612, 1.974968637738909, 1.9768529619489397, 1.978898593357631, 1.981473105294364], "val_accuracy": [0.02800000086426735, 0.024000000208616257, 0.023333333432674408, 0.019999999552965164, 0.017666665837168694, 0.020999999716877937]}}]