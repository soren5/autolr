[{"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 3, 4, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 0, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 22, 41, 42, 68], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.8074285984039307, "mapping_values": [1, 26, 26, 17, 9, 6, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), grad))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.071523788472555, 1.945497848417277, 1.4812997626181308, 1.0592578004584603, 0.9329135341729943, 0.8068238712730126, 0.7371012079103229, 0.6868857293159828, 0.6821671940741554, 0.6193387997999105, 0.6434558786500038, 0.596016371585532, 0.5944246192256205, 0.5755381156046944, 0.5548743497520752, 0.5558208461923213, 0.5217572285231189, 0.5484178077511704, 0.5199865042029622, 0.4928418649989128, 0.5055025480741744, 0.4898069753441844], "accuracy": [0.3140932619571686, 0.40245673060417175, 0.47470611333847046, 0.6106194853782654, 0.6429798007011414, 0.6976621150970459, 0.717870831489563, 0.7310791015625, 0.7353057861328125, 0.7648923397064209, 0.7516840696334839, 0.7746664881706238, 0.7783648371696472, 0.7790252566337585, 0.791441023349762, 0.7906485199928284, 0.8045172095298767, 0.7869502305984497, 0.7997622489929199, 0.8125742673873901, 0.8079513907432556, 0.8140271902084351], "val_loss": [1.8872137069702148, 1.6262654576982771, 0.9883724961962018, 0.6711087567465646, 0.6274851901190621, 0.6367242165974208, 0.5465224300112043, 0.5702917405537197, 0.5421655859266009, 0.6046327522822789, 0.5642873389380318, 0.5222209862300328, 0.48450149808611187, 0.45658484527042936, 0.4492085150309971, 0.4439078058515276, 0.4228564075061253, 0.47067848273686, 0.4486029829297747, 0.4373229912349156, 0.45580884388514925, 0.4075529319899423], "val_accuracy": [0.4493333399295807, 0.3213333189487457, 0.5803333520889282, 0.6923333406448364, 0.7039999961853027, 0.7113333344459534, 0.7509999871253967, 0.7256666421890259, 0.734666645526886, 0.7203333377838135, 0.7300000190734863, 0.778333306312561, 0.777999997138977, 0.7916666865348816, 0.8003333210945129, 0.8083333373069763, 0.8336666822433472, 0.7733333110809326, 0.7940000295639038, 0.8090000152587891, 0.800000011920929, 0.8220000267028809]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 8, 4, 8, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 0, 0, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 98, 25, 93, 68, 38], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.7965714335441589, "mapping_values": [1, 26, 26, 17, 9, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1811487268006498, 1.5330279751885851, 1.1638688905490089, 0.9919644934216888, 0.8925701323328332, 0.8810362096680563, 0.8024178135191933, 0.7700303898920803, 0.7493748017479133, 0.7280406111408738, 0.7000709369654637, 0.6968656202915747, 0.6844841043049429, 0.6732804618412713, 0.6512651322792078, 0.6515293010410742, 0.6239801981130753, 0.6316667057897563, 0.617688717701652, 0.6164644317714498, 0.609404402669741, 0.5841277031031865, 0.5956738068521802, 0.590662951435411, 0.5642409400460648, 0.5775546767157083], "accuracy": [0.27658170461654663, 0.4970281422138214, 0.5826178789138794, 0.6457535624504089, 0.6789063811302185, 0.6781138777732849, 0.7013604640960693, 0.7147008180618286, 0.7141724824905396, 0.7231541275978088, 0.7405890822410583, 0.7404569983482361, 0.7416457533836365, 0.7534011602401733, 0.7508915662765503, 0.7548540234565735, 0.7683265209197998, 0.7609298825263977, 0.7705719470977783, 0.7700436115264893, 0.7683265209197998, 0.7812706232070923, 0.774798572063446, 0.7750627398490906, 0.7897239327430725, 0.7788931727409363], "val_loss": [1.52744722366333, 0.9912449972970145, 0.7633814982005528, 0.6825861590249198, 0.6483215945107597, 0.6271506888525826, 0.5819482292447772, 0.5908313819340297, 0.5546004090990339, 0.5387965781348092, 0.5257312570299421, 0.5767344406672886, 0.5170064994267055, 0.5072926112583706, 0.49598561014447895, 0.5159308740070888, 0.5109087399074009, 0.5082384688513619, 0.48176002502441406, 0.5008527891976493, 0.471273558480399, 0.46640639645712717, 0.4869542292186192, 0.47000416687556673, 0.478351286479405, 0.4546640430177961], "val_accuracy": [0.5699999928474426, 0.5633333325386047, 0.6763333082199097, 0.7036666870117188, 0.7036666870117188, 0.7023333311080933, 0.7296666502952576, 0.7229999899864197, 0.7416666746139526, 0.7636666893959045, 0.7666666507720947, 0.7203333377838135, 0.7636666893959045, 0.7673333287239075, 0.7703333497047424, 0.7633333206176758, 0.7770000100135803, 0.7590000033378601, 0.781000018119812, 0.7649999856948853, 0.8003333210945129, 0.7883333563804626, 0.7799999713897705, 0.7906666398048401, 0.7773333191871643, 0.7963333129882812]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 8, 5, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [1, 1, 1, 1, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [80, 48, 98, 81, 42, 68], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.7934285998344421, "mapping_values": [1, 10, 10, 8, 2, 2, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, beta)), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.1454980005882263, 1.8640851194769432, 1.4141966606789356, 1.033765488564614, 0.8995169656324884, 0.8328644484419313, 0.8052574343779587, 0.7386874744621612, 0.7033817741801914, 0.6988783701299723, 0.6498220031287582, 0.6325765064899176, 0.6302491017793069, 0.6187804933347565, 0.5860552785025297, 0.5610901724865502, 0.5456525042954217], "accuracy": [0.2937524616718292, 0.41645753383636475, 0.527010977268219, 0.624620258808136, 0.6656980514526367, 0.6885483860969543, 0.6905296444892883, 0.7230220437049866, 0.7264562249183655, 0.7329282760620117, 0.7537974119186401, 0.7577598690986633, 0.763967752456665, 0.761590301990509, 0.7751948237419128, 0.7853652238845825, 0.7913089394569397], "val_loss": [1.8782807758876257, 1.0848249707903181, 0.7941656112670898, 0.7700508832931519, 0.7760240009852818, 0.7004627500261579, 0.5783298015594482, 0.5783193622316632, 0.5612726722444806, 0.5370538234710693, 0.5032957451684135, 0.4898887702396938, 0.5086311272212437, 0.48443218639918734, 0.46121195384434294, 0.4732590062277658, 0.4888603687286377], "val_accuracy": [0.2736666798591614, 0.574999988079071, 0.6380000114440918, 0.6363333463668823, 0.6583333611488342, 0.6816666722297668, 0.7286666631698608, 0.7206666469573975, 0.7393333315849304, 0.7593333125114441, 0.7739999890327454, 0.7886666655540466, 0.7703333497047424, 0.778333306312561, 0.7816666960716248, 0.7829999923706055, 0.778333306312561]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [5, 8, 2, 3, 9, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 2, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 22, 41, 42, 68], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [3, 74, 76, 58]], "fitness": -0.7734285593032837, "mapping_values": [1, 7, 7, 6, 1, 2, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2949861117861667, 2.2781394331005855, 2.257333909673241, 2.233648576284239, 2.207785734899166, 2.174355201308029, 2.1346350385685797, 2.085986915974333, 2.0217742593044994, 1.9455867391520048, 1.8605772637577735, 1.7758044048685202, 1.6786511071747667, 1.592994454451493, 1.507834858866636, 1.4320276871868773, 1.3653636385720278, 1.3276460244749768, 1.2753048519873427, 1.2268492072848218, 1.1997309778943086, 1.1575129254934038, 1.1259680579855238, 1.1135336986669475, 1.0754181802264924, 1.0639191643594357, 1.0320857187476944, 1.0241663191595949, 1.005782498132126, 0.9981038743132346, 0.9713242065243638, 0.9650972581038842, 0.9560343153944987, 0.9479384803107512, 0.9296786372986893, 0.9285202536285672, 0.9071444939266438, 0.8907928972227888, 0.8903536746026723, 0.8927940919320219, 0.8743388491095081, 0.8709234692527319, 0.8617580600260996, 0.8486681801767996, 0.8587531384664708, 0.8464277303843939, 0.82883824196474, 0.8350487532018591, 0.830862715157378, 0.8251551054157302, 0.8185414919811013, 0.818930817947821, 0.8069461767054064, 0.8000461807608085, 0.7957241243186203, 0.7903021637159898, 0.7950665955971167, 0.7919864933787714, 0.7831481507095002, 0.7788280125826955, 0.7748793518428301, 0.7628475835593842, 0.771385341500877, 0.7674812723884588, 0.762115713304863, 0.7529529755015683, 0.756292153760474, 0.7532676696667125, 0.7508904066194144, 0.7411987963385349, 0.7447963278559079, 0.736899007320908, 0.7449130929377668, 0.7418573294427842, 0.7264840512259321, 0.7296592649561996, 0.7291166332923442, 0.7224790086410522, 0.719828041631784, 0.7230236258378921, 0.7263793349266052, 0.7154323920330052, 0.7218020251634618, 0.7007216552638769, 0.7104266301563088, 0.7101150936438596, 0.7040689804723722, 0.7103743684794122, 0.7086663223796155, 0.6972530498134304, 0.6949910941597588, 0.6963788666713822, 0.6881056380561629, 0.6822022168769529, 0.6903856360302971, 0.6964547887470083, 0.6830908797357564, 0.6837592314751141, 0.6809270249665169, 0.686699604282699], "accuracy": [0.10672302544116974, 0.15400871634483337, 0.20591731369495392, 0.25439175963401794, 0.2975828945636749, 0.33905693888664246, 0.3623035252094269, 0.39783385396003723, 0.4053625762462616, 0.431779146194458, 0.44828951358795166, 0.46572446823120117, 0.47946110367774963, 0.4943864643573761, 0.5176330804824829, 0.533350944519043, 0.5501254796981812, 0.5495971441268921, 0.565711259841919, 0.5799762010574341, 0.5914674401283264, 0.5997886657714844, 0.6091665625572205, 0.6123365759849548, 0.627129852771759, 0.6244881749153137, 0.6395456194877625, 0.6429798007011414, 0.6481310129165649, 0.6436402201652527, 0.6623960137367249, 0.6600185036659241, 0.6605468392372131, 0.6650376319885254, 0.6664905548095703, 0.6700568199157715, 0.6777176260948181, 0.6863030195236206, 0.6826046705245972, 0.6799629926681519, 0.6946242451667786, 0.6877558827400208, 0.6921146512031555, 0.695813000202179, 0.6950204968452454, 0.6971337795257568, 0.7021529674530029, 0.6968696117401123, 0.7018887996673584, 0.7028133869171143, 0.7024171352386475, 0.7041342258453369, 0.7033417224884033, 0.7067758440971375, 0.709549605846405, 0.7180029153823853, 0.7152291536331177, 0.7168141603469849, 0.7186633348464966, 0.7160216569900513, 0.7181349992752075, 0.7246070504188538, 0.7214370369911194, 0.7197200059890747, 0.7246070504188538, 0.7276449799537659, 0.7318716049194336, 0.7283053994178772, 0.7251353859901428, 0.7306828498840332, 0.7231541275978088, 0.7337207794189453, 0.7284374833106995, 0.7313432693481445, 0.7329282760620117, 0.7313432693481445, 0.7293620109558105, 0.7362303733825684, 0.737022876739502, 0.7396644949913025, 0.7376832365989685, 0.7413815855979919, 0.737022876739502, 0.7404569983482361, 0.7453441023826599, 0.7364945411682129, 0.7428345084190369, 0.7384757399559021, 0.7380794882774353, 0.7440232634544373, 0.7441553473472595, 0.7427024245262146, 0.7461365461349487, 0.7516840696334839, 0.7430986762046814, 0.7466648817062378, 0.7465327978134155, 0.7481178045272827, 0.7465327978134155, 0.7504953145980835], "val_loss": [1.953888211931501, 1.936203956604004, 1.9168901443481445, 1.893876348223005, 1.8660006523132324, 1.8306853430611747, 1.7869962283543177, 1.7325968061174666, 1.6660167489733015, 1.5871751308441162, 1.4979629176003593, 1.405367680958339, 1.3122214930398124, 1.2236610821315221, 1.1425891263144357, 1.0725892611912318, 1.01344895362854, 0.9665822642190116, 0.9238652501787458, 0.8880722863333566, 0.857623781476702, 0.829829284123012, 0.8056140116282872, 0.786068218094962, 0.7677620138440814, 0.7528403997421265, 0.7388642515454974, 0.7258037499019078, 0.7152996744428363, 0.7051400457109723, 0.693693893296378, 0.6852369138172695, 0.6779113667351859, 0.670366610799517, 0.6634823424475533, 0.6572426898138863, 0.6514770303453717, 0.6431083168302264, 0.6390586750847953, 0.6352476562772479, 0.6289175578526088, 0.625581009047372, 0.6204145976475307, 0.6148233413696289, 0.6112514563969204, 0.6079948629651751, 0.6062063319342477, 0.6035719088145665, 0.5989182676587786, 0.5957626955849784, 0.5919353451047625, 0.5893992696489606, 0.585443207195827, 0.5827471528734479, 0.5804615872246879, 0.5777250528335571, 0.5773688214165824, 0.5747767005647931, 0.5708291360310146, 0.5701026065008981, 0.5662210328238351, 0.563895617212568, 0.5629233803067889, 0.5591071333203997, 0.5594032662255424, 0.5568438768386841, 0.5551141500473022, 0.5526148932320731, 0.5507630790982928, 0.548350623675755, 0.5461573089872088, 0.5446606363568988, 0.5449205636978149, 0.5427035433905465, 0.5413313593183245, 0.540651627949306, 0.5377039739063808, 0.5364923306873867, 0.5348796503884452, 0.533447265625, 0.5316200256347656, 0.5306752579552787, 0.5308985028948102, 0.5282185077667236, 0.5262950318200248, 0.5253800324031285, 0.5244926725115094, 0.5226924589702061, 0.5214939287730626, 0.5202029262270246, 0.5188206093651908, 0.519431471824646, 0.5167992285319737, 0.5161665167127337, 0.5154647997447422, 0.5134732723236084, 0.5127668721335275, 0.5122570310320173, 0.5107612269265311, 0.5091476270130703], "val_accuracy": [0.18533332645893097, 0.31066668033599854, 0.3713333308696747, 0.4153333306312561, 0.4440000057220459, 0.46799999475479126, 0.4950000047683716, 0.5166666507720947, 0.5333333611488342, 0.5433333516120911, 0.5556666851043701, 0.5580000281333923, 0.5713333487510681, 0.5913333296775818, 0.6036666631698608, 0.6383333206176758, 0.6480000019073486, 0.6539999842643738, 0.6683333516120911, 0.6769999861717224, 0.6833333373069763, 0.6833333373069763, 0.6946666836738586, 0.6949999928474426, 0.6970000267028809, 0.7023333311080933, 0.7053333520889282, 0.7096666693687439, 0.7136666774749756, 0.7143333554267883, 0.7163333296775818, 0.7179999947547913, 0.7226666808128357, 0.7239999771118164, 0.7269999980926514, 0.7283333539962769, 0.7283333539962769, 0.7323333621025085, 0.7296666502952576, 0.731333315372467, 0.734333336353302, 0.734666645526886, 0.7360000014305115, 0.7396666407585144, 0.7433333396911621, 0.7416666746139526, 0.7403333187103271, 0.7400000095367432, 0.7436666488647461, 0.7433333396911621, 0.7413333058357239, 0.7463333606719971, 0.7463333606719971, 0.7446666955947876, 0.7486666440963745, 0.7483333349227905, 0.75, 0.746999979019165, 0.753333330154419, 0.7553333044052124, 0.7543333172798157, 0.7483333349227905, 0.7526666522026062, 0.7556666731834412, 0.7526666522026062, 0.7566666603088379, 0.7570000290870667, 0.7556666731834412, 0.7583333253860474, 0.7563333511352539, 0.7586666941642761, 0.7599999904632568, 0.7593333125114441, 0.7590000033378601, 0.7616666555404663, 0.7636666893959045, 0.7596666812896729, 0.762333333492279, 0.7639999985694885, 0.762666642665863, 0.7639999985694885, 0.7636666893959045, 0.7639999985694885, 0.7646666765213013, 0.765999972820282, 0.7646666765213013, 0.768666684627533, 0.7696666717529297, 0.7696666717529297, 0.7713333368301392, 0.7693333625793457, 0.7699999809265137, 0.7726666927337646, 0.7676666378974915, 0.768666684627533, 0.7726666927337646, 0.7733333110809326, 0.7703333497047424, 0.7746666669845581, 0.7710000276565552]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 5, 3, 3, 4, 9, 5, 9, 1, 2, 5, 7, 3, 2, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8], [3, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 98, 81, 42, 68], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [4, 74, 76, 58]], "fitness": -0.7591428756713867, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.29417989997501, 2.2753538978948504, 2.252119404339693, 2.224715829415171, 2.193674089791768, 2.152340689009018, 2.1018818262435537, 2.0389922151728044, 1.9573265757180949, 1.8619606860199498, 1.7597049465111423, 1.6656768009127596, 1.564573225454175, 1.4810099587259733, 1.4013731830139926, 1.334680623224682, 1.2767612121801462, 1.2482867371436077, 1.2001779517477467, 1.1577041633943792, 1.1364454637822725, 1.0965713385530451, 1.0689399033615603, 1.059387606739006, 1.0246264056255001, 1.015821348532804, 0.9865269536245233, 0.979308224483299, 0.9631307316714462, 0.9577427749636308, 0.9318608944568147, 0.9273942157561201, 0.9193169193701769, 0.9139262843818523, 0.8962529354312118, 0.8955820760533574, 0.8753021356137106, 0.859523013322707, 0.8607413979836931, 0.8634081026424806, 0.8463565705002354, 0.843615511420727, 0.8350658927689989, 0.822433520915911, 0.8327063392922076, 0.8212805239122305, 0.8031884144010986, 0.8105945022996422, 0.8066907833595915, 0.8010534579727738, 0.7951787722943686, 0.7961333571817456, 0.7841845339378425, 0.7776103936496932, 0.7735890300124942, 0.7687443040223753, 0.7737159442356817, 0.7708401327450608, 0.7626830509876956, 0.7581026663617718, 0.7541391109951011, 0.7425369542697795, 0.7508709894478707, 0.7469404986222438, 0.7424937823760023], "accuracy": [0.1080438494682312, 0.16061286628246307, 0.2180689424276352, 0.27037379145622253, 0.3155461549758911, 0.3556993901729584, 0.3807951509952545, 0.41249504685401917, 0.4241183400154114, 0.45225200057029724, 0.46968695521354675, 0.4826310873031616, 0.5060097575187683, 0.516180157661438, 0.5386342406272888, 0.5540879964828491, 0.5666358470916748, 0.5667679309844971, 0.5875049233436584, 0.5983357429504395, 0.6110157370567322, 0.6176198720932007, 0.6275261044502258, 0.6259410977363586, 0.6425835490226746, 0.6415268778800964, 0.6534143686294556, 0.6585655808448792, 0.6634526252746582, 0.6596222519874573, 0.6753401160240173, 0.6708492636680603, 0.6724342703819275, 0.6745476126670837, 0.6782459616661072, 0.6789063811302185, 0.6877558827400208, 0.6968696117401123, 0.6910579800605774, 0.689869225025177, 0.7013604640960693, 0.6985867023468018, 0.6992471218109131, 0.7051908373832703, 0.7010962963104248, 0.7043983340263367, 0.7096816897392273, 0.705058753490448, 0.7086250185966492, 0.7104741930961609, 0.7096816897392273, 0.7128516435623169, 0.7113987803459167, 0.7141724824905396, 0.7160216569900513, 0.7248712182044983, 0.722757875919342, 0.720380425453186, 0.7239466309547424, 0.7238145470619202, 0.7265883088111877, 0.7316074371337891, 0.7298903465270996, 0.72672039270401, 0.7285695672035217], "val_loss": [1.9520660127912248, 1.932342188698905, 1.9102070672171456, 1.8829857962472099, 1.84883451461792, 1.8043910435267858, 1.7484260286603654, 1.678213153566633, 1.5927366869790214, 1.4946228436061315, 1.389608928135463, 1.287825345993042, 1.1928905418940954, 1.1094474792480469, 1.037773847579956, 0.9786811215536935, 0.9299728870391846, 0.8926983901432582, 0.8577421392713275, 0.8286876508167812, 0.8037990161350795, 0.7809157030923026, 0.7611436332975116, 0.7449994598116193, 0.729770302772522, 0.7176877430507115, 0.7061494588851929, 0.694962739944458, 0.6864963088716779, 0.6777976410729545, 0.6675818477358136, 0.6609537260872977, 0.6543654544012887, 0.6474860055106026, 0.6416391474860055, 0.6366840600967407, 0.631223167691912, 0.6232684680393764, 0.6203973463603428, 0.6175745385033744, 0.611149617603847, 0.6082017932619367, 0.6033554588045392, 0.5979527745928083, 0.5947763749531337, 0.5921349014554705, 0.5909278052193778, 0.5883605480194092, 0.5838900463921683, 0.580882361957005, 0.5775032554353986, 0.5750908511025565, 0.5712537595203945, 0.5686612299510411, 0.5666288307734898, 0.5639208384922573, 0.5641342571803502, 0.5613775764192853, 0.5578221934182304, 0.5575571400778634, 0.5533018282481602, 0.5510956219264439, 0.5502827848706927, 0.5464313541139875, 0.547231844493321], "val_accuracy": [0.20100000500679016, 0.32366666197776794, 0.3813333213329315, 0.42766666412353516, 0.45533332228660583, 0.4846666753292084, 0.5109999775886536, 0.5293333530426025, 0.5450000166893005, 0.5506666898727417, 0.5683333277702332, 0.5740000009536743, 0.5963333249092102, 0.624666690826416, 0.6383333206176758, 0.6606666445732117, 0.6669999957084656, 0.6696666479110718, 0.6816666722297668, 0.6869999766349792, 0.6913333535194397, 0.6933333277702332, 0.7003333568572998, 0.7036666870117188, 0.7053333520889282, 0.7133333086967468, 0.7146666646003723, 0.715666651725769, 0.718999981880188, 0.7210000157356262, 0.7243333458900452, 0.7269999980926514, 0.7303333282470703, 0.7310000061988831, 0.731333315372467, 0.7319999933242798, 0.7333333492279053, 0.7363333106040955, 0.7390000224113464, 0.7350000143051147, 0.7406666874885559, 0.7396666407585144, 0.7383333444595337, 0.7413333058357239, 0.7459999918937683, 0.7440000176429749, 0.7459999918937683, 0.7433333396911621, 0.746999979019165, 0.746999979019165, 0.75, 0.7516666650772095, 0.753000020980835, 0.7509999871253967, 0.753333330154419, 0.7553333044052124, 0.7546666860580444, 0.7516666650772095, 0.7559999823570251, 0.7586666941642761, 0.7583333253860474, 0.7559999823570251, 0.7570000290870667, 0.7570000290870667, 0.7540000081062317]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 5, 3, 3, 4, 9, 5, 9, 1, 2, 5, 7, 3, 2, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8], [3, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 98, 81, 42, 68], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 5, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [4, 74, 76, 58]], "fitness": -0.758571445941925, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.29417989997501, 2.275353947367257, 2.252119291885229, 2.2247156989793293, 2.193674080848316, 2.1523399692815546, 2.101882743860642, 2.038995710724239, 1.9573299893613632, 1.8619657560283513, 1.7597136130627073, 1.6656899318215146, 1.564582966605607, 1.4810255527370373, 1.4013919630039322, 1.3346843781204838, 1.276775932960727, 1.2482997798617363, 1.2001779617933848, 1.157708666280843, 1.1364404994735093, 1.096563463371034, 1.0689344214190108, 1.0593832598197352, 1.0246269722435815, 1.0158382576958316, 0.9865725198363301, 0.9793391295585335, 0.9631456442717564, 0.9577416121810104, 0.9318857128121645, 0.9273926892993536, 0.9193184042666582, 0.9139371955667143, 0.896274821562396, 0.8955409879052109, 0.8752814883159813, 0.8595219997839448, 0.8607842023692914, 0.8634417155761729, 0.8463505273639345, 0.843634964381825, 0.8350663383670566, 0.8224516138188387, 0.8326455158029077, 0.8212698137424783, 0.803180754601979, 0.8106304513480701, 0.8067067711738437, 0.8010493458112501, 0.7951833562702314, 0.7961559723381195, 0.784185459561525, 0.777589381953524, 0.7735935907952144, 0.7687240849947649, 0.7737119178478477, 0.7708085051160432, 0.7626438902952037, 0.7582134419916612, 0.7541484222861171, 0.7425558744813977, 0.7509409056095919, 0.7470909977837829, 0.7424675448616939], "accuracy": [0.1080438494682312, 0.16061286628246307, 0.2180689424276352, 0.27037379145622253, 0.3155461549758911, 0.3556993901729584, 0.38066306710243225, 0.41262713074684143, 0.42425042390823364, 0.45225200057029724, 0.4694227874279022, 0.4830273389816284, 0.5061418414115906, 0.516180157661438, 0.5385021567344666, 0.5542200207710266, 0.5665037631988525, 0.5666358470916748, 0.587769091129303, 0.5982036590576172, 0.6110157370567322, 0.6180161237716675, 0.6275261044502258, 0.6260731816291809, 0.64231938123703, 0.6413947939872742, 0.6535464525222778, 0.6585655808448792, 0.663848876953125, 0.6593580842018127, 0.6754721999168396, 0.6705851554870605, 0.672698438167572, 0.6745476126670837, 0.6781138777732849, 0.6789063811302185, 0.6872276067733765, 0.6970016956329346, 0.6914542317390442, 0.6897371411323547, 0.7014925479888916, 0.6980583667755127, 0.6991150379180908, 0.7047945857048035, 0.7012283802032471, 0.7038700580596924, 0.709549605846405, 0.7051908373832703, 0.7083608508110046, 0.7106062769889832, 0.7100779414176941, 0.7127195596694946, 0.711530864238739, 0.713908314704895, 0.715889573097229, 0.7248712182044983, 0.7223616242408752, 0.7207766771316528, 0.7238145470619202, 0.7236824631690979, 0.726192057132721, 0.7316074371337891, 0.7293620109558105, 0.7268524765968323, 0.728701651096344], "val_loss": [1.9520660127912248, 1.932342188698905, 1.9102069309779577, 1.8829859324863978, 1.8488334247044154, 1.8043909754071916, 1.7484276635306222, 1.6782159124101912, 1.5927416937691825, 1.4946396350860596, 1.3896237782069616, 1.2878411497388567, 1.1928976603916712, 1.1094447885240828, 1.0377684320722307, 0.9786708354949951, 0.9299734319959369, 0.8926997184753418, 0.8577436549322945, 0.8286769901003156, 0.803797858101981, 0.7808935471943447, 0.7611191272735596, 0.7449994087219238, 0.729783194405692, 0.7177119936261859, 0.7061760595866612, 0.6949866328920636, 0.686521053314209, 0.6778485093797956, 0.6676153114863804, 0.6609890290669033, 0.6543925659997123, 0.6474772351128715, 0.6416515111923218, 0.6367127214159284, 0.6312382391520909, 0.623274666922433, 0.6204530000686646, 0.6175356762749808, 0.6111899614334106, 0.6082733018057687, 0.6033790792737689, 0.5980037110192435, 0.5948454652513776, 0.5922079937798637, 0.5910611833844867, 0.5884409291403634, 0.5839893307004657, 0.5809757709503174, 0.5774926798684257, 0.5750190189906529, 0.5712255409785679, 0.5687153679983956, 0.566684365272522, 0.5639994144439697, 0.564261794090271, 0.5614943163735526, 0.5579084839139666, 0.557754397392273, 0.5534979275294712, 0.5512634515762329, 0.5505039691925049, 0.546520573752267, 0.5473668915884835], "val_accuracy": [0.20100000500679016, 0.32366666197776794, 0.3813333213329315, 0.42766666412353516, 0.45533332228660583, 0.4846666753292084, 0.5109999775886536, 0.5293333530426025, 0.5450000166893005, 0.5509999990463257, 0.5683333277702332, 0.5740000009536743, 0.597000002861023, 0.624666690826416, 0.6383333206176758, 0.6606666445732117, 0.6669999957084656, 0.6693333387374878, 0.6816666722297668, 0.6869999766349792, 0.6913333535194397, 0.6936666369438171, 0.7003333568572998, 0.70333331823349, 0.7053333520889282, 0.7133333086967468, 0.7146666646003723, 0.715666651725769, 0.7193333506584167, 0.7210000157356262, 0.7243333458900452, 0.7269999980926514, 0.7303333282470703, 0.7306666374206543, 0.7316666841506958, 0.7319999933242798, 0.7333333492279053, 0.7366666793823242, 0.7393333315849304, 0.734666645526886, 0.7409999966621399, 0.7396666407585144, 0.7379999756813049, 0.7406666874885559, 0.746666669845581, 0.7443333268165588, 0.7463333606719971, 0.7436666488647461, 0.746999979019165, 0.7473333477973938, 0.75, 0.7516666650772095, 0.753333330154419, 0.750333309173584, 0.7536666393280029, 0.7553333044052124, 0.7543333172798157, 0.7509999871253967, 0.7570000290870667, 0.7583333253860474, 0.7583333253860474, 0.7556666731834412, 0.7556666731834412, 0.7573333382606506, 0.7536666393280029]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 9, 2, 2, 6, 9, 3, 1, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 22, 41, 42, 68], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 1, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.6891428828239441, "mapping_values": [1, 3, 3, 2, 1, 1, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.subtract(alpha, tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.112124272640497, 1.5527530039274744, 1.2143548644843938, 0.9843659517850386, 0.9164108391829044, 0.826048484079716, 0.7686190244433839, 0.769111524814187], "accuracy": [0.3125082552433014, 0.4897635579109192, 0.5872408151626587, 0.6510368585586548, 0.6664905548095703, 0.6890767216682434, 0.7061154246330261, 0.707040011882782], "val_loss": [1.2476921081542969, 0.925152199608939, 0.7747304780142648, 0.7609363453728812, 0.6468081985201154, 0.6890288080487933, 0.6409146445138114, 0.6132574762616839], "val_accuracy": [0.5673333406448364, 0.6326666474342346, 0.7106666564941406, 0.6316666603088379, 0.6940000057220459, 0.6923333406448364, 0.6899999976158142, 0.699999988079071]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 3, 9, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 2, 1, 2, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 22, 41, 42, 68], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [78, 74, 76, 58]], "fitness": -0.10285714268684387, "mapping_values": [1, 8, 8, 6, 2, 2, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [4.8575319404914445, 7.801290862013273, 2.3092583634393278, 2.3042685954389066, 2.303943590355146, 2.3032615314212066, 2.302976778768797], "accuracy": [0.1850482076406479, 0.10091137140989304, 0.09536388516426086, 0.09642054885625839, 0.09549596905708313, 0.09721305221319199, 0.10051512718200684], "val_loss": [35.83185468401228, 1.9794274057660783, 1.9747426850455148, 1.9739811761038644, 1.9738541330610002, 1.973731313432966, 1.9738911901201521], "val_accuracy": [0.09833333641290665, 0.10133333504199982, 0.10133333504199982, 0.09866666793823242, 0.09799999743700027, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 8, 4, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 98, 25, 93, 68, 38], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 2, 4, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), beta)), grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.9343397252988885, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0334169864654541, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [216.33518763950892, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 5, 8, 4, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 0, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [81, 48, 22, 41, 42, 68], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 8, 2, 2, 6, 6, 4, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302252818123854, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 2, 2, 8, 4, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [2, 1, 2, 0, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [69, 48, 98, 25, 93, 68, 38], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 0, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 17, 9, 6, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))), tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(alpha)), alpha), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(alpha)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 2, 9, 0, 2, 9, 1, 2, 5, 7, 1, 1, 4, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 22, 41, 42, 68], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [55, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 1, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 8, 3, 2, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), sigma)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 3, 4, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 0, 2, 0, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 98, 7, 42, 68, 38], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 2, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 5, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 1, 1, 0, 1, 5, 3, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), beta)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.302252818123854, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 4, 2, 8, 4, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 98, 25, 93, 68, 38], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 5, 1, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 17, 9, 4, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), alpha)), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), grad)), alpha))))), tf.math.add(alpha, grad))), tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.934267939672242, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0334169864654541, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [216.25479997907365, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [3, 8, 2, 3, 0, 9, 3, 9, 1, 6, 5, 7, 3, 1, 0, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 0, 2, 0, 2, 2, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 22, 41, 42, 68], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [8, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 8, 3, 3, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302252818123854, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 3, 1, 9, 3, 5, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 1, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 23, 58, 42, 68, 38], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 5, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.subtract(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302252818123854, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 3, 4, 9, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 0, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 98, 25, 93, 68, 38], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 5, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, grad))), tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302252818123854, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 3, 3, 3, 4, 8, 5, 9, 1, 2, 5, 7, 3, 2, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8], [1, 1, 1, 1, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 98, 81, 42, 68], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [39, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 13, 13, 8, 5, 1, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), tf.math.multiply(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.square(alpha))), grad))))), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), alpha), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.302686108070326, 2.304410570348967, 2.3025956969802186, 2.302241886328114, 2.301953692493532, 2.3016973028345475], "accuracy": [0.0874389111995697, 0.08849557489156723, 0.08757099509239197, 0.09430722147226334, 0.08981640636920929, 0.09325055778026581], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 4, 2, 3, 4, 9, 3, 5, 1, 6, 5, 7, 3, 1, 8, 9, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 33, 7, 42, 68], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 6, 2, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 3, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [55, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 14, 14, 8, 6, 3, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302686108070326, 2.304410570348967, 2.3025956969802186, 2.302241886328114, 2.301953692493532, 2.3016973028345475], "accuracy": [0.0874389111995697, 0.08849557489156723, 0.08757099509239197, 0.09430722147226334, 0.08981640636920929, 0.09325055778026581], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 8, 2, 3, 3, 5, 3, 9, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8, 5], [3, 1, 2, 0, 2, 0, 0, 2, 1, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [76, 48, 47, 41, 66, 68], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 2, 9, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [17, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [81, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.302686108070326, 2.304410570348967, 2.3025956969802186, 2.302241886328114, 2.301953692493532, 2.3016973028345475], "accuracy": [0.0874389111995697, 0.08849557489156723, 0.08757099509239197, 0.09430722147226334, 0.08981640636920929, 0.09325055778026581], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]