[{"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 4, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [77, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8259999752044678, "mapping_values": [1, 10, 10, 6, 4, 3, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad)))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.pow(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0439564707792193, 1.8385977656093997, 1.7838291857992385, 1.3752947405990341, 0.9698598680715393, 0.8386210281268528, 0.7205191946552414, 0.7126821106167643, 0.6486597045884077, 0.6587350555950104, 0.6067666267564568, 0.57206320424893, 0.5636229974844704, 0.5428660742327396, 0.5395584501657724, 0.5076428430821398, 0.521302677026719, 0.4926298183220851, 0.47721635616293295, 0.49040146964636494, 0.4536353568627047, 0.46834668430118764, 0.4560329147483285, 0.44668901398858657, 0.41261827690631897, 0.42962576256231655, 0.4184155751291818, 0.4195727245438573, 0.39742348325124993, 0.38989429344133913, 0.39551364842139497, 0.3863076669483956, 0.3798016926765505, 0.36330397494984595], "accuracy": [0.3061682879924774, 0.43006208539009094, 0.4213446080684662, 0.5052172541618347, 0.6416589617729187, 0.6832650899887085, 0.7256637215614319, 0.7304186820983887, 0.7548540234565735, 0.7485140562057495, 0.7718927264213562, 0.7828556299209595, 0.7808743715286255, 0.7948752045631409, 0.793950617313385, 0.8131026029586792, 0.8039889335632324, 0.8095363974571228, 0.8216879963874817, 0.8165367841720581, 0.8277638554573059, 0.8235371708869934, 0.82683926820755, 0.828820526599884, 0.847840428352356, 0.8335754871368408, 0.8396512866020203, 0.8378021121025085, 0.8494254350662231, 0.8531237840652466, 0.8524633646011353, 0.8521991968154907, 0.8576145768165588, 0.8628978729248047], "val_loss": [1.579082693372454, 1.0854699952261788, 0.9991695540291923, 0.7501687152045113, 0.6617846148354667, 0.5817784581865583, 0.5681407451629639, 0.5127124616077968, 0.5224592345101493, 0.5282309906823295, 0.49362586225782124, 0.47384119033813477, 0.5277343136923653, 0.5592954499380929, 0.4469610793249948, 0.43607515948159353, 0.4420757634299142, 0.4533532517296927, 0.43282861368996756, 0.4242457832608904, 0.3984108396938869, 0.39420193433761597, 0.4057066185133798, 0.406039902142116, 0.3752949408122471, 0.3755857178143093, 0.4151686429977417, 0.4038912739072527, 0.368284923689706, 0.36418334926877705, 0.3685072830745152, 0.4274150218282427, 0.36985303674425396, 0.38087293079921175], "val_accuracy": [0.40299999713897705, 0.6650000214576721, 0.5839999914169312, 0.7006666660308838, 0.7110000252723694, 0.7279999852180481, 0.7413333058357239, 0.765333354473114, 0.7663333415985107, 0.750333309173584, 0.7683333158493042, 0.7889999747276306, 0.753000020980835, 0.7450000047683716, 0.8013333082199097, 0.8176666498184204, 0.7950000166893005, 0.7926666736602783, 0.8046666383743286, 0.809333324432373, 0.8273333311080933, 0.8226666450500488, 0.8153333067893982, 0.8233333230018616, 0.8389999866485596, 0.8433333039283752, 0.8270000219345093, 0.8373333215713501, 0.847000002861023, 0.847000002861023, 0.8346666693687439, 0.8096666932106018, 0.8413333296775818, 0.8410000205039978]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 5, 6, 5, 1, 7, 8, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 4, 3, 4, 2, 4, 3], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 0, 0, 2, 1, 1, 3], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.8205714225769043, "mapping_values": [1, 44, 44, 25, 19, 3, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), alpha))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(grad, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(alpha, alpha)), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.1505309505044448, 1.6602967024605273, 1.2894713615524047, 1.0370945014328201, 0.9090168147338396, 0.7499536548575957, 0.7190172774932483, 0.7168869999626198, 0.6637078390350085, 0.62774392599128, 0.6183552497240373, 0.5709592279914253, 0.5433521379396002, 0.5650434489137445, 0.5324357218667422, 0.5441324347360748, 0.5248459208367476, 0.497501408021684, 0.4825418529501366, 0.47271879179728676, 0.46524588669831207, 0.4702536121311913, 0.4682141564911414, 0.4471738217623636, 0.41874073606204393, 0.42164800517736345, 0.4031332078477285, 0.42059485405081254, 0.40380044261210346, 0.393106587956437, 0.40506262161066947], "accuracy": [0.27301543951034546, 0.4247787594795227, 0.5308413505554199, 0.6148461103439331, 0.6608110070228577, 0.7209087014198303, 0.7209087014198303, 0.7238145470619202, 0.7469290494918823, 0.7589486241340637, 0.7662131786346436, 0.7800818681716919, 0.7872143983840942, 0.785101056098938, 0.7887993454933167, 0.7928939461708069, 0.7997622489929199, 0.8039889335632324, 0.8186501264572144, 0.8230088353157043, 0.8210275769233704, 0.8230088353157043, 0.8202351331710815, 0.828292191028595, 0.837141752243042, 0.8376700282096863, 0.8485008478164673, 0.8359529972076416, 0.8448025584220886, 0.8541803956031799, 0.8451988101005554], "val_loss": [1.4800986221858434, 1.6164768423352922, 0.7819487367357526, 0.8948417391095843, 0.6424086434500558, 0.5620473963873727, 0.5942511899130685, 0.5319069453648159, 0.5608805247715541, 0.5303930214473179, 0.5312027079718453, 0.5118871246065412, 0.5022472313472203, 0.4611541884286063, 0.47080627509525846, 0.4518653665270124, 0.45110482828957693, 0.46278025422777447, 0.447958094733102, 0.44834274905068533, 0.4349166580608913, 0.3975901348250253, 0.38934028148651123, 0.419292083808354, 0.3915720411709377, 0.3602381008011954, 0.385855427810124, 0.38654186044420513, 0.36868538175310406, 0.3617479034832546, 0.37632077080862864], "val_accuracy": [0.47466665506362915, 0.2893333435058594, 0.6673333048820496, 0.6083333492279053, 0.7026666402816772, 0.7506666779518127, 0.7263333201408386, 0.7563333511352539, 0.7139999866485596, 0.7596666812896729, 0.7486666440963745, 0.7583333253860474, 0.7766666412353516, 0.7896666526794434, 0.7913333177566528, 0.7820000052452087, 0.7943333387374878, 0.7896666526794434, 0.8073333501815796, 0.7946666479110718, 0.8086666464805603, 0.8376666903495789, 0.8326666951179504, 0.8190000057220459, 0.8433333039283752, 0.8523333072662354, 0.8373333215713501, 0.8426666855812073, 0.846666693687439, 0.8473333120346069, 0.8323333263397217]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 8, 6, 5, 3, 5, 2, 7, 8, 6, 3, 7, 5, 0, 2, 2, 2, 1, 8, 5, 0, 1], [0, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0], [1, 80, 61, 19], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [51, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8185714483261108, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.043939242226305, 1.8518366074092856, 1.6832570668775895, 1.1851844622505938, 0.9707542662575828, 0.8000795655262516, 0.7946761704360363, 0.6917286695443313, 0.6642406650931686, 0.6633421878111817, 0.61121227907829, 0.5794326573740206, 0.553969846953018, 0.552391913612332, 0.5271801670796489, 0.5476086182349299, 0.5152951324337178, 0.49739853661247074, 0.47663429567622095, 0.47773711372911337, 0.47466291537405775, 0.45254304305185433, 0.46202036920256384, 0.45099854636989045, 0.42022616173046107, 0.4337384649917135, 0.4140007254895029, 0.41896747324870104, 0.40613809876658613, 0.38536319747939163, 0.3933367212891594, 0.3778620049654611, 0.37758501607586664, 0.37397766724994486, 0.36561241110223647, 0.35487281728209663], "accuracy": [0.3061682879924774, 0.428609162569046, 0.4377228915691376, 0.5646545886993408, 0.6444327235221863, 0.7021529674530029, 0.7005679607391357, 0.7405890822410583, 0.7483819723129272, 0.7458723783493042, 0.7716285586357117, 0.7777044177055359, 0.7828556299209595, 0.7965922355651855, 0.7985734939575195, 0.791441023349762, 0.8057059645652771, 0.8068947196006775, 0.8226125836372375, 0.8189142942428589, 0.8177255392074585, 0.83119797706604, 0.8249900937080383, 0.8309338092803955, 0.8467837572097778, 0.8363492488861084, 0.839519202709198, 0.8446704745292664, 0.844010055065155, 0.8562937378883362, 0.852859616279602, 0.859199583530426, 0.8561616539955139, 0.8589354157447815, 0.8625016212463379, 0.8673887252807617], "val_loss": [1.5798891271863664, 1.0541399206433977, 1.421703679221017, 0.8162598269326347, 0.6513074466160366, 0.6855510132653373, 0.5840880359922137, 0.5295733554022652, 0.5306457792009626, 0.5285878011158535, 0.5057036195482526, 0.4638629300253732, 0.557605368750436, 0.5104726552963257, 0.4788991894040789, 0.453877466065543, 0.4312307153429304, 0.44109857082366943, 0.4379401206970215, 0.3978267397199358, 0.4238432049751282, 0.39057521309171406, 0.3869274003165109, 0.4100359337670462, 0.40152272156306673, 0.3685242533683777, 0.39795091322490145, 0.3886615889413016, 0.36836671829223633, 0.3741807426725115, 0.35728877782821655, 0.37056583166122437, 0.37456242527280537, 0.3931300384657724, 0.35075460161481586, 0.361839371068137], "val_accuracy": [0.4033333361148834, 0.6140000224113464, 0.4569999873638153, 0.5903333425521851, 0.7089999914169312, 0.6980000138282776, 0.7206666469573975, 0.7556666731834412, 0.7553333044052124, 0.7580000162124634, 0.7710000276565552, 0.7919999957084656, 0.7393333315849304, 0.7586666941642761, 0.7853333353996277, 0.7789999842643738, 0.8006666898727417, 0.7986666560173035, 0.8059999942779541, 0.8289999961853027, 0.8196666836738586, 0.8263333439826965, 0.8293333053588867, 0.8256666660308838, 0.8193333148956299, 0.8493333458900452, 0.8309999704360962, 0.8410000205039978, 0.8443333506584167, 0.843999981880188, 0.8506666421890259, 0.8396666646003723, 0.8339999914169312, 0.8236666917800903, 0.8506666421890259, 0.8450000286102295]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [92, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.8105714321136475, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0156410059294663, 1.4107577190926959, 1.0525511912288068, 0.8899762635973576, 0.8523008424324713, 0.7860014422962364, 0.7229949582081272, 0.7227506033102944, 0.7069655678228475, 0.6645063060527591, 0.6613027523253903, 0.6385095447691566, 0.6248516458813792, 0.6331958412541501, 0.6027534978658359, 0.6085955794492749, 0.578522005589442, 0.5599300490551778, 0.5813487426259373, 0.557092129522862, 0.5617357886478397, 0.5435189851255244, 0.5395713522213482, 0.5263894786727332, 0.49929922099567564], "accuracy": [0.33258485794067383, 0.5083872675895691, 0.6193369626998901, 0.6699247360229492, 0.6827367544174194, 0.7071720957756042, 0.7272487282752991, 0.7280412316322327, 0.7296261787414551, 0.7512878179550171, 0.7453441023826599, 0.7584202885627747, 0.7574957013130188, 0.7602694630622864, 0.7676661014556885, 0.7680623531341553, 0.7824593782424927, 0.7927618622779846, 0.7775723338127136, 0.787082314491272, 0.7847048044204712, 0.7942147850990295, 0.7932901978492737, 0.8026680946350098, 0.8123101592063904], "val_loss": [1.257085153034755, 0.855826565197536, 0.7069477183478219, 0.7335558959415981, 0.6628703219549996, 0.5817354917526245, 0.6081446579524449, 0.5616787501743862, 0.5458202362060547, 0.5806524412972587, 0.5453830446515765, 0.5057808841977801, 0.6034109933035714, 0.527789728982108, 0.4941177879061018, 0.4986670698438372, 0.47539128576006207, 0.4763328347887312, 0.4674521003450666, 0.45365583896636963, 0.45536957468305317, 0.44482292447771343, 0.459024259022304, 0.43927061557769775, 0.46293420451028006], "val_accuracy": [0.4266666769981384, 0.6169999837875366, 0.6996666789054871, 0.6553333401679993, 0.703000009059906, 0.7289999723434448, 0.7096666693687439, 0.749666690826416, 0.7516666650772095, 0.7326666712760925, 0.7603333592414856, 0.7706666588783264, 0.7036666870117188, 0.7566666603088379, 0.7883333563804626, 0.7796666622161865, 0.7889999747276306, 0.7879999876022339, 0.7896666526794434, 0.8073333501815796, 0.8023333549499512, 0.8043333292007446, 0.8006666898727417, 0.8009999990463257, 0.8023333549499512]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8074285984039307, "mapping_values": [1, 22, 22, 14, 8, 0, 16, 16, 9, 7, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(alpha), alpha)))), tf.math.add(alpha, alpha))), alpha))))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.043957812580466, 1.8427846196651647, 1.894683626743277, 1.2408199594981635, 0.9500583294376076, 0.8240840659716566, 0.7184367053040487, 0.7018072165124657, 0.6647432202896689, 0.6193378961648388, 0.5904550890581813, 0.5651518373032131, 0.544677108278238, 0.5607921110640554, 0.5161645260028489, 0.5478213197047196, 0.5085009181417605, 0.469944917538446, 0.4691248048077705, 0.4678250494146265, 0.4396836821153699, 0.46028572297713477, 0.4482895688507708, 0.4338553806164356, 0.39875987531518137, 0.4041697549553847, 0.4173476120712672, 0.4169756426724303, 0.3925644456080599, 0.38341983256086837, 0.3839860992377476, 0.38671419273246593, 0.3743655357331238, 0.36179693471706775, 0.3583810114196074, 0.34993074885716513, 0.34126120852189623, 0.34542301127923525, 0.35554415772871617, 0.327471601551298, 0.3227062198810605, 0.34134300973248155, 0.2987302751305585, 0.298875948429706, 0.31139580626938684, 0.29907014756595707, 0.32396493377608077, 0.2722719316752737, 0.27630231480958395, 0.2974681406248798, 0.30688800724065063, 0.27089201217991343, 0.29098603373836013, 0.2580656613443569, 0.2661079612973029], "accuracy": [0.3061682879924774, 0.4295337498188019, 0.38066306710243225, 0.5559371113777161, 0.6590939164161682, 0.6930392384529114, 0.7186633348464966, 0.7276449799537659, 0.7495707273483276, 0.7656848430633545, 0.7759873270988464, 0.7845727205276489, 0.7918372750282288, 0.789988100528717, 0.8053097128868103, 0.7880068421363831, 0.8082155585289001, 0.8193105459213257, 0.8206313848495483, 0.8274996876716614, 0.8321225643157959, 0.826310932636261, 0.8296129703521729, 0.8358209133148193, 0.8531237840652466, 0.8470479249954224, 0.8437458872795105, 0.8408400416374207, 0.8500858545303345, 0.8555012345314026, 0.8555012345314026, 0.8527275323867798, 0.8610487580299377, 0.8615770936012268, 0.8708229064941406, 0.8708229064941406, 0.8644828796386719, 0.8712190985679626, 0.8658037185668945, 0.8757099509239197, 0.8784837126731873, 0.8751816153526306, 0.887597382068634, 0.8883898854255676, 0.8796724081039429, 0.8856161832809448, 0.8751816153526306, 0.8977677822113037, 0.8920882344245911, 0.8874653577804565, 0.8812574148178101, 0.8947299122810364, 0.8894465565681458, 0.8993527889251709, 0.8957865834236145], "val_loss": [1.5790998935699463, 1.0895740645272392, 1.2024373326982771, 0.891841036932809, 0.6070917844772339, 0.5605149780000959, 0.6037848847252982, 0.5427420650209699, 0.5014739717755999, 0.5275440386363438, 0.5141893795558384, 0.47197820459093365, 0.6029035704476493, 0.4987742730549404, 0.44039020368031095, 0.46822563239506315, 0.41624930926731657, 0.4584234952926636, 0.4099442958831787, 0.3979331169809614, 0.4094423566545759, 0.3830536774226597, 0.3838285803794861, 0.40494614839553833, 0.389411347252982, 0.3690312419618879, 0.3869393382753645, 0.38884889228003366, 0.36331972905567717, 0.3687497888292585, 0.3539488230432783, 0.3903365135192871, 0.3807078855378287, 0.38029545545578003, 0.3496860350881304, 0.3659983362470354, 0.3470300095421927, 0.37239365918295725, 0.3480692590985979, 0.3371266041483198, 0.35615433965410503, 0.34508900131498066, 0.34926147971834454, 0.37379519428525654, 0.33653320584978375, 0.37764066457748413, 0.34426056487219675, 0.3383077893938337, 0.35075210673468454, 0.3488474317959377, 0.34056378262383596, 0.38386685507638113, 0.34302133321762085, 0.3673294016293117, 0.35599846499306814], "val_accuracy": [0.40299999713897705, 0.6433333158493042, 0.5133333206176758, 0.6663333177566528, 0.7099999785423279, 0.7456666827201843, 0.7170000076293945, 0.7663333415985107, 0.7833333611488342, 0.7580000162124634, 0.7493333220481873, 0.7996666431427002, 0.7269999980926514, 0.7760000228881836, 0.7996666431427002, 0.7689999938011169, 0.8109999895095825, 0.7806666493415833, 0.8146666884422302, 0.8206666707992554, 0.8183333277702332, 0.8360000252723694, 0.8296666741371155, 0.8246666789054871, 0.8336666822433472, 0.8476666808128357, 0.8323333263397217, 0.8393333554267883, 0.846666693687439, 0.8453333377838135, 0.8493333458900452, 0.8320000171661377, 0.8330000042915344, 0.8386666774749756, 0.8526666760444641, 0.8500000238418579, 0.8569999933242798, 0.8339999914169312, 0.8550000190734863, 0.8566666841506958, 0.8476666808128357, 0.8586666584014893, 0.8560000061988831, 0.8393333554267883, 0.8583333492279053, 0.8450000286102295, 0.859666645526886, 0.8640000224113464, 0.8556666374206543, 0.8643333315849304, 0.8583333492279053, 0.8433333039283752, 0.8636666536331177, 0.8479999899864197, 0.8489999771118164]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 1, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7954285740852356, "mapping_values": [1, 10, 10, 6, 4, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2457367579667102, 2.0120845628594046, 1.629273957123515, 1.473112170139812, 1.0799284630668256, 0.9775389877009338, 0.9312789000225357, 0.8430344288879146, 0.7842535222793819, 0.7303152829428328, 0.6947885958856486, 0.7166402237825642, 0.6828991354669106, 0.660560709051468, 0.6463314300562176, 0.607628538679091, 0.5851782278346348], "accuracy": [0.2576938271522522, 0.3339056968688965, 0.47325319051742554, 0.48210275173187256, 0.602562427520752, 0.6433760523796082, 0.6606789231300354, 0.6910579800605774, 0.7049266695976257, 0.7252674698829651, 0.7405890822410583, 0.7378153204917908, 0.7510236501693726, 0.7498348951339722, 0.7541936039924622, 0.7714964747428894, 0.7812706232070923], "val_loss": [1.908834457397461, 1.2389022282191686, 0.938122204371861, 0.9875052315848214, 0.7238795757293701, 0.7957019976207188, 0.6315926994596209, 0.5978067432131086, 0.5948257446289062, 0.5407001120703561, 0.532370890889849, 0.49611624649592806, 0.5332423618861607, 0.5052326406751361, 0.48459247180393766, 0.47127299649374826, 0.5561176879065377], "val_accuracy": [0.19833333790302277, 0.512333333492279, 0.5426666736602783, 0.515999972820282, 0.6756666898727417, 0.612333357334137, 0.7369999885559082, 0.7323333621025085, 0.7276666760444641, 0.7549999952316284, 0.762666642665863, 0.793666660785675, 0.7559999823570251, 0.7763333320617676, 0.7919999957084656, 0.7850000262260437, 0.75]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 2, 9, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [89, 14, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [11, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7917143106460571, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0367426209997084, 1.9286002588309883, 1.5171029172506094, 1.0956121604708067, 0.8901964934305855, 0.786242957892057, 0.7246888661035032, 0.6742033645886598, 0.6672030330302614, 0.6642759628441387, 0.6168723643070135, 0.6123884235390772, 0.5783812635728413, 0.5692158428716654, 0.5477603099696027, 0.5444395663700147], "accuracy": [0.2925637364387512, 0.3471139967441559, 0.48448026180267334, 0.6050719618797302, 0.67666095495224, 0.7058512568473816, 0.7255316376686096, 0.7448157668113708, 0.7544577717781067, 0.7442874312400818, 0.7668735980987549, 0.7693831920623779, 0.7860256433486938, 0.7833839654922485, 0.7951393723487854, 0.7991018295288086], "val_loss": [1.1417639596121651, 1.069669314793178, 1.1476095403943742, 0.6326322896139962, 0.6637256996972221, 0.6277834687914167, 0.5499790566308158, 0.5129684550421578, 0.5350208623068673, 0.5043468305042812, 0.46119299956730436, 0.46952334472111296, 0.4604533740452358, 0.499618513243539, 0.5091958216258458, 0.4826182467596872], "val_accuracy": [0.546999990940094, 0.5946666598320007, 0.5519999861717224, 0.7243333458900452, 0.6866666674613953, 0.7103333473205566, 0.7590000033378601, 0.762666642665863, 0.7559999823570251, 0.7696666717529297, 0.8046666383743286, 0.8036666512489319, 0.7976666688919067, 0.7596666812896729, 0.7760000228881836, 0.7926666736602783]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [89, 14, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [78, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [37, 9, 76, 58]], "fitness": -0.7911428809165955, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.negative(grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.230116801412429, 1.814086063615776, 1.2820740558719748, 1.0943171025078295, 0.9737204332172815, 0.9139498940249161, 0.8528592364111943, 0.8363285853075172, 0.7908825892199772, 0.7757123259269267, 0.7320252364070078, 0.7420125682009776, 0.7105284081930655, 0.7052534908319996, 0.6919447021351482, 0.681862386525378, 0.6815913881308934, 0.6539189706641008, 0.6605465790583331, 0.6328037928564988, 0.6300124622937506, 0.631871495335377, 0.6272151477663446, 0.6129972643273429, 0.6072862952801971, 0.6125605268532558, 0.609561639580949, 0.5928749886360214, 0.5958504655956041, 0.5854082450008884, 0.5760487405426545, 0.5851839932515527, 0.5643975550724357, 0.56997045728556, 0.5629351110411768], "accuracy": [0.23642848432064056, 0.445779949426651, 0.5663716793060303, 0.6131290197372437, 0.6539427042007446, 0.6773213744163513, 0.6903975605964661, 0.6927750706672668, 0.7063795924186707, 0.7055870890617371, 0.7354378700256348, 0.7265883088111877, 0.735569953918457, 0.7312111854553223, 0.7404569983482361, 0.7473253011703491, 0.7449478507041931, 0.7544577717781067, 0.7489103078842163, 0.7658169269561768, 0.7707040309906006, 0.7601373791694641, 0.7712323069572449, 0.770439863204956, 0.7749306559562683, 0.7695152759552002, 0.7687227725982666, 0.778232753276825, 0.7744023203849792, 0.7771760821342468, 0.7845727205276489, 0.7777044177055359, 0.7862898111343384, 0.7880068421363831, 0.7886672616004944], "val_loss": [1.7545735495431083, 1.112940890448434, 0.8452832017626081, 0.7698444298335484, 0.6873955386025565, 0.6749595403671265, 0.6242469719478062, 0.6159215484346662, 0.6046913521630424, 0.5713213511875698, 0.5731709344046456, 0.53851432459695, 0.5462527445384434, 0.5335209029061454, 0.5299885613577706, 0.5229764154979161, 0.5205698013305664, 0.5020026649747577, 0.49111134665352957, 0.49615868500300814, 0.5202365091868809, 0.49528980255126953, 0.4913190943854196, 0.47946946961539133, 0.49492909227098736, 0.4905773401260376, 0.47355055809020996, 0.5007413285119193, 0.46381780079432894, 0.4600592000143869, 0.47462948731013704, 0.46948746272495817, 0.4859586613518851, 0.46005174091884066, 0.4699568748474121], "val_accuracy": [0.5413333177566528, 0.5886666774749756, 0.6553333401679993, 0.6700000166893005, 0.7166666388511658, 0.7143333554267883, 0.7160000205039978, 0.7233333587646484, 0.7149999737739563, 0.7433333396911621, 0.737333357334137, 0.7553333044052124, 0.7526666522026062, 0.7563333511352539, 0.7599999904632568, 0.7636666893959045, 0.7613333463668823, 0.7673333287239075, 0.7816666960716248, 0.7806666493415833, 0.7573333382606506, 0.7823333144187927, 0.7856666445732117, 0.7889999747276306, 0.7710000276565552, 0.7743333578109741, 0.7943333387374878, 0.765666663646698, 0.793666660785675, 0.8023333549499512, 0.7853333353996277, 0.7919999957084656, 0.7773333191871643, 0.8009999990463257, 0.7940000295639038]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 0, 7, 5, 0, 2, 2, 2, 1, 8], [2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [78, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7822856903076172, "mapping_values": [1, 10, 10, 6, 4, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0439608639981754, 1.845482380068014, 1.5734925139392797, 1.1861526509160143, 0.914789319983122, 0.9055830600034638, 0.7404985448325614, 0.7116261031791093, 0.6692865761893694, 0.66261001129066, 0.6247975851298796, 0.5999029952269567, 0.5715120799427161, 0.5603515171119802], "accuracy": [0.3061682879924774, 0.4282129108905792, 0.4625544846057892, 0.570202112197876, 0.6581693291664124, 0.6664905548095703, 0.7156254053115845, 0.7296261787414551, 0.748249888420105, 0.7508915662765503, 0.7627789974212646, 0.7712323069572449, 0.7814027070999146, 0.7909126877784729], "val_loss": [1.5794413770948137, 1.085026706968035, 0.9393777506692069, 0.7086609261376517, 0.7052058151790074, 0.586312072617667, 0.6033121347427368, 0.5397837162017822, 0.5097031933920724, 0.5206561429159982, 0.5039058242525373, 0.5343934297561646, 0.5530252456665039, 0.5242703812462943], "val_accuracy": [0.4026666581630707, 0.5733333230018616, 0.5736666917800903, 0.6776666641235352, 0.687333345413208, 0.7356666922569275, 0.7213333249092102, 0.7553333044052124, 0.778333306312561, 0.7646666765213013, 0.7713333368301392, 0.762666642665863, 0.7393333315849304, 0.7543333172798157]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 8, 6, 0, 4, 5, 2, 7, 3, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2], [77, 80, 61], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 4, 6, 6, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 1, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.436857134103775, "mapping_values": [1, 29, 29, 17, 12, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(alpha), alpha))), tf.math.add(alpha, alpha)), alpha), tf.math.negative(grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.757219684909694, 2.3031677212839226, 2.2791632114227, 2.27962123788721, 2.0810555735315863, 2.1695509717732437, 2.3030611795756197, 1.8746282826671667, 2.23291206473231, 2.2075784372348104, 2.3063790298109716, 2.148592255764539, 2.2046823589761795, 2.307295593902372, 2.3066568847943953, 2.3052756143614537, 2.305164352273897], "accuracy": [0.2133139669895172, 0.10487385839223862, 0.19152027368545532, 0.15202747285366058, 0.294148713350296, 0.22123894095420837, 0.1002509593963623, 0.36626601219177246, 0.20420023798942566, 0.17250032722949982, 0.10553427785634995, 0.2413155436515808, 0.2188614457845688, 0.09628847241401672, 0.09893012791872025, 0.09945846349000931, 0.09576013684272766], "val_loss": [1.9750565801348006, 1.9685791560581751, 1.9738856724330358, 1.8074360574994768, 1.9174130984715052, 1.9752257210867745, 1.9320945739746094, 1.6507761478424072, 1.7281176022120885, 1.9770200593130929, 1.969893114907401, 1.5213017804282052, 1.9757130486624581, 1.9745919363839286, 1.9742442539760046, 1.973766531263079, 1.973825114113944], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10066666454076767, 0.32100000977516174, 0.2903333306312561, 0.09666666388511658, 0.26899999380111694, 0.32766667008399963, 0.3160000145435333, 0.09666666388511658, 0.10899999737739563, 0.4533333480358124, 0.09666666388511658, 0.09799999743700027, 0.09799999743700027, 0.10233332961797714, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [78, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 2, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 4, 0, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [78, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(beta, grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3016160203638707, 2.302314684674756, 2.3027462788923083, 2.304376373422018, 2.3119290634594134, 2.3447020826338463], "accuracy": [0.10460969805717468, 0.10460969805717468, 0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736719812665666, 1.9737086296081543, 1.9742157799857003, 1.9770964213779993, 1.990731648036412, 2.0523736817496165], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 2, 9, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 9, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3012041619204733, 2.3025793486015593, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09945846349000931, 0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644460950579, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [3, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 6, 0, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 41, 37, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 0, 38, 38, 24, 14, 4, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad))))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))))), grad)), tf.math.negative(tf.math.pow(alpha, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), grad))))), tf.math.negative(tf.math.add(beta, grad)))))))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3020561566489515, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [2, 8, 9, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 0, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 1, 6, 0, 4, 6, 3, 1, 2, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [81, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 3, 1, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(grad, tf.math.divide_no_nan(grad, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3016736981040844, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 6, 6, 2, 4, 5, 1, 0, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 4, 3, 1, 3, 0, 1, 1, 1, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 0, 23, 23, 12, 11, 2, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, alpha), alpha))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [2, 6, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [39, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [95555505.39315549, 1803871825.6589618, 8397775633.14331, 23600387296.11412, 50392618744.79778, 92703105967.5245], "accuracy": [0.1002509593963623, 0.09734513610601425, 0.10381719470024109, 0.1018359512090683, 0.10249637067317963, 0.10196803510189056], "val_loss": [359688566.85714287, 2875481526.857143, 9702472265.142857, 22995771977.142857, 44910346240.0, 77601350802.28572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 8, 6, 5, 4, 9, 1, 2, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2], [89, 80, 61], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [5, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.06457142531871796, "mapping_values": [1, 20, 20, 13, 7, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), grad))), alpha)))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.301552899871693, 2.3004909588628992, 2.302023547090292, 2.299094684025426, 2.299431868453524, 2.300861236016512, 2.3003047819796367, 2.2999504543393123, 2.29988737595064, 2.299689699708825, 2.2996775455888017, 2.300031393557775, 2.299602917707859, 2.2989422814909966, 2.3001223637710995], "accuracy": [0.09074098616838455, 0.09021265059709549, 0.08994849026203156, 0.09959053993225098, 0.10421344637870789, 0.09417514503002167, 0.09998679161071777, 0.10276053100824356, 0.09747721254825592, 0.1022322028875351, 0.10342095047235489, 0.09377889335155487, 0.10328886657953262, 0.09826971590518951, 0.10077928751707077], "val_loss": [1.9704604830060686, 1.9699769701276506, 1.9696076938084193, 1.9694485664367676, 1.9695801053728377, 1.9694715908595495, 1.969329493386405, 1.969224521092006, 1.9691735676356725, 1.9691808564322335, 1.9692527907235282, 1.969395433153425, 1.969632625579834, 1.9699982234409876, 1.9702083723885673], "val_accuracy": [0.039000000804662704, 0.04766666516661644, 0.054999999701976776, 0.057999998331069946, 0.059333331882953644, 0.0676666647195816, 0.07333333045244217, 0.07633333653211594, 0.08133333176374435, 0.08433333039283752, 0.08433333039283752, 0.08166666328907013, 0.0833333358168602, 0.07966666668653488, 0.07900000363588333]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 2, 9, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [89, 14, 61], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [87, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [72, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3019129086510697, 2.301596594870823, 2.303880087435915, 2.3012954545074593, 2.3014107060674913, 2.303720173377875], "accuracy": [0.09074098616838455, 0.0878351628780365, 0.08492933213710785, 0.09615638852119446, 0.09760929644107819, 0.08849557489156723], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 6, 6, 5, 4, 5, 1, 7, 8, 2, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 10, 10, 5, 5, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3019129086510697, 2.301596594870823, 2.303880087435915, 2.3012954545074593, 2.3014107060674913, 2.303720173377875], "accuracy": [0.09074098616838455, 0.0878351628780365, 0.08492933213710785, 0.09615638852119446, 0.09760929644107819, 0.08849557489156723], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]