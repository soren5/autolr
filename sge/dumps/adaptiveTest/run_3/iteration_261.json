[{"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 1, 6, 4, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8188571333885193, "mapping_values": [1, 2, 2, 1, 1, 1, 21, 21, 12, 9, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9938739622116342, 1.372441161263022, 0.9975253420656446, 0.8892065593358973, 0.811748354639029, 0.7922867341772787, 0.712371751790065, 0.6852006641172415, 0.6878704732797402, 0.6277742315009442, 0.6357099902140166, 0.6197864170701765, 0.602640856093325, 0.6183838148190125, 0.5759264809533259, 0.5523683133221038, 0.5387755882281826, 0.5534852427057602, 0.5152650995497627, 0.5168709741599524, 0.516969136361354, 0.4911266023755908, 0.5108033561782122, 0.49021369816368565, 0.4753676908379296, 0.46913943391796653, 0.46137107705411784, 0.4676213500215046, 0.43974251382071594, 0.4331031647797321, 0.42411229601704353, 0.4409468416737181, 0.4305336706319647, 0.42831193313559585, 0.40736003333252213, 0.42295115551991375, 0.4042062173390732], "accuracy": [0.32267865538597107, 0.5234447121620178, 0.6264694333076477, 0.6738871932029724, 0.6910579800605774, 0.700700044631958, 0.7280412316322327, 0.737022876739502, 0.7343811988830566, 0.7572315335273743, 0.7580240368843079, 0.759609043598175, 0.7656848430633545, 0.763439416885376, 0.7827235460281372, 0.7907806038856506, 0.7955356240272522, 0.785101056098938, 0.8035926818847656, 0.8012151718139648, 0.7969884872436523, 0.8158763647079468, 0.8047813773155212, 0.8181217908859253, 0.8224804997444153, 0.8241975903511047, 0.8290846943855286, 0.8253863453865051, 0.8352925777435303, 0.837537944316864, 0.8429533839225769, 0.8356888294219971, 0.834632158279419, 0.8376700282096863, 0.8481045961380005, 0.839519202709198, 0.8536521196365356], "val_loss": [1.3783728395189558, 0.8927357537405831, 0.695643390927996, 0.7033829689025879, 0.6930079460144043, 0.56154351575034, 0.555831926209586, 0.5653207642691476, 0.5194645609174456, 0.5368911368506295, 0.48900938034057617, 0.5065121991293771, 0.5222202028547015, 0.48159784930092947, 0.4931964874267578, 0.46510958671569824, 0.5298990522112165, 0.44401400429861887, 0.44489945684160503, 0.44510538237435476, 0.43356357301984516, 0.4148373178073338, 0.43283155986240934, 0.4223743677139282, 0.4813784531184605, 0.3999753509249006, 0.4009707655225481, 0.3990716593606131, 0.39134260586329866, 0.38439955030168804, 0.37969612223761423, 0.37395565850394114, 0.4008950335638864, 0.389443576335907, 0.3817250558308193, 0.372059098311833, 0.38589917761938913], "val_accuracy": [0.5149999856948853, 0.5943333506584167, 0.6949999928474426, 0.6673333048820496, 0.6850000023841858, 0.7513333559036255, 0.7553333044052124, 0.7329999804496765, 0.762666642665863, 0.7593333125114441, 0.7789999842643738, 0.7743333578109741, 0.750333309173584, 0.7799999713897705, 0.7746666669845581, 0.7963333129882812, 0.7433333396911621, 0.8080000281333923, 0.8096666932106018, 0.8003333210945129, 0.8029999732971191, 0.8296666741371155, 0.8096666932106018, 0.8180000185966492, 0.7763333320617676, 0.8299999833106995, 0.8289999961853027, 0.828000009059906, 0.8320000171661377, 0.8389999866485596, 0.8446666598320007, 0.8473333120346069, 0.8303333520889282, 0.8376666903495789, 0.8349999785423279, 0.8426666855812073, 0.824999988079071]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [4, 1, 1, 3, 6, 2, 4, 0, 0, 3, 5, 6, 1, 6, 8, 8, 4, 0, 5, 5, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 5, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8071428537368774, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9939526852646903, 1.3705473588426524, 0.9910353537658265, 0.8994719439556791, 0.7952101987586943, 0.7768390629395769, 0.7190889853134351, 0.6882131202125499, 0.6931197514717904, 0.6329800367922185, 0.6298681731867107, 0.6192957921082302, 0.5988727563628273, 0.612583058314348, 0.5707914384443369, 0.5411679388871834, 0.5620985953500164, 0.5380028633157481, 0.5133223195967814, 0.520937125987664, 0.5127866282801288, 0.4919930853509569, 0.5011326331606378, 0.48733034793333274, 0.4681304873272003, 0.466013578801123, 0.46264107236615293, 0.45915508826867607, 0.43851843324744894, 0.4274165361564645, 0.4225301655166106, 0.4366663409624086, 0.41621151023285186, 0.42959854760190136, 0.4106866539729159], "accuracy": [0.32281073927879333, 0.5267468094825745, 0.6301677227020264, 0.6577730774879456, 0.7043983340263367, 0.7041342258453369, 0.7252674698829651, 0.7367587089538574, 0.7368907928466797, 0.7561748623847961, 0.7588165402412415, 0.7584202885627747, 0.7700436115264893, 0.7651565074920654, 0.785629391670227, 0.7968564033508301, 0.7845727205276489, 0.7944789528846741, 0.8035926818847656, 0.805177628993988, 0.8020076751708984, 0.8157442808151245, 0.8108572363853455, 0.8171972036361694, 0.8269713521003723, 0.824329674243927, 0.8309338092803955, 0.8277638554573059, 0.8329150676727295, 0.8388587832450867, 0.8445383906364441, 0.8321225643157959, 0.8428213000297546, 0.8372738361358643, 0.845859169960022], "val_loss": [1.3789286272866386, 0.866431542805263, 0.7069217307226998, 0.6357496976852417, 0.766840032168797, 0.5899866308484759, 0.5459454740796771, 0.5792712143489293, 0.5340675626482282, 0.5299706629344395, 0.49046291623796734, 0.5063463279179165, 0.5131065845489502, 0.47272653239113943, 0.4869149923324585, 0.45584421498434885, 0.48498260974884033, 0.4435785157339914, 0.44224696499960764, 0.4486089604241507, 0.4428431306566511, 0.4102715935025896, 0.43448025839669363, 0.4218108654022217, 0.45534946237291607, 0.402973541191646, 0.40131776673453196, 0.3982415625027248, 0.3877599835395813, 0.38092208760125296, 0.39303349597113474, 0.38042125531605314, 0.40876046248844694, 0.4175099049295698, 0.37466514110565186], "val_accuracy": [0.515999972820282, 0.5986666679382324, 0.715666651725769, 0.7053333520889282, 0.6579999923706055, 0.7446666955947876, 0.7563333511352539, 0.7350000143051147, 0.7513333559036255, 0.7603333592414856, 0.7770000100135803, 0.7743333578109741, 0.7559999823570251, 0.7856666445732117, 0.7789999842643738, 0.8009999990463257, 0.7756666541099548, 0.8076666593551636, 0.809333324432373, 0.8006666898727417, 0.7946666479110718, 0.82833331823349, 0.8076666593551636, 0.8180000185966492, 0.7950000166893005, 0.8220000267028809, 0.8303333520889282, 0.8263333439826965, 0.8323333263397217, 0.8416666388511658, 0.8263333439826965, 0.8326666951179504, 0.8289999961853027, 0.8196666836738586, 0.8399999737739563]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 1, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.798285722732544, "mapping_values": [1, 2, 2, 1, 1, 1, 57, 57, 33, 24, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad))), tf.math.add(beta, beta))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(alpha))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(alpha, tf.math.negative(beta))))))))), grad)))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.pow(grad, alpha), tf.math.add(beta, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, grad))))))), alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.068610733652222, 1.7945109742617704, 1.354220774919759, 0.9699967235716468, 0.8909943925312497, 0.8109174422647156, 0.7725981008249141, 0.7418552134267217, 0.7050620970268133, 0.739086119246253, 0.6663484484402101, 0.6584206524620817, 0.6362205342515238, 0.6239592191675761, 0.5903710847549025, 0.5932354419348876, 0.5678525982421418, 0.5405032472398854, 0.537801494207585, 0.5491595397756368, 0.560099307698124, 0.5376230635112067, 0.531819303053686], "accuracy": [0.3267732262611389, 0.4245145916938782, 0.5275393128395081, 0.6436402201652527, 0.6699247360229492, 0.6960771083831787, 0.7096816897392273, 0.7199841737747192, 0.7320036888122559, 0.7292299270629883, 0.7454761862754822, 0.7540615797042847, 0.7584202885627747, 0.7626469135284424, 0.770439863204956, 0.7788931727409363, 0.7886672616004944, 0.7969884872436523, 0.802271842956543, 0.7927618622779846, 0.7906485199928284, 0.7973847389221191, 0.8001585006713867], "val_loss": [1.8085390499659948, 1.2298094204493932, 0.7527775253568377, 0.6954281500407627, 0.6558692625590733, 0.6830982991627285, 0.6187393495014736, 0.60952171257564, 0.6198255164282662, 0.5415484394345965, 0.5355534894125802, 0.5044729539326259, 0.48692197459084646, 0.4845352683748518, 0.4993519272123064, 0.48658253465379986, 0.45650691645486013, 0.4400735242026193, 0.5329562766211373, 0.49589087281908306, 0.459510122026716, 0.44187492983681814, 0.4833094222205026], "val_accuracy": [0.3610000014305115, 0.4860000014305115, 0.6926666498184204, 0.6840000152587891, 0.7016666531562805, 0.6840000152587891, 0.6933333277702332, 0.706333339214325, 0.7053333520889282, 0.7396666407585144, 0.7549999952316284, 0.7730000019073486, 0.7866666913032532, 0.7756666541099548, 0.7613333463668823, 0.781333327293396, 0.8043333292007446, 0.8090000152587891, 0.7463333606719971, 0.7796666622161865, 0.7993333339691162, 0.8073333501815796, 0.7689999938011169]}}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 3, 1, 4, 4, 4, 3, 3, 9, 1, 6, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7971428632736206, "mapping_values": [1, 1, 1, 0, 1, 1, 19, 19, 10, 9, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.subtract(alpha, grad)), grad))))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.068070286851691, 1.791520962121858, 1.362509340783939, 0.959090534178903, 0.8819004070835973, 0.8176987800363851, 0.7820437286098825, 0.7500566960782454, 0.7108479208556369, 0.7017838253699054, 0.6636806199689504, 0.6672572017959899, 0.612989181359651, 0.6563955905210419, 0.587352478107394, 0.604130460955857, 0.571983261453855, 0.5653426583338218, 0.5409371070637601, 0.5548923965600094, 0.5508916778587126, 0.5322255005044173, 0.5298859585765929], "accuracy": [0.32664114236831665, 0.42491084337234497, 0.5208030939102173, 0.6468101739883423, 0.6732267737388611, 0.696209192276001, 0.7021529674530029, 0.7197200059890747, 0.7252674698829651, 0.7384757399559021, 0.7461365461349487, 0.7504953145980835, 0.7709681391716003, 0.7508915662765503, 0.7840443849563599, 0.772288978099823, 0.7841764688491821, 0.7857614755630493, 0.806630551815033, 0.7897239327430725, 0.7942147850990295, 0.7989697456359863, 0.8001585006713867], "val_loss": [1.8070994785853796, 1.2284056799752372, 0.7540344340460641, 0.6779086760112217, 0.6491986853735787, 0.6789075647081647, 0.6322775908878872, 0.5504178830555507, 0.6042354106903076, 0.5426947559629168, 0.5351707083838326, 0.4962968485695975, 0.5301163196563721, 0.473695056779044, 0.49308981214250835, 0.4872894287109375, 0.4602398020880563, 0.4454975128173828, 0.483053309576852, 0.4841699259621756, 0.4579177754265921, 0.4481612614222935, 0.48399221897125244], "val_accuracy": [0.3616666793823242, 0.4856666624546051, 0.6840000152587891, 0.684333324432373, 0.706333339214325, 0.6696666479110718, 0.6903333067893982, 0.746666669845581, 0.7076666951179504, 0.7393333315849304, 0.7580000162124634, 0.7786666750907898, 0.7480000257492065, 0.7923333048820496, 0.7703333497047424, 0.7823333144187927, 0.7973333597183228, 0.8083333373069763, 0.7876666784286499, 0.7893333435058594, 0.8023333549499512, 0.7993333339691162, 0.7710000276565552]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 3, 0, 2, 4, 3, 0, 4, 5, 2, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7620000243186951, "mapping_values": [1, 2, 2, 2, 0, 1, 32, 32, 18, 14, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, beta)))))), alpha), grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(beta, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha))), grad)), tf.math.add(beta, grad)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9795643364701367, 1.449960043291453, 1.0191234655746175, 0.8952350757534887, 0.8501365729578734, 0.7674855400841738, 0.7715684507800414, 0.6964594201483605, 0.6899344785543181, 0.6697149372072488, 0.6573279405691999, 0.6587544970540102], "accuracy": [0.3473781645298004, 0.49227315187454224, 0.6211860775947571, 0.6635847091674805, 0.68101966381073, 0.7103421092033386, 0.709021270275116, 0.735041618347168, 0.7298903465270996, 0.7416457533836365, 0.7464007139205933, 0.7483819723129272], "val_loss": [1.544696262904576, 0.8742277281624931, 0.6874021121433803, 0.6730029242379325, 0.5881864854267665, 0.6069344622748238, 0.5513095344815936, 0.5457193340573993, 0.5818098272596087, 0.5220103434153965, 0.5283291169575283, 0.5196296657834735], "val_accuracy": [0.30433332920074463, 0.5976666808128357, 0.703000009059906, 0.687333345413208, 0.7296666502952576, 0.7043333053588867, 0.7663333415985107, 0.7516666650772095, 0.7226666808128357, 0.765333354473114, 0.750333309173584, 0.7583333253860474]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [56, 9, 76, 58]], "fitness": -0.4562857151031494, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 3, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.349290741118206, 2.1931768863775223, 2.185960559844341, 2.5762407774025218, 2.303429461205719, 2.3027532693653563, 2.302309555856858, 2.2830022160151318], "accuracy": [0.21582353115081787, 0.21978603303432465, 0.22414475679397583, 0.13472460210323334, 0.09879804402589798, 0.1014397069811821, 0.10566636174917221, 0.16919825971126556], "val_loss": [1.7006524290357317, 1.973123005458287, 1.8235203198024206, 1.9742443902151925, 1.973680087498256, 1.9734910556248255, 1.9717217172895158, 1.723248073032924], "val_accuracy": [0.21199999749660492, 0.1693333387374878, 0.41866666078567505, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.1393333375453949, 0.2930000126361847]}}, {"genotype": [[0], [1, 1, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [96, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [7, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [84, 9, 76, 58]], "fitness": -0.27799999713897705, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.616192788905188, 2.2078844001973073, 2.304147866644234, 2.23820907766352, 2.3047661771863726, 2.303381621294396], "accuracy": [0.1978602558374405, 0.20737022161483765, 0.12891295552253723, 0.14872540533542633, 0.09668471664190292, 0.09787346422672272], "val_loss": [1.7493463243756975, 2.002512659345354, 1.7911876950945174, 1.9762144088745117, 1.974381651197161, 1.9739858763558524], "val_accuracy": [0.27399998903274536, 0.17533333599567413, 0.18400000035762787, 0.09833333641290665, 0.09866666793823242, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [73, 80, 61], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 3, 0, 2, 4, 3, 0, 4, 5, 6, 1, 6, 8, 6, 4, 0, 5, 0, 6, 2, 5, 0, 1, 9, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 1, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 3, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [74, 9, 76, 58]], "fitness": -0.2540000081062317, "mapping_values": [1, 2, 2, 1, 1, 0, 59, 59, 36, 23, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.square(beta), beta))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.sqrt(alpha)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(grad))))))), tf.math.multiply(grad, beta)), tf.math.add(beta, grad))))))))))), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.6074245908807976, 2.279607137212223, 2.2596423864962953, 2.303757704795391, 2.302750332795429, 2.2847144705760183], "accuracy": [0.19640734791755676, 0.14449875056743622, 0.1578391194343567, 0.09734513610601425, 0.09985470771789551, 0.13736626505851746], "val_loss": [1.7057801655360632, 1.9702114377702986, 1.9746949332101005, 1.9732287270682198, 1.9690004076276506, 1.9751139368329729], "val_accuracy": [0.25833332538604736, 0.10233332961797714, 0.10133333504199982, 0.10133333504199982, 0.12399999797344208, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [5, 0, 5, 4, 0, 2, 3, 9, 0, 2, 5, 6, 1, 6, 2, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 1, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 4, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 17, 17, 12, 5, 1, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad))), tf.math.add(beta, beta)))))))), tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.pow(sigma, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [73, 80, 61], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 0, 1, 4, 5, 2, 3, 3, 6, 2, 5, 4, 1, 2, 8, 6, 1, 0, 9, 5, 6, 2, 0, 0, 1, 1, 3, 4, 7, 3, 5, 2, 1, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 3, 2, 1, 3, 3, 1, 0, 1, 3, 5, 1, 3, 5, 1, 0, 3, 3, 2, 2, 3, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [33, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 29, 29, 16, 13, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))), grad)))), beta)), alpha))), tf.math.pow(grad, tf.math.add(beta, grad)))), tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(alpha)))))))), tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303048375984618, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 3, 1, 4, 4, 9, 1, 2, 9, 6, 2, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 3, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 27, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.pow(grad, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0812310129404068, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 0, 1, 4, 0, 2, 4, 1, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 3, 3, 3, 2, 0, 1, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 33, 33, 19, 14, 2, 1, 1, 1, 0, 1, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, beta))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.pow(beta, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), alpha))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.303048375984618, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 6, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [2, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 15, 15, 8, 7, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [2.3011801661973963, 2.302353359751965, 2.3025804143524473, 2.302584914514937, 2.3025838066290523, 2.3025832851691064, 2.3025848680026875], "accuracy": [0.10315678268671036, 0.1022322028875351, 0.09721305221319199, 0.09998679161071777, 0.09893012791872025, 0.09972262382507324, 0.09906221181154251], "val_loss": [1.9733407156808036, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644529070173, 1.973644460950579], "val_accuracy": [0.09933333098888397, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 6, 1, 3, 8, 2, 4, 3, 0, 4, 5, 5, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 8, 1, 3, 4, 4, 3, 9, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 1, 1, 3, 1, 2, 3, 3, 5, 1, 2, 5, 0, 0, 3, 3, 2, 4, 5, 3, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.09942857176065445, "mapping_values": [1, 2, 2, 1, 1, 0, 56, 56, 35, 21, 3, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))), grad))))), beta)), beta)))), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.square(grad)))))), alpha)))), beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.square(tf.math.add(beta, tf.math.negative(grad))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.multiply(alpha, beta)), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), grad)))), beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.302919456845718, 2.3050992082311903, 2.306948359836724, 2.309005470134799, 2.3111587255039803, 2.315896824098707, 2.323035064421908, 2.32749886415764, 2.331341659073281, 2.348876028327957, 2.3836326390020663, 2414084823134.8667, 3.309616687574627, 7.398090327656768, 13.112750957450217, 18.88214241852141], "accuracy": [0.09325055778026581, 0.08928807079792023, 0.08387266844511032, 0.08492933213710785, 0.08083476126194, 0.07357019931077957, 0.07066437602043152, 0.07674019038677216, 0.08228767663240433, 0.07515519857406616, 0.0804385170340538, 0.09840179979801178, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9722490991864885, 1.9736377171107702, 1.9753704752240862, 1.9775193078177316, 1.9797765868050712, 1.982626029423305, 1.9860335758754186, 1.9903439113071986, 1.9968679973057337, 2.01211793082101, 2.085319314684187, 2.3381432805742537, 4.391288757324219, 9.223727090018135, 14.173343658447266, 19.10883331298828], "val_accuracy": [0.0273333340883255, 0.02266666665673256, 0.022333333268761635, 0.02133333310484886, 0.029333332553505898, 0.03700000047683716, 0.05999999865889549, 0.07500000298023224, 0.08933333307504654, 0.09799999743700027, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 1, 4, 0, 2, 3, 6, 0, 2, 5, 6, 1, 6, 8, 6, 5, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.09942857176065445, "mapping_values": [1, 2, 2, 1, 1, 1, 29, 29, 16, 13, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), grad))), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.sqrt(grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))))))))), beta)), grad), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.302919425354689, 2.3050994106870144, 2.3069478744340057, 2.3089998966005925, 2.311156530169889, 2.315895164584471, 2.323028924049183, 2.3274934343799796, 2.331343867539131, 2.3488776129565268, 2.3835301817431818, 1065120676176.7761, 3.2903882437819236, 7.343717950194377, 13.056559545174094, 18.825950253735666], "accuracy": [0.09325055778026581, 0.08928807079792023, 0.08400475233793259, 0.08506141602993011, 0.08083476126194, 0.07357019931077957, 0.07079645991325378, 0.07687227427959442, 0.0820235088467598, 0.07515519857406616, 0.08057060092687607, 0.09840179979801178, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9722493035452706, 1.973637580871582, 1.9753660474504744, 1.9775171279907227, 1.9797747475760323, 1.9826195580618722, 1.9860309873308455, 1.9903436388288225, 1.9968703814915247, 2.0120937483651296, 2.0848290579659596, 2.3333209582737515, 4.349148069109235, 9.17547607421875, 14.125083923339844, 19.060570853097097], "val_accuracy": [0.0273333340883255, 0.02266666665673256, 0.02199999988079071, 0.02133333310484886, 0.029333332553505898, 0.03700000047683716, 0.05999999865889549, 0.07466666400432587, 0.08933333307504654, 0.09799999743700027, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [73, 80, 61], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 6, 1, 3, 0, 2, 0, 4, 0, 4, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 8, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 1, 3, 1, 1, 3, 3, 1, 0, 3, 3, 5, 1, 3, 5, 1, 0, 3, 3, 2, 3, 3, 3, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 0, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.06914285570383072, "mapping_values": [1, 1, 1, 0, 1, 0, 59, 59, 35, 24, 3, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)))), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.square(grad))))))))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.negative(grad))))))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad)), tf.math.sqrt(beta))), grad), tf.math.add(beta, grad))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.negative(sigma)), sigma)", "other_info": {"loss": [2.301898750473464, 2.3017747853772517, 2.3008135020725007, 2.3005600859224207, 2.2996200685724055, 2.299905815113175, 2.30080970375057, 2.300417195914554, 2.2988388253051877, 2.2992427192265255, 2.2995313304746943, 2.2992813426269563, 2.2998674875079774, 2.2997210606167013, 2.2996361358621416], "accuracy": [0.09549596905708313, 0.09774138033390045, 0.09826971590518951, 0.09760929644107819, 0.09576013684272766, 0.09800554811954498, 0.08942015469074249, 0.09734513610601425, 0.10077928751707077, 0.10527011007070541, 0.09932637959718704, 0.10593052208423615, 0.10447761416435242, 0.10196803510189056, 0.1026284471154213], "val_loss": [1.9704084396362305, 1.9699163436889648, 1.9695878710065569, 1.9694625990731376, 1.9695211819240026, 1.9695320129394531, 1.9693234307425362, 1.9691108294895716, 1.9689995220729284, 1.9690354210989816, 1.9690820149012975, 1.9692487035478865, 1.969437871660505, 1.9697733606610979, 1.970109326498849], "val_accuracy": [0.04233333468437195, 0.05233333259820938, 0.059333331882953644, 0.06233333423733711, 0.06533333659172058, 0.07133333384990692, 0.07733333110809326, 0.08266666531562805, 0.08633333444595337, 0.08833333104848862, 0.08633333444595337, 0.08566666394472122, 0.0860000029206276, 0.08299999684095383, 0.07699999958276749]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 8, 4, 4, 6, 4, 5, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 1, 29, 29, 18, 11, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta))))))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.pow(grad, tf.math.add(beta, tf.math.pow(beta, tf.math.negative(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))))), alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302362084026586, 2.3030557898860393, 2.302804596089353, 2.302731874549331, 2.3018490891210344, 2.302440023787537], "accuracy": [0.09377889335155487, 0.09232597798109055, 0.09206181764602661, 0.09430722147226334, 0.09021265059709549, 0.09021265059709549], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [0, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [80, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 3, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302362084026586, 2.3030557898860393, 2.302804596089353, 2.302731874549331, 2.3018490891210344, 2.302440023787537], "accuracy": [0.09377889335155487, 0.09232597798109055, 0.09206181764602661, 0.09430722147226334, 0.09021265059709549, 0.09021265059709549], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [47, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 8, 4, 0, 2, 3, 8, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 2, 1, 3, 1, 3, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 1, 16, 16, 10, 6, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))))), beta)))), tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [2.302362084026586, 2.3030557898860393, 2.302804596089353, 2.302731874549331, 2.3018490891210344, 2.302440023787537], "accuracy": [0.09377889335155487, 0.09232597798109055, 0.09206181764602661, 0.09430722147226334, 0.09021265059709549, 0.09021265059709549], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]