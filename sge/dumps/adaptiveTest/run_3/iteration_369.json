[{"genotype": [[0], [0, 0, 1, 0], [0, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8140000104904175, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 9, 3, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.041877084121004, 1.7646647394293917, 1.2163839576628859, 0.9488353044633081, 0.8687687046287585, 0.8107335594084285, 0.7096768785713371, 0.6564976980563058, 0.6711949964225284, 0.6024026878442841, 0.6064836047643904, 0.5794867914287626, 0.5703035044852753, 0.5433086660386643, 0.5380684525235108, 0.5141044955495452, 0.5102349435176202, 0.4933260511161629, 0.48754557958132305, 0.4687227127046916, 0.46952023963256834, 0.472981297966669, 0.4487875316396854], "accuracy": [0.30207371711730957, 0.4029850661754608, 0.5585787892341614, 0.6346585750579834, 0.6757363677024841, 0.6975300312042236, 0.7298903465270996, 0.7516840696334839, 0.7354378700256348, 0.7689869403839111, 0.7729493975639343, 0.7828556299209595, 0.7880068421363831, 0.7959318161010742, 0.7954035401344299, 0.802800178527832, 0.8029322624206543, 0.8074230551719666, 0.8190463781356812, 0.8193105459213257, 0.8211596608161926, 0.8211596608161926, 0.8323867321014404], "val_loss": [1.8547005653381348, 1.274160623550415, 0.7721652814320156, 0.719145519392831, 0.6890078612736293, 0.5576565265655518, 0.5388836860656738, 0.5611425808497837, 0.4893364565713065, 0.5295001268386841, 0.4865239177431379, 0.5001323563711983, 0.44902919019971577, 0.4563559293746948, 0.41644065720694406, 0.4388266120638166, 0.41333454847335815, 0.4231372560773577, 0.42305008854184833, 0.4303217955998012, 0.46012178489140104, 0.4440621818814959, 0.4122527412005833], "val_accuracy": [0.24933333694934845, 0.4516666531562805, 0.6513333320617676, 0.6480000019073486, 0.6733333468437195, 0.7426666617393494, 0.7490000128746033, 0.7286666631698608, 0.7753333449363708, 0.753333330154419, 0.7979999780654907, 0.7726666927337646, 0.8096666932106018, 0.7913333177566528, 0.8206666707992554, 0.8166666626930237, 0.8183333277702332, 0.8296666741371155, 0.8213333487510681, 0.8113333582878113, 0.7883333563804626, 0.8029999732971191, 0.8163333535194397]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [13, 16, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 7, 3, 9, 8, 4, 1, 9, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 0, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [99, 0, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8119999766349792, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.041617464994033, 1.7528849451722344, 1.2010807562671113, 1.1298807740699597, 0.8278246540214564, 0.8191272030653278, 0.6993473733751576, 0.680953459441465, 0.666293131653281, 0.6302966531619514, 0.602779651472298, 0.6073799067878168, 0.5635844559370959, 0.5307129495541623, 0.5227220563872175, 0.5233644936787312, 0.5163320798632051, 0.4909535134237015, 0.49308273668192193, 0.46776374615163], "accuracy": [0.30207371711730957, 0.4015321731567383, 0.5626733303070068, 0.5923920273780823, 0.6864351034164429, 0.6929071545600891, 0.7338528633117676, 0.7430986762046814, 0.7421740889549255, 0.7574957013130188, 0.7707040309906006, 0.7697794437408447, 0.7823272943496704, 0.800290584564209, 0.8045172095298767, 0.8014793395996094, 0.7987055778503418, 0.8137630224227905, 0.816008448600769, 0.8202351331710815], "val_loss": [1.8528284345354353, 1.306595836366926, 0.7578021798815046, 0.7868530239377703, 0.7094085386821202, 0.5836187771388462, 0.6319934810910907, 0.5705538817814418, 0.5036568301064628, 0.5133273771830967, 0.46617627143859863, 0.47488960197993685, 0.44470391954694477, 0.4315329279218401, 0.4164912189756121, 0.47276621205466135, 0.41365269252232145, 0.44136091641017366, 0.4089206371988569, 0.4412795220102583], "val_accuracy": [0.2473333328962326, 0.4866666793823242, 0.6423333287239075, 0.6449999809265137, 0.6859999895095825, 0.7246666550636292, 0.7020000219345093, 0.7239999771118164, 0.7726666927337646, 0.762666642665863, 0.8056666851043701, 0.7913333177566528, 0.8040000200271606, 0.812333345413208, 0.831333339214325, 0.7753333449363708, 0.8243333101272583, 0.8096666932106018, 0.8273333311080933, 0.8053333163261414]}}, {"genotype": [[0], [0, 0, 1, 0], [0, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 6, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 98, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8111428618431091, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 9, 3, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.041612836552838, 1.7559302074089498, 1.2309683173827963, 0.9822477989618127, 0.8323299142710049, 0.7796155893413729, 0.721846852068258, 0.6976779654135935, 0.6726122051418386, 0.6129378283642632, 0.5999688856936465, 0.5445775957533303, 0.5876063435242366, 0.5350843439044229, 0.5877157720860048, 0.5064109689319265, 0.5230220157661458, 0.4873118986149411, 0.4861958605612368, 0.47334742935783025, 0.4628458607466056, 0.47895193874261255], "accuracy": [0.30220577120780945, 0.4041738212108612, 0.5498613119125366, 0.6230352520942688, 0.6781138777732849, 0.7013604640960693, 0.7290979027748108, 0.7248712182044983, 0.7368907928466797, 0.7666094303131104, 0.7732135653495789, 0.7924976944923401, 0.7791573405265808, 0.8025360107421875, 0.7775723338127136, 0.8070268034934998, 0.7955356240272522, 0.8115176558494568, 0.8171972036361694, 0.8157442808151245, 0.8265751004219055, 0.8183859586715698], "val_loss": [1.8479954855782645, 1.275639295578003, 0.9368791580200195, 0.7146149533135551, 0.6886328969682965, 0.6323093175888062, 0.565815840448652, 0.5471624987465995, 0.495243958064488, 0.5180985757282802, 0.46788716316223145, 0.5268276078360421, 0.46425628662109375, 0.43493573154721943, 0.433769907270159, 0.4430773939405169, 0.4131424001285008, 0.43880079473767963, 0.4301848752158029, 0.4264958415712629, 0.47007036209106445, 0.4398525782993862], "val_accuracy": [0.2473333328962326, 0.49900001287460327, 0.5723333358764648, 0.6389999985694885, 0.668666660785675, 0.7053333520889282, 0.737666666507721, 0.7483333349227905, 0.7726666927337646, 0.753000020980835, 0.8016666769981384, 0.7726666927337646, 0.7940000295639038, 0.8056666851043701, 0.8073333501815796, 0.8069999814033508, 0.8220000267028809, 0.8059999942779541, 0.8136666417121887, 0.8090000152587891, 0.7853333353996277, 0.8069999814033508]}}, {"genotype": [[0], [0, 0, 1, 0], [1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [51, 80, 61], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 7, 3, 9, 8, 9, 1, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8080000281333923, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.041617754522552, 1.7610138735483352, 1.289818706214546, 1.0479392535052579, 0.880934755642495, 0.7679273155560316, 0.7182118614918803, 0.6902423619578433, 0.6762233566393895, 0.6140861364167364, 0.6106767169063464, 0.6091416697255876, 0.5743986469895345, 0.5430179204545269, 0.5353890056812279, 0.5200539599036843, 0.5265400373719986, 0.4945953666431682, 0.4894123595026364, 0.4714401937148291, 0.47138534158590273, 0.4778491689969583], "accuracy": [0.30220577120780945, 0.4035134017467499, 0.5519746541976929, 0.6124686598777771, 0.6625280380249023, 0.7038700580596924, 0.7326641082763672, 0.7325320243835449, 0.7339849472045898, 0.7652885913848877, 0.7718927264213562, 0.769911527633667, 0.7808743715286255, 0.7930260300636292, 0.802800178527832, 0.8016114234924316, 0.7980451583862305, 0.8099326491355896, 0.8144234418869019, 0.8206313848495483, 0.8175934553146362, 0.8191784620285034], "val_loss": [1.8488901683262415, 1.2913049970354353, 0.8536978619439262, 0.8127929823739188, 0.6407839570726667, 0.5597152709960938, 0.537030850137983, 0.5356113059180123, 0.4995004790169852, 0.5144497667040143, 0.4694183553968157, 0.4735031638826643, 0.45396307536533903, 0.4284635526793344, 0.4144613572529384, 0.46664280550820486, 0.41373975787843975, 0.4323387486594064, 0.424725455897195, 0.4257596901484898, 0.454808098929269, 0.45971953868865967], "val_accuracy": [0.24833333492279053, 0.5833333134651184, 0.5740000009536743, 0.5546666383743286, 0.7013333439826965, 0.750333309173584, 0.7523333430290222, 0.7546666860580444, 0.7753333449363708, 0.7683333158493042, 0.8009999990463257, 0.7896666526794434, 0.7986666560173035, 0.8173333406448364, 0.8273333311080933, 0.7836666703224182, 0.8293333053588867, 0.8149999976158142, 0.8180000185966492, 0.8146666884422302, 0.7940000295639038, 0.800000011920929]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [5, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.8037142753601074, "mapping_values": [1, 2, 2, 2, 0, 1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))), tf.math.add(beta, grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0421595435494586, 1.4329483336020516, 1.075251031883987, 0.9539218169272048, 0.8208049534649157, 0.7940790028919114, 0.7405775440619402, 0.7175337132870986, 0.7176727864799278, 0.6763431201395562, 0.6572720887969278, 0.6583932124943292, 0.6377803129904841, 0.6424791975390437, 0.6192836701326744, 0.5986970117882242, 0.5675460945471891, 0.5759172038694399, 0.5706341489667291, 0.5495706399150607, 0.5515938966092558, 0.5408417766262055], "accuracy": [0.3152819871902466, 0.49848103523254395, 0.6077136397361755, 0.6563201546669006, 0.6964733600616455, 0.6956809163093567, 0.7193237543106079, 0.7210407853126526, 0.7215691208839417, 0.7460044622421265, 0.7536653280258179, 0.7485140562057495, 0.7614582180976868, 0.7611940503120422, 0.7606657147407532, 0.7738739848136902, 0.7868181467056274, 0.7812706232070923, 0.7841764688491821, 0.7913089394569397, 0.7921014428138733, 0.7927618622779846], "val_loss": [1.4178166389465332, 0.9551628317151751, 0.8228739670344761, 0.6400606972830636, 0.6515249865395683, 0.6506960562297276, 0.5871594292776925, 0.5499164887837001, 0.5433276551110404, 0.5475895745413644, 0.5565068210874285, 0.5300921542303902, 0.516923086983817, 0.48401522636413574, 0.48843179430280415, 0.4875108173915318, 0.466134854725429, 0.4791584185191563, 0.4602444853101458, 0.4598983185631888, 0.46733151163373676, 0.4762784242630005], "val_accuracy": [0.4169999957084656, 0.5803333520889282, 0.6520000100135803, 0.7303333282470703, 0.7099999785423279, 0.6946666836738586, 0.734333336353302, 0.749666690826416, 0.7436666488647461, 0.7409999966621399, 0.7613333463668823, 0.7620000243186951, 0.7716666460037231, 0.7873333096504211, 0.7789999842643738, 0.7826666831970215, 0.8059999942779541, 0.7883333563804626, 0.7993333339691162, 0.8013333082199097, 0.8026666641235352, 0.7886666655540466]}}, {"genotype": [[0], [1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 2, 3, 9, 8, 9, 1, 9, 2, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [12, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8025714159011841, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 9, 3, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0416551263435343, 1.776242031680752, 1.4381900841549575, 0.9857018235935558, 0.8603792506013139, 0.8182033626568112, 0.7145736129323899, 0.6889723755223419, 0.6723754512572474, 0.6341867363526915, 0.6046614592038504, 0.6004556350153136, 0.5694937835185598, 0.5319820746706618, 0.5591934515091217, 0.5114160087114595, 0.5320542065647883, 0.5024308632503742, 0.49319009891259846, 0.4734518490864569, 0.475241446980018, 0.47056210157956585], "accuracy": [0.30220577120780945, 0.40087175369262695, 0.5095760226249695, 0.639809787273407, 0.6668868064880371, 0.6934354901313782, 0.7284374833106995, 0.7337207794189453, 0.7372870445251465, 0.7560427784919739, 0.7734777331352234, 0.7707040309906006, 0.7803460359573364, 0.8006868362426758, 0.7844406366348267, 0.8041210174560547, 0.7957997918128967, 0.8045172095298767, 0.8162726163864136, 0.8175934553146362, 0.8150838613510132, 0.8202351331710815], "val_loss": [1.8528965541294642, 1.3832685606820243, 0.8493171760014125, 0.7405988999775478, 0.637149555342538, 0.6143135513578143, 0.5632608447756086, 0.5371120657239642, 0.5026039225714547, 0.516642587525504, 0.47842725685664583, 0.47900993483407156, 0.4504207372665405, 0.445669310433524, 0.42405578919819426, 0.4512708527701242, 0.42015200001852854, 0.42975612197603497, 0.4281273995126997, 0.4219661865915571, 0.4444960185459682, 0.44777895723070416], "val_accuracy": [0.24833333492279053, 0.5460000038146973, 0.6483333110809326, 0.621666669845581, 0.7213333249092102, 0.7059999704360962, 0.7403333187103271, 0.750333309173584, 0.7716666460037231, 0.7599999904632568, 0.7950000166893005, 0.7900000214576721, 0.8050000071525574, 0.8029999732971191, 0.8116666674613953, 0.8029999732971191, 0.8216666579246521, 0.8213333487510681, 0.8166666626930237, 0.812666654586792, 0.7960000038146973, 0.8029999732971191]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 5, 6, 3, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 7, 3, 9, 8, 4, 1, 9, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [5, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.7802857160568237, "mapping_values": [1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), alpha))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.divide_no_nan(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3082536147365387, 2.484717106475901, 2.1095940225774017, 1.7578373620727705, 1.6378835331982688, 1.2620014169543348, 1.2519291869684879, 1.044712983621913, 1.0045096986266395, 0.8838006214946882, 0.8635406157029162, 0.8335335458337418, 0.8787352455180351, 0.7869411452791836, 0.7707721500301625, 0.7346315968148445, 0.6948582813204744, 0.6855860300792159, 0.6839442152420229, 0.6725918381300112, 0.6550960361823713, 0.6661289769345743, 0.666916617462585, 0.6540344013214867, 0.6333284642812582], "accuracy": [0.25214633345603943, 0.17884030938148499, 0.2495046854019165, 0.39743760228157043, 0.4484215974807739, 0.54220050573349, 0.5436534285545349, 0.6217144131660461, 0.6211860775947571, 0.6713775992393494, 0.6717738509178162, 0.6913221478462219, 0.677189290523529, 0.7034738063812256, 0.7098137736320496, 0.7240787148475647, 0.7397965788841248, 0.7441553473472595, 0.7416457533836365, 0.737947404384613, 0.7592127919197083, 0.7475894689559937, 0.7433628439903259, 0.7490423917770386, 0.7629110813140869], "val_loss": [1.6406471048082625, 1.7125164781297957, 1.2792916638510567, 1.2515058176858085, 0.8601582050323486, 0.8487784351621356, 0.9026499475751605, 0.7123937777110508, 0.6569005591528756, 0.6365940570831299, 0.6630595411573138, 0.6232115541185651, 0.6292658533368792, 0.6470556940351214, 0.5344410964420864, 0.5345815249851772, 0.5377504655293056, 0.5446749925613403, 0.5115200962339129, 0.5005242483956474, 0.5298084701810565, 0.5121512923921857, 0.532402787889753, 0.5552308218819755, 0.49248376914433073], "val_accuracy": [0.4623333215713501, 0.24833333492279053, 0.4623333215713501, 0.5096666812896729, 0.6336666941642761, 0.6110000014305115, 0.6169999837875366, 0.6736666560173035, 0.7103333473205566, 0.7066666483879089, 0.7080000042915344, 0.70333331823349, 0.7273333072662354, 0.7086666822433472, 0.7593333125114441, 0.7593333125114441, 0.7360000014305115, 0.7319999933242798, 0.7683333158493042, 0.7789999842643738, 0.7559999823570251, 0.7649999856948853, 0.7596666812896729, 0.7649999856948853, 0.7639999985694885]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 25, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 7, 3, 9, 8, 4, 1, 9, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [5, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.7734285593032837, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.307622225056896, 2.472746169452166, 2.0286822726524676, 1.902351807672523, 1.6037633697575016, 1.347668110135524, 1.143946603414893, 1.0991822236627558, 0.9858647202928982, 0.9555735203646997, 0.9054373464154813, 0.8277560700719635, 0.8300990067720571, 0.7727268002745246, 0.746352160076156, 0.7848679906640779, 0.719700648217484, 0.7017124029922762, 0.7097876429195653, 0.6700541603488063, 0.6477667813319351, 0.6399069952218446], "accuracy": [0.25214633345603943, 0.17897239327430725, 0.3078853487968445, 0.3961167633533478, 0.48131024837493896, 0.5361247062683105, 0.5955620408058167, 0.6100911498069763, 0.6444327235221863, 0.6544709801673889, 0.6711134314537048, 0.684982180595398, 0.6886804699897766, 0.7107383608818054, 0.7156254053115845, 0.7143045663833618, 0.7228899598121643, 0.7412495017051697, 0.7322678565979004, 0.7485140562057495, 0.7598732113838196, 0.7626469135284424], "val_loss": [1.6618245329175676, 1.6249559266226632, 1.7100464275905065, 1.0837689127240862, 1.0899344512394495, 0.8348408256258283, 0.8365770748683384, 0.816487227167402, 0.7957530873162406, 0.6920832906450544, 0.6710149390356881, 0.6174768209457397, 0.5967959335872105, 0.5668917042868478, 0.5678832020078387, 0.5370038066591535, 0.5065134082521711, 0.5608034815107074, 0.5655644280569894, 0.5319812808718, 0.5224428517477853, 0.5116866656712123], "val_accuracy": [0.4726666808128357, 0.2930000126361847, 0.32466667890548706, 0.5366666913032532, 0.5713333487510681, 0.6586666703224182, 0.6653333306312561, 0.6713333129882812, 0.6679999828338623, 0.684333324432373, 0.7013333439826965, 0.7200000286102295, 0.7183333039283752, 0.7333333492279053, 0.7429999709129333, 0.7590000033378601, 0.7703333497047424, 0.7546666860580444, 0.7310000061988831, 0.7573333382606506, 0.7553333044052124, 0.7639999985694885]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 1, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [43, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [61, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 2, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302730190629547, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1], [0, 0, 1, 1], [2, 5, 6, 5, 2, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 7, 2, 6, 8, 9, 5, 3, 2, 0, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 1, 2, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 2, 2, 1, 0, 0, 2, 2], [89, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 6, 6, 3, 3, 0, 1, 1, 1, 0, 1, 3, 1, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.add(beta, alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [13, 16, 61], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 4, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 0, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 37, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 1, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 6, 4, 3, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302730190629547, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [13, 16, 61], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 7, 3, 9, 8, 9, 1, 9, 2, 0, 4, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [48, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 2, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, grad), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06868313252925873, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [59942690.2983707, 9046692866.569805, 154055102750.19522, 1077369435966.0472, 4837710972907.712, 15815180358946.117], "accuracy": [0.1026284471154213, 0.10434553027153015, 0.09615638852119446, 0.10328886657953262, 0.09536388516426086, 0.09668471664190292], "val_loss": [497837604.5714286, 26816030427.42857, 287780260132.5714, 1568823050240.0, 5876217956644.571, 17332570610541.715], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 2, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 4, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 0, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3030366542679115, 2.3031234996603183, 2.3028833124190746, 2.302934393733484, 2.3030685406350946, 2.3030549416436874], "accuracy": [0.0936468094587326, 0.09721305221319199, 0.09694888442754745, 0.09866596013307571, 0.09668471664190292, 0.09298639744520187], "val_loss": [1.973597458430699, 1.973604338509696, 1.973694120134626, 1.9737317221505302, 1.973794664655413, 1.9737735475812639], "val_accuracy": [0.10233332961797714, 0.10066666454076767, 0.09799999743700027, 0.10233332961797714, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 5, 6, 4, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 2, 2, 1, 0, 0, 2, 2], [50, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [2.302677741250373, 2.3023942333123686, 2.302676981182902, 2.303493556124801, 2.308049121348298, 2.335031371909582], "accuracy": [0.10011887550354004, 0.10276053100824356, 0.09998679161071777, 0.10302469879388809, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973667825971331, 1.9738212994166784, 1.9743851252964564, 1.9766039848327637, 1.9874582971845354, 2.0476854869297574], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [3, 6, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [13, 16, 61], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 4, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 0, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 67, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 9, 8, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [54, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 9, 9, 5, 4, 3, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), alpha)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 2, 1, 1, 1, 2, 1, 2, 2], [94, 69, 61], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 4, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 0, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [99, 0, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.09857142716646194, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, sigma)", "other_info": {"loss": [3.375118699071902, 2.316150670636678, 2.3448267109941074, 2.7076377436280517, 3.62648027693638, 5.678560606193518, 12.440953283797418, 16.14006774760256], "accuracy": [0.15982036292552948, 0.10210011899471283, 0.09509972482919693, 0.09496764093637466, 0.10130762308835983, 0.09721305221319199, 0.1006472036242485, 0.1026284471154213], "val_loss": [1.9864623206002372, 1.9865718569074358, 2.190639223371233, 2.334712028503418, 4.747479711260114, 6.294913564409528, 11.465257099696569, 15.860636029924665], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10133333504199982, 0.09799999743700027, 0.10066666454076767, 0.09866666793823242, 0.10133333504199982, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8, 7, 4, 1, 7, 4, 6, 3, 2, 8, 4, 9, 1, 3, 8, 9, 1, 7, 4, 2, 9, 5, 5], [0, 2, 0, 1, 1, 1, 1, 2, 1, 2, 2, 0, 0, 1, 1, 0, 0, 3, 0, 3, 2, 1, 3, 0], [2, 80, 15, 44, 8, 32, 58, 15, 31, 46, 99], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 3, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 5, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.06257142871618271, "mapping_values": [1, 65, 65, 41, 24, 11, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.negative(alpha)), alpha))), tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), alpha)))))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.square(alpha)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))", "other_info": {"loss": [2.302372876789434, 2.3018533162877954, 2.30280488309859, 2.3014562963226988, 2.301235886108858, 2.3000770494717773, 2.300838945627118, 2.300853983065739, 2.2999392137425434, 2.3020563139466406, 2.3012896719672944, 2.3000555143947095, 2.3006728039032214, 2.3010480250538836, 2.300961527353926, 2.300183896139203, 2.3001846857767503, 2.2999051170515394, 2.300355829189262, 2.299680789322224, 2.300205153307942, 2.299151317019268, 2.3002347272573886, 2.30057965532947], "accuracy": [0.09166556596755981, 0.09325055778026581, 0.08796724677085876, 0.0940430611371994, 0.09509972482919693, 0.09906221181154251, 0.09192973375320435, 0.09800554811954498, 0.09417514503002167, 0.08955223858356476, 0.09047681838274002, 0.10381719470024109, 0.09734513610601425, 0.09668471664190292, 0.09298639744520187, 0.09813763201236725, 0.09760929644107819, 0.09866596013307571, 0.09655263274908066, 0.10130762308835983, 0.09457138925790787, 0.09734513610601425, 0.09853387624025345, 0.09298639744520187], "val_loss": [1.9708424295697893, 1.9705348696027483, 1.970233576638358, 1.9700202260698592, 1.9698734283447266, 1.9697555133274622, 1.9697144372122628, 1.9696786744253976, 1.969656126839774, 1.9696365765162878, 1.9696175030299596, 1.9696375301906042, 1.9696227482386999, 1.9695861680167062, 1.9695837838309151, 1.9695640291486467, 1.9695286069597517, 1.9694973400660925, 1.9694648470197404, 1.9694343975612096, 1.9693831035069056, 1.9694155965532576, 1.9694514274597168, 1.9695183890206474], "val_accuracy": [0.03799999877810478, 0.04066666588187218, 0.043666668236255646, 0.04866666719317436, 0.05166666582226753, 0.054999999701976776, 0.056333333253860474, 0.05666666850447655, 0.059333331882953644, 0.06133333221077919, 0.06133333221077919, 0.06266666948795319, 0.06333333253860474, 0.06499999761581421, 0.06666667014360428, 0.06966666877269745, 0.07233333587646484, 0.0729999989271164, 0.07599999755620956, 0.07533333450555801, 0.07466666400432587, 0.07466666400432587, 0.07466666400432587, 0.07566666603088379]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [13, 16, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 9, 8, 9, 1, 9, 2, 0, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [99, 0, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03342857211828232, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.3029207379007697, 2.3043649970989155, 2.307960696838252, 2.3092061575487888, 2.31207775729538, 2.3146122802502096], "accuracy": [0.09021265059709549, 0.08625016361474991, 0.07951393723487854, 0.08255184441804886, 0.08241976052522659, 0.07911768555641174], "val_loss": [1.9721998487200056, 1.9735760688781738, 1.9753832817077637, 1.9774180821010046, 1.9798456600734167, 1.9823908805847168], "val_accuracy": [0.02866666577756405, 0.02433333359658718, 0.02199999988079071, 0.01966666616499424, 0.01899999938905239, 0.024666666984558105]}}]