[{"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 5, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8], [1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.8154285550117493, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0257093032369085, 1.3724872493441582, 1.0103805739535412, 0.948459968708919, 0.8365268325446666, 0.7991049464478579, 0.7559785176230428, 0.7089268469366462, 0.6786324640448382, 0.6710130291340326, 0.658749931799564, 0.6481484815728284, 0.6337132973992797, 0.6178319780833812, 0.5982945250592542, 0.5966944089655107, 0.5962936215082006, 0.5676204418548739, 0.5701336980086466, 0.5485500725442077, 0.5636863542695827, 0.5327501332581933, 0.5405924473346074, 0.5178225023981728, 0.5115549506063806, 0.5097728146262503, 0.4918391932082009, 0.48278924789741734, 0.5013161145732261, 0.48311130096883725, 0.46787250834748323, 0.46850633190576, 0.47230619947908103, 0.45926767144819153, 0.454156593789262, 0.44217261917256345, 0.45741159257997754, 0.4289111047136848, 0.41445371575516765, 0.4248225237431701, 0.4188692516985193, 0.44064554903154846, 0.42217201653441355, 0.40791978796774514, 0.41371316315239415, 0.3994677115102344], "accuracy": [0.3362831771373749, 0.5151234865188599, 0.635979413986206, 0.6474705934524536, 0.6901333928108215, 0.6983225345611572, 0.7170783281326294, 0.7334566116333008, 0.7433628439903259, 0.7445515990257263, 0.746268630027771, 0.7464007139205933, 0.7577598690986633, 0.7656848430633545, 0.7712323069572449, 0.778232753276825, 0.7734777331352234, 0.7829877138137817, 0.7837802171707153, 0.791441023349762, 0.7857614755630493, 0.7969884872436523, 0.7903843522071838, 0.8017435073852539, 0.8026680946350098, 0.8029322624206543, 0.8162726163864136, 0.8164047002792358, 0.8084797263145447, 0.8175934553146362, 0.8259146809577942, 0.8245938420295715, 0.8190463781356812, 0.8278959393501282, 0.8318583965301514, 0.8354246616363525, 0.8284242749214172, 0.8393871188163757, 0.8477083444595337, 0.8401796221733093, 0.8436138033866882, 0.8305375576019287, 0.8412362933158875, 0.8515387773513794, 0.8422929644584656, 0.8496896028518677], "val_loss": [1.2913367067064558, 0.8105676514761788, 0.8293568577085223, 0.6658016102654594, 0.6108959913253784, 0.6409331049237933, 0.552884578704834, 0.5426622969763619, 0.5594700915472848, 0.5334194728306362, 0.5403512375695365, 0.5236754587718419, 0.5005061285836356, 0.4948838608605521, 0.5042180844715664, 0.5186165060315814, 0.47358247212001253, 0.4719057423727853, 0.45752171107700895, 0.4784951550619943, 0.4480757543018886, 0.44833076000213623, 0.44822449343545095, 0.43660405703953337, 0.4253057837486267, 0.42140271833964754, 0.42020684480667114, 0.4458077464784895, 0.40997636318206787, 0.40785783529281616, 0.4201501096997942, 0.4459094320024763, 0.4049482260431562, 0.4032500556537083, 0.3980387789862497, 0.41598152262823923, 0.38631940739495413, 0.3928401640483311, 0.40636582033974783, 0.38481416021074566, 0.37366093908037457, 0.37854293414524626, 0.3703645978655134, 0.37127372196742464, 0.3858680725097656, 0.37513195616858347], "val_accuracy": [0.3816666603088379, 0.6543333530426025, 0.6556666493415833, 0.718666672706604, 0.7350000143051147, 0.7279999852180481, 0.7583333253860474, 0.7543333172798157, 0.7516666650772095, 0.7463333606719971, 0.75, 0.7633333206176758, 0.7699999809265137, 0.7749999761581421, 0.7630000114440918, 0.750333309173584, 0.7923333048820496, 0.7896666526794434, 0.8036666512489319, 0.7876666784286499, 0.8033333420753479, 0.8056666851043701, 0.8016666769981384, 0.812666654586792, 0.8199999928474426, 0.8246666789054871, 0.8173333406448364, 0.8029999732971191, 0.8243333101272583, 0.831333339214325, 0.8243333101272583, 0.7900000214576721, 0.8226666450500488, 0.831333339214325, 0.8330000042915344, 0.8119999766349792, 0.8373333215713501, 0.8256666660308838, 0.8256666660308838, 0.8353333473205566, 0.8463333249092102, 0.8410000205039978, 0.8450000286102295, 0.8376666903495789, 0.840666651725769, 0.8386666774749756]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 5, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8], [1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 0, 1, 1, 2, 2, 2, 1, 1, 0, 0, 2, 1], [20, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.8134285807609558, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2334458024951176, 2.1838558792768765, 1.9825908074903609, 1.3767465513458876, 0.991802396665333, 0.8534342786970077, 0.7596032030515352, 0.7113757038538435, 0.6575242317410949, 0.6334880717426417, 0.6445158379992096, 0.5921790140368888, 0.5741171983601222, 0.589591249727129, 0.5912571926756841, 0.5397785058614837, 0.5100424072021632, 0.5368236543802837, 0.5179855749985294, 0.4947317846856491, 0.485013491536459, 0.4792380343102634, 0.4695444845599017, 0.47357584484312215, 0.43947546396036946, 0.44310137998741284, 0.43516781029448043, 0.4310856204794351], "accuracy": [0.2619204819202423, 0.2522784173488617, 0.3473781645298004, 0.5234447121620178, 0.6396777033805847, 0.6765288710594177, 0.7054550051689148, 0.7235503792762756, 0.7471932172775269, 0.7588165402412415, 0.755118191242218, 0.7711002230644226, 0.778232753276825, 0.7799497842788696, 0.7750627398490906, 0.7977809906005859, 0.8058380484580994, 0.7987055778503418, 0.8001585006713867, 0.8061022162437439, 0.8148196935653687, 0.8158763647079468, 0.8214238286018372, 0.8203672170639038, 0.8352925777435303, 0.8364813327789307, 0.8367455005645752, 0.8370096683502197], "val_loss": [1.7998679706028529, 1.805361611502511, 1.212566580091204, 0.8610033988952637, 0.6104405948093959, 0.6301071984427316, 0.5462538344519479, 0.5498180559703282, 0.5048230716160366, 0.5702829020363944, 0.4791108880724226, 0.461748582976205, 0.48458683490753174, 0.44548358236040386, 0.4553556612559727, 0.42271473578044344, 0.4471890926361084, 0.45473160062517437, 0.41021084785461426, 0.41539848702294485, 0.4549016611916678, 0.4179932645389012, 0.39934014422552927, 0.4030640721321106, 0.4094015955924988, 0.4003851669175284, 0.41807155098233906, 0.4156013897487095], "val_accuracy": [0.2746666669845581, 0.34599998593330383, 0.5609999895095825, 0.6506666541099548, 0.7303333282470703, 0.687333345413208, 0.737666666507721, 0.7636666893959045, 0.7713333368301392, 0.7383333444595337, 0.7903333306312561, 0.8006666898727417, 0.7923333048820496, 0.8146666884422302, 0.7996666431427002, 0.8119999766349792, 0.7906666398048401, 0.7893333435058594, 0.8236666917800903, 0.8223333358764648, 0.7863333225250244, 0.8116666674613953, 0.8299999833106995, 0.8233333230018616, 0.8209999799728394, 0.8216666579246521, 0.8109999895095825, 0.8223333358764648]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 1, 0, 2, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.8131428360939026, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), alpha), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0257130629508375, 1.3723498988286962, 1.0133016556954073, 0.9508870447615685, 0.8377411397944793, 0.7905752994223451, 0.7595149358391777, 0.7084970316866748, 0.6786905814076868, 0.681223004170696, 0.6495274025939475, 0.6409143608921097, 0.6338134035222078, 0.6169812090723443, 0.597750023528963, 0.5961015617228644, 0.5918205552774414, 0.5683980583632863, 0.5655329070543459, 0.5482386471242354, 0.5541569974129273, 0.5309664726792672, 0.5426374860900095, 0.5160532426588477, 0.5154669991518607, 0.5048146811474458, 0.48982159451502444, 0.4860829528745423, 0.4925564487321171, 0.4862507879025491, 0.4671786953516136, 0.4659378484743713, 0.47016633452441414, 0.4539263527493482, 0.4525378987600523], "accuracy": [0.3362831771373749, 0.5147272348403931, 0.6345264911651611, 0.6445648074150085, 0.6890767216682434, 0.702681303024292, 0.7154933214187622, 0.7304186820983887, 0.7457403540611267, 0.7391361594200134, 0.7543256878852844, 0.7497028112411499, 0.7582882046699524, 0.7671377658843994, 0.7700436115264893, 0.7788931727409363, 0.774798572063446, 0.7808743715286255, 0.7841764688491821, 0.7917051911354065, 0.7865539789199829, 0.7964601516723633, 0.7898560166358948, 0.8042530417442322, 0.8058380484580994, 0.8087438941001892, 0.8178576231002808, 0.8171972036361694, 0.8142913579940796, 0.8146876096725464, 0.8253863453865051, 0.8269713521003723, 0.8202351331710815, 0.8296129703521729, 0.83119797706604], "val_loss": [1.291560138974871, 0.8121542590005058, 0.8432330404009137, 0.6672639335904803, 0.6127308436802456, 0.6331345353807721, 0.553995064326695, 0.5436550208500454, 0.5996658972331456, 0.5247722012656075, 0.5445376804896763, 0.5216518129621234, 0.49903067520686556, 0.5008155107498169, 0.5054122890744891, 0.5086630412510463, 0.4638488292694092, 0.4664438452039446, 0.4602454219545637, 0.4670536858694894, 0.45080651555742535, 0.4473398242677961, 0.44276601927621023, 0.44115289619990755, 0.4226546287536621, 0.42047156606401714, 0.4227497662816729, 0.4369268843105861, 0.41040660653795513, 0.4057337386267526, 0.4168763756752014, 0.449474607195173, 0.40471839904785156, 0.4002070597239903, 0.40055912733078003], "val_accuracy": [0.3816666603088379, 0.6506666541099548, 0.6489999890327454, 0.718666672706604, 0.7310000061988831, 0.7213333249092102, 0.762333333492279, 0.7549999952316284, 0.7293333411216736, 0.7576666474342346, 0.7490000128746033, 0.7639999985694885, 0.7726666927337646, 0.765999972820282, 0.762666642665863, 0.7586666941642761, 0.7960000038146973, 0.79666668176651, 0.8003333210945129, 0.7926666736602783, 0.8016666769981384, 0.8050000071525574, 0.8086666464805603, 0.8116666674613953, 0.8256666660308838, 0.8243333101272583, 0.8173333406448364, 0.8080000281333923, 0.824999988079071, 0.8323333263397217, 0.8256666660308838, 0.7850000262260437, 0.8203333616256714, 0.831333339214325, 0.8309999704360962]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 1, 1, 2, 1, 0, 5, 0, 2, 4, 4, 3, 1, 3, 1, 0, 2, 5, 8, 3, 3, 6, 9, 2, 1, 6, 5, 8, 7, 5, 5, 8, 2, 9], [1, 2, 2, 1, 2, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1, 2, 0, 2, 3, 2, 3], [81, 48, 57, 30, 42, 68, 23, 98], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8059999942779541, "mapping_values": [1, 73, 73, 45, 28, 8, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), grad)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), grad)), alpha)))))), grad)))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(grad)), grad))))), tf.math.add(alpha, tf.math.square(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.1704516166142342, 1.7967295672490124, 1.3798767583339662, 1.1271178663965733, 0.8913078121678578, 0.8493326530952842, 0.8116554559938282, 0.7202288918507145, 0.7328403319712281, 0.7024597623612446, 0.6681219161997508, 0.6278920913684196, 0.6037121287993216, 0.6101878968920801, 0.5714798087709064, 0.5730383263335268, 0.5513413591769708, 0.5357195323271884, 0.5315016272470794, 0.5111731759561224, 0.5048929040284913, 0.4782503866374674, 0.4913082932948814, 0.4766371088131245, 0.46888151686142115, 0.4667735713395177, 0.45315712980858136, 0.42778927834121194, 0.4541504868954369, 0.42172544629361886, 0.44515011673039134, 0.4073971689589791, 0.4196963255604764, 0.41702997619134874, 0.38577326218985203, 0.39611257734142513], "accuracy": [0.28701624274253845, 0.392550528049469, 0.5238409638404846, 0.5865803956985474, 0.6634526252746582, 0.6740192770957947, 0.6951525807380676, 0.7271166443824768, 0.7187954187393188, 0.7235503792762756, 0.7372870445251465, 0.7511557340621948, 0.774270236492157, 0.765949010848999, 0.7794214487075806, 0.7803460359573364, 0.7885351777076721, 0.793422281742096, 0.796328067779541, 0.8079513907432556, 0.8078193068504333, 0.8150838613510132, 0.8153480291366577, 0.8186501264572144, 0.8190463781356812, 0.8232730031013489, 0.8330471515655518, 0.837141752243042, 0.8285563588142395, 0.842028796672821, 0.8315942287445068, 0.850350022315979, 0.8403117060661316, 0.8411042094230652, 0.856689989566803, 0.8482366800308228], "val_loss": [1.5363383633749825, 1.400975261415754, 0.8612076554979596, 0.6620165961129325, 0.7410064595086234, 0.6560451303209577, 0.5550447872706822, 0.5870695965630668, 0.6405563354492188, 0.525598270552499, 0.5175793170928955, 0.49187515463147846, 0.5168109791619437, 0.4753143446786063, 0.4708453587123326, 0.5276435443333217, 0.4468945264816284, 0.4712353604180472, 0.425796525818961, 0.41808425528662546, 0.43577844755990164, 0.42419700963156565, 0.4053138664790562, 0.40368761335100445, 0.3974738121032715, 0.3968046392713274, 0.4036962815693447, 0.3954330257007054, 0.3839629292488098, 0.3831847480365208, 0.37344995566776823, 0.4071034703935896, 0.37507384163992746, 0.36188821281705585, 0.4046276552336557, 0.3711219344820295], "val_accuracy": [0.4313333332538605, 0.4830000102519989, 0.6426666378974915, 0.7110000252723694, 0.6653333306312561, 0.7176666855812073, 0.7440000176429749, 0.7326666712760925, 0.7059999704360962, 0.7556666731834412, 0.7703333497047424, 0.7803333401679993, 0.765333354473114, 0.784333348274231, 0.7896666526794434, 0.7493333220481873, 0.7990000247955322, 0.784333348274231, 0.8096666932106018, 0.8153333067893982, 0.8003333210945129, 0.8056666851043701, 0.8256666660308838, 0.8226666450500488, 0.8309999704360962, 0.8353333473205566, 0.8113333582878113, 0.8336666822433472, 0.8353333473205566, 0.8450000286102295, 0.8463333249092102, 0.815666675567627, 0.8423333168029785, 0.8463333249092102, 0.8293333053588867, 0.8376666903495789]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 1, 1, 2, 1, 0, 5, 0, 2, 4, 8, 3, 1, 3, 1, 0, 8, 5, 8, 3, 3, 6, 9, 2, 1, 6, 5, 8, 7, 5], [2, 1, 2, 0, 2, 2, 0, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0], [81, 48, 59, 88, 4, 68, 88, 25, 71, 77], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.800000011920929, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.1405339304482256, 1.4276670754436078, 1.1412935595644023, 0.9316798907623095, 0.8760705108750277, 0.8181858561955675, 0.786241959524098, 0.7354642492180817, 0.7045656064198773, 0.6930631107783919, 0.6838595264103781, 0.6667696131203137, 0.6588913279911153, 0.6486225194068805, 0.6221397277417987, 0.6323146039799393, 0.6176251075554675, 0.5987316163507954, 0.5947297204833508, 0.5830749309436126, 0.58452696241896, 0.5819029688063614, 0.5686820119269032, 0.5547402480952004, 0.5459872580412246, 0.5426438103782156, 0.5315983666719903, 0.5301143260380659, 0.5418919443438601, 0.5338275273320792, 0.5074336405805608, 0.5086796121621853, 0.5179337250471524, 0.5061055330229693, 0.4995685641429585, 0.4892721233854771, 0.5037246829231166, 0.4781318733626353, 0.4613330983183466, 0.4772214721600456, 0.46641386161863274, 0.4927909913560293, 0.47148862558663907, 0.456151542989034, 0.47374662273926205, 0.45661339209442203, 0.44754475037088925, 0.4485298060131678, 0.44332739130191956, 0.45213296454438695, 0.4367822214888229, 0.43053915152743727, 0.4395495901144318], "accuracy": [0.30339452624320984, 0.5079910159111023, 0.5879011750221252, 0.6505085229873657, 0.6803592443466187, 0.6951525807380676, 0.7088891863822937, 0.7248712182044983, 0.7368907928466797, 0.7374191284179688, 0.7374191284179688, 0.7437590956687927, 0.7518161535263062, 0.7519482374191284, 0.7671377658843994, 0.7652885913848877, 0.7660810947418213, 0.7726852297782898, 0.7757231593132019, 0.778232753276825, 0.7771760821342468, 0.7773081660270691, 0.7839123010635376, 0.791441023349762, 0.7922335267066956, 0.7935543656349182, 0.7998943328857422, 0.7997622489929199, 0.7932901978492737, 0.7931581139564514, 0.8105930685997009, 0.8076872229576111, 0.7992339134216309, 0.8076872229576111, 0.8138951063156128, 0.8141592741012573, 0.8070268034934998, 0.8211596608161926, 0.8313300609588623, 0.8191784620285034, 0.8273676037788391, 0.8119139075279236, 0.8230088353157043, 0.8338396549224854, 0.8157442808151245, 0.8265751004219055, 0.8294808864593506, 0.8360850811004639, 0.8359529972076416, 0.8335754871368408, 0.8330471515655518, 0.8380662798881531, 0.8347642421722412], "val_loss": [1.3490482398441859, 0.9024016857147217, 0.7082975081035069, 0.7209591695240566, 0.628638505935669, 0.6349316494805473, 0.5731987612588065, 0.5649510792323521, 0.5667196341923305, 0.5397701604025704, 0.5552947350910732, 0.5348304850714547, 0.5154305185590472, 0.5019030400684902, 0.5126669406890869, 0.5360292536871774, 0.4801478556224278, 0.4853623764855521, 0.4786097151892526, 0.4944922924041748, 0.4693422487803868, 0.4648045812334333, 0.4847772291728428, 0.46267289774758474, 0.44702935218811035, 0.4475953919546945, 0.44272875785827637, 0.46239680903298513, 0.4473887171064104, 0.4348678929465158, 0.44712534972599577, 0.46453404426574707, 0.4301736865724836, 0.42179098299571444, 0.4184529611042568, 0.4351754018238613, 0.40761119978768484, 0.41130045482090544, 0.4247641222817557, 0.41487893887928556, 0.4001882416861398, 0.40235582419804167, 0.40355585302625385, 0.3965781331062317, 0.41361617190497263, 0.4019886255264282, 0.3984904374395098, 0.3874144128390721, 0.4001771722521101, 0.4018935646329607, 0.3939635838781084, 0.39080837794712614, 0.405265782560621], "val_accuracy": [0.5316666960716248, 0.6179999709129333, 0.7073333263397217, 0.7003333568572998, 0.7296666502952576, 0.7233333587646484, 0.7540000081062317, 0.7519999742507935, 0.7506666779518127, 0.7523333430290222, 0.7596666812896729, 0.7636666893959045, 0.765666663646698, 0.7726666927337646, 0.7639999985694885, 0.7409999966621399, 0.7873333096504211, 0.7873333096504211, 0.7856666445732117, 0.7716666460037231, 0.7993333339691162, 0.7953333258628845, 0.7766666412353516, 0.8043333292007446, 0.8066666722297668, 0.8109999895095825, 0.8076666593551636, 0.7926666736602783, 0.8076666593551636, 0.8146666884422302, 0.8103333115577698, 0.781333327293396, 0.8083333373069763, 0.8206666707992554, 0.8243333101272583, 0.8023333549499512, 0.8266666531562805, 0.8199999928474426, 0.815666675567627, 0.8186666369438171, 0.8326666951179504, 0.8306666612625122, 0.8289999961853027, 0.8323333263397217, 0.8330000042915344, 0.8296666741371155, 0.8316666483879089, 0.8376666903495789, 0.8173333406448364, 0.8349999785423279, 0.8306666612625122, 0.8316666483879089, 0.8309999704360962]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 5, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8], [2, 1, 0, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [20, 48, 98, 30, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [53, 74, 76, 58]], "fitness": -0.7951428294181824, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.4075207669327776, 2.0646355936256744, 2.136251281359885, 2.1100456733839654, 2.427203919578616, 1.5178312069043003, 1.3575123419709383, 0.9252307087816756, 0.8403732089665052, 0.789737683765294, 0.7363586772812387, 0.7005047276271663, 0.6816833439898009, 0.6570874863312686, 0.6494531670754785, 0.6188511572037202, 0.616259758081324, 0.5841957196079587, 0.6023530579828835, 0.5598009440798439, 0.5614876040787572, 0.5590614859044765], "accuracy": [0.2250693440437317, 0.3032624423503876, 0.2810725271701813, 0.2666754722595215, 0.33747193217277527, 0.4795931875705719, 0.5679566860198975, 0.6664905548095703, 0.7063795924186707, 0.7108704447746277, 0.7255316376686096, 0.7366266250610352, 0.7452120184898376, 0.7565711140632629, 0.7537974119186401, 0.765949010848999, 0.7709681391716003, 0.7840443849563599, 0.7724210619926453, 0.7928939461708069, 0.7927618622779846, 0.7882710099220276], "val_loss": [1.793945040021624, 1.4887081214359827, 1.5638238021305628, 4.805513381958008, 1.2632693903786796, 1.1718696526118688, 0.7166434867041451, 0.653606687273298, 0.5514300039836338, 0.5981934922082084, 0.5147749015263149, 0.5992787906101772, 0.5036653620856149, 0.5427053996494838, 0.47377066952841623, 0.4704966885702951, 0.44389443738119944, 0.5162596021379743, 0.4820777177810669, 0.4666274445397513, 0.4481217861175537, 0.44204442841666086], "val_accuracy": [0.44066667556762695, 0.4886666536331177, 0.5073333382606506, 0.17900000512599945, 0.4476666748523712, 0.5576666593551636, 0.671999990940094, 0.7213333249092102, 0.7463333606719971, 0.7329999804496765, 0.7710000276565552, 0.7273333072662354, 0.7743333578109741, 0.7570000290870667, 0.7986666560173035, 0.8019999861717224, 0.8043333292007446, 0.7820000052452087, 0.7896666526794434, 0.793666660785675, 0.7876666784286499, 0.800000011920929]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 2, 4, 9, 8, 3, 5, 6, 5, 7, 2, 0, 2, 1, 2, 5, 0, 2, 0, 8, 3, 9, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 0, 2, 2, 2, 2, 1, 1, 1, 0, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [81, 48, 35, 6, 92, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [99, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [32, 74, 76, 58]], "fitness": -0.7854285836219788, "mapping_values": [1, 23, 23, 14, 9, 3, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.negative(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.279372772693697, 2.209653130485838, 2.082555523102609, 1.857522874114032, 1.584618551824638, 1.3707261724935593, 1.2284167621113984, 1.1262676918967967, 1.054501849709721, 1.004017241335564, 0.9627257198973134, 0.9259347693873844, 0.9001738993152573, 0.8736778465968711, 0.8490251366488449, 0.8406588800626424, 0.8215868085477142, 0.8125017721419007, 0.7944132544975144, 0.779433535381693, 0.7824067132442446, 0.7580730584571232, 0.7627862402004353, 0.7393234960942489, 0.7406905624750284, 0.7269741704419557, 0.7308438033113516, 0.715126330369751, 0.7074403230382813, 0.705849567259213, 0.6946679893155313, 0.6902671140560683, 0.6803465449043221, 0.6806566069438206, 0.6701083633846469, 0.6700243209378595, 0.6788622949574019, 0.6573318516683774, 0.6585804625446172, 0.6456272535871411, 0.6495557232476843, 0.6507108071933349, 0.6469250705972434, 0.6373233425540065, 0.6469324406867707, 0.6448719945676322, 0.6292018616015271, 0.6275763249022535, 0.6282939117393473, 0.6250781237945234, 0.6245520076007262, 0.6123048753361141, 0.6158814495580701, 0.605892496416991, 0.6121125425393036, 0.6017715574224092, 0.598677478776931, 0.6002930954321107], "accuracy": [0.15229164063930511, 0.28926166892051697, 0.37802138924598694, 0.44802534580230713, 0.49808478355407715, 0.5461629629135132, 0.5783912539482117, 0.6046757102012634, 0.6330735683441162, 0.6445648074150085, 0.6593580842018127, 0.6730946898460388, 0.6803592443466187, 0.6859067678451538, 0.6980583667755127, 0.7013604640960693, 0.7086250185966492, 0.7073041796684265, 0.7150970697402954, 0.7154933214187622, 0.713379979133606, 0.7219653725624084, 0.7264562249183655, 0.7296261787414551, 0.7281733155250549, 0.7300224304199219, 0.7302865982055664, 0.7408532500267029, 0.7353057861328125, 0.7423061728477478, 0.7497028112411499, 0.7483819723129272, 0.7512878179550171, 0.7504953145980835, 0.7543256878852844, 0.7557786107063293, 0.7511557340621948, 0.7535332441329956, 0.7569673657417297, 0.7619865536689758, 0.7601373791694641, 0.7592127919197083, 0.7630431652069092, 0.7614582180976868, 0.7647602558135986, 0.7543256878852844, 0.7667415142059326, 0.7726852297782898, 0.7693831920623779, 0.7642319202423096, 0.7671377658843994, 0.7711002230644226, 0.7708360552787781, 0.7716285586357117, 0.7744023203849792, 0.7741381525993347, 0.7741381525993347, 0.7770439982414246], "val_loss": [1.9150031634739466, 1.8267396518162318, 1.6544734750475203, 1.3830205712999617, 1.120821169444493, 0.9498723234449115, 0.8469066960471017, 0.7813330548150199, 0.7336323090962001, 0.6987000022615705, 0.6768274647848946, 0.6524849789483207, 0.6364071198872158, 0.6261681658881051, 0.6127447060176304, 0.6019374813352313, 0.5967502083097186, 0.5834143332072667, 0.576136759349278, 0.572250315121242, 0.561602098601205, 0.5648646354675293, 0.5560936757496425, 0.5468202148165021, 0.5428300244467599, 0.5470090423311506, 0.5374011482511248, 0.5300990172794887, 0.525854229927063, 0.5243180309023175, 0.517566306250436, 0.5203222206660679, 0.5160975456237793, 0.515795384134565, 0.5072497980935233, 0.5082988057817731, 0.5015384810311454, 0.4989628621510097, 0.4984403167452131, 0.49494760377066477, 0.49291573251996723, 0.48945541041237967, 0.4894829477582659, 0.4887477159500122, 0.48828090940202984, 0.4847195829663958, 0.483730639730181, 0.4814340387071882, 0.4787311043058123, 0.4833948952811105, 0.47521075180598665, 0.4734740597861154, 0.4729429142815726, 0.4724834305899484, 0.4674267257962908, 0.4669727087020874, 0.4684969867978777, 0.4663574014391218], "val_accuracy": [0.367000013589859, 0.4476666748523712, 0.5379999876022339, 0.5730000138282776, 0.6046666502952576, 0.6700000166893005, 0.684333324432373, 0.6880000233650208, 0.703000009059906, 0.7200000286102295, 0.721666693687439, 0.7306666374206543, 0.7366666793823242, 0.737333357334137, 0.7403333187103271, 0.7419999837875366, 0.7383333444595337, 0.75, 0.746999979019165, 0.7486666440963745, 0.7519999742507935, 0.7523333430290222, 0.7573333382606506, 0.7609999775886536, 0.7566666603088379, 0.7583333253860474, 0.7670000195503235, 0.765999972820282, 0.7636666893959045, 0.7633333206176758, 0.7716666460037231, 0.768666684627533, 0.7730000019073486, 0.7730000019073486, 0.7756666541099548, 0.7743333578109741, 0.7763333320617676, 0.7789999842643738, 0.7793333530426025, 0.7760000228881836, 0.781333327293396, 0.784333348274231, 0.7866666913032532, 0.7850000262260437, 0.7799999713897705, 0.7850000262260437, 0.7886666655540466, 0.7889999747276306, 0.7919999957084656, 0.781333327293396, 0.7913333177566528, 0.7940000295639038, 0.7983333468437195, 0.7943333387374878, 0.7960000038146973, 0.7976666688919067, 0.7973333597183228, 0.7943333387374878]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [2, 3, 1, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 2, 1], [81, 44, 32, 88, 65, 68, 88, 25, 91, 47, 65, 81, 15, 68, 24, 25], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [99, 74, 76, 58]], "fitness": -0.2102857083082199, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [3.188158582812838, 2.3008614151374838, 2.358236370148392, 2.2773534960325414, 2.304040693792732, 2.3027105973837885, 2.3011760915731787], "accuracy": [0.16721701622009277, 0.12442214041948318, 0.1880861222743988, 0.11015717685222626, 0.09576013684272766, 0.10566636174917221, 0.11015717685222626], "val_loss": [1.9810691561017717, 1.889960493360247, 1.7058311189923967, 1.9748734065464564, 1.9737277712140764, 1.9729944637843542, 1.9631638526916504], "val_accuracy": [0.10566666722297668, 0.26866665482521057, 0.20533333718776703, 0.09833333641290665, 0.10133333504199982, 0.10066666454076767, 0.2043333351612091]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 3, 1, 2, 1, 0, 5, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 2, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 1, 0, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [5, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 30, 18, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(alpha))), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), grad))))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), grad), alpha)), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301949528025409, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 3, 4, 9, 3, 2, 1, 6, 5, 7, 9, 8, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 1, 0, 8, 5, 8], [2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 0, 0, 0, 2, 1], [87, 48, 98, 70, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3015731305903477, 2.3021701931906193, 2.302519552774748, 2.3035343518078903, 2.3073360273756482, 2.324995748622936], "accuracy": [0.1026284471154213, 0.10645885765552521, 0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736480031694685, 1.9737129211425781, 1.9741433688572474, 1.9758392061505998, 1.9832473482404436, 2.016354901450021], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [8, 3, 2, 3, 4, 9, 3, 5, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8], [1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 0, 1, 1, 2, 2, 2, 1, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.multiply(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [4.127923205008738, 92.773594874527, 1031.811847808197, 6553.1338681316865, 28154.02673596206, 91444.76471073834], "accuracy": [0.09338264167308807, 0.09985470771789551, 0.09813763201236725, 0.09879804402589798, 0.10210011899471283, 0.09655263274908066], "val_loss": [11.54408427647182, 212.93927437918526, 1809.637416294643, 9291.29966517857, 34006.85825892857, 99159.46205357143], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 43, 43, 25, 18, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad)))), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))))))), alpha))))))))))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), alpha))))), tf.math.multiply(grad, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 3, 5, 3, 4, 9, 3, 8, 1, 6, 5, 7, 2, 1, 2, 1, 0, 5, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 35, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [5, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 7, 4, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301949528025409, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 1, 1, 2, 1, 0, 5, 0, 2, 4, 8, 3, 1, 3, 1, 0, 8, 5, 8, 3, 3, 6, 9, 2, 1, 6, 5, 8, 7, 5], [2, 1, 1, 0, 1, 2, 0, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0], [81, 48, 59, 88, 4, 68, 88, 25, 71, 77], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 6, 8, 6, 0, 4, 5, 6, 0, 9], [0, 0, 2, 1, 0, 0, 2, 2], [92, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 18, 14, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(alpha)))), grad)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.divide_no_nan(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [2.301949528025409, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 6, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(grad, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.30232485961511, 2.3030730146915213, 2.3029299790691375, 2.302824734003946, 2.303048111019102, 2.302917785553837, 2.303009241169879, 2.303041456019984, 2.3029725193237316, 2.3028861130422307, 2.3029361247953375, 2.3031756941196138, 2.3029064488149573, 2.302914064542382, 2.3029714317180696, 2.3030239932997794], "accuracy": [0.09272222965955734, 0.09311848133802414, 0.09245806187391281, 0.09826971590518951, 0.09166556596755981, 0.09826971590518951, 0.09615638852119446, 0.09536388516426086, 0.09628847241401672, 0.09734513610601425, 0.09615638852119446, 0.0944393053650856, 0.09998679161071777, 0.09879804402589798, 0.09430722147226334, 0.09192973375320435], "val_loss": [1.9736862863813127, 1.9735779762268066, 1.9736316544669015, 1.973642008645194, 1.9736533164978027, 1.9735886028834753, 1.9736814498901367, 1.9736437116350447, 1.9737083571297782, 1.97361387525286, 1.9736224583217077, 1.9736435072762626, 1.9736203466142928, 1.9736029761178153, 1.973719528743199, 1.973766803741455], "val_accuracy": [0.09866666793823242, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10233332961797714, 0.10233332961797714, 0.09866666793823242, 0.10066666454076767, 0.09866666793823242, 0.10566666722297668, 0.09866666793823242, 0.10066666454076767, 0.09799999743700027, 0.10233332961797714, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 1, 3, 4, 1, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 22, 17, 5, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), alpha))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(alpha))), grad))))))))))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301949528025409, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 3, 2, 3, 2, 9, 3, 3, 1, 3, 6, 7, 1, 1, 2, 1, 0, 2, 0, 2, 4, 8, 3, 1, 3, 1, 0, 8, 5, 8, 3, 3, 6, 9, 2, 1, 6, 5, 8, 2, 8], [2, 1, 1, 0, 2, 2, 0, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0], [75, 66, 59, 88, 4, 68, 88, 25, 21, 77], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [55, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 2, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 49, 49, 27, 22, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 6, 3, 3, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, grad), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)))), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))))), tf.math.multiply(tf.math.add(alpha, grad), grad))), tf.math.subtract(alpha, tf.math.add(alpha, grad))), alpha)), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))))), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), sigma)), beta)", "other_info": {"loss": [2682362981.033321, 403362970630.8979, 6822319205152.968, 48192691054592.27, 214541726737750.6, 708063434662795.9], "accuracy": [0.10011887550354004, 0.10051512718200684, 0.09813763201236725, 0.09853387624025345, 0.1018359512090683, 0.09681680053472519], "val_loss": [22150175012.57143, 1193919531300.5715, 12814364779666.285, 69859996673170.29, 261677535873316.56, 771842322052827.4], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 6, 3, 4, 9, 6, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301949528025409, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 6, 8, 5, 8], [2, 1, 0, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 48, 48, 29, 19, 6, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha)))))))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), grad), tf.math.negative(alpha))))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.303397550810881, 2.3028971861067262, 2.3028684091952183, 2.303317707921095, 2.3022543621289966, 2.30272645179417], "accuracy": [0.0886276587843895, 0.09087307006120682, 0.09060890227556229, 0.08241976052522659, 0.09008057415485382, 0.08809932321310043], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 1, 0, 2, 2, 0, 0, 0, 1, 1, 2, 2, 2, 1, 1, 0, 0, 2, 1], [89, 48, 98, 30, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [20, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [2.303397550810881, 2.3028971861067262, 2.3028684091952183, 2.303317707921095, 2.3022543621289966, 2.30272645179417], "accuracy": [0.0886276587843895, 0.09087307006120682, 0.09060890227556229, 0.08241976052522659, 0.09008057415485382, 0.08809932321310043], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]