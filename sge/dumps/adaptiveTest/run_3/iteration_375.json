[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 5, 4, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8122857213020325, "mapping_values": [1, 9, 9, 5, 4, 0, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [1.963892937997675, 1.7514476154490137, 1.60612955004894, 0.9915381469321588, 0.8231258522943027, 0.773653568451226, 0.7054057520740555, 0.6653456616521338, 0.6759079714666001, 0.6628158303488673, 0.5713124539259796, 0.5595170855364701, 0.5737114615050509, 0.5585705064322734, 0.5295057188581246, 0.5010763909074814, 0.49862427834144374, 0.4762907991981179, 0.48491824637661046, 0.47805712169045866, 0.4468494417164792, 0.4605054149514633, 0.45433326288536163, 0.4415578801736478, 0.4374980474105679, 0.4372599651005447, 0.40853249612595854, 0.4237397508283632, 0.3994473662508351, 0.3961182044418717, 0.38683551729016724, 0.39332265203434635, 0.3779821063171304, 0.3811139056412079, 0.3632474900701216, 0.34075245272214183, 0.3356585029078166, 0.35308575794728614, 0.36632836363366283, 0.3312299340243006, 0.3296442026073875, 0.34769711891154037], "accuracy": [0.3276977837085724, 0.3909655213356018, 0.5008585453033447, 0.6248844265937805, 0.6936996579170227, 0.7038700580596924, 0.7276449799537659, 0.7470611333847046, 0.7485140562057495, 0.7424382567405701, 0.7869502305984497, 0.7862898111343384, 0.7821952104568481, 0.7810064554214478, 0.7965922355651855, 0.8108572363853455, 0.8128384351730347, 0.8286884427070618, 0.8131026029586792, 0.8183859586715698, 0.8318583965301514, 0.8206313848495483, 0.8278959393501282, 0.8358209133148193, 0.8347642421722412, 0.8322546482086182, 0.8511425256729126, 0.8400475382804871, 0.847840428352356, 0.8470479249954224, 0.8508783578872681, 0.8519350290298462, 0.8562937378883362, 0.8582749962806702, 0.8634262084960938, 0.8739928603172302, 0.8730682730674744, 0.8668603897094727, 0.868049144744873, 0.8794082403182983, 0.8758420348167419, 0.8613129258155823], "val_loss": [1.0984572683061873, 1.1147605351039342, 0.8715677261352539, 0.6845884152821132, 0.6476378440856934, 0.580148730959211, 0.5496668304715838, 0.6469724348613194, 0.5230041061128888, 0.4977142981120518, 0.5060180595942906, 0.4539390632084438, 0.45066280024392263, 0.43037119082042147, 0.4303372417177473, 0.4287661058562143, 0.41598273175103323, 0.4295209305627005, 0.5083055325916835, 0.4151886360985892, 0.3987869620323181, 0.3989183987889971, 0.46793304170881, 0.4163334880556379, 0.39184196506227764, 0.38799295255116056, 0.36622325011662077, 0.3810292737824576, 0.4070287346839905, 0.3956781881196158, 0.3773150358881269, 0.4189067653247288, 0.3956907221249172, 0.3584755318505423, 0.35476974078587126, 0.3576100042888096, 0.3465333070073809, 0.3850646529878889, 0.3595515063830784, 0.36169526406696867, 0.4035915732383728, 0.34537828820092337], "val_accuracy": [0.5013333559036255, 0.5703333616256714, 0.6133333444595337, 0.6923333406448364, 0.6833333373069763, 0.721666693687439, 0.7519999742507935, 0.7126666903495789, 0.7559999823570251, 0.778333306312561, 0.7549999952316284, 0.8109999895095825, 0.8029999732971191, 0.8169999718666077, 0.8026666641235352, 0.8143333196640015, 0.8213333487510681, 0.8050000071525574, 0.7903333306312561, 0.8343333601951599, 0.8256666660308838, 0.828000009059906, 0.7960000038146973, 0.8236666917800903, 0.8429999947547913, 0.8333333134651184, 0.8473333120346069, 0.8399999737739563, 0.8306666612625122, 0.8306666612625122, 0.8516666889190674, 0.8069999814033508, 0.8396666646003723, 0.8539999723434448, 0.8446666598320007, 0.8463333249092102, 0.859000027179718, 0.8373333215713501, 0.8513333201408386, 0.8476666808128357, 0.8326666951179504, 0.8486666679382324]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [4, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 1, 7, 3, 4, 6, 6, 1, 4, 2, 2, 3, 8, 6, 8, 6, 4, 2, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.806857168674469, "mapping_values": [1, 4, 4, 3, 1, 1, 56, 56, 31, 25, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), alpha))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, grad))), beta)))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), grad)))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(grad)), alpha)))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.025433679943969, 1.4705949828546312, 1.0476922232713273, 0.9260151841542535, 0.8488508676415059, 0.7949488580959064, 0.7376129791296043, 0.7068647559623457, 0.7299195795153047, 0.674880095476708, 0.6658023013776997, 0.668747669426111, 0.6491422771525783, 0.6287718296460408, 0.6067235618062133, 0.5995900945467578, 0.5993744671116447, 0.5825932522365493, 0.5809505968329425, 0.565485652923395, 0.554472166431295, 0.5470713201200234, 0.538500805501657, 0.540387654911494, 0.522325063976771, 0.5216011939315182, 0.5158159889486472, 0.5077057125396449, 0.4875757119926747, 0.5105987934349172, 0.48983470027819287, 0.4865484237513443, 0.4767286931802379, 0.4749048606098572, 0.46013523111757804, 0.44978217564286055, 0.45484802799217927, 0.4519491635765839, 0.43937185930223227, 0.4581981532058192, 0.4409933029865277, 0.4450047423913258, 0.43395751147474265, 0.4322449534741753, 0.41335767701616566, 0.4163253412010836, 0.40670679742082894, 0.40205346594050795, 0.41300659420751323, 0.3987459053555185, 0.3892233578551951, 0.38180347387470415, 0.3892216151613428, 0.3878695020318551, 0.3794121982839995, 0.37959842832805524, 0.3690004419806517, 0.3637185133034133, 0.3755665589962905, 0.3538594022560523, 0.35683553422116143, 0.357069240896032, 0.359553207881604, 0.34970246133960514, 0.3485520699902485, 0.33866428482990696, 0.3239113427723215, 0.3386356789579859, 0.34087388262127083, 0.3268525943449381, 0.32740552796821204], "accuracy": [0.32862237095832825, 0.4707436263561249, 0.6211860775947571, 0.6567164063453674, 0.6839255094528198, 0.6989829540252686, 0.7193237543106079, 0.7338528633117676, 0.7279091477394104, 0.7411174178123474, 0.7417778372764587, 0.7448157668113708, 0.7580240368843079, 0.7549861073493958, 0.7711002230644226, 0.7728173136711121, 0.7646281719207764, 0.7792893648147583, 0.7737419009208679, 0.7803460359573364, 0.7907806038856506, 0.7935543656349182, 0.8004226684570312, 0.7950072884559631, 0.8006868362426758, 0.8004226684570312, 0.8043851256370544, 0.8083476424217224, 0.8157442808151245, 0.8031964302062988, 0.8185180425643921, 0.8156121969223022, 0.824329674243927, 0.8193105459213257, 0.8273676037788391, 0.8323867321014404, 0.8264430165290833, 0.8278959393501282, 0.8352925777435303, 0.8284242749214172, 0.8359529972076416, 0.8300092220306396, 0.8355567455291748, 0.8354246616363525, 0.8491612672805786, 0.8429533839225769, 0.8487650156021118, 0.8488970994949341, 0.8436138033866882, 0.8525954484939575, 0.8511425256729126, 0.8576145768165588, 0.8536521196365356, 0.8535200357437134, 0.8564258217811584, 0.8584070801734924, 0.8642187118530273, 0.8664641380310059, 0.857218325138092, 0.8709549307823181, 0.8677849769592285, 0.8684453964233398, 0.8692378997802734, 0.8688416481018066, 0.8704266548156738, 0.8771628737449646, 0.8817857503890991, 0.873860776424408, 0.8720116019248962, 0.8757099509239197, 0.8790120482444763], "val_loss": [1.5934861728123255, 1.0364933354513985, 0.7182146310806274, 0.654199344771249, 0.6112987995147705, 0.5947472367967878, 0.5554883309773037, 0.6574112006596157, 0.5759862661361694, 0.5504521131515503, 0.5200788634163993, 0.49354517459869385, 0.5096681118011475, 0.4818400485174997, 0.48985343320029123, 0.47663755076272146, 0.5046684571674892, 0.49007746151515413, 0.473011919430324, 0.4745622362409319, 0.46146128858838764, 0.4815840039934431, 0.5243591921670097, 0.4537022113800049, 0.42889978204454693, 0.48575239522116526, 0.4244415078844343, 0.42916935682296753, 0.4679180213383266, 0.42217988627297537, 0.4301315120288304, 0.4176367521286011, 0.4422262225832258, 0.4099348613194057, 0.39895039796829224, 0.3989922063691275, 0.38992020062037874, 0.4026187913758414, 0.41091283730098177, 0.44399782589503695, 0.41553435155323576, 0.3789642368044172, 0.38547022002083914, 0.3830807294164385, 0.3877565179552351, 0.3689136249678476, 0.37749095473970684, 0.37466623953410555, 0.3719753623008728, 0.39784880195345196, 0.37675927366529194, 0.3745130981717791, 0.36355758564812796, 0.3783618467194693, 0.3680245280265808, 0.35620252575193134, 0.35194280317851473, 0.3494407449449812, 0.352198737008231, 0.36410002197538105, 0.3478621244430542, 0.34960360186440603, 0.34976573501314434, 0.34625424657549175, 0.34559573446001324, 0.3408862692969186, 0.33963469096592497, 0.35958885295050486, 0.3443076866013663, 0.34028880085263935, 0.349775493144989], "val_accuracy": [0.35366666316986084, 0.5249999761581421, 0.6653333306312561, 0.7136666774749756, 0.7286666631698608, 0.7273333072662354, 0.7536666393280029, 0.6913333535194397, 0.737333357334137, 0.7493333220481873, 0.7683333158493042, 0.778333306312561, 0.7749999761581421, 0.7850000262260437, 0.7846666574478149, 0.7889999747276306, 0.765666663646698, 0.7733333110809326, 0.7913333177566528, 0.7993333339691162, 0.7973333597183228, 0.7833333611488342, 0.7559999823570251, 0.7990000247955322, 0.8176666498184204, 0.7893333435058594, 0.8236666917800903, 0.8240000009536743, 0.79666668176651, 0.8166666626930237, 0.8180000185966492, 0.8246666789054871, 0.8080000281333923, 0.8273333311080933, 0.831333339214325, 0.8326666951179504, 0.8339999914169312, 0.8306666612625122, 0.8286666870117188, 0.79666668176651, 0.8226666450500488, 0.8379999995231628, 0.8323333263397217, 0.8320000171661377, 0.8366666436195374, 0.8413333296775818, 0.8349999785423279, 0.8420000076293945, 0.8443333506584167, 0.8206666707992554, 0.8446666598320007, 0.8420000076293945, 0.8463333249092102, 0.8379999995231628, 0.8386666774749756, 0.8463333249092102, 0.8486666679382324, 0.8519999980926514, 0.8526666760444641, 0.8486666679382324, 0.8539999723434448, 0.847000002861023, 0.8513333201408386, 0.8526666760444641, 0.8519999980926514, 0.8576666712760925, 0.8536666631698608, 0.8496666550636292, 0.8536666631698608, 0.8529999852180481, 0.846666693687439]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8059999942779541, "mapping_values": [1, 9, 9, 5, 4, 0, 15, 15, 11, 4, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [1.9639049230108738, 1.752483806369516, 1.739603647655421, 1.4191196664701349, 1.0122430131986802, 0.8085952189384025, 0.7138940698561053, 0.6990632154150819, 0.6845422186052889, 0.6317994280136052, 0.597561260885834, 0.5712009412524974, 0.5649644812305039, 0.5641682180691042, 0.522845407668169, 0.4987553758407707, 0.5247276663669994, 0.48341360329605443, 0.5036597737168844], "accuracy": [0.32782986760139465, 0.3907013535499573, 0.4625544846057892, 0.4998018741607666, 0.6310923099517822, 0.6880200505256653, 0.7279091477394104, 0.7358341217041016, 0.7416457533836365, 0.7572315335273743, 0.7728173136711121, 0.7824593782424927, 0.7854973077774048, 0.7790252566337585, 0.8004226684570312, 0.8115176558494568, 0.7965922355651855, 0.8238013386726379, 0.8061022162437439], "val_loss": [1.1000475542885917, 1.1202285630362374, 0.8357033559254238, 1.0684282439095634, 0.6616089344024658, 0.5897571359361921, 0.5625449759619576, 0.6713335854666573, 0.546351534979684, 0.5192587205341884, 0.4995428834642683, 0.45944312640598844, 0.4653442757470267, 0.42567422560283114, 0.4272232396262033, 0.4654533181871687, 0.4225324477468218, 0.434801527432033, 0.4279526046344212], "val_accuracy": [0.500333309173584, 0.5839999914169312, 0.6620000004768372, 0.6143333315849304, 0.6919999718666077, 0.7129999995231628, 0.7390000224113464, 0.6976666450500488, 0.7670000195503235, 0.7636666893959045, 0.7603333592414856, 0.7963333129882812, 0.796999990940094, 0.8176666498184204, 0.8069999814033508, 0.7723333239555359, 0.8169999718666077, 0.809333324432373, 0.8140000104904175]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 8, 4, 0, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 4, 6, 2, 1, 4, 2, 2, 3, 4, 6, 8, 0, 4, 0, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.8054285645484924, "mapping_values": [1, 7, 7, 4, 3, 0, 38, 38, 21, 17, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.sqrt(tf.math.negative(tf.math.add(beta, grad))))), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.sqrt(alpha)))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)))))))))), beta)), tf.math.add(beta, tf.math.subtract(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.025473914771835, 1.4711895678667202, 1.054975106172621, 0.9282393431493462, 0.8425778355171432, 0.7849839984811671, 0.7487428392779479, 0.7139799790044802, 0.7251633147458989, 0.6802720245101338, 0.6663273556546417, 0.6712041986916027, 0.6443881392085306, 0.627031158761672, 0.6023274652631354, 0.6043225842192346, 0.5922038317466723, 0.5801581178973018, 0.5792217034358925, 0.5570919857663155, 0.5507461812439186, 0.5448095307311109, 0.5363257448072715, 0.5443752562412417, 0.5179250838025654, 0.5177772753998556, 0.5138051799968281, 0.5026450093081284, 0.48319056803728877, 0.5094595792515245, 0.487480655747508, 0.4826759053078058, 0.4737862297147414, 0.4713169482516071, 0.45922919638231524, 0.4491377361792898, 0.45484889140533435, 0.4481745158180569, 0.43895296286188806, 0.4581699421329899, 0.4337634373421304], "accuracy": [0.328490287065506, 0.4710077941417694, 0.6188086271286011, 0.6598864197731018, 0.6847180128097534, 0.7086250185966492, 0.7169462442398071, 0.7281733155250549, 0.7309470176696777, 0.7407211661338806, 0.7429665923118591, 0.7397965788841248, 0.7561748623847961, 0.7574957013130188, 0.7736098170280457, 0.7691190242767334, 0.7709681391716003, 0.7808743715286255, 0.774270236492157, 0.7814027070999146, 0.7902522683143616, 0.7922335267066956, 0.8010830879211426, 0.7942147850990295, 0.8018755912780762, 0.8057059645652771, 0.8061022162437439, 0.8095363974571228, 0.8164047002792358, 0.8037247657775879, 0.8187822103500366, 0.8182538747787476, 0.824329674243927, 0.8231409192085266, 0.8257825970649719, 0.8329150676727295, 0.8249900937080383, 0.8296129703521729, 0.8378021121025085, 0.8301413059234619, 0.8401796221733093], "val_loss": [1.5960873876299178, 1.0467730930873327, 0.7053075007029942, 0.6530615602220807, 0.6113775798252651, 0.60422454561506, 0.5532528162002563, 0.6724139962877546, 0.5813454900469098, 0.5515295948301043, 0.5250938790185111, 0.4977872541972569, 0.5077355759484428, 0.47905594961983816, 0.509371450969151, 0.4742345299039568, 0.5213076046534947, 0.47684173924582346, 0.4764516694205148, 0.4706963981900896, 0.45971175602504183, 0.47882117543901714, 0.528079799243382, 0.44889083930424284, 0.4264785647392273, 0.4895827940532139, 0.4215726511819022, 0.42617558581488474, 0.4855420078550066, 0.42311721188681467, 0.4177104319844927, 0.4200243183544704, 0.4277630703789847, 0.4076047454561506, 0.3969437565122332, 0.3934584515435355, 0.39023670979908537, 0.3971896597317287, 0.4116403119904654, 0.4255209650312151, 0.40983217103140696], "val_accuracy": [0.35333332419395447, 0.5233333110809326, 0.6803333163261414, 0.7160000205039978, 0.7273333072662354, 0.7246666550636292, 0.753333330154419, 0.6913333535194397, 0.7229999899864197, 0.7523333430290222, 0.7649999856948853, 0.778333306312561, 0.7706666588783264, 0.7893333435058594, 0.7699999809265137, 0.7903333306312561, 0.7483333349227905, 0.7866666913032532, 0.7889999747276306, 0.8006666898727417, 0.8006666898727417, 0.7886666655540466, 0.753000020980835, 0.8013333082199097, 0.8196666836738586, 0.7886666655540466, 0.8236666917800903, 0.8223333358764648, 0.7829999923706055, 0.8186666369438171, 0.8293333053588867, 0.8253333568572998, 0.8163333535194397, 0.82833331823349, 0.8333333134651184, 0.8379999995231628, 0.8346666693687439, 0.8336666822433472, 0.828000009059906, 0.8090000152587891, 0.8243333101272583]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 6, 0, 2, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 4, 3, 9, 1, 4, 6, 2, 3, 9, 6, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [69, 13, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.8002856969833374, "mapping_values": [1, 9, 9, 5, 4, 2, 23, 23, 13, 10, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, grad))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0254334685446924, 1.4716888717168422, 1.0459192156823178, 0.9201410974981983, 0.8376584838032172, 0.7909316663587129, 0.7404008283276269, 0.7135808255772911, 0.7247201758463306, 0.6895835415451927, 0.6628483310666586, 0.6607854548163181, 0.6428780240657355, 0.6189918422097496, 0.6110892573824459, 0.5984140040773395, 0.5940399092847582, 0.5809657400735475, 0.5847016428565903, 0.5609945896326543, 0.5536657487632828, 0.5464290983294924, 0.5265887875078912, 0.5522141582804302, 0.5144756346755984, 0.5200867000556405, 0.512792749585036, 0.5078960401373234, 0.48319978946471775, 0.5074227080605269, 0.49122510992729623, 0.48677391847914175, 0.48225408714161794], "accuracy": [0.32862237095832825, 0.4711398780345917, 0.6221106648445129, 0.6556597352027893, 0.6852463483810425, 0.7042662501335144, 0.718399167060852, 0.7268524765968323, 0.7275128960609436, 0.735569953918457, 0.7469290494918823, 0.7469290494918823, 0.7582882046699524, 0.7621186375617981, 0.7680623531341553, 0.7749306559562683, 0.7708360552787781, 0.7765156626701355, 0.7729493975639343, 0.7828556299209595, 0.7906485199928284, 0.7957997918128967, 0.8047813773155212, 0.7913089394569397, 0.8013472557067871, 0.8035926818847656, 0.8079513907432556, 0.8109893202781677, 0.8195747137069702, 0.8061022162437439, 0.8189142942428589, 0.8144234418869019, 0.8202351331710815], "val_loss": [1.593707595552717, 1.0334467206682478, 0.7374491180692401, 0.6645419086728778, 0.605956895010812, 0.6102960109710693, 0.5653813396181379, 0.6423674140657697, 0.5575520140784127, 0.5361878190721784, 0.5293440478188651, 0.49134864125932964, 0.5025932788848877, 0.47748325552259174, 0.49750074318477083, 0.4815110649381365, 0.5131048134395054, 0.4817359617778233, 0.47483628136771067, 0.4826944725854056, 0.47558477946690153, 0.44817824023110525, 0.5193197386605399, 0.4472183329718454, 0.4255064470427377, 0.4783085414341518, 0.4243686539786203, 0.4242897203990391, 0.46347114018031527, 0.4230089357921055, 0.42940655776432585, 0.42957065786634174, 0.4369989889008658], "val_accuracy": [0.35366666316986084, 0.5323333144187927, 0.6470000147819519, 0.6966666579246521, 0.731333315372467, 0.722000002861023, 0.7429999709129333, 0.7003333568572998, 0.7519999742507935, 0.7636666893959045, 0.7676666378974915, 0.7803333401679993, 0.7789999842643738, 0.7846666574478149, 0.7820000052452087, 0.7853333353996277, 0.7540000081062317, 0.7793333530426025, 0.7903333306312561, 0.7976666688919067, 0.7816666960716248, 0.8050000071525574, 0.765999972820282, 0.7990000247955322, 0.8169999718666077, 0.7923333048820496, 0.8220000267028809, 0.8233333230018616, 0.7983333468437195, 0.8196666836738586, 0.8173333406448364, 0.8190000057220459, 0.8100000023841858]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 8, 6, 5, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 3, 9, 5, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 1, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7985714077949524, "mapping_values": [1, 7, 7, 5, 2, 2, 16, 16, 12, 4, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, alpha), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.097204671449602, 1.6111544513305605, 1.156387001563372, 0.9174602251515145, 0.8100380549467376, 0.7677191482905337, 0.7110623164404306, 0.6865374679972294, 0.6425829629195191, 0.6342491308113273, 0.6284426520403271, 0.5858097160103425, 0.5684946715760901, 0.5469182822225966, 0.5445029393493885, 0.5279572629311364, 0.51034929072616, 0.5102350069877888, 0.5050135677941896, 0.4901976440371996, 0.46453835135673915, 0.4556008912332621, 0.45601348000479064, 0.4614944845819832], "accuracy": [0.30722492933273315, 0.44710078835487366, 0.5779950022697449, 0.6597543358802795, 0.6952846646308899, 0.7135120630264282, 0.7384757399559021, 0.7424382567405701, 0.7556465268135071, 0.7540615797042847, 0.7619865536689758, 0.7724210619926453, 0.785101056098938, 0.7967243194580078, 0.7911768555641174, 0.798309326171875, 0.809140145778656, 0.8105930685997009, 0.8100647330284119, 0.8145555257797241, 0.8230088353157043, 0.8298771381378174, 0.8281601071357727, 0.8276317715644836], "val_loss": [1.340357678277152, 1.0984627178737096, 0.6746259587151664, 0.6548523391996112, 0.5625842979976109, 0.6806206021990094, 0.5413317510059902, 0.5248731204441616, 0.5214772735323224, 0.4857550007956369, 0.4857150486537388, 0.49987614154815674, 0.45009173665727886, 0.5024133750370571, 0.44225737878254484, 0.4159362316131592, 0.4523711715425764, 0.4161494714873178, 0.40070949281964985, 0.4130737100328718, 0.42890376704079763, 0.4508035182952881, 0.4969585452760969, 0.42291983536311556], "val_accuracy": [0.44999998807907104, 0.5376666784286499, 0.6959999799728394, 0.6946666836738586, 0.7453333139419556, 0.7043333053588867, 0.7663333415985107, 0.7559999823570251, 0.7633333206176758, 0.7883333563804626, 0.765666663646698, 0.7689999938011169, 0.8050000071525574, 0.7613333463668823, 0.812666654586792, 0.8216666579246521, 0.7799999713897705, 0.824999988079071, 0.8293333053588867, 0.8240000009536743, 0.809333324432373, 0.7833333611488342, 0.7796666622161865, 0.8019999861717224]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 7, 0, 9, 6, 9, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 37, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7925714254379272, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.025010316851526, 1.3650569464662496, 1.0176984923091532, 0.9015032584877251, 0.8486939517892095, 0.7914856970900668, 0.7492525804359301, 0.7365356532259231, 0.6986118824789631, 0.6838946132029462, 0.6632362466919077, 0.6489842054535605, 0.6421263599990933, 0.6421388108669539, 0.6145587647753211, 0.597233050235778, 0.6013496876502978], "accuracy": [0.3385286033153534, 0.5171047449111938, 0.6297714710235596, 0.6762647032737732, 0.6896050572395325, 0.7069079279899597, 0.7231541275978088, 0.7235503792762756, 0.7413815855979919, 0.7430986762046814, 0.7531369924545288, 0.7592127919197083, 0.7565711140632629, 0.7593448758125305, 0.7688548564910889, 0.778761088848114, 0.765949010848999], "val_loss": [1.285837241581508, 0.8116669654846191, 0.7992919853755406, 0.6374426228659493, 0.61213561466762, 0.5950466564723423, 0.5954379524503436, 0.5689505679266793, 0.5637957538877215, 0.5243497576032367, 0.5580555881772723, 0.49241954939705984, 0.5479131937026978, 0.49563162667410715, 0.4906362465449742, 0.4996882506779262, 0.49553702558789936], "val_accuracy": [0.5180000066757202, 0.6673333048820496, 0.6510000228881836, 0.7163333296775818, 0.718999981880188, 0.7316666841506958, 0.7323333621025085, 0.7276666760444641, 0.7436666488647461, 0.7689999938011169, 0.746666669845581, 0.7860000133514404, 0.7543333172798157, 0.7836666703224182, 0.7763333320617676, 0.7646666765213013, 0.7743333578109741]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 4, 2, 5, 2, 8, 9, 1, 6, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.7599999904632568, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 12, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), beta)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0303770310496767, 1.3421504834167175, 1.0420383658344248, 0.892734786263074, 0.8505790693932174, 0.8102408435917517, 0.7532668581586457, 0.7096651282607761, 0.689380718228556, 0.6815042515724342, 0.6538255889543909, 0.6402695098604745, 0.617165808341664], "accuracy": [0.32862237095832825, 0.5304450988769531, 0.6305639743804932, 0.6699247360229492, 0.6845859289169312, 0.6972658634185791, 0.7165499925613403, 0.7386078238487244, 0.7471932172775269, 0.744419515132904, 0.754589855670929, 0.7630431652069092, 0.7693831920623779], "val_loss": [1.265064069202968, 0.8200792925698417, 0.7086770364216396, 0.8374231372560773, 0.6593104260308402, 0.6238077538354057, 0.5758030584880284, 0.5391864606312343, 0.5635088000978742, 0.5239905629839215, 0.5284106050218854, 0.5560199192592076, 0.5304473127637591], "val_accuracy": [0.4346666634082794, 0.6666666865348816, 0.6806666851043701, 0.6119999885559082, 0.7113333344459534, 0.687666654586792, 0.7459999918937683, 0.7580000162124634, 0.7519999742507935, 0.7559999823570251, 0.7559999823570251, 0.7429999709129333, 0.7513333559036255]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 3, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 8, 6, 8, 0, 4, 0, 5, 4, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 2, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 52, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), grad), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302062384787174, 2.302980109606405, 2.3028865007912684, 2.3029633041984447, 2.3030967028102287, 2.3029917725923434], "accuracy": [0.09945846349000931, 0.09496764093637466, 0.09285431355237961, 0.09298639744520187, 0.09417514503002167, 0.0956280529499054], "val_loss": [1.9736104692731584, 1.9736571311950684, 1.9735976627894811, 1.9737023626055037, 1.9737708227975028, 1.9736581529889787], "val_accuracy": [0.10566666722297668, 0.09799999743700027, 0.10066666454076767, 0.09833333641290665, 0.09866666793823242, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 5, 4, 0, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 6, 6, 9, 1, 4, 6, 2, 6, 8, 6, 8, 0, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 2, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 44, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301762786224581, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 6, 6, 9, 1, 8, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 2, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 13, 10, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.math.multiply(beta, alpha)))))))), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2], [7, 80, 61], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 5, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [87, 19, 11, 60, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 0, 9, 9, 7, 2, 3, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 8, 4, 5, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 2, 3, 9, 8, 3, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [4, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 19, 19, 13, 6, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), grad))), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.301466111729977, 2.302287714529535, 2.302476787327807, 2.3028777689588007, 2.304492836977276, 2.3112779124978826], "accuracy": [0.10619468986988068, 0.10540219396352768, 0.10342095047235489, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973721708570208, 1.9738615580967493, 1.9741943223135812, 1.9752603939601354, 1.9788780212402344, 1.9918011256626673], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [1, 2, 4, 0, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 4, 6, 9, 1, 4, 2, 2, 3, 6, 6, 3, 0, 4, 0, 5, 8, 6, 0, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 32, 37, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 0, 38, 38, 22, 16, 4, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))), tf.math.add(beta, grad))))))))))), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))))))), tf.math.add(beta, grad)))), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.301762786224581, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 0, 9, 6, 5, 1, 9, 2, 5, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [8, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 15, 7, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)))))))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(beta))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1], [9, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [39, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 1, 6, 9, 1, 9, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 2, 9, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [8, 49, 15, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 34, 34, 23, 11, 3, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), beta)), tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))))))))), tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), grad))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [1818911.0332559685, 33678542.618940696, 157190258.06472063, 437807034.50534934, 934164402.1619337, 1710161271.2592788], "accuracy": [0.09602430462837219, 0.09457138925790787, 0.10394927859306335, 0.09985470771789551, 0.09972262382507324, 0.10170386731624603], "val_loss": [6682922.857142857, 53317462.85714286, 179784704.0, 425965988.5714286, 831741641.1428572, 1436995145.142857], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [5, 8, 4, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 0, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [9, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 15, 15, 11, 4, 5, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301762786224581, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [39, 71, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 9, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 1, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [8, 2, 15, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [5, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301762786224581, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 4, 0, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [77, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 7, 3, 9, 8, 5, 1, 4, 9, 0, 0, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 1, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [29, 7, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 5, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [94, 9, 76, 58]], "fitness": -0.06485714018344879, "mapping_values": [1, 7, 7, 4, 3, 0, 21, 21, 15, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))))), grad))))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))", "other_info": {"loss": [2.301894894050585, 2.302023858757004, 2.300443446048892, 2.3005303665159116, 2.300894258863434, 2.3007892318106347, 2.3000253375810074, 2.2992711827393144, 2.299440739444848, 2.299341971611917, 2.3000149629875306, 2.299858630246742, 2.2999661555458384, 2.2997262540856815], "accuracy": [0.0936468094587326, 0.08849557489156723, 0.09509972482919693, 0.09800554811954498, 0.08928807079792023, 0.08981640636920929, 0.09338264167308807, 0.1018359512090683, 0.0952318087220192, 0.10236428678035736, 0.09642054885625839, 0.09655263274908066, 0.09906221181154251, 0.09272222965955734], "val_loss": [1.9705441338675362, 1.9699183872767858, 1.9696807180132185, 1.969578742980957, 1.9695944104875838, 1.9695850099836076, 1.969491686139788, 1.9693761553083147, 1.9693657330104284, 1.9694006102425712, 1.9695953641619002, 1.9697905949183874, 1.9700496537344796, 1.9703222002301897], "val_accuracy": [0.03966666758060455, 0.05000000074505806, 0.054999999701976776, 0.057999998331069946, 0.061000000685453415, 0.0663333311676979, 0.0716666653752327, 0.07733333110809326, 0.07833333313465118, 0.07699999958276749, 0.07699999958276749, 0.07666666805744171, 0.07500000298023224, 0.07333333045244217]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1], [2, 8, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 7, 3, 1, 6, 9, 1, 9, 2, 2, 3, 8, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 2, 1, 1, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 37, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 8, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 24, 13, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(beta)))))), tf.math.add(beta, alpha))), tf.math.add(beta, alpha)))), tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), alpha))))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))", "other_info": {"loss": [2.302206685498658, 2.303374346583322, 2.302139538815465, 2.3028055204455216, 2.3034810510372616, 2.3031763002904273], "accuracy": [0.09311848133802414, 0.08228767663240433, 0.09021265059709549, 0.09179764986038208, 0.08585391938686371, 0.08889182657003403], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]