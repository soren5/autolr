[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 3, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8237142562866211, "mapping_values": [1, 10, 10, 7, 3, 3, 15, 15, 9, 6, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.negative(grad))), tf.math.subtract(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1429410649958287, 1.916725873380305, 1.9491805825424295, 1.4021126354816111, 0.9834488943236899, 0.7754911709817456, 0.7419332159335477, 0.6563988580774275, 0.6376506933966302, 0.6158473084253516, 0.5783169185480721, 0.5759946802162837, 0.5419168648718528, 0.5558089341910728, 0.5489657954485693, 0.5166835513971171, 0.5176853331765636, 0.4791630135078818, 0.48226256542013085, 0.46898182760518164, 0.48312698030484397, 0.4536837468908101, 0.45731607492432036, 0.458871475969402, 0.44909578334653794, 0.44338347552915713, 0.44452772918252614, 0.4405349568172201, 0.41785341152866456, 0.4037410453081981, 0.39068092017078665, 0.40966825677088586, 0.39783792282139635, 0.3840252045886927, 0.40103607749454, 0.3929993541461759], "accuracy": [0.29626205563545227, 0.3135649263858795, 0.36547350883483887, 0.495839387178421, 0.6362435817718506, 0.7170783281326294, 0.7127195596694946, 0.7471932172775269, 0.7584202885627747, 0.7651565074920654, 0.7807422876358032, 0.7803460359573364, 0.7898560166358948, 0.7865539789199829, 0.7921014428138733, 0.7992339134216309, 0.7969884872436523, 0.8185180425643921, 0.8197067975997925, 0.817461371421814, 0.8145555257797241, 0.833179235458374, 0.8267071843147278, 0.822348415851593, 0.8310658931732178, 0.8327829837799072, 0.834632158279419, 0.8368775844573975, 0.8387266993522644, 0.8432175517082214, 0.8520671129226685, 0.842028796672821, 0.8511425256729126, 0.8552370667457581, 0.8481045961380005, 0.8518029451370239], "val_loss": [1.7909340177263533, 2.080550398145403, 1.1948159081595284, 0.8416800158364433, 0.7741710799080985, 0.6305001633507865, 0.5428564548492432, 0.5167063474655151, 0.5389504262379238, 0.4981724875313895, 0.47220819337027414, 0.48482704162597656, 0.4609055689402989, 0.4494318280901228, 0.44563216822487967, 0.41549751588276457, 0.40934267214366366, 0.43621136460985455, 0.4268876739910671, 0.45874818733760286, 0.42182316950389315, 0.40209821292332243, 0.4476081643785749, 0.3950792040143694, 0.38900135244641987, 0.4254646301269531, 0.3996294140815735, 0.41689956188201904, 0.37867023263658794, 0.38447544404438566, 0.37971016338893343, 0.37036614758627756, 0.37702557018824984, 0.38025552885872976, 0.40677852290017263, 0.42122998407908846], "val_accuracy": [0.22866666316986084, 0.30133333802223206, 0.5766666531562805, 0.612333357334137, 0.7120000123977661, 0.7073333263397217, 0.7509999871253967, 0.7689999938011169, 0.7620000243186951, 0.7746666669845581, 0.7923333048820496, 0.7743333578109741, 0.7873333096504211, 0.7986666560173035, 0.8033333420753479, 0.8180000185966492, 0.8220000267028809, 0.7990000247955322, 0.809333324432373, 0.7906666398048401, 0.8233333230018616, 0.828000009059906, 0.8166666626930237, 0.828000009059906, 0.8366666436195374, 0.8033333420753479, 0.8263333439826965, 0.8180000185966492, 0.8396666646003723, 0.8399999737739563, 0.8443333506584167, 0.8423333168029785, 0.8399999737739563, 0.8410000205039978, 0.8326666951179504, 0.8230000138282776]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8231428861618042, "mapping_values": [1, 5, 5, 3, 2, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1429398875147707, 1.8976486640567902, 2.0451192664054596, 1.5406433977014464, 1.0256288357698025, 0.7646175120579426, 0.7234571454405643, 0.6788838262004371, 0.6452046382413045, 0.6575501732161142, 0.5922804672987926, 0.5986736701338157, 0.5632231711727234, 0.5400059909758205, 0.526365379119798, 0.5290435590779918, 0.5267659259699025, 0.4876612137298007, 0.48801189873590445, 0.4761606994526749, 0.4812634920423624, 0.46013864896883505, 0.4730559499579304, 0.45462442630427846, 0.4515794946013377, 0.44900111540937465, 0.43540038207990933, 0.4440941527739744, 0.4227784159609891, 0.41711502474501555, 0.39390639036700964, 0.39127909757709617, 0.41271552862335015, 0.40580268885402504, 0.39599470509010265, 0.4112454825593275, 0.3902935267730774], "accuracy": [0.2969224750995636, 0.3160744905471802, 0.3419627547264099, 0.47430986166000366, 0.6275261044502258, 0.7162858247756958, 0.7235503792762756, 0.7403249144554138, 0.7530049085617065, 0.7524765729904175, 0.7761194109916687, 0.7708360552787781, 0.7849689722061157, 0.7947431206703186, 0.8021397590637207, 0.7946110367774963, 0.7954035401344299, 0.8149517774581909, 0.8133667707443237, 0.8162726163864136, 0.8133667707443237, 0.8239334225654602, 0.8142913579940796, 0.8256505131721497, 0.8329150676727295, 0.8310658931732178, 0.8379341959953308, 0.8309338092803955, 0.8412362933158875, 0.8397833704948425, 0.8510104417800903, 0.8512746095657349, 0.8404437899589539, 0.8441421389579773, 0.8524633646011353, 0.8438779711723328, 0.8525954484939575], "val_loss": [1.7888144084385462, 2.327073301587786, 0.9548944745744977, 0.9439436367579869, 0.6939195735113961, 0.5857786621366229, 0.5236024345670428, 0.5755131074360439, 0.5915746007646833, 0.5165351118360247, 0.45789185592106413, 0.4570219857352121, 0.44017982482910156, 0.4542414801461356, 0.45165019375937326, 0.49153147424970356, 0.4118770360946655, 0.41201893772397724, 0.4424572331564767, 0.4667773076466152, 0.4092995694705418, 0.39614223582404, 0.4382245029721941, 0.41410969836371286, 0.41834302459444317, 0.39357759271349224, 0.3960866757801601, 0.4035518765449524, 0.37781481231961933, 0.3762819937297276, 0.3816895144326346, 0.3675655552319118, 0.3809074078287397, 0.38941111734935213, 0.3992340735026768, 0.40096631220408846, 0.39779809543064665], "val_accuracy": [0.22866666316986084, 0.3256666660308838, 0.6043333411216736, 0.6163333058357239, 0.718666672706604, 0.7390000224113464, 0.762333333492279, 0.7353333234786987, 0.7433333396911621, 0.7616666555404663, 0.8063333630561829, 0.7993333339691162, 0.8136666417121887, 0.7979999780654907, 0.7946666479110718, 0.7703333497047424, 0.8209999799728394, 0.8186666369438171, 0.800000011920929, 0.7796666622161865, 0.824999988079071, 0.824999988079071, 0.8153333067893982, 0.8206666707992554, 0.8169999718666077, 0.8330000042915344, 0.8233333230018616, 0.8256666660308838, 0.8376666903495789, 0.8433333039283752, 0.8393333554267883, 0.8479999899864197, 0.8453333377838135, 0.8366666436195374, 0.8326666951179504, 0.8316666483879089, 0.8296666741371155]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 1, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7965714335441589, "mapping_values": [1, 5, 5, 3, 2, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1746415914309543, 2.0689029989304277, 1.661189683361328, 1.3054346605582308, 1.0281616730728422, 0.8523725622428674, 0.7980275461466211, 0.7193040277475788, 0.6822193719219333, 0.6760786203361222, 0.6213869871228457, 0.6035684519015, 0.6341065597367277, 0.5674353859695729, 0.5808731164788652], "accuracy": [0.2693171203136444, 0.3700964152812958, 0.4566107392311096, 0.5495971441268921, 0.6325452327728271, 0.6732267737388611, 0.6985867023468018, 0.7293620109558105, 0.7457403540611267, 0.7458723783493042, 0.7629110813140869, 0.7771760821342468, 0.7630431652069092, 0.7936864495277405, 0.78113853931427], "val_loss": [1.9434548105512346, 1.3895979608808244, 1.1859149251665388, 0.7582388775689262, 0.6753242867333549, 0.6347306966781616, 0.5804169859204974, 0.5524333374840873, 0.5516629900251117, 0.48881494998931885, 0.4967493840626308, 0.4890581709997995, 0.4749945913042341, 0.48686766624450684, 0.5299300977161953], "val_accuracy": [0.19033333659172058, 0.5526666641235352, 0.5709999799728394, 0.6936666369438171, 0.6850000023841858, 0.7149999737739563, 0.7450000047683716, 0.7563333511352539, 0.7423333525657654, 0.7860000133514404, 0.7693333625793457, 0.7853333353996277, 0.7816666960716248, 0.7583333253860474, 0.7713333368301392]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [52, 9, 76, 58]], "fitness": -0.41428571939468384, "mapping_values": [1, 3, 3, 1, 2, 2, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, beta), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.337473282960774, 2.3062112437515148, 2.3000935670517344, 2.059229518759126, 3.0152298220711424, 1.9507340496053407], "accuracy": [0.19653943181037903, 0.16642451286315918, 0.11121384054422379, 0.2817329168319702, 0.18002906441688538, 0.33522653579711914], "val_loss": [1.6310292652675085, 1.9730348587036133, 1.955011980874198, 1.7787084579467773, 1.8814783777509416, 1.7445621490478516], "val_accuracy": [0.39266666769981384, 0.13500000536441803, 0.23899999260902405, 0.1783333271741867, 0.20999999344348907, 0.3216666579246521]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 1], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 0, 8, 8, 6, 7, 4, 5, 6], [1, 1, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 2, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 1, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 0, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6, 9, 6, 8, 3, 4, 3], [3, 0, 2, 1, 0, 0, 2, 2, 3], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 24, 15, 9, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), beta), beta), sigma))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [5, 2, 2, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [38, 80, 41], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 6, 8, 8, 6, 3, 4, 5, 6, 6, 8, 1, 3, 8, 6, 2, 3, 6, 1, 2, 2, 9, 2, 3, 9, 2, 6, 4, 3, 4, 2, 9, 0, 0, 3, 9, 2, 2, 3, 2, 7, 8, 5, 3, 8, 3, 2, 5, 5, 2, 9, 2, 9, 0, 9, 8, 7, 6, 6, 3, 6, 7, 0, 2, 9, 4], [2, 3, 2, 1, 0, 2, 2, 1, 2, 1, 1, 3, 0, 1, 0, 1, 0, 3, 1, 0, 2, 0, 2, 1, 3, 1, 0, 2, 3, 0, 3, 0, 1, 1, 0, 1, 0], [48, 9, 76, 58, 86, 57, 29, 74, 19, 61, 13, 75, 52, 80, 94, 5, 10, 85, 35, 13, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 12, 12, 7, 5, 0, 1, 1, 0, 1, 0, 26, 15, 11, 1], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(alpha))))))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(sigma)), tf.math.divide_no_nan(tf.math.multiply(beta, alpha), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(beta, tf.math.sqrt(beta)), tf.math.subtract(tf.math.multiply(tf.math.sqrt(alpha), tf.math.divide_no_nan(beta, alpha)), alpha)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [4, 67, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [94, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(alpha)))))), tf.math.negative(grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 3, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.303016349608321, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [48, 67, 1], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 6, 0, 5, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [45, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 10, 10, 6, 4, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.square(grad)))), tf.math.negative(tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 6, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 2, 8, 8, 6, 7, 4, 5, 6, 4, 6, 3, 2, 8, 8], [0, 3, 2, 1, 0, 0, 2, 2, 3, 1, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 0, 1, 1, 0, 1, 0, 26, 15, 11, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.pow(grad, tf.math.negative(grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.pow(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.sqrt(sigma)), alpha)), beta))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [45, 67, 1], [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 5, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 2, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [10, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 3, 16, 16, 10, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302881568005025, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 9, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 22, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 3, 3, 0, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [2, 1], [52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [4, 0, 8, 8, 6, 7, 4, 5, 6, 5, 7, 4, 6, 4, 4, 9, 5, 3, 6, 3, 8], [0, 3, 2, 1, 2, 0, 2, 1, 1, 0, 2, 2, 1], [48, 9, 76, 58, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 34, 21, 13, 4], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.square(beta)), alpha), alpha))), tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta)), beta), alpha)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 5, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [78, 67, 98], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [3, 2, 8, 8, 6, 7, 4, 5, 6, 2, 4, 4, 6, 0, 9, 7, 4, 0, 3, 4, 9, 2], [0, 3, 2, 1, 0, 0, 2, 2, 1, 2, 3, 0, 0, 0], [48, 9, 76, 58, 16, 54, 54, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 36, 22, 14, 8], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.pow(beta, tf.math.divide_no_nan(alpha, tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.pow(tf.math.negative(beta), tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [16, 67, 1], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [50, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [85, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303016349608321, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 59], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 0, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [3, 1, 8, 8, 6, 7, 4, 5, 6, 6, 9, 2], [0, 3, 2, 1, 0, 0, 2, 2], [94, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 20, 12, 8, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(grad, tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 3, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [0, 9, 76, 58]], "fitness": -0.0965714305639267, "mapping_values": [1, 7, 7, 5, 2, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3024240737389015, 2.302461286530188, 2.302571254714353, 2.3009504228298927, 2.30262214311472, 2.3005097230128513, 2.3034344114379923, 2.3023788764602426, 2.3012114195949005, 2.3009556764467374, 2.302332115400075, 2.3010304087519313, 2.3009984797144045, 2.3013395621335393, 2.2997799137595654, 2.2993410072621416, 2.3017942353703202, 2.3012749170661837, 2.3011901983574257, 2.30222688368708, 2.3001788475289557, 2.2994390040687236, 2.3014068373001293, 2.3004388443593258, 2.3014289357202116, 2.300973823592962, 2.299658640862897, 2.2993049745026863, 2.3011946516297734, 2.299083017890385, 2.2999353059892877, 2.2996699189024987, 2.2986648881660554, 2.301047564119695, 2.2989051102048856, 2.2995590687805807, 2.2988857706508554, 2.299531692023196, 2.2983974805833673, 2.2988659203753197, 2.298877582290563, 2.2986576842468143, 2.299385665351405, 2.300434053660604, 2.298287088246535, 2.2972598892743985, 2.297625156236819, 2.2994805385628396, 2.299120092908421, 2.2988687384130144, 2.2977214853414973, 2.2980917095271995, 2.2978476286721725, 2.2974277569271115, 2.296682522864059, 2.297269890604711, 2.2977846510233015, 2.2982473086214905, 2.296792483332922, 2.2976471258900846, 2.297320077920303, 2.296953047113868, 2.2964273201964236, 2.296042732480117, 2.295542831166451, 2.296624684204688, 2.29555550000734, 2.296049167797818, 2.2962740379286135, 2.296328717974813, 2.2974980624754036, 2.2970253646554823, 2.296443129070777, 2.297790346679718, 2.295570976777304, 2.2960790819763397, 2.2960008689992226, 2.294877460934719, 2.2960501372176485, 2.2948262300064313, 2.2952049401741395, 2.2960864473185945, 2.2944153781107874, 2.294634668535135, 2.2933479834226427, 2.2948946546270643, 2.2939426235440323, 2.295939993691435, 2.295665441613077, 2.2951664837706343, 2.2941246522085432, 2.2942523756645707, 2.294539323336161, 2.2945470344814027, 2.294492620660361, 2.294309029914857, 2.2933044736537447, 2.292564576186398, 2.293849507311568, 2.2938610941836894], "accuracy": [0.09325055778026581, 0.09338264167308807, 0.08928807079792023, 0.09536388516426086, 0.08638224750757217, 0.0936468094587326, 0.08426892012357712, 0.09311848133802414, 0.09179764986038208, 0.09179764986038208, 0.0870426595211029, 0.09430722147226334, 0.09628847241401672, 0.09219389408826828, 0.0956280529499054, 0.09259014576673508, 0.09245806187391281, 0.09602430462837219, 0.09589222073554993, 0.09285431355237961, 0.09998679161071777, 0.09932637959718704, 0.09351472556591034, 0.09879804402589798, 0.09509972482919693, 0.09470347315073013, 0.09285431355237961, 0.09377889335155487, 0.09628847241401672, 0.09919429570436478, 0.09840179979801178, 0.09945846349000931, 0.09998679161071777, 0.09959053993225098, 0.1022322028875351, 0.09721305221319199, 0.1006472036242485, 0.09840179979801178, 0.09932637959718704, 0.1014397069811821, 0.09932637959718704, 0.09694888442754745, 0.09628847241401672, 0.08955223858356476, 0.10606260597705841, 0.10447761416435242, 0.10751552134752274, 0.09694888442754745, 0.10077928751707077, 0.10038304328918457, 0.10011887550354004, 0.10210011899471283, 0.09998679161071777, 0.10540219396352768, 0.10936468094587326, 0.09972262382507324, 0.10460969805717468, 0.10408136248588562, 0.10500594228506088, 0.10355303436517715, 0.09972262382507324, 0.10645885765552521, 0.10500594228506088, 0.10566636174917221, 0.10355303436517715, 0.10830801725387573, 0.10302469879388809, 0.10685510188341141, 0.10870426893234253, 0.10698718577623367, 0.10553427785634995, 0.10460969805717468, 0.09959053993225098, 0.10751552134752274, 0.1026284471154213, 0.10698718577623367, 0.10408136248588562, 0.1080438494682312, 0.11081759631633759, 0.11134592443704605, 0.10632677376270294, 0.10236428678035736, 0.10910051316022873, 0.11927089840173721, 0.11279883980751038, 0.11174217611551285, 0.10751552134752274, 0.10817593336105347, 0.11015717685222626, 0.11266675591468811, 0.1142517477273941, 0.10830801725387573, 0.11306300014257431, 0.10817593336105347, 0.11491216719150543, 0.11213842034339905, 0.11187426000833511, 0.11174217611551285, 0.11240258812904358, 0.11847840249538422], "val_loss": [1.9710994447980608, 1.971010684967041, 1.9709226744515556, 1.97083466393607, 1.9707461765834264, 1.970658234187535, 1.970569406236921, 1.970482417515346, 1.9703939301627023, 1.9703074182782854, 1.9702198164803642, 1.970132827758789, 1.9700446128845215, 1.969956942967006, 1.9698694092886788, 1.9697818074907576, 1.969693388257708, 1.9696054458618164, 1.969517367226737, 1.9694294929504395, 1.9693421636308943, 1.9692542893545968, 1.9691668919154577, 1.9690802437918526, 1.9689929825919015, 1.968905312674386, 1.968817847115653, 1.9687303134373255, 1.9686435290745325, 1.9685568128313338, 1.9684698922293526, 1.9683818135942732, 1.9682935987200056, 1.9682068143572127, 1.9681198256356376, 1.9680334499904089, 1.9679466656276159, 1.9678596087864466, 1.9677723475864954, 1.9676854951041085, 1.9675980295453752, 1.9675114495413644, 1.9674241883414132, 1.9673372677394323, 1.9672504152570451, 1.9671639714922224, 1.9670769827706474, 1.9669897215706962, 1.966902732849121, 1.9668153354099818, 1.9667282785688127, 1.9666410173688615, 1.966554777962821, 1.9664694922310966, 1.9663823672703333, 1.9662950379507882, 1.9662087304251534, 1.9661222185407365, 1.9660358428955078, 1.9659483092171806, 1.9658615248543876, 1.9657746723720007, 1.965688841683524, 1.9656016486031669, 1.965515068599156, 1.9654289654323034, 1.9653426579066686, 1.9652552604675293, 1.9651679992675781, 1.965080806187221, 1.9649949754987444, 1.9649083954947335, 1.9648212705339705, 1.9647352354867118, 1.9646492004394531, 1.9645630972726005, 1.9644765853881836, 1.9643909590584892, 1.964303697858538, 1.9642177309308733, 1.9641308103288924, 1.9640438897269112, 1.9639573097229004, 1.9638706615992956, 1.9637833322797502, 1.9636968885149275, 1.9636101041521346, 1.9635239328656877, 1.963437216622489, 1.96335084097726, 1.9632641928536552, 1.9631782259259904, 1.9630932807922363, 1.9630073819841658, 1.962921483176095, 1.9628352437700545, 1.9627486637660436, 1.9626623562404089, 1.9625752312796456, 1.962489400591169], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03766666725277901, 0.03866666555404663, 0.03933333232998848, 0.03966666758060455, 0.03999999910593033, 0.04066666588187218, 0.04100000113248825, 0.041333332657814026, 0.041333332657814026, 0.041333332657814026, 0.041999999433755875, 0.041999999433755875, 0.04266666620969772, 0.04333333298563957, 0.043666668236255646, 0.043666668236255646, 0.043666668236255646, 0.043666668236255646, 0.04399999976158142, 0.044333335012197495, 0.04500000178813934, 0.045666664838790894, 0.04699999839067459, 0.047333333641290665, 0.04833333194255829, 0.04866666719317436, 0.049666665494441986, 0.05000000074505806, 0.05133333429694176, 0.05166666582226753, 0.052666667848825455, 0.05299999937415123, 0.05366666615009308, 0.05400000140070915, 0.05433333292603493, 0.05433333292603493, 0.054666668176651, 0.054999999701976776, 0.055666666477918625, 0.0560000017285347, 0.05666666850447655, 0.05700000002980232, 0.0573333315551281, 0.05766666680574417, 0.05833333358168602, 0.058666665107011795, 0.05900000035762787, 0.059333331882953644, 0.06066666543483734, 0.06199999898672104, 0.06300000101327896, 0.06366666406393051, 0.06400000303983688, 0.06533333659172058, 0.06533333659172058, 0.06566666811704636, 0.0663333311676979, 0.0676666647195816, 0.06833333522081375, 0.06833333522081375, 0.07000000029802322, 0.07199999690055847, 0.07233333587646484, 0.07266666740179062, 0.07266666740179062, 0.07333333045244217, 0.07466666400432587, 0.07633333653211594, 0.07699999958276749, 0.07766667008399963, 0.07766667008399963, 0.07833333313465118, 0.07999999821186066, 0.08166666328907013, 0.0820000022649765, 0.08433333039283752, 0.0846666693687439, 0.08500000089406967, 0.0860000029206276, 0.08633333444595337, 0.08733333647251129, 0.08766666799783707, 0.08799999952316284, 0.08833333104848862, 0.08866667002439499, 0.08933333307504654, 0.08966666460037231, 0.09033333510160446, 0.09133332967758179, 0.09266666322946548, 0.09399999678134918, 0.09433333575725555, 0.0949999988079071, 0.09533333033323288, 0.09533333033323288, 0.0963333323597908, 0.09866666793823242, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 2, 1, 4, 8, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2, 3], [14, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 1, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(alpha)), sigma)", "other_info": {"loss": [2.3024630864944124, 2.302596057080133, 2.302800575346286, 2.3012740302158305, 2.303043290435394, 2.3010228052430257], "accuracy": [0.09298639744520187, 0.09311848133802414, 0.08889182657003403, 0.09457138925790787, 0.08545766770839691, 0.09245806187391281], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 3, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 35, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3024630864944124, 2.302596057080133, 2.302800575346286, 2.3012740302158305, 2.303043290435394, 2.3010228052430257], "accuracy": [0.09298639744520187, 0.09311848133802414, 0.08889182657003403, 0.09457138925790787, 0.08545766770839691, 0.09245806187391281], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]