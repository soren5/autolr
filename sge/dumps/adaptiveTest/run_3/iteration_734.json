[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [4, 4, 8, 1, 5, 5, 6, 2, 4, 2, 5, 2, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 1, 3, 1, 2, 0, 0, 2, 1, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [3, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.5988571643829346, "mapping_values": [1, 53, 53, 35, 18, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.square(alpha)))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad))), alpha))), tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.square(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.math.add(alpha, tf.math.square(alpha))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.441994631058977, 1.9257794931469938, 2.266084899645377, 2.2030277981844404, 2.2281787472000496, 2.3041320310025055, 2.3027174536105806], "accuracy": [0.24924051761627197, 0.36243560910224915, 0.21899352967739105, 0.2148989588022232, 0.17236824333667755, 0.10249637067317963, 0.09879804402589798], "val_loss": [1.8923900468008858, 0.9856207030160087, 1.806727681841169, 1.9500574384416853, 1.973994186946324, 1.9736298833574568, 1.9727420806884766], "val_accuracy": [0.1236666664481163, 0.5899999737739563, 0.3643333315849304, 0.140666663646698, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 0, 5, 5, 1, 2, 0, 2, 5, 2, 4, 0, 2, 0, 5, 3, 3, 8, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.5985714197158813, "mapping_values": [1, 33, 33, 22, 11, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.sqrt(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(grad), grad)))))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad))))))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.4419945937421077, 1.9194590372731264, 2.3136841071799856, 2.2190818133812065, 2.208452733358797, 1.9335553156717058, 1.4621977331364049], "accuracy": [0.24924051761627197, 0.363360196352005, 0.21476687490940094, 0.2118610441684723, 0.1776515692472458, 0.3234711289405823, 0.5013868808746338], "val_loss": [1.892333916255406, 1.003495114190238, 1.837362493787493, 1.973705564226423, 1.7430640288761683, 1.2601023401532854, 1.1324373994554793], "val_accuracy": [0.12333333492279053, 0.5973333120346069, 0.351666659116745, 0.09666666388511658, 0.20933333039283752, 0.54666668176651, 0.5763333439826965]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 5, 5, 6, 2, 0, 2, 5, 2, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.5925714373588562, "mapping_values": [1, 33, 33, 21, 12, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(grad), grad)))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.square(grad)))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.44197869200071, 1.9144251162837982, 2.273587776984458, 2.199692138197746, 2.19701869893052, 2.279094225033604, 2.2997179176230804], "accuracy": [0.24924051761627197, 0.36441686749458313, 0.21820102632045746, 0.2086910605430603, 0.18399155139923096, 0.14568749070167542, 0.10989301651716232], "val_loss": [1.8923470633370536, 1.0188308783939906, 1.8417604310171944, 1.9694724082946777, 1.9734855379377092, 1.9780520030430384, 1.9465440341404505], "val_accuracy": [0.1223333328962326, 0.5916666388511658, 0.33533334732055664, 0.09666666388511658, 0.09600000083446503, 0.10233332961797714, 0.1706666648387909]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 5, 5, 6, 2, 0, 2, 5, 2, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.4625714421272278, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.105621263792234, 2.1820294842854184, 2.9478927592024466, 2.3927778567557385, 2.118333595272352, 2.4056232340221535], "accuracy": [0.2879408299922943, 0.3833047151565552, 0.190859854221344, 0.20221899449825287, 0.2607317268848419, 0.11821424216032028], "val_loss": [1.5424835341317313, 1.7452057089124406, 2.246582508087158, 1.59808121408735, 1.720006057194301, 2.033179078783308], "val_accuracy": [0.4449999928474426, 0.3413333296775818, 0.09799999743700027, 0.3240000009536743, 0.3009999990463257, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 2, 1, 6, 1, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 0, 3, 1, 1, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.4611428678035736, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1055704054028177, 2.326115754837562, 2.5387637741482885, 2.26323123551977, 18530337797835.082, 4.686448284407292e+30], "accuracy": [0.28780874609947205, 0.3871351182460785, 0.13815876841545105, 0.22916391491889954, 0.16153743863105774, 0.09681680053472519], "val_loss": [1.5420369080134801, 2.309873512813023, 1.7523702893938338, 2.5750820296151296, 1.6046383270384303e+31, 2.3780951499938965], "val_accuracy": [0.44600000977516174, 0.15700000524520874, 0.24666666984558105, 0.2523333430290222, 0.10133333504199982, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [8, 4, 8, 1, 1, 5, 6, 8, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 9, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.329714298248291, "mapping_values": [1, 30, 30, 21, 9, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(grad, tf.math.sqrt(grad)))), alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(grad))))))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.6280913382567874, 2.813760792306858, 2.30399500116019, 2.296700602997374, 2.1955516212384274, 2.298110410096765, 2.077167494642484, 2.1640834708837957, 2.176889856493689, 2.3164907873519236], "accuracy": [0.2075023055076599, 0.11438383162021637, 0.1006472036242485, 0.1088363528251648, 0.20459648966789246, 0.2102760523557663, 0.2829216718673706, 0.2798837721347809, 0.28160083293914795, 0.09840179979801178], "val_loss": [4.590973036629813, 1.9740920066833496, 1.97052036012922, 1.9468372208731515, 1.470355646950858, 1.8578829765319824, 1.8989606584821428, 1.9706216539655412, 2.015789576939174, 1.9744445255824499], "val_accuracy": [0.23199999332427979, 0.10133333504199982, 0.10233332961797714, 0.18966667354106903, 0.4569999873638153, 0.257666677236557, 0.22699999809265137, 0.10466666519641876, 0.09799999743700027, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 2, 1, 6, 1, 2, 4, 9, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 9, 0, 8, 5, 8, 5, 5, 5, 7, 3, 9], [2, 1, 0, 1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 2, 1, 2, 2, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [99, 33, 85, 41, 55, 68, 16], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.2582857012748718, "mapping_values": [1, 43, 43, 28, 15, 7, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.square(alpha), tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))))), grad), alpha)))))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.628373996629817, 2.8247611103528967, 2.3045999523576506, 2.303316125402424, 2.302991905736413, 2.30293361644042], "accuracy": [0.20776647329330444, 0.11411966383457184, 0.09985470771789551, 0.09972262382507324, 0.09774138033390045, 0.09642054885625839], "val_loss": [4.534847395760672, 1.9757471765790666, 1.9740746361868722, 1.973677362714495, 1.9734868322099959, 1.9736270904541016], "val_accuracy": [0.2303333282470703, 0.10133333504199982, 0.09933333098888397, 0.10133333504199982, 0.10566666722297668, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 0, 8, 1, 1, 5, 6, 2, 1, 6, 1, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 0, 3, 1, 1, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [96, 7, 76, 58]], "fitness": -0.24942857027053833, "mapping_values": [1, 9, 9, 5, 4, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.546098908948514, 2.728498684715963, 2.3049039276693915, 2.302751765731713, 2.3009236588564375, 2.28704743167397], "accuracy": [0.2056531459093094, 0.11847840249538422, 0.09972262382507324, 0.0948355570435524, 0.09721305221319199, 0.12561088800430298], "val_loss": [4.103242192949567, 1.9744390760149275, 1.9740700721740723, 1.9723084313528878, 1.969982487814767, 1.8884617941720145], "val_accuracy": [0.20200000703334808, 0.10000000149011612, 0.10133333504199982, 0.10000000149011612, 0.09666666388511658, 0.19866666197776794]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 5, 5, 6, 2, 0, 2, 1, 2, 4, 0, 2, 0, 5, 2, 8, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 1, 3, 1, 1, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.negative(alpha), grad)))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0672302171587944, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 2, 1, 6, 1, 2, 2, 0, 8, 0, 0, 2, 6, 0, 9, 8, 3, 0, 3, 5, 0, 8, 5, 8, 5, 4, 9], [0, 1, 3, 1, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [6, 68, 85, 41, 55, 68, 73], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 0], [7, 5, 8], [4, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 33, 15, 7, 1, 1, 0, 1, 0, 5, 3, 3, 0, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(alpha, grad))), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad)))))))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(alpha, alpha)), tf.math.negative(grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, grad)))))))))))), tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07753269374370575, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [4, 4, 8, 8, 5, 5, 6, 2, 1, 2, 5, 2, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 8, 3, 2, 1, 3, 9, 8], [0, 2, 3, 1, 2, 1, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [9, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [90, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 56, 56, 38, 18, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(grad, grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))))))))))))))), grad)), tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.sqrt(tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(alpha)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3035001147928615, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 5, 5, 6, 2, 1, 6, 1, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 2, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 25, 15, 10, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(grad)))), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), beta)))))))), alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(beta), beta), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 2, 1, 6, 1, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 1, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(grad, alpha)))))), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3047237385533283, 2.304500294147371, 2.306885976738477, 2.308419267341776, 2.3060940215773726, 2.308140286900474, 2.3104190111884573, 2.3098218278515814], "accuracy": [0.09153348207473755, 0.09153348207473755, 0.09972262382507324, 0.09642054885625839, 0.09932637959718704, 0.10011887550354004, 0.09615638852119446, 0.09655263274908066], "val_loss": [1.9736679622105189, 1.9746220452444894, 1.9744888714381628, 1.9788453919546944, 1.978611877986363, 1.9780068397521973, 1.9777183532714844, 1.9780662400381905], "val_accuracy": [0.10233332961797714, 0.10133333504199982, 0.10566666722297668, 0.09833333641290665, 0.10566666722297668, 0.09833333641290665, 0.09866666793823242, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 2, 6, 5, 6, 5, 2, 4, 2, 5, 9, 4, 0, 2, 0, 5, 2, 1, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 21, 12, 5, 6, 6, 5, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.math.pow(grad, grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.square(grad)))))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, grad))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08796724677085876, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 4, 5, 6, 2, 0, 6, 5, 2, 6, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 4, 5, 5], [2, 2, 2, 1, 1, 0, 0, 2, 0, 2, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [90, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 51, 51, 34, 17, 3, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.square(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(alpha, alpha)))), alpha)), tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(grad)), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.square(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.square(alpha)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.304951564526561, 2.3042536230922424, 2.3068479998803584, 2.310464935217079, 2.310557794640203, 2.317319307029995, 2.3178089561873043, 2.3262411860616026, 2.333445601160374, 2.344899899798015, 2.3798281206761556, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08836349099874496, 0.08572183549404144, 0.08796724677085876, 0.07674019038677216, 0.07858935743570328, 0.0812310129404068, 0.0812310129404068, 0.07106062769889832, 0.07700435817241669, 0.0746268630027771, 0.08149518072605133, 0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9724221229553223, 1.973797048841204, 1.9754588263375419, 1.9778150149754115, 1.9798332623073034, 1.9828537532261439, 1.9858872549874442, 1.98957245690482, 1.996103014264788, 2.0099423953465054, 2.0699442454746793, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02800000086426735, 0.022333333268761635, 0.02199999988079071, 0.023666666820645332, 0.0273333340883255, 0.03433333337306976, 0.04899999871850014, 0.06300000101327896, 0.08166666328907013, 0.0976666659116745, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 2, 8, 1, 5, 5, 2, 2, 0, 2, 5, 2, 9, 8, 2, 0, 5, 2, 9, 0, 3, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 0, 0, 1, 2, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68, 39, 94], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 23, 10, 8, 6, 6, 4, 2, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08492933213710785, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 0, 9, 1, 1, 5, 6, 2, 5, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 2, 1, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [36, 31, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 20, 10, 3, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 18, 11, 7, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.square(grad), grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.square(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), beta)), alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 4, 5, 5, 5, 6, 2, 1, 6, 1, 3, 4, 0, 2, 2, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 1, 1, 1, 1, 0, 0, 2, 1, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 1], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.pow(tf.math.square(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(alpha, alpha))))))), tf.math.add(tf.math.add(alpha, alpha), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0672302171587944, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 2, 1, 9, 6, 2, 1, 6, 1, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [1, 2, 3, 0, 1, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07753269374370575, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 0, 8, 1, 1, 9, 6, 2, 5, 6, 5, 6, 5, 0, 8, 0, 6, 1, 4, 2, 5, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [0, 1], [28], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 18, 11, 7, 2], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.square(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), beta)), alpha)))))", "other_info": {"loss": [2.304370059943108, 2.3022084800464255, 2.3026307914329793, 2.3031743195676975, 2.301409555353808, 2.303755510878396], "accuracy": [0.08981640636920929, 0.08902391046285629, 0.09470347315073013, 0.08757099509239197, 0.09298639744520187, 0.09377889335155487], "val_loss": [1.971188681466239, 1.9711894307817732, 1.9711903163364954, 1.9711915424891882, 1.9711918149675642, 1.9711928367614746], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]