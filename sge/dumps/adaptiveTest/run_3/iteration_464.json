[{"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 2, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8], [1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [6, 67, 98, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [25, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.8108571171760559, "mapping_values": [1, 51, 51, 29, 22, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, grad))), tf.math.subtract(alpha, tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))))))))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2268921903190266, 1.7722340301515687, 1.262292948853716, 1.080342043707352, 0.9631656333991109, 0.8881510951499803, 0.8589645975443193, 0.7874954941880198, 0.7893965364274033, 0.757009059793016, 0.7236157976137161, 0.7146773947433096, 0.6997140862717841, 0.6945488386858945, 0.671600748637349, 0.6754940464638007, 0.6577076051040269, 0.6670801507688202, 0.6465304666474951, 0.6226489307810806, 0.6241654429169946, 0.6183077120399904, 0.6127918842383316, 0.6123321427645196, 0.5927414448348491, 0.5901982288287536, 0.5814570993118124, 0.5716434761029602, 0.5727878514297917, 0.5760677448038286, 0.5639579739269563, 0.5613147121662351, 0.5771014790619369, 0.5577205508817472, 0.5624009554868896, 0.5460531354706285, 0.5550268239207224, 0.540873715929808, 0.5334828661228482, 0.5278455045292202, 0.5321580695713893, 0.5298936330662773, 0.5265787367681549, 0.5166687425361286, 0.5221654005007201, 0.5061708031557555, 0.5117209326904432, 0.5049817621660679, 0.5049474846929403, 0.4913157205170077, 0.5121307095768366, 0.4983236025770374, 0.5031440701813447, 0.5011470066069801, 0.49652823085845377, 0.49066877848499596], "accuracy": [0.23576806485652924, 0.45225200057029724, 0.5601637959480286, 0.6186765432357788, 0.6584334969520569, 0.6740192770957947, 0.6901333928108215, 0.7121912837028503, 0.7094175219535828, 0.720380425453186, 0.7292299270629883, 0.7376832365989685, 0.7396644949913025, 0.7383436560630798, 0.7485140562057495, 0.746268630027771, 0.7523444890975952, 0.7485140562057495, 0.7580240368843079, 0.767401933670044, 0.7687227725982666, 0.7663452625274658, 0.7703077793121338, 0.7672698497772217, 0.7745344042778015, 0.7778365015983582, 0.7815347909927368, 0.7848368883132935, 0.7815347909927368, 0.7837802171707153, 0.7864218950271606, 0.7877426743507385, 0.785629391670227, 0.7946110367774963, 0.7858935594558716, 0.7922335267066956, 0.7906485199928284, 0.7950072884559631, 0.7991018295288086, 0.8034605979919434, 0.7976489067077637, 0.8010830879211426, 0.8041210174560547, 0.807158887386322, 0.8034605979919434, 0.8120459914207458, 0.8115176558494568, 0.8140271902084351, 0.8094043135643005, 0.8141592741012573, 0.8014793395996094, 0.8140271902084351, 0.8112534880638123, 0.8096684813499451, 0.813498854637146, 0.8164047002792358], "val_loss": [1.7416933604649134, 1.0839975561414446, 0.839753338268825, 0.7541442258017403, 0.6716699259621757, 0.7153118508202689, 0.6116469757897514, 0.6167774370738438, 0.5679380553109306, 0.5647718225206647, 0.5474331038338798, 0.5492631196975708, 0.561039890561785, 0.5530480657305036, 0.5293666805539813, 0.5113598789487567, 0.5348191431590489, 0.5349606275558472, 0.5120351314544678, 0.49165073462894987, 0.5105881009783063, 0.48663783073425293, 0.5039944819041661, 0.47836474009922575, 0.47484333174569265, 0.4762951816831316, 0.46829043115888325, 0.4814635855810983, 0.4630951540810721, 0.4578021083559309, 0.4610057217734201, 0.46122067315237864, 0.48570862838200163, 0.4642200640269688, 0.4475593226296561, 0.4518522024154663, 0.445080075945173, 0.44834905011313303, 0.4417885882513864, 0.43664937359946115, 0.43326752526419504, 0.4653810773577009, 0.42925727367401123, 0.4356011152267456, 0.4287575738770621, 0.4223422748701913, 0.433835642678397, 0.42162218264171053, 0.42271956375667025, 0.42481723002025057, 0.42060514858790804, 0.4249063900538853, 0.426925642149789, 0.4202867490904672, 0.4212739041873387, 0.41797718831471037], "val_accuracy": [0.42766666412353516, 0.6466666460037231, 0.652999997138977, 0.6816666722297668, 0.7076666951179504, 0.6846666932106018, 0.7436666488647461, 0.7213333249092102, 0.753000020980835, 0.7580000162124634, 0.7540000081062317, 0.7536666393280029, 0.7393333315849304, 0.7563333511352539, 0.7593333125114441, 0.7726666927337646, 0.7643333077430725, 0.7636666893959045, 0.7730000019073486, 0.7833333611488342, 0.7563333511352539, 0.7853333353996277, 0.7720000147819519, 0.7893333435058594, 0.79666668176651, 0.7929999828338623, 0.7990000247955322, 0.793666660785675, 0.7950000166893005, 0.8003333210945129, 0.8056666851043701, 0.8076666593551636, 0.7689999938011169, 0.7996666431427002, 0.8143333196640015, 0.8086666464805603, 0.8086666464805603, 0.8046666383743286, 0.8149999976158142, 0.8133333325386047, 0.8116666674613953, 0.7986666560173035, 0.8180000185966492, 0.8130000233650208, 0.8193333148956299, 0.8183333277702332, 0.809333324432373, 0.8243333101272583, 0.8173333406448364, 0.8220000267028809, 0.8256666660308838, 0.812666654586792, 0.824999988079071, 0.8209999799728394, 0.8166666626930237, 0.8246666789054871]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 9, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.8071428537368774, "mapping_values": [1, 5, 5, 3, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [1.9688659337501895, 1.6281460715228258, 1.1419423795363624, 0.9604765137409286, 0.8163729655807201, 0.7906468464021024, 0.7635174389245125, 0.6721002112888562, 0.6788303352082489, 0.6530625830788135, 0.6383301977232038, 0.6264829931005967, 0.6059897375018637, 0.561913801844031, 0.5715978930040893, 0.5490547540779552, 0.546206536727291, 0.5421764887146049, 0.5215150400545493, 0.5024379743498077, 0.4937609520649409, 0.48930456768315406, 0.49667382827603096, 0.4702982907447329, 0.4619994819668133, 0.4558459147053183, 0.44585683578119745, 0.4417898784602055, 0.42777272488116397, 0.4329803591713913, 0.4222651748940016, 0.41645121990083434, 0.42657329060020166, 0.41156523976548315, 0.4028068584946121, 0.38494464965654546, 0.4368445296895943, 0.3830762098076762, 0.39414380130798055, 0.3652355717496314, 0.3637473409863322, 0.3772343182607869, 0.36039789481374646, 0.36375166844808354], "accuracy": [0.3420948386192322, 0.4233258366584778, 0.5875049233436584, 0.6312243938446045, 0.6954167485237122, 0.703209638595581, 0.7131158113479614, 0.7427024245262146, 0.7401928305625916, 0.7445515990257263, 0.7564390301704407, 0.7609298825263977, 0.7687227725982666, 0.7874785661697388, 0.7773081660270691, 0.7924976944923401, 0.7905164361000061, 0.7907806038856506, 0.8025360107421875, 0.8090080618858337, 0.8127063512802124, 0.8117818236351013, 0.8096684813499451, 0.8251221776008606, 0.8274996876716614, 0.8280280232429504, 0.8317263126373291, 0.8350284099578857, 0.8385946154594421, 0.8327829837799072, 0.8391229510307312, 0.839519202709198, 0.837141752243042, 0.8470479249954224, 0.8473120927810669, 0.8585391640663147, 0.8364813327789307, 0.8557654023170471, 0.852331280708313, 0.863029956817627, 0.8632941246032715, 0.8593316674232483, 0.8640866279602051, 0.860652506351471], "val_loss": [1.649073668888637, 1.0409394332340784, 0.713021959577288, 0.724406259400504, 0.6196263858250209, 0.6542032105582101, 0.551028881754194, 0.5364881583622524, 0.5158128227506366, 0.5224951505661011, 0.4828330618994577, 0.502722978591919, 0.5014447144099644, 0.4844576290675572, 0.4709518126079014, 0.44531662123543875, 0.44771528244018555, 0.47237244674137663, 0.46612817900521414, 0.4822303567613874, 0.43499209199632916, 0.4159255879265921, 0.42862124953951153, 0.4143318108149937, 0.40785921471459524, 0.4061158725193569, 0.3925956147057669, 0.43866375514439176, 0.3997776338032314, 0.3940211023603167, 0.3803074700491769, 0.3856538363865444, 0.41375010354178293, 0.37743955850601196, 0.36450826270239695, 0.46357265540531706, 0.3849796312195914, 0.38716763257980347, 0.36409166881016325, 0.3638959356716701, 0.37339919805526733, 0.35857005630220684, 0.3724595138004848, 0.3605480534689767], "val_accuracy": [0.24899999797344208, 0.5376666784286499, 0.6610000133514404, 0.6759999990463257, 0.715666651725769, 0.6996666789054871, 0.7480000257492065, 0.7536666393280029, 0.7766666412353516, 0.7756666541099548, 0.7860000133514404, 0.7720000147819519, 0.7580000162124634, 0.7796666622161865, 0.7956666946411133, 0.7986666560173035, 0.8106666803359985, 0.7879999876022339, 0.8023333549499512, 0.778333306312561, 0.800000011920929, 0.815666675567627, 0.8073333501815796, 0.8169999718666077, 0.8276666402816772, 0.824999988079071, 0.8336666822433472, 0.8090000152587891, 0.8233333230018616, 0.8173333406448364, 0.8416666388511658, 0.8446666598320007, 0.8190000057220459, 0.8410000205039978, 0.847000002861023, 0.7866666913032532, 0.828000009059906, 0.8346666693687439, 0.8536666631698608, 0.8453333377838135, 0.8299999833106995, 0.8479999899864197, 0.8333333134651184, 0.8516666889190674]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.8028571605682373, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [1.9675434540763839, 1.634309834430026, 1.0890212884637045, 1.007424329801274, 0.830229111154554, 0.7944067490020559, 0.7564692672815904, 0.6786024094556915, 0.6748477000885352, 0.6544620874236368, 0.6129275066127331, 0.6061266035199748, 0.6163515534934398, 0.5586500580772795, 0.5770752486882192, 0.5490762232206816, 0.5355850223930615, 0.5532135440216498, 0.5353791212456148, 0.501070882358949, 0.4916606821467171], "accuracy": [0.3419627547264099, 0.42609959840774536, 0.5956941246986389, 0.6268656849861145, 0.6910579800605774, 0.7012283802032471, 0.7123233675956726, 0.739400327205658, 0.7448157668113708, 0.7458723783493042, 0.7691190242767334, 0.7707040309906006, 0.7623828053474426, 0.7885351777076721, 0.7763835787773132, 0.7921014428138733, 0.7961959838867188, 0.7889314293861389, 0.7971205711364746, 0.8104609847068787, 0.8129705190658569], "val_loss": [1.6472429888589042, 1.0173279898507255, 0.7524891580854144, 0.6833676270076207, 0.608097927910941, 0.6494131258555821, 0.5565645354134696, 0.5340748684746879, 0.504280686378479, 0.5001552615846906, 0.48836144379207064, 0.5140476226806641, 0.4771306003843035, 0.493193370955331, 0.461033752986363, 0.4398106336593628, 0.4989521673747471, 0.5177197796957833, 0.45692714623042513, 0.4681265183857509, 0.4312449778829302], "val_accuracy": [0.25099998712539673, 0.5419999957084656, 0.6176666617393494, 0.6896666884422302, 0.731333315372467, 0.6990000009536743, 0.7396666407585144, 0.7593333125114441, 0.7676666378974915, 0.7853333353996277, 0.7863333225250244, 0.765999972820282, 0.7793333530426025, 0.7773333191871643, 0.7956666946411133, 0.8133333325386047, 0.7576666474342346, 0.7673333287239075, 0.8090000152587891, 0.7846666574478149, 0.8106666803359985]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.7842857241630554, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.231938766781302, 1.8110258988637524, 1.277326356166421, 1.1065320133722027, 0.970453843889676, 0.8920770103055031, 0.8637428586320193, 0.8210982698349354, 0.798793275783626, 0.7722825788865866, 0.7422284576257049, 0.7430209437570457, 0.7094581303122871, 0.6991366142877703, 0.687912100743246, 0.6691237301433469, 0.6772740100431814, 0.6412002642109661, 0.649600949710654, 0.6445581427560175, 0.6357880255030036, 0.6337833512633972, 0.6181326395390513, 0.617598676757097, 0.6030471898293561, 0.5965323250023854, 0.5958907807413393], "accuracy": [0.23484347760677338, 0.4469687044620514, 0.5592392086982727, 0.6126006841659546, 0.6473385095596313, 0.6828688383102417, 0.6863030195236206, 0.6984546184539795, 0.7057191729545593, 0.7150970697402954, 0.7239466309547424, 0.7251353859901428, 0.7326641082763672, 0.7366266250610352, 0.7397965788841248, 0.7477215528488159, 0.7429665923118591, 0.7613261342048645, 0.7576277852058411, 0.7535332441329956, 0.7613261342048645, 0.7625148296356201, 0.7672698497772217, 0.7660810947418213, 0.7751948237419128, 0.7737419009208679, 0.7751948237419128], "val_loss": [1.749824047088623, 1.1079453059605189, 0.8753283023834229, 0.713842613356454, 0.6743444544928414, 0.7018752949578422, 0.5977653775896344, 0.614808338029044, 0.5831361838749477, 0.5624031169073922, 0.5533372674669538, 0.5582096576690674, 0.5290390934262957, 0.5544850655964443, 0.5226806742804391, 0.5598349911825997, 0.5024781227111816, 0.5218702895300729, 0.5045105559485299, 0.49434854303087505, 0.49118336609431673, 0.48029136657714844, 0.48463131700243267, 0.47986340522766113, 0.4742276498249599, 0.4677590642656599, 0.47960821219852995], "val_accuracy": [0.5243333578109741, 0.6200000047683716, 0.6573333144187927, 0.7116666436195374, 0.7250000238418579, 0.6823333501815796, 0.7423333525657654, 0.7316666841506958, 0.7519999742507935, 0.7526666522026062, 0.7563333511352539, 0.7360000014305115, 0.7620000243186951, 0.7363333106040955, 0.7699999809265137, 0.7379999756813049, 0.7683333158493042, 0.7483333349227905, 0.7680000066757202, 0.7770000100135803, 0.7736666798591614, 0.7943333387374878, 0.7910000085830688, 0.7903333306312561, 0.7926666736602783, 0.7876666784286499, 0.7893333435058594]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0], [6, 6, 1, 2, 1, 5, 7, 7, 5, 6, 6, 7, 6, 0, 2, 0, 2, 1, 8, 7, 3, 5], [2, 1, 0, 1, 2, 0, 2, 1, 1, 1, 1, 2, 2, 3, 3, 2, 2, 1, 1], [9, 90, 98, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [65, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [4, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [29, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 22, 17, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), grad)))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), alpha)))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha))), tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.negative(tf.math.sqrt(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 9, 1, 6, 5, 5, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [2, 0, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [80, 67, 98, 79], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [75, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 0, 2, 1, 0, 0, 2, 2], [29, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 12, 8, 4, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.negative(tf.math.pow(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), beta)), tf.math.square(alpha)))", "other_info": {"loss": [63421.60723915221, 73725.31203667779, 73726.6612330356, 73727.1792169545, 73727.4555891725, 73727.6304566768], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [63043.64732142857, 63045.515625, 63046.11383928572, 63046.40625, 63046.58928571428, 63046.705357142855], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 4, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 6, 2, 8, 2, 1, 8, 2, 0, 0, 0, 1, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 9, 8, 6, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 49, 49, 29, 20, 6, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 6, 4, 2, 2], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.negative(grad))))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, grad))))))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 0, 1, 1, 2, 2], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [65, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [79, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), beta)", "other_info": {"loss": [2.3020746418828617, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 6, 1, 2, 9, 5, 7, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2], [27, 67, 98, 79], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [5, 1], [18], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [6, 3, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 2, 2, 1, 0, 0, 2, 2], [21, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 5, 2, 3, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.square(tf.math.add(alpha, alpha))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.multiply(beta, beta))", "other_info": {"loss": [1.7747192720541814e+27, 7.543042659176584e+27, 7.610910182143582e+27, 7.810255080221948e+27, 7.758075073225145e+27, 7.656063159518718e+27], "accuracy": [0.10381719470024109, 0.11266675591468811, 0.10394927859306335, 0.10910051316022873, 0.10711926966905594, 0.10791176557540894], "val_loss": [6.472875721980559e+27, 6.473119767134156e+27, 6.501308753262026e+27, 6.50132831735174e+27, 6.526395650578487e+27, 6.526605795886975e+27], "val_accuracy": [0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [80, 67, 98, 79], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 7, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 10, 6, 4, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.divide_no_nan(tf.math.negative(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 2, 1, 7, 4, 1, 2, 5, 6, 5, 1, 2, 2, 2, 1, 8, 2, 0, 4, 0, 1, 3, 2, 4, 8, 9, 8], [3, 1, 0, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 3, 2, 2, 2, 1, 1, 0, 0], [80, 67, 98, 79], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [2, 0, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.sqrt(beta), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [2, 2, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 0, 6, 2, 8, 6, 0, 1, 3, 2, 2, 8, 9, 8, 5], [1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 79, 42, 47], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 2, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 53, 53, 31, 22, 6, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 12, 8, 4, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad)))), alpha), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.pow(sigma, beta)), tf.math.square(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 3, 2, 1, 2, 1, 1, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 1, 1, 1], [98, 67, 98, 88, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 3, 2, 1, 1, 7, 7, 1, 6, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [7, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 12, 8, 4, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.negative(tf.math.pow(sigma, beta)), tf.math.square(alpha)))", "other_info": {"loss": [26218228.121116117, 502071307.530313, 2286533885.362568, 6421861548.988509, 13790145826.117554, 25310987412.372475], "accuracy": [0.09087307006120682, 0.1002509593963623, 0.10236428678035736, 0.1006472036242485, 0.09655263274908066, 0.09866596013307571], "val_loss": [98133865.14285715, 784214235.4285715, 2645759634.285714, 6270298843.428572, 12245361225.142857, 21158477238.857143], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 4, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 5, 8, 6, 0, 4, 5, 6, 0, 9], [3, 3, 2, 1, 0, 0, 2, 2], [29, 74, 76, 58]], "fitness": -0.051428571343421936, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.square(sigma)), sigma)", "other_info": {"loss": [2.3040446140164352, 2.3027834552484747, 2.3025483408655707, 2.3016773414586624, 2.3027849454669402, 2.3011083647937443, 2.301468128604408, 2.3023382775960832, 2.302283140835493, 2.301059000748118, 2.301236260159298, 2.303309896697363, 2.301334416373468, 2.30117841025763, 2.301020233244739, 2.300685805541303, 2.3018263355300976, 2.299838736734024, 2.2994038929257172, 2.301872413329413, 2.3011697543185416, 2.3015366594127897, 2.299603860895663, 2.3012572886401856, 2.3004403844280894, 2.2999693884148558, 2.3016628341400205, 2.29975755078335, 2.301334530276519, 2.300222378522807, 2.3002555918589622, 2.298820610705179, 2.301147649757709, 2.3007535639692214, 2.3005546496261173, 2.2984449880124083, 2.2990260092400603, 2.3002747489539717, 2.3005607121530196, 2.29934513211455, 2.2990968651570634, 2.299770990934008, 2.3005318956572887, 2.2998737140086662, 2.301214899794458, 2.299711089234358, 2.2993030769477634, 2.297845768812011, 2.2997160725637023, 2.2997005520526996, 2.298788141722472, 2.299562589886985, 2.2990209392159136, 2.2985074640721725, 2.2996018105462683, 2.298044101484322, 2.3003063460445645, 2.2992458992850873, 2.300158197412779, 2.3002723492116126, 2.2994184000554134, 2.297809347484751, 2.2974311557538507, 2.2986648403626737, 2.2973543924032627, 2.2986905054881697, 2.2980219464748606, 2.297999522091139, 2.296741316079495, 2.297053208487806, 2.2978141528268012, 2.2981031033278234, 2.2986434602529586, 2.2973016469139447, 2.2996791323902523, 2.2972535503192457, 2.298243773942453, 2.2972570494134206, 2.298834195336677, 2.297397988079687, 2.29727843638818, 2.2984504723955124, 2.2973324070359737, 2.296474688057225, 2.2978437635577698, 2.298158326846198, 2.2967008401878033, 2.2996530639906414, 2.2976727209165504, 2.29921203052615, 2.2965634365154846, 2.2972192579744797, 2.2975963095726826, 2.2957480649087785, 2.2972171152618976, 2.295818595901346, 2.2956738721708723, 2.296374558520717, 2.2962952769585194, 2.297423169534472], "accuracy": [0.08677849918603897, 0.09285431355237961, 0.0952318087220192, 0.09325055778026581, 0.08809932321310043, 0.09126931428909302, 0.09325055778026581, 0.09338264167308807, 0.09351472556591034, 0.09060890227556229, 0.0956280529499054, 0.09747721254825592, 0.09496764093637466, 0.09311848133802414, 0.09945846349000931, 0.0948355570435524, 0.09021265059709549, 0.09536388516426086, 0.09285431355237961, 0.0944393053650856, 0.09826971590518951, 0.09311848133802414, 0.09866596013307571, 0.09853387624025345, 0.0940430611371994, 0.10460969805717468, 0.09628847241401672, 0.09417514503002167, 0.09060890227556229, 0.09655263274908066, 0.09668471664190292, 0.09721305221319199, 0.09602430462837219, 0.09496764093637466, 0.09681680053472519, 0.09760929644107819, 0.09576013684272766, 0.09470347315073013, 0.09813763201236725, 0.10117553919553757, 0.10051512718200684, 0.09813763201236725, 0.09787346422672272, 0.10157178342342377, 0.09853387624025345, 0.10276053100824356, 0.09206181764602661, 0.10381719470024109, 0.09457138925790787, 0.0956280529499054, 0.1010434553027153, 0.0952318087220192, 0.09602430462837219, 0.10289261490106583, 0.09826971590518951, 0.10276053100824356, 0.09642054885625839, 0.09602430462837219, 0.09932637959718704, 0.09932637959718704, 0.09774138033390045, 0.10077928751707077, 0.10355303436517715, 0.10460969805717468, 0.10328886657953262, 0.10474177449941635, 0.10381719470024109, 0.10381719470024109, 0.10249637067317963, 0.10328886657953262, 0.10447761416435242, 0.10342095047235489, 0.10091137140989304, 0.10936468094587326, 0.10632677376270294, 0.09959053993225098, 0.10249637067317963, 0.10157178342342377, 0.10394927859306335, 0.10091137140989304, 0.10249637067317963, 0.1002509593963623, 0.10593052208423615, 0.10487385839223862, 0.10011887550354004, 0.10302469879388809, 0.10791176557540894, 0.10157178342342377, 0.09694888442754745, 0.09932637959718704, 0.10011887550354004, 0.10474177449941635, 0.10236428678035736, 0.11002509295940399, 0.10474177449941635, 0.10817593336105347, 0.10368511080741882, 0.10434553027153015, 0.10606260597705841, 0.11002509295940399], "val_loss": [1.9711047581263952, 1.971020289829799, 1.9709437915257044, 1.970862592969622, 1.970787525177002, 1.9707170213971819, 1.970644405909947, 1.970569406236921, 1.9704984256199427, 1.970421586717878, 1.970344407217843, 1.970273699079241, 1.9702081680297852, 1.970141819545201, 1.9700713838849748, 1.9700042860848563, 1.9699301719665527, 1.9698668888636999, 1.9698059899466378, 1.9697339875357491, 1.9696642330714635, 1.9695987020220076, 1.9695279257638114, 1.9694649151393346, 1.9694045611790247, 1.9693337168012346, 1.9692737715584892, 1.9692139625549316, 1.9691542897905623, 1.9690931183951241, 1.9690357616969518, 1.968974999019078, 1.9689164842878069, 1.9688586507524763, 1.9688032695225306, 1.9687448229108537, 1.9686858313424247, 1.9686269078935896, 1.968571731022426, 1.9685170309884208, 1.968463625226702, 1.9684101513453893, 1.96835572378976, 1.9683020455496651, 1.9682472092764718, 1.968195915222168, 1.9681430544172014, 1.9680864470345634, 1.9680290903363908, 1.967979567391532, 1.967930725642613, 1.9678839956011092, 1.9678355625697546, 1.9677819524492537, 1.9677368572780065, 1.9676931926182337, 1.967639378138951, 1.9675867216927665, 1.9675370625087194, 1.9674929210117884, 1.9674418994358607, 1.967395237513951, 1.967343739100865, 1.9673014368329729, 1.9672515051705497, 1.967205388205392, 1.9671564783368791, 1.9671119281223841, 1.9670624732971191, 1.967017446245466, 1.9669711930411202, 1.9669243948800224, 1.9668807983398438, 1.9668312753949846, 1.966780458177839, 1.9667275973728724, 1.9666811398097448, 1.966639518737793, 1.9665945598057337, 1.9665477616446358, 1.966505663735526, 1.9664599554879325, 1.9664148603166853, 1.9663718768528529, 1.9663261004856654, 1.966280800955636, 1.9662378856113978, 1.9661932672773088, 1.9661446980067663, 1.9661011695861816, 1.9660555975777763, 1.966010911124093, 1.9659665652683802, 1.9659173829214913, 1.9658709253583635, 1.9658265795026506, 1.9657799175807409, 1.9657399313790458, 1.965695789882115, 1.9656543731689453], "val_accuracy": [0.03700000047683716, 0.03766666725277901, 0.03799999877810478, 0.039000000804662704, 0.039000000804662704, 0.03933333232998848, 0.03966666758060455, 0.0403333343565464, 0.0403333343565464, 0.0403333343565464, 0.04100000113248825, 0.041333332657814026, 0.0416666679084301, 0.0416666679084301, 0.04233333468437195, 0.04266666620969772, 0.0430000014603138, 0.04333333298563957, 0.043666668236255646, 0.04399999976158142, 0.044333335012197495, 0.04466666653752327, 0.04500000178813934, 0.04533333331346512, 0.04600000008940697, 0.04600000008940697, 0.04600000008940697, 0.04699999839067459, 0.04699999839067459, 0.047333333641290665, 0.04766666516661644, 0.04800000041723251, 0.04800000041723251, 0.04833333194255829, 0.04899999871850014, 0.04899999871850014, 0.05000000074505806, 0.05000000074505806, 0.05000000074505806, 0.050333332270383835, 0.050999999046325684, 0.05133333429694176, 0.05166666582226753, 0.05233333259820938, 0.05233333259820938, 0.05233333259820938, 0.05233333259820938, 0.0533333346247673, 0.05533333495259285, 0.055666666477918625, 0.0560000017285347, 0.05700000002980232, 0.05700000002980232, 0.05700000002980232, 0.05766666680574417, 0.057999998331069946, 0.058666665107011795, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.05999999865889549, 0.060333333909511566, 0.060333333909511566, 0.060333333909511566, 0.06066666543483734, 0.06133333221077919, 0.06233333423733711, 0.06233333423733711, 0.06333333253860474, 0.06366666406393051, 0.06366666406393051, 0.06400000303983688, 0.06433333456516266, 0.06433333456516266, 0.06433333456516266, 0.06533333659172058, 0.06599999964237213, 0.0663333311676979, 0.06733333319425583, 0.0676666647195816, 0.0676666647195816, 0.0676666647195816, 0.06800000369548798, 0.06800000369548798, 0.06866666674613953, 0.06866666674613953, 0.06866666674613953, 0.06833333522081375, 0.0689999982714653, 0.07000000029802322, 0.07000000029802322, 0.07066666334867477, 0.07066666334867477, 0.0716666653752327, 0.0716666653752327, 0.07233333587646484, 0.07233333587646484, 0.07266666740179062, 0.07333333045244217, 0.07333333045244217]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 3, 2, 1, 2, 7, 7, 1, 6, 5, 7, 5, 1, 2, 1, 2, 1, 8, 2, 0, 6, 0, 1, 3, 2, 0, 8, 9, 8], [2, 2, 0, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 2, 2, 2, 1], [98, 67, 98, 88, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [38, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [3, 3, 2, 1, 0, 0, 2, 2], [38, 74, 76, 58]], "fitness": -0.041428569704294205, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(sigma, beta))", "other_info": {"loss": [2.4351045528911186, 3.527951277510019, 3.1920719234903396, 2.596784077016921, 2.626058753518349, 2.5692338308622307, 2.585390954363411, 2.5603446292209586, 2.5935180554725648, 2.6277676717306977, 2.640338904444158, 2.7053463801322377, 2.7745493028331127, 2.8568461019412448, 2.9022884586499496, 2.9537787533801514, 3.0165916557057564, 3.0486163171590075, 3.0650452486417863, 3.106567495203982, 3.1192111590471976, 3.1356555612851538, 3.132179267811753, 3.172727242499893, 3.180940787648292, 3.178733755616055, 3.22890358197297, 3.2271114985987874, 3.2443660411537443, 3.273713066782288, 3.232139083514392, 3.2720330928562653, 3.27687406999686, 3.2551483720631538, 3.2634979822317276, 3.3324515330808793, 3.3438351822252113, 3.4061692719918675, 3.4387927611175546, 3.4347744316173627], "accuracy": [0.029718663543462753, 0.015453704632818699, 0.02588825859129429, 0.027605336159467697, 0.0330207385122776, 0.04807819426059723, 0.054550256580114365, 0.050851933658123016, 0.05904107913374901, 0.06934354454278946, 0.07568352669477463, 0.0730418711900711, 0.07449477910995483, 0.07819310575723648, 0.08136309683322906, 0.08545766770839691, 0.08189142495393753, 0.08413683623075485, 0.09285431355237961, 0.08638224750757217, 0.08638224750757217, 0.08691058307886124, 0.0882314071059227, 0.09034473448991776, 0.08849557489156723, 0.09034473448991776, 0.09192973375320435, 0.09893012791872025, 0.10077928751707077, 0.10011887550354004, 0.09893012791872025, 0.10038304328918457, 0.10276053100824356, 0.10210011899471283, 0.10315678268671036, 0.09972262382507324, 0.10645885765552521, 0.09866596013307571, 0.09972262382507324, 0.10408136248588562], "val_loss": [2.4730255944388255, 4.033947672162737, 2.1444328171866283, 2.3176038605826244, 2.222679546901158, 2.1906140191214427, 2.2092079435076033, 2.193056583404541, 2.23660523550851, 2.2304019927978516, 2.285023961748396, 2.345663002559117, 2.378300258091518, 2.433532510484968, 2.463855198451451, 2.5317675045558383, 2.5507612909589494, 2.5728111948285783, 2.6062823704310825, 2.6197314943586076, 2.648209367479597, 2.6543008940560475, 2.652569157736642, 2.6699562072753906, 2.631618022918701, 2.7242298126220703, 2.726683957236154, 2.7244790622166226, 2.7357336453029086, 2.70242064339774, 2.770308290209089, 2.7636581829616, 2.764637061527797, 2.739502498081752, 2.794119358062744, 2.8372231892177036, 2.8474903106689453, 2.870054449353899, 2.9322411673409596, 2.904101644243513], "val_accuracy": [0.009333333000540733, 0.004333333112299442, 0.008999999612569809, 0.03500000014901161, 0.023666666820645332, 0.03766666725277901, 0.03633333370089531, 0.04933333396911621, 0.05533333495259285, 0.06333333253860474, 0.06233333423733711, 0.061666667461395264, 0.07199999690055847, 0.06566666811704636, 0.06966666877269745, 0.06199999898672104, 0.06300000101327896, 0.07533333450555801, 0.07199999690055847, 0.08233333379030228, 0.07533333450555801, 0.07599999755620956, 0.0820000022649765, 0.08100000023841858, 0.0833333358168602, 0.09833333641290665, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10133333504199982, 0.09966666996479034, 0.10100000351667404, 0.10000000149011612, 0.10133333504199982, 0.10566666722297668, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.10133333504199982, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [2, 2, 3, 2, 1, 1, 1, 7, 1, 8, 2, 7, 5, 1, 5, 2, 4, 3, 3, 2, 0, 2, 0, 1, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 0, 1, 2, 2, 1, 1, 2, 0, 1, 3, 1, 1, 0, 0, 1, 1, 0], [92, 67, 0, 79, 8, 68, 31], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [67, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 52, 52, 30, 22, 6, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), alpha))), grad))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))))))))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [2.3040800820787615, 2.30291952700773, 2.302765570265065, 2.30199005836509, 2.303177723055109, 2.301565706800744], "accuracy": [0.08691058307886124, 0.09245806187391281, 0.0944393053650856, 0.09219389408826828, 0.08730682730674744, 0.09021265059709549], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [9, 2, 3, 3, 1, 1, 7, 7, 1, 2, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 3, 0, 6, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 1, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 1, 1, 1], [75, 67, 98, 79, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [2.3040800820787615, 2.30291952700773, 2.302765570265065, 2.30199005836509, 2.303177723055109, 2.301565706800744], "accuracy": [0.08691058307886124, 0.09245806187391281, 0.0944393053650856, 0.09219389408826828, 0.08730682730674744, 0.09021265059709549], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 3, 2, 1, 9, 7, 4, 1, 6, 5, 7, 4, 1, 2, 2, 8, 1, 8, 2, 0, 6, 0, 1, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 0, 1, 1], [98, 67, 98, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 2, 0, 8, 6, 0, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [58, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 6, 3, 3, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.negative(alpha), sigma), beta)", "other_info": {"loss": [2.3040800820787615, 2.30291952700773, 2.302765570265065, 2.30199005836509, 2.303177723055109, 2.301565706800744], "accuracy": [0.08691058307886124, 0.09245806187391281, 0.0944393053650856, 0.09219389408826828, 0.08730682730674744, 0.09021265059709549], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 3, 1, 1, 7, 7, 1, 2, 5, 7, 5, 1, 2, 2, 2, 1, 8, 2, 0, 3, 0, 6, 3, 2, 2, 8, 9, 8], [1, 1, 2, 0, 2, 1, 2, 1, 1, 2, 1, 1, 2, 0, 0, 3, 2, 1, 0, 1, 1, 1], [98, 67, 98, 79, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [19, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [5, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [24, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.3040800820787615, 2.30291952700773, 2.302765570265065, 2.30199005836509, 2.303177723055109, 2.301565706800744], "accuracy": [0.08691058307886124, 0.09245806187391281, 0.0944393053650856, 0.09219389408826828, 0.08730682730674744, 0.09021265059709549], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]