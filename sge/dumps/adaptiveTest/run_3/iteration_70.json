[{"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [2, 1, 2, 2, 3, 0, 4, 9, 9, 9], [2, 0, 3, 3, 0, 3], [61, 3, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45]], "fitness": -0.8220000267028809, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.1983484569998497, 1.7355389337907488, 1.45465468899008, 1.1037685321999453, 0.9404230234078476, 0.8312486139475599, 0.7722846170410803, 0.7436231419772772, 0.6984777550466812, 0.66549440437005, 0.6497935870808224, 0.645740742011707, 0.6063155387811783, 0.6084396870632874, 0.606246300534707, 0.560643573211027, 0.5498094246246087, 0.5330695032900225, 0.5203395876917841, 0.5199785610515019, 0.5198821176028979, 0.49064742733128175, 0.4880894831324046, 0.4738951603324894, 0.45424987113770243, 0.45761761182271854, 0.44605356601282525, 0.4552932238306399, 0.43750404192078396, 0.4333983607705338, 0.42055904925491483], "accuracy": [0.28384625911712646, 0.40589091181755066, 0.5038964748382568, 0.5807687044143677, 0.6383568644523621, 0.6785101294517517, 0.7034738063812256, 0.7149649858474731, 0.7322678565979004, 0.7491744756698608, 0.7565711140632629, 0.7534011602401733, 0.7640998363494873, 0.7718927264213562, 0.7672698497772217, 0.7915731072425842, 0.7926297783851624, 0.8009510040283203, 0.8059701323509216, 0.8090080618858337, 0.8038568496704102, 0.8161405324935913, 0.8157442808151245, 0.8170651197433472, 0.8322546482086182, 0.8255184292793274, 0.8387266993522644, 0.828292191028595, 0.8387266993522644, 0.8367455005645752, 0.8426892161369324], "val_loss": [1.6384169033595495, 1.237912722996303, 1.010521616254534, 0.7323822634560722, 0.6695766959871564, 0.6217181001390729, 0.5578792095184326, 0.5500569854463849, 0.5371584211077008, 0.5257328067507062, 0.5552548680986676, 0.5469346216746739, 0.5043192080089024, 0.4873210872922625, 0.46264701230185373, 0.4890414646693638, 0.45308492864881245, 0.4277211683137076, 0.44862442357199533, 0.43381435530526297, 0.4073047127042498, 0.4280983550207956, 0.43544284786496845, 0.40407141617366243, 0.41605607100895475, 0.3818848729133606, 0.4142780729702541, 0.4259943962097168, 0.40710086481911795, 0.4008824484688895, 0.3797645228249686], "val_accuracy": [0.34299999475479126, 0.4703333377838135, 0.5770000219345093, 0.6629999876022339, 0.6880000233650208, 0.7110000252723694, 0.7426666617393494, 0.749666690826416, 0.753000020980835, 0.7633333206176758, 0.7419999837875366, 0.7450000047683716, 0.765666663646698, 0.7793333530426025, 0.7906666398048401, 0.7820000052452087, 0.8023333549499512, 0.8130000233650208, 0.7976666688919067, 0.809333324432373, 0.8226666450500488, 0.8063333630561829, 0.8136666417121887, 0.8236666917800903, 0.8256666660308838, 0.8383333086967468, 0.812333345413208, 0.800000011920929, 0.8223333358764648, 0.8193333148956299, 0.82833331823349]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 2, 2, 3, 2, 4, 9, 9, 9], [2, 0, 3, 4, 0, 3, 4], [60, 3, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45]], "fitness": -0.8140000104904175, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.19834972117571, 1.7305443954663018, 1.3388412804131842, 1.1092129356794038, 0.9053933081641378, 0.8336232607989121, 0.784806584693091, 0.7441733802912682, 0.7131224832262708, 0.6544625301717563, 0.660453675886297, 0.6548078287357919, 0.5964047992942734, 0.6161961928807104, 0.6054831315198548, 0.5631014424670311, 0.5473202032388524, 0.5323179139122278, 0.5192726666050942, 0.5243520944928763, 0.5071691684026319, 0.5056406696159857, 0.49013491118384106], "accuracy": [0.28384625911712646, 0.40562674403190613, 0.5251618027687073, 0.5838066339492798, 0.6474705934524536, 0.6740192770957947, 0.7009642124176025, 0.7173424959182739, 0.7257958054542542, 0.748249888420105, 0.7465327978134155, 0.744419515132904, 0.7709681391716003, 0.7621186375617981, 0.7691190242767334, 0.7897239327430725, 0.7898560166358948, 0.7994980812072754, 0.804649293422699, 0.8064984679222107, 0.8100647330284119, 0.8075551390647888, 0.8149517774581909], "val_loss": [1.638540574482509, 1.2319067886897497, 0.8262377466474261, 0.7830595459256854, 0.6979715824127197, 0.6515427657536098, 0.5985219648906163, 0.5757758617401123, 0.5398973737444196, 0.530174970626831, 0.5020006384168353, 0.5138078587395805, 0.502521446772984, 0.4793178694588797, 0.4651447704860142, 0.483188271522522, 0.46446641853877474, 0.4247493062700544, 0.4579153571810041, 0.42100333315985544, 0.41479919637952534, 0.42211748020989553, 0.4177782450403486], "val_accuracy": [0.34299999475479126, 0.47966668009757996, 0.6230000257492065, 0.6389999985694885, 0.6836666464805603, 0.706333339214325, 0.7303333282470703, 0.7386666536331177, 0.7536666393280029, 0.7563333511352539, 0.765333354473114, 0.7689999938011169, 0.7680000066757202, 0.7866666913032532, 0.7833333611488342, 0.781333327293396, 0.7996666431427002, 0.8193333148956299, 0.7836666703224182, 0.8153333067893982, 0.8130000233650208, 0.8109999895095825, 0.8176666498184204]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [2, 9, 8, 8, 6, 4, 7, 2, 4, 4, 5, 3, 7, 5, 2, 0, 2, 7, 6, 2, 1, 6, 7, 8, 6, 9, 6, 9], [3, 0, 1, 1, 2, 0, 3, 2, 1, 5, 2, 2, 2, 4, 4, 0, 5], [61, 3, 20, 7, 45, 13, 40], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45, 67]], "fitness": -0.8122857213020325, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(beta, tf.math.add(alpha, beta))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.198366332724897, 1.733949329024529, 1.3392536455314896, 1.0337760473884816, 1.0037237492456035, 0.8062100235135123, 0.7668462411492272, 0.7508134971347074, 0.7221727070712678, 0.6679486898997393, 0.6484569334051691, 0.644790730621553, 0.6105613988136429, 0.6123494490136748, 0.6110444951366046, 0.5674709280830538, 0.5515477658656484, 0.5361412810202304, 0.5206117365401514, 0.5322644661493494, 0.514304410819254, 0.5033246204995082, 0.49087519024766557], "accuracy": [0.28384625911712646, 0.40562674403190613, 0.5247655510902405, 0.6102232336997986, 0.6073173880577087, 0.6869634389877319, 0.7033417224884033, 0.7108704447746277, 0.717870831489563, 0.7425703406333923, 0.7512878179550171, 0.7486461400985718, 0.76542067527771, 0.767401933670044, 0.7647602558135986, 0.7869502305984497, 0.7886672616004944, 0.796328067779541, 0.8020076751708984, 0.8035926818847656, 0.8041210174560547, 0.8103289008140564, 0.8132346868515015], "val_loss": [1.638335909162249, 1.2250179563249861, 0.7788211447851998, 0.9065841266087123, 0.6426799297332764, 0.609489917755127, 0.5609299455370221, 0.6094287804194859, 0.5397290161677769, 0.5288299662726266, 0.5171948671340942, 0.5724896022251674, 0.5020545210157122, 0.47904326234545025, 0.4678467001233782, 0.49756974833352224, 0.4632453407560076, 0.42785578966140747, 0.45310890674591064, 0.42911769662584576, 0.41377719811030794, 0.42540012087140766, 0.428376521383013], "val_accuracy": [0.34299999475479126, 0.47566667199134827, 0.6650000214576721, 0.5903333425521851, 0.7099999785423279, 0.7233333587646484, 0.7383333444595337, 0.7256666421890259, 0.7536666393280029, 0.7509999871253967, 0.7663333415985107, 0.7236666679382324, 0.7663333415985107, 0.784333348274231, 0.7816666960716248, 0.7703333497047424, 0.8026666641235352, 0.8190000057220459, 0.7956666946411133, 0.8136666417121887, 0.8159999847412109, 0.8053333163261414, 0.8146666884422302]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [2, 1, 2, 2, 3, 0, 4, 9, 9, 9], [2, 0, 3, 4, 0, 3], [61, 3, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45]], "fitness": -0.805142879486084, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.198356849170081, 1.7438408943167956, 1.441661525994496, 1.08418241265648, 0.9149863670263088, 0.8340216752418737, 0.768744522444151, 0.7318010398850638, 0.6993418122641619, 0.65941686337225, 0.6522444405135005, 0.640068225785962, 0.6058619823973523, 0.617654984267538, 0.6008861012084687, 0.5603281233714099, 0.5495049518018492, 0.5299290709759439, 0.5260270312005314, 0.5265465057001705, 0.5089068478675739, 0.5020746398107518, 0.4811251539524914], "accuracy": [0.28384625911712646, 0.40206050872802734, 0.5070664286613464, 0.5851274728775024, 0.6547351479530334, 0.6845859289169312, 0.7036058902740479, 0.7187954187393188, 0.7306828498840332, 0.7498348951339722, 0.7490423917770386, 0.750231146812439, 0.765949010848999, 0.7647602558135986, 0.7720248103141785, 0.7911768555641174, 0.7903843522071838, 0.8029322624206543, 0.7998943328857422, 0.8054417967796326, 0.8072909712791443, 0.8078193068504333, 0.8181217908859253], "val_loss": [1.6383980342320033, 1.2379631655556815, 0.9948232855115619, 0.7178593363080706, 0.6424679756164551, 0.6140501499176025, 0.5520578452519008, 0.547935026032584, 0.5437033346721104, 0.5430982453482491, 0.5149191447666713, 0.5678443057196481, 0.49508615902491976, 0.48069064957754953, 0.4632145847593035, 0.48167926924569265, 0.4527091809681484, 0.42290836572647095, 0.4555152484348842, 0.41884354182652067, 0.40851124695369173, 0.41965043544769287, 0.43414039271218435], "val_accuracy": [0.34299999475479126, 0.4593333303928375, 0.5879999995231628, 0.6596666574478149, 0.7116666436195374, 0.718666672706604, 0.7416666746139526, 0.7463333606719971, 0.7523333430290222, 0.7450000047683716, 0.768666684627533, 0.7306666374206543, 0.7743333578109741, 0.7820000052452087, 0.7866666913032532, 0.7876666784286499, 0.8043333292007446, 0.8206666707992554, 0.796999990940094, 0.8176666498184204, 0.8190000057220459, 0.8136666417121887, 0.8119999766349792]}}, {"genotype": [[0], [1], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [2, 1, 2, 0, 2, 0, 4, 9, 9, 9], [3, 0, 3, 4, 0], [61, 50, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45]], "fitness": -0.6091428399085999, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.177755141475528, 2.0332419633424483, 1.3932139330284392, 11.951267898326789, NaN, NaN, NaN], "accuracy": [0.3183199167251587, 0.2673358917236328, 0.544710099697113, 0.24197596311569214, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9576127188546317, 1.145975181034633, 1.0297256197248186, 5.201764515468052, NaN, NaN, NaN], "val_accuracy": [0.12666666507720947, 0.5983333587646484, 0.5379999876022339, 0.10866666585206985, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 2, 0, 3, 0, 4, 9, 9, 9], [3, 3, 1, 1, 0, 0, 1, 2, 1, 5, 1, 2, 2, 4, 4, 0], [61, 3, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 0, 2, 2], [45, 3]], "fitness": -0.10828571766614914, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 3, 1, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, alpha))))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3015866142930985, 2.3007589348271664, 2.3016902307682443, 2.3023509630012535, 2.302548222900177, 2.3025666853030913, 2.3025849854957157, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09126931428909302, 0.09985470771789551, 0.10196803510189056, 0.09642054885625839, 0.1022322028875351, 0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9710954938616072, 1.972775663648333, 1.9734151022774833, 1.9736267498561315, 1.973644460950579, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.08966666460037231, 0.08533333241939545, 0.10499999672174454, 0.1080000028014183, 0.1003333330154419, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [2, 1, 2, 3, 3, 0, 4, 9, 9, 9], [2, 0, 3, 4, 3, 3], [61, 3, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [1, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 10, 4, 4, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.302167251330199, 2.3024082280515348, 2.303621566495592, 2.3087870486424094, 2.335265464093691, 2.512498083241848], "accuracy": [0.10355303436517715, 0.10513802617788315, 0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973722049168178, 1.9742426872253418, 1.9765143394470215, 1.9866386141095842, 2.0452050481523787, 2.4917995589120046], "val_accuracy": [0.10066666454076767, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [6, 6, 6, 2, 0, 0, 4, 0, 9, 0, 4, 2], [0, 3, 3, 1, 0, 0, 0, 2], [61, 3, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 2, 2, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [2, 1, 5, 0, 3, 0, 4, 9, 9, 9], [2, 0, 3, 4, 0, 3], [39, 14, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 2, 2, 2], [45, 55]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 3, 2, 1, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026491327213967, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [6, 6, 4, 2, 0, 0, 4, 4, 9, 0, 4, 2], [2, 0, 3, 3, 1, 3], [61, 3, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 2, 2, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, alpha)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 0], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [2, 6, 3, 5, 3, 0, 1, 9, 9, 9], [2, 0, 3, 3, 0, 3], [32, 3, 43, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [1, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 2, 2, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026491327213967, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [2, 1, 4, 2, 3, 0, 4, 9, 9, 9], [2, 0, 3, 4, 0, 3], [87, 17, 87, 7, 45, 13], [0], [0, 1, 1], [9], [1, 1], [79], [1, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026491327213967, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0], [0, 1, 1], [2, 1, 2, 2, 8, 0, 4, 9, 9, 9], [3, 0], [39, 35, 10, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [1, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [70, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026491327213967, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 6, 4, 2, 6, 0, 4, 6, 9, 4, 4, 2, 2, 9, 6, 8, 5, 4, 6, 4, 5, 0, 4, 6, 1, 8, 2, 6, 8, 2, 5, 6, 1, 5, 7, 2, 5, 2, 0, 4, 0, 4, 5, 4, 8, 1, 8, 9, 0, 7, 1, 3, 7, 3, 6, 5, 2, 7], [3, 0, 1, 1, 0, 0, 1, 2, 1, 2, 0, 2, 2, 4, 4, 0, 2, 3, 2, 3, 0, 0, 1, 4, 2, 1, 2, 3, 5, 0, 3, 4, 1, 0, 5, 4], [61, 86, 20, 72, 45, 13, 49, 88, 10, 89, 21], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [1, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 64, 64, 39, 25, 9, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.add(beta, tf.math.square(beta)))), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(tf.math.square(beta), tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))))))), grad)))), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))))), grad)), beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.302167251330199, 2.3024082595425637, 2.3036214720225052, 2.3087870441706833, 2.3352655945295324, 2.512500134347027], "accuracy": [0.10355303436517715, 0.10513802617788315, 0.10117553919553757, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973722049168178, 1.9742426872253418, 1.9765141350882394, 1.9866389547075545, 2.045205456869943, 2.491807528904506], "val_accuracy": [0.10066666454076767, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [4, 9, 6, 7, 3, 5, 5, 0, 6, 6, 1, 3, 6, 8, 4, 8, 4, 1, 4, 2], [1, 3, 3, 0, 2, 3, 0, 2, 3, 3, 3, 3, 3, 5, 5, 3], [53, 37, 57, 36], [1], [0, 1, 1], [9], [1, 1], [79], [1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026491327213967, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [2, 6, 2, 2, 3, 0, 4, 9, 5, 9], [2, 0, 3, 4, 0, 3], [95, 3, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [8, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 10, 5, 4, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026491327213967, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 1, 2, 2, 8, 0, 5, 9, 9, 9], [2, 0, 3, 4, 0], [39, 48, 95, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [2, 9, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [45, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3030722516324023, 2.3029930683851965, 2.302922763781635, 2.3028814178557995, 2.3030630847198803, 2.3029521963363626, 2.302887889829058, 2.3031571690495523], "accuracy": [0.09668471664190292, 0.09457138925790787, 0.0940430611371994, 0.0952318087220192, 0.09536388516426086, 0.09060890227556229, 0.09470347315073013, 0.0940430611371994], "val_loss": [1.9736708913530623, 1.9736034529549735, 1.9735851287841797, 1.9735947336469377, 1.9736972536359514, 1.9737348556518555, 1.9738208225795202, 1.973684651511056], "val_accuracy": [0.10233332961797714, 0.10066666454076767, 0.10566666722297668, 0.10566666722297668, 0.09833333641290665, 0.10000000149011612, 0.10133333504199982, 0.10000000149011612]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 1, 1, 2, 3, 0, 4, 9, 8, 9], [2, 0, 3, 3, 0, 3], [39, 14, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 9, 9, 8, 4, 7, 4, 5, 6], [2, 3, 2, 2], [78, 39]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0], [1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 5, 6, 2, 3, 0, 0, 3, 9, 9, 7, 8, 3, 3, 8, 6, 3, 7, 7, 5, 1, 2, 9, 8], [3, 0, 1, 1, 0, 0, 1, 2, 1, 5, 1, 2, 2, 4, 4, 0], [83, 35, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [79], [0, 1, 1, 0, 1, 0, 0, 1, 1], [3, 9, 9, 8, 4, 7, 4, 5, 6], [0, 2, 2, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 10, 4, 3, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(beta, alpha))))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10540219396352768, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0], [0, 0, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [20, 80, 61], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 7, 7, 4, 5, 0, 7, 0, 7], [2, 4, 3, 4, 0, 3], [61, 3, 20, 7, 45, 13], [1], [1, 1, 1], [9], [1, 1], [79], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 6, 9, 8, 4, 7, 4, 5, 6], [0, 3, 2, 2], [31, 67]], "fitness": -0.03828571364283562, "mapping_values": [1, 3, 3, 2, 1, 1, 15, 15, 9, 6, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(grad)))), tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.302838119486178, 2.301590373881064, 2.3029937645888614, 2.3028832261651466, 2.3038582840867723, 2.30244970803468], "accuracy": [0.09100515395402908, 0.09206181764602661, 0.09272222965955734, 0.08492933213710785, 0.08875974267721176, 0.09470347315073013], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]