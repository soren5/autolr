[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 5, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.8182857036590576, "mapping_values": [1, 45, 45, 27, 18, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha)))))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), grad), tf.math.negative(alpha))))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0310360658060147, 1.4370849995392032, 1.0731658038288736, 0.901757172369261, 0.8197441473849272, 0.7751352644993282, 0.7346320668499404, 0.6937758809681566, 0.7140573577684985, 0.6799506182053999, 0.6736258070592662, 0.6399377474002614, 0.6153362271981295, 0.6351999474585789, 0.6189427112292274, 0.581359817855441, 0.6055044795008477, 0.5774897818378941, 0.5850781106977194, 0.5628280565172155, 0.5440637471968425, 0.5544109017920453, 0.5303501205012279, 0.5292691099424844, 0.5311521311690227, 0.5029111888902755, 0.4995184256069696, 0.5262123538581466, 0.4840237254188549, 0.48824874434598986, 0.4829628413395245, 0.4818219040969359, 0.4690716287022521, 0.4623124845047448, 0.4558567683954343, 0.4517464857957367, 0.44743151921621954], "accuracy": [0.32333904504776, 0.490159809589386, 0.6115440726280212, 0.6623960137367249, 0.6939638257026672, 0.7140403985977173, 0.7201162576675415, 0.739400327205658, 0.7273808121681213, 0.7434949278831482, 0.7485140562057495, 0.7617223858833313, 0.7714964747428894, 0.7627789974212646, 0.765949010848999, 0.7766477465629578, 0.7667415142059326, 0.7794214487075806, 0.7788931727409363, 0.785101056098938, 0.7903843522071838, 0.7878747582435608, 0.8035926818847656, 0.7985734939575195, 0.7998943328857422, 0.813498854637146, 0.8169330358505249, 0.7975168228149414, 0.8177255392074585, 0.8157442808151245, 0.8178576231002808, 0.8190463781356812, 0.8249900937080383, 0.8214238286018372, 0.8296129703521729, 0.8378021121025085, 0.8323867321014404], "val_loss": [1.4329404830932617, 1.1597658906664168, 0.7636266606194633, 0.6534210613795689, 0.6625347818647113, 0.5963902303150722, 0.5879135983330863, 0.6009710856846401, 0.5466212034225464, 0.5398802586964199, 0.5174679245267596, 0.5091872385569981, 0.5428388289042881, 0.5060618775231498, 0.4981992074421474, 0.4699275493621826, 0.4829167979104178, 0.5677597011838641, 0.4744388035365513, 0.4665065322603498, 0.45615713936941965, 0.4523430551801409, 0.44449184622083393, 0.45222020149230957, 0.430398804800851, 0.4415672166006906, 0.45134265082223074, 0.43446121897016254, 0.4198795812470572, 0.41782030888966154, 0.4080035260745457, 0.41055050918034147, 0.4291947569165911, 0.40579703875950407, 0.39793252093451364, 0.40313913992473055, 0.39230529751096455], "val_accuracy": [0.3543333411216736, 0.5316666960716248, 0.6366666555404663, 0.7163333296775818, 0.7143333554267883, 0.7206666469573975, 0.718666672706604, 0.7160000205039978, 0.7363333106040955, 0.7490000128746033, 0.7670000195503235, 0.7713333368301392, 0.7400000095367432, 0.7753333449363708, 0.7726666927337646, 0.79666668176651, 0.7860000133514404, 0.7289999723434448, 0.7950000166893005, 0.7979999780654907, 0.7976666688919067, 0.7953333258628845, 0.812333345413208, 0.8033333420753479, 0.8096666932106018, 0.8023333549499512, 0.7956666946411133, 0.8206666707992554, 0.824999988079071, 0.8136666417121887, 0.828000009059906, 0.8339999914169312, 0.8003333210945129, 0.8196666836738586, 0.8303333520889282, 0.8320000171661377, 0.8326666951179504]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 2, 3, 3, 9, 3, 3, 1, 6, 2, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 32, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8168571591377258, "mapping_values": [1, 49, 49, 29, 20, 7, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, grad))))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, grad)))), grad))))), grad)), alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.11167949334962, 1.7847397675084054, 1.3737351015306594, 1.1055348286177142, 0.9779258843316, 0.8473648040160181, 0.8198022951523641, 0.7348909266494789, 0.7183930184532229, 0.7147871976940466, 0.6592212412115165, 0.6311448025917569, 0.6217065318196662, 0.6094690629393905, 0.5652581648489016, 0.5677236935497512, 0.5613594334186296, 0.5507516351909434, 0.5399343700630003, 0.5364298723660692, 0.49250286454616554, 0.5280331842194869, 0.48470307221942965, 0.4746417574178053, 0.46496021791282915, 0.4761093094435193, 0.46010052502793, 0.4643786754417319, 0.43013263004189234, 0.4438269817991311, 0.43463812114036376, 0.4327005559600434, 0.4024242735683737, 0.41884120896492083, 0.3948317853616544, 0.4066267751542065, 0.3975355142513208, 0.3696521891303397, 0.4015698922135496, 0.3785480144450284, 0.36945634467837013, 0.37249700900050614], "accuracy": [0.2919033169746399, 0.4201558530330658, 0.49966979026794434, 0.5675604343414307, 0.6338660717010498, 0.6761326193809509, 0.68101966381073, 0.7166820764541626, 0.7259278893470764, 0.7243428826332092, 0.7449478507041931, 0.7597411274909973, 0.7592127919197083, 0.7672698497772217, 0.7819310426712036, 0.7790252566337585, 0.7862898111343384, 0.7930260300636292, 0.798309326171875, 0.7976489067077637, 0.8121780753135681, 0.8021397590637207, 0.8211596608161926, 0.8244617581367493, 0.8273676037788391, 0.8227446675300598, 0.8249900937080383, 0.8244617581367493, 0.8396512866020203, 0.8304054737091064, 0.8379341959953308, 0.8362171649932861, 0.8488970994949341, 0.8370096683502197, 0.8548408150672913, 0.8479725122451782, 0.8494254350662231, 0.8628978729248047, 0.8475762605667114, 0.8595958352088928, 0.8594637513160706, 0.8628978729248047], "val_loss": [1.4397671903882707, 1.6454771246228899, 1.057199478149414, 0.8135724067687988, 0.6811201913016183, 0.7165940489087786, 0.5799699170248849, 0.6635241678782872, 0.5721252305167062, 0.5322726964950562, 0.5395521436418805, 0.5073103053229195, 0.4782150983810425, 0.47911059856414795, 0.4775080851146153, 0.4707545552934919, 0.46711884226117817, 0.49162300995418, 0.44637395654405865, 0.4156637702669416, 0.4414436135973249, 0.42476922273635864, 0.4202336498669216, 0.40868596519742695, 0.40428823232650757, 0.4117403200694493, 0.4313605768339975, 0.406196049281529, 0.42475398097719463, 0.37911321435655865, 0.37245223351887297, 0.38307794502803255, 0.42009156942367554, 0.3731587699481419, 0.36179035902023315, 0.36719244718551636, 0.35660150221415926, 0.391434303351811, 0.3751930849892752, 0.35960701533726286, 0.3667001213346209, 0.3587912491389683], "val_accuracy": [0.3700000047683716, 0.453000009059906, 0.5136666893959045, 0.6293333172798157, 0.7099999785423279, 0.6486666798591614, 0.7383333444595337, 0.6946666836738586, 0.7353333234786987, 0.7446666955947876, 0.7606666684150696, 0.765666663646698, 0.7766666412353516, 0.7856666445732117, 0.7940000295639038, 0.7743333578109741, 0.7943333387374878, 0.7786666750907898, 0.7973333597183228, 0.8216666579246521, 0.8176666498184204, 0.8143333196640015, 0.8140000104904175, 0.8203333616256714, 0.8266666531562805, 0.8163333535194397, 0.8069999814033508, 0.8289999961853027, 0.8206666707992554, 0.8370000123977661, 0.8476666808128357, 0.8426666855812073, 0.812666654586792, 0.8393333554267883, 0.8450000286102295, 0.8493333458900452, 0.8510000109672546, 0.8363333344459534, 0.8303333520889282, 0.8483333587646484, 0.8493333458900452, 0.8493333458900452]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 9, 1, 3, 0, 6, 3, 2, 6, 6, 4, 7, 8, 9, 2, 0, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 8, 8], [1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 2, 1, 1, 0, 0, 2, 1], [33, 48, 98, 30, 22, 68, 40], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8137142658233643, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.1115652958887945, 1.7696725939558071, 1.3947692260199283, 1.1060124061614955, 0.9183839770544947, 0.9447311713884158, 0.7966232458362018, 0.7688492080790885, 0.7213137729403176, 0.6968566970881249, 0.6701078979629866, 0.6242758489209332, 0.6184538573384868, 0.6192365850613117, 0.589531370039708, 0.5610248006928504, 0.5681821700210632, 0.5458502189956557, 0.5449832787272512, 0.5368364845221588, 0.4996152077297792, 0.5235499372382788, 0.48962985666247566, 0.48277708097235433, 0.47081195629504313, 0.48879826385756653, 0.4656669194546232, 0.47903756005904774, 0.42930587377876983, 0.44445651528338054, 0.4407158297649102, 0.4330671186169078, 0.4074435385069307, 0.4058987715610849, 0.42082868923663524, 0.40510706981616235, 0.38818365659822074, 0.3764620228269396, 0.4053215828624935, 0.384906788760204, 0.3658830953894542, 0.3766978334056356, 0.3649236257042253, 0.3647224581662013, 0.3579922430842166, 0.36331148294646115, 0.3633369832833398, 0.3497332575779077, 0.3319506396344782, 0.3219168028181507, 0.34903259179170465, 0.3264921471435223, 0.3177246897212109, 0.3229826548906948, 0.30854840076138174, 0.30718634956705887], "accuracy": [0.29163914918899536, 0.4263637661933899, 0.4935939908027649, 0.5774666666984558, 0.6515651941299438, 0.6386210322380066, 0.6914542317390442, 0.7014925479888916, 0.7284374833106995, 0.7368907928466797, 0.7412495017051697, 0.7650244235992432, 0.759609043598175, 0.7647602558135986, 0.7773081660270691, 0.7812706232070923, 0.7819310426712036, 0.7971205711364746, 0.789988100528717, 0.7924976944923401, 0.8090080618858337, 0.802271842956543, 0.8164047002792358, 0.8204993009567261, 0.822348415851593, 0.8144234418869019, 0.8244617581367493, 0.8238013386726379, 0.8404437899589539, 0.8284242749214172, 0.8347642421722412, 0.834632158279419, 0.8459912538528442, 0.845859169960022, 0.843481719493866, 0.848368763923645, 0.8573504090309143, 0.8613129258155823, 0.8457271456718445, 0.8551049828529358, 0.8638224601745605, 0.8601241707801819, 0.86553955078125, 0.8623695969581604, 0.8667283058166504, 0.8642187118530273, 0.8643507957458496, 0.8698983192443848, 0.8774270415306091, 0.8754457831382751, 0.8684453964233398, 0.8767666220664978, 0.8836349248886108, 0.8800686597824097, 0.8858803510665894, 0.8845595121383667], "val_loss": [1.4387811592647008, 1.663062231881278, 1.0682155404772078, 0.7476353134427752, 0.6670754977634975, 0.7217229093824115, 0.6093860524041312, 0.6594277960913522, 0.5421388660158429, 0.5479414122445243, 0.5179905891418457, 0.5126857246671405, 0.500220775604248, 0.4812406131199428, 0.4828131880078997, 0.4742215871810913, 0.49504717758723665, 0.4819286891392299, 0.45586557047707693, 0.4253950033869062, 0.44479175976344515, 0.4252962384905134, 0.41865783078329905, 0.41061082056590487, 0.4209643176623753, 0.4574465411049979, 0.45379364490509033, 0.4050558124269758, 0.4207820551736014, 0.385150602885655, 0.3833878380911691, 0.38474526575633455, 0.39552336079733713, 0.39827804054532734, 0.3962239452770778, 0.368302515574864, 0.35997739859989714, 0.4471540706498282, 0.39785374062401907, 0.3621420519692557, 0.36688123430524555, 0.36045109374182566, 0.36475296531404766, 0.34847933053970337, 0.4123097402708871, 0.3943863425936018, 0.3768094267163958, 0.3412302817617144, 0.36588992391313824, 0.37989812237875803, 0.33831182547977995, 0.36009430033820017, 0.3833985584122794, 0.3425798841885158, 0.3486244763646807, 0.347199661391122], "val_accuracy": [0.37033334374427795, 0.437333345413208, 0.5189999938011169, 0.6643333435058594, 0.6993333101272583, 0.6526666879653931, 0.7120000123977661, 0.6970000267028809, 0.7519999742507935, 0.7426666617393494, 0.7683333158493042, 0.765666663646698, 0.7643333077430725, 0.7879999876022339, 0.7720000147819519, 0.7696666717529297, 0.765666663646698, 0.7933333516120911, 0.8029999732971191, 0.8149999976158142, 0.8053333163261414, 0.8140000104904175, 0.8180000185966492, 0.8240000009536743, 0.8159999847412109, 0.7906666398048401, 0.7870000004768372, 0.8303333520889282, 0.8203333616256714, 0.8346666693687439, 0.8366666436195374, 0.8453333377838135, 0.8246666789054871, 0.8259999752044678, 0.8203333616256714, 0.8473333120346069, 0.8483333587646484, 0.8073333501815796, 0.8216666579246521, 0.8510000109672546, 0.8493333458900452, 0.8510000109672546, 0.846666693687439, 0.8523333072662354, 0.7929999828338623, 0.8360000252723694, 0.8410000205039978, 0.8529999852180481, 0.8370000123977661, 0.8373333215713501, 0.8586666584014893, 0.8529999852180481, 0.8289999961853027, 0.8569999933242798, 0.8529999852180481, 0.8576666712760925]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 2, 3, 3, 9, 9, 3, 1, 2, 2, 5, 2, 0, 1, 1, 0, 8, 4, 9, 0, 8, 3, 1, 6, 0, 0, 1, 5, 8], [2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 32, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8128571510314941, "mapping_values": [1, 32, 32, 21, 11, 5, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), grad))))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), grad)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.138562642462013, 1.4458479880814257, 1.1025652898033422, 0.9649892672256724, 0.8894176350498338, 0.8053631995489821, 0.7606653943116622, 0.7240134336456819, 0.718419098457278, 0.7105614903690856, 0.6795076378789072, 0.6655221896054423, 0.6608397703774774, 0.6406267200478662, 0.631280262433086, 0.60926752494484, 0.6251238866441868, 0.5979375550460664, 0.6054751387897058, 0.5827479551906332, 0.5939610553549863, 0.5826345534608695, 0.5613126059045188, 0.5520653180505433, 0.5688599650067203, 0.5524237513416211, 0.5438096144211653, 0.5488009401804358, 0.5294440667532565, 0.5218266886711247, 0.5292973077812089, 0.5192301628013659, 0.5104093297975505, 0.5041165882609603, 0.48752112407348003, 0.49990260239290507, 0.4916975466157341], "accuracy": [0.29045039415359497, 0.5003302097320557, 0.6151102781295776, 0.6407343745231628, 0.672698438167572, 0.705058753490448, 0.7117950320243835, 0.7273808121681213, 0.7257958054542542, 0.7302865982055664, 0.7520803213119507, 0.7510236501693726, 0.7477215528488159, 0.7572315335273743, 0.7606657147407532, 0.7683265209197998, 0.7548540234565735, 0.7708360552787781, 0.7701756954193115, 0.7794214487075806, 0.7695152759552002, 0.7763835787773132, 0.7931581139564514, 0.7915731072425842, 0.785629391670227, 0.7901201844215393, 0.7940827012062073, 0.7905164361000061, 0.7981772422790527, 0.8043851256370544, 0.7928939461708069, 0.806630551815033, 0.805177628993988, 0.8062343001365662, 0.8198388814926147, 0.8124422430992126, 0.8153480291366577], "val_loss": [1.3569565500531877, 0.9226551737104144, 0.6984693152563912, 0.7742109639304025, 0.65489433492933, 0.6093977178846087, 0.5828946317945208, 0.5985847200666156, 0.5657352209091187, 0.5334607022149223, 0.5459498677934919, 0.5417499031339373, 0.521771856716701, 0.5205038785934448, 0.518722483089992, 0.4986788204738072, 0.49352478981018066, 0.5194004603794643, 0.49569525037493023, 0.47497388294764925, 0.4706840515136719, 0.46913181032453266, 0.463009238243103, 0.48842927387782503, 0.45157648835863384, 0.47070324420928955, 0.45169433525630404, 0.44965028762817383, 0.4458396945680891, 0.4431123988968985, 0.43418894495282856, 0.4271434375217983, 0.45007479190826416, 0.42006666319710867, 0.41028878518513273, 0.4267590045928955, 0.41642773151397705], "val_accuracy": [0.5, 0.5789999961853027, 0.7036666870117188, 0.6489999890327454, 0.7143333554267883, 0.7173333168029785, 0.7369999885559082, 0.7226666808128357, 0.7416666746139526, 0.7670000195503235, 0.7580000162124634, 0.7519999742507935, 0.7573333382606506, 0.7666666507720947, 0.7723333239555359, 0.7823333144187927, 0.7793333530426025, 0.7706666588783264, 0.7666666507720947, 0.7876666784286499, 0.7906666398048401, 0.7903333306312561, 0.800000011920929, 0.7856666445732117, 0.8009999990463257, 0.7870000004768372, 0.8036666512489319, 0.8140000104904175, 0.8103333115577698, 0.8019999861717224, 0.8140000104904175, 0.824999988079071, 0.7963333129882812, 0.8166666626930237, 0.8246666789054871, 0.8176666498184204, 0.8226666450500488]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [3, 3, 2, 3, 3, 9, 1, 3, 1, 6, 1, 7, 2, 1, 2, 1, 8, 1, 0, 2, 2, 8, 3, 1, 3, 0, 0, 8, 5, 8, 3, 8, 0, 4, 4, 7, 3, 7, 6, 6, 1, 3, 5, 2, 4, 7, 7, 1], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [81, 48, 32, 88, 65, 68, 88, 25, 91, 47, 65, 81, 15, 68, 24, 25], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [32, 74, 76, 58]], "fitness": -0.8059999942779541, "mapping_values": [1, 84, 84, 48, 36, 16, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha))))), tf.math.sqrt(alpha)))), grad)))), grad)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), grad)), tf.math.add(alpha, tf.math.pow(tf.math.pow(alpha, tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.multiply(grad, tf.math.add(alpha, grad)))))), tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.0513642281274187, 1.3880623391968558, 1.1084846919160147, 0.9214148663290425, 0.8539043138559704, 0.7909246587466727, 0.7427683039316806, 0.6992409794227621, 0.702819625549722, 0.6988414689266702, 0.6510720359036762, 0.6619854982361235, 0.629662960748064, 0.6267342317483806, 0.6237808137742394, 0.5950357901925629, 0.6091725339884487, 0.5836251424823565, 0.5977030016364769, 0.5679371126528509, 0.55095942454835, 0.5485569175601934, 0.5426020383787602, 0.5398971829762659, 0.5436214199785417, 0.5177129815047081, 0.5169491431441022, 0.5239826879166278, 0.4951719377318299, 0.49511039310190674, 0.49311559086682977, 0.4862737342500731, 0.4752772527954377, 0.4737342848651492, 0.4648541245619855, 0.4594041292835236, 0.45799767647862133, 0.4501923780557171, 0.4472108212609758, 0.43951744902025297, 0.43038578635949376, 0.439360306680541, 0.43418979728226614, 0.41907159969350366, 0.4164839089782782, 0.4351606028718625, 0.41762161169857037, 0.4220148815872206, 0.40142156666910106], "accuracy": [0.3203011453151703, 0.5126138925552368, 0.6082419753074646, 0.6560559868812561, 0.6804913282394409, 0.7004358768463135, 0.7185312509536743, 0.735041618347168, 0.7333245277404785, 0.7372870445251465, 0.7586844563484192, 0.7493065595626831, 0.7651565074920654, 0.7621186375617981, 0.7588165402412415, 0.772288978099823, 0.7635715007781982, 0.7751948237419128, 0.7786290049552917, 0.7866860628128052, 0.7917051911354065, 0.7927618622779846, 0.7975168228149414, 0.7913089394569397, 0.7931581139564514, 0.8031964302062988, 0.8039889335632324, 0.8012151718139648, 0.813498854637146, 0.8101968169212341, 0.8137630224227905, 0.8197067975997925, 0.819970965385437, 0.817461371421814, 0.8253863453865051, 0.8327829837799072, 0.8289526104927063, 0.8352925777435303, 0.8297450542449951, 0.8355567455291748, 0.8393871188163757, 0.8360850811004639, 0.8381983637809753, 0.8467837572097778, 0.8432175517082214, 0.8333113193511963, 0.841500461101532, 0.8403117060661316, 0.8531237840652466], "val_loss": [1.299755266734532, 1.229231664112636, 0.7857481581824166, 0.6631533588681903, 0.6167243037905011, 0.5908727986471993, 0.5725432464054653, 0.5938852003642491, 0.5627598762512207, 0.5265899726322719, 0.5398033346448626, 0.5301494768687657, 0.5506459474563599, 0.5324887718473162, 0.49102675914764404, 0.4710989509310041, 0.48311078548431396, 0.5779789856501988, 0.4714470590863909, 0.48191814763205393, 0.46309103284563335, 0.4621673992701939, 0.4516031060900007, 0.45601424149104525, 0.43208885192871094, 0.448468702180045, 0.45197226319994244, 0.4294930781636919, 0.42813657011304584, 0.42260563373565674, 0.4109369346073696, 0.4122117246900286, 0.4264933466911316, 0.4179030656814575, 0.3944542237690517, 0.4065421734537397, 0.3974797895976475, 0.4032611506325858, 0.3962219612939017, 0.3808123128754752, 0.3981992942946298, 0.4059279816491263, 0.3832186205046518, 0.3773702383041382, 0.39228895732334684, 0.38467409781047274, 0.39122389044080463, 0.3778325745037624, 0.389025662626539], "val_accuracy": [0.4483333230018616, 0.48899999260902405, 0.6703333258628845, 0.6899999976158142, 0.7300000190734863, 0.7396666407585144, 0.7379999756813049, 0.7160000205039978, 0.7453333139419556, 0.7630000114440918, 0.7563333511352539, 0.7620000243186951, 0.7326666712760925, 0.7576666474342346, 0.7933333516120911, 0.7950000166893005, 0.7879999876022339, 0.734000027179718, 0.7960000038146973, 0.7893333435058594, 0.7906666398048401, 0.7910000085830688, 0.8033333420753479, 0.8040000200271606, 0.8100000023841858, 0.7996666431427002, 0.7990000247955322, 0.8233333230018616, 0.8203333616256714, 0.8113333582878113, 0.8266666531562805, 0.82833331823349, 0.8043333292007446, 0.8113333582878113, 0.8343333601951599, 0.828000009059906, 0.8336666822433472, 0.8236666917800903, 0.82833331823349, 0.8403333425521851, 0.8303333520889282, 0.8309999704360962, 0.8426666855812073, 0.8486666679382324, 0.8266666531562805, 0.8346666693687439, 0.8353333473205566, 0.8346666693687439, 0.8246666789054871]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 80, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [48, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8019999861717224, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.138560949787724, 1.4462582395533687, 1.1016163480610912, 0.9607626607846024, 0.8963812730331557, 0.800423539695707, 0.7640410947242291, 0.7223482934506877, 0.7181700094737208, 0.7010666833435933, 0.6898789289699585, 0.6670273709700265, 0.6614765318125593, 0.6355669605670556, 0.6302112614505436, 0.6139473817714091, 0.6147395299961381, 0.6208499005095613, 0.6037588020625005, 0.5928053426437091, 0.5759871024827853], "accuracy": [0.29058247804641724, 0.5004622936248779, 0.615770697593689, 0.6429798007011414, 0.6729626059532166, 0.7077004313468933, 0.7117950320243835, 0.728701651096344, 0.7273808121681213, 0.7363624572753906, 0.7434949278831482, 0.7485140562057495, 0.7489103078842163, 0.7594769597053528, 0.7585523724555969, 0.7677981853485107, 0.7670056819915771, 0.7630431652069092, 0.7746664881706238, 0.7711002230644226, 0.785101056098938], "val_loss": [1.356853825705392, 0.9212148189544678, 0.6963509150913784, 0.7669493130275181, 0.6603724786213466, 0.6260107415063041, 0.5867444617407662, 0.5936736209051949, 0.5588447877338955, 0.5421440941946847, 0.5464553492409843, 0.5321498768670219, 0.5171310731342861, 0.5153087888445173, 0.5213135310581752, 0.48815059661865234, 0.4964584452765329, 0.5405280590057373, 0.49119082518986296, 0.4849989925112043, 0.4727212531226022], "val_accuracy": [0.49966666102409363, 0.5806666612625122, 0.7093333601951599, 0.6543333530426025, 0.7086666822433472, 0.7056666612625122, 0.7350000143051147, 0.7233333587646484, 0.7433333396911621, 0.753000020980835, 0.7570000290870667, 0.7580000162124634, 0.7636666893959045, 0.7676666378974915, 0.7710000276565552, 0.7926666736602783, 0.7799999713897705, 0.7426666617393494, 0.7853333353996277, 0.7879999876022339, 0.7893333435058594]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 6, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7994285821914673, "mapping_values": [1, 49, 49, 30, 19, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), grad))))))), tf.math.add(alpha, grad)))))), tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha))))), tf.math.add(alpha, alpha)))))), grad)))), grad), grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.139104482646096, 1.4538400792930704, 1.1336961055649049, 0.9447176660119645, 0.8942762165730261, 0.819532443621785, 0.7965386729387796, 0.7840020578015576, 0.7256895189335034, 0.6939154396581769, 0.6853963863013554, 0.6955406074951574, 0.668130112385564, 0.6443362158240108, 0.646969918530174, 0.6226056956926813, 0.608923560002256, 0.5927082309948376, 0.5908738558224054, 0.6104680819124704, 0.5791195335326461, 0.5780329221920835, 0.5888766974836623, 0.5579205083336891, 0.5694525547629696, 0.5546901503164755, 0.5402143711521641, 0.553111221827788, 0.535940318697432, 0.5287856125340344, 0.525195619449356], "accuracy": [0.2995641231536865, 0.48989564180374146, 0.6032228469848633, 0.6617355942726135, 0.6687359809875488, 0.6988508701324463, 0.7022850513458252, 0.7088891863822937, 0.7302865982055664, 0.7413815855979919, 0.7416457533836365, 0.7364945411682129, 0.7456082701683044, 0.7602694630622864, 0.7528728246688843, 0.7629110813140869, 0.7683265209197998, 0.780610203742981, 0.7755910754203796, 0.7672698497772217, 0.7824593782424927, 0.7845727205276489, 0.7784969210624695, 0.7938185334205627, 0.7845727205276489, 0.7950072884559631, 0.7993659973144531, 0.7895918488502502, 0.7968564033508301, 0.7976489067077637, 0.8005547523498535], "val_loss": [1.346766539982387, 0.9040684359414237, 0.7026458978652954, 0.6545027664729527, 0.6275679213660104, 0.6083766732897077, 0.6714450972420829, 0.5769748517445156, 0.5609360592705863, 0.551478351865496, 0.5317692586353847, 0.5276941401617867, 0.5175332682473319, 0.5277682372501918, 0.4933661052158901, 0.48477862562452045, 0.5001825605119977, 0.480629563331604, 0.4953444344656808, 0.49889366967337473, 0.47747649465288433, 0.46743363993508474, 0.4629244123186384, 0.5051694597516742, 0.46116888523101807, 0.4422965390341623, 0.4592562232698713, 0.45279572691236225, 0.44080042839050293, 0.435582092830113, 0.4353381906236921], "val_accuracy": [0.6003333330154419, 0.6043333411216736, 0.7046666741371155, 0.7136666774749756, 0.7203333377838135, 0.7276666760444641, 0.6769999861717224, 0.7300000190734863, 0.7453333139419556, 0.7513333559036255, 0.762333333492279, 0.7543333172798157, 0.762666642665863, 0.7620000243186951, 0.7716666460037231, 0.7850000262260437, 0.7703333497047424, 0.781000018119812, 0.7793333530426025, 0.7893333435058594, 0.7886666655540466, 0.7923333048820496, 0.7926666736602783, 0.7803333401679993, 0.7953333258628845, 0.809333324432373, 0.7973333597183228, 0.7996666431427002, 0.8013333082199097, 0.8076666593551636, 0.8083333373069763]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [8, 6, 1, 3, 2, 0, 9, 2, 9, 6, 5, 7, 2, 3, 2, 0, 2, 1, 0, 2, 0, 9, 3, 1, 3, 2, 0, 8, 9, 8], [2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 32, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7968571186065674, "mapping_values": [1, 16, 16, 11, 5, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))))), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1391067827823314, 1.4531491038632698, 1.1335374249002448, 0.9454262030359273, 0.8724571649644983, 0.8415070390814662, 0.8030604702716868, 0.7759555640898959, 0.7254483200980688, 0.6942245137768651, 0.6822882180027501, 0.7003867556043919, 0.6690167239817331, 0.6351888955560547, 0.6495780252572678, 0.6223011257909529, 0.6054608635048369, 0.5983723169304612, 0.5926089880882458, 0.6142256086796282, 0.5757153737798516, 0.5820309663209398, 0.5893037900980107, 0.5592823252780578, 0.5709838248703695, 0.5520480636592396, 0.5401552922816056, 0.5563090823314225, 0.5348018828699256, 0.5291750401223041, 0.5281366943494282], "accuracy": [0.2995641231536865, 0.4900277256965637, 0.6017699241638184, 0.6604147553443909, 0.6775855422019958, 0.6955488324165344, 0.6980583667755127, 0.7113987803459167, 0.7292299270629883, 0.7441553473472595, 0.7415136694908142, 0.733588695526123, 0.7465327978134155, 0.7625148296356201, 0.7493065595626831, 0.7629110813140869, 0.7701756954193115, 0.7754589915275574, 0.7729493975639343, 0.7642319202423096, 0.7862898111343384, 0.7808743715286255, 0.7778365015983582, 0.7957997918128967, 0.7857614755630493, 0.7972526550292969, 0.7961959838867188, 0.7876105904579163, 0.7971205711364746, 0.800290584564209, 0.7972526550292969], "val_loss": [1.3467425618852888, 0.905393293925694, 0.7032447372164045, 0.6533402885709491, 0.6569889102663312, 0.6055264643260411, 0.6434566293443952, 0.5769994258880615, 0.568379317011152, 0.5476180825914655, 0.5336912189211164, 0.5258315631321498, 0.5050502845219204, 0.5355255433491298, 0.49136054515838623, 0.4831418480191912, 0.5061063255582537, 0.48291139943259104, 0.48782352038792204, 0.49098762444087435, 0.4731243848800659, 0.46393753801073345, 0.46178880759647917, 0.4992126737322126, 0.46098875999450684, 0.4428250108446394, 0.46450420788356234, 0.4494066408702305, 0.4401497670582363, 0.43416079453059603, 0.4366122569356646], "val_accuracy": [0.6000000238418579, 0.6016666889190674, 0.7039999961853027, 0.721666693687439, 0.6926666498184204, 0.7306666374206543, 0.6899999976158142, 0.7243333458900452, 0.7429999709129333, 0.7526666522026062, 0.7599999904632568, 0.7559999823570251, 0.7693333625793457, 0.7490000128746033, 0.7723333239555359, 0.7833333611488342, 0.7616666555404663, 0.7786666750907898, 0.7860000133514404, 0.7943333387374878, 0.7926666736602783, 0.7943333387374878, 0.7943333387374878, 0.7846666574478149, 0.79666668176651, 0.8106666803359985, 0.7933333516120911, 0.7993333339691162, 0.8029999732971191, 0.8073333501815796, 0.8036666512489319]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 9, 8, 3, 2, 6, 3, 8, 6, 6, 4, 7, 8, 9, 2, 0, 2, 1, 0, 2, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [2, 1, 2, 1, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 0, 1, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7922857403755188, "mapping_values": [1, 8, 8, 5, 3, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1379483335321416, 1.4147649105781452, 1.1283803318769012, 0.9620430235219685, 0.8563845468124835, 0.7976852983940924, 0.8170197922020478, 0.7550772335614038, 0.7352677861366604, 0.71545417640093, 0.6800325307407085, 0.6801221025319163, 0.6493397674398683, 0.6453786491166804, 0.6415699753054633, 0.6264882675487572, 0.6307481356017295, 0.6142015862600316, 0.6246061773505492, 0.5889471685960387], "accuracy": [0.2851670980453491, 0.5138026475906372, 0.5913353562355042, 0.652621865272522, 0.6866992712020874, 0.7074362635612488, 0.6999075412750244, 0.7218332886695862, 0.7277770638465881, 0.7342491149902344, 0.7461365461349487, 0.7469290494918823, 0.7534011602401733, 0.7588165402412415, 0.7618544697761536, 0.7677981853485107, 0.763439416885376, 0.7696473598480225, 0.7656848430633545, 0.7819310426712036], "val_loss": [1.3582477910178048, 0.9407657555171421, 0.7042991433824811, 0.6406113760811942, 0.6175812993730817, 0.6060430492673602, 0.5965549264635358, 0.5608903850827899, 0.5440359796796527, 0.5398824214935303, 0.5396565539496285, 0.5256362131663731, 0.5118326119014195, 0.5150730439594814, 0.49236299310411724, 0.509259751864842, 0.4955977371760777, 0.5599187612533569, 0.48100381238119944, 0.4836403472082956], "val_accuracy": [0.5536666512489319, 0.5546666383743286, 0.7023333311080933, 0.7226666808128357, 0.737333357334137, 0.7210000157356262, 0.7350000143051147, 0.7493333220481873, 0.753333330154419, 0.7603333592414856, 0.7570000290870667, 0.7676666378974915, 0.7766666412353516, 0.768666684627533, 0.7886666655540466, 0.7739999890327454, 0.781333327293396, 0.7459999918937683, 0.7886666655540466, 0.7870000004768372]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [8, 5, 3, 3, 2, 3, 9, 2, 1, 0, 5, 7, 2, 0, 2, 1, 1, 1, 0, 1, 5, 9, 3, 1, 0, 1, 0, 8, 9, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 98, 91, 38, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [3, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [52, 74, 76, 58]], "fitness": -0.776285707950592, "mapping_values": [1, 11, 11, 6, 5, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [1.9964854183954066, 2.310435743946614, 1.9894921991567192, 1.7059626673600299, 1.5132142854892598, 1.1035909605158507, 0.8783955942323226, 0.7586727898039948, 0.7758594990296214, 0.7080889532846656, 0.6600516889514452, 0.6487233551139641, 0.5919817253472924, 0.6522708213513537, 0.604163262491701, 0.5928299449391101, 0.5813106862765891, 0.5507263094521375, 0.5502713891131263], "accuracy": [0.2996962070465088, 0.2339189052581787, 0.3140932619571686, 0.42002376914024353, 0.49768856167793274, 0.6189407110214233, 0.6819442510604858, 0.7239466309547424, 0.7113987803459167, 0.7298903465270996, 0.7449478507041931, 0.7498348951339722, 0.7763835787773132, 0.7572315335273743, 0.7758552432060242, 0.7770439982414246, 0.7877426743507385, 0.7928939461708069, 0.7880068421363831], "val_loss": [1.8899117878505163, 1.6962453297206335, 1.3235445022583008, 0.9569245065961566, 0.8654443195887974, 0.7369279520852225, 0.6447811467306954, 0.6691140447344098, 0.6060909032821655, 0.5254861967904227, 0.5559408153806414, 0.5351975134440831, 0.5197366646357945, 0.488329359463283, 0.4788447448185512, 0.4900439126150949, 0.49675425461360384, 0.4779796430042812, 0.4572273833411081], "val_accuracy": [0.15333333611488342, 0.36633333563804626, 0.515999972820282, 0.5893333554267883, 0.624666690826416, 0.7003333568572998, 0.722000002861023, 0.653333306312561, 0.7196666598320007, 0.75, 0.7419999837875366, 0.7733333110809326, 0.7559999823570251, 0.7953333258628845, 0.7699999809265137, 0.7839999794960022, 0.7693333625793457, 0.7863333225250244, 0.7903333306312561]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 3, 3, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [0, 1, 2, 0, 2, 2, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [40, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026854733686406, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [89, 48, 57, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [1, 2, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 10, 9, 4, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 5, 2, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, beta))", "other_info": {"loss": [2.3026854733686406, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [3, 3, 2, 3, 3, 9, 3, 3, 1, 2, 2, 7, 1, 1, 2, 1, 0, 1, 0, 2, 0, 8, 4, 1, 8, 0, 0, 8, 9, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 53, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 8, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [52, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 47, 47, 28, 19, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, grad))))))), grad)))))), alpha)))), alpha)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.302379438543616, 2.3022698203507446, 2.30248580705126, 2.3032449146130176, 2.3066017105279895, 2.3208804971049757], "accuracy": [0.10606260597705841, 0.10751552134752274, 0.10566636174917221, 0.10210011899471283, 0.10210011899471283, 0.10619468986988068], "val_loss": [1.973710332598005, 1.9738266808646066, 1.9742015429905482, 1.9757757186889648, 1.98250184740339, 2.0087787764413014], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.09833333641290665, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 9, 1, 3, 2, 3, 3, 0, 6, 3, 4, 0, 8, 9, 2, 0, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [2, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 1, 2, 0, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [6, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 4, 2, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 1, 7, 2, 1, 2, 2, 0, 1, 4, 2, 0, 8, 4, 1, 3, 0, 0, 5, 5, 8], [2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 0, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [51, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 51, 51, 30, 21, 6, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(grad, grad)))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(grad)))), grad))))), alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [5, 5, 3, 3, 2, 3, 9, 2, 1, 0, 5, 7, 2, 0, 2, 1, 1, 1, 0, 1, 5, 9, 3, 1, 0, 1, 0, 8, 9, 8], [1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 98, 91, 38, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [3, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [3, 3, 2, 1, 0, 0, 2, 2], [60, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(sigma)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 2, 3, 3, 9, 3, 4, 1, 2, 4, 7, 2, 1, 2, 1, 0, 1, 1, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 2, 1, 1, 2, 2, 1, 1, 1, 0, 1, 2, 1], [81, 48, 98, 30, 42, 68, 44], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [88, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 27, 21, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, grad))))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), alpha)))))), alpha), alpha), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 2, 2, 3, 2, 8, 3, 3, 8, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 1, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 10, 9, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad)))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 8, 3, 9, 3, 3, 3, 1, 3, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 9, 3, 1, 3, 0, 0, 8, 5, 8], [2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 1, 2, 2, 2, 1, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [4, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 42, 25, 17, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)))))), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, grad)), alpha))), tf.math.add(alpha, alpha)), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3026854733686406, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [1, 9, 1, 3, 2, 6, 3, 1, 6, 6, 4, 7, 8, 9, 0, 0, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [2, 1, 1, 0, 2, 2, 2, 2, 0, 2, 2, 1, 2, 0, 2, 1, 2, 1, 0, 0, 2, 1], [81, 98, 98, 30, 12, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.05171428620815277, "mapping_values": [1, 33, 33, 20, 13, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, grad)))), tf.math.pow(tf.math.add(alpha, alpha), grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [2.5404672863272126, 2.1230014946639906, 3.292837141117856, 2.5471909558532135, 2.4552084150063664, 2.335931093402117, 2.2962649606710506, 3.2010210193678876], "accuracy": [0.28041210770606995, 0.2975828945636749, 0.21793685853481293, 0.13776251673698425, 0.10447761416435242, 0.10381719470024109, 0.16312244534492493, 0.1935015171766281], "val_loss": [1.8688413756234306, 2.6105367115565707, 1.5735164369855608, 2.1433029174804688, 1.9996662821088518, 1.9180232456752233, 1.701669420514788, 2.1180977821350098], "val_accuracy": [0.21899999678134918, 0.22166666388511658, 0.4713333249092102, 0.09799999743700027, 0.10633333027362823, 0.14399999380111694, 0.2639999985694885, 0.10199999809265137]}}]