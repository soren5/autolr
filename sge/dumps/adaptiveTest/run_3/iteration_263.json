[{"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 6, 6, 4, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8257142901420593, "mapping_values": [1, 2, 2, 1, 1, 1, 20, 20, 11, 9, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0007130059394793, 1.275492530000712, 0.9946058173032248, 0.8949896435475605, 0.7805614128025877, 0.7458100221365229, 0.7333467109186649, 0.6846072628293071, 0.7215791063270297, 0.6461422252003165, 0.6464382077031808, 0.6216068495738587, 0.6072360256076914, 0.5860759137155767, 0.5802345879719384, 0.568048779943348, 0.5293668676219392, 0.5540107014141126, 0.5315651045955955, 0.5086681733490721, 0.5199063719460489, 0.5036543397745358, 0.4968038533719901, 0.4860595147040668, 0.5069624149150632, 0.4805624405107384, 0.47937479806913125, 0.4648491837770207, 0.45209465091726986], "accuracy": [0.31145158410072327, 0.5439175963401794, 0.6287148594856262, 0.6559239029884338, 0.7021529674530029, 0.7210407853126526, 0.7255316376686096, 0.7375511527061462, 0.7326641082763672, 0.759609043598175, 0.7520803213119507, 0.7604015469551086, 0.7717606425285339, 0.7692511081695557, 0.7788931727409363, 0.7828556299209595, 0.800290584564209, 0.7827235460281372, 0.7926297783851624, 0.8079513907432556, 0.8018755912780762, 0.8084797263145447, 0.8145555257797241, 0.8169330358505249, 0.8042530417442322, 0.8166688680648804, 0.8187822103500366, 0.8261788487434387, 0.8255184292793274], "val_loss": [1.3378986631120955, 0.8686043875558036, 0.6908702850341797, 0.6371510710035052, 0.5736621447971889, 0.6250214406422206, 0.5452359574181693, 0.6867033754076276, 0.5675028221947807, 0.515825663294111, 0.5134172439575195, 0.590153557913644, 0.4807956559317453, 0.4774528912135533, 0.4664034162248884, 0.4651715074266706, 0.45117487226213726, 0.4462299006325858, 0.4591562237058367, 0.4367787412234715, 0.42243365730558124, 0.41806805985314505, 0.43562865257263184, 0.4105970093182155, 0.41744876759392874, 0.42969163826533724, 0.41749684299741474, 0.42587884834834505, 0.4916086367198399], "val_accuracy": [0.543666660785675, 0.5896666646003723, 0.7039999961853027, 0.7269999980926514, 0.7419999837875366, 0.7250000238418579, 0.7483333349227905, 0.6869999766349792, 0.737333357334137, 0.7613333463668823, 0.7726666927337646, 0.7263333201408386, 0.781333327293396, 0.7913333177566528, 0.800000011920929, 0.7910000085830688, 0.7986666560173035, 0.8016666769981384, 0.7889999747276306, 0.8059999942779541, 0.8203333616256714, 0.8259999752044678, 0.8103333115577698, 0.8299999833106995, 0.824999988079071, 0.8059999942779541, 0.8113333582878113, 0.8103333115577698, 0.778333306312561]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 1, 6, 4, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8231428861618042, "mapping_values": [1, 2, 2, 1, 1, 1, 21, 21, 12, 9, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0005396386934953, 1.2760391694490762, 0.9849274737125437, 0.8944156688312419, 0.7835472932014294, 0.7729637647317527, 0.7320345182302936, 0.6904459431769432, 0.7026103740953388, 0.6598029444246338, 0.6398891849823916, 0.6145872568504732, 0.6151817315967248, 0.5902766628571474, 0.5737063755858072, 0.5701876056428914, 0.528884240767235, 0.5536608118438419, 0.5298486860468246, 0.5222726869679177, 0.5249303446674486, 0.4991880852186354, 0.49242537845284823, 0.48927695639239577, 0.49944823503242336, 0.489479538373597, 0.48037050734295617], "accuracy": [0.31184783577919006, 0.5453705191612244, 0.6349227428436279, 0.6605468392372131, 0.7063795924186707, 0.7098137736320496, 0.7234182953834534, 0.7334566116333008, 0.7376832365989685, 0.7548540234565735, 0.7498348951339722, 0.7627789974212646, 0.7647602558135986, 0.770439863204956, 0.780610203742981, 0.7802139520645142, 0.8006868362426758, 0.7814027070999146, 0.7940827012062073, 0.7987055778503418, 0.8005547523498535, 0.8108572363853455, 0.8152159452438354, 0.8191784620285034, 0.8086118102073669, 0.8148196935653687, 0.8164047002792358], "val_loss": [1.333892583847046, 0.8627422707421439, 0.8389778648103986, 0.6184727805001395, 0.6135838202067784, 0.636349081993103, 0.568535464150565, 0.6284769092287336, 0.5847125394003732, 0.5109111411230904, 0.5121962342943464, 0.5988047122955322, 0.48401648657662527, 0.4862520694732666, 0.4681593860898699, 0.4618579660143171, 0.4535989080156599, 0.4530455895832607, 0.4670642614364624, 0.43839021239961895, 0.4249480196407863, 0.41546877792903353, 0.43103863511766705, 0.42077767848968506, 0.43376454285212923, 0.42247386489595684, 0.4167765634400504], "val_accuracy": [0.5419999957084656, 0.5973333120346069, 0.6513333320617676, 0.7293333411216736, 0.7286666631698608, 0.7143333554267883, 0.7229999899864197, 0.6990000009536743, 0.7453333139419556, 0.7633333206176758, 0.7696666717529297, 0.7250000238418579, 0.7806666493415833, 0.7739999890327454, 0.7973333597183228, 0.7929999828338623, 0.79666668176651, 0.7983333468437195, 0.7886666655540466, 0.8083333373069763, 0.8183333277702332, 0.8299999833106995, 0.8023333549499512, 0.8223333358764648, 0.8103333115577698, 0.8133333325386047, 0.8109999895095825]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8157142996788025, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0008139292860956, 1.2739941529184677, 0.980621257312955, 0.8927274101351419, 0.808672631161639, 0.744636647099155, 0.7400283292142581, 0.7006286452978893, 0.6863160266647595, 0.663844473168929, 0.6385560408008254, 0.6240634886328223, 0.607744306258994, 0.5874988750585743, 0.5697587936419883, 0.5657214158168007, 0.5287648048446226, 0.549544195961313, 0.5286854295966144, 0.513057093681078, 0.5220803128115773, 0.4905518480358721, 0.4931799325220589, 0.4820954151566727, 0.4765203533714568, 0.48751535794407763, 0.46871712783765107], "accuracy": [0.31145158410072327, 0.5445780158042908, 0.637828528881073, 0.6564522385597229, 0.6972658634185791, 0.7217012047767639, 0.7190595865249634, 0.7314753532409668, 0.743891179561615, 0.7493065595626831, 0.755118191242218, 0.7611940503120422, 0.7652885913848877, 0.7695152759552002, 0.7804781198501587, 0.7865539789199829, 0.8001585006713867, 0.7862898111343384, 0.7954035401344299, 0.8037247657775879, 0.802800178527832, 0.813498854637146, 0.8123101592063904, 0.822348415851593, 0.8228767514228821, 0.8138951063156128, 0.8208954930305481], "val_loss": [1.335785150527954, 0.8782149042401995, 0.700028487614223, 0.6102511542184013, 0.6005457128797259, 0.6604162114007133, 0.5490444047110421, 0.6070394515991211, 0.5969306911740985, 0.5072418962206159, 0.5081804479871478, 0.5864709615707397, 0.4734996386936733, 0.49892481735774447, 0.4716899905885969, 0.4601578882762364, 0.47834277153015137, 0.44991334847041536, 0.46144875458308626, 0.45104001249585834, 0.42479983397892546, 0.41601372616631643, 0.43303386654172626, 0.41292024510247366, 0.4153663771493094, 0.4153991256441389, 0.44952971594674246], "val_accuracy": [0.5406666398048401, 0.5839999914169312, 0.7059999704360962, 0.7300000190734863, 0.7353333234786987, 0.687666654586792, 0.737666666507721, 0.7266666889190674, 0.722000002861023, 0.7680000066757202, 0.7733333110809326, 0.7296666502952576, 0.7900000214576721, 0.7583333253860474, 0.79666668176651, 0.7973333597183228, 0.7836666703224182, 0.7986666560173035, 0.793666660785675, 0.7963333129882812, 0.8236666917800903, 0.8276666402816772, 0.8103333115577698, 0.8243333101272583, 0.8263333439826965, 0.8216666579246521, 0.7863333225250244]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 8, 7, 3, 0, 2, 4, 3, 0, 4, 5, 6, 1, 6, 8, 6, 4, 0, 5, 0, 6, 2, 5, 0, 1, 9, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 3, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8100000023841858, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0004203804511405, 1.2789065808101086, 1.0051166668796048, 0.8850186930561205, 0.7733868275808542, 0.7963593420949611, 0.7201852944973925, 0.6937371102605655, 0.6819855723524642, 0.6576403134361376, 0.6389311008276389, 0.6135091028350802, 0.6059184837901849, 0.6027563095344701, 0.5648067220642016, 0.5491279976290168, 0.5417649621394143, 0.5370420590918912, 0.5259734404762549, 0.5281054081500812, 0.5205753758803586, 0.4969302649353757, 0.48804088852676686, 0.48664921142279965, 0.49441449034561996, 0.48409737841233663, 0.4819786860375687], "accuracy": [0.31184783577919006, 0.5453705191612244, 0.6263373494148254, 0.6626601219177246, 0.7054550051689148, 0.7009642124176025, 0.7312111854553223, 0.7403249144554138, 0.7425703406333923, 0.7532690763473511, 0.7534011602401733, 0.7609298825263977, 0.7681944370269775, 0.7658169269561768, 0.7836481332778931, 0.7961959838867188, 0.7897239327430725, 0.7943468689918518, 0.7997622489929199, 0.796328067779541, 0.8031964302062988, 0.8103289008140564, 0.8164047002792358, 0.8201030492782593, 0.8104609847068787, 0.8161405324935913, 0.8171972036361694], "val_loss": [1.3334602628435408, 0.8763764245169503, 0.8184012685503278, 0.6205792427062988, 0.5706013781683785, 0.5779754093715123, 0.5517981052398682, 0.5764427695955548, 0.5904079335076469, 0.5167561258588519, 0.5117651905332293, 0.589280537196568, 0.4966957228524344, 0.49571142877851215, 0.4748903683253697, 0.5011416843959263, 0.44529761586870464, 0.4444830077035086, 0.5008057866777692, 0.43196708815438406, 0.4248556579862322, 0.4141355071749006, 0.43691543170384, 0.4152789797101702, 0.42389994859695435, 0.4158519080707005, 0.4137496181896755], "val_accuracy": [0.5423333048820496, 0.596666693687439, 0.6536666750907898, 0.7236666679382324, 0.7433333396911621, 0.7423333525657654, 0.7576666474342346, 0.7386666536331177, 0.7319999933242798, 0.7606666684150696, 0.7703333497047424, 0.7303333282470703, 0.7756666541099548, 0.7749999761581421, 0.7870000004768372, 0.7726666927337646, 0.8066666722297668, 0.8116666674613953, 0.7666666507720947, 0.8133333325386047, 0.8180000185966492, 0.82833331823349, 0.8036666512489319, 0.8276666402816772, 0.8206666707992554, 0.8173333406448364, 0.8140000104904175]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 5, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8091428279876709, "mapping_values": [1, 2, 2, 1, 1, 1, 21, 21, 12, 9, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.square(tf.math.square(tf.math.add(beta, alpha))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0006493500840663, 1.2800186437906103, 1.0135370774779888, 0.8662544432301736, 0.7815949173887502, 0.7462596278369482, 0.735199177332873, 0.6923069771113035, 0.6849229522369258, 0.6685369805164814, 0.6378113236787565, 0.617455897109541, 0.617546652152538, 0.5854361826922239, 0.5785442669834711, 0.5597077012376983, 0.5301505867059693, 0.5455176430670593, 0.53533356603205, 0.5145563624593575, 0.5274318825724638, 0.49086515624147475, 0.49230691352461814, 0.48324998112213596, 0.5025791842955419, 0.4840386913885861, 0.4787895970136073, 0.46560058744434574, 0.46191743037105787], "accuracy": [0.31184783577919006, 0.5462950468063354, 0.6244881749153137, 0.669792652130127, 0.7021529674530029, 0.7187954187393188, 0.717870831489563, 0.7386078238487244, 0.7417778372764587, 0.752740740776062, 0.7541936039924622, 0.7630431652069092, 0.7618544697761536, 0.7726852297782898, 0.7761194109916687, 0.7891955971717834, 0.8004226684570312, 0.7902522683143616, 0.7911768555641174, 0.8029322624206543, 0.7994980812072754, 0.8148196935653687, 0.816008448600769, 0.8203672170639038, 0.8099326491355896, 0.8137630224227905, 0.8185180425643921, 0.8249900937080383, 0.8211596608161926], "val_loss": [1.3341796057564872, 0.8753232274736676, 0.7964318990707397, 0.6466101067406791, 0.5843577214649746, 0.6231974363327026, 0.5485048123768398, 0.5957908289773124, 0.5932277951921735, 0.5248678071158273, 0.5189267907823835, 0.5889701332364764, 0.4741431304386684, 0.5078018222536359, 0.46757398332868305, 0.4649398497172764, 0.45227127415793283, 0.44681438377925325, 0.46547089304242817, 0.4612310954502651, 0.43342537539345877, 0.41484789337430683, 0.4394486631665911, 0.4102188263620649, 0.427212655544281, 0.4333770530564444, 0.42301670142582487, 0.42488556248801096, 0.48051864760262625], "val_accuracy": [0.5443333387374878, 0.606333315372467, 0.656000018119812, 0.7136666774749756, 0.734666645526886, 0.7039999961853027, 0.7590000033378601, 0.7250000238418579, 0.7403333187103271, 0.7536666393280029, 0.768666684627533, 0.7263333201408386, 0.7860000133514404, 0.7456666827201843, 0.800000011920929, 0.7943333387374878, 0.8053333163261414, 0.7986666560173035, 0.7896666526794434, 0.7919999957084656, 0.8149999976158142, 0.8289999961853027, 0.8066666722297668, 0.8323333263397217, 0.8186666369438171, 0.8106666803359985, 0.8086666464805603, 0.8076666593551636, 0.7749999761581421]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 8, 1, 4, 4, 0, 2, 5, 1, 3, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7931428551673889, "mapping_values": [1, 2, 2, 1, 1, 1, 18, 18, 10, 8, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, grad)))), grad))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9905800303888832, 1.3889465570418338, 1.0424957874664904, 0.8731434662911114, 0.8186700860617293, 0.7967044866521203, 0.7357705308855359, 0.7004242890452066, 0.6416834280664391, 0.7086423796323218, 0.6511052337856089, 0.639795618467579, 0.6271647639467323, 0.5928608271361122, 0.56002167684842, 0.5743293661986832, 0.5804888685743775, 0.5366614783177082, 0.5448118472505539], "accuracy": [0.33166027069091797, 0.5138026475906372, 0.6073173880577087, 0.6789063811302185, 0.6922467350959778, 0.7058512568473816, 0.7223616242408752, 0.7283053994178772, 0.7553823590278625, 0.7334566116333008, 0.7528728246688843, 0.7466648817062378, 0.7611940503120422, 0.7779685854911804, 0.789988100528717, 0.7844406366348267, 0.7740060687065125, 0.7959318161010742, 0.7952714562416077], "val_loss": [1.1492109298706055, 0.8676583937236241, 0.754727670124599, 0.6539270026343209, 0.620037146977016, 0.5927517414093018, 0.5938862902777535, 0.5347248826708112, 0.5056334393365043, 0.5461993387767247, 0.5345522846494403, 0.4936085598809378, 0.49764163153512136, 0.45481606892177034, 0.47856926918029785, 0.46415594645908903, 0.4438743591308594, 0.45775697912488666, 0.4766192776816232], "val_accuracy": [0.5709999799728394, 0.5853333473205566, 0.6693333387374878, 0.7026666402816772, 0.7193333506584167, 0.7210000157356262, 0.7153333425521851, 0.749666690826416, 0.7670000195503235, 0.7406666874885559, 0.7433333396911621, 0.7776666879653931, 0.7666666507720947, 0.8063333630561829, 0.7853333353996277, 0.7933333516120911, 0.8050000071525574, 0.7950000166893005, 0.7839999794960022]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 8, 2, 6, 4, 4, 2, 5, 0, 2, 5, 1, 8, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [26, 9, 76, 58]], "fitness": -0.7668571472167969, "mapping_values": [1, 2, 2, 1, 1, 1, 17, 17, 10, 7, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.2951012752343005, 2.2783925936379847, 2.2614044740357184, 2.238953146558506, 2.2173022558786424, 2.1867366816783074, 2.151501296927286, 2.1099697188489612, 2.0545030905192383, 1.9874743505822292, 1.9208894514404566, 1.8323801203867416, 1.7492373087276731, 1.661487730644351, 1.5764228870147223, 1.4969611345359661, 1.4376201471081342, 1.3614208785817765, 1.3263866883920183, 1.2739229709276072, 1.2343879105502809, 1.1917341892446243, 1.1701175958378724, 1.1359786714749833, 1.1158103770930077, 1.1016855081153378, 1.0739546469126742, 1.0447143293516652, 1.0284419407256922, 1.0195396299202208, 1.0066660500441906, 0.9850131225718199, 0.9652158594748694, 0.9542581181185451, 0.9499992689263189, 0.9426842493199087, 0.9229730892458518, 0.9229837426215336, 0.9094625820951092, 0.9053696218797828, 0.8919313977564866, 0.8854098620510467, 0.8786301578450055, 0.87010159889752, 0.8659840200193302, 0.8542270637333212, 0.8517775776962232, 0.857516099141967, 0.8363525685916378, 0.8383188837979999, 0.8175196354856202, 0.823791430335334, 0.8310942466406066, 0.8165117297127199, 0.81291569286192, 0.8054179431834414, 0.8077275718459836, 0.8024623995176191, 0.7927987576948102, 0.8015373217557258, 0.7893429927507238, 0.7756582390063821, 0.7829800743972306, 0.7805906059625142, 0.7812528990404938, 0.7628069807352281, 0.7708331817932542, 0.7636593555210603, 0.7542212891257466, 0.7509049418154897, 0.7641487114968916, 0.7560421658497539, 0.7449192911595118, 0.7390281264146777, 0.7508337226730879, 0.7442358787490266, 0.7412318793490673, 0.7412663039010451, 0.7280398230385141, 0.7337992681000195, 0.7273543428719681, 0.7303222000732744, 0.7309339854931709, 0.7212664838070882, 0.7146890783401261, 0.7164791897933214, 0.7139895563631986, 0.7127539362685082, 0.7064303246943895, 0.7072526871520357, 0.713020831067029, 0.707825718467986, 0.7067307024080173, 0.709632724062988, 0.7030045916659091, 0.7034812774309912, 0.7002974229324385, 0.6894205475149531, 0.6959859937126327], "accuracy": [0.10685510188341141, 0.15691454708576202, 0.19772817194461823, 0.24765552580356598, 0.2793554365634918, 0.3171311616897583, 0.3475102484226227, 0.3763043284416199, 0.39889049530029297, 0.4177783727645874, 0.4360058009624481, 0.44644036889076233, 0.4694227874279022, 0.48910316824913025, 0.4963677227497101, 0.5200105905532837, 0.5334830284118652, 0.5527671575546265, 0.5612204670906067, 0.5696737766265869, 0.5709945559501648, 0.5863162279129028, 0.5954299569129944, 0.6091665625572205, 0.604939877986908, 0.6148461103439331, 0.6239598393440247, 0.635451078414917, 0.6411306262016296, 0.6370360851287842, 0.6490556001663208, 0.6546030640602112, 0.6622639298439026, 0.6671509742736816, 0.6654338836669922, 0.665830135345459, 0.6765288710594177, 0.6708492636680603, 0.6777176260948181, 0.683000922203064, 0.6869634389877319, 0.683529257774353, 0.6845859289169312, 0.6930392384529114, 0.684982180595398, 0.6927750706672668, 0.6948884129524231, 0.6947563290596008, 0.7017567157745361, 0.69673752784729, 0.7040021419525146, 0.7029454708099365, 0.7033417224884033, 0.7041342258453369, 0.7042662501335144, 0.7120591998100281, 0.7128516435623169, 0.7080966830253601, 0.7166820764541626, 0.7102100253105164, 0.7143045663833618, 0.722757875919342, 0.7156254053115845, 0.7161537408828735, 0.7124554514884949, 0.7190595865249634, 0.717870831489563, 0.7253995537757874, 0.720380425453186, 0.724739134311676, 0.7255316376686096, 0.7297582626342773, 0.722229540348053, 0.7309470176696777, 0.7243428826332092, 0.7300224304199219, 0.7306828498840332, 0.72672039270401, 0.7412495017051697, 0.7275128960609436, 0.7390040755271912, 0.7276449799537659, 0.7372870445251465, 0.7354378700256348, 0.739400327205658, 0.7397965788841248, 0.739400327205658, 0.7383436560630798, 0.7421740889549255, 0.7392682433128357, 0.7367587089538574, 0.7395324110984802, 0.7404569983482361, 0.7372870445251465, 0.7440232634544373, 0.735041618347168, 0.7421740889549255, 0.7434949278831482, 0.7461365461349487], "val_loss": [1.9549179077148438, 1.9385598046439034, 1.9207171031406947, 1.8998705318995885, 1.875009264264788, 1.8440963881356376, 1.8060105187552316, 1.7592823164803642, 1.7024459838867188, 1.634604045322963, 1.5575917107718331, 1.4717919485909599, 1.3832432542528426, 1.2954192502158028, 1.2124989032745361, 1.137380736214774, 1.073221138545445, 1.0162482602255685, 0.9689316749572754, 0.9286485740116665, 0.8933235236576625, 0.8622309480394635, 0.836227297782898, 0.8140797104154315, 0.7940291336604527, 0.776938796043396, 0.761475682258606, 0.7453667776925224, 0.7329696416854858, 0.7221501043864659, 0.7119883298873901, 0.7019631522042411, 0.692556551524571, 0.6844614403588432, 0.6778408118656704, 0.670106325830732, 0.6625289406095233, 0.6571884325572422, 0.6512450490679059, 0.6458492449351719, 0.6397668634142194, 0.6349179744720459, 0.6322657551084246, 0.6277450834001813, 0.6232523577553886, 0.618375403540475, 0.6147616250174386, 0.6113770178386143, 0.6064420597893851, 0.6040092366082328, 0.6006177493504116, 0.5975244045257568, 0.5946871382849557, 0.5913490738187518, 0.5886456114905221, 0.5863819122314453, 0.5835932663508824, 0.5815689223153251, 0.5790452786854335, 0.5771239995956421, 0.5741814034325736, 0.5715266806738717, 0.5697810138974871, 0.5684570244380406, 0.5668046133858817, 0.5643022060394287, 0.5625449759619576, 0.5606374910899571, 0.5581242527280535, 0.5569330964769635, 0.5543809447969709, 0.553240316254752, 0.5507705381938389, 0.5475894553320748, 0.5472995723996844, 0.546370370047433, 0.54551248891013, 0.5446584565298898, 0.5416355814252581, 0.5406970637185233, 0.5393993003027779, 0.5380890539714268, 0.535543407712664, 0.5338786329541888, 0.5328704459326608, 0.5321751322065081, 0.5295535836900983, 0.5285211971827916, 0.5267130306788853, 0.5256817511149815, 0.5249379192079816, 0.5233562844140189, 0.5235986539295742, 0.5212096146174839, 0.521723815373012, 0.5197561808994838, 0.5194956404822213, 0.5173078775405884, 0.5168309892926898], "val_accuracy": [0.17366667091846466, 0.2926666736602783, 0.35233333706855774, 0.38999998569488525, 0.42899999022483826, 0.4533333480358124, 0.47833332419395447, 0.5013333559036255, 0.5239999890327454, 0.5386666655540466, 0.5519999861717224, 0.5573333501815796, 0.5646666884422302, 0.578000009059906, 0.596666693687439, 0.6136666536331177, 0.6236666440963745, 0.6470000147819519, 0.6589999794960022, 0.67166668176651, 0.6790000200271606, 0.6806666851043701, 0.6903333067893982, 0.6933333277702332, 0.6963333487510681, 0.6986666917800903, 0.7006666660308838, 0.7036666870117188, 0.706333339214325, 0.7093333601951599, 0.7126666903495789, 0.7179999947547913, 0.7176666855812073, 0.7176666855812073, 0.7206666469573975, 0.7236666679382324, 0.7273333072662354, 0.7260000109672546, 0.7286666631698608, 0.7310000061988831, 0.731333315372467, 0.734000027179718, 0.7356666922569275, 0.7363333106040955, 0.7383333444595337, 0.7400000095367432, 0.7409999966621399, 0.7403333187103271, 0.7419999837875366, 0.7423333525657654, 0.7440000176429749, 0.7429999709129333, 0.7443333268165588, 0.7446666955947876, 0.746666669845581, 0.7456666827201843, 0.7459999918937683, 0.7509999871253967, 0.7463333606719971, 0.75, 0.7526666522026062, 0.7526666522026062, 0.7519999742507935, 0.7513333559036255, 0.7540000081062317, 0.7536666393280029, 0.7556666731834412, 0.7563333511352539, 0.7553333044052124, 0.7540000081062317, 0.7590000033378601, 0.7580000162124634, 0.7559999823570251, 0.7593333125114441, 0.7586666941642761, 0.7586666941642761, 0.7593333125114441, 0.7606666684150696, 0.7580000162124634, 0.7573333382606506, 0.7613333463668823, 0.7630000114440918, 0.7596666812896729, 0.7616666555404663, 0.7649999856948853, 0.7620000243186951, 0.7643333077430725, 0.765333354473114, 0.7663333415985107, 0.7666666507720947, 0.7663333415985107, 0.7676666378974915, 0.7683333158493042, 0.7703333497047424, 0.7666666507720947, 0.7666666507720947, 0.7699999809265137, 0.765999972820282, 0.7676666378974915]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 8, 8, 8, 8, 8, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 3, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 3, 3, 0, 1, 0, 5, 1, 2, 3, 1, 3, 1, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [60, 9, 76, 58]], "fitness": -0.2102857083082199, "mapping_values": [1, 2, 2, 1, 1, 1, 26, 26, 15, 11, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), beta)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.sqrt(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.397196982436255, 2.607498845844977, 2.295606269308636, 2.626150728956804, 2.2584779993764412, 2.4394864653079833, 2.3017873599969825, 2.206061383091054, 2.315669137725205, 2.303797284798804], "accuracy": [0.18570862710475922, 0.19244486093521118, 0.1294412910938263, 0.16933034360408783, 0.19191652536392212, 0.11887465417385101, 0.1080438494682312, 0.2180689424276352, 0.11900673806667328, 0.09760929644107819], "val_loss": [1.7069779804774694, 1.9742178916931152, 1.8557913643973214, 1.9739769526890345, 2.141972746167864, 1.9746365547180176, 1.9637909616742815, 1.9589883259364538, 1.9747767448425293, 1.9738074711390905], "val_accuracy": [0.2566666603088379, 0.10133333504199982, 0.24899999797344208, 0.10566666722297668, 0.28466665744781494, 0.09799999743700027, 0.11566666513681412, 0.24400000274181366, 0.09666666388511658, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.3026213466121286, 2.304593036140449, 2.3076280791446786, 2.3079263650352266, 2.3130391276413347, 2.3154984932565545, 2.3205511242470105, 2.3272279144010493, 2.3337512954414135, 2.3459571766390415, 2.386883369227127, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08809932321310043, 0.08558975160121918, 0.07885351777076721, 0.08347642421722412, 0.08109892904758453, 0.07277770340442657, 0.0738343670964241, 0.0758156105875969, 0.07290978729724884, 0.07700435817241669, 0.0812310129404068, 0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9720711708068848, 1.973503589630127, 1.975255080631801, 1.9771363394601005, 1.9795731816973006, 1.9821397917611259, 1.9854109627859933, 1.9897963660103934, 1.9964287621634347, 2.011112485613142, 2.088354996272496, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.028999999165534973, 0.023333333432674408, 0.021666666492819786, 0.019999999552965164, 0.023000000044703484, 0.03233333304524422, 0.047333333641290665, 0.07066666334867477, 0.08833333104848862, 0.09799999743700027, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [62, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 1, 6, 4, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 1, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 4, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 31, 31, 18, 13, 1, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.sqrt(alpha))))))))))), beta)))), tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.pow(sigma, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [2, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0750231146812439, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 1, 4, 0, 2, 4, 3, 6, 2, 4, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 4, 0, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [70, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 35, 35, 19, 16, 1, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), tf.math.add(beta, alpha)), tf.math.sqrt(grad))), tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), alpha), tf.math.add(beta, tf.math.square(beta))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.math.negative(sigma), sigma), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 8, 4, 6, 4, 2, 2, 5, 0, 2, 5, 1, 8, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 5, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [70, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 16, 16, 9, 7, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.add(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12759213149547577, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [8, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 22, 22, 12, 10, 0, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(beta))), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)))))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302094618594878, 2.3025850169867446, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 3, 4, 4, 4, 9, 2, 2, 8, 6, 2, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 0, 3, 2, 1, 0, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [11, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 18, 18, 10, 8, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.30256401247053, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [4, 1, 5, 3, 2, 9, 4, 0, 0, 3, 5, 6, 5, 6, 4, 8, 4, 0, 5, 5, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 5, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 3, 3, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 3, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 9, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 16, 16, 10, 6, 1, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad)))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [19071630.632679686, 366984376.7808744, 1666519782.5724475, 4580615575.855237, 10091204945.32083, 18434338090.503235], "accuracy": [0.09417514503002167, 0.09985470771789551, 0.10130762308835983, 0.09800554811954498, 0.09985470771789551, 0.10474177449941635], "val_loss": [71342772.57142857, 570048201.1428572, 1923136950.857143, 4557630610.285714, 8900519643.428572, 15378836918.857143], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 8, 1, 3, 4, 2, 2, 5, 0, 0, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 0, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 6, 2, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.06057142838835716, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(sigma, sigma), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha))))", "other_info": {"loss": [2693540639747559.0, 18.446401775442236, 32.71712731515191, 35.162106684910356, 46.653900714834464, 53.415825957304705, 61.6299426817324, 70.93012561830847, 73.70160077273523], "accuracy": [0.10355303436517715, 0.09919429570436478, 0.09721305221319199, 0.09536388516426086, 0.1014397069811821, 0.09642054885625839, 0.10632677376270294, 0.09589222073554993, 0.10210011899471283], "val_loss": [11.214206150599889, 21.646786825997488, 27.48486328125, 27.178341456821986, 54.07777404785156, 50.21185956682478, 58.64644731794085, 53.11227308000837, 71.73578316824776], "val_accuracy": [0.09833333641290665, 0.10000000149011612, 0.09833333641290665, 0.10233332961797714, 0.10066666454076767, 0.10133333504199982, 0.09799999743700027, 0.09833333641290665, 0.09666666388511658]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 8, 1, 6, 4, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 0, 0, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 1, 10, 10, 5, 5, 2, 1, 0, 0, 0, 0, 5, 4, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma))", "other_info": {"loss": [2.3022309725767336, 2.3027459731774007, 2.303546510809023, 2.301991069762462, 2.303458457137332, 2.30266458895921], "accuracy": [0.0886276587843895, 0.0886276587843895, 0.08572183549404144, 0.0936468094587326, 0.08849557489156723, 0.0882314071059227], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), sigma)", "other_info": {"loss": [2.3022309725767336, 2.3027459731774007, 2.303546510809023, 2.301991069762462, 2.303458457137332, 2.30266458895921], "accuracy": [0.0886276587843895, 0.0886276587843895, 0.08572183549404144, 0.0936468094587326, 0.08849557489156723, 0.0882314071059227], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [9, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 3, 6, 1, 1, 8, 6, 8, 8, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 3, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 0, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 1, 0, 1, 28, 28, 15, 13, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), tf.math.add(beta, beta))))), tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3022309725767336, 2.3027459731774007, 2.303546510809023, 2.301991069762462, 2.303458457137332, 2.30266458895921], "accuracy": [0.0886276587843895, 0.0886276587843895, 0.08572183549404144, 0.0936468094587326, 0.08849557489156723, 0.0882314071059227], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]