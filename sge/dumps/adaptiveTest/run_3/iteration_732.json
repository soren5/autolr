[{"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 2, 1, 6, 1, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 3, 1, 1, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.8222857117652893, "mapping_values": [1, 11, 11, 6, 5, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(grad, alpha))))))), tf.math.square(alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2197189745161716, 2.2572677776309966, 2.0297667120489007, 1.8189444278981062, 1.1977407400555473, 0.954043779193985, 0.7922449518960024, 0.7325545033254738, 0.6897424029447399, 0.6573887794576128, 0.6215219234100753, 0.5969708658810919, 0.5727035090309549, 0.5626237285434766, 0.5696599547338052, 0.5446101179322578, 0.5153817124197339, 0.4883923500347226, 0.5152848539429885, 0.5153474620997457, 0.47485385422835086, 0.4867403307185906, 0.47416925777486446, 0.45850332701887986, 0.4477201346723773, 0.4570004046356925, 0.4452020436537154, 0.4204331402962218, 0.4186231310593375, 0.41748499577433723, 0.4059728052771685, 0.41644693029129964, 0.4097489372236287], "accuracy": [0.24712719023227692, 0.2550521790981293, 0.28305375576019287, 0.37643641233444214, 0.572579562664032, 0.6427156329154968, 0.705058753490448, 0.7207766771316528, 0.735041618347168, 0.7467969655990601, 0.7611940503120422, 0.7750627398490906, 0.780610203742981, 0.7873464822769165, 0.7816668748855591, 0.8001585006713867, 0.8013472557067871, 0.8187822103500366, 0.8053097128868103, 0.8031964302062988, 0.8226125836372375, 0.8112534880638123, 0.8204993009567261, 0.8248580098152161, 0.8317263126373291, 0.8260467648506165, 0.8337075710296631, 0.8418967127799988, 0.8413683772087097, 0.8453308939933777, 0.8455950617790222, 0.8417646288871765, 0.8396512866020203], "val_loss": [1.9467178072248186, 1.9292778968811035, 1.8372389929635184, 0.9258177621023995, 0.8206597396305629, 0.6505319901875087, 0.5614888157163348, 0.549148712839399, 0.5168049335479736, 0.505905134337289, 0.5037043946129935, 0.45758668013981413, 0.4688073396682739, 0.5021275111607143, 0.44529656001499723, 0.43997213670185636, 0.44586537565503803, 0.4347999266215733, 0.42197961466653006, 0.41885859625680105, 0.4265380246298654, 0.42701525347573416, 0.41353441987718853, 0.41711902618408203, 0.43575277498790194, 0.38897889852523804, 0.40834145886557444, 0.37816757815224783, 0.450854880469186, 0.3776681252888271, 0.418741626398904, 0.41956844500132967, 0.38588652440479826], "val_accuracy": [0.23366667330265045, 0.10000000149011612, 0.19733333587646484, 0.6143333315849304, 0.6083333492279053, 0.7013333439826965, 0.7393333315849304, 0.734000027179718, 0.7609999775886536, 0.7609999775886536, 0.7756666541099548, 0.7943333387374878, 0.796999990940094, 0.7723333239555359, 0.7979999780654907, 0.8073333501815796, 0.7879999876022339, 0.8023333549499512, 0.8196666836738586, 0.8206666707992554, 0.8130000233650208, 0.8130000233650208, 0.8323333263397217, 0.8206666707992554, 0.815666675567627, 0.8326666951179504, 0.8240000009536743, 0.8446666598320007, 0.8133333325386047, 0.8420000076293945, 0.8226666450500488, 0.8056666851043701, 0.8443333506584167]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 3, 1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.8214285969734192, "mapping_values": [1, 32, 32, 19, 13, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), grad)), tf.math.divide_no_nan(alpha, alpha))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2196370428264447, 2.2644877858590835, 1.9687712035080256, 2.0265055671422836, 1.7814019736738536, 1.2070985970763546, 0.9819029054038986, 0.8829663634347469, 0.7674488457848037, 0.7218409406353123, 0.6716364773824121, 0.6565378135646638, 0.6435980366803966, 0.5973044001525498, 0.6049719934670712, 0.5680061456329236, 0.5496007580294853, 0.5263999980580238, 0.531294056846796, 0.5305808396851776, 0.48846064049569987, 0.48966373184558315, 0.5113446999770807, 0.48089056746551245, 0.47126270911130197, 0.46226038490430066, 0.4494616346997891, 0.4326128131638523], "accuracy": [0.24699510633945465, 0.25518426299095154, 0.3089420199394226, 0.3273015320301056, 0.37722888588905334, 0.5488046407699585, 0.6243560910224915, 0.6667547225952148, 0.7080966830253601, 0.722757875919342, 0.746268630027771, 0.752212405204773, 0.7576277852058411, 0.776251494884491, 0.7712323069572449, 0.7796856164932251, 0.7910447716712952, 0.8030643463134766, 0.7973847389221191, 0.8017435073852539, 0.8212917447090149, 0.8131026029586792, 0.8017435073852539, 0.8173292875289917, 0.81548011302948, 0.8317263126373291, 0.828820526599884, 0.8393871188163757], "val_loss": [1.946333748953683, 1.9283550807407923, 2.2636093412126814, 1.9198908805847168, 0.8478260721479144, 0.8734286512647357, 0.728550638471331, 0.6253746237073626, 0.5572112968989781, 0.5414141757147652, 0.5878790957587106, 0.49924215248652865, 0.47657389300210135, 0.5268449102129255, 0.454058153288705, 0.44734249796186176, 0.43984012944357737, 0.4612845352717808, 0.424338025706155, 0.4171333227838789, 0.4542799506868635, 0.43794366291591097, 0.41565966606140137, 0.4200922165598188, 0.43403964383261545, 0.40315662963049753, 0.41125272853033884, 0.44132018089294434], "val_accuracy": [0.2329999953508377, 0.09866666793823242, 0.10366666316986084, 0.20366667211055756, 0.6223333477973938, 0.6320000290870667, 0.6840000152587891, 0.7023333311080933, 0.7453333139419556, 0.746999979019165, 0.7139999866485596, 0.7723333239555359, 0.7923333048820496, 0.7616666555404663, 0.7910000085830688, 0.8069999814033508, 0.812666654586792, 0.7986666560173035, 0.8213333487510681, 0.8193333148956299, 0.7893333435058594, 0.8109999895095825, 0.831333339214325, 0.8190000057220459, 0.8130000233650208, 0.8176666498184204, 0.82833331823349, 0.8146666884422302]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.817714273929596, "mapping_values": [1, 32, 32, 20, 12, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(grad, grad))))), alpha)))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.21979319364356, 2.2518196625559006, 1.9602972754177526, 2.0122441653137146, 1.5359113263164323, 1.0022945376419357, 0.8133392374450347, 0.7686081571806345, 0.7219884763178399, 0.6605878805188361, 0.6466548867182189, 0.6293578595139521, 0.5856372498329117, 0.5838488537511648, 0.5605678450650291, 0.5511479887035245, 0.551621395953343, 0.5737146265738833, 0.5288661670423439, 0.5327219420325849, 0.49253924014845135, 0.5139238177399515, 0.48454454775420885, 0.48342881692304523, 0.4824464700052279, 0.47147081851597084, 0.45673967579242153, 0.44082916425739094, 0.47915424054813044, 0.43543393497989163, 0.4317636793048044, 0.4319512281655919, 0.4412537532680306, 0.416537169294744, 0.42797471408311166, 0.4135892166634435], "accuracy": [0.24699510633945465, 0.2537313401699066, 0.31158366799354553, 0.32862237095832825, 0.4785365164279938, 0.6402060389518738, 0.7018887996673584, 0.7147008180618286, 0.7300224304199219, 0.7495707273483276, 0.7549861073493958, 0.7618544697761536, 0.7766477465629578, 0.7828556299209595, 0.7857614755630493, 0.7901201844215393, 0.7849689722061157, 0.7861577272415161, 0.7984414100646973, 0.8054417967796326, 0.8170651197433472, 0.7977809906005859, 0.8150838613510132, 0.8178576231002808, 0.8104609847068787, 0.8232730031013489, 0.8274996876716614, 0.8354246616363525, 0.8185180425643921, 0.835160493850708, 0.8380662798881531, 0.8334434032440186, 0.8321225643157959, 0.8433496356010437, 0.8381983637809753, 0.8438779711723328], "val_loss": [1.9470482553754533, 1.9281210218157088, 2.3902782031467984, 1.7222366333007812, 0.9608573913574219, 0.641711780003139, 0.5900150537490845, 0.5629386901855469, 0.5067615849631173, 0.5138973849160331, 0.5522902352469308, 0.48532932145254953, 0.4623220307486398, 0.5021401303155082, 0.5096855333873204, 0.4830244098390852, 0.4453752040863037, 0.44622188806533813, 0.4393531594957624, 0.4275320938655308, 0.48403702463422504, 0.43063136509486605, 0.4431722249303545, 0.42850462027958464, 0.45758613518306185, 0.4022586686270578, 0.43434013639177593, 0.43403321504592896, 0.440116822719574, 0.38911785398210796, 0.37964424916676115, 0.4353847418512617, 0.4055223550115313, 0.3872957229614258, 0.3961527943611145, 0.36958058391298565], "val_accuracy": [0.22633333504199982, 0.10133333504199982, 0.10133333504199982, 0.4339999854564667, 0.6129999756813049, 0.7096666693687439, 0.7453333139419556, 0.7513333559036255, 0.7763333320617676, 0.7710000276565552, 0.7386666536331177, 0.7803333401679993, 0.7990000247955322, 0.7789999842643738, 0.7506666779518127, 0.7916666865348816, 0.8116666674613953, 0.8029999732971191, 0.8056666851043701, 0.812333345413208, 0.7820000052452087, 0.8113333582878113, 0.8190000057220459, 0.8109999895095825, 0.8076666593551636, 0.82833331823349, 0.8053333163261414, 0.8246666789054871, 0.8146666884422302, 0.8299999833106995, 0.840666651725769, 0.8006666898727417, 0.8323333263397217, 0.8389999866485596, 0.831333339214325, 0.8376666903495789]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 5, 1, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.8011428713798523, "mapping_values": [1, 33, 33, 21, 12, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(grad, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(grad)))))))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2196425739737267, 2.260642459222181, 2.0402136936069337, 1.961994391343597, 1.6977822793205541, 1.0595963825922539, 0.8219888691873188, 0.7295391165096967, 0.6856281351120465, 0.660350855165831, 0.6318651366274765, 0.5834609335242891, 0.5565814863437234, 0.5890244245607902, 0.5548811347540328, 0.5511282954816222, 0.50745134961572, 0.5154693553696817], "accuracy": [0.24712719023227692, 0.25676923990249634, 0.26918503642082214, 0.3245278000831604, 0.4419495463371277, 0.6342623233795166, 0.7005679607391357, 0.7326641082763672, 0.744419515132904, 0.7467969655990601, 0.7588165402412415, 0.7775723338127136, 0.7887993454933167, 0.7754589915275574, 0.789459764957428, 0.7972526550292969, 0.8080834746360779, 0.8068947196006775], "val_loss": [1.9465653555733817, 1.9274346487862724, 1.8384861264910017, 1.868429524557931, 0.8901573249271938, 0.6427702052252633, 0.5858646971838815, 0.5725588628223964, 0.5196808406284877, 0.5194551774433681, 0.5304942641939435, 0.456515942301069, 0.45028202874319895, 0.5284601960863385, 0.46611394201006207, 0.44913784095219206, 0.4525052990232195, 0.5029076167515346], "val_accuracy": [0.23266667127609253, 0.10066666454076767, 0.2016666680574417, 0.29600000381469727, 0.6416666507720947, 0.7093333601951599, 0.7390000224113464, 0.7099999785423279, 0.7556666731834412, 0.7670000195503235, 0.7706666588783264, 0.8050000071525574, 0.812666654586792, 0.7636666893959045, 0.7803333401679993, 0.8029999732971191, 0.7889999747276306, 0.7730000019073486]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 6, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [36, 68, 85, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.704285740852356, "mapping_values": [1, 12, 12, 7, 5, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), grad))), tf.math.divide_no_nan(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.299508807933436, 2.2823828916823024, 2.2453561358841703, 2.1902130974943548, 2.1011062959843088, 1.9494288554674661, 1.723600188423976, 1.5184735086190624, 1.4077376647002473, 1.384084048398403, 1.30910435717702, 1.1865877474870632, 1.0226342490226081, 0.9432260374650664, 0.9241746705851582, 0.9403090977460922, 0.9074700090548523, 0.8570086314709369, 0.8176345328424333, 0.8275072312925029, 0.8156343021444468, 0.827141055758792, 0.8202136868121145, 0.7829842653414356, 0.7643793665769156, 0.7366360222753233, 0.7343656048641197, 0.7449304424162317, 0.7439688796679641, 0.72365487801983, 0.7092469212023527, 0.70163574483747, 0.694823730717781, 0.6827429755173969, 0.6888516175512309, 0.6848722831637017, 0.6790651788076689, 0.665318656551871, 0.6551222495273151, 0.6378217461149784, 0.6191623817817835, 0.6188599347769073, 0.6175108481281705, 0.6155085013511394, 0.6114697293393789, 0.606233311453673, 0.5907056995150498, 0.5843449493267627, 0.590440180000612, 0.5792910423828013, 0.5984018553580276, 0.5676055146545357, 0.5673134354174555, 0.5636842940477506, 0.5565897798761794, 0.5543683171744643, 0.5537301235273924, 0.5488631096947163, 0.5482023779694997, 0.54701628083204], "accuracy": [0.10236428678035736, 0.14634791016578674, 0.24276845157146454, 0.32518821954727173, 0.3755118250846863, 0.41447630524635315, 0.44908201694488525, 0.47747984528541565, 0.5112931132316589, 0.5390304923057556, 0.5717870593070984, 0.6037511825561523, 0.6453573107719421, 0.6465460062026978, 0.6612072587013245, 0.668339729309082, 0.6707172393798828, 0.6859067678451538, 0.7018887996673584, 0.6956809163093567, 0.6968696117401123, 0.6930392384529114, 0.6930392384529114, 0.7066437602043152, 0.7125874757766724, 0.7190595865249634, 0.7238145470619202, 0.7124554514884949, 0.7293620109558105, 0.7371549606323242, 0.7391361594200134, 0.7345132827758789, 0.7423061728477478, 0.7528728246688843, 0.7441553473472595, 0.737947404384613, 0.7417778372764587, 0.7490423917770386, 0.7537974119186401, 0.7606657147407532, 0.7651565074920654, 0.763439416885376, 0.7613261342048645, 0.7697794437408447, 0.765949010848999, 0.7663452625274658, 0.7738739848136902, 0.7769119143486023, 0.7738739848136902, 0.7737419009208679, 0.7741381525993347, 0.7866860628128052, 0.7848368883132935, 0.7898560166358948, 0.7886672616004944, 0.7878747582435608, 0.7901201844215393, 0.7931581139564514, 0.7903843522071838, 0.7864218950271606], "val_loss": [1.9611862046378, 1.9349071638924735, 1.8940149715968542, 1.8292521749223982, 1.7144200801849365, 1.5171688624790736, 1.2479122706821986, 1.0099327564239502, 0.8602357591901507, 0.8042401586260114, 0.7435685736792428, 0.7285914591380528, 0.6704763514654977, 0.6946091822215489, 0.7230231421334403, 0.7199185405458722, 0.6660244805472237, 0.6260789973395211, 0.6199186188834054, 0.6130132504871914, 0.6192695413316999, 0.6221549340656826, 0.596489497593471, 0.5855537482670375, 0.5661933762686593, 0.5537779331207275, 0.5710969141551426, 0.5797174147197178, 0.5739337376185826, 0.5596117803028652, 0.546343343598502, 0.536686829158238, 0.5273968832833427, 0.5220903498785836, 0.5215866225106376, 0.5165835448673793, 0.5044758490153721, 0.4962376356124878, 0.4920669453484671, 0.48958444595336914, 0.4898215191704886, 0.4905068874359131, 0.4916318825313023, 0.4898028714316232, 0.48299559525081087, 0.4742334910801479, 0.46825030871800016, 0.46587651116507395, 0.46612375123160227, 0.4652400187083653, 0.46337643691471647, 0.4622579302106585, 0.4611412797655378, 0.4581256253378732, 0.45629869188581196, 0.4563291754041399, 0.45579746791294645, 0.4527524880000523, 0.44877212388174875, 0.4460385867527553], "val_accuracy": [0.1146666631102562, 0.3096666634082794, 0.3856666684150696, 0.4326666593551636, 0.47466665506362915, 0.5076666474342346, 0.5596666932106018, 0.6230000257492065, 0.6723333597183228, 0.6650000214576721, 0.6996666789054871, 0.7036666870117188, 0.7163333296775818, 0.6926666498184204, 0.7113333344459534, 0.7176666855812073, 0.7236666679382324, 0.7263333201408386, 0.7286666631698608, 0.7276666760444641, 0.7253333330154419, 0.7206666469573975, 0.7350000143051147, 0.734666645526886, 0.7326666712760925, 0.7513333559036255, 0.753333330154419, 0.7559999823570251, 0.7570000290870667, 0.7566666603088379, 0.7556666731834412, 0.7576666474342346, 0.7649999856948853, 0.7633333206176758, 0.7689999938011169, 0.7706666588783264, 0.7749999761581421, 0.7736666798591614, 0.7749999761581421, 0.7753333449363708, 0.778333306312561, 0.7806666493415833, 0.7826666831970215, 0.781000018119812, 0.7816666960716248, 0.784333348274231, 0.7886666655540466, 0.7889999747276306, 0.7913333177566528, 0.7943333387374878, 0.8023333549499512, 0.8069999814033508, 0.8046666383743286, 0.8106666803359985, 0.8109999895095825, 0.8069999814033508, 0.8046666383743286, 0.8029999732971191, 0.8050000071525574, 0.800000011920929]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 5, 1, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [16, 68, 85, 41, 87, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.5742856860160828, "mapping_values": [1, 9, 9, 5, 4, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301379913635667, 2.3001237009431645, 2.2959420333023886, 2.2934880851518367, 2.2919487002471874, 2.290600427688782, 2.288061149336674, 2.2873196130761886, 2.283182818923313, 2.280984337618637, 2.2777097745106096, 2.276105089777134, 2.273610227064859, 2.2718314674819826, 2.268534134848558, 2.2664785306719173, 2.265392479722085, 2.2607451665198344, 2.2587033918489317, 2.2563640253182653, 2.2544477598116996, 2.249293849106399, 2.247140641603582, 2.2454546817683303, 2.242559167104642, 2.2391327117743067, 2.2362281235689974, 2.234691967219095, 2.2308622311607342, 2.2262644673917964, 2.223173765757647, 2.2228846707442935, 2.2169341994723815, 2.2132432671459896, 2.209924379123783, 2.2057883825127034, 2.2037517679617813, 2.1963432671891194, 2.193620194690953, 2.189208501019199, 2.186677636534641, 2.1795270389427897, 2.1752729316696815, 2.1714578515676193, 2.166207291115985, 2.1624911931747963, 2.1569500826353316, 2.149106230167051, 2.144769326869948, 2.139076499198296, 2.134663641366189, 2.1308176445372116, 2.12286921124401, 2.1163428486645293, 2.1094218380242418, 2.103401753124922, 2.0921592847498856, 2.0894127044506425, 2.0838852847934066, 2.0765399524107773, 2.0624820797151466, 2.0566045545142924, 2.0546025231592786, 2.0477417292234024, 2.0333075621313563, 2.0293930656071337, 2.0160076523721493, 2.0100447445844125, 2.0006793947614114, 1.9935115563036538, 1.9802385734261585, 1.9718592935754102, 1.9636906863613026, 1.9512668748683524, 1.939431029587311, 1.9288631295956293, 1.922948995947822, 1.9083252251030132, 1.8922009801726063, 1.8877268851535542, 1.8777314430812977, 1.862715663549025, 1.8614082185741208, 1.8476653644327223, 1.8329969860260056, 1.8199862688602695, 1.8087163691224046, 1.7940990533716628, 1.7836952255921923, 1.7684531141470579, 1.7631143313262914, 1.7473193251178123, 1.733587536750736, 1.724257554943063, 1.7107122922223934, 1.6987274149389724, 1.6931067254675252, 1.6778158741761917, 1.6655778695784067, 1.6524161896480782], "accuracy": [0.09708096832036972, 0.10157178342342377, 0.10645885765552521, 0.11676132678985596, 0.11781799048185349, 0.11728965491056442, 0.12719587981700897, 0.13036586344242096, 0.13855500519275665, 0.14291374385356903, 0.1612732857465744, 0.1562541276216507, 0.16431118547916412, 0.1740853190422058, 0.18214239180088043, 0.189274862408638, 0.1950865089893341, 0.19640734791755676, 0.19970941543579102, 0.21172896027565002, 0.2098798006772995, 0.22454100847244263, 0.22956016659736633, 0.23378682136535645, 0.24025888741016388, 0.2366926372051239, 0.25637298822402954, 0.25056135654449463, 0.2607317268848419, 0.2693171203136444, 0.2712983787059784, 0.27143046259880066, 0.2879408299922943, 0.2953374683856964, 0.2926958203315735, 0.3000924587249756, 0.30022454261779785, 0.3089420199394226, 0.30722492933273315, 0.32426363229751587, 0.31805574893951416, 0.3218861520290375, 0.3362831771373749, 0.3259807229042053, 0.3413023352622986, 0.3345661163330078, 0.34420815110206604, 0.3595297932624817, 0.3563597798347473, 0.3521331250667572, 0.35886937379837036, 0.3549068868160248, 0.37102100253105164, 0.3719455897808075, 0.3745872378349304, 0.3726060092449188, 0.3807951509952545, 0.3773609697818756, 0.3833047151565552, 0.3910976052284241, 0.3937392830848694, 0.39743760228157043, 0.3891163766384125, 0.39889049530029297, 0.40126800537109375, 0.4057588279247284, 0.4103817343711853, 0.4113062918186188, 0.414608359336853, 0.41289129853248596, 0.4212125241756439, 0.41764628887176514, 0.42966583371162415, 0.421740859746933, 0.4364020526409149, 0.43309998512268066, 0.4333641529083252, 0.4364020526409149, 0.4430062174797058, 0.43825122714042664, 0.43983620405197144, 0.447761207818985, 0.44644036889076233, 0.4451195299625397, 0.45687490701675415, 0.45964866876602173, 0.4579315781593323, 0.4659886360168457, 0.4647998809814453, 0.46123364567756653, 0.46889445185661316, 0.4678378105163574, 0.4745740294456482, 0.4741777777671814, 0.48249900341033936, 0.4822348356246948, 0.47232863306999207, 0.47932901978492737, 0.4835556745529175, 0.4931977391242981], "val_loss": [1.9689452988760812, 1.966730730874198, 1.9645318984985352, 1.9623476437159948, 1.9601616178240096, 1.9579742976597376, 1.9557907921927316, 1.9536173684256417, 1.9514290264674596, 1.9492179325648717, 1.9469913755144392, 1.9447743552071708, 1.9425392150878906, 1.940298012324742, 1.9380262238638741, 1.935701847076416, 1.9333620071411133, 1.930978230067662, 1.9285740171160017, 1.926107610974993, 1.9236298288617815, 1.9210637637547083, 1.9184568268912179, 1.9158212797982352, 1.9131159782409668, 1.9103595188685827, 1.9074899809701102, 1.904618603842599, 1.9016594205583846, 1.8985920633588518, 1.8954478672572546, 1.8922744478498186, 1.888974598475865, 1.8855901445661272, 1.8820954731532507, 1.8785112244742257, 1.8748767716544015, 1.8710511071341378, 1.8671403612409319, 1.8630914688110352, 1.8589840616498674, 1.8546717507498605, 1.850235870906285, 1.845710141318185, 1.8410427229745048, 1.8362487384251185, 1.8312907218933105, 1.8261617933000838, 1.8208900860377721, 1.8154938561575753, 1.8099888392857142, 1.8043763978140694, 1.798513753073556, 1.7925184113638741, 1.7863215718950545, 1.7799479620797294, 1.7733352524893624, 1.7666215896606445, 1.759774616786412, 1.7527427673339844, 1.745379856654576, 1.7378687858581543, 1.7303601673671178, 1.7225794792175293, 1.714545556477138, 1.7064002922603063, 1.6979545865740096, 1.6893432480948312, 1.6805779593331474, 1.6716080052512032, 1.6623355661119734, 1.6529225281306676, 1.6433518614087785, 1.6335820470537459, 1.6235576357160295, 1.6133460998535156, 1.603081362588065, 1.5925143105643136, 1.5816476004464286, 1.5708709103720528, 1.5599278381892614, 1.5487521375928606, 1.537604706627982, 1.5264262471880232, 1.5150011948176794, 1.50343690599714, 1.4918125697544642, 1.480018207005092, 1.4682346752711706, 1.4562813213893346, 1.4444756167275565, 1.4325093201228551, 1.4204326016562325, 1.4084127971104212, 1.3964572293417794, 1.3844255719866072, 1.3725110803331648, 1.36062410899571, 1.3486576420920235, 1.3366917201450892], "val_accuracy": [0.04699999839067459, 0.059333331882953644, 0.0793333351612091, 0.09966666996479034, 0.11999999731779099, 0.1456666737794876, 0.16633333265781403, 0.18533332645893097, 0.2043333351612091, 0.22233332693576813, 0.23733332753181458, 0.25600001215934753, 0.2736666798591614, 0.28700000047683716, 0.3019999861717224, 0.30933332443237305, 0.32066667079925537, 0.3310000002384186, 0.3396666646003723, 0.3453333377838135, 0.3499999940395355, 0.3580000102519989, 0.3616666793823242, 0.36800000071525574, 0.3733333349227905, 0.3773333430290222, 0.3803333342075348, 0.38366666436195374, 0.38966667652130127, 0.3943333327770233, 0.4020000100135803, 0.4099999964237213, 0.4169999957084656, 0.4206666648387909, 0.42366665601730347, 0.42800000309944153, 0.4313333332538605, 0.4350000023841858, 0.43799999356269836, 0.43966665863990784, 0.44333332777023315, 0.44566667079925537, 0.44999998807907104, 0.453000009059906, 0.4556666612625122, 0.4596666693687439, 0.4620000123977661, 0.46433332562446594, 0.46833333373069763, 0.47066667675971985, 0.47600001096725464, 0.48100000619888306, 0.4860000014305115, 0.4896666705608368, 0.49133333563804626, 0.49399998784065247, 0.4970000088214874, 0.49966666102409363, 0.5036666393280029, 0.5063333511352539, 0.5096666812896729, 0.5149999856948853, 0.515333354473114, 0.5199999809265137, 0.5223333239555359, 0.5239999890327454, 0.5249999761581421, 0.5263333320617676, 0.5286666750907898, 0.531333327293396, 0.5320000052452087, 0.5336666703224182, 0.5360000133514404, 0.5379999876022339, 0.5379999876022339, 0.5406666398048401, 0.543666660785675, 0.543666660785675, 0.5453333258628845, 0.5456666946411133, 0.5460000038146973, 0.546999990940094, 0.5483333468437195, 0.5486666560173035, 0.550000011920929, 0.5503333210945129, 0.5506666898727417, 0.5516666769981384, 0.5546666383743286, 0.5559999942779541, 0.5583333373069763, 0.562333345413208, 0.562333345413208, 0.562666654586792, 0.5636666417121887, 0.5636666417121887, 0.5653333067893982, 0.5676666498184204, 0.5693333148956299, 0.5726666450500488]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 0, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 2, 1, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [5, 5, 8], [1, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.3977142870426178, "mapping_values": [1, 26, 26, 17, 9, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.sqrt(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.square(grad))))))), tf.math.divide_no_nan(tf.math.add(grad, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.negative(tf.math.negative(grad))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.315398973291891, 2.3057102586426015, 2.2692844553740743, 2.305347693012123, 2.300282333127386, 2.267026819746335, 2.304375120268018], "accuracy": [0.17051908373832703, 0.19812442362308502, 0.18359529972076416, 0.10011887550354004, 0.11689341068267822, 0.1592920422554016, 0.09351472556591034], "val_loss": [1.9397012846810477, 1.4714643955230713, 1.977536746433803, 1.973968437739781, 1.9257618359157018, 1.9750632558550154, 1.9738902364458357], "val_accuracy": [0.20200000703334808, 0.3816666603088379, 0.09833333641290665, 0.09833333641290665, 0.31200000643730164, 0.10233332961797714, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 2, 5, 5, 9, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [1, 2, 1, 1, 2, 2, 0, 2, 0, 0, 2, 1, 0, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [1, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.30971428751945496, "mapping_values": [1, 10, 10, 7, 3, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.square(grad)), alpha)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3154010487081447, 2.3607048845373013, 2.224068622232633, 2.3675729609625358, 2.1284602874652063, 2.3382580806204136, 2.3039281750241796, 2.3032647819881817, 2.3029460410683806, 2.3032637168041323], "accuracy": [0.17038699984550476, 0.1694624274969101, 0.18993528187274933, 0.13551710546016693, 0.24818386137485504, 0.1278562992811203, 0.09417514503002167, 0.09813763201236725, 0.09879804402589798, 0.09140139818191528], "val_loss": [1.9378529957362585, 1.9562668800354004, 2.2313499450683594, 1.894930635179792, 2.1239592007228305, 1.9743634632655553, 1.973700727735247, 1.9736433710370744, 1.9738245010375977, 1.9737834930419922], "val_accuracy": [0.23933333158493042, 0.11100000143051147, 0.1340000033378601, 0.2433333396911621, 0.29633334279060364, 0.09666666388511658, 0.09666666388511658, 0.10566666722297668, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [1, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 1, 0, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [16, 68, 85, 80, 87, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [0, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.3085714280605316, "mapping_values": [1, 33, 33, 20, 13, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad)), tf.math.divide_no_nan(grad, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(alpha, alpha)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.315311227098605, 2.3116810846133493, 2.3446352212593746, 2.267941595777119, 2.3039940986273044, 2.3030328618033122, 2.3008633518042645, 2.2788899057592618], "accuracy": [0.17197199165821075, 0.17580240964889526, 0.15031039714813232, 0.13036586344242096, 0.09391097724437714, 0.09985470771789551, 0.10738343745470047, 0.15810328722000122], "val_loss": [1.9371909414018904, 1.7809992517743791, 1.6428726060049874, 1.9747798102242606, 1.9736557006835938, 1.9733119692121233, 1.9612229210989816, 1.9758323260716029], "val_accuracy": [0.24300000071525574, 0.3319999873638153, 0.34833332896232605, 0.10133333504199982, 0.10000000149011612, 0.10233332961797714, 0.15033333003520966, 0.1146666631102562]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 8, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 3, 1, 1, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 1, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10457143187522888, "mapping_values": [1, 11, 11, 6, 5, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, alpha)), tf.math.square(alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3153913327180446, 2.3257765376635544, 2.094942222858984, 2.769944697260274, 2.3069583170481045, 2.3038060832033067, 2.304568097166586], "accuracy": [0.17051908373832703, 0.17831197381019592, 0.2487121969461441, 0.1678774207830429, 0.09734513610601425, 0.09998679161071777, 0.09800554811954498], "val_loss": [1.9387243815830775, 1.907573972429548, 1.9260549545288086, 1.9791840144566126, 1.9743686403547014, 1.9737672805786133, 1.9739796774727958], "val_accuracy": [0.22233332693576813, 0.31466665863990784, 0.2460000067949295, 0.09833333641290665, 0.09833333641290665, 0.10233332961797714, 0.09666666388511658]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 1, 8, 1, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 3, 1, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [20, 7, 76, 58]], "fitness": -0.10114285349845886, "mapping_values": [1, 32, 32, 20, 12, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(grad, alpha))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.negative(tf.math.negative(grad))))))))))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3022121144575514, 2.302744322291707, 2.3009778239928247, 2.3004907312772342, 2.300958615252528, 2.301443714585995, 2.3016707491581827, 2.301777892723028, 2.3011040024359968, 2.3010533139091898, 2.3009194548040917, 2.300804616028465, 2.301294058352697, 2.301280520863269, 2.300954089928706, 2.3013698828927343, 2.3017635182335456], "accuracy": [0.09509972482919693, 0.0956280529499054, 0.09800554811954498, 0.10315678268671036, 0.0952318087220192, 0.09509972482919693, 0.0882314071059227, 0.09377889335155487, 0.09734513610601425, 0.0952318087220192, 0.10368511080741882, 0.1014397069811821, 0.09747721254825592, 0.10210011899471283, 0.09800554811954498, 0.09655263274908066, 0.10117553919553757], "val_loss": [1.9709300994873047, 1.9707540784563338, 1.9706322806222099, 1.9705688612801688, 1.9706049646650041, 1.970714705330985, 1.9708811896187919, 1.9710772378104073, 1.9713081632341658, 1.9715580940246582, 1.971818310873849, 1.9720511436462402, 1.9722653116498674, 1.97246367590768, 1.9726262773786272, 1.9727593149457658, 1.9728528431483678], "val_accuracy": [0.04100000113248825, 0.04766666516661644, 0.0560000017285347, 0.0663333311676979, 0.07566666603088379, 0.07866666465997696, 0.08633333444595337, 0.09033333510160446, 0.09466666728258133, 0.09966666996479034, 0.09933333098888397, 0.1003333330154419, 0.0976666659116745, 0.0949999988079071, 0.09033333510160446, 0.08766666799783707, 0.08233333379030228]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 1, 1, 5, 6, 2, 1, 6, 5, 2, 3, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 1, 3, 1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [63, 68, 9, 41, 79, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [1, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 15, 11, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(alpha)), grad)), tf.math.divide_no_nan(alpha, alpha))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [4, 2, 4, 1, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 7, 8, 1, 5], [2, 2, 3, 0, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [61, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 53, 53, 35, 18, 5, 6, 6, 4, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))))), tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, grad))), alpha)), tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.square(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.square(alpha)))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08942015469074249, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 9, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 3, 2, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [3, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 18, 11, 7, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(sigma), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.square(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), beta)), alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [1, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 1, 0, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [1, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 20, 12, 3, 5, 5, 5, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(alpha, grad)))), tf.math.add(grad, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302410777124353, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 2, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 3, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08413683623075485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 2, 1, 5, 6, 2, 1, 6, 5, 2, 4, 0, 3, 0, 0, 2, 5, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 0, 36, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [3, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.07400000095367432, "mapping_values": [1, 32, 32, 19, 13, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), grad)), tf.math.divide_no_nan(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, alpha))))))), grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.5246534078600793, 2.370339749275402, 2.415750280237154, 2.5106814425650716, 2.331108708281511, 2.3363460328647916, 2.347632269550072], "accuracy": [0.17593449354171753, 0.18584071099758148, 0.14251750707626343, 0.11676132678985596, 0.09760929644107819, 0.10170386731624603, 0.09734513610601425], "val_loss": [1.9928529603140694, 2.0372328077043806, 2.7046104158673967, 2.0104791777474538, 2.0030153138296947, 1.991278784615653, 314.213134765625], "val_accuracy": [0.11866666376590729, 0.2563333213329315, 0.22599999606609344, 0.10100000351667404, 0.10000000149011612, 0.10233332961797714, 0.0846666693687439]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [7, 4, 7, 1, 3, 5, 1, 9, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 3, 1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 0, 1, 1], [1, 0, 0], [8, 5, 8], [0, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [15, 7, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), alpha), tf.math.square(alpha)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3023735253156814, 2.303522785940285, 2.3017047547141494, 2.301591182822612, 2.3023823088879096, 2.3034372450007643], "accuracy": [0.09417514503002167, 0.09470347315073013, 0.09325055778026581, 0.09655263274908066, 0.08981640636920929, 0.08479725569486618], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 3, 8, 1, 5, 5, 6, 2, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [0, 2, 3, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [20, 68, 85, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [16, 7, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 32, 32, 20, 12, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad)))), tf.math.divide_no_nan(tf.math.add(grad, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))))))))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3023735253156814, 2.303522785940285, 2.3017047547141494, 2.301591182822612, 2.3023823088879096, 2.3034372450007643], "accuracy": [0.09417514503002167, 0.09470347315073013, 0.09325055778026581, 0.09655263274908066, 0.08981640636920929, 0.08479725569486618], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 0, 1, 3, 5, 3, 9, 1, 6, 5, 2, 4, 0, 8, 0, 0, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5], [2, 2, 3, 1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [16, 68, 85, 41, 87, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [0, 1], [28], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.03400000184774399, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.302847472983045, 2.305630471114044, 2.3058925472970464, 2.3074096056606006, 2.3114591649085336, 2.315952710314292], "accuracy": [0.09338264167308807, 0.09047681838274002, 0.08532558381557465, 0.08691058307886124, 0.07713644206523895, 0.07924976944923401], "val_loss": [1.9722623143877303, 1.9737467765808105, 1.975527218409947, 1.9771225793021066, 1.9794014522007533, 1.9820919036865234], "val_accuracy": [0.02866666577756405, 0.023333333432674408, 0.02199999988079071, 0.02033333294093609, 0.023333333432674408, 0.02866666577756405]}}]