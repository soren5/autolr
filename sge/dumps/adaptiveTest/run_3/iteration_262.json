[{"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 1, 6, 4, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8031428456306458, "mapping_values": [1, 2, 2, 1, 1, 1, 21, 21, 12, 9, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0518228410651043, 1.841616946771365, 1.2994398539643546, 0.9752524565979632, 0.8790873779108684, 0.8123089693651034, 0.7696550595384027, 0.7303510689228407, 0.7160268144884036, 0.664742422921074, 0.6651465154878216, 0.654720863701094, 0.6228626990252167, 0.6166663318498495, 0.6081232937839384, 0.6311567534371894, 0.5836200424866228, 0.5707823876077472, 0.557597600863421, 0.5339011853523163, 0.529975112174811, 0.5247063038922604, 0.524884889926011, 0.5099258115971487, 0.5044469370613355, 0.4967556099188783, 0.49568734377949325, 0.4778013182684667, 0.4660568557843997, 0.4628170916133821, 0.48007962197407816, 0.4732843010440683, 0.45594947000914055, 0.4330421011674012, 0.4272575394714576, 0.43866307101528706, 0.4357269682888625, 0.4162441220982294, 0.4167084267441434], "accuracy": [0.32267865538597107, 0.4255712628364563, 0.5420684218406677, 0.6425835490226746, 0.6666226387023926, 0.7005679607391357, 0.7077004313468933, 0.7271166443824768, 0.722757875919342, 0.7514199018478394, 0.7421740889549255, 0.7425703406333923, 0.7606657147407532, 0.7677981853485107, 0.7635715007781982, 0.7593448758125305, 0.7745344042778015, 0.7781006693840027, 0.7866860628128052, 0.7952714562416077, 0.798309326171875, 0.8034605979919434, 0.7968564033508301, 0.8129705190658569, 0.8129705190658569, 0.81112140417099, 0.8092722296714783, 0.8202351331710815, 0.8309338092803955, 0.8248580098152161, 0.8214238286018372, 0.8169330358505249, 0.8296129703521729, 0.8401796221733093, 0.8388587832450867, 0.8296129703521729, 0.8384625315666199, 0.8474441766738892, 0.8429533839225769], "val_loss": [1.8614322117396764, 1.3727221148354667, 0.8091831718172345, 0.6839566060474941, 0.6091316257204328, 0.6026867457798549, 0.5801671743392944, 0.5629608290536063, 0.5406382424490792, 0.5337845938546317, 0.5509344850267682, 0.5304712057113647, 0.5339532920292446, 0.49363824299403597, 0.5085540839603969, 0.4682395117623465, 0.4784740890775408, 0.47998627594539095, 0.45397019386291504, 0.467233521597726, 0.4744463988712856, 0.4488908222743443, 0.47580710479191374, 0.418191773550851, 0.44317800658089773, 0.4104567510741098, 0.40817791223526, 0.40141236782073975, 0.41283860376902987, 0.46076319898877827, 0.4086915850639343, 0.388432434626988, 0.399188152381352, 0.38070578234536306, 0.42116445302963257, 0.40471539327076506, 0.379016033240727, 0.38070811544145855, 0.40472279276166645], "val_accuracy": [0.30033332109451294, 0.47733333706855774, 0.6613333225250244, 0.6796666383743286, 0.7296666502952576, 0.7300000190734863, 0.7390000224113464, 0.7396666407585144, 0.750333309173584, 0.7543333172798157, 0.7310000061988831, 0.7563333511352539, 0.7726666927337646, 0.778333306312561, 0.7683333158493042, 0.7953333258628845, 0.7836666703224182, 0.7803333401679993, 0.8080000281333923, 0.7956666946411133, 0.7833333611488342, 0.7983333468437195, 0.7896666526794434, 0.812666654586792, 0.7983333468437195, 0.8289999961853027, 0.8299999833106995, 0.828000009059906, 0.8180000185966492, 0.7896666526794434, 0.8166666626930237, 0.8356666564941406, 0.824999988079071, 0.8443333506584167, 0.8186666369438171, 0.8223333358764648, 0.843999981880188, 0.8433333039283752, 0.8216666579246521]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8005714416503906, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0518072847173103, 1.8432947965330215, 1.298772922989998, 0.9775394379203, 0.8848976556651108, 0.8067504234317744, 0.7611708524299257, 0.7453993245469203, 0.7205119112683892, 0.6590915334900184, 0.6714759762449949, 0.6612139507890016, 0.636475327756222, 0.6117579692689545, 0.6045151870988537, 0.6188481743341078, 0.5826951252502489, 0.565598522187098, 0.5535448455949108, 0.535393790231326, 0.5297229122397544, 0.5240683983015015, 0.5176025765714645, 0.5159360480708469, 0.49672308643307306, 0.5037763576387273, 0.47870103734406527, 0.4792697568650511, 0.46729758693211115, 0.46995828818840324, 0.4686527995976002], "accuracy": [0.32267865538597107, 0.42491084337234497, 0.5440496802330017, 0.6415268778800964, 0.6625280380249023, 0.7009642124176025, 0.7079645991325378, 0.7215691208839417, 0.7288337349891663, 0.7485140562057495, 0.7375511527061462, 0.739400327205658, 0.7506273984909058, 0.7667415142059326, 0.7650244235992432, 0.7609298825263977, 0.774270236492157, 0.7808743715286255, 0.7885351777076721, 0.796328067779541, 0.796328067779541, 0.8041210174560547, 0.7977809906005859, 0.8063663840293884, 0.8107251524925232, 0.8068947196006775, 0.8157442808151245, 0.817989706993103, 0.8277638554573059, 0.8216879963874817, 0.8241975903511047], "val_loss": [1.861501966203962, 1.3806491919926234, 0.8305751596178327, 0.6911994900022235, 0.6099319968904767, 0.5839184352329799, 0.5941214561462402, 0.5585260220936367, 0.5448118959154401, 0.572374701499939, 0.5809551818030221, 0.5128197499683925, 0.5404082196099418, 0.5000790357589722, 0.5189035620008197, 0.465980018888201, 0.47222115312303814, 0.4752979278564453, 0.4503810405731201, 0.46505054405757357, 0.4763448578970773, 0.45898490292685373, 0.4335276058741978, 0.4262423004422869, 0.41867469038282124, 0.41078685011182514, 0.41458804266793386, 0.4051778827394758, 0.41706426654543194, 0.41456317050116404, 0.396981418132782], "val_accuracy": [0.30000001192092896, 0.4753333330154419, 0.6456666588783264, 0.6796666383743286, 0.7293333411216736, 0.7363333106040955, 0.7266666889190674, 0.7516666650772095, 0.7426666617393494, 0.7366666793823242, 0.7179999947547913, 0.765666663646698, 0.7726666927337646, 0.7743333578109741, 0.7676666378974915, 0.7973333597183228, 0.7893333435058594, 0.7853333353996277, 0.8090000152587891, 0.796999990940094, 0.7816666960716248, 0.7950000166893005, 0.8153333067893982, 0.8176666498184204, 0.8220000267028809, 0.828000009059906, 0.8273333311080933, 0.8243333101272583, 0.8113333582878113, 0.815666675567627, 0.8256666660308838]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 8, 2, 6, 4, 2, 2, 5, 0, 2, 5, 1, 8, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 0, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7965714335441589, "mapping_values": [1, 2, 2, 1, 1, 1, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.974938518099419, 1.4741896835410788, 1.0548152503336206, 0.8913805454382886, 0.7940261833278212, 0.7789586785604548, 0.7136976213471575, 0.7264369805066058, 0.6833934762915285, 0.6671888494630138, 0.6342943225003284, 0.641818577831353, 0.600228571581598, 0.6067104573184315, 0.5735114093202216, 0.5978511539133485, 0.5580501700389213, 0.557745194816161, 0.53430224036528, 0.5087634368642541, 0.5482866728247558, 0.5228004676475974, 0.50850042229583, 0.512154948213837], "accuracy": [0.34447231888771057, 0.4795931875705719, 0.6112799048423767, 0.6672830581665039, 0.7071720957756042, 0.7040021419525146, 0.7263241410255432, 0.7226257920265198, 0.7358341217041016, 0.7456082701683044, 0.7642319202423096, 0.7577598690986633, 0.7716285586357117, 0.7717606425285339, 0.7861577272415161, 0.7733456492424011, 0.7924976944923401, 0.7854973077774048, 0.7981772422790527, 0.8088759779930115, 0.7877426743507385, 0.798309326171875, 0.802271842956543, 0.8124422430992126], "val_loss": [1.5775283404758997, 0.8229382378714425, 0.6906577008111137, 0.6529812301908221, 0.5760464838572911, 0.5721473693847656, 0.5986488716942924, 0.530324901853289, 0.54329970904759, 0.5103285993848529, 0.5017848355429513, 0.4855708394731794, 0.5033798728670392, 0.49870031220572336, 0.5217207159314837, 0.4843578679221017, 0.46309382574898855, 0.49374641690935406, 0.42851494039808, 0.48099071638924734, 0.44759976863861084, 0.45244470664433073, 0.46645770754132954, 0.4848021609442575], "val_accuracy": [0.30566665530204773, 0.6466666460037231, 0.6636666655540466, 0.7036666870117188, 0.731333315372467, 0.7426666617393494, 0.7210000157356262, 0.7580000162124634, 0.7406666874885559, 0.7683333158493042, 0.7716666460037231, 0.784333348274231, 0.7846666574478149, 0.7760000228881836, 0.7636666893959045, 0.7870000004768372, 0.7903333306312561, 0.7696666717529297, 0.8130000233650208, 0.7713333368301392, 0.8103333115577698, 0.8003333210945129, 0.7886666655540466, 0.7666666507720947]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 5, 3, 2, 2, 4, 0, 0, 3, 5, 6, 1, 6, 8, 8, 4, 0, 5, 5, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 5, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7820000052452087, "mapping_values": [1, 2, 2, 1, 1, 1, 21, 21, 12, 9, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9750098603953616, 1.4760153882019493, 1.052364409072225, 0.8963326011918334, 0.7918253437151069, 0.781657407532877, 0.7356624735691261, 0.7206575865554079, 0.6809163669222901, 0.666088900215291, 0.6127218457654545, 0.6459365892073324, 0.6006859803653238, 0.6085524827954382, 0.5690400916524552, 0.596481989041264, 0.5622596305516638], "accuracy": [0.34447231888771057, 0.4802536070346832, 0.613789439201355, 0.6643772125244141, 0.707040011882782, 0.7065116763114929, 0.7170783281326294, 0.7173424959182739, 0.7384757399559021, 0.744419515132904, 0.7750627398490906, 0.7553823590278625, 0.7697794437408447, 0.7701756954193115, 0.7878747582435608, 0.7738739848136902, 0.7918372750282288], "val_loss": [1.5780020441327776, 0.8211308206830706, 0.6883551733834403, 0.6634738445281982, 0.5823118346078056, 0.5881692171096802, 0.5570571252277919, 0.5271812847682408, 0.5313579525266375, 0.5114025047847203, 0.48547967842647005, 0.484811612537929, 0.5125822339739118, 0.4968139614377703, 0.4976450034550258, 0.49472272396087646, 0.45818000180380686], "val_accuracy": [0.3059999942779541, 0.6496666669845581, 0.6650000214576721, 0.6946666836738586, 0.7223333120346069, 0.7269999980926514, 0.7403333187103271, 0.7559999823570251, 0.7483333349227905, 0.765333354473114, 0.7913333177566528, 0.7919999957084656, 0.7799999713897705, 0.7770000100135803, 0.7713333368301392, 0.7850000262260437, 0.7903333306312561]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 8, 8, 6, 8, 8, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 3, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 3, 3, 2, 1, 0, 5, 1, 2, 3, 1, 3, 1, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [29, 9, 76, 58]], "fitness": -0.7817142605781555, "mapping_values": [1, 2, 2, 1, 1, 1, 29, 29, 17, 12, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), grad)), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), alpha)))), grad)))), tf.math.add(beta, tf.math.sqrt(grad))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.288475629471202, 2.255644050272401, 2.216726340511928, 2.158340782899394, 2.0765457264798552, 1.9567847878563562, 1.814097407865266, 1.6506501516063279, 1.5047405693336107, 1.3952064794745223, 1.3065996528254398, 1.2280883523593127, 1.1639608616180832, 1.123531045426845, 1.0785736218734487, 1.043705588208371, 1.0128349344476244, 0.9914759335390659, 0.9636596884583879, 0.9390752175071252, 0.9300354816547994, 0.9019235784288536, 0.8951387261324051, 0.8827421019074467, 0.8817367527101018, 0.8539816863926378, 0.8494159585024151, 0.8394362960178555, 0.8280320852550108, 0.8181033332932658, 0.8215619585753715, 0.8094856596389829, 0.8010068244197822, 0.7933534030050823, 0.7830304690261385, 0.7798304498597158, 0.7691863655272476, 0.7650149970589344, 0.757109421654589, 0.7561136192460464, 0.7468725756300817, 0.7498818829295468, 0.7349491301639095, 0.7305522456995454, 0.7329232475509134, 0.7224395589081524, 0.7246153456754436, 0.711672073641253, 0.7216574106281303, 0.7070384717825271, 0.7058711254585688, 0.6997126011469927, 0.6987070486908025, 0.6918665836311177, 0.6883085262364463, 0.6932151175178258, 0.681877975773424, 0.6926031244303399, 0.6861481836616496, 0.681788431418775, 0.6778826513279068, 0.6797424857689799, 0.674641973991845, 0.6673757078908674, 0.6602482595196206, 0.6669833113756383, 0.6592554024906206, 0.6590646640137439, 0.6565758340299845, 0.64862940700661, 0.6518007683212321, 0.6523082157041671, 0.6425077938652467, 0.6473847302337443, 0.6462159957143814, 0.644927318211733, 0.639497451668229, 0.6382582895177278, 0.635890728541495, 0.6274890372577109, 0.6256189633984025], "accuracy": [0.1212521493434906, 0.2075023055076599, 0.2822612524032593, 0.3358869254589081, 0.3827763795852661, 0.4189670979976654, 0.4566107392311096, 0.48791441321372986, 0.5196143388748169, 0.5305771827697754, 0.5552766919136047, 0.5773345828056335, 0.6016378402709961, 0.6096948981285095, 0.6218464970588684, 0.6336019039154053, 0.6453573107719421, 0.6470743417739868, 0.6586976647377014, 0.6667547225952148, 0.6708492636680603, 0.6802271604537964, 0.6806234121322632, 0.6889446377754211, 0.6877558827400208, 0.6939638257026672, 0.6940959095954895, 0.7005679607391357, 0.7034738063812256, 0.7033417224884033, 0.7013604640960693, 0.7092854380607605, 0.7061154246330261, 0.7125874757766724, 0.7116629481315613, 0.7170783281326294, 0.7243428826332092, 0.718399167060852, 0.7181349992752075, 0.7276449799537659, 0.7271166443824768, 0.7296261787414551, 0.7313432693481445, 0.7312111854553223, 0.7313432693481445, 0.7305507659912109, 0.7371549606323242, 0.7387399077415466, 0.7316074371337891, 0.7364945411682129, 0.7400607466697693, 0.7396644949913025, 0.7427024245262146, 0.7491744756698608, 0.7445515990257263, 0.7477215528488159, 0.7497028112411499, 0.7424382567405701, 0.7454761862754822, 0.7453441023826599, 0.7520803213119507, 0.7510236501693726, 0.7458723783493042, 0.7543256878852844, 0.7544577717781067, 0.7512878179550171, 0.7536653280258179, 0.759080708026886, 0.7589486241340637, 0.7617223858833313, 0.7573636174201965, 0.7627789974212646, 0.7619865536689758, 0.7622507214546204, 0.7635715007781982, 0.7629110813140869, 0.7643640041351318, 0.7614582180976868, 0.7658169269561768, 0.7662131786346436, 0.7670056819915771], "val_loss": [1.9411943299429757, 1.9073057174682617, 1.8616954258510046, 1.79434415272304, 1.697138854435512, 1.5651186874934606, 1.4088267939431327, 1.249399185180664, 1.1120579242706299, 1.008427517754691, 0.9325296878814697, 0.8708006995064872, 0.824340684073312, 0.7874542474746704, 0.759692941393171, 0.7343018736158099, 0.7131965841565814, 0.6994982446943011, 0.6829369068145752, 0.6687023128782, 0.6593238626207624, 0.6480412312916347, 0.6388744286128453, 0.629834737096514, 0.6231437751225063, 0.6164884567260742, 0.6077259608677456, 0.6028060572487968, 0.5981059755597796, 0.5930326666150775, 0.5892350843974522, 0.5833653722490583, 0.581473810332162, 0.5752146073750087, 0.5722428389957973, 0.5668162618364606, 0.5635033335004535, 0.5602144854409354, 0.5557229859488351, 0.5529302358627319, 0.5523403031485421, 0.5483966214316232, 0.543993490082877, 0.5395962170192173, 0.5403084754943848, 0.5350337198802403, 0.5349980933325631, 0.5298208679471698, 0.5333132743835449, 0.5265657220567975, 0.5257679905210223, 0.5220950841903687, 0.5199156148093087, 0.5170600414276123, 0.5187267235347203, 0.5163154942648751, 0.5129522425787789, 0.5121888433183942, 0.5130488872528076, 0.5085029772349766, 0.5087856224605015, 0.5060466868536813, 0.5035337039402553, 0.5008656467710223, 0.49958998816353933, 0.4996136256626674, 0.4983183315822056, 0.49631008080073763, 0.497600861958095, 0.4927457571029663, 0.4940481867109026, 0.49316186564309256, 0.4905979803630284, 0.4877435139247349, 0.4891681330544608, 0.48683248247419086, 0.4844421148300171, 0.48202688353402273, 0.48179471492767334, 0.4812403236116682, 0.48060180459703716], "val_accuracy": [0.28700000047683716, 0.3856666684150696, 0.4410000145435333, 0.49433332681655884, 0.5370000004768372, 0.5446666479110718, 0.5479999780654907, 0.5823333263397217, 0.6010000109672546, 0.637333333492279, 0.6600000262260437, 0.6759999990463257, 0.6890000104904175, 0.6903333067893982, 0.7003333568572998, 0.7103333473205566, 0.7129999995231628, 0.7143333554267883, 0.718999981880188, 0.7286666631698608, 0.7286666631698608, 0.7286666631698608, 0.7310000061988831, 0.7333333492279053, 0.7423333525657654, 0.7360000014305115, 0.7446666955947876, 0.7456666827201843, 0.7409999966621399, 0.7446666955947876, 0.7476666569709778, 0.7513333559036255, 0.750333309173584, 0.7549999952316284, 0.753333330154419, 0.7543333172798157, 0.7566666603088379, 0.7586666941642761, 0.7566666603088379, 0.7559999823570251, 0.7599999904632568, 0.7576666474342346, 0.762333333492279, 0.7576666474342346, 0.7563333511352539, 0.7639999985694885, 0.7666666507720947, 0.7639999985694885, 0.7670000195503235, 0.7646666765213013, 0.7683333158493042, 0.7670000195503235, 0.7673333287239075, 0.7713333368301392, 0.7676666378974915, 0.7646666765213013, 0.7676666378974915, 0.7703333497047424, 0.7723333239555359, 0.7773333191871643, 0.7730000019073486, 0.7746666669845581, 0.778333306312561, 0.7776666879653931, 0.7770000100135803, 0.7776666879653931, 0.777999997138977, 0.7806666493415833, 0.7763333320617676, 0.7789999842643738, 0.7820000052452087, 0.7846666574478149, 0.7799999713897705, 0.7820000052452087, 0.7853333353996277, 0.7876666784286499, 0.7850000262260437, 0.7873333096504211, 0.784333348274231, 0.7853333353996277, 0.7870000004768372]}}, {"genotype": [[0], [1, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 8, 7, 3, 0, 2, 4, 3, 0, 4, 5, 6, 1, 6, 8, 6, 4, 0, 5, 0, 6, 2, 5, 0, 1, 9, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 2, 2, 1, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 3, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [74, 9, 76, 58]], "fitness": -0.23771429061889648, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.295450784495289, 2.472254834359647, 2.342327574602822, 2.304213811157402, 2.3031745329509086, 2.3030098721871144], "accuracy": [0.21793685853481293, 0.1372341811656952, 0.1460837423801422, 0.09747721254825592, 0.09932637959718704, 0.10249637067317963], "val_loss": [2.5892511095319475, 1.9659481048583984, 1.975417000906808, 1.9740616253444128, 1.97369350705828, 1.9736876487731934], "val_accuracy": [0.2029999941587448, 0.1863333284854889, 0.10233332961797714, 0.09866666793823242, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [96, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 9, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10400000214576721, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 0, 2], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301460540053741, 2.3023860154764733, 2.3025849225136583, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.1002509593963623, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9733670779636927, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 3, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 3, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 0, 1, 4, 0, 2, 4, 3, 1, 2, 5, 6, 2, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 2, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 2, 2, 3, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 0, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 4, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [36, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 33, 33, 19, 14, 0, 1, 1, 1, 0, 1, 9, 5, 4, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.subtract(alpha, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), beta)), beta), grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.pow(grad, grad))))))))), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.pow(alpha, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 3, 4, 4, 4, 9, 1, 2, 8, 6, 2, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 0, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [11, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [823758522.5790733, 15561820492.451723, 72809068716.85326, 203190624090.4504, 434699833264.47125, 799853002295.3861], "accuracy": [0.1010434553027153, 0.09866596013307571, 0.10011887550354004, 0.09800554811954498, 0.09721305221319199, 0.09787346422672272], "val_loss": [3109059730.285714, 24863970450.285713, 83906487442.28572, 198878120228.57144, 388419111204.5714, 671176664210.2858], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [9, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [7, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 4, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [84, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 9, 5, 4, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.pow(sigma, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [8, 0, 9, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 0, 1, 0, 0, 1, 1], [3, 6, 6, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [56, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08070268481969833, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [1, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 6, 1, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 30, 30, 17, 13, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))))))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.sqrt(grad))), tf.math.pow(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [6867.493932943932, 103312.80845702351, 454399.1093151499, 1236046.0338957866, 2605566.704695549, 4754493.767600053], "accuracy": [0.10117553919553757, 0.09866596013307571, 0.09998679161071777, 0.09800554811954498, 0.09708096832036972, 0.09800554811954498], "val_loss": [18537.159040178572, 144808.95982142858, 485208.53571428574, 1146121.0, 2233932.1428571427, 3855028.4285714286], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 6, 2, 5, 2, 1, 6, 8, 6, 5, 0, 5, 5, 6, 2, 9, 0, 1, 3, 3, 6, 7, 9, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 3, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 3, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 29, 29, 16, 13, 0, 1, 1, 0, 1, 0, 3, 3, 0, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), beta)), tf.math.add(beta, grad)), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(grad)))))))))))))), tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3035861797745927, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 1, 6, 4, 2, 0, 5, 0, 6, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 0, 0, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 25, 25, 14, 11, 1, 1, 1, 0, 1, 0, 12, 7, 5, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(alpha, alpha)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.sqrt(sigma))), tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.pow(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [4, 1, 1, 3, 2, 2, 4, 0, 0, 3, 5, 8, 1, 6, 5, 8, 0, 0, 5, 5, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 5, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 0, 3, 3, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 2, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [56, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 28, 28, 17, 11, 1, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.negative(beta))))))))))), tf.math.multiply(grad, tf.math.add(beta, grad)))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(beta, tf.math.sqrt(beta)))), tf.math.negative(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.add(sigma, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10447761416435242, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [76, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [2, 6, 3, 9, 0, 2, 1, 3, 0, 4, 5, 2, 1, 4, 8, 2, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 1, 3, 3, 2, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.0965714305639267, "mapping_values": [1, 2, 2, 1, 1, 1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, beta))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3133132983948244, 2.405368651318402, 2.677290720789109, 3.1804236711653986, 3.949661474942122, 4.991019637687662, 6.312105993065049], "accuracy": [0.0936468094587326, 0.09681680053472519, 0.09893012791872025, 0.09826971590518951, 0.09589222073554993, 0.09734513610601425, 0.09893012791872025], "val_loss": [1.9869770322527205, 2.066084589276995, 2.253718989236014, 2.5913193566458568, 3.1030571120125905, 3.791754722595215, 4.648372513907296], "val_accuracy": [0.09433333575725555, 0.10000000149011612, 0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 9, 1, 4, 0, 2, 4, 3, 6, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 1, 1, 3, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 3, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [71, 9, 76, 58]], "fitness": -0.06942857056856155, "mapping_values": [1, 2, 2, 1, 1, 0, 14, 14, 8, 6, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [2.3012221595472933, 2.3004657247866054, 2.300852456947501, 2.30033211370485, 2.300907957335001, 2.2995222368732877, 2.3000017044141448, 2.300108835791962, 2.3000512327799596, 2.300356195681855, 2.2997572351487685, 2.300330877933898, 2.3000465189508397, 2.2995560732279565, 2.299645103562415, 2.2996707502656593, 2.3001853503319314], "accuracy": [0.08849557489156723, 0.0948355570435524, 0.09245806187391281, 0.09100515395402908, 0.09298639744520187, 0.10038304328918457, 0.09945846349000931, 0.09972262382507324, 0.10210011899471283, 0.10289261490106583, 0.09840179979801178, 0.09694888442754745, 0.10091137140989304, 0.10302469879388809, 0.10711926966905594, 0.09840179979801178, 0.10289261490106583], "val_loss": [1.970342023032052, 1.9697980880737305, 1.9695329666137695, 1.9695094653538294, 1.9694297654288155, 1.9694412776402064, 1.9693690027509416, 1.9692164148603166, 1.9691460473196847, 1.9691949571881975, 1.9692656653267997, 1.9694217954363142, 1.9696976797921317, 1.9699897084917342, 1.9702652522495814, 1.970449720110212, 1.9706734929765974], "val_accuracy": [0.0416666679084301, 0.05066666752099991, 0.0573333315551281, 0.06066666543483734, 0.06433333456516266, 0.0689999982714653, 0.07199999690055847, 0.07566666603088379, 0.0793333351612091, 0.0793333351612091, 0.08233333379030228, 0.08299999684095383, 0.08166666328907013, 0.07733333110809326, 0.07666666805744171, 0.07533333450555801, 0.07333333045244217]}}, {"genotype": [[0], [1, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 3, 1, 4, 4, 4, 2, 3, 0, 1, 6, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 2, 1, 1, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03371428698301315, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.302365942685328, 2.304080915803749, 2.3070215199523045, 2.309318671877106, 2.313657056827114, 2.315101350035571], "accuracy": [0.08638224750757217, 0.08426892012357712, 0.080042265355587, 0.07594769448041916, 0.0746268630027771, 0.08017434924840927], "val_loss": [1.9723903792245048, 1.9739321299961634, 1.975438458578927, 1.977403232029506, 1.9798242705208915, 1.982386793409075], "val_accuracy": [0.028333334252238274, 0.022333333268761635, 0.02133333310484886, 0.018666666001081467, 0.02033333294093609, 0.026333333924412727]}}]