[{"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [16, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 8, 1, 4, 6, 2, 5, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8191428780555725, "mapping_values": [1, 2, 2, 1, 1, 1, 17, 17, 11, 6, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, beta)))))))))))))), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.074204355545205, 1.376030970967567, 1.109646854147447, 0.8811663376058428, 0.8180745266148631, 0.7497738927756287, 0.737014842960797, 0.7052149307600275, 0.6961584514504678, 0.6897243762674459, 0.6568598573501666, 0.6292738333086627, 0.5992848779295162, 0.5986758072252492, 0.5750948134320145, 0.5662433670307462, 0.5533705322915033, 0.5504852579081173, 0.5347766848980963, 0.5182929444842098, 0.5208200329582311, 0.5071653037684674, 0.5048798008397145, 0.49706104369825455, 0.48536327719027106, 0.4739255456876572, 0.46293784986003955, 0.4601100419514278, 0.45217601258394785, 0.4468235540989919, 0.4400099477377771, 0.4287221994949228, 0.45442167834960995, 0.4237229070446479, 0.4220191124620502], "accuracy": [0.3129045069217682, 0.5247655510902405, 0.6009774208068848, 0.6762647032737732, 0.6955488324165344, 0.7147008180618286, 0.7209087014198303, 0.7276449799537659, 0.7375511527061462, 0.7392682433128357, 0.7433628439903259, 0.7631752490997314, 0.7680623531341553, 0.770439863204956, 0.7796856164932251, 0.7815347909927368, 0.7922335267066956, 0.78113853931427, 0.7997622489929199, 0.8016114234924316, 0.8000264167785645, 0.8095363974571228, 0.8063663840293884, 0.8125742673873901, 0.8146876096725464, 0.8271034359931946, 0.8297450542449951, 0.8271034359931946, 0.8304054737091064, 0.835160493850708, 0.8393871188163757, 0.8405758738517761, 0.8313300609588623, 0.8432175517082214, 0.8428213000297546], "val_loss": [1.597926378250122, 0.8578034128461566, 0.7214152302060809, 0.6543674298695156, 0.6234913212912423, 0.5640436070305961, 0.5963859558105469, 0.6272974865777152, 0.5557011706488473, 0.6414289815085275, 0.5092542171478271, 0.5022526809147426, 0.505733813558306, 0.4751700333186558, 0.4933605023792812, 0.48338457516261507, 0.44069710799625944, 0.47116107600075857, 0.42461895091193064, 0.4362908090863909, 0.4361741031919207, 0.4246463179588318, 0.4516448974609375, 0.43655318873269217, 0.4064575007983616, 0.4293566346168518, 0.43362912961414884, 0.414989846093314, 0.39999611037118094, 0.38801651341574533, 0.39491335834775654, 0.42920646497181486, 0.3867086001804897, 0.3905472585133144, 0.37468537262507845], "val_accuracy": [0.42233332991600037, 0.6203333139419556, 0.7059999704360962, 0.7116666436195374, 0.7056666612625122, 0.7446666955947876, 0.7283333539962769, 0.7096666693687439, 0.7490000128746033, 0.6996666789054871, 0.7723333239555359, 0.777999997138977, 0.7683333158493042, 0.7883333563804626, 0.7773333191871643, 0.7873333096504211, 0.8140000104904175, 0.8050000071525574, 0.8166666626930237, 0.8116666674613953, 0.8183333277702332, 0.8196666836738586, 0.8040000200271606, 0.8183333277702332, 0.8330000042915344, 0.8216666579246521, 0.8146666884422302, 0.8193333148956299, 0.8299999833106995, 0.8423333168029785, 0.831333339214325, 0.8230000138282776, 0.831333339214325, 0.8346666693687439, 0.840666651725769]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 3, 1, 4, 4, 9, 3, 3, 9, 6, 6, 3, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 3, 0, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [89, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8074285984039307, "mapping_values": [1, 2, 2, 1, 1, 1, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0744402113214004, 1.3744949535245925, 1.0637870113438053, 0.889286920583763, 0.8399538116810297, 0.7363773422423229, 0.7366514448256084, 0.7084058997432995, 0.6840427570402221, 0.6763760346258478, 0.6584426056061753, 0.6302826145400366, 0.6037135752767478, 0.5956643610472346, 0.5751708378849753, 0.5683236526318702, 0.5556729510082088, 0.5553825862057189, 0.5372349468393569, 0.5144196009639075, 0.5309137469348245, 0.5086161273345499, 0.5137760270903092, 0.4944891889790313, 0.48673169690588636, 0.47567451448960785, 0.47119713417684805, 0.4599772411141618, 0.4581976020458966, 0.4481561520804724, 0.4391016760727103, 0.43086822931446245, 0.4604163269490582, 0.42853197012957234, 0.42062797792882745, 0.4281322587403985, 0.4131690014732859, 0.406907000569714, 0.4059349821149523, 0.3984405976780307, 0.38452198416518185, 0.38647247325585204, 0.39306101254137704, 0.388943359966307, 0.37915643299764346], "accuracy": [0.3125082552433014, 0.5256901383399963, 0.6192048788070679, 0.6707172393798828, 0.6859067678451538, 0.7210407853126526, 0.7209087014198303, 0.7268524765968323, 0.7390040755271912, 0.7409853339195251, 0.7421740889549255, 0.7614582180976868, 0.7684586048126221, 0.7729493975639343, 0.7825914621353149, 0.78113853931427, 0.7959318161010742, 0.7810064554214478, 0.798309326171875, 0.8070268034934998, 0.7980451583862305, 0.8095363974571228, 0.8053097128868103, 0.8124422430992126, 0.8129705190658569, 0.8247259259223938, 0.8261788487434387, 0.8261788487434387, 0.8301413059234619, 0.8322546482086182, 0.8370096683502197, 0.8370096683502197, 0.8277638554573059, 0.8388587832450867, 0.842028796672821, 0.8343679904937744, 0.8433496356010437, 0.8543124794960022, 0.850350022315979, 0.8555012345314026, 0.8580108284950256, 0.852859616279602, 0.8553691506385803, 0.8529917001724243, 0.8605204224586487], "val_loss": [1.5972942965371268, 0.8330027886799404, 0.906113862991333, 0.6790182249886649, 0.6024609293256488, 0.5505992003849575, 0.6104522773197719, 0.5870758635657174, 0.5779654639107841, 0.6377928938184466, 0.5121252536773682, 0.5002171312059674, 0.507243173463004, 0.4794834681919643, 0.5128704990659442, 0.49023284230913433, 0.44379632813589914, 0.4698311431067331, 0.4289267659187317, 0.4491964067731585, 0.4335846560341971, 0.42391787256513325, 0.4455298185348511, 0.43993592262268066, 0.40718168020248413, 0.4438697780881609, 0.4304291435650417, 0.4268128531319754, 0.3982559953417097, 0.39002456835338045, 0.399261406489781, 0.44226997239249094, 0.396861127444676, 0.4003787040710449, 0.3729167580604553, 0.382217926638467, 0.37790703773498535, 0.40244282143456594, 0.35789650678634644, 0.3636852502822876, 0.3557164413588388, 0.3611527681350708, 0.3776387742587498, 0.36533992631094797, 0.36775583028793335], "val_accuracy": [0.42533332109451294, 0.6269999742507935, 0.5640000104904175, 0.6880000233650208, 0.7200000286102295, 0.7516666650772095, 0.7193333506584167, 0.7210000157356262, 0.7353333234786987, 0.6923333406448364, 0.7706666588783264, 0.7796666622161865, 0.7663333415985107, 0.7833333611488342, 0.7553333044052124, 0.7803333401679993, 0.8090000152587891, 0.79666668176651, 0.8100000023841858, 0.7976666688919067, 0.8140000104904175, 0.8183333277702332, 0.8119999766349792, 0.8090000152587891, 0.831333339214325, 0.8190000057220459, 0.8176666498184204, 0.8153333067893982, 0.8330000042915344, 0.8396666646003723, 0.8323333263397217, 0.8193333148956299, 0.8236666917800903, 0.8296666741371155, 0.8420000076293945, 0.8323333263397217, 0.8366666436195374, 0.8316666483879089, 0.8526666760444641, 0.8533333539962769, 0.8519999980926514, 0.8453333377838135, 0.8433333039283752, 0.8486666679382324, 0.8339999914169312]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [59, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.8002856969833374, "mapping_values": [1, 2, 2, 1, 1, 1, 26, 26, 15, 11, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad))), tf.math.add(beta, beta))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)))), beta)))), tf.math.add(beta, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.0743023897946204, 1.3753647295365228, 1.1021915934168038, 0.8884085471509485, 0.8205969636749834, 0.7378004980581689, 0.7348187092099727, 0.706054121519612, 0.6965013446195046, 0.6853489927674927, 0.6704073322919917, 0.6173084207561117, 0.5995363967923472, 0.5952019554638766, 0.5607311221838722, 0.5824613051565017, 0.5598376230785104, 0.5453119519490293, 0.5377404653495408, 0.5215301006823766, 0.525299047560913, 0.5109177588739446, 0.5036540668968984, 0.49493675631239836, 0.48570752452865584, 0.4726338145117545, 0.4680270454540638, 0.45588705577807515, 0.45761308328681194, 0.43295276844427494, 0.44015318209217086, 0.4467000452093775, 0.4435392377666589, 0.42069932938865967, 0.42277268227128273, 0.4231880982247137, 0.4154451089630573, 0.4070268321141213, 0.40248701342848614, 0.3954017509078589, 0.3856167676402845, 0.38733803807878225, 0.3954453474345413, 0.3872984792767042], "accuracy": [0.3127724230289459, 0.5243692994117737, 0.6050719618797302, 0.6717738509178162, 0.6944921612739563, 0.7207766771316528, 0.724739134311676, 0.7271166443824768, 0.7366266250610352, 0.737022876739502, 0.7374191284179688, 0.7716285586357117, 0.7708360552787781, 0.772288978099823, 0.7902522683143616, 0.7777044177055359, 0.7890635132789612, 0.791969358921051, 0.7981772422790527, 0.8012151718139648, 0.7994980812072754, 0.8079513907432556, 0.8075551390647888, 0.8132346868515015, 0.8175934553146362, 0.8297450542449951, 0.8248580098152161, 0.828820526599884, 0.83119797706604, 0.8378021121025085, 0.835160493850708, 0.8265751004219055, 0.835160493850708, 0.8450667262077332, 0.8430854678153992, 0.8407079577445984, 0.8412362933158875, 0.8533879518508911, 0.852331280708313, 0.8548408150672913, 0.8570862412452698, 0.8520671129226685, 0.8507462739944458, 0.8564258217811584], "val_loss": [1.598992075238909, 0.8395205395562308, 0.7636280911309379, 0.6442578860691616, 0.6036334378378732, 0.5630286761692592, 0.5972954205104283, 0.6302119663783482, 0.5624606779643467, 0.6682874304907662, 0.49980296407427105, 0.5083535058157784, 0.5120655979428973, 0.4701037236622402, 0.5313678639275687, 0.48932032925742014, 0.45155188015529085, 0.4690012420926775, 0.42377147504261564, 0.4301899586405073, 0.4364325829914638, 0.42482337781361174, 0.4451841967446463, 0.42958020312445505, 0.4063401903424944, 0.4283971701349531, 0.43320534910474506, 0.4139708195413862, 0.3952815192086356, 0.3854071923664638, 0.3809431365558079, 0.41486430168151855, 0.3858851534979684, 0.40793222188949585, 0.36947275911058697, 0.389869144984654, 0.38200260060174124, 0.40025101389203754, 0.3610579286302839, 0.37449145317077637, 0.3627995082310268, 0.360310469354902, 0.3781023451260158, 0.36125050272260395], "val_accuracy": [0.42266666889190674, 0.6269999742507935, 0.7043333053588867, 0.7113333344459534, 0.7206666469573975, 0.7436666488647461, 0.7260000109672546, 0.7059999704360962, 0.7459999918937683, 0.6796666383743286, 0.7749999761581421, 0.7710000276565552, 0.7480000257492065, 0.800000011920929, 0.7603333592414856, 0.7806666493415833, 0.8009999990463257, 0.7916666865348816, 0.8186666369438171, 0.8166666626930237, 0.8196666836738586, 0.8196666836738586, 0.8080000281333923, 0.8213333487510681, 0.8306666612625122, 0.8253333568572998, 0.812666654586792, 0.8176666498184204, 0.8306666612625122, 0.8399999737739563, 0.8423333168029785, 0.8109999895095825, 0.828000009059906, 0.8270000219345093, 0.8460000157356262, 0.8253333568572998, 0.8320000171661377, 0.8323333263397217, 0.8539999723434448, 0.8493333458900452, 0.8423333168029785, 0.8489999771118164, 0.8420000076293945, 0.8500000238418579]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [2, 6, 1, 3, 0, 2, 4, 3, 0, 4, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 1, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7905714511871338, "mapping_values": [1, 2, 2, 1, 1, 1, 53, 53, 31, 22, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)))), grad))))), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, alpha)), tf.math.sqrt(grad)))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.square(alpha)), tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(grad))), tf.math.add(beta, grad)), tf.math.add(beta, alpha))))), tf.math.add(beta, beta)), tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, beta))))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9710470295506635, 1.4547604201980286, 1.0705904938667332, 0.8989806268760289, 0.817090424469764, 0.7647273316516884, 0.73096664033593, 0.7032152122636245, 0.6921974948573311, 0.6692827119173517, 0.6602164378507561, 0.6653795898110245, 0.586919651260119, 0.5879602552231796, 0.5883487783497382, 0.5720402963362067, 0.5523012443902612, 0.5341781190814375, 0.5412612045760703, 0.5397544459360718, 0.5137892962604261, 0.5031629296467682, 0.5161115721452663], "accuracy": [0.34566107392311096, 0.4748381972312927, 0.6091665625572205, 0.6617355942726135, 0.6942279934883118, 0.7125874757766724, 0.7259278893470764, 0.7353057861328125, 0.7321357727050781, 0.7446836829185486, 0.7441553473472595, 0.7471932172775269, 0.7794214487075806, 0.7786290049552917, 0.7786290049552917, 0.7848368883132935, 0.7905164361000061, 0.802271842956543, 0.7940827012062073, 0.791969358921051, 0.8039889335632324, 0.8113855719566345, 0.8006868362426758], "val_loss": [1.5433434418269567, 0.8508655684334892, 0.7755753142493111, 0.6785855974469867, 0.7158939497811454, 0.6153375591550555, 0.5973760911396572, 0.6227764231818063, 0.5268819161823818, 0.511337433542524, 0.5304055554526192, 0.5011000292641776, 0.4657109294618879, 0.4773433378764561, 0.47644077028547016, 0.45738186155046734, 0.4807853698730469, 0.4436759778431484, 0.46393873010362896, 0.4371307747704642, 0.44942143985203337, 0.44204861777169363, 0.43690812587738037], "val_accuracy": [0.3370000123977661, 0.6456666588783264, 0.656000018119812, 0.6940000057220459, 0.6823333501815796, 0.7053333520889282, 0.7253333330154419, 0.7120000123977661, 0.7673333287239075, 0.7620000243186951, 0.7613333463668823, 0.7773333191871643, 0.7960000038146973, 0.7860000133514404, 0.7960000038146973, 0.7946666479110718, 0.7850000262260437, 0.8050000071525574, 0.7900000214576721, 0.7983333468437195, 0.8006666898727417, 0.8009999990463257, 0.8016666769981384]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7882857322692871, "mapping_values": [1, 2, 2, 1, 1, 1, 31, 31, 18, 13, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad))), tf.math.add(beta, grad))))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(alpha, tf.math.negative(tf.math.add(beta, beta)))))))))))), grad), grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9709547165913621, 1.4517503159944611, 1.075372498048972, 0.9091067008212604, 0.8495097977452826, 0.7470533092653967, 0.7170508813943058, 0.720456048765549, 0.6877274386571965, 0.6558604691290285, 0.6648886155978233, 0.6588607847163107, 0.585803822015554, 0.5943160716253831, 0.5857231754510945, 0.5750963842045315, 0.5567500855802718, 0.5384675531874811, 0.5382572735431345, 0.5341458421861334, 0.5166787847339233, 0.5036541195656441, 0.5166539076832323], "accuracy": [0.34566107392311096, 0.4772156774997711, 0.6083740592002869, 0.6650376319885254, 0.6765288710594177, 0.7148329019546509, 0.7279091477394104, 0.7284374833106995, 0.733588695526123, 0.7494386434555054, 0.7466648817062378, 0.7526086568832397, 0.7799497842788696, 0.7761194109916687, 0.7766477465629578, 0.7843085527420044, 0.7911768555641174, 0.7971205711364746, 0.7952714562416077, 0.7926297783851624, 0.8018755912780762, 0.8124422430992126, 0.8033285140991211], "val_loss": [1.5427735533033098, 0.8378098862511771, 0.8257493802479335, 0.7143452167510986, 0.6196205275399345, 0.5789384841918945, 0.6068923473358154, 0.5724265405109951, 0.5340150935309274, 0.5575039216450283, 0.5274941410337176, 0.49802461692265104, 0.46331329005105154, 0.4854638065610613, 0.47541150024959017, 0.4559599331447056, 0.4646185636520386, 0.44900153364454, 0.44833855969565256, 0.4366635765348162, 0.4526677812848772, 0.44714726720537457, 0.4345859033720834], "val_accuracy": [0.3356666564941406, 0.6570000052452087, 0.6543333530426025, 0.6740000247955322, 0.7116666436195374, 0.7333333492279053, 0.718999981880188, 0.7179999947547913, 0.7506666779518127, 0.7409999966621399, 0.7620000243186951, 0.7773333191871643, 0.7990000247955322, 0.777999997138977, 0.793666660785675, 0.7953333258628845, 0.7913333177566528, 0.8056666851043701, 0.7963333129882812, 0.8023333549499512, 0.8016666769981384, 0.8029999732971191, 0.8050000071525574]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [43, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 4, 0, 2, 9, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7879999876022339, "mapping_values": [1, 2, 2, 1, 1, 1, 16, 16, 11, 5, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9710617280198504, 1.4544593354005855, 1.0689211111058647, 0.9053530424750634, 0.8236517417763108, 0.7818424911342198, 0.7246075930801349, 0.6853819352965455, 0.7198515114389343, 0.635215642217317, 0.6695231762009212, 0.6622908505796993, 0.5869730982199762, 0.5974000163160814, 0.5839868667512726, 0.5715216656229389, 0.5613957772149764, 0.5331056397415628], "accuracy": [0.34566107392311096, 0.47430986166000366, 0.6110157370567322, 0.6668868064880371, 0.6915863156318665, 0.7020208835601807, 0.7294940948486328, 0.7445515990257263, 0.718399167060852, 0.7581561207771301, 0.7450799345970154, 0.7491744756698608, 0.7778365015983582, 0.7733456492424011, 0.7790252566337585, 0.7865539789199829, 0.7866860628128052, 0.8000264167785645], "val_loss": [1.5434478691646032, 0.8612330641065326, 0.7855103526796613, 0.6517471075057983, 0.6973248549870082, 0.6476484537124634, 0.6020572696413312, 0.6163331270217896, 0.5201249633516584, 0.5019079957689557, 0.5253564630235944, 0.49643731117248535, 0.46121769292013987, 0.4786039079938616, 0.4848886557987758, 0.46058504922049387, 0.4612168414252145, 0.45132873739515034], "val_accuracy": [0.3370000123977661, 0.6303333044052124, 0.6613333225250244, 0.7310000061988831, 0.6816666722297668, 0.6983333230018616, 0.7283333539962769, 0.7096666693687439, 0.7720000147819519, 0.7706666588783264, 0.7609999775886536, 0.7773333191871643, 0.8013333082199097, 0.7823333144187927, 0.7916666865348816, 0.7896666526794434, 0.7910000085830688, 0.800000011920929]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 1, 4, 4, 2, 2, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 3, 2, 0, 1, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7785714268684387, "mapping_values": [1, 2, 2, 1, 1, 1, 22, 22, 13, 9, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))), tf.math.add(tf.math.square(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)))), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.9791841528686818, 1.357335150879545, 1.185812049900237, 0.8749998444185721, 0.8354788827480436, 0.7684728385529513, 0.7490327961771417, 0.7209169329385778, 0.6773775583717407, 0.6638351228841465, 0.6446332104564139, 0.64019670148394, 0.6105001434878651, 0.6072699478935052, 0.582220553107911, 0.5839592135184004], "accuracy": [0.3389248549938202, 0.5344076156616211, 0.5938449501991272, 0.666358470916748, 0.6885483860969543, 0.713379979133606, 0.7187954187393188, 0.7272487282752991, 0.7357020378112793, 0.7448157668113708, 0.7584202885627747, 0.7581561207771301, 0.7668735980987549, 0.7668735980987549, 0.7795535326004028, 0.7790252566337585], "val_loss": [1.509697641645159, 1.1166009902954102, 0.7360989195959908, 0.6082479102270943, 0.601386547088623, 0.6173005785260882, 0.57317544732775, 0.5447333199637276, 0.5659511259623936, 0.5120229721069336, 0.49874445370265413, 0.5123928955623082, 0.5072061164038522, 0.49472861630576, 0.48911300727299284, 0.48142426354544504], "val_accuracy": [0.4313333332538605, 0.5183333158493042, 0.6673333048820496, 0.7286666631698608, 0.7229999899864197, 0.6990000009536743, 0.7366666793823242, 0.7463333606719971, 0.7400000095367432, 0.7706666588783264, 0.7846666574478149, 0.7630000114440918, 0.777999997138977, 0.7756666541099548, 0.7766666412353516, 0.7829999923706055]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [4, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 56, 61], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 2, 2, 2, 4, 3, 4, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [12, 9, 76, 58]], "fitness": -0.44914284348487854, "mapping_values": [1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3022742243711236, 2.3017163451132663, 2.29991351992872, 2.2997234679798897, 2.2983994771775755, 2.296468828049129, 2.295239157286838, 2.294674770029985, 2.2928221512936706, 2.293328412283586, 2.2935843054865015, 2.292585619342105, 2.289403150740112, 2.2886936879665027, 2.2874316183520254, 2.287613155032193, 2.285118282746645, 2.2841949865345974, 2.282335169264008, 2.283284201015492, 2.2809241507362303, 2.2806720461875, 2.2782684572620666, 2.2774933726323705, 2.2771426931647514, 2.277021121922076, 2.2759973517561383, 2.2763661735203633, 2.273165334973117, 2.2721246543136555, 2.271983640257866, 2.2705169400802268, 2.2685917494177676, 2.2669775388685154, 2.267765327262652, 2.264879553152066, 2.265518840655769, 2.2617931495080015, 2.261406019520939, 2.2614234954043937, 2.26077891309358, 2.2592073179050254, 2.2569446215429925, 2.25689500049908, 2.255262843118037, 2.2545047231464337, 2.2538481909664094, 2.2501971354148864, 2.249799407311025, 2.250927259956353, 2.2459094644679274, 2.2467878626920545, 2.246210203981985, 2.244588593072454, 2.2428570814955235, 2.24445533128919, 2.239374486919187, 2.2381754432923096, 2.236339972491876, 2.2364932226388365, 2.2375769328290067, 2.2327290235682407, 2.2318515947639446, 2.2308129566755937, 2.2279867908312516, 2.228926318590242, 2.2268015865353137, 2.2260590281705057, 2.2222142412898376, 2.2239148676308815, 2.221298231377562, 2.218693533121335, 2.218176996041881, 2.2165382679632044, 2.2144417961779648, 2.2129496767252914, 2.209457696468256, 2.21036851807608, 2.206509550848122, 2.2050309600358973, 2.202820490096554, 2.2015113687597134, 2.2039409489947195, 2.1991073682150426, 2.1952979122847616, 2.194304009690623, 2.1926114271975403, 2.191892638954079, 2.1909184654579974, 2.1882450001161993, 2.1879264660609663, 2.185802419534244, 2.1829662012496502, 2.1804887170505687, 2.1769446931132834, 2.1745146389068033, 2.175149619099077, 2.1740574627945435, 2.1695383150249095, 2.165609134485882], "accuracy": [0.09166556596755981, 0.09589222073554993, 0.09615638852119446, 0.09906221181154251, 0.0952318087220192, 0.10540219396352768, 0.10632677376270294, 0.11279883980751038, 0.11676132678985596, 0.10711926966905594, 0.11055342853069305, 0.11517632752656937, 0.12296922504901886, 0.12600713968276978, 0.12957337498664856, 0.12455421686172485, 0.13353586196899414, 0.1476687341928482, 0.14053626358509064, 0.13842293620109558, 0.1418570876121521, 0.14674416184425354, 0.15176330506801605, 0.1608770340681076, 0.16351869702339172, 0.15440496802330017, 0.15836745500564575, 0.1592920422554016, 0.1706511676311493, 0.17263241112232208, 0.17091533541679382, 0.17540615797042847, 0.1826707124710083, 0.18650111556053162, 0.18095363676548004, 0.1888786107301712, 0.18623696267604828, 0.2024831622838974, 0.19614318013191223, 0.19812442362308502, 0.19931316375732422, 0.20697398483753204, 0.21371020376682281, 0.20737022161483765, 0.21925769746303558, 0.2122572958469391, 0.2207106053829193, 0.23154141008853912, 0.22639016807079315, 0.22374852001667023, 0.23312640190124512, 0.23418307304382324, 0.23259806632995605, 0.2386738806962967, 0.23854179680347443, 0.2351076453924179, 0.240919291973114, 0.25042927265167236, 0.2587504982948303, 0.24844802916049957, 0.24805177748203278, 0.2533350884914398, 0.258090078830719, 0.26178839802742004, 0.2654867172241211, 0.2665433883666992, 0.26839256286621094, 0.26495838165283203, 0.2759212851524353, 0.2709021270275116, 0.2797516882419586, 0.2876766622066498, 0.282129168510437, 0.280940443277359, 0.2810725271701813, 0.2953374683856964, 0.2921674847602844, 0.2875445783138275, 0.2985074520111084, 0.30445119738578796, 0.3023378551006317, 0.3059041202068329, 0.2895258367061615, 0.3085457682609558, 0.31158366799354553, 0.3097345232963562, 0.3140932619571686, 0.31739532947540283, 0.3151499032974243, 0.31422534584999084, 0.3163386583328247, 0.3139611780643463, 0.3152819871902466, 0.3225465714931488, 0.32360321283340454, 0.33760401606559753, 0.32201823592185974, 0.3335094451904297, 0.33126401901245117, 0.3477744162082672], "val_loss": [1.9701925005231584, 1.969203199659075, 1.9682248660496302, 1.967230933053153, 1.966247286115374, 1.9652655465262276, 1.9642936842782157, 1.9633096967424666, 1.96232727595738, 1.961362566266741, 1.960402352469308, 1.9594264030456543, 1.9584551538739885, 1.9574855395725794, 1.95649630682809, 1.9555144309997559, 1.9545527185712541, 1.9535835811070033, 1.952617849622454, 1.9516406059265137, 1.950664792742048, 1.949674333844866, 1.9486969539097376, 1.9477067674909319, 1.9467169897896903, 1.9457306861877441, 1.9447429520743233, 1.9437544005257743, 1.9427596500941686, 1.941762924194336, 1.9407520294189453, 1.939748900277274, 1.9387322153363908, 1.9377037457057409, 1.9366780008588518, 1.9356378827776228, 1.9345854350498743, 1.9335336003984724, 1.9324680737086706, 1.9314040456499373, 1.930337769644601, 1.9292691775730677, 1.9281839643205916, 1.9270975930350167, 1.9259899003165108, 1.9248805727277483, 1.9237767628261022, 1.92264039175851, 1.9215030670166016, 1.920360905783517, 1.9191896574837821, 1.9180190222603934, 1.9168384415762765, 1.9156475748334612, 1.9144338880266463, 1.9132276943751745, 1.911990029471261, 1.910745688847133, 1.9094763483319963, 1.9081988334655762, 1.9069260188511439, 1.9056262288774763, 1.9043137005397253, 1.902989387512207, 1.9016569001334054, 1.9003026144845145, 1.898935317993164, 1.8975468363080705, 1.896148613521031, 1.8947502544948034, 1.89332948412214, 1.891878264290946, 1.8904403959001814, 1.8889683314732142, 1.8874822344098772, 1.8859789030892509, 1.8844333376203264, 1.8829006467546736, 1.8813056945800781, 1.879699979509626, 1.8780668122427804, 1.8764189992632185, 1.8747828347342355, 1.8731077739170618, 1.8713904108319963, 1.8696637153625488, 1.8679113388061523, 1.8661400250026159, 1.864358357020787, 1.8625525065830775, 1.8607376643589564, 1.8588848795209612, 1.8570024626595634, 1.8550986562456404, 1.8531561579023088, 1.8511731965201241, 1.8491888727460588, 1.8471764155796595, 1.8451407977512904, 1.8430561338152205], "val_accuracy": [0.041333332657814026, 0.044333335012197495, 0.05299999937415123, 0.05766666680574417, 0.06566666811704636, 0.07400000095367432, 0.08433333039283752, 0.09099999815225601, 0.10166666656732559, 0.10833333432674408, 0.11733333021402359, 0.1263333261013031, 0.1366666704416275, 0.14900000393390656, 0.1576666682958603, 0.16966666281223297, 0.17933332920074463, 0.18833333253860474, 0.19566667079925537, 0.20366667211055756, 0.210999995470047, 0.21799999475479126, 0.2266666740179062, 0.23600000143051147, 0.2409999966621399, 0.24766667187213898, 0.25966668128967285, 0.265666663646698, 0.27300000190734863, 0.281333327293396, 0.28833332657814026, 0.2953333258628845, 0.3009999990463257, 0.3050000071525574, 0.3089999854564667, 0.31299999356269836, 0.3190000057220459, 0.3230000138282776, 0.3283333480358124, 0.3316666781902313, 0.33500000834465027, 0.3400000035762787, 0.3440000116825104, 0.3476666808128357, 0.34933334589004517, 0.3503333330154419, 0.3556666672229767, 0.3580000102519989, 0.36033332347869873, 0.3619999885559082, 0.36399999260902405, 0.36633333563804626, 0.36800000071525574, 0.3723333477973938, 0.3733333349227905, 0.375, 0.3779999911785126, 0.38066667318344116, 0.38199999928474426, 0.38333332538604736, 0.3843333423137665, 0.3856666684150696, 0.3880000114440918, 0.3889999985694885, 0.390666663646698, 0.3946666717529297, 0.3973333239555359, 0.4009999930858612, 0.40299999713897705, 0.4059999883174896, 0.40966665744781494, 0.41233333945274353, 0.41600000858306885, 0.41866666078567505, 0.4206666648387909, 0.42233332991600037, 0.4233333468437195, 0.42500001192092896, 0.4269999861717224, 0.42899999022483826, 0.4300000071525574, 0.4309999942779541, 0.43166667222976685, 0.4339999854564667, 0.43433332443237305, 0.43566668033599854, 0.43666666746139526, 0.43833333253860474, 0.4403333365917206, 0.4416666626930237, 0.4426666796207428, 0.4440000057220459, 0.4449999928474426, 0.44733333587646484, 0.4480000138282776, 0.4493333399295807, 0.4503333270549774, 0.4519999921321869, 0.4543333351612091, 0.4560000002384186]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [4, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [0, 9, 1, 4, 2, 2, 4, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 5, 8, 6, 6, 8, 0, 1, 4, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 2, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 1, 2, 2, 1, 2, 1, 1, 2, 0, 3, 2, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [27, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [61, 9, 76, 58]], "fitness": -0.15285713970661163, "mapping_values": [1, 3, 3, 1, 2, 2, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.5638295459772507, 2.3037456395430507, 2.241365843917621, 2.3039168079909302, 2.3032031079419397, 2.302786333685963, 2.3036208055148806], "accuracy": [0.20895522832870483, 0.10091137140989304, 0.1784440577030182, 0.09879804402589798, 0.09668471664190292, 0.09879804402589798, 0.0882314071059227], "val_loss": [1.9761248997279577, 1.9636096273149763, 1.974682399204799, 1.97388642174857, 1.9736676216125488, 1.9736550194876534, 1.973689147404262], "val_accuracy": [0.09966666996479034, 0.1653333306312561, 0.10233332961797714, 0.09666666388511658, 0.09833333641290665, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 2, 4, 0, 2, 3, 3, 4, 2, 6, 6, 2, 6, 8, 3, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 0, 3, 3, 0, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 0, 3, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 34, 34, 18, 16, 3, 1, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, alpha), grad), tf.math.add(beta, grad)), beta), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad)))))), tf.math.divide_no_nan(alpha, tf.math.sqrt(alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), beta), tf.math.add(beta, tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.multiply(sigma, sigma)), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 0, 1, 4, 0, 3, 4, 3, 0, 5, 2, 6, 1, 2, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 2, 3, 3, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [7, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [44, 95, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 62, 62, 37, 25, 1, 1, 0, 0, 0, 0, 4, 3, 1, 2], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.square(beta))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.square(alpha))), beta))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, beta)), grad)), tf.math.square(alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), grad))))), tf.math.multiply(alpha, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [18733911.731567916, 362474281.31131953, 1681810582.3336415, 4716808994.455687, 9986980026.513803, 18266648921.706512], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09760929644107819, 0.09642054885625839, 0.09959053993225098, 0.10394927859306335], "val_loss": [71321058.28571428, 569874011.4285715, 1922549028.5714285, 4556239872.0, 8897835300.571428, 15374215460.571428], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [43, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [2, 0, 1, 2, 2, 2, 4, 3, 4, 2, 5, 6, 1, 6, 4, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1], [5, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 38, 38, 21, 17, 0, 1, 1, 0, 1, 0, 3, 3, 0, 1], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(alpha))))), tf.math.square(alpha))), beta)), grad))))))), tf.math.add(beta, grad)), grad)), tf.math.square(tf.math.add(beta, alpha))))))))), tf.math.divide_no_nan(beta, grad)))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3027324894746504, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [5, 8, 1, 4, 0, 2, 4, 3, 0, 2, 5, 6, 1, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 3, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [7, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [9, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [60, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 22, 22, 13, 9, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad)))), tf.math.add(beta, beta)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), alpha)), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027324894746504, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [14, 80, 61], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 9, 1, 4, 2, 0, 4, 3, 0, 1, 9, 6, 1, 2, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 2, 3, 3, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0], [3, 2, 3, 4, 6, 7, 2, 5, 6, 9, 6, 4, 4, 7, 2, 1, 4, 4, 6, 9, 6, 8, 0], [3, 3, 2, 1, 0, 0, 2, 2, 2, 0, 0, 0, 1, 3, 3, 1, 1, 1], [91, 74, 76, 58, 12, 83, 33]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 15, 15, 9, 6, 1, 1, 1, 1, 0, 1, 40, 23, 17, 7], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha)))), tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.pow(sigma, tf.math.divide_no_nan(tf.math.add(sigma, beta), alpha)), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.pow(beta, tf.math.divide_no_nan(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.math.negative(sigma)))), sigma)))), alpha), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 1, 4, 0, 3, 4, 3, 0, 5, 5, 6, 1, 2, 8, 6, 5, 0, 1, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [7, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 32, 32, 20, 12, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, grad))), grad))))), tf.math.multiply(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [63, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0], [2, 0, 1, 4, 9, 2, 4, 3, 0, 0, 5, 6, 1, 6, 8, 6, 9, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [1, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 8, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 29, 29, 20, 9, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad))))))))), tf.math.add(beta, grad))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(beta, tf.math.negative(alpha))))))), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [14, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 8, 1, 4, 2, 2, 9, 5, 0, 2, 6, 1, 1, 6, 8, 4, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 1, 3, 1, 3, 2, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [12, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 27, 27, 16, 11, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad))), tf.math.add(beta, grad))))))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)))), tf.math.sqrt(beta)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.3031506584368016, 2.305178068222985, 2.306195528783409, 2.3100501954390182, 2.3125113225364258, 2.3143802754804366, 2.3187219377333035, 2.3253927745713283, 2.3318753843026596, 2.3450832548016773, 2.382144549046966, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09008057415485382, 0.09126931428909302, 0.08638224750757217, 0.07872143387794495, 0.07528728246688843, 0.07885351777076721, 0.07370228320360184, 0.07330603897571564, 0.08057060092687607, 0.07409853488206863, 0.07766477018594742, 0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9721549579075404, 1.973599570138114, 1.975212914603097, 1.977506501334054, 1.9797465460641044, 1.9822517122541154, 1.9854096003941126, 1.9896703447614397, 1.9961325781685966, 2.009108543395996, 2.0689494950430736, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.028999999165534973, 0.02566666714847088, 0.022333333268761635, 0.02199999988079071, 0.027666667476296425, 0.03266666829586029, 0.04533333331346512, 0.06566666811704636, 0.08166666328907013, 0.0976666659116745, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [43, 80, 61], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 1, 4, 2, 2, 8, 5, 0, 2, 5, 1, 1, 6, 8, 4, 4, 0, 3, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 3, 3, 1, 1, 0, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [6, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.043714284896850586, "mapping_values": [1, 2, 2, 1, 1, 1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, beta)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.0209180477405778e+22, 1.1472593016583908e+22, 1.16153425813153e+22, 1.1755556013305642e+22, 1.1618726274582777e+22, 1.1560964642405068e+22], "accuracy": [0.07198520749807358, 0.07357019931077957, 0.07396645098924637, 0.07053229212760925, 0.07740060985088348, 0.07924976944923401], "val_loss": [6.959876214094403e+21, 6.959876214094403e+21, 6.959876214094403e+21, 6.959876214094403e+21, 6.959876214094403e+21, 6.959876214094403e+21], "val_accuracy": [0.04633333161473274, 0.04633333161473274, 0.04633333161473274, 0.04633333161473274, 0.04633333161473274, 0.04633333161473274]}}, {"genotype": [[0], [0, 1, 1], [0, 0, 1], [0, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [1, 80, 61], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 0, 1, 4, 9, 3, 4, 3, 6, 5, 5, 6, 1, 2, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 2, 1, 3, 1, 1, 2, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [95, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.302714286368867, 2.3032229727978217, 2.3024699382494784, 2.3033844628243982, 2.303095551246287, 2.3022178234346726], "accuracy": [0.09074098616838455, 0.09259014576673508, 0.09206181764602661, 0.08994849026203156, 0.08506141602993011, 0.09100515395402908], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1], [0, 1, 1], [6, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [4, 80, 61], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 3, 1, 4, 4, 2, 3, 3, 0, 6, 0, 6, 9, 6, 8, 6, 4, 0, 5, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 2, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 5, 1, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [10, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [7, 1], [52], [0, 0, 1, 1, 1, 0, 1, 1, 1], [8, 8, 1, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 3, 3, 1, 2, 2, 31, 31, 18, 13, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))), tf.math.add(beta, grad))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(grad)))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.sqrt(sigma))", "other_info": {"loss": [2.302714286368867, 2.3032229727978217, 2.3024699382494784, 2.3033844628243982, 2.303095551246287, 2.3022178234346726], "accuracy": [0.09074098616838455, 0.09259014576673508, 0.09206181764602661, 0.08994849026203156, 0.08506141602993011, 0.09100515395402908], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]