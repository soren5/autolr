[{"genotype": [[0], [0, 1, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 4, 0, 4, 8, 9, 3, 1, 2, 5, 3, 9, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.795714259147644, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 13, 5, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.square(grad))), tf.math.add(beta, grad))), tf.math.multiply(grad, tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.991870922608351, 1.4127619809572802, 1.0288169397386373, 0.9272359617634094, 0.8186139685524106, 0.760554037656546, 0.7473549891094474, 0.7027095946118092, 0.6730031106985634, 0.6694415716085105, 0.6451742140498254, 0.6162480321684376, 0.5940254693726633, 0.6087447364710389, 0.5861884318936723, 0.5816142898524804, 0.5585480579579148], "accuracy": [0.34288734197616577, 0.5105006098747253, 0.6198652982711792, 0.655527651309967, 0.6992471218109131, 0.7168141603469849, 0.7181349992752075, 0.7331924438476562, 0.746268630027771, 0.7473253011703491, 0.7508915662765503, 0.7611940503120422, 0.7749306559562683, 0.7663452625274658, 0.7773081660270691, 0.7750627398490906, 0.7932901978492737], "val_loss": [1.5451171057564872, 1.012413740158081, 0.7567538363592965, 0.738422087260655, 0.5843193871634347, 0.6632905006408691, 0.5553070987973895, 0.5381039040429252, 0.5120358807700021, 0.5216467550822667, 0.5082517862319946, 0.4811159542628697, 0.47574147156306673, 0.46162872655051096, 0.47545342785971506, 0.4754623515265329, 0.4571690048490252], "val_accuracy": [0.500333309173584, 0.5556666851043701, 0.6703333258628845, 0.6669999957084656, 0.7350000143051147, 0.7116666436195374, 0.7563333511352539, 0.7643333077430725, 0.7736666798591614, 0.7643333077430725, 0.7746666669845581, 0.7933333516120911, 0.7829999923706055, 0.7906666398048401, 0.7933333516120911, 0.7893333435058594, 0.7919999957084656]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 4, 3, 0, 2, 5, 3, 1, 2, 2, 6, 6, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.7857142686843872, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 21, 14, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))))), grad)))))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.sqrt(alpha))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2833145923460827, 2.2308962650271362, 2.1468532165091005, 2.0039868278589075, 1.8020514132655008, 1.5728468078238664, 1.3887461491422157, 1.261705392765221, 1.150239432524098, 1.0951662217904674, 1.04100464592048, 1.0022483372401725, 0.9623540523675423, 0.9372877716278089, 0.9204062942295909, 0.8860925097648793, 0.8688769323352526, 0.8592464553287961, 0.8297626911578256, 0.8237003829689893, 0.8133138106908812, 0.8031662364897868, 0.7899929525562172, 0.775362323681755, 0.7754515457257241, 0.7698322526924583, 0.744614356615288, 0.7540134397228208, 0.7449942104426893, 0.7362430681878108, 0.7287922116192561, 0.7172987228686295, 0.7226754639520622, 0.7103693723962008, 0.7046040311827715, 0.7065071773850261, 0.6929304199510987, 0.6907339930660327, 0.6911461147980494, 0.6881773656212249, 0.6831620699693939, 0.6740541091101943, 0.6745573279407628, 0.6730277366279815, 0.6610298740896866, 0.6682787990651945, 0.6703165026467474, 0.6476566150691988, 0.646804501934452, 0.6444561928490984, 0.6406388478964988, 0.6425483702763023, 0.6431358635953043, 0.6393897681660766, 0.6319810666774699, 0.6364162792272697, 0.6177534724522606, 0.6210860733767983, 0.6245737414176769, 0.6200161276948828, 0.6313841506128283, 0.6154483822295537, 0.6065961588186406, 0.6158650394018851, 0.6115778585576803, 0.6129846449824782, 0.6013328406977978, 0.6093323851431586, 0.6000342291926569, 0.609687506939993], "accuracy": [0.14330999553203583, 0.2583542466163635, 0.35068023204803467, 0.4099854826927185, 0.4527803361415863, 0.5036323070526123, 0.5375775694847107, 0.5705983638763428, 0.6013736724853516, 0.6193369626998901, 0.6408664584159851, 0.6478668451309204, 0.6573768258094788, 0.6674151420593262, 0.6705851554870605, 0.6857746839523315, 0.6876237988471985, 0.6906617283821106, 0.7040021419525146, 0.7063795924186707, 0.707040011882782, 0.7066437602043152, 0.7112666964530945, 0.7140403985977173, 0.7180029153823853, 0.7211728692054749, 0.7263241410255432, 0.7224937081336975, 0.7265883088111877, 0.7331924438476562, 0.7326641082763672, 0.7384757399559021, 0.7338528633117676, 0.7375511527061462, 0.7405890822410583, 0.7412495017051697, 0.7473253011703491, 0.7409853339195251, 0.7461365461349487, 0.7395324110984802, 0.7450799345970154, 0.7506273984909058, 0.7553823590278625, 0.7511557340621948, 0.7518161535263062, 0.7565711140632629, 0.7515519857406616, 0.7618544697761536, 0.7656848430633545, 0.7640998363494873, 0.763967752456665, 0.7650244235992432, 0.7609298825263977, 0.7640998363494873, 0.7668735980987549, 0.7623828053474426, 0.7726852297782898, 0.767401933670044, 0.7676661014556885, 0.7729493975639343, 0.7643640041351318, 0.7726852297782898, 0.7757231593132019, 0.7737419009208679, 0.7711002230644226, 0.7683265209197998, 0.7786290049552917, 0.7792893648147583, 0.7770439982414246, 0.7792893648147583], "val_loss": [1.9268497739519392, 1.8649515424455916, 1.7578038488115584, 1.5795182841164725, 1.3472447395324707, 1.1304659162248885, 0.9798364639282227, 0.8806684357779366, 0.8122127907616752, 0.7616842985153198, 0.7267338718686785, 0.7014216354915074, 0.6808926718575614, 0.6653477805001395, 0.6482684782573155, 0.6323666061673846, 0.6231573138918195, 0.6135016339165824, 0.6041637148175921, 0.5960349185126168, 0.5882300649370465, 0.5812005996704102, 0.575054236820766, 0.5722241231373378, 0.5646535158157349, 0.5592683383396694, 0.5550536257880074, 0.5521919216428485, 0.5496635266712734, 0.5434919595718384, 0.5402830839157104, 0.5337524924959455, 0.5318137747900826, 0.5281189169202533, 0.5287022931235177, 0.5291754007339478, 0.5189770289829799, 0.5161330529621669, 0.5131159680230277, 0.508954610143389, 0.5078800065176827, 0.5096105337142944, 0.5049422809055873, 0.5031547205788749, 0.5060136318206787, 0.504962648664202, 0.5060182298932757, 0.4983915942055838, 0.4959002903529576, 0.4957503250667027, 0.4893227815628052, 0.49349331855773926, 0.4889413458960397, 0.48618926320757183, 0.4831691639763968, 0.4817438636507307, 0.47914821760995047, 0.48018481050218853, 0.47856361525399344, 0.47785242966243197, 0.4764652763094221, 0.47429520743233816, 0.47160892827170237, 0.4752533435821533, 0.4681110552379063, 0.4693141494478498, 0.4668126787458147, 0.4687662976128714, 0.4632234403065273, 0.4642012119293213], "val_accuracy": [0.3540000021457672, 0.44866666197776794, 0.503333330154419, 0.5503333210945129, 0.5706666707992554, 0.6110000014305115, 0.6466666460037231, 0.675000011920929, 0.6830000281333923, 0.7013333439826965, 0.7083333134651184, 0.7200000286102295, 0.718999981880188, 0.7239999771118164, 0.7296666502952576, 0.7333333492279053, 0.734333336353302, 0.7413333058357239, 0.7400000095367432, 0.7416666746139526, 0.7519999742507935, 0.7426666617393494, 0.7506666779518127, 0.7509999871253967, 0.7516666650772095, 0.753000020980835, 0.7566666603088379, 0.7549999952316284, 0.7599999904632568, 0.7613333463668823, 0.7643333077430725, 0.7636666893959045, 0.7639999985694885, 0.7670000195503235, 0.768666684627533, 0.7673333287239075, 0.7710000276565552, 0.7643333077430725, 0.7713333368301392, 0.7743333578109741, 0.7760000228881836, 0.7693333625793457, 0.7730000019073486, 0.7753333449363708, 0.7760000228881836, 0.7799999713897705, 0.7770000100135803, 0.7753333449363708, 0.7726666927337646, 0.7803333401679993, 0.781000018119812, 0.7776666879653931, 0.7773333191871643, 0.7883333563804626, 0.7860000133514404, 0.7860000133514404, 0.7903333306312561, 0.7850000262260437, 0.7883333563804626, 0.7916666865348816, 0.793666660785675, 0.7950000166893005, 0.7916666865348816, 0.7900000214576721, 0.7976666688919067, 0.7976666688919067, 0.7943333387374878, 0.7933333516120911, 0.79666668176651, 0.7933333516120911]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 2, 4, 0, 4, 8, 9, 3, 1, 2, 5, 6, 5, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 0, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.7785714268684387, "mapping_values": [1, 2, 2, 1, 1, 0, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(beta, grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9704581795272857, 1.3168907299994037, 1.065143594644514, 0.9042540763221507, 0.8064127691811448, 0.779652603904506, 0.7279092044390078, 0.7175629518019793, 0.6697148427577807, 0.6576027955912549, 0.6188903896249028, 0.6256370499480151, 0.5997373705857528, 0.615450504606804, 0.5670665682047082], "accuracy": [0.34262317419052124, 0.5385021567344666, 0.6132611036300659, 0.6532822847366333, 0.6996433734893799, 0.7018887996673584, 0.7265883088111877, 0.7213049530982971, 0.7421740889549255, 0.7479857206344604, 0.7668735980987549, 0.7630431652069092, 0.7714964747428894, 0.7637035846710205, 0.7823272943496704], "val_loss": [1.3127196856907435, 0.9374661445617676, 0.678321293422154, 0.6465602942875454, 0.6377072334289551, 0.5645667825426374, 0.5624145950589862, 0.5515435934066772, 0.5110723631722587, 0.5006245034081596, 0.5570266076496669, 0.5201271431786674, 0.5122484309332711, 0.49005034991673063, 0.5225902114595685], "val_accuracy": [0.45633333921432495, 0.6543333530426025, 0.6830000281333923, 0.7250000238418579, 0.6859999895095825, 0.7429999709129333, 0.7483333349227905, 0.749666690826416, 0.7643333077430725, 0.7796666622161865, 0.7396666407585144, 0.7553333044052124, 0.7639999985694885, 0.7773333191871643, 0.7599999904632568]}}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 4, 3, 0, 2, 5, 3, 1, 2, 2, 6, 6, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [1, 0, 1, 0, 1, 0, 0, 1, 1], [3, 0, 6, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [300189415.4645879, 5740818684.517237, 26759745419.14146, 74473253523.22282, 160653426787.54617, 294176701652.48236], "accuracy": [0.09734513610601425, 0.10117553919553757, 0.10355303436517715, 0.1018359512090683, 0.1014397069811821, 0.09893012791872025], "val_loss": [1137466148.5714285, 9095395620.571428, 30692058258.285713, 72746074112.0, 142075400777.14285, 245497743652.57144], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1], [0, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [52, 80, 61], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 4, 1, 8, 8, 9, 3, 1, 2, 5, 6, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 2, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [88, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 8, 8, 5, 3, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.pow(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(sigma, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07647603005170822, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 0, 1], [4, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 0, 3, 2, 0, 9, 4, 4, 1, 1, 2, 6, 0, 4, 8, 6, 4, 1, 0, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 35, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 21, 21, 12, 9, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, alpha)))), tf.math.add(beta, grad)), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 4, 3, 0, 2, 5, 3, 1, 2, 2, 6, 6, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [4, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [1], [0, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 7, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [16284.448319655683, 303237.1745723815, 1403427.680293224, 3893797.190727777, 8385438.5027077, 15338545.423061682], "accuracy": [0.09747721254825592, 0.10117553919553757, 0.10355303436517715, 0.10170386731624603, 0.1014397069811821, 0.09893012791872025], "val_loss": [60674.234375, 478218.75, 1606496.3214285714, 3799366.4285714286, 7410686.857142857, 12794298.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 0, 1, 8, 9, 9, 4, 4, 1, 1, 2, 2, 0, 4, 8, 6, 4, 1, 0, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 0, 5, 8, 6, 7, 4, 5, 6], [2, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 6, 6, 6, 0, 2, 1, 1, 1, 0, 1, 5, 3, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.math.square(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [93, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 4, 1, 8, 8, 9, 3, 1, 2, 5, 6, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 0, 9, 8, 6, 7, 4, 5, 6], [1, 3, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 9, 9, 7, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(alpha), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 4, 1, 8, 8, 9, 3, 1, 2, 5, 6, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [3, 1, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [88, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 10, 6, 4, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.math.divide_no_nan(tf.math.add(sigma, beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 1, 4, 9, 9, 4, 4, 1, 1, 2, 6, 0, 4, 8, 6, 4, 1, 0, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0, 1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [5, 2, 3, 2, 6, 7, 4, 5, 6], [1, 3, 1, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 15, 8, 7, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, alpha))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(sigma, tf.math.add(tf.math.divide_no_nan(alpha, alpha), tf.math.add(tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(beta))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [5, 2, 4, 3, 6, 2, 5, 3, 1, 2, 2, 6, 6, 2, 8, 5, 4, 0, 5, 4, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 4, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [44, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 39, 39, 22, 17, 1, 1, 1, 0, 1, 0, 10, 5, 5, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, alpha)))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))))))))))))), tf.math.add(beta, grad)))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, tf.math.pow(sigma, tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06036190688610077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [2, 80, 61], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 2, 4, 0, 0, 3, 9, 3, 1, 2, 5, 6, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [54, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 9, 9, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [88, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3028856037693126, 2.302974980505088, 2.3028582053461, 2.3029492467291495, 2.3030105182885525, 2.3029310178322135], "accuracy": [0.0956280529499054, 0.09325055778026581, 0.09377889335155487, 0.0944393053650856, 0.09496764093637466, 0.09760929644107819], "val_loss": [1.973581041608538, 1.9736221177237374, 1.9735980715070451, 1.9736430985586983, 1.9736414636884416, 1.9737117631094796], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10000000149011612, 0.10233332961797714, 0.10233332961797714, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 1, 4, 3, 0, 2, 2, 3, 1, 2, 2, 6, 6, 1, 8, 5, 4, 2, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [1, 0, 1, 0, 1, 0, 0, 1, 1], [3, 9, 6, 8, 6, 7, 4, 5, 6], [3, 1, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 39, 39, 22, 17, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad)))))))), tf.math.add(beta, grad)))), tf.math.sqrt(grad))))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.sqrt(alpha))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [300189415.4645879, 5740818684.517237, 26759745419.14146, 74473253523.22282, 160653426787.54617, 294176701652.48236], "accuracy": [0.09734513610601425, 0.10117553919553757, 0.10355303436517715, 0.1018359512090683, 0.1014397069811821, 0.09893012791872025], "val_loss": [1137466148.5714285, 9095395620.571428, 30692058258.285713, 72746074112.0, 142075400777.14285, 245497743652.57144], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 4, 0, 4, 8, 9, 3, 1, 2, 5, 6, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [9, 3, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [21, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 13, 7, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, grad))), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025600446009005, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [0, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [52, 80, 61], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 4, 1, 8, 4, 9, 3, 1, 2, 5, 6, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [88, 9, 76, 58]], "fitness": -0.06828571110963821, "mapping_values": [1, 2, 2, 2, 0, 1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [2.302106995324984, 2.3022209509976896, 2.300571056042743, 2.3004554521295892, 2.300822530802388, 2.3006785816252586, 2.3007843724614703, 2.3003793981144254, 2.298483347423545, 2.299067437200026, 2.299325879412777, 2.299775589474472, 2.299889752263674, 2.3000066732891074, 2.3006378864930244, 2.300720548081817, 2.3007231332433538, 2.299997012723218], "accuracy": [0.09245806187391281, 0.08968432247638702, 0.09179764986038208, 0.09417514503002167, 0.09708096832036972, 0.09655263274908066, 0.09298639744520187, 0.1018359512090683, 0.10460969805717468, 0.10038304328918457, 0.10394927859306335, 0.09734513610601425, 0.09998679161071777, 0.09866596013307571, 0.0940430611371994, 0.09628847241401672, 0.09681680053472519, 0.09919429570436478], "val_loss": [1.9705002648489816, 1.970059599195208, 1.9698994500296456, 1.9697613716125488, 1.9697163445608956, 1.9696077619280135, 1.9694639614650182, 1.969348430633545, 1.969315528869629, 1.969343934740339, 1.9695319448198592, 1.96983425957816, 1.970029626573835, 1.9702575547354562, 1.9704488345554896, 1.9706049646650041, 1.9707625252859933, 1.970959186553955], "val_accuracy": [0.0403333343565464, 0.04899999871850014, 0.055666666477918625, 0.058666665107011795, 0.06233333423733711, 0.06666667014360428, 0.0729999989271164, 0.07400000095367432, 0.07666666805744171, 0.07866666465997696, 0.07766667008399963, 0.07433333247900009, 0.07966666668653488, 0.07599999755620956, 0.07333333045244217, 0.07266666740179062, 0.07000000029802322, 0.0676666647195816]}}, {"genotype": [[0], [0, 1, 1], [0, 0, 1], [8, 0, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [52, 80, 61], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 4, 1, 8, 8, 1, 3, 1, 2, 5, 6, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 5, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [34, 9, 76, 58]], "fitness": -0.03885714337229729, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.negative(grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(sigma), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302433553136902, 2.303236878070975, 2.3019918839000297, 2.3022493192186255, 2.30297255660911, 2.3029419031157046, 2.303010827184054, 2.3027945779743226, 2.3004075283261654, 2.3016399491055295, 2.301919340095374, 2.30200295649216], "accuracy": [0.09166556596755981, 0.08928807079792023, 0.0874389111995697, 0.09166556596755981, 0.09232597798109055, 0.09113723784685135, 0.08942015469074249, 0.09047681838274002, 0.09813763201236725, 0.09245806187391281, 0.09747721254825592, 0.09285431355237961], "val_loss": [1.971156188419887, 1.9711228098188127, 1.9710918835231237, 1.9710557120186942, 1.9710162707737513, 1.9709803717476981, 1.9709518296378, 1.9709193365914481, 1.9708918843950545, 1.9708587782723563, 1.9708251953125, 1.9707940646580286], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03766666725277901, 0.03766666725277901, 0.03799999877810478, 0.03799999877810478, 0.038333334028720856, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 4, 3, 2, 2, 5, 4, 1, 2, 5, 6, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [1], [0, 0, 1, 0, 1, 0, 0, 1, 1], [5, 0, 9, 8, 6, 7, 4, 5, 6], [3, 1, 2, 1, 0, 0, 2, 2], [31, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 12, 9, 0, 1, 1, 1, 0, 1, 3, 2, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad))), tf.math.divide_no_nan(beta, tf.math.add(beta, beta))))), tf.math.add(beta, beta))), tf.math.add(beta, grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(sigma))", "other_info": {"loss": [2.302447478564314, 2.3032884732559924, 2.302082831282358, 2.3023925086746853, 2.3031671741272968, 2.30317541271578, 2.3032710422157625, 2.3030953515301826, 2.3007154184766434, 2.3020212321532734], "accuracy": [0.09179764986038208, 0.08942015469074249, 0.08730682730674744, 0.09126931428909302, 0.09192973375320435, 0.09074098616838455, 0.08849557489156723, 0.09008057415485382, 0.09721305221319199, 0.09219389408826828], "val_loss": [1.9711874553135462, 1.9711871147155762, 1.9711867741176061, 1.971186569758824, 1.9711862291608537, 1.9711860248020716, 1.9711856160845076, 1.9711852754865373, 1.9711850030081612, 1.9711846624101912], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.036666665226221085, 0.036666665226221085, 0.036666665226221085, 0.036666665226221085, 0.036666665226221085, 0.036666665226221085]}}, {"genotype": [[0], [0, 1, 1], [1, 0, 1], [8, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 1, 4, 9, 9, 4, 4, 1, 1, 2, 6, 0, 4, 8, 6, 4, 1, 0, 5, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 6, 3, 2, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [88, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 7, 3, 2, 1, 0, 0, 0, 0, 12, 6, 6, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.divide_no_nan(sigma, tf.math.multiply(sigma, tf.math.add(tf.math.divide_no_nan(beta, alpha), tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.3024477259263447, 2.303289372891703, 2.302084081791112, 2.302394641026719, 2.3031703859288157, 2.3031789798620683], "accuracy": [0.09179764986038208, 0.08942015469074249, 0.0874389111995697, 0.09126931428909302, 0.09192973375320435, 0.09074098616838455], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [9, 9, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2], [11, 80, 61], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 4, 3, 0, 2, 0, 3, 1, 2, 5, 2, 2, 6, 8, 5, 4, 0, 5, 8, 6, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 3, 3, 3, 1, 2, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [2, 42, 20, 7, 45, 13], [0, 1, 1], [0, 1, 1], [6], [4, 1], [73], [0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 1, 9, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 1, 1, 1, 0, 1, 20, 20, 12, 8, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, beta)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(alpha, tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3024477259263447, 2.303289372891703, 2.302084081791112, 2.302394641026719, 2.3031703859288157, 2.3031789798620683], "accuracy": [0.09179764986038208, 0.08942015469074249, 0.0874389111995697, 0.09126931428909302, 0.09192973375320435, 0.09074098616838455], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]