[{"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 3, 2, 5, 4, 7, 1, 6, 5, 7, 5, 0, 2, 9, 2, 1, 8, 9], [0, 2, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8217142820358276, "mapping_values": [1, 31, 31, 19, 12, 3, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, alpha)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, grad))), grad)))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.095153533330667, 1.6061268737996024, 1.125383899747546, 0.8874377124439597, 0.9043904412943752, 0.7769790259192979, 0.6950862095529503, 0.6633933316195378, 0.6613548676949671, 0.5807927289989725, 0.6194871755135042, 0.5768438659843562, 0.545160758087522, 0.5575524463810705, 0.5244118850528131, 0.5279218501395018, 0.5068499567155683, 0.5049347968747697, 0.49858038042199737, 0.48318187487580444, 0.47887184049207393, 0.4464739568402597, 0.43994598257354284, 0.45558051660060567, 0.40278326863578723, 0.4292777204959148], "accuracy": [0.3065645098686218, 0.44247788190841675, 0.5989961624145508, 0.6618676781654358, 0.6712455153465271, 0.7036058902740479, 0.737022876739502, 0.7526086568832397, 0.7503632307052612, 0.7802139520645142, 0.7601373791694641, 0.7790252566337585, 0.7943468689918518, 0.7915731072425842, 0.7984414100646973, 0.8009510040283203, 0.8082155585289001, 0.8096684813499451, 0.8055738806724548, 0.8175934553146362, 0.822348415851593, 0.8347642421722412, 0.8341038227081299, 0.8309338092803955, 0.8494254350662231, 0.8338396549224854], "val_loss": [1.684944016592843, 0.922713007245745, 0.7124311923980713, 0.696164744240897, 0.6472904000963483, 0.5785757984433856, 0.5486705984388079, 0.5587788820266724, 0.4959518739155361, 0.46856931277683805, 0.50023124899183, 0.45957001617976595, 0.49812562125069754, 0.4509619815008981, 0.4918039526258196, 0.46324171338762554, 0.41945694174085346, 0.4602294479097639, 0.41216564178466797, 0.4331737756729126, 0.3820492114339556, 0.39904474360602243, 0.39818919556481497, 0.375347512108939, 0.3824200800486973, 0.4334153618131365], "val_accuracy": [0.4673333466053009, 0.6186666488647461, 0.6706666946411133, 0.6683333516120911, 0.6986666917800903, 0.722000002861023, 0.7526666522026062, 0.7400000095367432, 0.7723333239555359, 0.7876666784286499, 0.7753333449363708, 0.7926666736602783, 0.7789999842643738, 0.7986666560173035, 0.7766666412353516, 0.7896666526794434, 0.8069999814033508, 0.8119999766349792, 0.8226666450500488, 0.7940000295639038, 0.8396666646003723, 0.8220000267028809, 0.8203333616256714, 0.8339999914169312, 0.8299999833106995, 0.8009999990463257]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 4, 4, 6, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [77, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 1, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 0, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8185714483261108, "mapping_values": [1, 19, 19, 11, 8, 3, 23, 23, 12, 11, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(alpha)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.pow(alpha, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, alpha)), tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0951474446662113, 1.6331817789194905, 1.3118329475175088, 0.9993453740664225, 0.7927833339006295, 0.7729824969498016, 0.7010670484190903, 0.6680894431153371, 0.6512335083267676, 0.5930805120721957, 0.6028514638663188, 0.5808769164619476, 0.5307293508456226, 0.5658119520483205, 0.5133819007020128, 0.5243570875608218, 0.4998256470060871, 0.5016655123835274, 0.49612887732152217, 0.47645673759231444, 0.4777648644031015, 0.45340616923313193, 0.4456725073780256, 0.4484794604787737, 0.4045911611401882, 0.4392057308872315, 0.40816752425415986, 0.39972230922733365, 0.40715096656515015], "accuracy": [0.3066965937614441, 0.4383833110332489, 0.5517104864120483, 0.6243560910224915, 0.71100252866745, 0.7033417224884033, 0.7326641082763672, 0.7511557340621948, 0.7561748623847961, 0.7771760821342468, 0.7712323069572449, 0.7775723338127136, 0.8021397590637207, 0.793950617313385, 0.8049134612083435, 0.7987055778503418, 0.8140271902084351, 0.8119139075279236, 0.8049134612083435, 0.8230088353157043, 0.8207634687423706, 0.8374059200286865, 0.8327829837799072, 0.8325188159942627, 0.8474441766738892, 0.8285563588142395, 0.8448025584220886, 0.8516708612442017, 0.8454629778862], "val_loss": [1.6817527839115687, 1.0125740255628313, 0.8131956202643258, 0.682637095451355, 0.6211343152182442, 0.5679767642702375, 0.6130565745489938, 0.550023112978254, 0.4830322095326015, 0.4720887967518398, 0.4878638982772827, 0.4497824566704886, 0.5481901679720197, 0.44480110917772564, 0.49002454962049213, 0.4696746553693499, 0.4124000072479248, 0.4468820095062256, 0.41272670882088797, 0.4495346886771066, 0.4084146022796631, 0.4021730763571603, 0.4099411368370056, 0.3757354361670358, 0.40320941380092074, 0.38156672034944805, 0.3938763311931065, 0.4115751470838274, 0.3890536938394819], "val_accuracy": [0.4713333249092102, 0.6259999871253967, 0.6330000162124634, 0.6726666688919067, 0.7026666402816772, 0.737666666507721, 0.7253333330154419, 0.7450000047683716, 0.7829999923706055, 0.7833333611488342, 0.7850000262260437, 0.8006666898727417, 0.7509999871253967, 0.8033333420753479, 0.7753333449363708, 0.781000018119812, 0.8176666498184204, 0.8233333230018616, 0.8246666789054871, 0.7903333306312561, 0.8209999799728394, 0.8230000138282776, 0.8096666932106018, 0.8383333086967468, 0.8206666707992554, 0.8373333215713501, 0.8299999833106995, 0.8176666498184204, 0.8346666693687439]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [77, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 9, 6, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8025714159011841, "mapping_values": [1, 5, 5, 3, 2, 3, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0951431823239712, 1.6355671629441524, 1.3251613901433315, 1.0193801805359293, 0.8024655657122557, 0.740237410963487, 0.7029347121833637, 0.6575225161964457, 0.6430992216182785, 0.59574182703353, 0.5811416036842395, 0.5854603548280441, 0.5375096762043342, 0.5371838281175416, 0.519309428098447, 0.5098137338289637, 0.49655262417151486, 0.49079217519569296, 0.49401005437707607, 0.4737633164800342, 0.4714314309896621, 0.45100100273705584, 0.43606324881421515, 0.44933990935970053, 0.395414692464994, 0.44491240110190755, 0.40586718061911575, 0.3992984655148727, 0.39087333142355907, 0.40921684605192593], "accuracy": [0.3065645098686218, 0.4373266398906708, 0.5440496802330017, 0.6243560910224915, 0.6959450244903564, 0.7172104120254517, 0.7308149337768555, 0.7523444890975952, 0.7605336308479309, 0.7668735980987549, 0.776251494884491, 0.778232753276825, 0.7996301651000977, 0.7981772422790527, 0.8054417967796326, 0.8086118102073669, 0.8158763647079468, 0.8178576231002808, 0.8084797263145447, 0.8228767514228821, 0.8265751004219055, 0.8384625315666199, 0.8385946154594421, 0.830669641494751, 0.8527275323867798, 0.8285563588142395, 0.8465195894241333, 0.8498216867446899, 0.8557654023170471, 0.8445383906364441], "val_loss": [1.681638479232788, 1.0553251675197057, 0.8533672775541034, 0.6751209838049752, 0.5861923013414655, 0.6203080926622663, 0.6162274735314506, 0.5593819447926113, 0.4981086935315813, 0.47282796246664865, 0.4704880714416504, 0.4477062225341797, 0.5241428443363735, 0.42557611635753084, 0.4749619109289987, 0.4462743656975882, 0.41032667670931133, 0.4306017926761082, 0.40498608350753784, 0.4510903699057443, 0.41175486360277447, 0.39612206390925814, 0.40673347881862093, 0.37385060106004986, 0.38978895119258333, 0.3810446092060634, 0.38883050850459505, 0.3922699349267142, 0.40671129737581524, 0.36276832648686], "val_accuracy": [0.47099998593330383, 0.6169999837875366, 0.6290000081062317, 0.7123333215713501, 0.7260000109672546, 0.7096666693687439, 0.721666693687439, 0.7363333106040955, 0.7730000019073486, 0.7863333225250244, 0.796999990940094, 0.8056666851043701, 0.749666690826416, 0.8146666884422302, 0.7826666831970215, 0.7940000295639038, 0.8256666660308838, 0.8273333311080933, 0.8303333520889282, 0.7929999828338623, 0.8130000233650208, 0.828000009059906, 0.8159999847412109, 0.8403333425521851, 0.8413333296775818, 0.8349999785423279, 0.8323333263397217, 0.8226666450500488, 0.8299999833106995, 0.840666651725769]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 9, 6, 5, 6, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 2, 3, 1, 8, 4, 3, 4, 2, 4, 3], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2], [91, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.800000011920929, "mapping_values": [1, 9, 9, 6, 3, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.1832736839691975, 2.034859579426029, 1.6063408205742535, 1.2813087621495363, 0.9685799694253374, 0.7958180046179165, 0.719120314462609, 0.6638143506221421, 0.6428931299028711, 0.5999608902788874, 0.5989890710599922, 0.5558811544805171, 0.5543958020799148, 0.5284762989772451, 0.5187069604331004, 0.5275814853891043, 0.49445536769281967, 0.491138291833675, 0.4633727879918499, 0.49294138320007846, 0.47840089437637534, 0.4674926105586057, 0.430515947784053, 0.4483874237312223, 0.417140952631656, 0.44599473189447914, 0.4231131136803154, 0.40288922896065243, 0.41707410869534145, 0.39742429299581916, 0.40923431604262184, 0.3985228403770944, 0.3901409665551939, 0.39980330612948856, 0.38887074835359337, 0.3563563592122798, 0.3582294804899369, 0.3555090120124968, 0.3563681917616625, 0.35592336493901383], "accuracy": [0.27103421092033386, 0.29705455899238586, 0.47087571024894714, 0.5362567901611328, 0.6424514651298523, 0.7004358768463135, 0.7246070504188538, 0.750759482383728, 0.7564390301704407, 0.7778365015983582, 0.7688548564910889, 0.7874785661697388, 0.7923656105995178, 0.8038568496704102, 0.8068947196006775, 0.7961959838867188, 0.8129705190658569, 0.816008448600769, 0.8208954930305481, 0.8103289008140564, 0.826310932636261, 0.8302733898162842, 0.8385946154594421, 0.8330471515655518, 0.8445383906364441, 0.8249900937080383, 0.8388587832450867, 0.850350022315979, 0.8399154543876648, 0.8512746095657349, 0.8429533839225769, 0.8490291833877563, 0.8499537706375122, 0.8487650156021118, 0.8514066934585571, 0.8692378997802734, 0.8628978729248047, 0.8679170608520508, 0.8673887252807617, 0.8627657890319824], "val_loss": [1.8801215716770716, 1.414048433303833, 1.3222403526306152, 0.8806096485682896, 0.6520511082240513, 0.5802399601255145, 0.5986093963895526, 0.5054341214043754, 0.4759701320103237, 0.4727003744670323, 0.5002904960087368, 0.43787511757441927, 0.43871728011540007, 0.46830698422023226, 0.4760347604751587, 0.47888217653547016, 0.41025471687316895, 0.4351387790271214, 0.4391929933003017, 0.4201316067150661, 0.4046193446431841, 0.3915369851248605, 0.3895751067570278, 0.3858049767357962, 0.3928247094154358, 0.39152837651116507, 0.41347494295665194, 0.4111729690006801, 0.374441921710968, 0.3685633965900966, 0.4263343811035156, 0.37185390506471905, 0.37338918447494507, 0.37287295716149466, 0.35719151156289236, 0.38220369815826416, 0.3935678856713431, 0.38005987235477995, 0.3895448701722281, 0.3560104881014143], "val_accuracy": [0.35633334517478943, 0.3636666536331177, 0.4346666634082794, 0.6023333072662354, 0.6866666674613953, 0.737666666507721, 0.737666666507721, 0.7676666378974915, 0.7886666655540466, 0.7846666574478149, 0.7689999938011169, 0.8180000185966492, 0.8076666593551636, 0.7896666526794434, 0.7753333449363708, 0.7786666750907898, 0.8223333358764648, 0.8073333501815796, 0.793666660785675, 0.8076666593551636, 0.8166666626930237, 0.824999988079071, 0.8360000252723694, 0.8379999995231628, 0.8309999704360962, 0.828000009059906, 0.8130000233650208, 0.8159999847412109, 0.8456666469573975, 0.8486666679382324, 0.7963333129882812, 0.8506666421890259, 0.8426666855812073, 0.8420000076293945, 0.8576666712760925, 0.8296666741371155, 0.831333339214325, 0.8456666469573975, 0.8413333296775818, 0.8529999852180481]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 6, 5, 6, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 2, 3, 1, 8, 4, 3, 4, 2, 4, 3], [3, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 0, 0, 2, 1, 1, 1], [98, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.7977142930030823, "mapping_values": [1, 6, 6, 4, 2, 1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.348063200598049, 2.2862022765135297, 1.9999804749008276, 1.9046279841788205, 1.808912732204064, 1.446542534908803, 0.9406601438716323, 0.8582476729084519, 0.7643401862340219, 0.6908797595825619, 0.6882636707141777, 0.6719919284179525, 0.6164388597413076, 0.6248737901838904, 0.6007799614201668, 0.5957171515057414, 0.5988715309366779, 0.5528667345770976, 0.5610511945522441, 0.5203476814845172, 0.5314598425173757, 0.5120776939102373, 0.5180590720838638, 0.4846230260589891], "accuracy": [0.21899352967739105, 0.14634791016578674, 0.32624489068984985, 0.3645489513874054, 0.43045833706855774, 0.5190860033035278, 0.6519614458084106, 0.677189290523529, 0.7087571024894714, 0.7351737022399902, 0.7364945411682129, 0.7466648817062378, 0.7700436115264893, 0.7606657147407532, 0.7745344042778015, 0.7726852297782898, 0.7744023203849792, 0.7836481332778931, 0.789459764957428, 0.8013472557067871, 0.804649293422699, 0.8000264167785645, 0.8039889335632324, 0.8185180425643921], "val_loss": [1.971959454672677, 1.852820668901716, 1.0646353449140276, 1.7659483637128557, 1.2675256388528007, 0.7314073017665318, 0.7438946962356567, 0.5793095486504691, 0.5541620254516602, 0.5847197430474418, 0.6843794073377337, 0.4921586513519287, 0.5596696649278913, 0.507299644606454, 0.464384709085737, 0.4598864657538278, 0.4640202011380877, 0.44668751103537424, 0.42380516869681223, 0.4449115480695452, 0.49122372695377897, 0.42419414860861643, 0.40663717474256245, 0.48763242789677214], "val_accuracy": [0.11266666650772095, 0.38100001215934753, 0.5170000195503235, 0.37933334708213806, 0.528333306312561, 0.7089999914169312, 0.6700000166893005, 0.7300000190734863, 0.7523333430290222, 0.7020000219345093, 0.7066666483879089, 0.7796666622161865, 0.7326666712760925, 0.7746666669845581, 0.7873333096504211, 0.7906666398048401, 0.7773333191871643, 0.800000011920929, 0.824999988079071, 0.8066666722297668, 0.7673333287239075, 0.809333324432373, 0.8243333101272583, 0.7893333435058594]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 5, 5, 5, 1, 7, 1, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8, 9], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7937142848968506, "mapping_values": [1, 31, 31, 20, 11, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, alpha)))), alpha)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.4376880952852464, 2.0378958181446225, 1.8320682509983723, 1.3903231061822814, 1.1183321807740654, 1.092941598979757, 0.9298056411059809, 0.8781846672662608, 0.8464987178787878, 0.8178639089064497, 0.761214196595376, 0.7831863569246543, 0.7193491340250371, 0.6919177846822914, 0.7109393585217927, 0.6623479380127052, 0.669755426703065, 0.6276761387963069, 0.6334371651483328, 0.6101249630708484], "accuracy": [0.23576806485652924, 0.3230748772621155, 0.3859463632106781, 0.49068814516067505, 0.5900145173072815, 0.6042794585227966, 0.6592260003089905, 0.6701889038085938, 0.6841896772384644, 0.695813000202179, 0.7055870890617371, 0.6989829540252686, 0.7318716049194336, 0.7363624572753906, 0.7273808121681213, 0.7457403540611267, 0.7412495017051697, 0.7652885913848877, 0.7621186375617981, 0.769911527633667], "val_loss": [1.8827107293265206, 1.7146030834742956, 1.2423608984266008, 0.9871843882969448, 0.7979417187826974, 0.6714063542229789, 0.7197045769010272, 0.6832315240587506, 0.6170391695840018, 0.6111998898642403, 0.6730608088629586, 0.5800945077623639, 0.5768522024154663, 0.5545440912246704, 0.5025511809757778, 0.5178173269544329, 0.5068864481789725, 0.5049398626599994, 0.509413616997855, 0.4846735341208322], "val_accuracy": [0.2616666555404663, 0.382666677236557, 0.4886666536331177, 0.6273333430290222, 0.5740000009536743, 0.7076666951179504, 0.6673333048820496, 0.687333345413208, 0.7146666646003723, 0.7113333344459534, 0.6890000104904175, 0.7153333425521851, 0.7163333296775818, 0.7523333430290222, 0.7906666398048401, 0.765999972820282, 0.7736666798591614, 0.7739999890327454, 0.7486666440963745, 0.7816666960716248]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 8, 6, 5, 5, 1, 1, 7, 1, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8, 9], [2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 0, 0, 2, 1, 1, 1], [93, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.741428554058075, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.4376834175763364, 2.037978696124019, 1.806708900652321, 1.3526975173110014, 1.1273190265775057, 1.1061414846922382, 0.9943388211587008, 0.8802240218673447, 0.8997850862035599, 0.8174693629946675, 0.7906661925062669, 0.7614340119673009, 0.749768409612802, 0.7097572166654239], "accuracy": [0.23576806485652924, 0.31964072585105896, 0.39004093408584595, 0.5266147255897522, 0.5881653428077698, 0.6082419753074646, 0.639809787273407, 0.6740192770957947, 0.6650376319885254, 0.6930392384529114, 0.7003037929534912, 0.7084929347038269, 0.7177387475967407, 0.7298903465270996], "val_loss": [1.882673876626151, 1.7333632877894811, 1.1648023809705461, 0.9995373317173549, 0.7570669991629464, 0.7164920227868217, 0.723410793713161, 0.8307253803525653, 0.6035128150667463, 0.5893036297389439, 0.6250234842300415, 0.5960259437561035, 0.5633684907640729, 0.6182935237884521], "val_accuracy": [0.2613333463668823, 0.3713333308696747, 0.49399998784065247, 0.49300000071525574, 0.6850000023841858, 0.7013333439826965, 0.6726666688919067, 0.6150000095367432, 0.7360000014305115, 0.731333315372467, 0.7023333311080933, 0.7303333282470703, 0.7193333506584167, 0.7099999785423279]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [5, 2, 9, 4, 4, 5, 1, 7, 8, 8, 5, 7, 5, 0, 2, 2, 2, 1, 8, 5, 3, 1, 8, 9], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2, 0], [77, 80, 61, 44], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 2, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.5519999861717224, "mapping_values": [1, 35, 35, 24, 11, 4, 23, 23, 12, 11, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad)))))))), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), beta)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.231063620068882, 2.1445687194116805, 2.376878475579194, 2.1674122203216735, 2.18425677641744, 2.2305343953169032], "accuracy": [0.22876766324043274, 0.31184783577919006, 0.26324132084846497, 0.2452780306339264, 0.23193766176700592, 0.2595430016517639], "val_loss": [1.6477058615003313, 1.831759248461042, 1.9725497790745325, 1.9583264759608678, 1.9176483154296875, 1.9733654430934362], "val_accuracy": [0.5350000262260437, 0.38733333349227905, 0.1066666692495346, 0.18066667020320892, 0.29233333468437195, 0.1276666671037674]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 3, 4, 4, 8, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [92, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.5519999861717224, "mapping_values": [1, 20, 20, 11, 9, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, grad)))), alpha)), tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(alpha)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.231065254421786, 2.05399558182327, 2.2862212002600155, 2.217638150024817, 2.1758340124944735, 2.08962962328561], "accuracy": [0.22863557934761047, 0.3195086419582367, 0.28661999106407166, 0.21384228765964508, 0.24039097130298615, 0.23933430016040802], "val_loss": [1.647461175918579, 1.857063157217843, 1.8471482140677316, 1.6338774136134557, 1.853616373879569, 1.6841399669647217], "val_accuracy": [0.534333348274231, 0.210999995470047, 0.21666666865348816, 0.2916666567325592, 0.22633333504199982, 0.22633333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 2, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [1, 80, 61, 19], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [6, 6, 6, 0, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [92, 93, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 0, 2, 1, 0, 0, 2, 2], [12, 9, 76, 58]], "fitness": -0.4488571286201477, "mapping_values": [1, 1, 1, 0, 1, 1, 42, 42, 26, 16, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.math.pow(tf.math.subtract(grad, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), beta)))))), tf.math.subtract(tf.math.add(beta, grad), grad)))))), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301286291625789, 2.3025700122043204, 2.2986671874205418, 2.2986002846983493, 2.2980614332018465, 2.2961842400318186, 2.295510415749984, 2.2932136400485037, 2.291570968915128, 2.2927016118545542, 2.2916462525337633, 2.28791442529605, 2.289800734961463, 2.288975970557085, 2.286844248784894, 2.289013699549316, 2.2869172568932785, 2.2849346138404076, 2.283526921710003, 2.284748181911303, 2.2822063210743955, 2.2801557073440724, 2.2786655460350613, 2.277642492541957, 2.277981624973606, 2.2769184064682464, 2.2750489090443478, 2.2740636343622818, 2.2725867875862145, 2.2717202703289274, 2.26969848732828, 2.271197616967385, 2.2691169922866083, 2.268043944077044, 2.2658921156293603, 2.2658848724093152, 2.265136569765943, 2.2620695099901797, 2.2610569332474495, 2.2596907717377643, 2.2602060236998236, 2.259357372499838, 2.255853009308964, 2.2572854721881552, 2.2564493015127063, 2.253458068670299, 2.2536676914117844, 2.253094380794027, 2.2494906649503252, 2.2491469259165093, 2.249952355144109, 2.247905953464853, 2.2444420040653617, 2.244317505416648, 2.2423621163376413, 2.2417285310404886, 2.2418043688382485, 2.2393797560926, 2.238285634590414, 2.2355088229979883, 2.234390200310222, 2.233222105216199, 2.2311546792758534, 2.230263342206756, 2.228179145309636, 2.227914594970973, 2.224803013934467, 2.2234018590267324, 2.2238673087769905, 2.221895051056037, 2.219881098646104, 2.2202884364263524, 2.2197981392466524, 2.2176233753473404, 2.2132065022830965, 2.211681474075499, 2.212247596739967, 2.2094218405939094, 2.2082366317632633, 2.2072416148590706, 2.204789265571033, 2.202398082189997, 2.1986754978526584, 2.199886836773841, 2.194694777458351, 2.1963574028821307, 2.194830510248172, 2.1930035605107503, 2.1883064145818913, 2.1871200646738163, 2.187099961493828, 2.1838926307245914, 2.1805428021052697, 2.1803937052471163, 2.1769539806364455, 2.175757280477459, 2.1738389727776752, 2.1712699664534987, 2.1701885944092356, 2.1677899018349254], "accuracy": [0.09655263274908066, 0.08836349099874496, 0.09985470771789551, 0.09747721254825592, 0.10157178342342377, 0.10011887550354004, 0.107647605240345, 0.10910051316022873, 0.11768590658903122, 0.11874257028102875, 0.11847840249538422, 0.1224408894777298, 0.12098798155784607, 0.12481838464736938, 0.12930920720100403, 0.1254788041114807, 0.1294412910938263, 0.13076211512088776, 0.13657376170158386, 0.13895125687122345, 0.1422533392906189, 0.14634791016578674, 0.15017831325531006, 0.1550653874874115, 0.1504424810409546, 0.1554616242647171, 0.1604807823896408, 0.16880200803279877, 0.16959451138973236, 0.1706511676311493, 0.17342491447925568, 0.17355699837207794, 0.18002906441688538, 0.18821820616722107, 0.18584071099758148, 0.17936864495277405, 0.1904636174440384, 0.1912561058998108, 0.20591731369495392, 0.20380398631095886, 0.2032756507396698, 0.2016906589269638, 0.21503104269504547, 0.20512482523918152, 0.20816272497177124, 0.2226918488740921, 0.2164839506149292, 0.21820102632045746, 0.21965394914150238, 0.22757892310619354, 0.2296922504901886, 0.23101307451725006, 0.2382776439189911, 0.2421080470085144, 0.24435345828533173, 0.24422137439250946, 0.24105137586593628, 0.24342887103557587, 0.2522784173488617, 0.2534671723842621, 0.25359925627708435, 0.2546559274196625, 0.2583542466163635, 0.2645621597766876, 0.26799631118774414, 0.2747325301170349, 0.2728833854198456, 0.28120461106300354, 0.2658829689025879, 0.28001585602760315, 0.28120461106300354, 0.2735437750816345, 0.27182671427726746, 0.27684587240219116, 0.28780874609947205, 0.2915070652961731, 0.2856954038143158, 0.28318583965301514, 0.294148713350296, 0.28661999106407166, 0.2957337200641632, 0.2996962070465088, 0.3061682879924774, 0.3074890971183777, 0.3241315484046936, 0.3086778521537781, 0.31224408745765686, 0.31026285886764526, 0.3143574297428131, 0.31699907779693604, 0.3179236650466919, 0.32518821954727173, 0.32822611927986145, 0.33047154545783997, 0.33483028411865234, 0.33245277404785156, 0.32901862263679504, 0.32664114236831665, 0.3331131935119629, 0.3361510932445526], "val_loss": [1.9701860291617257, 1.9692112377711706, 1.9682371275765556, 1.9672532081604004, 1.9662713323320662, 1.9652818952287947, 1.9643026760646276, 1.9633314268929618, 1.9623678752354212, 1.9613942418779646, 1.9604329381670271, 1.959470476422991, 1.958491597856794, 1.9575176920209612, 1.9565488270350866, 1.9555789402553014, 1.9546193395342146, 1.953643730708531, 1.9526536124093192, 1.9516878128051758, 1.9507132257734026, 1.9497263772147042, 1.948742185320173, 1.9477590833391463, 1.9467675345284599, 1.9457791873386927, 1.9447902951921736, 1.9437824657985143, 1.942784036908831, 1.941769804273333, 1.9407494408743722, 1.9397247859409876, 1.9386965206691198, 1.937664236341204, 1.9366259574890137, 1.9355990546090263, 1.9345528738839286, 1.9334890501839774, 1.9324315616062708, 1.9313649450029646, 1.9302915845598494, 1.9292152949741908, 1.928122111729213, 1.927039691380092, 1.9259445326668876, 1.9248336383274622, 1.9237174987792969, 1.9225974082946777, 1.9214505468096053, 1.9202939442225866, 1.919149330684117, 1.9179840087890625, 1.9167977741786413, 1.9156061581202917, 1.9144015993390764, 1.9131893430437361, 1.9119799477713448, 1.9107356071472168, 1.9094891548156738, 1.9082087108067103, 1.9069394384111678, 1.9056361062186105, 1.90431547164917, 1.9029850959777832, 1.90164395741054, 1.9002928733825684, 1.8989039829799108, 1.8975011961800712, 1.896116052355085, 1.8946941239493233, 1.8932627950395857, 1.8918183871677943, 1.8903725487845284, 1.888906478881836, 1.8874055998665946, 1.8858777454921178, 1.88435275214059, 1.8827917916434151, 1.8812157085963659, 1.879629135131836, 1.8780200140816825, 1.8763915470668249, 1.874732562473842, 1.8730708530970983, 1.8713353020804269, 1.8696156229291643, 1.8678759166172572, 1.866121768951416, 1.8643366949898856, 1.8625099318368095, 1.8606720651899065, 1.858806882585798, 1.856907640184675, 1.8549938883100237, 1.8530657632010323, 1.8511018753051758, 1.8491161210196358, 1.8470942633492606, 1.8450570106506348, 1.8429762295314245], "val_accuracy": [0.041333332657814026, 0.04466666653752327, 0.0533333346247673, 0.0573333315551281, 0.06533333659172058, 0.07333333045244217, 0.0846666693687439, 0.09066666662693024, 0.1003333330154419, 0.1080000028014183, 0.11733333021402359, 0.12666666507720947, 0.13566666841506958, 0.14766666293144226, 0.15666666626930237, 0.16699999570846558, 0.17866666615009308, 0.18666666746139526, 0.195333331823349, 0.20200000703334808, 0.2096666693687439, 0.21566666662693024, 0.2240000069141388, 0.23000000417232513, 0.2383333295583725, 0.24699999392032623, 0.25433334708213806, 0.2626666724681854, 0.2709999978542328, 0.2763333320617676, 0.2836666703224182, 0.29100000858306885, 0.29766666889190674, 0.30300000309944153, 0.30566665530204773, 0.312333345413208, 0.3166666626930237, 0.32499998807907104, 0.32766667008399963, 0.33133333921432495, 0.33500000834465027, 0.3400000035762787, 0.34333333373069763, 0.3449999988079071, 0.3479999899864197, 0.35100001096725464, 0.35333332419395447, 0.3553333282470703, 0.35766667127609253, 0.359333336353302, 0.3606666624546051, 0.3643333315849304, 0.36633333563804626, 0.37033334374427795, 0.3713333308696747, 0.3736666738986969, 0.37599998712539673, 0.3786666691303253, 0.3813333213329315, 0.382999986410141, 0.3843333423137665, 0.3869999945163727, 0.3883333206176758, 0.38999998569488525, 0.39233332872390747, 0.3956666588783264, 0.39766666293144226, 0.4000000059604645, 0.40433332324028015, 0.40700000524520874, 0.41066667437553406, 0.41366666555404663, 0.4156666696071625, 0.4189999997615814, 0.4193333387374878, 0.4216666519641876, 0.42366665601730347, 0.4259999990463257, 0.42899999022483826, 0.429666668176651, 0.43066665530204773, 0.4309999942779541, 0.4333333373069763, 0.43566668033599854, 0.43566668033599854, 0.43666666746139526, 0.437333345413208, 0.4403333365917206, 0.4410000145435333, 0.4413333237171173, 0.4423333406448364, 0.44433334469795227, 0.44466665387153625, 0.4466666579246521, 0.4483333230018616, 0.4490000009536743, 0.4503333270549774, 0.4516666531562805, 0.4543333351612091, 0.45500001311302185]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 9, 6, 5, 6, 5, 1, 7, 8, 6, 0, 7, 5, 1, 2, 2, 3, 1, 8, 4, 3, 4, 2, 4, 3], [1, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [92, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [7, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [49, 9, 76, 58]], "fitness": -0.3734285831451416, "mapping_values": [1, 19, 19, 12, 7, 2, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.5859928590557626, 2.442191030717466, 2.231491244527343, 2.305678966574114, 2.303342523765035, 2.3024818012664316], "accuracy": [0.20538897812366486, 0.16510368883609772, 0.240919291973114, 0.0952318087220192, 0.09998679161071777, 0.09893012791872025], "val_loss": [1.846508366721017, 1.968616213117327, 1.9774620192391532, 1.9743804250444685, 1.9734913281032018, 1.9723029817853654], "val_accuracy": [0.4273333251476288, 0.17499999701976776, 0.09866666793823242, 0.1003333330154419, 0.0989999994635582, 0.11900000274181366]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 6, 5, 1, 9, 1, 7, 8, 2, 5, 9, 5, 0, 2, 2, 2, 1, 8, 1, 2, 4, 2, 4, 3], [2, 2, 0, 2, 1, 1, 2, 0, 2, 2, 2, 0, 0, 3, 2, 0, 3, 0, 1], [77, 99, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [96, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [5, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [22, 9, 76, 58]], "fitness": -0.10971428453922272, "mapping_values": [1, 18, 18, 11, 7, 2, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.square(alpha))), grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.300773648884413, 2.3017476705937354, 2.300564237069838, 2.3015222555106862, 2.30200567948993, 2.3022440388344063, 2.302448404935908, 2.3025299944441158, 2.302575578999447, 2.3025868434664156, 2.3025839148007363], "accuracy": [0.09747721254825592, 0.09338264167308807, 0.10077928751707077, 0.10038304328918457, 0.09721305221319199, 0.10315678268671036, 0.10381719470024109, 0.10130762308835983, 0.10117553919553757, 0.09972262382507324, 0.10011887550354004], "val_loss": [1.9706061908176966, 1.9715652465820312, 1.972632680620466, 1.9731179646083288, 1.9734576089041573, 1.9736057690211706, 1.9736411912100655, 1.973644460950579, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.07566666603088379, 0.0989999994635582, 0.08966666460037231, 0.08500000089406967, 0.10833333432674408, 0.11133333295583725, 0.10533333569765091, 0.1003333330154419, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 6, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [77, 80, 61], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 6, 0, 4, 6, 2, 1, 9, 4, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 91, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 2, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad)))))), alpha)), tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(alpha)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.divide_no_nan(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 1, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0, 3, 2, 0, 3, 0, 1], [1, 80, 61, 79, 66, 30, 25], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 5, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [81, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [80, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 3, 1, 2, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.30218533284912, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0], [91, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [5, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [0, 1, 1], [9], [6, 1], [52], [0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3026958024260895, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [90, 80, 61], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 9, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [42, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026958024260895, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [3, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 0, 0], [92, 80, 61], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 91, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [1, 0, 2, 1, 0, 0, 2, 2], [37, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 4, 5, 5, 5, 1, 7, 1, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8, 9], [3, 2, 0, 1, 1, 2, 2, 0, 2, 2, 2, 0, 0], [92, 22, 61], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 94, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.303053920263659, 2.302918420444469, 2.3028757630117567, 2.3029607590934966, 2.302949618827146, 2.3029917470216277, 2.30301482034098], "accuracy": [0.09008057415485382, 0.09536388516426086, 0.09959053993225098, 0.09642054885625839, 0.0940430611371994, 0.0940430611371994, 0.09774138033390045], "val_loss": [1.9736490930829729, 1.9735534531729562, 1.9736383301871163, 1.97370331627982, 1.9738341740199499, 1.9737667356218611, 1.9736877850123815], "val_accuracy": [0.10133333504199982, 0.10566666722297668, 0.10066666454076767, 0.09799999743700027, 0.09833333641290665, 0.10066666454076767, 0.09866666793823242]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 8, 2, 5, 4, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2], [92, 80, 61], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 2, 3, 3, 0, 1, 3, 3, 3, 3, 1, 3, 3, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [88, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [0, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 10, 10, 6, 4, 1, 9, 9, 4, 5, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3017292293213014, 2.304055138727646, 2.301199562844662, 2.302207639739813, 2.3027276822116476, 2.301927470858575], "accuracy": [0.09628847241401672, 0.08585391938686371, 0.09153348207473755, 0.08968432247638702, 0.09126931428909302, 0.08849557489156723], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 8, 6, 5, 5, 5, 0, 2, 0, 6, 5, 7, 5, 0, 2, 2, 4, 4, 8, 3], [0, 2, 0, 1, 2, 1, 1, 2, 1, 2, 2, 2], [92, 80, 61], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 7, 1, 4, 6, 2, 1, 9, 2, 2, 3, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 3, 3, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [21, 41, 37, 7, 45, 13], [0], [1, 1, 1], [9], [6, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [3, 3, 2, 1, 0, 0, 2, 2], [9, 9, 76, 58]], "fitness": -0.03285714238882065, "mapping_values": [1, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.302198475944903, 2.3062553499290073, 2.30504481160425, 2.307976251642985, 2.3110524600664735, 2.313269701364286], "accuracy": [0.0944393053650856, 0.08281600475311279, 0.08849557489156723, 0.08387266844511032, 0.07898560166358948, 0.07475894689559937], "val_loss": [1.9722395624433244, 1.9738376481192452, 1.9752535820007324, 1.9769171987261092, 1.9789047922406877, 1.9812203816005163], "val_accuracy": [0.0273333340883255, 0.02199999988079071, 0.022333333268761635, 0.01966666616499424, 0.018666666001081467, 0.026000000536441803]}}]