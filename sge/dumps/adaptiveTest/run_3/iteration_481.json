[{"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 2, 3, 3, 9, 3, 3, 1, 6, 2, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 32, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8174285888671875, "mapping_values": [1, 49, 49, 29, 20, 7, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, grad))))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, grad)))), grad))))), grad)), alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.215163852119521, 2.0865548002469527, 1.4841022385645222, 1.3325786552629482, 1.003188135255172, 0.9241880051542692, 0.8550138304561372, 0.7575910993145757, 0.7026908127402806, 0.6654757104687105, 0.6647616679547815, 0.641968078782388, 0.6121535584234118, 0.6117599143202216, 0.5822330925915267, 0.607381738770545, 0.5927045183914874, 0.5414594546710306, 0.5410891712034667, 0.5338097110620942, 0.5000421550799481, 0.5107248143560268, 0.5096892677577196, 0.4931644515008061, 0.47898990339402114, 0.47947169522473276, 0.4735959112337158, 0.44829997255376713, 0.4702189788212472], "accuracy": [0.2685246467590332, 0.2883370816707611, 0.4613657295703888, 0.5247655510902405, 0.639809787273407, 0.6572447419166565, 0.6828688383102417, 0.7084929347038269, 0.7272487282752991, 0.7391361594200134, 0.7437590956687927, 0.752212405204773, 0.7687227725982666, 0.7637035846710205, 0.7771760821342468, 0.7716285586357117, 0.778232753276825, 0.7921014428138733, 0.789459764957428, 0.7975168228149414, 0.8144234418869019, 0.807158887386322, 0.8074230551719666, 0.8129705190658569, 0.8187822103500366, 0.8202351331710815, 0.8169330358505249, 0.8334434032440186, 0.8191784620285034], "val_loss": [1.9611823218209403, 1.6017015661512102, 1.212651320866176, 0.8225283963339669, 0.8310354777744838, 0.6866974830627441, 0.635228157043457, 0.5514397280556815, 0.5470635720661708, 0.584149820463998, 0.5096308503832135, 0.49189722537994385, 0.47273850440979004, 0.5114187172480992, 0.4881439208984375, 0.47983271735055105, 0.4465282814843314, 0.4473137855529785, 0.4505919303212847, 0.42703868661608013, 0.48648697989327566, 0.464154737336295, 0.4532862901687622, 0.4095013567379543, 0.46789378779275076, 0.42638524941035677, 0.40292742422648836, 0.3986509953226362, 0.4062407101903643], "val_accuracy": [0.1550000011920929, 0.3973333239555359, 0.4723333418369293, 0.6786666512489319, 0.628000020980835, 0.6726666688919067, 0.6856666803359985, 0.7326666712760925, 0.737333357334137, 0.7250000238418579, 0.7639999985694885, 0.7703333497047424, 0.7866666913032532, 0.765666663646698, 0.7776666879653931, 0.778333306312561, 0.8033333420753479, 0.8023333549499512, 0.8073333501815796, 0.8233333230018616, 0.8013333082199097, 0.7919999957084656, 0.7863333225250244, 0.8259999752044678, 0.7746666669845581, 0.8199999928474426, 0.8240000009536743, 0.824999988079071, 0.8163333535194397]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.806857168674469, "mapping_values": [1, 48, 48, 29, 19, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, grad)), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, grad)))), grad))))), grad)), alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))))))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.13349552266964, 1.4157645903904645, 1.110473141245413, 0.9762773467895771, 0.8458848984061041, 0.8248281889446124, 0.7657233745335997, 0.7415117598118453, 0.7119657548190959, 0.6894806421995006, 0.6690752053257654, 0.6543403786911295, 0.6397145442628211, 0.6629906024332642, 0.6242448078201999, 0.6350341916178762, 0.6180530414132867, 0.6058285047569925, 0.5975556112378108, 0.5990826664599508, 0.5707506268818964, 0.5623642110459289, 0.5713235519471154, 0.5647032924568207, 0.5678464888723346], "accuracy": [0.3019416332244873, 0.5116893649101257, 0.6042794585227966, 0.6469422578811646, 0.6931713223457336, 0.6893408894538879, 0.7128516435623169, 0.7238145470619202, 0.7293620109558105, 0.735041618347168, 0.7479857206344604, 0.748778223991394, 0.7607977986335754, 0.7458723783493042, 0.7618544697761536, 0.759609043598175, 0.7626469135284424, 0.7656848430633545, 0.7734777331352234, 0.7692511081695557, 0.7858935594558716, 0.7825914621353149, 0.7814027070999146, 0.7889314293861389, 0.7864218950271606], "val_loss": [1.331265960420881, 1.0915629523141044, 0.7253832476479667, 0.698255181312561, 0.6390008926391602, 0.6429101569311959, 0.574564916746957, 0.5725951535361153, 0.5585319314684186, 0.5351892539433071, 0.5255140577043805, 0.5237562826701573, 0.5029625041144234, 0.5125968115670341, 0.5105526106698173, 0.49944337776729036, 0.4883958101272583, 0.5060454607009888, 0.48822055544172016, 0.48184541293552946, 0.47297862597874235, 0.48150590487888884, 0.4716654505048479, 0.45471228872026714, 0.46638056210109163], "val_accuracy": [0.5450000166893005, 0.5496666431427002, 0.6959999799728394, 0.7066666483879089, 0.7020000219345093, 0.7160000205039978, 0.7459999918937683, 0.7423333525657654, 0.7513333559036255, 0.7603333592414856, 0.7639999985694885, 0.7576666474342346, 0.7706666588783264, 0.765666663646698, 0.7703333497047424, 0.7773333191871643, 0.7883333563804626, 0.7703333497047424, 0.7906666398048401, 0.7940000295639038, 0.7910000085830688, 0.7850000262260437, 0.7916666865348816, 0.7919999957084656, 0.7889999747276306]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [1, 9, 1, 3, 2, 6, 3, 2, 6, 6, 4, 7, 8, 9, 2, 0, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [2, 1, 1, 0, 2, 2, 2, 2, 0, 2, 2, 1, 2, 0, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8045714497566223, "mapping_values": [1, 34, 34, 20, 14, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(grad, grad))))))), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, alpha), grad))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1334953405255295, 1.4159711553687984, 1.1076769982236425, 0.9713024711013706, 0.8451555853018498, 0.823723307012992, 0.7666152681357762, 0.7441115596227957, 0.7063723720453671, 0.690270307521936, 0.6665574249228026, 0.654700156601901, 0.6506210160434931, 0.6541950646062112, 0.6193594841704534, 0.636650428662069, 0.6179965629852868, 0.6025823126017472, 0.5953317654524907, 0.5980235516686465, 0.5702385186771155, 0.5649994659449021, 0.5744166873811715, 0.5644855745369968, 0.5644184800895481, 0.542516287346841, 0.5672444157029786, 0.5391278152673031, 0.5323156672792506, 0.5261630006611796, 0.5196592327374131, 0.5416681803826879, 0.511637644831688], "accuracy": [0.3019416332244873, 0.5114251971244812, 0.6052040457725525, 0.6472064256668091, 0.6917183995246887, 0.6884163022041321, 0.7162858247756958, 0.7238145470619202, 0.7275128960609436, 0.7354378700256348, 0.7500990629196167, 0.7520803213119507, 0.752740740776062, 0.7474573850631714, 0.7655527591705322, 0.7592127919197083, 0.763439416885376, 0.7655527591705322, 0.7741381525993347, 0.7721568942070007, 0.7874785661697388, 0.7820631265640259, 0.780610203742981, 0.7877426743507385, 0.789459764957428, 0.7942147850990295, 0.7837802171707153, 0.7902522683143616, 0.7956677079200745, 0.8043851256370544, 0.8050455451011658, 0.7878747582435608, 0.8082155585289001], "val_loss": [1.3312640190124512, 1.0876124926975794, 0.7273727314812797, 0.6821414913449969, 0.6454732077462333, 0.634772709437779, 0.5771352733884539, 0.5746545280729022, 0.5663948229381016, 0.5401427234922137, 0.5184166942323957, 0.5284524304526192, 0.5407768658229283, 0.5122043916157314, 0.5255892957959857, 0.5005519219807216, 0.49075046607426237, 0.5001675060817173, 0.49723771640232634, 0.48263577052525114, 0.4755881684167044, 0.494355354990278, 0.47179765360695974, 0.4565739120755877, 0.4663812092372349, 0.47062550272260395, 0.45372094426836285, 0.4368222951889038, 0.4501303434371948, 0.4460247073854719, 0.4753509078707014, 0.44391422612326487, 0.43592688015529085], "val_accuracy": [0.5446666479110718, 0.5463333129882812, 0.6963333487510681, 0.7146666646003723, 0.6963333487510681, 0.7283333539962769, 0.7446666955947876, 0.7369999885559082, 0.7450000047683716, 0.7576666474342346, 0.7710000276565552, 0.7576666474342346, 0.7483333349227905, 0.7670000195503235, 0.7639999985694885, 0.7803333401679993, 0.7826666831970215, 0.7760000228881836, 0.7796666622161865, 0.7889999747276306, 0.7886666655540466, 0.777999997138977, 0.7910000085830688, 0.7926666736602783, 0.7929999828338623, 0.8006666898727417, 0.7986666560173035, 0.8100000023841858, 0.7929999828338623, 0.8019999861717224, 0.7786666750907898, 0.7996666431427002, 0.809333324432373]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [8, 6, 9, 3, 2, 0, 9, 2, 9, 6, 5, 7, 2, 3, 2, 0, 2, 1, 0, 2, 0, 9, 3, 1, 3, 2, 0, 8, 9, 8], [2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.8022857308387756, "mapping_values": [1, 6, 6, 4, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), alpha))))), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.133495558632395, 1.4156812200960687, 1.1108530714306866, 0.9772336346645554, 0.8471344710026183, 0.8209871901591629, 0.7566243076069386, 0.728210333300273, 0.6963334278329142, 0.701190775049487, 0.6685494797703077, 0.6577718813878166, 0.6469793227748344, 0.6676932265178764, 0.6167179801366144, 0.6388026009366781, 0.6159555771252924, 0.6031120508385687, 0.5953294267003815, 0.5990232061779243, 0.5717840564406826, 0.5645393461929793, 0.5746420581720887, 0.5651276838337, 0.5644256587451113, 0.5419889203923616, 0.5676620620006521, 0.5388300639212233, 0.5281400335557772, 0.5275822052818956, 0.5201997677325069, 0.5354405937256547, 0.5133980146693263], "accuracy": [0.3019416332244873, 0.5116893649101257, 0.6050719618797302, 0.6469422578811646, 0.6917183995246887, 0.6902654767036438, 0.722229540348053, 0.7263241410255432, 0.7351737022399902, 0.7334566116333008, 0.752740740776062, 0.7503632307052612, 0.7541936039924622, 0.7448157668113708, 0.7684586048126221, 0.7539294958114624, 0.7606657147407532, 0.7643640041351318, 0.7740060687065125, 0.7716285586357117, 0.7829877138137817, 0.783119797706604, 0.7775723338127136, 0.787082314491272, 0.7869502305984497, 0.7931581139564514, 0.7794214487075806, 0.7915731072425842, 0.7981772422790527, 0.8034605979919434, 0.8050455451011658, 0.793422281742096, 0.8078193068504333], "val_loss": [1.3312651089259557, 1.0950310911451067, 0.7217754636492048, 0.691062433379037, 0.6347092390060425, 0.6327114275523594, 0.5607000929968697, 0.5531497342245919, 0.6146397250039237, 0.5330372026988438, 0.5237897634506226, 0.5314225469316755, 0.550734451838902, 0.511076739856175, 0.5242563145501273, 0.4988904169627598, 0.4881600482123239, 0.5075794288090297, 0.4935011182512556, 0.48039121287209646, 0.4750767605645316, 0.49383916173662457, 0.4720040389469692, 0.4704058851514544, 0.4601748841149466, 0.46709489822387695, 0.4517493758882795, 0.43775161675044466, 0.4475846801485334, 0.4430943727493286, 0.43898686340876986, 0.4379216091973441, 0.4327417441776821], "val_accuracy": [0.5446666479110718, 0.5536666512489319, 0.6990000009536743, 0.7080000042915344, 0.7066666483879089, 0.7260000109672546, 0.7523333430290222, 0.7523333430290222, 0.7110000252723694, 0.7616666555404663, 0.7676666378974915, 0.7599999904632568, 0.746999979019165, 0.7673333287239075, 0.762333333492279, 0.7816666960716248, 0.7856666445732117, 0.7739999890327454, 0.7879999876022339, 0.7910000085830688, 0.7903333306312561, 0.7763333320617676, 0.7896666526794434, 0.7839999794960022, 0.8046666383743286, 0.8006666898727417, 0.7996666431427002, 0.8100000023841858, 0.7983333468437195, 0.8043333292007446, 0.8053333163261414, 0.8059999942779541, 0.8100000023841858]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7977142930030823, "mapping_values": [1, 20, 20, 11, 9, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad))))), grad)))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1364709858597704, 1.422185434940516, 1.1500893612862766, 0.9439668611622978, 0.8847998938996952, 0.8297055973163953, 0.7818732549249535, 0.7675064681559159, 0.7361463575299547, 0.703758361167628, 0.6809976334978702, 0.700563648483615, 0.6582574078183621, 0.6622119003661069, 0.6647004691475277, 0.6189148172710581, 0.6253316207033469, 0.6134776448797257, 0.613797972325431, 0.5984513775909645, 0.598461050178554, 0.5828976229260295, 0.5720050477820963, 0.5583133655705425, 0.5748337366719208, 0.5541032698994945, 0.5653186766399982], "accuracy": [0.2953374683856964, 0.5169726610183716, 0.5849953889846802, 0.6573768258094788, 0.677189290523529, 0.6913221478462219, 0.7028133869171143, 0.7084929347038269, 0.724210798740387, 0.7401928305625916, 0.7430986762046814, 0.7281733155250549, 0.7549861073493958, 0.750759482383728, 0.7520803213119507, 0.7662131786346436, 0.7630431652069092, 0.7680623531341553, 0.7671377658843994, 0.7746664881706238, 0.778761088848114, 0.7798177003860474, 0.78113853931427, 0.7922335267066956, 0.7860256433486938, 0.791969358921051, 0.7887993454933167], "val_loss": [1.335881233215332, 0.8789206913539341, 0.7346348421914237, 0.6635044131960187, 0.6354999542236328, 0.5828654425484794, 0.592605607850211, 0.5612534965787616, 0.5665989603315081, 0.5518572841371808, 0.5631237540926252, 0.5109317813600812, 0.5105982507978167, 0.5497528144291469, 0.5208817379815238, 0.4918168442589896, 0.49782322134290424, 0.4996101515633719, 0.4833815438406808, 0.5015252488000053, 0.4865561383111136, 0.46299382618495394, 0.48350761617933, 0.476561222757612, 0.4586353131702968, 0.48046198913029264, 0.4479623522077288], "val_accuracy": [0.6446666717529297, 0.6710000038146973, 0.6793333292007446, 0.7070000171661377, 0.7266666889190674, 0.7413333058357239, 0.7266666889190674, 0.7509999871253967, 0.7266666889190674, 0.7456666827201843, 0.7366666793823242, 0.7696666717529297, 0.7683333158493042, 0.7390000224113464, 0.7696666717529297, 0.784333348274231, 0.7773333191871643, 0.7723333239555359, 0.7906666398048401, 0.7760000228881836, 0.7786666750907898, 0.7993333339691162, 0.7713333368301392, 0.7873333096504211, 0.7976666688919067, 0.7906666398048401, 0.7950000166893005]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 80, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [48, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7785714268684387, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1447353103393576, 1.4492328106341439, 1.1073089948089099, 0.9649903586260032, 0.8531445272531586, 0.8356879120883279, 0.7893958671879318, 0.7586154296429339, 0.7128938699064631, 0.7000791711530759, 0.702955329037141, 0.6731305125445863, 0.654735483277381, 0.6514809349067868, 0.643551019149418, 0.6273237923117141, 0.6185475557062368, 0.6160173209950184], "accuracy": [0.2957337200641632, 0.49689605832099915, 0.6096948981285095, 0.6441685557365417, 0.6919825673103333, 0.6877558827400208, 0.6991150379180908, 0.7231541275978088, 0.733588695526123, 0.7384757399559021, 0.7288337349891663, 0.7440232634544373, 0.7530049085617065, 0.7557786107063293, 0.7593448758125305, 0.7621186375617981, 0.765949010848999, 0.7648923397064209], "val_loss": [1.3550616332462855, 0.8461817502975464, 0.8292651517050607, 0.6867629289627075, 0.6412943090711322, 0.6352645839963641, 0.5743594680513654, 0.5876303230013166, 0.5501314571925572, 0.5695944172995431, 0.5320031813212803, 0.5520798989704677, 0.5057946954454694, 0.5743847063609532, 0.5375400270734515, 0.5177791629518781, 0.5281441381999424, 0.5261813742773873], "val_accuracy": [0.5540000200271606, 0.6570000052452087, 0.6146666407585144, 0.7043333053588867, 0.7239999771118164, 0.7293333411216736, 0.7436666488647461, 0.7473333477973938, 0.746666669845581, 0.7393333315849304, 0.7636666893959045, 0.7543333172798157, 0.7733333110809326, 0.746999979019165, 0.7516666650772095, 0.7730000019073486, 0.7523333430290222, 0.7506666779518127]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [6, 6, 0, 1, 2, 6, 3, 6, 3, 2, 5, 7, 6, 3, 2, 4, 9, 0, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 84, 98, 30, 42, 68], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [6, 74, 76, 58]], "fitness": -0.7691428661346436, "mapping_values": [1, 32, 32, 18, 14, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))))))), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, grad)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.291161046099307, 2.265643858087691, 2.2372455582752866, 2.2012773906990932, 2.15165627964767, 2.083256787029413, 1.9946971258640351, 1.8871769128206652, 1.76249836384266, 1.640775368355678, 1.5143024245147392, 1.4275581876694046, 1.3429287761634823, 1.2889815281725767, 1.2270105251341983, 1.175387297560274, 1.1312114666040785, 1.1093573866267135, 1.0771774493030914, 1.0485452641002915, 1.0184164168324217, 1.002793680738228, 0.9650936886666237, 0.9595788893619659, 0.9475722851738749, 0.9294642651274755, 0.91466284478424, 0.9069916172317936, 0.898313471213182, 0.885931220021246, 0.8749490482475559, 0.8628491599955627, 0.8582339479135658, 0.8420668118633945, 0.8377069266339051, 0.8289417313735845, 0.8285969873586934, 0.8232333930791125, 0.8146930950476178, 0.8105438695277016, 0.8104434381811736, 0.7966431896637113, 0.7888793379339984, 0.7922846862684387, 0.7807596274465224, 0.770017067557234, 0.7685368591532054, 0.7569035860950826, 0.7475593907092115, 0.7554292243075896, 0.7580766221236528, 0.7474814528377222, 0.7376464612101992, 0.7316957095264207, 0.735209691793754, 0.7277360019462141, 0.7214923192481355, 0.728419918575307, 0.7260591419082292, 0.7269960694923345, 0.7225259168587971, 0.7081243349119909, 0.711240306608807, 0.7047345393589852, 0.7057091155229794, 0.7027407428450226, 0.6940609022232961, 0.6996668789128838, 0.6923892022738005, 0.6997877266649178, 0.6818934332630056, 0.6903416108319851, 0.6856544802548186, 0.6847402662995343, 0.6712776061377238, 0.6783804395699214, 0.6753049744213137, 0.6729235471499484, 0.6683694781990666, 0.6776947404698704, 0.6684475220378678, 0.663233254815861, 0.6679539617026534, 0.6553443662793708, 0.6591187884558493], "accuracy": [0.11874257028102875, 0.18584071099758148, 0.24686303734779358, 0.29745081067085266, 0.3451327383518219, 0.38964468240737915, 0.41447630524635315, 0.4434024691581726, 0.4649319648742676, 0.4865935742855072, 0.5156518220901489, 0.5325584411621094, 0.5584467053413391, 0.5592392086982727, 0.5848633050918579, 0.594241201877594, 0.6069211363792419, 0.6106194853782654, 0.6222427487373352, 0.6353189945220947, 0.6481310129165649, 0.6513010263442993, 0.6642451286315918, 0.6600185036659241, 0.6635847091674805, 0.669792652130127, 0.6799629926681519, 0.6770572066307068, 0.6831330060958862, 0.6877558827400208, 0.6869634389877319, 0.6948884129524231, 0.6929071545600891, 0.6992471218109131, 0.7045304179191589, 0.7013604640960693, 0.695813000202179, 0.7071720957756042, 0.7063795924186707, 0.7049266695976257, 0.705058753490448, 0.7051908373832703, 0.7177387475967407, 0.715889573097229, 0.7180029153823853, 0.7219653725624084, 0.7189275026321411, 0.7194558382034302, 0.7263241410255432, 0.7172104120254517, 0.722229540348053, 0.7230220437049866, 0.7322678565979004, 0.7312111854553223, 0.7297582626342773, 0.7312111854553223, 0.7386078238487244, 0.7327961921691895, 0.7346453666687012, 0.7300224304199219, 0.733060359954834, 0.7415136694908142, 0.7363624572753906, 0.746268630027771, 0.7456082701683044, 0.7497028112411499, 0.7417778372764587, 0.7420420050621033, 0.7466648817062378, 0.7390040755271912, 0.7490423917770386, 0.7415136694908142, 0.7460044622421265, 0.750231146812439, 0.7518161535263062, 0.7512878179550171, 0.750231146812439, 0.7519482374191284, 0.7500990629196167, 0.7519482374191284, 0.7574957013130188, 0.7526086568832397, 0.7514199018478394, 0.755118191242218, 0.7580240368843079], "val_loss": [1.947472367967878, 1.9222946848188127, 1.891390596117292, 1.8511862754821777, 1.7964491844177246, 1.7215446063450404, 1.6255427088056291, 1.5083397797175817, 1.3808646542685372, 1.2564991201673235, 1.1425636155264718, 1.0516609804970878, 0.9777403218405587, 0.9222071511404855, 0.8749803815569196, 0.835115807397025, 0.8028919867106846, 0.7776780298777989, 0.7575173718588692, 0.7375256504331317, 0.7200924839292254, 0.706074561391558, 0.6920782157352993, 0.679869532585144, 0.6698197296687535, 0.6613844122205462, 0.6513820375714984, 0.6442523683820452, 0.6388951880591256, 0.6318187032427106, 0.6252046142305646, 0.6192253317151751, 0.6143275499343872, 0.6080511638096401, 0.6029933861323765, 0.5999581984111241, 0.5958799975258964, 0.5926720074244908, 0.5884657417024884, 0.5859675748007638, 0.5811291422162738, 0.5798564979008266, 0.5750002009528024, 0.5708695820399693, 0.5678414106369019, 0.5658046347754342, 0.5631493330001831, 0.5605219432285854, 0.5599502495356968, 0.5556230885641915, 0.5522785357066563, 0.5492392608097622, 0.547614301953997, 0.5438649484089443, 0.5438539470945086, 0.541352493422372, 0.5377361093248639, 0.537472128868103, 0.5364536217280796, 0.5332544020244053, 0.5316827637808663, 0.5289536203656878, 0.5293094771248954, 0.5273890665599278, 0.5242001669747489, 0.5249695948192051, 0.522127662386213, 0.518851637840271, 0.5177116394042969, 0.5159210988453456, 0.5136340686253139, 0.5145904166357858, 0.5115975141525269, 0.5111761093139648, 0.5082131624221802, 0.507400495665414, 0.5058061225073678, 0.5053906611033848, 0.5032811846051898, 0.5034077337809971, 0.5029229947498867, 0.5008853503635952, 0.4978395700454712, 0.4972479854311262, 0.49726319313049316], "val_accuracy": [0.23866666853427887, 0.3453333377838135, 0.40433332324028015, 0.45133334398269653, 0.48500001430511475, 0.5226666927337646, 0.5456666946411133, 0.5490000247955322, 0.5676666498184204, 0.5849999785423279, 0.6143333315849304, 0.6453333497047424, 0.6636666655540466, 0.6769999861717224, 0.6809999942779541, 0.6859999895095825, 0.6946666836738586, 0.6953333616256714, 0.7016666531562805, 0.7089999914169312, 0.7110000252723694, 0.715666651725769, 0.718666672706604, 0.7239999771118164, 0.7223333120346069, 0.7266666889190674, 0.7293333411216736, 0.7323333621025085, 0.7316666841506958, 0.7356666922569275, 0.734666645526886, 0.7383333444595337, 0.7396666407585144, 0.7426666617393494, 0.7426666617393494, 0.7409999966621399, 0.7436666488647461, 0.7450000047683716, 0.7440000176429749, 0.7476666569709778, 0.7476666569709778, 0.7459999918937683, 0.7480000257492065, 0.7493333220481873, 0.7519999742507935, 0.753000020980835, 0.7559999823570251, 0.7549999952316284, 0.7549999952316284, 0.7576666474342346, 0.7559999823570251, 0.7593333125114441, 0.7590000033378601, 0.7563333511352539, 0.7606666684150696, 0.7639999985694885, 0.762333333492279, 0.7586666941642761, 0.7583333253860474, 0.7649999856948853, 0.7636666893959045, 0.7646666765213013, 0.7649999856948853, 0.7666666507720947, 0.7689999938011169, 0.7683333158493042, 0.7696666717529297, 0.7696666717529297, 0.7693333625793457, 0.768666684627533, 0.7699999809265137, 0.768666684627533, 0.7696666717529297, 0.7710000276565552, 0.7699999809265137, 0.7753333449363708, 0.7770000100135803, 0.7736666798591614, 0.7786666750907898, 0.7789999842643738, 0.7746666669845581, 0.7739999890327454, 0.778333306312561, 0.7756666541099548, 0.7773333191871643]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [5, 5, 3, 3, 2, 3, 9, 2, 1, 0, 5, 7, 2, 0, 2, 1, 1, 1, 0, 1, 5, 9, 3, 1, 0, 1, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 98, 91, 38, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [3, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [60, 74, 76, 58]], "fitness": -0.46457141637802124, "mapping_values": [1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.559777993095266, 2.6858075445732186, 2.3070275134823626, 2.303880297607041, 2.3010753011344494, 2.26252370783839, 2.3091568027300338, 2.0801987720597075, 2.2505084622128293, 2.3045752435202265, 2.3035700677046136, 2.302962255799114, 2.302906289470352], "accuracy": [0.19495442509651184, 0.15863162279129028, 0.09906221181154251, 0.1006472036242485, 0.109232597053051, 0.20499274134635925, 0.09879804402589798, 0.25584468245506287, 0.18240654468536377, 0.1010434553027153, 0.09787346422672272, 0.09747721254825592, 0.09325055778026581], "val_loss": [1.9535117830548967, 1.9791605813162667, 1.9742860794067383, 1.9732362883431571, 1.9670626776559013, 1.9891698701041085, 1.968886034829276, 1.5307445185525077, 1.9758969715663366, 1.9742418697902135, 1.9737614222935267, 1.9737330164228166, 1.9737789971487862], "val_accuracy": [0.1146666631102562, 0.10133333504199982, 0.10066666454076767, 0.09966666996479034, 0.20800000429153442, 0.09833333641290665, 0.1276666671037674, 0.3956666588783264, 0.10233332961797714, 0.09666666388511658, 0.10066666454076767, 0.10066666454076767, 0.09866666793823242]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 9, 6, 4, 1, 6, 5, 2, 1, 6, 5, 7, 6, 2, 2, 1, 2, 1, 4, 4, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 2, 1, 2, 1, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [42, 27, 63, 88, 42, 68, 83, 50, 30], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [59, 74, 76, 58]], "fitness": -0.11485714465379715, "mapping_values": [1, 50, 50, 29, 21, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, alpha)), grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))))))))))))))), tf.math.add(alpha, grad))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.5561446308097695, 2.40238609790739, 2.306198432287756, 2.3030693509622475, 2.3003223377558313, 2.271209489148228, 2.312976664240964, 2.303660916079147, 2.3035387708809805, 2.3029371522216433], "accuracy": [0.19878484308719635, 0.16972659528255463, 0.1010434553027153, 0.10315678268671036, 0.1200634017586708, 0.2673358917236328, 0.09998679161071777, 0.0956280529499054, 0.10077928751707077, 0.1002509593963623], "val_loss": [1.9615171296255929, 1.9796804700578963, 1.9742208889552526, 1.9730546815054757, 1.9583638054983956, 2.0097603797912598, 1.9739415305001395, 1.9736371721540178, 1.9735710961478097, 1.9737095151628767], "val_accuracy": [0.16500000655651093, 0.10133333504199982, 0.10233332961797714, 0.10433333367109299, 0.20933333039283752, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.09666666388511658]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 8, 3, 3, 3, 1, 3, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 1, 2, 2, 0, 1, 2, 1], [81, 48, 41, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [4, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 28, 20, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), grad))), tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), grad)))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.multiply(alpha, tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, grad)), grad))))))), tf.math.add(alpha, alpha))), grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302476191486051, 2.306205823200726, 2.3775802638316277, 3.5196778894872116, 9.629475844361448, 17.332659002497305, 25.039831750759156], "accuracy": [0.1088363528251648, 0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9744062423706055, 1.988269260951451, 2.213201250348772, 5.516181673322405, 12.05720819745745, 18.63016128540039, 25.20047923496791], "val_accuracy": [0.09833333641290665, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 0, 3, 2, 6, 3, 6, 3, 4, 5, 7, 6, 3, 2, 4, 9, 0, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 0, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 2, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 27, 14, 13, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))))))))), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha)), grad)), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 6, 0, 3, 3, 2, 3, 6, 2, 4, 5, 7, 6, 6, 2, 1, 6, 8, 0, 5, 0, 8, 3, 1, 1, 2, 0, 8, 9, 8], [0, 1, 2, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [74, 48, 80, 88, 4, 68, 14], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [4, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 29, 19, 7, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.negative(grad))))))), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)))))))), tf.math.add(alpha, grad))), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 3, 1, 9, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [1], [0, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [2.3030308039905436, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [3, 3, 2, 3, 5, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 98, 91, 38, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 2, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06551314145326614, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 2, 9, 3, 2, 1, 6, 5, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 73, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [9, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 11, 9, 2, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad)))))), alpha))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [1, 9, 9, 3, 1, 6, 3, 2, 1, 6, 5, 7, 8, 9, 4, 1, 2, 4, 9, 4, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 1, 1, 2, 2, 1, 2, 2, 0, 1, 2, 1], [81, 48, 52, 88, 4, 68, 12], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [94, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 2, 2, 1, 0, 0, 2, 2], [30, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030308039905436, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [5, 3, 8, 3, 2, 9, 3, 3, 1, 6, 2, 7, 2, 2, 2, 1, 0, 1, 0, 2, 0, 8, 3, 6, 3, 0, 0, 8, 5, 8], [2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 88, 62, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [90], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 8, 8, 6, 0, 4, 5, 6, 0, 9], [1, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 43, 43, 25, 18, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), grad)))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), grad))))), alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [8, 6, 2, 3, 2, 0, 9, 2, 1, 6, 5, 7, 2, 0, 2, 0, 2, 1, 0, 2, 0, 9, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [4, 27, 63, 88, 42, 68, 83, 50, 30], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 0, 2, 1, 0, 0, 2, 2], [59, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 16, 10, 1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 4, 2, 2, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [802636101.4758894, 15419038900.021662, 71060249115.65923, 200518730182.44986, 428590266204.34393, 781454339889.8745], "accuracy": [0.1014397069811821, 0.09866596013307571, 0.10170386731624603, 0.09245806187391281, 0.09959053993225098, 0.09642054885625839], "val_loss": [3043899465.142857, 24342836370.285713, 82147569078.85715, 194708532662.85715, 380278950180.5714, 657106852717.7142], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 6, 0, 3, 3, 6, 3, 6, 1, 4, 5, 7, 6, 3, 2, 1, 9, 0, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [0, 1, 2, 0, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 80, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [9, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 10, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, grad)))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), alpha))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030308039905436, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 6, 0, 0, 8, 6, 3, 6, 1, 4, 5, 7, 6, 3, 2, 1, 9, 0, 0, 2, 0, 8, 3, 1, 3, 2, 0, 8, 9, 8], [1, 1, 2, 0, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 87, 80, 88, 4, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [0, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 4, 2, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(alpha)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))))), grad), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [190560454.14168248, 28593366346.152424, 483311057459.46375, 3455969321248.9004, 15237409221941.324, 49844889623919.21], "accuracy": [0.1014397069811821, 0.09866596013307571, 0.10170386731624603, 0.09259014576673508, 0.09959053993225098, 0.09615638852119446], "val_loss": [1574424356.5714285, 84831092736.0, 910429145380.5714, 4963244104557.714, 18590472339456.0, 54835707342262.86], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]