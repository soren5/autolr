[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 6, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.8151428699493408, "mapping_values": [1, 9, 9, 5, 4, 2, 2, 2, 1, 1, 0, 5, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1090397394690705, 1.8130723711616406, 1.3720888951514076, 1.1088776899807489, 0.8996714559906368, 0.8230788280084983, 0.7739694901917825, 0.6863979880898904, 0.6826272391923399, 0.6747150201965018, 0.6332479952474737, 0.6120737842391778, 0.587618244172969, 0.5732900454399372, 0.5597159522415199, 0.5428909201269939, 0.5296367489430316, 0.5485787963146043, 0.5097701575706947, 0.5225064330931747, 0.4881890665908547, 0.46087095799966965, 0.45784675808488856, 0.4585863337808392, 0.4543625333360819, 0.44500899935647276, 0.44743459086691495, 0.42438982106108536, 0.4111713605817629, 0.4057892210384984, 0.4090031197184128, 0.4044967373529713, 0.38760319154937395, 0.38437943938952773, 0.3848075958023202, 0.36947028076549515, 0.3650318972304859, 0.3705906060865889, 0.35046955569545274, 0.34746522669857677, 0.3263752899818952, 0.35062137734242843, 0.3195386873992395, 0.32715813684709133, 0.315511014325791, 0.31424486588304384, 0.32971029762011855, 0.3163785903154032, 0.29415527119565366, 0.31708336022898126, 0.31046724136022763], "accuracy": [0.2937524616718292, 0.4220050275325775, 0.5278034806251526, 0.5952978730201721, 0.6660943031311035, 0.6900013089179993, 0.6993792057037354, 0.7408532500267029, 0.7475894689559937, 0.7396644949913025, 0.7593448758125305, 0.7637035846710205, 0.7703077793121338, 0.7844406366348267, 0.7821952104568481, 0.7960638999938965, 0.7973847389221191, 0.7901201844215393, 0.807158887386322, 0.7993659973144531, 0.8148196935653687, 0.8267071843147278, 0.8274996876716614, 0.8310658931732178, 0.8294808864593506, 0.835160493850708, 0.8317263126373291, 0.8416325449943542, 0.8433496356010437, 0.8454629778862, 0.8441421389579773, 0.8451988101005554, 0.8595958352088928, 0.8564258217811584, 0.8533879518508911, 0.8599920868873596, 0.8639545440673828, 0.8602562546730042, 0.8726720213890076, 0.8683133125305176, 0.8813894987106323, 0.8696341514587402, 0.8782195448875427, 0.8754457831382751, 0.8836349248886108, 0.8862766027450562, 0.874389111995697, 0.8799365758895874, 0.8885219693183899, 0.8774270415306091, 0.8844274282455444], "val_loss": [1.635483639580863, 1.5477179459163122, 0.8927445752280099, 0.847314715385437, 0.6908089092799595, 0.65517486844744, 0.5743376357214791, 0.5839225053787231, 0.5841919524329049, 0.5330361468451363, 0.5012432336807251, 0.5204985312053135, 0.5323040996279035, 0.4496760198048183, 0.4554396186556135, 0.4446712391717093, 0.5141861609050206, 0.43266756193978445, 0.4169973986489432, 0.44343330178942, 0.4038817286491394, 0.4075842244284494, 0.4138057402202061, 0.4144944293158395, 0.38882834570748465, 0.40348823581423077, 0.38345558302743094, 0.39062653269086567, 0.39083477428981234, 0.39617118665150236, 0.37652980429785593, 0.3762473038264683, 0.37331548758915495, 0.3866542066846575, 0.36847654410770964, 0.36405073744910105, 0.3576260209083557, 0.37250414064952303, 0.3546631336212158, 0.3512722764696394, 0.38729231698172434, 0.3547886439732143, 0.3723928247179304, 0.35113377230507986, 0.3499329260417393, 0.3460683141435896, 0.3483613814626421, 0.35267103569848196, 0.38749521119253977, 0.339828406061445, 0.34932240418025423], "val_accuracy": [0.4946666657924652, 0.41333332657814026, 0.5879999995231628, 0.6570000052452087, 0.6660000085830688, 0.6723333597183228, 0.7440000176429749, 0.7570000290870667, 0.7233333587646484, 0.7443333268165588, 0.7689999938011169, 0.7463333606719971, 0.7523333430290222, 0.8050000071525574, 0.8013333082199097, 0.8043333292007446, 0.7456666827201843, 0.7983333468437195, 0.8259999752044678, 0.79666668176651, 0.831333339214325, 0.8173333406448364, 0.8169999718666077, 0.8270000219345093, 0.8360000252723694, 0.8220000267028809, 0.8323333263397217, 0.8263333439826965, 0.8363333344459534, 0.828000009059906, 0.8450000286102295, 0.846666693687439, 0.846666693687439, 0.8460000157356262, 0.8463333249092102, 0.8543333411216736, 0.8500000238418579, 0.8456666469573975, 0.8556666374206543, 0.8546666502952576, 0.8433333039283752, 0.8486666679382324, 0.8450000286102295, 0.8610000014305115, 0.859666645526886, 0.8619999885559082, 0.859333336353302, 0.8483333587646484, 0.8513333201408386, 0.859000027179718, 0.8576666712760925]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.8042857050895691, "mapping_values": [1, 10, 10, 6, 4, 2, 2, 2, 1, 1, 0, 5, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1090569364207377, 1.8115414210345846, 1.3690714199057092, 0.9700984955778715, 0.9360112697614292, 0.8556651190885731, 0.8086067527087767, 0.7162301770967814, 0.705018284156763, 0.6760219579217865, 0.6378739022969286, 0.6170267662698441, 0.5958747094286242, 0.579692478350613, 0.562314715273329, 0.5538533821223733, 0.5379945999398885, 0.5524331243156899, 0.5128845956425987, 0.5305517286184268, 0.5003963069845861, 0.46328747213445776, 0.4746942113356237, 0.45654357821949876, 0.45572078022517865, 0.44335796990178566, 0.457613531415961, 0.4256588824239972, 0.4252957807571629, 0.4070268664550882, 0.43945680492747147, 0.4001191356839946, 0.40809481787706775, 0.3912177524782679, 0.37447274383489626, 0.384777586009162, 0.3760731228039391, 0.37666796780202555, 0.3699202518248366], "accuracy": [0.2937524616718292, 0.4220050275325775, 0.531369686126709, 0.6320168972015381, 0.6585655808448792, 0.6767930388450623, 0.6939638257026672, 0.7271166443824768, 0.7293620109558105, 0.7388719916343689, 0.7619865536689758, 0.7660810947418213, 0.7716285586357117, 0.7832518815994263, 0.7783648371696472, 0.7903843522071838, 0.7921014428138733, 0.7878747582435608, 0.8033285140991211, 0.7973847389221191, 0.8115176558494568, 0.8301413059234619, 0.8234050869941711, 0.826310932636261, 0.82683926820755, 0.8323867321014404, 0.8256505131721497, 0.8385946154594421, 0.8383304476737976, 0.8500858545303345, 0.8325188159942627, 0.8495575189590454, 0.8482366800308228, 0.8552370667457581, 0.8593316674232483, 0.8533879518508911, 0.8581429123878479, 0.8581429123878479, 0.86118084192276], "val_loss": [1.6339281627110072, 1.5342522348676408, 0.7696089574268886, 0.6625384943825858, 0.6700760977608817, 0.6759376355579921, 0.6159028666360038, 0.5433358464922223, 0.561772380556379, 0.5475317580359322, 0.5136783633913312, 0.5203487873077393, 0.5792607409613473, 0.4747868946620396, 0.5076144593102592, 0.43560452120644705, 0.49241037028176443, 0.4229011450495039, 0.41933536529541016, 0.4331305367606027, 0.41068330832890104, 0.43787334646497456, 0.3984077913420541, 0.4289864982877459, 0.4168646676199777, 0.40609959193638395, 0.39292662484305246, 0.3947607960019793, 0.39230871200561523, 0.4011187383106777, 0.36667979615075247, 0.41199763332094463, 0.3852183393069676, 0.370758627142225, 0.3762111748967852, 0.36888022082192556, 0.36029929774148123, 0.3778727224894932, 0.37248462438583374], "val_accuracy": [0.4963333308696747, 0.41600000858306885, 0.6880000233650208, 0.6819999814033508, 0.6926666498184204, 0.6899999976158142, 0.703000009059906, 0.7506666779518127, 0.7549999952316284, 0.7393333315849304, 0.7620000243186951, 0.7570000290870667, 0.7419999837875366, 0.7856666445732117, 0.7789999842643738, 0.8076666593551636, 0.7583333253860474, 0.812666654586792, 0.8206666707992554, 0.8080000281333923, 0.824999988079071, 0.8100000023841858, 0.828000009059906, 0.8043333292007446, 0.8130000233650208, 0.8183333277702332, 0.8286666870117188, 0.8286666870117188, 0.8336666822433472, 0.8339999914169312, 0.846666693687439, 0.8276666402816772, 0.8396666646003723, 0.8516666889190674, 0.8399999737739563, 0.8516666889190674, 0.8506666421890259, 0.8479999899864197, 0.8476666808128357]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 1, 6, 5, 5, 1, 6, 4, 8, 8, 8, 6, 0, 2, 8, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 0, 1, 1], [0, 1, 1], [7, 5, 2], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [0, 2, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.8008571267127991, "mapping_values": [1, 25, 25, 15, 10, 5, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.sqrt(grad))), tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [2.109084779780696, 1.8262946146543173, 1.41993488317247, 1.1161145287860008, 0.9480884915109261, 0.8335335612407276, 0.7348552248449909, 0.71440955851261, 0.7409294662127925, 0.6420361640556944, 0.6453353121390574, 0.6098082352859185, 0.6167512309628392, 0.5705206941273454, 0.5661890114523621, 0.5430601484125883, 0.5268918390224292, 0.540173564407851, 0.49479137110105514, 0.5186867998607123, 0.4738338074947408, 0.4536300592765108, 0.46806449652615634, 0.4479262422120267, 0.44927074428657104, 0.4478563456062344, 0.43854460829536535, 0.4172070570523319, 0.4161317417563669, 0.40299931166588027, 0.4281814213890866, 0.3959624642205355, 0.3862483048553968, 0.39206955972490626, 0.38284716942621777, 0.36943390667871506, 0.36876958217351286, 0.3614342688034082, 0.35756718440456414, 0.3612056242208817, 0.32500223102759784], "accuracy": [0.2937524616718292, 0.4189670979976654, 0.5017831325531006, 0.6098269820213318, 0.648659348487854, 0.6873596906661987, 0.7219653725624084, 0.7320036888122559, 0.7164179086685181, 0.7640998363494873, 0.7547219395637512, 0.7668735980987549, 0.7627789974212646, 0.7886672616004944, 0.78113853931427, 0.7960638999938965, 0.8014793395996094, 0.7969884872436523, 0.8168009519577026, 0.8006868362426758, 0.819442629814148, 0.8327829837799072, 0.8170651197433472, 0.8345000743865967, 0.8264430165290833, 0.83119797706604, 0.8376700282096863, 0.8378021121025085, 0.8433496356010437, 0.8506141901016235, 0.835160493850708, 0.8498216867446899, 0.8561616539955139, 0.8549728989601135, 0.8560295701026917, 0.8618412613868713, 0.8605204224586487, 0.8660678863525391, 0.8656716346740723, 0.8605204224586487, 0.8800686597824097], "val_loss": [1.6324943814958846, 1.6133758681161063, 1.0210345132010323, 0.6665278162275042, 0.6478070190974644, 0.6625229631151471, 0.6268789427621024, 0.5513941390173775, 0.6071238347462246, 0.5931836536952427, 0.5271006311689105, 0.5135025807789394, 0.49854840551103863, 0.47151005268096924, 0.4767411436353411, 0.4295297009604318, 0.49689505781446186, 0.42215326002665926, 0.41173979214259554, 0.43248116970062256, 0.4086113657270159, 0.40437876326697214, 0.3934004136494228, 0.4133966054235186, 0.4069450242178781, 0.40750146763665335, 0.3938198174749102, 0.3804169126919338, 0.4003118872642517, 0.3975160036768232, 0.3639611772128514, 0.37385863065719604, 0.378047696181706, 0.3796788283756801, 0.35783757482256207, 0.3578850286347525, 0.3590446710586548, 0.3802441358566284, 0.36145080838884625, 0.3517997179712568, 0.4047379749161856], "val_accuracy": [0.4959999918937683, 0.38966667652130127, 0.6046666502952576, 0.699999988079071, 0.7043333053588867, 0.7059999704360962, 0.7099999785423279, 0.7419999837875366, 0.734666645526886, 0.7243333458900452, 0.7580000162124634, 0.7743333578109741, 0.7850000262260437, 0.7996666431427002, 0.7983333468437195, 0.8136666417121887, 0.7609999775886536, 0.8146666884422302, 0.8303333520889282, 0.809333324432373, 0.8393333554267883, 0.8266666531562805, 0.8396666646003723, 0.8173333406448364, 0.8190000057220459, 0.8193333148956299, 0.8296666741371155, 0.8416666388511658, 0.8233333230018616, 0.8363333344459534, 0.8413333296775818, 0.843666672706604, 0.8443333506584167, 0.8413333296775818, 0.8503333330154419, 0.856333315372467, 0.8446666598320007, 0.8393333554267883, 0.8560000061988831, 0.8516666889190674, 0.8386666774749756]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 0, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 1], [0, 0, 0, 1], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.797428548336029, "mapping_values": [1, 10, 10, 6, 4, 3, 2, 2, 1, 1, 0, 5, 4, 3, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.sqrt(sigma)))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.4214483991259392, 2.010854247176589, 1.521338931494826, 1.1422674332816352, 1.0736746475633896, 0.9650695335595773, 0.8120941558707392, 0.8186748587003457, 0.7687830958604466, 0.790508958484361, 0.7031295372195578, 0.66469741961928, 0.6620560674115635, 0.6166925982256859, 0.6059092423383979, 0.5971098606691322, 0.5914462780073854, 0.5908430898745362], "accuracy": [0.24461762607097626, 0.35226520895957947, 0.49187690019607544, 0.5935807824134827, 0.6118082404136658, 0.6350548267364502, 0.6984546184539795, 0.6910579800605774, 0.7119271159172058, 0.7100779414176941, 0.7277770638465881, 0.7382115721702576, 0.7477215528488159, 0.7705719470977783, 0.7696473598480225, 0.7796856164932251, 0.7783648371696472, 0.7721568942070007], "val_loss": [1.8804292678833008, 1.4712309837341309, 0.8444788796561105, 1.013087238584246, 0.8176524128232684, 0.6454624959400722, 0.6182989222662789, 0.5913958379200527, 0.6792040041514805, 0.5694114650998797, 0.564448526927403, 0.5495670182364327, 0.47519213812691824, 0.5133013214383807, 0.4925588199070522, 0.49339873450142996, 0.4583305971963065, 0.47157929624829975], "val_accuracy": [0.2720000147819519, 0.4490000009536743, 0.6480000019073486, 0.5963333249092102, 0.6423333287239075, 0.7126666903495789, 0.731333315372467, 0.7350000143051147, 0.6916666626930237, 0.7393333315849304, 0.7319999933242798, 0.750333309173584, 0.7913333177566528, 0.7586666941642761, 0.7713333368301392, 0.7793333530426025, 0.7836666703224182, 0.7799999713897705]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 15, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 0], [7, 9, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [13, 7, 76, 58]], "fitness": -0.4802857041358948, "mapping_values": [1, 9, 9, 5, 4, 2, 2, 2, 1, 1, 0, 4, 3, 3, 0, 1, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3030499622822123, 2.30021741622947, 2.3000090653476555, 2.2999621994853445, 2.2976315978212347, 2.2972286948595917, 2.2934139630797987, 2.2926461072787476, 2.2933677407681525, 2.2898513979490454, 2.2899685097471316, 2.2880248408102797, 2.285942653040797, 2.2856716778394555, 2.285510505399904, 2.2846088273382583, 2.2828659301798626, 2.2792664945653054, 2.2780795940365914, 2.277991703897813, 2.276229612012628, 2.2761211870778206, 2.2733522413145706, 2.2734744532737183, 2.2698205195996173, 2.268564680264752, 2.268260354835753, 2.267043817721936, 2.2652773915060194, 2.26533596601626, 2.2647343050644713, 2.2625295492982693, 2.2597538720127015, 2.2590253512148593, 2.2582278747946565, 2.255776967953193, 2.2554383520373986, 2.2523084060942034, 2.251337594170974, 2.2505193534481243, 2.2503882217180493, 2.247761107297259, 2.244539035451474, 2.2444906212697493, 2.2433029056272455, 2.2422879880618707, 2.239952638211929, 2.237739272798451, 2.236736967768006, 2.2342958127849246, 2.232496304518952, 2.2308375271099465, 2.2291797636175956, 2.228279628238469, 2.2262572857682037, 2.2262274183223685, 2.2225637468978667, 2.222852667954777, 2.2185448822706224, 2.216677544312533, 2.2157585293058517, 2.213406024182619, 2.2116817210281465, 2.2098590924582067, 2.207662165991587, 2.2051602709861777, 2.201324169142308, 2.201926926328301, 2.199849922674963, 2.196199446841789, 2.1938573460710553, 2.191638342976145, 2.19061087469273, 2.187106184436031, 2.1821903123390785, 2.1824726118718343, 2.180131144574636, 2.1768005543601605, 2.174024805338029, 2.1736117241609647, 2.170806624366308, 2.1670654264376257, 2.163144360979267, 2.161723088531635, 2.159975536274888, 2.157276738069439, 2.1511998123669778, 2.150295287705274, 2.147707819450549, 2.1440504773134537, 2.142209884087801, 2.1378815853364275, 2.1364583309694067, 2.13264999977271, 2.1275327956089174, 2.125857101219237, 2.124845649052636, 2.119636227189904, 2.117344918834881, 2.112233439960563], "accuracy": [0.09047681838274002, 0.09866596013307571, 0.09377889335155487, 0.09945846349000931, 0.10434553027153015, 0.1014397069811821, 0.11068551242351532, 0.1216483935713768, 0.1162329912185669, 0.1282525360584259, 0.12138422578573227, 0.12798838317394257, 0.12561088800430298, 0.1310262829065323, 0.13697001338005066, 0.13842293620109558, 0.14291374385356903, 0.15149913728237152, 0.15731078386306763, 0.15836745500564575, 0.15519747138023376, 0.16021661460399628, 0.16655659675598145, 0.16180160641670227, 0.18214239180088043, 0.17117950320243835, 0.18412363529205322, 0.18980319797992706, 0.1900673657655716, 0.18716153502464294, 0.1868973672389984, 0.18557654321193695, 0.20235107839107513, 0.20103025436401367, 0.204860657453537, 0.20974771678447723, 0.21001188457012177, 0.22282393276691437, 0.22374852001667023, 0.22559767961502075, 0.22480517625808716, 0.23814556002616882, 0.23180557787418365, 0.23801347613334656, 0.23774930834770203, 0.24144762754440308, 0.24620261788368225, 0.24725927412509918, 0.2495046854019165, 0.252938836812973, 0.2591467499732971, 0.26020342111587524, 0.26337340474128723, 0.2666754722595215, 0.2693171203136444, 0.266939640045166, 0.28001585602760315, 0.2779025137424469, 0.2755250334739685, 0.28041210770606995, 0.2851670980453491, 0.2843745946884155, 0.2895258367061615, 0.2977149784564972, 0.2896578907966614, 0.2996962070465088, 0.3007528781890869, 0.30445119738578796, 0.29401662945747375, 0.31541407108306885, 0.31462156772613525, 0.3144895136356354, 0.30682867765426636, 0.31937655806541443, 0.32426363229751587, 0.3276977837085724, 0.33139610290527344, 0.3323206901550293, 0.33403778076171875, 0.3327169418334961, 0.3354906737804413, 0.33179235458374023, 0.3435477614402771, 0.34103816747665405, 0.337339848279953, 0.34183067083358765, 0.352529376745224, 0.35028398036956787, 0.35107648372650146, 0.351340651512146, 0.3609826862812042, 0.35464271903038025, 0.35926562547683716, 0.3591335415840149, 0.36388853192329407, 0.3641526997089386, 0.3625676929950714, 0.3575485348701477, 0.36943599581718445, 0.37287017703056335], "val_loss": [1.969958918435233, 1.9687477520533971, 1.967534133366176, 1.9663256917681013, 1.965125901358468, 1.96394225529262, 1.962744849068778, 1.9615477153233118, 1.9603509221758162, 1.9591700008937292, 1.9579968452453613, 1.956799098423549, 1.9556200844900948, 1.9544175011771066, 1.953230857849121, 1.952035358973912, 1.9508460589817591, 1.949648175920759, 1.9484353746686662, 1.9472439629690987, 1.9460274832589286, 1.944821493966239, 1.9435992240905762, 1.94236877986363, 1.9411258016313826, 1.939892360142299, 1.9386523110525948, 1.9374099458966936, 1.9361423764910017, 1.934875760759626, 1.9335896628243583, 1.9322951861790247, 1.9309898103986467, 1.929675510951451, 1.9283502442496163, 1.9270083563668388, 1.9256609507969447, 1.9242822783333915, 1.9229028565543038, 1.9215127399989538, 1.9201091357639857, 1.9186899321419852, 1.9172419139317103, 1.9157958711896623, 1.9143242835998535, 1.9128473826817103, 1.9113358088902064, 1.9098046847752161, 1.908266339983259, 1.906696115221296, 1.9050944192068917, 1.9034856387547083, 1.9018552643912179, 1.900212015424456, 1.8985333442687988, 1.8968544687543596, 1.8951385361807687, 1.8934108189174108, 1.8916427067347936, 1.8898483685084753, 1.8880409513201033, 1.8861993380955286, 1.8843411718096053, 1.8824561664036341, 1.8805218424115862, 1.8785662651062012, 1.876565592629569, 1.8745606286185128, 1.8725194249834334, 1.8704476356506348, 1.8683195114135742, 1.8661541938781738, 1.8639639445713587, 1.861736638205392, 1.8594438007899694, 1.8571491922651018, 1.854804447719029, 1.8524089540754045, 1.8500007220676966, 1.8475768906729562, 1.845106601715088, 1.8425591332571847, 1.8399953842163086, 1.837399959564209, 1.834747586931501, 1.832080296107701, 1.8293140956333704, 1.8265196936471122, 1.8236891201564245, 1.8208112716674805, 1.8179020200456892, 1.814948558807373, 1.8119677816118513, 1.8089306695120675, 1.8058297293526786, 1.802687304360526, 1.7995424270629883, 1.796302386692592, 1.7930144582475935, 1.7896652221679688], "val_accuracy": [0.041999999433755875, 0.04899999871850014, 0.05666666850447655, 0.06566666811704636, 0.07666666805744171, 0.08766666799783707, 0.0963333323597908, 0.10733333230018616, 0.11766666918992996, 0.12933333218097687, 0.1420000046491623, 0.1536666601896286, 0.16699999570846558, 0.18033333122730255, 0.18966667354106903, 0.20033332705497742, 0.20933333039283752, 0.21799999475479126, 0.22833333909511566, 0.2356666624546051, 0.2436666637659073, 0.25466665625572205, 0.26600000262260437, 0.27566665410995483, 0.2809999883174896, 0.2916666567325592, 0.29899999499320984, 0.30399999022483826, 0.3096666634082794, 0.31566667556762695, 0.3230000138282776, 0.328000009059906, 0.3333333432674408, 0.3373333215713501, 0.34299999475479126, 0.3466666638851166, 0.34833332896232605, 0.35100001096725464, 0.3540000021457672, 0.3569999933242798, 0.3606666624546051, 0.3636666536331177, 0.3659999966621399, 0.3713333308696747, 0.3726666569709778, 0.37700000405311584, 0.3790000081062317, 0.38199999928474426, 0.3840000033378601, 0.3853333294391632, 0.38733333349227905, 0.3903333246707916, 0.3916666805744171, 0.39533331990242004, 0.39899998903274536, 0.4026666581630707, 0.40533334016799927, 0.4090000092983246, 0.41333332657814026, 0.4163333475589752, 0.41966667771339417, 0.42266666889190674, 0.42533332109451294, 0.4266666769981384, 0.4286666810512543, 0.43066665530204773, 0.4326666593551636, 0.4326666593551636, 0.4346666634082794, 0.4363333284854889, 0.437666654586792, 0.4399999976158142, 0.4426666796207428, 0.44433334469795227, 0.44566667079925537, 0.4466666579246521, 0.44866666197776794, 0.4503333270549774, 0.45133334398269653, 0.453000009059906, 0.4543333351612091, 0.4566666781902313, 0.4583333432674408, 0.4606666564941406, 0.4620000123977661, 0.4623333215713501, 0.4636666774749756, 0.46399998664855957, 0.46700000762939453, 0.468666672706604, 0.47066667675971985, 0.4716666638851166, 0.47433334589004517, 0.47600001096725464, 0.4779999852180481, 0.47966668009757996, 0.48133334517478943, 0.484333336353302, 0.4873333275318146, 0.48899999260902405]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 4, 8, 3, 5, 2, 1, 6, 4, 8, 8, 8, 6, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 1, 0, 1, 0, 1], [0, 1, 0], [7, 2, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [7, 7, 76, 58]], "fitness": -0.3160000145435333, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3034324251728413, 2.3015197030053463, 2.302242474675005, 2.303111567678012, 2.3016852190025006, 2.3021539762870056, 2.299244710435768, 2.2993663355595935, 2.301012263999025, 2.298312077543062, 2.2992316053496564, 2.298331027710521, 2.296990254457207, 2.2977643579839007, 2.2983574225776278, 2.298479636394746, 2.297518410939015, 2.294788292952973, 2.294614850537904, 2.295266032833008, 2.2945927563376194, 2.2953463581338647, 2.293525405799897, 2.2946172495559694, 2.2919746250791984, 2.291395545840311, 2.292061555528874, 2.291746446563898, 2.2908589998650086, 2.292096665916095, 2.2924508695447483, 2.2911778707482857, 2.289510181472601, 2.2897645130039064, 2.2899384055832326, 2.288541278850448, 2.289119953744526, 2.2874394182389866, 2.2874613643999444, 2.2876649154821296, 2.288618205041146, 2.2870443245801217, 2.285220114089841, 2.2861999811954217, 2.2860446600409516, 2.285983139135582, 2.285356737508939, 2.2844037679932483, 2.2843773927135618, 2.283374439030905, 2.28327650426165, 2.282482829627391, 2.2820776207666547, 2.282463128272931, 2.2820381514542074, 2.283018330320974, 2.281072328623181, 2.2825650001765716, 2.2800992361826276, 2.2796400078630024, 2.279969048648069, 2.279279553957934, 2.279179135806147, 2.2790453382660103, 2.2786989955224413, 2.278005639528318, 2.2760837091950537, 2.277488455119276, 2.277208862271937, 2.2760092873914037, 2.2755775791763266, 2.275697749792514, 2.276421298818219, 2.2748430402539332, 2.272528282009836, 2.273821824766216, 2.273812521403067, 2.272652526998312, 2.2721714303005704, 2.272699293065553, 2.272424819588803, 2.2725517686804317, 2.2701218535383347, 2.2703917671456044, 2.270851855485226, 2.270558011152363, 2.268166734589373, 2.2691232320450205, 2.268921276613265, 2.2682133485234535, 2.269340930408916, 2.267269010478322, 2.268084134974925, 2.2672848179355793, 2.266318639287418, 2.266415751762929, 2.2672563006046222, 2.266044768706415, 2.2660845114239736, 2.2649522488694447], "accuracy": [0.08889182657003403, 0.09589222073554993, 0.08796724677085876, 0.09060890227556229, 0.09232597798109055, 0.09126931428909302, 0.09800554811954498, 0.10315678268671036, 0.09272222965955734, 0.10711926966905594, 0.09866596013307571, 0.10368511080741882, 0.09734513610601425, 0.10130762308835983, 0.1014397069811821, 0.10500594228506088, 0.10342095047235489, 0.11081759631633759, 0.10962884873151779, 0.11081759631633759, 0.11055342853069305, 0.10540219396352768, 0.11808215826749802, 0.10553427785634995, 0.11887465417385101, 0.11147800832986832, 0.11728965491056442, 0.11927089840173721, 0.11993131786584854, 0.11847840249538422, 0.11570466309785843, 0.11411966383457184, 0.12349755316972733, 0.12112006545066833, 0.12138422578573227, 0.12402588874101639, 0.12310130894184113, 0.1270637959241867, 0.1274600476026535, 0.12812046706676483, 0.12719587981700897, 0.13195087015628815, 0.13168670237064362, 0.1332716941833496, 0.12957337498664856, 0.13432836532592773, 0.1348566859960556, 0.13274335861206055, 0.13961167633533478, 0.1356491893529892, 0.1364416927099228, 0.13617752492427826, 0.14159291982650757, 0.14172500371932983, 0.14581957459449768, 0.13934750854969025, 0.1472724825143814, 0.1410645842552185, 0.13895125687122345, 0.15070664882659912, 0.14793290197849274, 0.15229164063930511, 0.15229164063930511, 0.1574428677558899, 0.15321621298789978, 0.15849953889846802, 0.15532954037189484, 0.15638621151447296, 0.15400871634483337, 0.16602826118469238, 0.16180160641670227, 0.15995244681835175, 0.1620657742023468, 0.16695284843444824, 0.16021661460399628, 0.1678774207830429, 0.16536785662174225, 0.1666886806488037, 0.16853784024715424, 0.16959451138973236, 0.16933034360408783, 0.16919825971126556, 0.17963281273841858, 0.1736890822649002, 0.16893409192562103, 0.1748778223991394, 0.18544445931911469, 0.18016114830970764, 0.17884030938148499, 0.18095363676548004, 0.17910447716712952, 0.18055738508701324, 0.18201030790805817, 0.18161405622959137, 0.18676528334617615, 0.1884823739528656, 0.1826707124710083, 0.18214239180088043, 0.18491612374782562, 0.19204860925674438], "val_loss": [1.9708215849740165, 1.9704599380493164, 1.9700958388192313, 1.9697318077087402, 1.969369888305664, 1.9690119198390417, 1.9686510903494698, 1.9682908739362444, 1.9679302488054549, 1.967573642730713, 1.9672192164829798, 1.9668593406677246, 1.9665047781808036, 1.9661436762128557, 1.9657881600516183, 1.9654295103890556, 1.9650744710649763, 1.964719567980085, 1.9643606458391463, 1.9640079225812639, 1.9636492047991072, 1.963294574192592, 1.9629388536725725, 1.9625796590532576, 1.9622217587062292, 1.9618676730564661, 1.9615131105695451, 1.9611607960292272, 1.9608092308044434, 1.9604549407958984, 1.9600999695914132, 1.959747246333531, 1.959392479487828, 1.9590397562299455, 1.9586849212646484, 1.95833158493042, 1.9579795428684779, 1.957625457218715, 1.9572702135358537, 1.9569149017333984, 1.9565632683890206, 1.9562087059020996, 1.9558533259800501, 1.9554995809282576, 1.9551469939095634, 1.9547955649239677, 1.954439980643136, 1.954084873199463, 1.9537304469517298, 1.9533743858337402, 1.9530189377920968, 1.9526643753051758, 1.952310630253383, 1.951956067766462, 1.9515993254525321, 1.9512453079223633, 1.9508890424455916, 1.9505320957728796, 1.950173991067069, 1.9498186111450195, 1.9494633674621582, 1.9491092136928014, 1.9487522670200892, 1.9483978407723563, 1.9480406216212682, 1.9476810182843889, 1.9473186220441545, 1.9469633783612932, 1.9466056823730469, 1.9462455340794154, 1.9458849770682198, 1.9455199241638184, 1.9451571192060197, 1.9447966984340124, 1.9444309643336706, 1.9440700667245048, 1.9437057631356376, 1.9433423451014928, 1.9429760660443987, 1.942615168435233, 1.942251409803118, 1.9418806348528181, 1.941511767251151, 1.9411442620413644, 1.9407790728977747, 1.9404106821332658, 1.9400394303458077, 1.93966920035226, 1.9392995153154646, 1.938929217202323, 1.9385551725115096, 1.9381812640598841, 1.9378100803920202, 1.9374337877546037, 1.9370572907584054, 1.936682973589216, 1.9363120623997279, 1.9359358378819056, 1.935561180114746, 1.9351822989327567], "val_accuracy": [0.039000000804662704, 0.0403333343565464, 0.0416666679084301, 0.043666668236255646, 0.043666668236255646, 0.046666666865348816, 0.05000000074505806, 0.052666667848825455, 0.05433333292603493, 0.055666666477918625, 0.05766666680574417, 0.059333331882953644, 0.06333333253860474, 0.06566666811704636, 0.06833333522081375, 0.07266666740179062, 0.07599999755620956, 0.0793333351612091, 0.08433333039283752, 0.08666666597127914, 0.08833333104848862, 0.09099999815225601, 0.09399999678134918, 0.09833333641290665, 0.10133333504199982, 0.10466666519641876, 0.10700000077486038, 0.1106666699051857, 0.1133333370089531, 0.11699999868869781, 0.12033333629369736, 0.1236666664481163, 0.1263333261013031, 0.1303333342075348, 0.13333334028720856, 0.1379999965429306, 0.14166666567325592, 0.14766666293144226, 0.14900000393390656, 0.15133333206176758, 0.15600000321865082, 0.16033333539962769, 0.16366666555404663, 0.1679999977350235, 0.17399999499320984, 0.17533333599567413, 0.179666668176651, 0.1823333352804184, 0.1860000044107437, 0.18933333456516266, 0.19033333659172058, 0.19499999284744263, 0.19766665995121002, 0.2006666660308838, 0.20399999618530273, 0.20533333718776703, 0.20900000631809235, 0.210999995470047, 0.21199999749660492, 0.21533332765102386, 0.218666672706604, 0.22166666388511658, 0.22499999403953552, 0.22966666519641876, 0.23000000417232513, 0.23100000619888306, 0.2356666624546051, 0.23766666650772095, 0.23999999463558197, 0.24199999868869781, 0.24566666781902313, 0.24899999797344208, 0.2516666650772095, 0.2549999952316284, 0.25866666436195374, 0.2619999945163727, 0.26499998569488525, 0.26899999380111694, 0.27166667580604553, 0.2746666669845581, 0.2759999930858612, 0.2770000100135803, 0.2796666622161865, 0.2826666533946991, 0.2849999964237213, 0.2879999876022339, 0.2913333475589752, 0.2933333218097687, 0.29633334279060364, 0.2983333468437195, 0.30000001192092896, 0.3019999861717224, 0.3036666810512543, 0.30433332920074463, 0.30566665530204773, 0.3073333203792572, 0.3096666634082794, 0.31033334136009216, 0.3113333284854889, 0.31299999356269836]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 8, 3, 5, 2, 1, 6, 4, 8, 8, 3, 6, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 0], [7, 0, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.170571431517601, "mapping_values": [1, 24, 24, 14, 10, 3, 2, 2, 1, 1, 0, 5, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(alpha))))))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))))))), alpha), grad), tf.math.negative(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.5258982393168785, 2.514204753215177, 2.3478918361814975, 2.319080656577158, 2.202456528752188, 2.14106788466462, 2.398273991524441, 2.2024097353507344, 2.2138432882339445, 2.305968448612212, 2.327756068458048, 2.3310338821960337], "accuracy": [0.2448817789554596, 0.15691454708576202, 0.09826971590518951, 0.1254788041114807, 0.19574692845344543, 0.21344605088233948, 0.1278562992811203, 0.19574692845344543, 0.1504424810409546, 0.12151630967855453, 0.11715757846832275, 0.1022322028875351], "val_loss": [1.9766111373901367, 1.9900993619646346, 2.0062855311802457, 1.8558402742658342, 1.8080462728227888, 2.0637766974312917, 1.7988643646240234, 1.7643081120082311, 1.9461500985281808, 1.9467555454799108, 1.9852467945643835, 2.010103634425572], "val_accuracy": [0.10233332961797714, 0.09866666793823242, 0.10133333504199982, 0.18700000643730164, 0.2133333384990692, 0.1080000028014183, 0.2446666657924652, 0.20633333921432495, 0.12566666305065155, 0.15733332931995392, 0.10566666722297668, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [3, 4, 5, 3, 5, 5, 1, 6, 1, 8, 8, 2, 9, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [45, 68, 66, 39, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [0, 0, 0], [7, 0, 8], [4, 1], [28], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.14514285326004028, "mapping_values": [1, 6, 6, 3, 3, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 18, 11, 7, 2], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.square(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.square(beta), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.square(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), beta)), alpha)))))", "other_info": {"loss": [2.300387347300354, 2.300869037792935, 2.303642118863615, 2.3031900284580344, 2.310606838705486, 2.4413083277641743, 3.5070510671406754, 7.2200744925173845, 15.530150446389818, 30.321618380563574, 53.58677759196985], "accuracy": [0.09787346422672272, 0.08902391046285629, 0.06987188011407852, 0.07568352669477463, 0.08506141602993011, 0.09628847241401672, 0.09642054885625839, 0.09496764093637466, 0.09826971590518951, 0.09813763201236725, 0.10249637067317963], "val_loss": [1.969393048967634, 1.9742135320390974, 1.9739469119480677, 1.9755786487034388, 2.000873701913016, 2.387545653751918, 4.358010292053223, 9.560442243303571, 19.673861367361887, 36.3648921421596, 61.25857761928013], "val_accuracy": [0.10266666859388351, 0.060333333909511566, 0.056333333253860474, 0.09133332967758179, 0.09566666930913925, 0.10899999737739563, 0.09833333641290665, 0.09666666388511658, 0.10066666454076767, 0.09666666388511658, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 9, 5, 1, 2, 6, 6, 8, 2, 9, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [75, 68, 58, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 0], [7, 5, 8], [4, 1], [28], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 1, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.12314286082983017, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 5, 3, 3, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.9210275604173477, 2.298149518018165, 2.4227860494769087, 2.3461912152884015, 2.3309631668864745, 2.355697611587206], "accuracy": [0.25056135654449463, 0.15242372453212738, 0.11861048638820648, 0.09774138033390045, 0.09893012791872025, 0.09906221181154251], "val_loss": [1.8554680006844657, 1.958090032849993, 2.066531317574637, 1.9998679842267717, 1.9970070293971471, 2.000636781964983], "val_accuracy": [0.1913333386182785, 0.15733332931995392, 0.10766666382551193, 0.09833333641290665, 0.10233332961797714, 0.10566666722297668]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [4, 4, 8, 1, 5, 5, 2, 2, 8, 0, 8, 5, 9, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 0, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0], [7, 0, 8, 2], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [56, 7, 76, 58]], "fitness": -0.1128571406006813, "mapping_values": [1, 14, 14, 8, 6, 3, 2, 2, 1, 1, 0, 7, 4, 4, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.sqrt(sigma)))), tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.725634606979495, 2.3503289746728004, 2.343719829232575, 3.355560880846682, 2.426842849834988, 2.329741663228031], "accuracy": [0.26376965641975403, 0.1270637959241867, 0.09998679161071777, 0.15097081661224365, 0.108440101146698, 0.09774138033390045], "val_loss": [1.9871723311288017, 1.9983251435416085, 2.0027361597333635, 2.0006561960492815, 1.9891880580357142, 2.0069176128932407], "val_accuracy": [0.14000000059604645, 0.09799999743700027, 0.09833333641290665, 0.10066666454076767, 0.10133333504199982, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [3, 4, 5, 3, 5, 5, 1, 6, 1, 8, 6, 2, 9, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [1, 2, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [45, 68, 66, 39, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [35, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 2, 5, 5, 5, 0, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad)))), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3030419203237127, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 1, 6, 5, 5, 1, 6, 4, 8, 8, 8, 6, 0, 2, 8, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 97, 58, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 1], [0, 0, 0, 1], [7, 7, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [3, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [74, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 5, 2, 2, 1, 1, 0, 6, 4, 3, 1, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.sqrt(grad)), tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08981640636920929, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 8, 3, 6, 5, 1, 6, 4, 8, 8, 8, 6, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 1, 0, 1, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 29, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 0, 1], [0, 0, 0], [2, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06551314145326614, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 1, 2, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 0], [5, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 5, 5, 5, 0, 1, 4, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.sqrt(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026172952912725, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 8, 3, 5, 2, 1, 6, 4, 2, 8, 8, 6, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [1, 2, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 0, 1], [0, 0, 0, 1], [7, 2, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [4, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [1, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 3, 2, 2, 1, 1, 0, 6, 4, 3, 1, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.sqrt(alpha)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)))))), tf.math.negative(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [3, 4, 2, 3, 5, 5, 1, 6, 4, 8, 4, 2, 9, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [9, 68, 66, 39, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 0, 0, 1, 1, 1], [0, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 3, 6, 6, 4, 2, 0, 5, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.6506089427294497, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08374059200286865, 0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6.262666157313755, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 4, 8, 3, 5, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [86, 68, 19, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [0, 1, 0, 1, 1, 1], [0, 0, 0], [7, 0, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [5, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.06400000303983688, "mapping_values": [1, 9, 9, 5, 4, 3, 2, 2, 1, 1, 0, 4, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(alpha))))))), tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [2.3030332281699413, 2.300684207497555, 2.3012262080024657, 2.301694228302423, 2.3007357415584857, 2.3011953675783134, 2.299199575446364, 2.29953031778619, 2.3007941275949193, 2.299167176814615, 2.2998568879740824, 2.299889453917667, 2.2993800995325007, 2.3004285240248916], "accuracy": [0.08955223858356476, 0.09879804402589798, 0.09126931428909302, 0.09285431355237961, 0.09628847241401672, 0.09008057415485382, 0.09985470771789551, 0.10276053100824356, 0.09721305221319199, 0.1026284471154213, 0.09787346422672272, 0.09285431355237961, 0.09747721254825592, 0.09509972482919693], "val_loss": [1.97023834500994, 1.9697822162083216, 1.9695120538984026, 1.9692569460187639, 1.9692396436418806, 1.969179902757917, 1.9692511558532715, 1.9692079680306571, 1.9691687992640905, 1.9692632130214147, 1.9693900517054967, 1.9697621209280831, 1.9700632095336914, 1.970313549041748], "val_accuracy": [0.0430000014603138, 0.05366666615009308, 0.05766666680574417, 0.05833333358168602, 0.06300000101327896, 0.0689999982714653, 0.07366666942834854, 0.07466666400432587, 0.07900000363588333, 0.07733333110809326, 0.07699999958276749, 0.0729999989271164, 0.07066666334867477, 0.0689999982714653]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [3, 4, 5, 3, 4, 6, 1, 6, 1, 8, 8, 2, 9, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [1, 2, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [45, 68, 66, 39, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [0, 0, 0], [7, 5, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [0, 3, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 10, 10, 5, 5, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(alpha, tf.math.square(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3035945919416267, 2.302072558845779, 2.303193916245978, 2.304455100805091, 2.30342277770722, 2.3042732716047563], "accuracy": [0.08836349099874496, 0.09430722147226334, 0.08532558381557465, 0.0866464152932167, 0.08796724677085876, 0.08625016361474991], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [6, 8, 8, 3, 4, 5, 1, 6, 4, 8, 3, 8, 4, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [0, 0, 0], [7, 5, 8], [4, 1], [28], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 25, 15, 10, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), beta)))))))), alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(beta), beta), sigma))", "other_info": {"loss": [2.3035945919416267, 2.302072558845779, 2.303193916245978, 2.304455100805091, 2.30342277770722, 2.3042732716047563], "accuracy": [0.08836349099874496, 0.09430722147226334, 0.08532558381557465, 0.0866464152932167, 0.08796724677085876, 0.08625016361474991], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [2, 4, 8, 3, 5, 5, 1, 3, 4, 8, 8, 8, 6, 0, 2, 0, 5, 2, 6, 0, 0, 8, 3, 2, 3, 5, 0, 8, 5, 8, 5, 6, 2, 5, 5], [1, 2, 2, 0, 2, 1, 1, 2, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [38, 68, 58, 41, 55, 68], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 5, 0, 9, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [16, 19, 41, 7, 45, 13], [1, 0, 0, 1, 1, 1], [1, 0, 0], [7, 0, 8], [4, 1], [28], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 5, 6, 8, 6, 0, 6, 5, 6, 0, 2, 3, 1, 6, 5, 6, 0, 7, 0, 8, 2, 7, 5, 8, 0, 2, 5, 9, 1, 1, 1, 6, 8, 6, 9, 0, 9, 9], [2, 0, 2, 2, 0, 2, 1, 2, 2, 3, 2, 0, 3, 3, 0, 1, 1, 2, 3], [48, 7, 76, 58]], "fitness": -0.0357142873108387, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3038447573987675, 2.302956294137977, 2.304811324677715, 2.3070228433312994, 2.3067362232608817, 2.3086295206281315], "accuracy": [0.08849557489156723, 0.09219389408826828, 0.08347642421722412, 0.08453308790922165, 0.08347642421722412, 0.07991018146276474], "val_loss": [1.9716924939836775, 1.972221851348877, 1.9728198732648576, 1.9735596520560128, 1.97422879082816, 1.9749323981148856], "val_accuracy": [0.03333333507180214, 0.027666667476296425, 0.02666666731238365, 0.023666666820645332, 0.02199999988079071, 0.02266666665673256]}}]