[{"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 3, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 67, 98], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.8171428442001343, "mapping_values": [1, 5, 5, 3, 2, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.283439488978418, 1.998952477048527, 1.5011766320285134, 1.2382923186400059, 1.0206158129593574, 0.8483359984607745, 0.7978715497378928, 0.7320707751114008, 0.6999067343725205, 0.6863572597503662, 0.6550797952353569, 0.6090215928581932, 0.6118041162304417, 0.590150288091029, 0.5815358415035413, 0.5497187167394273, 0.5469823460206694, 0.5209177851346285, 0.5309589322862561, 0.5444234537804337, 0.49803648448387206, 0.49536459004055505, 0.4671878467193763, 0.5110265634527863, 0.4701260524914958, 0.46256568916107543, 0.455273251885578, 0.4365882113341721, 0.44226184814849534, 0.43682537492885726, 0.40975635384115106, 0.4181323883603073, 0.40388922134898736, 0.41400570006040516, 0.4138399588433491, 0.3938189159255569, 0.37937353720455247], "accuracy": [0.23854179680347443, 0.310130774974823, 0.46810197830200195, 0.5641262531280518, 0.616299033164978, 0.6811517477035522, 0.698718786239624, 0.7240787148475647, 0.7292299270629883, 0.7338528633117676, 0.7498348951339722, 0.767930269241333, 0.765949010848999, 0.769911527633667, 0.7815347909927368, 0.7844406366348267, 0.7924976944923401, 0.8054417967796326, 0.8004226684570312, 0.7905164361000061, 0.8112534880638123, 0.8131026029586792, 0.8261788487434387, 0.805177628993988, 0.8226125836372375, 0.8244617581367493, 0.8235371708869934, 0.835160493850708, 0.8314621448516846, 0.8366134166717529, 0.8466516733169556, 0.8426892161369324, 0.8518029451370239, 0.8459912538528442, 0.845859169960022, 0.852859616279602, 0.858671247959137], "val_loss": [1.696613379887172, 1.3431323255811418, 0.8311808790479388, 0.7768574442182269, 0.6396848133632115, 0.7461867332458496, 0.5969676630837577, 0.5588222401482719, 0.5358916521072388, 0.5024301324571881, 0.49814997400556293, 0.5578651087624686, 0.47975713866097586, 0.47747460433415007, 0.45593929290771484, 0.4817431313650949, 0.4682030848094395, 0.46738527502332416, 0.4774867125919887, 0.42015876940318514, 0.4122512510844639, 0.39864626101085116, 0.41638300248554777, 0.3958367109298706, 0.3973537087440491, 0.39798806394849506, 0.3829918163163321, 0.3805038332939148, 0.3987485000065395, 0.3953213095664978, 0.4229968360492161, 0.3877459764480591, 0.36852725063051495, 0.4075313551085336, 0.37373874868665424, 0.39563039370945524, 0.4338962009974888], "val_accuracy": [0.27900001406669617, 0.5440000295639038, 0.6629999876022339, 0.6316666603088379, 0.715666651725769, 0.6693333387374878, 0.7163333296775818, 0.7443333268165588, 0.7549999952316284, 0.7799999713897705, 0.7743333578109741, 0.7333333492279053, 0.7829999923706055, 0.7883333563804626, 0.8016666769981384, 0.768666684627533, 0.7763333320617676, 0.7973333597183228, 0.7986666560173035, 0.8209999799728394, 0.8163333535194397, 0.8270000219345093, 0.8190000057220459, 0.8303333520889282, 0.8213333487510681, 0.82833331823349, 0.8333333134651184, 0.8376666903495789, 0.8180000185966492, 0.8230000138282776, 0.8033333420753479, 0.8423333168029785, 0.8403333425521851, 0.812333345413208, 0.8420000076293945, 0.8246666789054871, 0.8316666483879089]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [6, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [38, 80, 41], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 2, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.805142879486084, "mapping_values": [1, 7, 7, 4, 3, 2, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.pow(beta, tf.math.negative(tf.math.add(beta, alpha)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2834584402480633, 2.0001215911292602, 1.437351128869541, 1.2017152033871223, 1.042658900824111, 0.8561365977569326, 0.7994267284326927, 0.7198879676346356, 0.6930624724316197, 0.6584773616799589, 0.6509997204562157, 0.6307495328586776, 0.6132771786272313, 0.5861059351367973, 0.5650792635584615, 0.5537956647113361, 0.5440276816079898, 0.5330741698589812, 0.5360766966045966, 0.5112848421050699, 0.5079932518646844, 0.48693301304613895, 0.48156841294703434, 0.507668420363411, 0.47256443698046274, 0.4572127061536709, 0.4544985810361912, 0.43806535070913344, 0.43594861985150424, 0.43165281222496743, 0.4128091455867907, 0.4198980900188242, 0.4132158206540832], "accuracy": [0.2386738806962967, 0.30960243940353394, 0.48487651348114014, 0.5552766919136047, 0.6062607169151306, 0.6778497099876404, 0.6989829540252686, 0.722229540348053, 0.7325320243835449, 0.7518161535263062, 0.7461365461349487, 0.7559106945991516, 0.7677981853485107, 0.7753269076347351, 0.7796856164932251, 0.7877426743507385, 0.7910447716712952, 0.7954035401344299, 0.796328067779541, 0.805177628993988, 0.8049134612083435, 0.8173292875289917, 0.8161405324935913, 0.8088759779930115, 0.8219521641731262, 0.8220842480659485, 0.8244617581367493, 0.8364813327789307, 0.8317263126373291, 0.8362171649932861, 0.8465195894241333, 0.8403117060661316, 0.8426892161369324], "val_loss": [1.69663371358599, 1.2584917885916573, 0.8481875487736293, 0.9389529228210449, 0.6359887974602836, 0.6626205274036953, 0.6111453430993217, 0.5327056646347046, 0.5255774940763202, 0.49983365195138113, 0.5780677965709141, 0.5764861447470528, 0.47052110944475445, 0.46855790274483816, 0.4647761583328247, 0.46808174678257536, 0.48776139531816753, 0.4663775478090559, 0.4384042961256845, 0.41692767824445454, 0.41576080662863596, 0.3974596517426627, 0.418089074747903, 0.3935455594744001, 0.3978891968727112, 0.40439151014600483, 0.3846040964126587, 0.381013708455222, 0.3889651043074472, 0.3912448457309178, 0.4057614207267761, 0.4106713022504534, 0.37031322717666626], "val_accuracy": [0.27933332324028015, 0.5099999904632568, 0.5996666550636292, 0.5860000252723694, 0.7120000123977661, 0.718666672706604, 0.7059999704360962, 0.7566666603088379, 0.7540000081062317, 0.7770000100135803, 0.7369999885559082, 0.7196666598320007, 0.7826666831970215, 0.8013333082199097, 0.781000018119812, 0.7749999761581421, 0.7706666588783264, 0.7973333597183228, 0.8113333582878113, 0.8236666917800903, 0.8190000057220459, 0.8326666951179504, 0.8243333101272583, 0.8303333520889282, 0.8209999799728394, 0.8153333067893982, 0.8353333473205566, 0.8426666855812073, 0.8186666369438171, 0.8243333101272583, 0.8130000233650208, 0.8253333568572998, 0.840666651725769]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 8, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [93, 47, 61], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 9, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7994285821914673, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0605232059648557, 1.8698725029934415, 1.5874574942564244, 1.0124185986806058, 0.8220022090784138, 0.745408417305942, 0.7238434877740142, 0.6682364205170332, 0.630309736353925, 0.6099039602352092, 0.6014289373986835, 0.5808479085479982, 0.5541430744457522, 0.5444830732456745, 0.5417380949777304, 0.5320598984855812, 0.5005214293288706, 0.4865190008643627, 0.5120324151524778, 0.4724884550994366, 0.45761575973690494, 0.4574546404817652, 0.45716492511482604, 0.43206331297202183], "accuracy": [0.30379077792167664, 0.4015321731567383, 0.46083739399909973, 0.6345264911651611, 0.6995112895965576, 0.7185312509536743, 0.7289658188819885, 0.7456082701683044, 0.7638356685638428, 0.7627789974212646, 0.7737419009208679, 0.7741381525993347, 0.7917051911354065, 0.7946110367774963, 0.8010830879211426, 0.8034605979919434, 0.8092722296714783, 0.819442629814148, 0.8088759779930115, 0.8269713521003723, 0.8253863453865051, 0.8267071843147278, 0.8257825970649719, 0.839519202709198], "val_loss": [1.3981338569096156, 1.5079930850437708, 1.0198091438838415, 0.8074343204498291, 0.6635385240827288, 0.5256175994873047, 0.5378931249891009, 0.5031994581222534, 0.4863975729261126, 0.528715695653643, 0.4507481711251395, 0.4654787267957415, 0.46009126731327604, 0.491746119090489, 0.44209679535457064, 0.4256622706140791, 0.46167540550231934, 0.4359689440046038, 0.414851222719465, 0.41645784037453787, 0.4023301175662449, 0.42511255400521414, 0.410521251814706, 0.41612459080559866], "val_accuracy": [0.49533334374427795, 0.41100001335144043, 0.5590000152587891, 0.640333354473114, 0.6880000233650208, 0.7596666812896729, 0.7670000195503235, 0.7786666750907898, 0.7743333578109741, 0.7673333287239075, 0.7983333468437195, 0.7916666865348816, 0.8019999861717224, 0.7773333191871643, 0.8040000200271606, 0.8063333630561829, 0.7703333497047424, 0.7986666560173035, 0.8230000138282776, 0.8140000104904175, 0.8206666707992554, 0.8149999976158142, 0.8149999976158142, 0.809333324432373]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 1, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7931428551673889, "mapping_values": [1, 7, 7, 4, 3, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.060543884076557, 1.8766899026695134, 1.581490358672106, 1.0608575949815633, 0.8218884880059998, 0.7575283200276951, 0.7130692784402979, 0.6722585721385005, 0.6298949086607849, 0.6312008970260242, 0.5919974204681774, 0.6007569090817126, 0.5593138219358867, 0.5525359725435696, 0.5671018403377264, 0.5368029043588184, 0.5032924912026561], "accuracy": [0.30365869402885437, 0.39743760228157043, 0.46189406514167786, 0.6174877882003784, 0.693831741809845, 0.7154933214187622, 0.7342491149902344, 0.7456082701683044, 0.7622507214546204, 0.7552502751350403, 0.780610203742981, 0.7726852297782898, 0.7917051911354065, 0.7889314293861389, 0.7911768555641174, 0.7968564033508301, 0.8084797263145447], "val_loss": [1.3968935353415353, 1.4593486785888672, 0.8623765366418021, 0.7478319917406354, 0.6719827481678554, 0.6117844070707049, 0.5501142059053693, 0.5832084587642125, 0.5068045854568481, 0.5098662717001778, 0.4535154104232788, 0.44715837069920134, 0.4667154720851353, 0.5026165928159442, 0.43969202041625977, 0.4308029157774789, 0.47945763383592876], "val_accuracy": [0.4959999918937683, 0.3930000066757202, 0.5899999737739563, 0.659333348274231, 0.6819999814033508, 0.7136666774749756, 0.7440000176429749, 0.7210000157356262, 0.7673333287239075, 0.7670000195503235, 0.7913333177566528, 0.8100000023841858, 0.793666660785675, 0.7643333077430725, 0.8006666898727417, 0.8100000023841858, 0.7666666507720947]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 8, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [6, 3, 2, 0, 4, 8, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.7891428470611572, "mapping_values": [1, 6, 6, 3, 3, 2, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(alpha)))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.117373841297924, 2.077554986713396, 1.8626854437973048, 1.4749387276722157, 1.0374903937907756, 0.857346654017021, 0.7432026514177545, 0.6970771983189117, 0.6297521358704004, 0.6380495693878554, 0.6142476170904774, 0.5704388682396027, 0.5765002234075615, 0.5589140687620541], "accuracy": [0.27143046259880066, 0.3465856611728668, 0.40483424067497253, 0.4947827160358429, 0.6346585750579834, 0.6763967871665955, 0.7234182953834534, 0.7323999404907227, 0.7644960880279541, 0.7567031979560852, 0.7687227725982666, 0.7860256433486938, 0.789459764957428, 0.7877426743507385], "val_loss": [1.557432004383632, 1.290102754320417, 1.747450794492449, 1.0929782731192452, 0.7084423644202096, 0.6089885575430733, 0.6042146001543317, 0.5215290103639875, 0.4971129723957607, 0.5080015148435321, 0.4932403564453125, 0.5589147295270648, 0.4831188576562064, 0.5015410355159214], "val_accuracy": [0.5400000214576721, 0.3863333463668823, 0.1783333271741867, 0.5513333082199097, 0.6633333563804626, 0.7293333411216736, 0.7070000171661377, 0.7716666460037231, 0.781333327293396, 0.7616666555404663, 0.7736666798591614, 0.753000020980835, 0.7799999713897705, 0.7683333158493042]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [1, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [38, 80, 41], [1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 5, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 2, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [3, 9, 76, 58]], "fitness": -0.1599999964237213, "mapping_values": [1, 7, 7, 4, 3, 2, 10, 10, 6, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(beta))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3023544291558125, 2.303444155612563, 2.302558374033313, 2.302544855910868, 2.301304193614355, 2.30115574380237, 2.301021986759696, 2.3012106490409163, 2.3006312818480614, 2.3011972662984044, 2.3019073127582326, 2.3020341915618854, 2.301214715194047, 2.3009926924505852, 2.30141728180369, 2.3013667667609603, 2.2996796902538277, 2.3002151665418626, 2.3007915127058514, 2.3002596422665786, 2.2991737631003084, 2.298865507370477, 2.2982450052101884, 2.2982347134066266, 2.299845414186245, 2.2977379178012036, 2.299246798637379, 2.2977263283468177, 2.2966284611127192, 2.297984846610403, 2.296794919856803, 2.297044681976846, 2.2974730661563774, 2.297972506724801, 2.2969438670380966, 2.2978455543266136, 2.2947998074902016, 2.295649929604652, 2.2959411579777522, 2.295787636661542, 2.295099498982821, 2.296438717712989, 2.2961285478324625, 2.295073568671371, 2.29615288180068, 2.293869297880113, 2.2946808701256844, 2.2953787231646854, 2.294283689272922, 2.2951481728395686, 2.2941669203176662, 2.292069311926724, 2.293795942772082, 2.2937072355040877, 2.29405364170208, 2.293726629159706, 2.2939455393613715, 2.2935397389731498, 2.2932375878107436, 2.293514266509768, 2.2924956028030974, 2.2921947897259964, 2.2921974713760456, 2.289684584773432, 2.29172999782333, 2.2897179458969856, 2.2913811795070047, 2.2915162541028327, 2.292637285854303, 2.2901952078691674, 2.290963144035324, 2.2900575095982743, 2.291182273036658, 2.2921555120364596, 2.290202188013158, 2.2909848201607104, 2.289496424175792, 2.289725098580323, 2.287917163409514, 2.2877589440411894, 2.288683940863266, 2.2892978686099794, 2.289027548925893, 2.2905114309867423, 2.289498634531104, 2.2890626538966576, 2.2882830073505644, 2.286901219583002, 2.2866980196257876, 2.287093139201769, 2.287604317893725, 2.2874383740909443, 2.2858527904929202, 2.2862239239820794, 2.2851050117657943, 2.2850761463644953, 2.286410945864118, 2.2868328809328777, 2.2865357844269965, 2.2853393108459623], "accuracy": [0.08492933213710785, 0.09351472556591034, 0.08770307898521423, 0.08796724677085876, 0.09391097724437714, 0.0936468094587326, 0.09232597798109055, 0.09377889335155487, 0.09549596905708313, 0.09179764986038208, 0.09259014576673508, 0.09219389408826828, 0.09549596905708313, 0.09245806187391281, 0.09642054885625839, 0.09298639744520187, 0.09734513610601425, 0.09417514503002167, 0.09840179979801178, 0.0948355570435524, 0.09774138033390045, 0.10328886657953262, 0.10170386731624603, 0.09879804402589798, 0.09866596013307571, 0.10157178342342377, 0.10328886657953262, 0.10077928751707077, 0.1026284471154213, 0.09813763201236725, 0.10672302544116974, 0.1072513535618782, 0.10421344637870789, 0.09774138033390045, 0.09945846349000931, 0.10460969805717468, 0.10896842926740646, 0.10328886657953262, 0.10487385839223862, 0.10857218503952026, 0.10606260597705841, 0.10170386731624603, 0.10698718577623367, 0.10962884873151779, 0.10606260597705841, 0.11266675591468811, 0.1072513535618782, 0.1138555034995079, 0.10698718577623367, 0.11293092370033264, 0.10989301651716232, 0.11279883980751038, 0.11200633645057678, 0.11121384054422379, 0.1158367469906807, 0.11332716792821884, 0.11847840249538422, 0.11332716792821884, 0.11240258812904358, 0.10672302544116974, 0.11345925182104111, 0.11319508403539658, 0.11847840249538422, 0.12349755316972733, 0.11887465417385101, 0.12534672021865845, 0.11979923397302628, 0.11913882195949554, 0.11266675591468811, 0.11966715008020401, 0.11768590658903122, 0.11834631860256195, 0.12296922504901886, 0.11438383162021637, 0.1208558976650238, 0.12019548565149307, 0.12402588874101639, 0.1216483935713768, 0.12495046854019165, 0.12296922504901886, 0.12574297189712524, 0.12481838464736938, 0.12376172095537186, 0.12310130894184113, 0.1220446452498436, 0.12429005652666092, 0.12772421538829803, 0.1286487877368927, 0.13076211512088776, 0.13195087015628815, 0.13261127471923828, 0.12851670384407043, 0.13142253458499908, 0.12878087162971497, 0.13591335713863373, 0.13815876841545105, 0.12600713968276978, 0.13155461847782135, 0.13670584559440613, 0.13459251821041107], "val_loss": [1.9710277829851424, 1.9708665439060755, 1.970705441066197, 1.9705431120736259, 1.9703827585492815, 1.9702200208391463, 1.9700581686837333, 1.9698963846479143, 1.9697353499276298, 1.969573906489781, 1.9694131442478724, 1.9692519051688058, 1.9690912791660853, 1.9689298357282365, 1.968770980834961, 1.968611240386963, 1.9684525217328752, 1.9682920319693429, 1.9681314740862166, 1.9679714611598425, 1.967813287462507, 1.9676542963300432, 1.9674951689583915, 1.9673371315002441, 1.9671777316502161, 1.9670172418866838, 1.9668566158839635, 1.966695785522461, 1.966536590031215, 1.9663761683872767, 1.966216768537249, 1.9660570962088448, 1.9658988543919154, 1.9657400676182337, 1.965583051953997, 1.965423311505999, 1.9652654102870397, 1.9651077134268624, 1.9649481092180525, 1.9647881644112724, 1.9646287645612444, 1.964470727103097, 1.9643120765686035, 1.964153221675328, 1.9639949117388045, 1.9638372148786272, 1.963679313659668, 1.9635191644941057, 1.9633630343845911, 1.9632060868399483, 1.9630492074148995, 1.9628913061959403, 1.962733609335763, 1.9625773429870605, 1.9624193055289132, 1.9622603143964494, 1.962101868220738, 1.9619437626429967, 1.9617884499686105, 1.9616309574672155, 1.9614732606070382, 1.961315495627267, 1.9611589568001884, 1.9609998975481306, 1.9608425412859236, 1.9606851169041224, 1.9605278968811035, 1.9603687695094518, 1.9602113451276506, 1.9600520815168108, 1.9598942484174455, 1.9597347123282296, 1.959575857434954, 1.959419114249093, 1.9592626435416085, 1.9591082164219447, 1.9589505876813615, 1.9587913921901159, 1.9586334909711565, 1.9584747041974748, 1.9583159174237932, 1.9581575393676758, 1.9580001149858748, 1.9578422137669154, 1.9576843806675501, 1.9575269562857491, 1.95736905506679, 1.9572106770106725, 1.9570535932268416, 1.9568965775626046, 1.9567392894199915, 1.956580434526716, 1.9564221245901925, 1.9562627928597587, 1.9561027118137904, 1.9559444699968611, 1.9557862962995256, 1.9556291443961007, 1.9554719243730818, 1.9553133419581823], "val_accuracy": [0.03733333200216293, 0.03866666555404663, 0.03933333232998848, 0.0403333343565464, 0.041333332657814026, 0.041333332657814026, 0.041999999433755875, 0.04266666620969772, 0.043666668236255646, 0.043666668236255646, 0.04399999976158142, 0.044333335012197495, 0.04600000008940697, 0.047333333641290665, 0.04866666719317436, 0.05000000074505806, 0.05133333429694176, 0.052666667848825455, 0.05366666615009308, 0.05400000140070915, 0.054666668176651, 0.055666666477918625, 0.056333333253860474, 0.05700000002980232, 0.0573333315551281, 0.058666665107011795, 0.05900000035762787, 0.061666667461395264, 0.06333333253860474, 0.06466666609048843, 0.06566666811704636, 0.0663333311676979, 0.06800000369548798, 0.06866666674613953, 0.07199999690055847, 0.07266666740179062, 0.07333333045244217, 0.07533333450555801, 0.07733333110809326, 0.07800000160932541, 0.08033332973718643, 0.08266666531562805, 0.08433333039283752, 0.08566666394472122, 0.08699999749660492, 0.08799999952316284, 0.08833333104848862, 0.08900000154972076, 0.09033333510160446, 0.09166666865348816, 0.09399999678134918, 0.0949999988079071, 0.09533333033323288, 0.09833333641290665, 0.10000000149011612, 0.10133333504199982, 0.10199999809265137, 0.10433333367109299, 0.10466666519641876, 0.10533333569765091, 0.10733333230018616, 0.10866666585206985, 0.11033333092927933, 0.11166666448116302, 0.1133333370089531, 0.11400000005960464, 0.11633333563804626, 0.11800000071525574, 0.11933333426713943, 0.12099999934434891, 0.12200000137090683, 0.1236666664481163, 0.12533333897590637, 0.12566666305065155, 0.12733332812786102, 0.1303333342075348, 0.1316666603088379, 0.13300000131130219, 0.13333334028720856, 0.13600000739097595, 0.13766667246818542, 0.13866665959358215, 0.14133332669734955, 0.14233332872390747, 0.1469999998807907, 0.14733333885669708, 0.14800000190734863, 0.14933332800865173, 0.1509999930858612, 0.15133333206176758, 0.15299999713897705, 0.15533334016799927, 0.15733332931995392, 0.15966667234897614, 0.16233333945274353, 0.16300000250339508, 0.16466666758060455, 0.16566666960716248, 0.16833333671092987, 0.17133332788944244]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 9, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 0, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.338322523263436, 2.7024839501638516, 3.724157956707448, 5.565894379828033, 8.119375984540563, 11.32582912639053, 15.226815549814942], "accuracy": [0.09338264167308807, 0.09549596905708313, 0.09602430462837219, 0.09430722147226334, 0.10355303436517715, 0.10315678268671036, 0.10196803510189056], "val_loss": [2.0344836371285573, 2.378772054399763, 3.1926254544939314, 4.519745145525251, 6.320887156895229, 8.583845955984932, 11.325605937412806], "val_accuracy": [0.09799999743700027, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 4, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [95, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [2, 1], [52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 16, 16, 10, 6, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302492874236454, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(beta, tf.math.negative(alpha)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302918839401116, 2.3029732843982766, 2.3030371366159996, 2.302912446407358, 2.3029203902083206, 2.302936838885907, 2.3029279808688865], "accuracy": [0.09060890227556229, 0.10038304328918457, 0.09826971590518951, 0.09470347315073013, 0.09998679161071777, 0.09589222073554993, 0.09457138925790787], "val_loss": [1.9737444605146135, 1.9736321313040597, 1.9736601284572057, 1.9736567224775041, 1.9737518174307687, 1.9736553600856237, 1.9736281803676061], "val_accuracy": [0.09866666793823242, 0.10566666722297668, 0.10133333504199982, 0.10133333504199982, 0.09666666388511658, 0.09666666388511658, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 9, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6, 1, 7, 0, 9, 5], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 21, 14, 7, 4], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), grad)))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.divide_no_nan(beta, tf.math.subtract(tf.math.add(tf.math.negative(alpha), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 9, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [57, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [2, 1], [52], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [3, 4, 8, 8, 6, 7, 4, 5, 6, 2, 6, 9], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 3, 0, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 20, 12, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), beta)))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 1, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 2, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 3, 3, 0, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0], [4, 0, 8, 8, 6, 7, 4, 5, 6, 6, 1, 3, 1, 8, 2, 5, 9], [2, 3, 2, 1, 0, 0, 2, 2, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 3, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 27, 17, 10, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.square(beta))), beta))), beta), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 1, 5, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6, 2, 6, 9, 0], [3, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 20, 13, 7, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), beta))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [94, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 8, 8, 4, 4, 1, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302492874236454, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 2, 9, 2, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [38, 80, 41], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 8, 4, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [2, 3, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 8, 8, 4, 4, 0, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), grad)), tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302492874236454, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 8, 8, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [93, 47, 61], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [0, 1, 1], [9], [3, 1], [52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6, 4, 9, 5, 2], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 20, 13, 7, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(sigma, beta), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), beta))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 5, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [6, 1], [52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302492874236454, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 3, 9, 1, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [2, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [38, 80, 41], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 8, 0, 0, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 3, 2, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 2, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, beta)))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08849557489156723, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [6, 1, 9, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 0, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 2, 0, 8, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 3, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [33, 46, 41, 7, 45, 13], [0], [0, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 3, 12, 12, 7, 5, 1, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), grad))), tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302492874236454, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [8, 5, 7, 3, 9, 5, 1, 7, 8, 6, 5, 7, 5, 0, 2, 2, 2, 1, 8], [0, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2], [95, 80, 41], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 2, 0, 4, 0, 2, 1, 9, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [26, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 7, 4, 5, 6], [0, 3, 2, 1, 0, 0, 2, 2], [48, 9, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.302424488664697, 2.303687968038061, 2.3029749691368266, 2.303137892949945, 2.302064423925762, 2.302101934968583], "accuracy": [0.08492933213710785, 0.09285431355237961, 0.0870426595211029, 0.0870426595211029, 0.09219389408826828, 0.09100515395402908], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]