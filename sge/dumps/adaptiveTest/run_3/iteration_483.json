[{"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 5, 1, 6, 5, 7, 3, 1, 8, 0, 0, 5, 0, 2, 0, 8, 3, 1, 3, 3, 0, 8, 5, 8], [1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 0, 1, 1, 2, 2, 2, 1, 1, 0, 0, 2, 1], [20, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.8191428780555725, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.170158744818814, 2.192704329479955, 1.792230995717601, 1.6383719462067334, 1.2445925618238327, 0.9391046751208388, 0.8538826556411071, 0.7698017560165037, 0.7481810744995013, 0.687870271500973, 0.6761740770684478, 0.6250897065728112, 0.6003430361178383, 0.5752559314865588, 0.5605119448910457, 0.557750972065833, 0.5220287568643817, 0.5325409764107334, 0.48988396981530546, 0.48946808801508535, 0.47953703024478367, 0.4682174238821991, 0.4686058580033012, 0.4420768275567648, 0.45214037635165466, 0.45407091498595376, 0.42741373242356945, 0.42966229524185406, 0.42016254423505767, 0.39497003431616834, 0.3825481622021637], "accuracy": [0.25320300459861755, 0.2767137885093689, 0.4171179533004761, 0.472989022731781, 0.5587108731269836, 0.651168942451477, 0.6791704893112183, 0.6999075412750244, 0.7172104120254517, 0.7380794882774353, 0.7450799345970154, 0.7642319202423096, 0.7781006693840027, 0.7816668748855591, 0.7848368883132935, 0.7915731072425842, 0.800290584564209, 0.7956677079200745, 0.8153480291366577, 0.8166688680648804, 0.8171972036361694, 0.8240655064582825, 0.8244617581367493, 0.8352925777435303, 0.8285563588142395, 0.8335754871368408, 0.8364813327789307, 0.8356888294219971, 0.842028796672821, 0.8544445633888245, 0.8585391640663147], "val_loss": [1.928861345563616, 1.7070684773581368, 1.795611994607108, 0.9771427427019391, 0.9453056880405971, 0.7790226595742362, 0.6301178761890956, 0.5727656398500715, 0.5425091130392892, 0.5348899194172451, 0.5610009091241019, 0.5105027641568866, 0.48446193763187956, 0.46230689116886686, 0.4842158045087542, 0.4559680053165981, 0.509149398122515, 0.4477326529366629, 0.41530275344848633, 0.4122510126658848, 0.4008389115333557, 0.4118735534804208, 0.38379006726401194, 0.37852085488183157, 0.37830235276903423, 0.37804666587284635, 0.3816294159208025, 0.39794439928872244, 0.3761288438524519, 0.3870845522199358, 0.3766946622303554], "val_accuracy": [0.2446666657924652, 0.3863333463668823, 0.3946666717529297, 0.6209999918937683, 0.5699999928474426, 0.6543333530426025, 0.6966666579246521, 0.7363333106040955, 0.7523333430290222, 0.7429999709129333, 0.7419999837875366, 0.7699999809265137, 0.7716666460037231, 0.781000018119812, 0.7816666960716248, 0.7973333597183228, 0.7553333044052124, 0.8050000071525574, 0.8236666917800903, 0.8206666707992554, 0.8326666951179504, 0.8116666674613953, 0.840666651725769, 0.8420000076293945, 0.8373333215713501, 0.8423333168029785, 0.831333339214325, 0.8273333311080933, 0.8420000076293945, 0.8346666693687439, 0.8363333344459534]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 1, 1, 2, 1, 0, 5, 0, 2, 4, 8, 3, 1, 3, 1, 0, 8, 5, 8, 3, 3, 6, 9, 2, 1, 6, 5, 8, 7, 5], [2, 1, 2, 0, 2, 2, 0, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0], [81, 48, 59, 88, 4, 68, 88, 25, 71, 77], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7985714077949524, "mapping_values": [1, 67, 67, 41, 26, 10, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.math.add(alpha, grad), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, alpha))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), grad))), tf.math.add(alpha, alpha)))))), tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))))), tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(alpha)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.2773457224090983, 1.8066455858290047, 1.3483416162634947, 1.1412344400467984, 0.9724672719818521, 0.8908903643502661, 0.7783873197172989, 0.7137940875795209, 0.6734016320850588, 0.6712826772246929, 0.6370791116993362, 0.620789583222804, 0.6119207636381987, 0.5912608935722444, 0.5699348283355672, 0.5597527741740298, 0.5521732292013429, 0.5364462814358137, 0.5308883410356048, 0.5103998874487453, 0.5090791860851456], "accuracy": [0.25478801131248474, 0.3691718280315399, 0.5198785066604614, 0.5898824334144592, 0.6427156329154968, 0.6630563735961914, 0.702681303024292, 0.7317395210266113, 0.7424382567405701, 0.7450799345970154, 0.7600052952766418, 0.7631752490997314, 0.7671377658843994, 0.7770439982414246, 0.7829877138137817, 0.7852331399917603, 0.7951393723487854, 0.7917051911354065, 0.8010830879211426, 0.8050455451011658, 0.8072909712791443], "val_loss": [1.8253021921430315, 1.3117330414908273, 0.9904264381953648, 0.7579380784715924, 0.8505151271820068, 0.6473709685461861, 0.5850771835872105, 0.5513167892183576, 0.5208981548036847, 0.544953601700919, 0.4983067342213222, 0.49879632677350727, 0.5005778244563511, 0.47155014106205534, 0.4495470012937273, 0.4569903441837856, 0.4777069772992815, 0.46327783380235943, 0.44377355916159494, 0.48271645818437847, 0.43826931715011597], "val_accuracy": [0.3173333406448364, 0.421999990940094, 0.6163333058357239, 0.6696666479110718, 0.6166666746139526, 0.7096666693687439, 0.7350000143051147, 0.753000020980835, 0.7639999985694885, 0.7566666603088379, 0.7730000019073486, 0.7720000147819519, 0.7870000004768372, 0.7870000004768372, 0.796999990940094, 0.8033333420753479, 0.778333306312561, 0.7820000052452087, 0.7996666431427002, 0.7693333625793457, 0.8009999990463257]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 0, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.7894285917282104, "mapping_values": [1, 15, 15, 8, 7, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.015052718635028, 1.4461338901878773, 1.0628588351244783, 0.9240488244825587, 0.834554001624007, 0.7660774090318097, 0.7602187042789941, 0.718288023851929, 0.7039800942487343, 0.6746062770763392, 0.6903376773741771, 0.6509421080756322, 0.6406052715160182, 0.6169366732312547, 0.6051523114680425, 0.6094019141541717, 0.5863359459654813, 0.5836657625557236, 0.5572422718516808], "accuracy": [0.33681151270866394, 0.5033681392669678, 0.6001849174499512, 0.6528860330581665, 0.6868313550949097, 0.7153612375259399, 0.7181349992752075, 0.724210798740387, 0.7309470176696777, 0.7432307600975037, 0.7316074371337891, 0.7543256878852844, 0.7572315335273743, 0.7638356685638428, 0.7711002230644226, 0.7685906887054443, 0.7832518815994263, 0.7726852297782898, 0.7857614755630493], "val_loss": [1.3680385521480016, 0.9768743515014648, 0.7124997207096645, 0.694871016911098, 0.640043990952628, 0.6191944565091815, 0.5676817893981934, 0.5453534977776664, 0.5404505899974278, 0.5369314466203962, 0.5615337065287999, 0.5619868550981794, 0.49572013105664936, 0.49133661815098356, 0.5125773974827358, 0.49404261793409077, 0.4920041390827724, 0.4823498385293143, 0.46380930287497385], "val_accuracy": [0.437666654586792, 0.5723333358764648, 0.6823333501815796, 0.7003333568572998, 0.7076666951179504, 0.7176666855812073, 0.7453333139419556, 0.7506666779518127, 0.7493333220481873, 0.7463333606719971, 0.7353333234786987, 0.7433333396911621, 0.7766666412353516, 0.7963333129882812, 0.765999972820282, 0.768666684627533, 0.7803333401679993, 0.7770000100135803, 0.7946666479110718]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 6, 2, 3, 2, 6, 3, 3, 1, 6, 5, 7, 5, 1, 2, 1, 0, 8, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7825714349746704, "mapping_values": [1, 40, 40, 23, 17, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), grad)))), tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha)))))))), grad)))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.144539575928852, 1.4743065150060264, 1.1029078075363337, 0.969182148640733, 0.8604783550497248, 0.8403804143894429, 0.7816287076248075, 0.7385073470685145, 0.7337189231645067, 0.6965634942983734, 0.6957579850678147, 0.6969134125648441, 0.6601847918231049, 0.6461937783211922, 0.6641563425415526, 0.6176148714752812, 0.6225778575681062, 0.6183320046683596, 0.6148027580065608], "accuracy": [0.2925637364387512, 0.4896314740180969, 0.6065248847007751, 0.6454893946647644, 0.6876237988471985, 0.6901333928108215, 0.7051908373832703, 0.7257958054542542, 0.7260599732398987, 0.7408532500267029, 0.7351737022399902, 0.7358341217041016, 0.7519482374191284, 0.7555144429206848, 0.7460044622421265, 0.7684586048126221, 0.7631752490997314, 0.7631752490997314, 0.7693831920623779], "val_loss": [1.3617912360600062, 0.8814896515437535, 0.7441794361386981, 0.6505664927618844, 0.6745741197041103, 0.6188223532267979, 0.6069890430995396, 0.5770363126482282, 0.5540332794189453, 0.5375155210494995, 0.51893379007067, 0.5348634038652692, 0.5181608710970197, 0.49627697467803955, 0.5070104769298008, 0.5076836347579956, 0.5022451707295009, 0.49717395646231516, 0.4793816293988909], "val_accuracy": [0.5843333601951599, 0.6336666941642761, 0.6653333306312561, 0.7196666598320007, 0.6819999814033508, 0.7250000238418579, 0.7146666646003723, 0.7363333106040955, 0.7446666955947876, 0.7639999985694885, 0.7753333449363708, 0.7580000162124634, 0.7613333463668823, 0.7816666960716248, 0.7770000100135803, 0.7756666541099548, 0.7683333158493042, 0.7713333368301392, 0.7816666960716248]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 5, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.7805714011192322, "mapping_values": [1, 45, 45, 27, 18, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha)))))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), grad), tf.math.negative(alpha))))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.037264383810701, 1.347146705881385, 1.0613600635777343, 0.9028504710108644, 0.8460781019141157, 0.7900133484374452, 0.7576051812838916, 0.7313730576570244, 0.704128468372031, 0.6808083515283123, 0.6652638700423759, 0.6454908649257901, 0.6494250076636819, 0.6180265696529604, 0.6365438925119329, 0.6067504563729651, 0.5881659228174111, 0.5720729751042749], "accuracy": [0.33324527740478516, 0.5235767960548401, 0.6145819425582886, 0.6720380187034607, 0.6756042838096619, 0.7059833407402039, 0.7181349992752075, 0.7255316376686096, 0.7347774505615234, 0.7441553473472595, 0.7515519857406616, 0.7552502751350403, 0.7474573850631714, 0.7670056819915771, 0.7556465268135071, 0.772288978099823, 0.7792893648147583, 0.787082314491272], "val_loss": [1.3089824063437325, 0.8248629399708339, 0.6765991279057094, 0.7161758116313389, 0.6758882999420166, 0.5770111935479301, 0.5828895739146641, 0.5603903702327183, 0.5241540840693882, 0.5407444068363735, 0.5130899463381086, 0.5305111237934658, 0.4905890056065151, 0.49785854135240826, 0.4902040277208601, 0.49828985759190153, 0.49191456181662424, 0.5129959412983486], "val_accuracy": [0.5683333277702332, 0.6173333525657654, 0.7066666483879089, 0.6596666574478149, 0.6806666851043701, 0.7390000224113464, 0.7286666631698608, 0.7416666746139526, 0.7633333206176758, 0.750333309173584, 0.7673333287239075, 0.7463333606719971, 0.7866666913032532, 0.7680000066757202, 0.784333348274231, 0.7733333110809326, 0.7733333110809326, 0.7733333110809326]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 1, 2, 2, 1, 0, 5, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8, 9], [2, 1, 0, 0, 2, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.7760000228881836, "mapping_values": [1, 48, 48, 31, 17, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.negative(alpha))), grad), tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.square(alpha))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.037266705219126, 1.3486055271138353, 1.0573398140301526, 0.9022944594071982, 0.8371838032845036, 0.7989564848267375, 0.7446477567404803, 0.7120741839579556, 0.7167005674981675, 0.6941541672351259, 0.6665261878376514, 0.64593785742979, 0.6610437940848959, 0.6176322869668154, 0.6419355389133751, 0.6102387634455457, 0.5849337315105917, 0.5768718723969893], "accuracy": [0.33324527740478516, 0.5222559571266174, 0.616299033164978, 0.6712455153465271, 0.6845859289169312, 0.7042662501335144, 0.7251353859901428, 0.7316074371337891, 0.7322678565979004, 0.7382115721702576, 0.7511557340621948, 0.7539294958114624, 0.7437590956687927, 0.7676661014556885, 0.754589855670929, 0.7721568942070007, 0.7820631265640259, 0.7841764688491821], "val_loss": [1.3094711644308907, 0.8330224411828178, 0.7205294711249215, 0.6923801388059344, 0.668058957372393, 0.5713883808680943, 0.5875121355056763, 0.5713791676930019, 0.5409025635038104, 0.5669894729341779, 0.5093557494027274, 0.536297185080392, 0.49632613999503, 0.5001176595687866, 0.49760821887425016, 0.49745678901672363, 0.492795603615897, 0.5170196124485561], "val_accuracy": [0.5686666369438171, 0.6150000095367432, 0.6783333420753479, 0.6949999928474426, 0.6859999895095825, 0.7463333606719971, 0.7306666374206543, 0.7333333492279053, 0.7559999823570251, 0.7319999933242798, 0.7699999809265137, 0.7443333268165588, 0.781000018119812, 0.7639999985694885, 0.7770000100135803, 0.7706666588783264, 0.7799999713897705, 0.768666684627533]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 8, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 9, 6, 5, 0, 2, 0, 8, 3, 1, 3, 8, 0, 8, 5, 8], [2, 1, 2, 0, 2, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7651428580284119, "mapping_values": [1, 31, 31, 19, 12, 5, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), alpha))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.144531677522207, 1.474945079806364, 1.1014014482891807, 0.9689281161482372, 0.8508541637549641, 0.8316598065840082, 0.7852410191967503, 0.7451628483344755, 0.7305714325929409, 0.7164454593272367, 0.6940703842980341, 0.697003752343517, 0.6700624653282513, 0.6380919083911571, 0.6594560680340908, 0.6201954146244617], "accuracy": [0.2925637364387512, 0.4896314740180969, 0.6058644652366638, 0.644300639629364, 0.6909258961677551, 0.6922467350959778, 0.7012283802032471, 0.7210407853126526, 0.7232862114906311, 0.7294940948486328, 0.7363624572753906, 0.7380794882774353, 0.7448157668113708, 0.7578919529914856, 0.7483819723129272, 0.7646281719207764], "val_loss": [1.3620591163635254, 0.8759615250996181, 0.7375144958496094, 0.6566529444285801, 0.6682647807257516, 0.6099673339298793, 0.5891710008893695, 0.5793854679380145, 0.550833923476083, 0.5504258530480521, 0.5189291409083775, 0.5364095653806414, 0.5251246350152152, 0.558585660798209, 0.512901782989502, 0.5138210228511265], "val_accuracy": [0.5846666693687439, 0.643666684627533, 0.6656666398048401, 0.7213333249092102, 0.6899999976158142, 0.7206666469573975, 0.734000027179718, 0.7353333234786987, 0.7509999871253967, 0.7556666731834412, 0.7773333191871643, 0.7599999904632568, 0.765333354473114, 0.7336666584014893, 0.7739999890327454, 0.7723333239555359]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 9, 1, 3, 0, 6, 3, 2, 6, 6, 4, 7, 8, 9, 2, 0, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 8, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [33, 48, 98, 30, 22, 68, 40], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [8, 74, 76, 58]], "fitness": -0.7628571391105652, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.290983438050947, 2.2586376033423203, 2.2197720129035483, 2.167143546610681, 2.094300799003886, 1.9836103412154298, 1.84623169873794, 1.6837600338586554, 1.5404826990129328, 1.4190400896008146, 1.3226620487297027, 1.259505300741658, 1.189911992873309, 1.1436829746926795, 1.0878578401150374, 1.0622433364320472, 1.0314260013603247, 0.9963893604757228, 0.9749205236768111, 0.9524109115721512, 0.9436206502952847, 0.9254126147728838, 0.9051106091598085, 0.8909392623916483, 0.8883828372688278, 0.8668200715169805, 0.8507353619829444, 0.8463940791339922, 0.8386454455777875, 0.83724255281401, 0.8169166030129265, 0.8145208674777122, 0.795147499813301, 0.7944676756244751, 0.7895820961888471, 0.792431297846726, 0.780141667927009, 0.7711202438560065, 0.7723533226010538, 0.758264421897085, 0.7555107111629163, 0.7537633142986506, 0.7463942572913386, 0.7490213509123039, 0.7369632322428296, 0.7333589998517825, 0.72236420574158, 0.7239386664405554, 0.7301464903277491, 0.7149922385616955, 0.7089679106713727, 0.7061826933833193, 0.7123453141423957, 0.7060724979835085, 0.7040160496347316], "accuracy": [0.11345925182104111, 0.19865275919437408, 0.27684587240219116, 0.3299432098865509, 0.37485140562057495, 0.41764628887176514, 0.445779949426651, 0.4842160940170288, 0.5099722743034363, 0.535332202911377, 0.5525029897689819, 0.5746929049491882, 0.594241201877594, 0.6008453369140625, 0.6174877882003784, 0.6262052655220032, 0.6440364718437195, 0.650640606880188, 0.6561880707740784, 0.6637167930603027, 0.6635847091674805, 0.6765288710594177, 0.6738871932029724, 0.6812838315963745, 0.6836613416671753, 0.6914542317390442, 0.6935675740242004, 0.69673752784729, 0.702681303024292, 0.6968696117401123, 0.709021270275116, 0.7071720957756042, 0.7140403985977173, 0.7108704447746277, 0.7140403985977173, 0.7135120630264282, 0.7156254053115845, 0.7219653725624084, 0.7170783281326294, 0.7246070504188538, 0.7235503792762756, 0.7243428826332092, 0.724210798740387, 0.7269845604896545, 0.7271166443824768, 0.7325320243835449, 0.7357020378112793, 0.7353057861328125, 0.7321357727050781, 0.7368907928466797, 0.7387399077415466, 0.7371549606323242, 0.737947404384613, 0.7367587089538574, 0.7371549606323242], "val_loss": [1.9423479352678572, 1.910111631665911, 1.8671790531703405, 1.8049939019339425, 1.7170326028551375, 1.5958965505872453, 1.4477079595838274, 1.289914505822318, 1.148346049445016, 1.036564724785941, 0.9539656979697091, 0.8930399758475167, 0.843666843005589, 0.8038170167378017, 0.7711374759674072, 0.7461431196757725, 0.7239222867148263, 0.7068556376865932, 0.6907250370298114, 0.6802236693246024, 0.6680277756282261, 0.6571452277047294, 0.6462814467293876, 0.6364714588437762, 0.6285972595214844, 0.6223067896706718, 0.6165547881807599, 0.6096086161477225, 0.6039874383381435, 0.5984688486371722, 0.5937220709664481, 0.5885640553065709, 0.5825560433523995, 0.5789052588599068, 0.5740200962339129, 0.5708520071847099, 0.5677495513643537, 0.5638447999954224, 0.5615804536002023, 0.5559911046709333, 0.5539558955601284, 0.5529462269374302, 0.5462749685559954, 0.5444140604564122, 0.5434096881321498, 0.5416488306862968, 0.5361205339431763, 0.5364109448024205, 0.5313256297792707, 0.5322256769452777, 0.5285833563123431, 0.5246752841132027, 0.5257783617292132, 0.5226975849696568, 0.519891585622515], "val_accuracy": [0.281333327293396, 0.37400001287460327, 0.4320000112056732, 0.49266666173934937, 0.5163333415985107, 0.5446666479110718, 0.5643333196640015, 0.5843333601951599, 0.6116666793823242, 0.640999972820282, 0.6650000214576721, 0.6813333630561829, 0.690666675567627, 0.6923333406448364, 0.699999988079071, 0.7023333311080933, 0.7129999995231628, 0.7170000076293945, 0.7196666598320007, 0.718666672706604, 0.7243333458900452, 0.7296666502952576, 0.7293333411216736, 0.7356666922569275, 0.7363333106040955, 0.7383333444595337, 0.7403333187103271, 0.7400000095367432, 0.7453333139419556, 0.7463333606719971, 0.7426666617393494, 0.7433333396911621, 0.7480000257492065, 0.7433333396911621, 0.7536666393280029, 0.7546666860580444, 0.7553333044052124, 0.7549999952316284, 0.7540000081062317, 0.7566666603088379, 0.7590000033378601, 0.7593333125114441, 0.7596666812896729, 0.7603333592414856, 0.7586666941642761, 0.7636666893959045, 0.7633333206176758, 0.7590000033378601, 0.7646666765213013, 0.7673333287239075, 0.765333354473114, 0.7649999856948853, 0.765999972820282, 0.7646666765213013, 0.7663333415985107]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 9, 1, 3, 0, 6, 3, 2, 6, 6, 4, 7, 8, 9, 2, 0, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 8, 8], [1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 2, 1, 1, 0, 0, 2, 1], [81, 48, 32, 88, 65, 68, 88, 25, 91, 47, 65, 81, 15, 68, 24, 25], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 1, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.7605714201927185, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.144534822247835, 1.4749152061410504, 1.1027875932657079, 0.9683143296781517, 0.856435227773571, 0.8271598868586715, 0.7918957788174918, 0.7398764114369806, 0.7309165200332467, 0.7032770323101493, 0.7161738715702752, 0.6972916771896038, 0.6661175463681743, 0.6383055186211835, 0.6586683796475892, 0.6189286377231253], "accuracy": [0.2925637364387512, 0.490159809589386, 0.6057323813438416, 0.6460176706314087, 0.6921146512031555, 0.6968696117401123, 0.702681303024292, 0.722229540348053, 0.7268524765968323, 0.7362303733825684, 0.7289658188819885, 0.7383436560630798, 0.7479857206344604, 0.7597411274909973, 0.7453441023826599, 0.7677981853485107], "val_loss": [1.3618371827261788, 0.8807483400617327, 0.7402140583310809, 0.6525826454162598, 0.6750781876700265, 0.6189066341945103, 0.6010578870773315, 0.574840750013079, 0.5578038011278424, 0.5542146989277431, 0.523210951260158, 0.5323813472475324, 0.5179274593080793, 0.5305991513388497, 0.5173412050519671, 0.5110565253666469], "val_accuracy": [0.5846666693687439, 0.6370000243186951, 0.6660000085830688, 0.7226666808128357, 0.6819999814033508, 0.721666693687439, 0.7250000238418579, 0.7406666874885559, 0.7386666536331177, 0.7473333477973938, 0.7726666927337646, 0.7636666893959045, 0.7693333625793457, 0.7486666440963745, 0.7703333497047424, 0.7699999809265137]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [4, 9, 8, 2, 2, 2, 3, 6, 8, 6, 4, 7, 8, 9, 2, 0, 2, 0, 0, 2, 2, 3, 0, 1, 3, 9, 0, 8, 9, 8, 8], [1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [81, 48, 32, 88, 65, 48, 88, 25, 91, 47, 65, 81, 15, 68, 24, 25], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [32, 74, 76, 58]], "fitness": -0.7591428756713867, "mapping_values": [1, 22, 22, 14, 8, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), alpha)))))), tf.math.add(alpha, grad))))))), tf.math.sqrt(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.279949731641615, 2.209640367927647, 2.0833292001620447, 1.858732933302786, 1.5922844723435818, 1.3603194935320864, 1.2204574292692698, 1.1100924539685706, 1.0490832993257095, 0.9977629289902936, 0.9602062814129563, 0.9370156847931501, 0.9039602786196285, 0.8766916965480966, 0.8409617213666903, 0.8374836762048123, 0.8244296207545755, 0.8019060191225146, 0.7922967411681031, 0.7804561612423716, 0.7807493853436769, 0.7698005038544707, 0.7506820000299704, 0.7454745597480987, 0.7438688645068727, 0.7300744526311628, 0.7198609792088725, 0.7175273770559197, 0.7127958944507987], "accuracy": [0.14000792801380157, 0.28199708461761475, 0.3800026476383209, 0.43851539492607117, 0.49610355496406555, 0.549068808555603, 0.5752212405204773, 0.6155065298080444, 0.6351869106292725, 0.6482630968093872, 0.6597543358802795, 0.6729626059532166, 0.6781138777732849, 0.685510516166687, 0.695813000202179, 0.7005679607391357, 0.7054550051689148, 0.7108704447746277, 0.7136441469192505, 0.713908314704895, 0.7128516435623169, 0.7209087014198303, 0.7257958054542542, 0.7264562249183655, 0.7277770638465881, 0.7331924438476562, 0.735041618347168, 0.7362303733825684, 0.7404569983482361], "val_loss": [1.915574073791504, 1.8263487134660994, 1.654714618410383, 1.3834130082811629, 1.1206797191074915, 0.9480204582214355, 0.8416154725211007, 0.7732111045292446, 0.7307509694780622, 0.6961834941591535, 0.6721599272319249, 0.6569025005613055, 0.6397860561098371, 0.6256299189158848, 0.6095728363309588, 0.604793838092259, 0.5906227656773159, 0.5885600532804217, 0.5768267086574009, 0.5803051165172032, 0.5722860268184117, 0.5625417232513428, 0.5534917116165161, 0.546092050416129, 0.5403661898204258, 0.5393237727028983, 0.5361261197498867, 0.5301371472222465, 0.5283915655953544], "val_accuracy": [0.3713333308696747, 0.4573333263397217, 0.531333327293396, 0.5796666741371155, 0.5889999866485596, 0.6543333530426025, 0.6813333630561829, 0.6990000009536743, 0.7056666612625122, 0.7143333554267883, 0.7276666760444641, 0.7303333282470703, 0.734000027179718, 0.7350000143051147, 0.7400000095367432, 0.734000027179718, 0.7456666827201843, 0.7416666746139526, 0.7513333559036255, 0.7476666569709778, 0.7523333430290222, 0.7543333172798157, 0.7543333172798157, 0.765333354473114, 0.7573333382606506, 0.7630000114440918, 0.7596666812896729, 0.7649999856948853, 0.7636666893959045]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 2, 3, 4, 9, 8, 3, 5, 6, 5, 7, 2, 1, 2, 1, 2, 5, 0, 2, 0, 8, 3, 9, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 0, 2, 2, 0, 2, 1, 1, 1, 0, 2, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0], [81, 48, 35, 61, 92, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [32, 74, 76, 58]], "fitness": -0.7588571310043335, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2799498305864274, 2.209640795292399, 2.0833260417850563, 1.8587306723728818, 1.5923025416439833, 1.360337046033214, 1.2204528251706397, 1.110082385436403, 1.0491215596503238, 0.9978220836676311, 0.9602578669302279, 0.9371410411157786, 0.9039189090204119, 0.8767183266295702, 0.8408934006743254, 0.8375481049917819, 0.8243759027671789, 0.8017810919989905, 0.792157712975954, 0.780479342623189, 0.7808532056523793, 0.769735143696706, 0.7505382032536748, 0.7453575155376333, 0.7438494963983519, 0.7302067610077838, 0.7196170572890676, 0.717756524463576, 0.7128476864153824], "accuracy": [0.14000792801380157, 0.28199708461761475, 0.37987056374549866, 0.43851539492607117, 0.49610355496406555, 0.5489367246627808, 0.5756174921989441, 0.6156386137008667, 0.6351869106292725, 0.6478668451309204, 0.6600185036659241, 0.672698438167572, 0.6783780455589294, 0.684982180595398, 0.6955488324165344, 0.700171709060669, 0.7057191729545593, 0.71100252866745, 0.7141724824905396, 0.7141724824905396, 0.7128516435623169, 0.7219653725624084, 0.7255316376686096, 0.726192057132721, 0.7276449799537659, 0.7322678565979004, 0.7349095344543457, 0.7351737022399902, 0.7411174178123474], "val_loss": [1.915574073791504, 1.8263459205627441, 1.6547139712742396, 1.3834186281476701, 1.120694875717163, 0.9480382374354771, 0.8416087797709874, 0.7731774875095913, 0.7306810958044869, 0.696198582649231, 0.672085097857884, 0.6568775517599923, 0.6398910284042358, 0.6260272945676532, 0.6096015657697406, 0.6048931394304548, 0.5905530623027256, 0.5885172401155744, 0.5768065793173653, 0.5803818872996739, 0.5721323830740792, 0.5627526385443551, 0.5536930220467704, 0.5461449452808925, 0.5405712979180473, 0.539063572883606, 0.5364360128130231, 0.5299099513462612, 0.5282531636101859], "val_accuracy": [0.3713333308696747, 0.45766666531562805, 0.531333327293396, 0.5796666741371155, 0.5889999866485596, 0.6543333530426025, 0.6809999942779541, 0.6990000009536743, 0.7059999704360962, 0.7143333554267883, 0.7286666631698608, 0.7300000190734863, 0.734333336353302, 0.734666645526886, 0.7413333058357239, 0.7333333492279053, 0.7463333606719971, 0.7433333396911621, 0.750333309173584, 0.7483333349227905, 0.7523333430290222, 0.7549999952316284, 0.7540000081062317, 0.7649999856948853, 0.7576666474342346, 0.7633333206176758, 0.7596666812896729, 0.7636666893959045, 0.7630000114440918]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 6, 3, 3, 9, 9, 3, 1, 2, 2, 5, 2, 0, 1, 1, 0, 8, 4, 9, 0, 8, 3, 1, 6, 0, 0, 1, 5, 8], [1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 32, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [3, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [48, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [3, 1], [52], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [6, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026908583345667, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0], [2, 4, 2, 3, 4, 9, 3, 3, 1, 6, 5, 7, 2, 1, 2, 1, 0, 5, 0, 0, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 51, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [41, 19, 41, 7, 45, 13], [0], [0, 1, 1], [9], [2, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 18, 14, 4, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), grad)))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3026908583345667, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 4, 2, 3, 3, 9, 3, 3, 1, 6, 2, 7, 2, 1, 2, 1, 0, 1, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [1, 1, 1, 1, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 2, 1, 1, 0, 0, 2, 1], [81, 48, 32, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [2, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 28, 20, 7, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.multiply(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), grad), grad)))))), tf.math.add(alpha, grad)), alpha)), tf.math.add(alpha, alpha)), tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.sqrt(beta)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 9, 1, 3, 0, 6, 3, 2, 6, 6, 4, 7, 8, 9, 2, 0, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 8, 8], [2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2, 1], [33, 48, 98, 30, 22, 68, 40], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [3, 0, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 10, 6, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.sqrt(sigma), tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.negative(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [3, 3, 6, 3, 3, 9, 3, 3, 1, 5, 2, 7, 2, 0, 2, 4, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 8, 5, 8, 9], [2, 1, 2, 0, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 0, 0, 2, 1], [84, 48, 32, 88, 4, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 2, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 47, 47, 31, 16, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.negative(alpha), grad), grad)))), tf.math.negative(grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.square(alpha)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, beta))", "other_info": {"loss": [9.631649576618097e+25, 2.308353117223681, 2.309965840829535, 2.3120656590719326, 2.3149351436920833, 2.318671836419711], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.978231770651681, 1.9794927324567522, 1.9811100959777832, 1.983297892979213, 1.9861158643450056, 1.9899986812046595], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 6, 3, 3, 9, 5, 3, 1, 6, 5, 7, 2, 1, 4, 1, 6, 5, 0, 2, 0, 8, 3, 1, 3, 0, 0, 8, 5, 8], [2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 1, 2, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1], [81, 48, 0, 88, 47, 68, 88], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [83, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 1, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [42, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 4, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), sigma), beta)", "other_info": {"loss": [4026993528.4923244, 591085554686.7827, 9884003395140.64, 70707748514264.03, 318445455766479.44, 1035518416572074.6], "accuracy": [0.09642054885625839, 0.10328886657953262, 0.1002509593963623, 0.10276053100824356, 0.1018359512090683, 0.09787346422672272], "val_loss": [32548765696.0, 1754461746907.4285, 18830631595446.855, 102660697863899.42, 384564075991625.1, 1134303393836470.8], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 3, 1, 3, 3, 9, 1, 3, 1, 6, 0, 9, 8, 1, 0, 1, 8, 1, 0, 2, 9, 6, 3, 8, 2, 0, 9, 3, 5, 8, 3, 8, 0, 3, 4, 3, 3, 7, 6, 6, 1, 8, 5, 2, 3, 9, 7, 4], [1, 1, 2, 0, 1, 0, 2, 2, 0, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 3, 3, 2, 1, 0, 0, 0, 0, 1, 0], [81, 48, 32, 88, 65, 68, 88, 25, 91, 47, 18, 81, 15, 68, 24, 25], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [44, 19, 41, 7, 45, 13], [0], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [2, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [67, 74, 76, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(alpha)), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 9, 8, 3, 2, 6, 3, 8, 6, 6, 4, 7, 8, 9, 2, 0, 2, 1, 0, 2, 2, 3, 0, 1, 3, 2, 0, 8, 9, 8], [2, 1, 2, 1, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2, 0, 1, 1, 0, 0, 2, 1], [81, 48, 98, 30, 42, 68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [1, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 0, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 19, 19, 11, 8, 1, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(grad), alpha)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), alpha)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3036310571043987, 2.303063888433918, 2.301967531698507, 2.3023754483783376, 2.3039955963721255, 2.302299116360371], "accuracy": [0.08347642421722412, 0.09179764986038208, 0.0874389111995697, 0.08717474341392517, 0.09259014576673508, 0.09179764986038208], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 9, 1, 3, 0, 6, 3, 2, 6, 6, 4, 7, 8, 9, 2, 0, 2, 1, 0, 4, 2, 3, 0, 1, 3, 2, 0, 8, 8, 8], [1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 2, 1, 1, 0, 0, 2, 1], [33, 48, 98, 30, 22, 68, 40], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 3, 3, 8, 3, 0, 9, 1, 0, 2, 9, 1, 4, 9, 8, 0, 4, 1, 5, 8, 1, 2, 5, 0, 1, 1, 3, 4, 7, 3, 5, 2, 7, 7, 8, 3, 8, 3, 3, 9, 0, 7, 5, 8, 2, 3, 8, 8, 7, 8, 9, 2, 1, 9, 3, 2, 7, 6, 4, 6, 9], [0, 1, 3, 4, 2, 2, 1, 3, 1, 0, 2, 3, 3, 0, 2, 5, 1, 0, 3, 3, 2, 4, 5, 1, 3, 1, 4, 1, 4, 4, 5, 5, 2, 0, 4, 1, 5, 1], [7, 19, 41, 7, 45, 13], [1], [1, 1, 1], [9], [4, 1], [52], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 8, 8, 6, 0, 4, 5, 6, 0, 9], [0, 3, 2, 1, 0, 0, 2, 2], [40, 74, 76, 58]], "fitness": -0.03828571364283562, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.3036310571043987, 2.303063888433918, 2.301967531698507, 2.3023754483783376, 2.3039955963721255, 2.302299116360371], "accuracy": [0.08347642421722412, 0.09179764986038208, 0.0874389111995697, 0.08717474341392517, 0.09259014576673508, 0.09179764986038208], "val_loss": [1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105, 1.9711878640311105], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]