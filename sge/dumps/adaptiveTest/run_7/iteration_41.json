[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8157142996788025, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 22, 14, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, beta)), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.00572092812437, 1.4795386456951978, 1.0492868359535126, 0.8902007795406796, 0.8045062389844255, 0.7821772290085443, 0.7458424818923587, 0.7267679807815758, 0.6958418073135832, 0.6678533186261932, 0.661434909710401, 0.6328343967042973, 0.6407975245145617, 0.6219239054638176, 0.6083081338887737, 0.5824523469350279, 0.5856178388099912, 0.5870865084680631, 0.5545136670961734, 0.5640195609398679, 0.538459661079042, 0.5589582580601172, 0.5163698903620912, 0.5268954068457745, 0.5160980014721668, 0.5091260953617763, 0.5068776741310936], "accuracy": [0.32624489068984985, 0.49966979026794434, 0.6221106648445129, 0.6647734642028809, 0.6966054439544678, 0.7038700580596924, 0.7157574892044067, 0.7190595865249634, 0.7326641082763672, 0.7454761862754822, 0.7479857206344604, 0.7638356685638428, 0.7563069462776184, 0.7561748623847961, 0.7671377658843994, 0.7745344042778015, 0.7695152759552002, 0.7705719470977783, 0.7923656105995178, 0.7843085527420044, 0.7942147850990295, 0.7924976944923401, 0.8018755912780762, 0.8026680946350098, 0.8070268034934998, 0.8117818236351013, 0.8080834746360779], "val_loss": [1.5425176279885429, 0.9513018471854073, 0.7709968600954328, 0.6589594568525042, 0.6415278570992606, 0.5578081948416573, 0.5457152809415545, 0.5308043956756592, 0.5501362936837333, 0.5579706260136196, 0.4985386984688895, 0.47293477399008615, 0.5399842773165021, 0.4671411003385271, 0.46718476499829975, 0.4494991643088205, 0.46282688208988737, 0.43596900360924856, 0.4416969503675188, 0.4733222041811262, 0.4186092529978071, 0.406694906098502, 0.4065581474985395, 0.40610577378954205, 0.414164662361145, 0.4005652240344456, 0.4127643278666905], "val_accuracy": [0.4230000078678131, 0.6539999842643738, 0.656000018119812, 0.6973333358764648, 0.6933333277702332, 0.7459999918937683, 0.762333333492279, 0.765999972820282, 0.7406666874885559, 0.7296666502952576, 0.7770000100135803, 0.781000018119812, 0.7426666617393494, 0.7946666479110718, 0.7816666960716248, 0.7976666688919067, 0.781000018119812, 0.8083333373069763, 0.7983333468437195, 0.7889999747276306, 0.8073333501815796, 0.8243333101272583, 0.8176666498184204, 0.8230000138282776, 0.8143333196640015, 0.8199999928474426, 0.8159999847412109]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [7, 0, 0, 7, 5, 5, 7, 4, 0, 3, 2, 2, 8, 5, 9, 3, 4, 0, 7, 2, 9, 9, 8, 6, 7], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 61, 41, 19, 22, 56, 99, 46, 58, 91, 56, 46, 10, 52], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.8054285645484924, "mapping_values": [1, 2, 2, 1, 1, 0, 31, 31, 22, 9, 4, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), beta)), alpha)), tf.math.add(beta, tf.math.multiply(tf.math.pow(grad, tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.negative(sigma))))))", "other_info": {"loss": [2.0061313814380624, 1.464722208831257, 1.0260316549101998, 0.8879069546903082, 0.8051776794032524, 0.7902617237713075, 0.7363311392819136, 0.716606464218769, 0.6836132568579938, 0.6703333514336, 0.6480703769957054, 0.629207963492215, 0.6424291231738988, 0.6106468732441106, 0.603314080274242, 0.5810349259268197, 0.5838904409691359, 0.5880545409064897, 0.5584262254105551, 0.5542679893468208, 0.5375457678913771, 0.5509749763063263, 0.5211478557254124, 0.5172455544484967, 0.5097708548332455, 0.5043442757563301, 0.501821918506286, 0.490391332613337, 0.4736628801185599, 0.5005570475915955, 0.4651078880187495, 0.46960490606621885, 0.46012550949058384, 0.45520571848861513, 0.45882115429339865], "accuracy": [0.32664114236831665, 0.5037643909454346, 0.6304318904876709, 0.6671509742736816, 0.6935675740242004, 0.7008321285247803, 0.7116629481315613, 0.7279091477394104, 0.7388719916343689, 0.7440232634544373, 0.7510236501693726, 0.7581561207771301, 0.7500990629196167, 0.7623828053474426, 0.7705719470977783, 0.7795535326004028, 0.7714964747428894, 0.7728173136711121, 0.7935543656349182, 0.7909126877784729, 0.7928939461708069, 0.7926297783851624, 0.7979130744934082, 0.8045172095298767, 0.8098005652427673, 0.8103289008140564, 0.8123101592063904, 0.8186501264572144, 0.8239334225654602, 0.8121780753135681, 0.8267071843147278, 0.821820080280304, 0.8271034359931946, 0.8285563588142395, 0.83119797706604], "val_loss": [1.5416742052350725, 0.8415177549634661, 0.7289398397718158, 0.6477664368493217, 0.6733143329620361, 0.5613912514277867, 0.5206253528594971, 0.5321443932397025, 0.5703650031770978, 0.5170080491474697, 0.4963589906692505, 0.5160240275519234, 0.4991708653313773, 0.4612907000950405, 0.47401303904397146, 0.45515808037349154, 0.46530011722019743, 0.4320476310593741, 0.43804384980882916, 0.4741260153906686, 0.41747801644461496, 0.4062031592641558, 0.42268491642815725, 0.4145235930170332, 0.41517443316323416, 0.39296856948307585, 0.4179160509790693, 0.38620054721832275, 0.39614738736833843, 0.37488179547446115, 0.4012106401579721, 0.37849979741232737, 0.39344440187726704, 0.3819823350225176, 0.386360091822488], "val_accuracy": [0.421999990940094, 0.6623333096504211, 0.6759999990463257, 0.6993333101272583, 0.6639999747276306, 0.7253333330154419, 0.7703333497047424, 0.7710000276565552, 0.7260000109672546, 0.7676666378974915, 0.7649999856948853, 0.737333357334137, 0.7770000100135803, 0.7953333258628845, 0.7720000147819519, 0.793666660785675, 0.7726666927337646, 0.815666675567627, 0.8003333210945129, 0.7919999957084656, 0.809333324432373, 0.8246666789054871, 0.8036666512489319, 0.8130000233650208, 0.8133333325386047, 0.831333339214325, 0.8119999766349792, 0.8323333263397217, 0.8213333487510681, 0.8416666388511658, 0.8096666932106018, 0.8293333053588867, 0.8270000219345093, 0.831333339214325, 0.8333333134651184]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 0, 2, 3, 4, 0, 5, 3, 1, 2, 1, 0, 2, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 5, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.7788571715354919, "mapping_values": [1, 2, 2, 1, 1, 0, 27, 27, 17, 10, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.add(beta, tf.math.subtract(tf.math.add(grad, grad), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.263947648363437, 2.1120297417050544, 1.7517828818845114, 1.3626544736143684, 1.1491073636393963, 1.0295451123086832, 0.9525908958941812, 0.8917392578501003, 0.8578998373011714, 0.8229954770023576, 0.7975178689311728, 0.7832172538752034, 0.771286609260681, 0.7395464091363316, 0.7209582943343814, 0.7298458735027397, 0.7062297083399063, 0.6859042301484701, 0.6771435580075992, 0.6819406949518033, 0.6693765585606108, 0.662467143570569, 0.6662891709163693, 0.6493750502483452, 0.6355920380463359, 0.6356182052884135, 0.6348463214856129, 0.6201135004673651, 0.6150074737214646], "accuracy": [0.18293488025665283, 0.3687755763530731, 0.46387532353401184, 0.5482763051986694, 0.6024303436279297, 0.6400739550590515, 0.6601505875587463, 0.6790384650230408, 0.6921146512031555, 0.7055870890617371, 0.7148329019546509, 0.7121912837028503, 0.7187954187393188, 0.7327961921691895, 0.7376832365989685, 0.7363624572753906, 0.7448157668113708, 0.7518161535263062, 0.7560427784919739, 0.7510236501693726, 0.7600052952766418, 0.7552502751350403, 0.7557786107063293, 0.7655527591705322, 0.7668735980987549, 0.7625148296356201, 0.763967752456665, 0.7734777331352234, 0.7708360552787781], "val_loss": [1.8724937438964844, 1.62705169405256, 1.188277108328683, 0.9069873946053642, 0.7852604559489659, 0.7154336145945958, 0.6614399296896798, 0.6336028065000262, 0.6269749402999878, 0.6009353058678764, 0.5704952478408813, 0.5842174802507673, 0.5571529184068952, 0.5480637039457049, 0.5329370158059257, 0.5275744710649762, 0.5183951514107841, 0.5177234411239624, 0.49788003308432444, 0.5351305689130511, 0.5162760870797294, 0.49237767287663053, 0.4880284581865583, 0.47677183151245117, 0.4744457006454468, 0.4717144455228533, 0.48485095160348074, 0.46533165659223286, 0.4665592057364328], "val_accuracy": [0.4090000092983246, 0.5326666831970215, 0.6190000176429749, 0.6650000214576721, 0.6840000152587891, 0.7120000123977661, 0.722000002861023, 0.7369999885559082, 0.7260000109672546, 0.7323333621025085, 0.7566666603088379, 0.7289999723434448, 0.762666642665863, 0.7599999904632568, 0.7649999856948853, 0.7639999985694885, 0.7789999842643738, 0.7733333110809326, 0.7793333530426025, 0.7429999709129333, 0.7646666765213013, 0.7863333225250244, 0.7733333110809326, 0.7940000295639038, 0.7923333048820496, 0.7940000295639038, 0.781333327293396, 0.7933333516120911, 0.7893333435058594]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [7, 0, 1, 7, 5, 9, 7, 4, 9, 3, 2, 2, 8, 5, 3, 3, 4, 0, 7, 2, 9, 9, 8, 6, 7, 8], [0, 3, 5, 3, 1, 5, 5, 3, 0, 0, 1, 2, 3, 3], [11, 61, 14, 19, 22, 30, 46], [0, 0, 1], [0, 1], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.5117142796516418, "mapping_values": [1, 2, 2, 1, 1, 0, 38, 38, 26, 12, 7, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, grad)))), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))))))))), alpha))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.931240927667634, 2.3036683813424363, 2.1642349375048493, 2.335518392353262, 2.2412983097058277, 2.138595592895314, 2.1967509490718395, 2.1940354301063154, 2.305546096192847, 2.302542974920226, 2.259518731712681], "accuracy": [0.1748778223991394, 0.10130762308835983, 0.24501386284828186, 0.1538766324520111, 0.1690661758184433, 0.23735305666923523, 0.19574692845344543, 0.19310526549816132, 0.1010434553027153, 0.10157178342342377, 0.18095363676548004], "val_loss": [1.9746826035635812, 1.96548707144601, 1.9487228393554688, 1.92232084274292, 1.9627140590122767, 1.197408812386649, 1.9723557063511439, 1.9766440391540527, 1.9735939843314034, 1.971935476575579, 1.4351378168378557], "val_accuracy": [0.10100000351667404, 0.1823333352804184, 0.10100000351667404, 0.28733333945274353, 0.1523333340883255, 0.5680000185966492, 0.1003333330154419, 0.09799999743700027, 0.09866666793823242, 0.12433333694934845, 0.3843333423137665]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1], [7, 5, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 8, 9, 3, 4, 7, 1, 1, 8, 2, 6, 6, 9, 0, 9, 5, 6, 6, 3, 3, 6, 3, 1, 1, 2, 2, 6, 0, 9, 0, 5, 2, 2, 5, 3, 8, 6, 0, 2, 7, 6, 9, 9, 4, 2, 2, 4, 9, 2, 1, 5, 5, 7, 1, 9, 7, 2, 3, 5, 8], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 0, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3, 4, 1, 0, 5], [11, 61, 41, 19, 22, 56, 99, 46, 58, 91, 56, 46, 10, 52, 10, 13, 88], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 5, 2, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.42828571796417236, "mapping_values": [1, 2, 2, 1, 1, 0, 124, 124, 79, 45, 17, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, beta))))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), beta)))), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))))))))), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))))))), grad)), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(beta, tf.math.subtract(tf.math.square(beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), alpha)))))))), tf.math.add(beta, grad))))))), grad)))))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.931364437214624, 2.3031743207328654, 2.2364579366891295, 2.2409035541661395, 2.215416636591055, 2.3065129124083774, 2.304314925733291, 2.300687044272412, 2.2174693191874972], "accuracy": [0.17434948682785034, 0.10579843819141388, 0.18095363676548004, 0.18544445931911469, 0.23299431800842285, 0.10051512718200684, 0.09602430462837219, 0.11121384054422379, 0.19244486093521118], "val_loss": [1.9748557635716029, 1.962306227002825, 1.974790164402553, 1.4007585048675537, 1.9778481210981096, 1.9740257944379533, 1.9734954833984375, 1.9493843487330846, 1.9751486778259277], "val_accuracy": [0.10100000351667404, 0.1770000010728836, 0.0989999994635582, 0.45133334398269653, 0.09966666996479034, 0.09966666996479034, 0.09866666793823242, 0.16733333468437195, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3], [68], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 2, 5, 3, 1, 5, 5, 3, 0, 0, 1, 2, 3, 3], [11, 61, 41, 19, 22], [1, 0, 1], [0, 0, 1, 0], [2, 7, 4], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.3717142939567566, "mapping_values": [1, 2, 2, 1, 1, 0, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.subtract(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.9313394231661483, 2.303577174788941, 2.1923303775122265, 2.3019008124430482, 2.108627427948496, 2.9267941025096693, 2.263363075672029, 2.2372039421564236, 2.2800726195556957, 2.30671070948127, 2.3045498673249196, 2.303486663777799, 2.3035452619692935], "accuracy": [0.17474573850631714, 0.107647605240345, 0.24382512271404266, 0.13868708908557892, 0.2339189052581787, 0.10976093262434006, 0.15374454855918884, 0.19152027368545532, 0.15097081661224365, 0.09826971590518951, 0.09681680053472519, 0.09932637959718704, 0.09879804402589798], "val_loss": [1.9746733392987932, 1.9653001512799944, 1.9776900155203683, 1.9665818214416504, 5.1516426631382535, 1.9746567862374442, 1.973909854888916, 1.848289898463658, 1.9769645418439592, 1.9750659806387765, 1.9739078794206892, 1.97383485521589, 1.9738316535949707], "val_accuracy": [0.10100000351667404, 0.18566666543483734, 0.1886666715145111, 0.19566667079925537, 0.17100000381469727, 0.1313333362340927, 0.10766666382551193, 0.23600000143051147, 0.09966666996479034, 0.09799999743700027, 0.10100000351667404, 0.09866666793823242, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 7, 5, 5, 7, 1, 0, 3, 2, 2, 8, 5, 3, 3, 2, 0, 7, 2, 9, 9, 8, 6, 7], [4, 3, 5, 3, 1, 5, 2, 3, 0, 0, 0, 2, 3, 2], [11, 22, 14, 19, 22], [1, 0, 1], [0], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.24314285814762115, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, tf.math.add(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.9313651160352405, 2.303193567734762, 2.2380618983256015, 2.3935240378799914, 2.231050179981206, 2.291039257883443, 2.1450322300703486, 2.305699745331143, 2.30312854871144, 2.2504632695948428, 2.416188477808537], "accuracy": [0.17434948682785034, 0.10553427785634995, 0.1802932173013687, 0.16232994198799133, 0.2133139669895172, 0.12930920720100403, 0.22718267142772675, 0.09655263274908066, 0.10077928751707077, 0.17236824333667755, 0.17276449501514435], "val_loss": [1.9748636654445104, 1.96223327091762, 1.830207279750279, 1.9104678971426827, 1.9763835498264857, 1.7750647408621651, 1.9763386590140206, 1.9737146922520228, 1.9719501904078893, 1.693399293082101, 1.9751325334821428], "val_accuracy": [0.10100000351667404, 0.18700000643730164, 0.3266666531562805, 0.1589999943971634, 0.09833333641290665, 0.3959999978542328, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.32366666197776794, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [7, 9, 2, 7, 3, 5, 7, 4, 0, 3, 2, 2, 8, 5, 3, 8, 4, 0, 7, 2, 9, 9, 8, 6, 7], [4, 3, 5, 3, 1, 5, 5, 3, 0, 2, 1, 2, 3, 3], [11, 11, 14, 19, 22], [1, 0, 1], [0], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.1825714260339737, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 24, 12, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(grad, grad), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.negative(tf.math.multiply(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, grad)))), alpha), grad))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(beta, alpha))))))))))))), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.931269792407621, 2.303671664943501, 2.1995673541143477, 2.296759489489238, 2.4832478677434473, 2.308566477887304, 2.30307983010594], "accuracy": [0.17474573850631714, 0.10328886657953262, 0.2370888888835907, 0.1484612375497818, 0.19812442362308502, 0.10011887550354004, 0.1022322028875351], "val_loss": [1.9748806953430176, 1.9655389104570662, 1.9364281381879533, 1.9356237139020647, 1.9835638318743025, 1.9747559002467565, 1.9714573451450892], "val_accuracy": [0.10100000351667404, 0.2316666692495346, 0.17000000178813934, 0.19766665995121002, 0.10400000214576721, 0.10700000077486038, 0.11566666513681412]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [5, 0, 0, 7, 5, 5, 6, 4, 2, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 9, 2, 4, 2, 2, 7, 8, 8, 5], [3, 3, 5, 2, 1, 4, 0, 5, 2, 3, 2, 3, 0, 4, 4, 2, 3, 0, 4], [11, 61, 41, 52, 22, 77], [1, 0, 1], [0, 1], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [9, 1, 8, 3, 4, 5, 2, 9, 7, 5], [1, 2, 0, 1, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 24, 24, 14, 10, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.negative(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), grad)))), tf.math.add(beta, beta)))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302482041322544, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 6, 1, 8, 7, 5, 3, 1, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3, 3], [0, 65], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [0, 3, 5, 0, 5, 0, 5, 5, 1, 2, 5], [11, 61, 41, 19, 22], [1, 0, 1, 1, 1], [0, 0, 1, 0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 2, 25, 25, 14, 11, 3, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(alpha))), grad), tf.math.add(alpha, grad))))), tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.negative(tf.math.add(beta, grad)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))), tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(beta, tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.negative(sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 6, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 2, 5, 5, 7, 4, 0, 3, 2, 2, 3, 3, 3, 3, 8, 2, 7, 6, 9, 9, 8], [3, 3, 5, 2, 1, 3, 0, 5, 2, 1, 3, 3, 1, 3], [11, 77, 41, 19, 22], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1], [2, 8, 5, 6], [5, 5, 2], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [3, 0, 0, 3, 1, 1], [37, 24, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 0, 36, 36, 23, 13, 3, 7, 7, 4, 3, 0, 5, 3, 2, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(beta, tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), tf.math.add(beta, alpha))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 6, 7, 6, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [7, 2, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 1], [4, 3, 5, 2, 1, 1, 4, 1, 0, 3, 3, 2, 3, 1, 2, 5], [11, 61, 41, 19, 22], [1, 0, 1], [0, 0, 1, 0, 0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 0, 16, 16, 9, 7, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(beta), alpha))))))), tf.math.add(beta, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 1, 1, 3, 3, 0, 3], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [7, 0, 1, 7, 3, 5, 7, 4, 0, 3, 5, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 7], [4, 3, 5, 2, 0, 3, 2, 0, 5, 0, 0, 5, 0, 5, 2], [11, 61, 41, 19, 22, 77, 32], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 38, 38, 23, 15, 7, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.multiply(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, beta))), tf.math.multiply(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))))))))))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(grad, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302482041322544, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [7, 0, 1, 7, 5, 6, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 6, 9, 9], [4, 3, 5, 3, 1, 2, 5, 3, 0, 1, 1, 2, 3, 3, 0, 5], [11, 11, 41, 19, 22], [1, 0, 1], [0], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 21, 16, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(grad, tf.math.add(grad, grad))), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(alpha, tf.math.add(beta, tf.math.sqrt(beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07621186226606369, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [3, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0], [7, 6, 1, 7, 1, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 9, 2, 7, 2, 9, 9, 0, 4, 4, 9, 6, 0, 4, 9, 2, 9, 2, 3, 7, 7, 5, 2, 6, 3, 6, 4, 0, 2, 8, 1, 1, 2, 3, 5, 3, 6, 1, 6, 4, 0, 1, 8, 8, 9, 3, 0, 5, 0, 2, 2, 8, 4, 8, 1, 9, 5, 0], [4, 3, 5, 3, 1, 4, 0, 5, 3, 1, 2, 1, 0, 4, 4, 0, 2, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 86, 41, 84, 76, 56, 99, 46, 58, 91, 56, 46, 10, 52], [1, 0, 1], [0], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 5, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 37, 37, 22, 15, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(alpha, grad)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)), beta))))), alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [40.47124191181393, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1935015171766281, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [], [1, 1, 1, 1, 1], [0, 1, 0, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [3, 3, 5, 2], [11, 61, 14, 19, 22], [0, 0, 1], [0, 1], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07607977837324142, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 2, 7, 4, 0, 3, 9, 2, 2, 3, 3, 3, 8, 2, 0, 2, 9, 9], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 3, 3], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 34, 34, 22, 12, 4, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.multiply(alpha, grad)), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, beta))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302482041322544, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3, 0], [71, 20, 31], [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [7, 6, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [3, 3, 5, 2, 0, 2, 0, 2, 2, 0, 1, 4, 0, 1, 0, 3], [11, 61, 41, 19, 22, 27], [0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0], [2, 7, 4], [3], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 3, 37, 37, 21, 16, 6, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(grad, tf.math.pow(tf.math.negative(beta), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), alpha)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, sigma))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [7, 0, 1, 7, 5, 2, 7, 4, 0, 3, 2, 2, 8, 5, 3, 3, 4, 0, 7, 6, 9, 9, 8, 2, 7, 1, 6, 0, 5, 6, 5, 2, 1, 3, 9, 3, 2, 3, 0, 5, 6, 9], [4, 3, 0, 3, 1, 5, 5, 3, 0, 0, 1, 3, 3, 3, 2, 2, 5, 2, 1, 3, 4, 1, 0], [11, 61, 63, 19, 22, 57, 90, 99], [1, 0, 1], [0], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.06514285504817963, "mapping_values": [1, 2, 2, 1, 1, 0, 65, 65, 42, 23, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad)))), alpha)), tf.math.add(beta, grad))))), tf.math.add(beta, grad))), tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)))))))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, beta))))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.negative(alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.9313663576950155, 2.303201817534052, 2.2441911283910487, 2.4679669879131847, 2.169248914926469, 2.5780226573684604, 2.305765195750069, 2.3036486165335526, 2.3031911268966105], "accuracy": [0.17434948682785034, 0.10606260597705841, 0.18201030790805817, 0.14581957459449768, 0.26059964299201965, 0.12429005652666092, 0.09774138033390045, 0.10011887550354004, 0.08796724677085876], "val_loss": [1.974855831691197, 1.962165423801967, 1.800436156136649, 1.9582298823765345, 2.8703203882489885, 1.9766973767961775, 1.9741967064993722, 1.9736734798976354, 1.9737579481942313], "val_accuracy": [0.10100000351667404, 0.19099999964237213, 0.3386666774749756, 0.343666672706604, 0.2773333191871643, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [7, 1, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 2, 2, 6, 0, 6, 0, 0], [4, 3, 5, 2, 2, 0, 3, 3, 5, 3, 1, 0, 0, 3, 5, 3, 2, 5, 4], [11, 61, 41, 63, 22], [0, 0, 1], [0, 0], [2, 9], [5], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.06400000303983688, "mapping_values": [1, 2, 2, 1, 1, 0, 44, 44, 25, 19, 3, 3, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(beta, tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.multiply(grad, grad)), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.negative(grad)))))))))))), beta))))))), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.637985555896701, 2.6095825368387193, 2.312705951013491, 2.3041525132085163, 2.303309691249891, 2.303075271905484, 2.3031173478563494], "accuracy": [0.19719983637332916, 0.20380398631095886, 0.09945846349000931, 0.0952318087220192, 0.09734513610601425, 0.09576013684272766, 0.09074098616838455], "val_loss": [1.9800996099199568, 2.0027815955025807, 1.975104672568185, 1.9739933695111955, 1.973721640450614, 1.9736330168587821, 1.9735605376107352], "val_accuracy": [0.09799999743700027, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.08100000023841858]}}]