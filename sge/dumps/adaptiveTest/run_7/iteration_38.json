[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8128571510314941, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 22, 14, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, beta)), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.027426178366233, 1.5348771281954698, 1.0669438192605374, 0.9158016515288292, 0.863126441086477, 0.7817143104363269, 0.7467592565800142, 0.7213640717577704, 0.7240928330709275, 0.678015433140655, 0.6715360893045575, 0.6481913267865457, 0.6456801255680488, 0.6217101273000075, 0.6053025633541506, 0.6022413785132309, 0.5941372670045287, 0.5781632354467017, 0.5654265375783525, 0.5448991228655234, 0.5441822462613478, 0.5464810817516585, 0.5211051551972272, 0.5227583745380576, 0.5240071462271724, 0.5268957808962147, 0.5057278171175774, 0.4809471597296451, 0.5405443419775298, 0.49841321472793504, 0.4613325105461667, 0.4831642208200451, 0.4761675735388166, 0.4510210677341715, 0.4621953025446466, 0.4496336883722972, 0.448176819197868, 0.4275179759559536, 0.43441559950027797, 0.440558041134814, 0.42061897547820365, 0.42702303494775395, 0.4264439851490419, 0.4168416637400311, 0.4117638509168979], "accuracy": [0.3269053101539612, 0.4991414546966553, 0.6066569685935974, 0.6695284843444824, 0.670320987701416, 0.7088891863822937, 0.7210407853126526, 0.7185312509536743, 0.7206445932388306, 0.7384757399559021, 0.7415136694908142, 0.7563069462776184, 0.7534011602401733, 0.761590301990509, 0.7696473598480225, 0.7766477465629578, 0.7712323069572449, 0.780610203742981, 0.7833839654922485, 0.793422281742096, 0.7960638999938965, 0.7951393723487854, 0.804649293422699, 0.8055738806724548, 0.8055738806724548, 0.8047813773155212, 0.8156121969223022, 0.8203672170639038, 0.7975168228149414, 0.8162726163864136, 0.8304054737091064, 0.8232730031013489, 0.8235371708869934, 0.8343679904937744, 0.8272355198860168, 0.832650899887085, 0.8359529972076416, 0.8408400416374207, 0.8396512866020203, 0.8370096683502197, 0.8466516733169556, 0.8392550349235535, 0.8366134166717529, 0.8445383906364441, 0.8485008478164673], "val_loss": [1.5516667706625802, 0.9638521330697196, 0.8164063181195941, 0.6748771837779454, 0.5959725379943848, 0.592973130089896, 0.5676943744931903, 0.5273909909384591, 0.525629997253418, 0.5335820743015834, 0.510581544467381, 0.5128199713570731, 0.48549755981990267, 0.49248584679194857, 0.4567697048187256, 0.4392570342336382, 0.4854111501148769, 0.425945656640189, 0.44111171790531706, 0.4165380767413548, 0.42067384719848633, 0.4123113325663975, 0.4213934966496059, 0.4100076641355242, 0.38726032631737844, 0.3964539510863168, 0.3818808708872114, 0.38678657157080515, 0.3940926875386919, 0.380901643208095, 0.3798271247318813, 0.36956465244293213, 0.36363370077950613, 0.37279163939612253, 0.36672399725232807, 0.37759067331041607, 0.3500924025263105, 0.36083465814590454, 0.34745841366904123, 0.33862124170575825, 0.3488790648324149, 0.37011477776936125, 0.3366616027695792, 0.3404298850468227, 0.3612662042890276], "val_accuracy": [0.47566667199134827, 0.574999988079071, 0.6729999780654907, 0.6863333582878113, 0.734000027179718, 0.7310000061988831, 0.7206666469573975, 0.7730000019073486, 0.7559999823570251, 0.7459999918937683, 0.7676666378974915, 0.7730000019073486, 0.7836666703224182, 0.7716666460037231, 0.793666660785675, 0.8076666593551636, 0.7566666603088379, 0.8186666369438171, 0.7943333387374878, 0.8203333616256714, 0.8223333358764648, 0.8266666531562805, 0.815666675567627, 0.8190000057220459, 0.8389999866485596, 0.8383333086967468, 0.8383333086967468, 0.8336666822433472, 0.82833331823349, 0.8413333296775818, 0.8356666564941406, 0.8433333039283752, 0.8426666855812073, 0.8363333344459534, 0.843999981880188, 0.8360000252723694, 0.8489999771118164, 0.8443333506584167, 0.8506666421890259, 0.8583333492279053, 0.8489999771118164, 0.8330000042915344, 0.8569999933242798, 0.8539999723434448, 0.8420000076293945]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 1, 3, 3, 0, 3], [], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.8019999861717224, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.negative(sigma))))", "other_info": {"loss": [2.029160812436125, 1.4985107231165329, 1.08334978511541, 0.9170585405462848, 0.8369257710062202, 0.779298964020378, 0.7523058945980559, 0.7351767467847826, 0.6932117387744902, 0.6755123213533838, 0.6771731846730282, 0.653981923112276, 0.6360660735343063, 0.6171753948878902, 0.60662385221832, 0.6053931911970095, 0.5853102771739257, 0.5814181405634157, 0.5572898978916818, 0.5481560701360918, 0.5455148804299568, 0.5370216273108903, 0.5180632427635918, 0.5282031927937294, 0.5233531394938216, 0.5105865401299622, 0.5026083407959745, 0.4821054486235796, 0.5157598175581782, 0.4967318038741406, 0.45715371025803697, 0.4779173052109401], "accuracy": [0.3267732262611389, 0.49848103523254395, 0.6108836531639099, 0.6583014130592346, 0.6844538450241089, 0.7088891863822937, 0.7128516435623169, 0.7164179086685181, 0.7339849472045898, 0.7354378700256348, 0.7411174178123474, 0.7526086568832397, 0.7563069462776184, 0.7664773464202881, 0.7675340175628662, 0.7714964747428894, 0.7807422876358032, 0.7777044177055359, 0.7887993454933167, 0.7877426743507385, 0.7948752045631409, 0.7976489067077637, 0.8088759779930115, 0.8010830879211426, 0.8025360107421875, 0.8119139075279236, 0.8149517774581909, 0.8207634687423706, 0.8034605979919434, 0.8105930685997009, 0.8321225643157959, 0.8198388814926147], "val_loss": [1.5623674733298165, 0.8999467236655099, 0.7060068505150932, 0.6836698736463275, 0.6219747236796788, 0.5999139717647007, 0.5594737018857684, 0.521033525466919, 0.5396643706730434, 0.5144379820142474, 0.5061030558177403, 0.5049528564725604, 0.48172615255628315, 0.48325179304395405, 0.4660297121320452, 0.44499610151563374, 0.464240516935076, 0.4259744031088693, 0.44261741638183594, 0.4125963875225612, 0.4129239661352975, 0.42727973631450106, 0.4185655883380345, 0.40682800327028545, 0.3872652224131993, 0.39237322977610994, 0.3787351335797991, 0.3946288824081421, 0.4056884731565203, 0.37802895477839876, 0.3762622135026114, 0.38349102224622456], "val_accuracy": [0.4449999928474426, 0.5960000157356262, 0.6890000104904175, 0.6819999814033508, 0.7126666903495789, 0.7086666822433472, 0.7573333382606506, 0.7713333368301392, 0.7473333477973938, 0.7513333559036255, 0.7696666717529297, 0.7763333320617676, 0.7876666784286499, 0.7736666798591614, 0.7903333306312561, 0.8013333082199097, 0.7796666622161865, 0.8196666836738586, 0.796999990940094, 0.8209999799728394, 0.8236666917800903, 0.8103333115577698, 0.8136666417121887, 0.8193333148956299, 0.8299999833106995, 0.8356666564941406, 0.840666651725769, 0.8349999785423279, 0.8193333148956299, 0.8389999866485596, 0.8403333425521851, 0.8356666564941406]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3], [], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.2231428623199463, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.549015573428024, 4.440731446599098, 2.310259691492095, 2.30284821478572, 2.2847272564375705, 2.3029111190919846], "accuracy": [0.18557654321193695, 0.20182274281978607, 0.09813763201236725, 0.10394927859306335, 0.15876370668411255, 0.09932637959718704], "val_loss": [1.7623350279671806, 1.9840198925563268, 1.975587981087821, 1.9671149253845215, 1.9739316531590052, 1.9732606751578194], "val_accuracy": [0.19300000369548798, 0.09866666793823242, 0.09866666793823242, 0.10000000149011612, 0.10266666859388351, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3], [], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.19257143139839172, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.8488221731262753, 2.305270303871811, 2.3020854336065057, 2.2383272306494915, 4.125328014492437, 2.3170276026699947, 2.306249048259233, 2.3036909669917165], "accuracy": [0.1678774207830429, 0.09893012791872025, 0.10342095047235489, 0.21120063960552216, 0.16232994198799133, 0.1002509593963623, 0.09866596013307571, 0.09721305221319199], "val_loss": [1.9766803468976701, 1.9737962314060755, 1.9669984408787318, 1.8586290904453822, 1.9921399525233678, 1.9777933529445104, 1.9743221146719796, 1.9736967767987932], "val_accuracy": [0.1003333330154419, 0.10400000214576721, 0.3596666753292084, 0.19866666197776794, 0.09799999743700027, 0.10133333504199982, 0.10133333504199982, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 1, 1, 1, 3, 0, 3], [10, 19], [1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 8, 9, 3, 1, 5, 5, 1, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.14828571677207947, "mapping_values": [1, 19, 19, 12, 7, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(alpha, alpha))))), alpha)))), tf.math.add(alpha, tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.861230501388233e+20, 8.960323324247337e+19, 7.290854852277109e+20, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.10117553919553757, 0.09945846349000931, 0.09747721254825592, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.7796318530768306e+20, 1.5149948460703603e+18, 2.9155445504624934e+17, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.09799999743700027, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 4, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 1, 3, 3, 0, 3], [42], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 3, 0, 3, 1, 1], [43, 9, 54]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 13, 6, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 8, 4, 2], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, alpha))), tf.math.negative(grad)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.subtract(tf.math.square(sigma), tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 2, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 1, 3, 3, 0, 3], [68, 92, 39], [0, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [1], [2], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 1, 0, 7, 5], [2, 0, 2, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 6, 4, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), beta), tf.math.square(sigma))))", "other_info": {"loss": [5.392855981138866e+21, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0536256767809391, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3], [], [1, 1, 1, 1, 1], [0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [1, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [7], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [2, 1, 9, 4, 1, 5, 5, 1, 7, 5, 1, 2, 0, 5, 7, 9], [1, 0, 1, 3, 1, 1, 3, 1], [43, 94, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 24, 16, 8, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.subtract(tf.math.add(alpha, sigma), alpha))), tf.math.square(tf.math.subtract(alpha, tf.math.add(sigma, tf.math.negative(tf.math.square(tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), alpha)))))))))", "other_info": {"loss": [9838968.399360172, 2.677884246757899, 2.4639646165233327, 2.5684817159149107, 2.636408679221741, 2.4620457968738934, 2.5744476951958877, 2.6276418528206014], "accuracy": [0.09826971590518951, 0.09945846349000931, 0.09959053993225098, 0.09721305221319199, 0.09826971590518951, 0.10130762308835983, 0.09760929644107819, 0.09998679161071777], "val_loss": [2.3140865734645297, 2.27760716847011, 2.3147322790963307, 2.1741013526916504, 2.261155809674944, 2.294154644012451, 2.096324716295515, 2.215470518384661], "val_accuracy": [0.09866666793823242, 0.09799999743700027, 0.10133333504199982, 0.10100000351667404, 0.09799999743700027, 0.10133333504199982, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [7, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 1, 3, 3, 0, 3], [89], [1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [4], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 9, 4, 1, 5, 5, 1, 7, 5], [1, 0, 1, 3, 1, 1], [43, 94, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 1, 3, 3, 0, 3], [73], [1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [3, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 5, 3, 4, 3, 7, 5], [1, 2, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 14, 8, 6, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(grad), tf.math.subtract(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.multiply(beta, tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, alpha)))), alpha)))", "other_info": {"loss": [2.302855324798713, 3.856840431950017, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9712189946855818, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03233333304524422, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 6, 1, 8, 7, 5, 3, 0, 2, 2, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 0, 3, 2, 0, 0], [68, 92, 39], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [5, 3, 5, 2], [11, 61, 41, 19, 22], [0, 0, 1], [1], [2], [1], [76], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 8, 4, 3, 1, 5, 5, 1, 7, 8, 3], [3, 0, 1, 3, 1, 1, 3, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 19, 11, 8, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), grad)))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.square(tf.math.square(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, sigma)))), alpha), tf.math.sqrt(tf.math.multiply(alpha, sigma))), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3], [], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [0, 5, 0, 3, 4], [11, 61, 41, 19, 22], [0, 0, 1], [1], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 1, 3, 1], [57, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08374059200286865, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 8, 2, 8, 2, 0, 1, 0, 0, 9, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 0, 3, 3, 0, 3], [39, 92, 39], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [0, 0, 1], [1], [2], [5], [76], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [3, 8, 4, 3, 1, 5, 5, 1, 7, 5, 3, 7, 6, 0, 3, 5, 1, 1, 0, 3, 0, 3, 4, 6, 2, 7, 3, 2, 9, 2, 6, 1, 1, 8, 9, 2, 9], [0, 0, 1, 3, 1, 1, 3, 1, 3, 0, 3, 2, 1, 3, 2, 0, 0, 3, 1, 2, 1, 3, 2], [90, 9, 50, 66, 43, 8, 18, 77]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 60, 37, 23, 8], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.square(tf.math.square(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, sigma)))), alpha), tf.math.square(tf.math.multiply(tf.math.add(alpha, sigma), tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.multiply(tf.math.square(sigma), tf.math.subtract(tf.math.subtract(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(sigma), tf.math.multiply(beta, tf.math.pow(alpha, tf.math.divide_no_nan(sigma, beta))))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(sigma, tf.math.subtract(alpha, tf.math.subtract(tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), beta))), tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), alpha))), sigma), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 1, 3, 3, 0, 3], [], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [5, 5, 0, 3, 4], [11, 61, 41, 19, 22], [1, 0, 1], [1], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 5, 9, 3, 1, 5, 5, 1], [1, 0, 0, 3, 1, 1], [57, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08374059200286865, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 6, 1, 8, 7, 5, 2, 0, 2, 0, 3, 0, 0, 2, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 0, 3, 0, 3, 1, 2], [66, 36, 30, 97, 42], [1, 1, 1, 1, 1], [1], [8, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [0, 0, 1], [1], [2], [5], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], [3, 8, 4, 3, 1, 5, 5, 1, 7, 5, 3], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 16, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), grad)))))))), alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 1, 1, 3, 3, 0, 3], [11], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [0, 3, 5, 2], [11, 61, 41, 19, 22], [0, 0, 1], [0, 1], [2], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 12, 8, 4, 3], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.negative(sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 6, 1, 2, 5, 5, 3, 5, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 2, 2, 1, 1, 3, 3, 0, 3], [69], [1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [0, 0, 1, 1, 1], [0, 0], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 1, 3, 3, 0, 3], [71], [1, 1, 1, 1, 1], [1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [1, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 6, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [26, 9, 28]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 1, 1, 3, 3, 0, 3], [68], [1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 9, 9, 3, 1, 5, 1, 0, 7, 5], [1, 3, 0, 3, 1, 1], [43, 9, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 6, 1, 8, 7, 5, 3, 9, 2, 0, 2, 4, 0, 6, 6, 5, 2, 3, 9, 5, 1, 7, 8], [2, 0, 0, 1, 1, 2, 3, 2, 2, 1, 3, 0], [66, 48, 30, 97, 42], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2], [11, 61, 41, 19, 22], [0, 0, 1, 1, 1], [0, 0], [2, 8], [4], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 4, 5, 0, 7, 5], [3, 0, 1, 3, 1], [57, 9, 50]], "fitness": -0.041999999433755875, "mapping_values": [1, 35, 35, 23, 12, 5, 3, 3, 1, 2, 0, 4, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), alpha)))))), grad)), grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))))))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3027476816601866, 2.302398437774098, 2.3013797687769344, 2.302894777767316, 2.3035043954313896, 2.3022830973148913], "accuracy": [0.09602430462837219, 0.09457138925790787, 0.0936468094587326, 0.09113723784685135, 0.08902391046285629, 0.08691058307886124], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]