[{"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 6, 5, 2, 1, 6, 9, 8, 4, 9, 2, 6, 0, 5, 4, 5, 3, 3, 6, 5, 3, 5, 6, 2, 6, 8, 6, 2, 6, 3, 4, 1, 1, 5, 7, 8, 9, 8, 5, 1, 4, 8, 5, 3, 1, 8, 8, 4, 4, 2, 3, 6, 5], [1, 2, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3], [47, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.831428587436676, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.182874055476221, 1.6884649675661751, 1.3745953483257816, 1.0486562859821533, 0.9723522166424203, 0.8615057537773297, 0.8706582862041913, 0.7794999775082255, 0.7669871097085907, 0.7708159596251459, 0.713591757774542, 0.6933299424531453, 0.6773109873130636, 0.7005397769454101, 0.6262574458969362, 0.6210724355097161, 0.6284331573455593, 0.6202699082512756, 0.6043802930017299, 0.5706037428432279, 0.5677422770514166, 0.5806585183044104, 0.570016646602481, 0.5298084890160657, 0.535664069976915, 0.5176483842643528, 0.5116022617085388, 0.5228547188804575, 0.49070408373870367, 0.48994188174249126, 0.4767595069708526, 0.47994381653051715, 0.4677232374187316, 0.4631135870381873, 0.4552441426020068, 0.438693724650402, 0.4553229855256641, 0.4417890649563947, 0.43523570806232853], "accuracy": [0.30801743268966675, 0.4777440130710602, 0.5267468094825745, 0.6201294660568237, 0.6394135355949402, 0.6853784322738647, 0.6728305220603943, 0.6991150379180908, 0.7037379741668701, 0.7051908373832703, 0.7290979027748108, 0.7331924438476562, 0.7445515990257263, 0.7395324110984802, 0.7631752490997314, 0.7663452625274658, 0.7589486241340637, 0.7622507214546204, 0.7707040309906006, 0.7845727205276489, 0.7911768555641174, 0.7778365015983582, 0.7873464822769165, 0.800818920135498, 0.8030643463134766, 0.8104609847068787, 0.8090080618858337, 0.7996301651000977, 0.8149517774581909, 0.819970965385437, 0.8286884427070618, 0.8198388814926147, 0.824329674243927, 0.8294808864593506, 0.8290846943855286, 0.8356888294219971, 0.8277638554573059, 0.8360850811004639, 0.8360850811004639], "val_loss": [1.5628440039498466, 1.6040611607687814, 0.8342082670756749, 0.7634633268628802, 0.7385542733328683, 0.6601804665156773, 0.6222625970840454, 0.5801853111812046, 0.5594346523284912, 0.5791174513953072, 0.5086855718067714, 0.5015679768153599, 0.5218187400272915, 0.48201847076416016, 0.4713805062430246, 0.49864433492933, 0.48224122183663504, 0.43249843801770893, 0.45180700506482807, 0.4266841156142099, 0.41976296050207956, 0.4355825441224234, 0.4279254249164036, 0.4147809999329703, 0.39464198691504343, 0.3965053813798087, 0.39784153018678936, 0.3806821533611843, 0.393683706011091, 0.3760832633290972, 0.37802150419780184, 0.4431004353931972, 0.37896233797073364, 0.3582383819988796, 0.3685868978500366, 0.3831659129687718, 0.37131303548812866, 0.3568682074546814, 0.35077674048287527], "val_accuracy": [0.5703333616256714, 0.44200000166893005, 0.6769999861717224, 0.6333333253860474, 0.6816666722297668, 0.687666654586792, 0.7106666564941406, 0.7243333458900452, 0.7360000014305115, 0.7333333492279053, 0.7603333592414856, 0.7866666913032532, 0.7526666522026062, 0.7799999713897705, 0.7943333387374878, 0.762333333492279, 0.781333327293396, 0.8056666851043701, 0.7996666431427002, 0.8113333582878113, 0.8140000104904175, 0.809333324432373, 0.8069999814033508, 0.8190000057220459, 0.8296666741371155, 0.8306666612625122, 0.8326666951179504, 0.8360000252723694, 0.8346666693687439, 0.8386666774749756, 0.8360000252723694, 0.7983333468437195, 0.8356666564941406, 0.8550000190734863, 0.8389999866485596, 0.8356666564941406, 0.8349999785423279, 0.8443333506584167, 0.8510000109672546]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [7, 2, 6, 1, 1, 6, 9, 8, 4, 9, 2, 6, 0, 5, 4, 5, 3, 5, 3, 5, 3, 7, 6, 2, 6, 8, 9, 2, 6, 3, 4, 1, 1, 5, 6, 8, 9, 8, 5, 1, 4, 8, 6, 2, 1, 8, 8, 4, 4, 1, 3, 6, 5], [1, 2, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 1, 2, 3, 3, 0, 3, 0, 2, 1, 0, 2, 0, 3], [78, 90, 16, 15, 42, 39, 92, 75, 64, 39, 49, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.8248571157455444, "mapping_values": [1, 60, 60, 39, 21, 9, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, grad))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.sqrt(alpha)))), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), grad))))), tf.math.square(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.182580988814314, 1.6854875088682768, 1.3559888253799597, 1.1261831058518699, 0.9799044947299219, 0.9288526362337378, 0.8389098330054852, 0.7718076154131065, 0.7547002727597097, 0.7716823560513557, 0.7010205415623803, 0.6875742413285638, 0.6816770658910613, 0.659423323331681, 0.6469371117432009, 0.62148740075567, 0.6067306485473362, 0.6163139519375297, 0.6146667526618853, 0.5715422876254994, 0.5755853447868776, 0.5696509296962409, 0.5615546460464064, 0.5313555057558007, 0.5456637863265116, 0.5147685493224364, 0.5212681873788482, 0.49633488687683547, 0.4915165367962237, 0.4906923709811945, 0.48084952631772643, 0.47746998971526683, 0.4723842707583775, 0.4659112654641131, 0.46056508365292764, 0.44091933462613797, 0.4582679885221967, 0.44152760181318673, 0.4505462134046609, 0.41628792996120617, 0.40978938135661785, 0.4121306783582052, 0.41669106569666164, 0.4015311219783239, 0.3949163803146059, 0.3966180612902049, 0.39987123839575867, 0.37680971135930647, 0.38738091513780226, 0.3770434649951737, 0.37278868602629367, 0.36321177126047804, 0.3752084413870309], "accuracy": [0.3077532649040222, 0.4807819426059723, 0.5394267439842224, 0.6036190986633301, 0.6332056522369385, 0.6584334969520569, 0.6833971738815308, 0.7041342258453369, 0.7096816897392273, 0.7103421092033386, 0.735569953918457, 0.7378153204917908, 0.7363624572753906, 0.7479857206344604, 0.750759482383728, 0.759080708026886, 0.7689869403839111, 0.7708360552787781, 0.7627789974212646, 0.7893276810646057, 0.787082314491272, 0.7877426743507385, 0.7927618622779846, 0.8016114234924316, 0.7942147850990295, 0.8113855719566345, 0.8045172095298767, 0.8191784620285034, 0.8171972036361694, 0.8204993009567261, 0.8296129703521729, 0.8239334225654602, 0.8247259259223938, 0.8257825970649719, 0.830669641494751, 0.8393871188163757, 0.8255184292793274, 0.8342359066009521, 0.8323867321014404, 0.8492933511734009, 0.8535200357437134, 0.8471800088882446, 0.8446704745292664, 0.8479725122451782, 0.8504821062088013, 0.8485008478164673, 0.8540483713150024, 0.8595958352088928, 0.8553691506385803, 0.8634262084960938, 0.8626337051391602, 0.8646149635314941, 0.8581429123878479], "val_loss": [1.5625654288700648, 1.6333146776471819, 1.0054234436580114, 0.7102435997554234, 0.7585780961172921, 0.6472201347351074, 0.5793336118970599, 0.5702163662229266, 0.5578462907246181, 0.5585527079445975, 0.5329756736755371, 0.5393026385988507, 0.5189593519483294, 0.4777837480817522, 0.4695651871817453, 0.48206911768232075, 0.46876515660967144, 0.4544318573815482, 0.46140400000980925, 0.42280913250786917, 0.4273611307144165, 0.4298586845397949, 0.4259577563830784, 0.4204945649419512, 0.4019553065299988, 0.4471948317119053, 0.39487734862736296, 0.38722459759031025, 0.3894169160297939, 0.3823401927947998, 0.40073980603899273, 0.4290699873651777, 0.3691781333514622, 0.3685931307928903, 0.3806605764797756, 0.3879616005080087, 0.3681595836366926, 0.3549099734851292, 0.3477671912738255, 0.34861927373068674, 0.3333746876035418, 0.3802776506968907, 0.3295946717262268, 0.34960202659879414, 0.33640352317265104, 0.33741624866213116, 0.3617766329220363, 0.32626157999038696, 0.32032724789210726, 0.3398501191820417, 0.329196103981563, 0.36524048873356413, 0.3257179430552891], "val_accuracy": [0.5713333487510681, 0.42633333802223206, 0.5923333168029785, 0.6710000038146973, 0.6356666684150696, 0.7173333168029785, 0.7336666584014893, 0.7310000061988831, 0.7483333349227905, 0.7443333268165588, 0.7563333511352539, 0.7423333525657654, 0.7616666555404663, 0.7789999842643738, 0.8056666851043701, 0.7983333468437195, 0.8036666512489319, 0.7853333353996277, 0.8066666722297668, 0.8199999928474426, 0.8109999895095825, 0.8140000104904175, 0.8096666932106018, 0.8113333582878113, 0.8226666450500488, 0.8003333210945129, 0.8360000252723694, 0.8393333554267883, 0.8429999947547913, 0.8356666564941406, 0.8169999718666077, 0.8006666898727417, 0.840666651725769, 0.8450000286102295, 0.8339999914169312, 0.8330000042915344, 0.8446666598320007, 0.8486666679382324, 0.8566666841506958, 0.8483333587646484, 0.8579999804496765, 0.8343333601951599, 0.8606666922569275, 0.8500000238418579, 0.8556666374206543, 0.8503333330154419, 0.8413333296775818, 0.8650000095367432, 0.8629999756813049, 0.862333357334137, 0.8613333106040955, 0.8383333086967468, 0.8636666536331177]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 2, 6, 1, 1, 6, 9, 8, 4, 9, 2, 6, 0, 5, 4, 5, 3, 3, 6, 5, 3, 7, 6, 2, 6, 8, 9, 5, 6, 3, 4, 1, 1, 5, 7, 8, 9, 8, 5, 1, 4, 8, 5, 3, 1, 8, 8, 4, 4, 2, 3, 6, 5], [1, 2, 0, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 1, 2, 3, 3, 0, 3, 1, 2, 1, 0, 3, 0, 3], [47, 90, 16, 15, 42, 39, 26, 75, 64, 39, 49, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.8237142562866211, "mapping_values": [1, 80, 80, 51, 29, 12, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.square(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), grad)))))), tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, grad))))))))))))))), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.sqrt(grad), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.math.pow(alpha, grad))), tf.math.pow(tf.math.add(alpha, tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.182581103725078, 1.6826835499935933, 1.36885991902352, 1.1373315585555497, 1.0020428109383146, 0.8585657621450302, 0.8500355598933157, 0.7579694948239238, 0.7762976765097281, 0.7714547721575343, 0.7136135864660897, 0.6992739209362292, 0.6834913377024321, 0.676602504304088, 0.6594451935992596, 0.6367748093138974, 0.6182749268479902, 0.6071415370827921, 0.5916456374131992, 0.5929592896241553, 0.5906945647596289, 0.5531934802369387, 0.5871886565952631, 0.5351183841871217, 0.5383362142858, 0.5263027777887213, 0.5219506057750091, 0.511798845125054, 0.49669062767707756, 0.492098760437956, 0.4819194245741525, 0.4941711388070743, 0.46645365606807937, 0.4562309935911378, 0.4634894198272931, 0.44117422430837444, 0.4547366147988571, 0.43907845613506447, 0.43220311348165236, 0.42544612941913884, 0.4122613979612501, 0.40858144818626424, 0.4201103551843462, 0.4099635206130454, 0.3853043457181966, 0.40421513183131713, 0.38828170558150105, 0.38076236128822816, 0.3858638439967632, 0.3671062706507523, 0.3556760721132031, 0.36523408775064437, 0.36991046538536876, 0.35442071465012454, 0.34839924395659094, 0.3581487877045199, 0.35461892027581576, 0.33038580414877594], "accuracy": [0.3077532649040222, 0.4803856909275055, 0.5378417372703552, 0.6048077940940857, 0.6207898855209351, 0.6770572066307068, 0.674679696559906, 0.7059833407402039, 0.6997754573822021, 0.7065116763114929, 0.7260599732398987, 0.7279091477394104, 0.7397965788841248, 0.7396644949913025, 0.7481178045272827, 0.7577598690986633, 0.7623828053474426, 0.7737419009208679, 0.778232753276825, 0.7741381525993347, 0.780610203742981, 0.7954035401344299, 0.7808743715286255, 0.7973847389221191, 0.7993659973144531, 0.8087438941001892, 0.8045172095298767, 0.8079513907432556, 0.8161405324935913, 0.819442629814148, 0.8244617581367493, 0.8161405324935913, 0.8235371708869934, 0.8313300609588623, 0.8267071843147278, 0.8368775844573975, 0.8301413059234619, 0.8337075710296631, 0.8416325449943542, 0.8442742228507996, 0.8487650156021118, 0.8490291833877563, 0.8445383906364441, 0.8453308939933777, 0.8574824929237366, 0.8479725122451782, 0.8593316674232483, 0.8603883385658264, 0.8585391640663147, 0.8661999702453613, 0.868049144744873, 0.8636903762817383, 0.8647470474243164, 0.8735966086387634, 0.8739928603172302, 0.8681812286376953, 0.8673887252807617, 0.8787478804588318], "val_loss": [1.562566144125802, 1.6119869095938546, 1.0414793491363525, 0.8315068823950631, 0.6572333233697074, 0.6386774267469134, 0.5844983884266445, 0.5898794446672712, 0.5346169642039708, 0.5804881708962577, 0.5324478660311017, 0.5255540268761771, 0.5356550897870745, 0.501422609601702, 0.47620391845703125, 0.4944894654410226, 0.4941274268286569, 0.43729921749659945, 0.519684978893825, 0.4324152043887547, 0.41767777715410503, 0.4544086115700858, 0.43677271263939993, 0.4190789120537894, 0.39800556216921124, 0.43747308424540926, 0.38901668787002563, 0.3962422183581761, 0.3897098643439157, 0.3809628997530256, 0.38700829233442036, 0.41676329714911325, 0.37095699991498676, 0.37315463168280466, 0.37557374579565866, 0.3710496085030692, 0.37785398960113525, 0.3564269372395107, 0.35943775517599924, 0.35748523473739624, 0.36390094246183124, 0.3689745920045035, 0.33551275730133057, 0.35534512996673584, 0.3424718976020813, 0.3269386461802891, 0.35452990021024433, 0.33669642891202656, 0.3118071896689279, 0.322637677192688, 0.31244964259011404, 0.3573351928165981, 0.309491080897195, 0.3107022898537772, 0.3680402636528015, 0.3411741171564375, 0.3355888383729117, 0.32659307547977995], "val_accuracy": [0.5709999799728394, 0.4410000145435333, 0.5569999814033508, 0.6223333477973938, 0.7146666646003723, 0.7153333425521851, 0.722000002861023, 0.7203333377838135, 0.762666642665863, 0.7276666760444641, 0.7606666684150696, 0.7720000147819519, 0.7506666779518127, 0.7620000243186951, 0.7979999780654907, 0.7886666655540466, 0.7900000214576721, 0.7973333597183228, 0.762666642665863, 0.8103333115577698, 0.8183333277702332, 0.7993333339691162, 0.7956666946411133, 0.8146666884422302, 0.8370000123977661, 0.8086666464805603, 0.8370000123977661, 0.8416666388511658, 0.8366666436195374, 0.8376666903495789, 0.8293333053588867, 0.8140000104904175, 0.8453333377838135, 0.843666672706604, 0.8393333554267883, 0.8399999737739563, 0.831333339214325, 0.8479999899864197, 0.8476666808128357, 0.8420000076293945, 0.8393333554267883, 0.8360000252723694, 0.859333336353302, 0.847000002861023, 0.8519999980926514, 0.8566666841506958, 0.8443333506584167, 0.859666645526886, 0.8663333058357239, 0.8650000095367432, 0.8693333268165588, 0.8389999866485596, 0.8743333220481873, 0.8713333606719971, 0.8473333120346069, 0.8556666374206543, 0.8553333282470703, 0.859666645526886]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [7, 2, 9, 1, 1, 0, 9, 8, 4, 9, 6, 6, 0, 5, 4, 5, 3, 3, 6, 2, 3, 1, 6, 2, 6, 8, 9, 4, 6, 3, 4, 1, 1, 1, 7, 8, 9, 8, 8, 1, 4, 8, 5, 3, 6, 8, 8, 4, 2, 2, 3, 6, 5, 8], [1, 2, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 3, 1, 2, 0, 1, 3, 1, 3, 2], [96, 90, 16, 15, 42, 39, 26, 75, 64, 39, 49, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.8145714402198792, "mapping_values": [1, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.1828848949087734, 1.690270094744927, 1.394190984379425, 1.1648525627864554, 0.9559505611850979, 0.875066502518453, 0.8361655351051549, 0.775043655773904, 0.7360158141388979, 0.779268205653974, 0.7308470892978618, 0.6785615493419573, 0.6904071535432438, 0.6717646435629406, 0.644412364579935, 0.6254646516967333, 0.622567404821769, 0.6162276374287593, 0.6061501523538619, 0.5764055972511207, 0.571357376539885, 0.5502606143080374, 0.5924737974479765, 0.5314726389284226, 0.5420706269291051, 0.5126933433974596, 0.5172509809983263, 0.506669205807424, 0.49615952740602365, 0.49095813564541885, 0.4888204619585641, 0.488037404768723, 0.4614147908455188, 0.45568198296671386, 0.46677606562581814, 0.4407383041367035, 0.44028787349728765, 0.44125427035466, 0.4424092666529047, 0.4144677936030952, 0.40514919773509805, 0.4054151496371069, 0.4287841408685088, 0.40700823581922546, 0.3939198246760816, 0.3957372432836153, 0.3853689851250395, 0.3862167246321866, 0.3785689680481222, 0.3787652921675061, 0.3654791738544205, 0.36480271338770937, 0.37843659550459346, 0.35680590742583196, 0.3655110562734159, 0.35146061776730175], "accuracy": [0.30801743268966675, 0.4780081808567047, 0.5268788933753967, 0.5748249888420105, 0.6523576974868774, 0.6763967871665955, 0.6790384650230408, 0.6995112895965576, 0.7141724824905396, 0.7024171352386475, 0.7215691208839417, 0.7388719916343689, 0.7415136694908142, 0.7460044622421265, 0.7523444890975952, 0.7580240368843079, 0.7614582180976868, 0.7705719470977783, 0.7700436115264893, 0.7854973077774048, 0.7880068421363831, 0.7968564033508301, 0.7792893648147583, 0.8009510040283203, 0.7981772422790527, 0.8127063512802124, 0.8082155585289001, 0.8141592741012573, 0.8132346868515015, 0.8202351331710815, 0.8211596608161926, 0.8181217908859253, 0.8248580098152161, 0.8341038227081299, 0.8247259259223938, 0.8417646288871765, 0.8335754871368408, 0.8304054737091064, 0.8355567455291748, 0.8474441766738892, 0.8510104417800903, 0.8516708612442017, 0.8391229510307312, 0.8485008478164673, 0.8516708612442017, 0.852859616279602, 0.8598600029945374, 0.8549728989601135, 0.8590674996376038, 0.8621054291725159, 0.8673887252807617, 0.863558292388916, 0.8562937378883362, 0.8704266548156738, 0.8651432991027832, 0.8725399374961853], "val_loss": [1.5628502709524972, 1.6460908140454973, 1.134237493787493, 0.7711951562336513, 0.7190665006637573, 0.699561493737357, 0.5851105281284877, 0.5684982708522252, 0.5594327790396554, 0.5675958905901227, 0.5183432953698295, 0.5642376797539848, 0.5375544684273856, 0.5124167544501168, 0.4729130778993879, 0.4852318593433925, 0.4956386089324951, 0.45064878463745117, 0.460276688848223, 0.42042077439171927, 0.4186936787196568, 0.46346775123051237, 0.4264030030795506, 0.4206746986934117, 0.39792331627437044, 0.43088070835386005, 0.39030703476497103, 0.38640182358878, 0.38674655982426237, 0.37764374698911396, 0.3947538903781346, 0.4200345958982195, 0.3690769502094814, 0.3732171654701233, 0.37208844082696096, 0.36614355019160677, 0.3848505786487034, 0.35001843316214426, 0.35004974263054983, 0.35044597727911814, 0.3479052611759731, 0.3397483059338161, 0.3320310115814209, 0.348538909639631, 0.33968175309044973, 0.3302753823144095, 0.37273175375802176, 0.32998264687401907, 0.3149907503809248, 0.3342791369983128, 0.31632853405816214, 0.34832270656313213, 0.3156777875764029, 0.35697282212121145, 0.36253091267177034, 0.35572037526539396], "val_accuracy": [0.5703333616256714, 0.4126666784286499, 0.5516666769981384, 0.6273333430290222, 0.687333345413208, 0.6836666464805603, 0.7250000238418579, 0.7440000176429749, 0.7319999933242798, 0.7546666860580444, 0.7583333253860474, 0.7319999933242798, 0.7559999823570251, 0.7616666555404663, 0.7993333339691162, 0.7979999780654907, 0.7839999794960022, 0.7833333611488342, 0.7960000038146973, 0.812666654586792, 0.824999988079071, 0.7963333129882812, 0.8029999732971191, 0.8056666851043701, 0.8306666612625122, 0.8103333115577698, 0.8339999914169312, 0.8303333520889282, 0.8379999995231628, 0.8363333344459534, 0.8206666707992554, 0.8096666932106018, 0.843666672706604, 0.8476666808128357, 0.8403333425521851, 0.8473333120346069, 0.8296666741371155, 0.8506666421890259, 0.8516666889190674, 0.846666693687439, 0.8539999723434448, 0.8523333072662354, 0.8603333234786987, 0.8519999980926514, 0.8546666502952576, 0.8579999804496765, 0.8356666564941406, 0.862333357334137, 0.8606666922569275, 0.8636666536331177, 0.8676666617393494, 0.8539999723434448, 0.8640000224113464, 0.8550000190734863, 0.8423333168029785, 0.8489999771118164]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 2, 6, 1, 1, 6, 9, 8, 4, 9, 2, 6, 3, 5, 4, 5, 1, 4, 6, 5, 3, 7, 6, 2, 6, 8, 9, 5, 6, 3, 4, 1, 1, 5, 7, 8, 4, 8, 0, 1, 4, 8, 5, 3, 1, 8, 8, 4, 5, 2, 3, 6, 5, 0], [1, 2, 0, 0, 0, 1, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 3, 0, 2, 1, 2, 1, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1], [66, 88, 16, 15, 42, 39, 26, 54, 68, 39, 69, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.7637143135070801, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0112522994176096, 1.412878636733778, 1.0490291657039692, 0.8903778770486078, 0.7947524478800497, 0.7682373510958291, 0.7351342055460938, 0.6888164435521313, 0.6771862838860626, 0.6458432837374033, 0.630728041806068, 0.6200779528980636, 0.5944323525248013, 0.5709777490857444], "accuracy": [0.3218861520290375, 0.5185576677322388, 0.615770697593689, 0.6670188903808594, 0.709549605846405, 0.7058512568473816, 0.7276449799537659, 0.7390040755271912, 0.7400607466697693, 0.7613261342048645, 0.7553823590278625, 0.7622507214546204, 0.7726852297782898, 0.7844406366348267], "val_loss": [1.5237246922084264, 0.8322349616459438, 0.6939868927001953, 0.6092583622251239, 0.6833605425698417, 0.5507637943540301, 0.5259999717984881, 0.5089691536767142, 0.5022357021059308, 0.5218932288033622, 0.49861443042755127, 0.5343240669795445, 0.44749047074999126, 0.45547824246542795], "val_accuracy": [0.4723333418369293, 0.6316666603088379, 0.6793333292007446, 0.7200000286102295, 0.6543333530426025, 0.7509999871253967, 0.7703333497047424, 0.7616666555404663, 0.7900000214576721, 0.7549999952316284, 0.7586666941642761, 0.746999979019165, 0.7846666574478149, 0.7889999747276306]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [8, 2, 6, 2, 1, 5, 9, 8, 4, 9, 2, 3, 5, 9, 4, 5, 3, 0, 6, 9, 3, 9, 2, 3, 6, 8, 9, 0, 0, 1, 6, 8, 8, 2, 7, 2, 9, 8, 5, 1, 4, 8, 5, 2, 1, 8, 8, 2, 4, 2, 3, 6, 5], [2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 2, 3, 3, 0, 3, 1, 2, 1, 0, 3, 0, 3], [66, 88, 16, 15, 42, 39, 74, 39, 68, 56, 69, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07290978729724884, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 2, 6, 1, 0, 6, 9, 8, 4, 9, 2, 6, 0, 5, 4, 5, 3, 3, 6, 5, 3, 7, 6, 2, 6, 8, 9, 5, 6, 3, 4, 1, 1, 5, 7, 8, 9, 8, 5, 1, 4, 8, 5, 3, 1, 8, 8, 4, 4, 2, 3, 6, 5], [1, 2, 0, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 1, 2, 3, 3, 0, 3, 1, 2, 1, 0, 3, 0, 3], [28, 90, 16, 15, 42, 39, 26, 75, 64, 84, 95], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 4, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 2, 3, 1, 1, 5, 9, 8, 3, 9, 2, 6, 0, 5, 4, 5, 6, 3, 6, 5, 3, 7, 6, 2, 6, 9, 4, 3, 6, 3, 4, 1, 1, 5, 6, 5, 9, 8, 5, 1, 4, 6, 5, 5, 1, 8, 8, 4, 4, 2, 2, 6, 5], [1, 0, 0, 1, 0, 1, 1, 2, 1, 0, 2, 1, 2, 2, 2, 1, 2, 2, 3, 3, 2, 0, 1, 2, 1, 0, 3, 0, 3], [28, 90, 16, 69, 42, 39, 26, 75, 64, 84, 95], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 6, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024484403948065, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 4, 6, 1, 1, 6, 9, 8, 4, 9, 2, 6, 5, 5, 4, 5, 3, 5, 6, 5, 3, 7, 2, 2, 6, 8, 9, 5, 6, 3, 4, 1, 1, 5, 7, 8, 9, 8, 5, 1, 4, 8, 5, 3, 1, 8, 8, 4, 4, 2, 3, 6, 5, 5, 3, 4, 6, 8, 4, 9, 5, 8, 7], [2, 2, 0, 2, 0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 2, 1, 1, 2, 3, 3, 0, 3, 1, 2, 2, 0, 3, 0, 3, 3, 0, 0, 2], [66, 88, 16, 15, 42, 39, 26, 54, 68, 39, 69, 54, 14], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [4, 2], [94], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 5, 2, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 79, 79, 51, 28, 13, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))))), tf.math.square(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.subtract(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.square(grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.square(alpha)))))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.sqrt(grad)), grad)))))))))))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(alpha, tf.math.add(alpha, grad))))), tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [7, 2, 0, 1, 1, 6, 9, 8, 4, 9, 2, 6, 3, 5, 4, 5, 1, 4, 6, 5, 3, 7, 6, 2, 6, 8, 9, 5, 6, 2, 4, 1, 1, 5, 7, 8, 4, 8, 0, 1, 1, 8, 5, 9, 1, 8, 8, 4, 5, 2, 3, 6, 5, 0], [1, 2, 0, 2, 0, 0, 1, 2, 2, 0, 2, 2, 0, 2, 2, 1, 1, 2, 3, 3, 0, 3, 1, 1, 1, 0, 3, 0, 1, 2, 2, 0], [47, 90, 16, 15, 42, 39, 26, 90, 64, 39, 49, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 81, 81, 52, 29, 12, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 4, 3, 1], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(grad)))))), tf.math.add(alpha, grad))), tf.math.square(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))))), tf.math.subtract(tf.math.sqrt(grad), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))))), alpha))), tf.math.add(tf.math.multiply(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(beta)), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 2, 1, 1, 9, 6, 9, 8, 6, 9, 0, 6, 2, 4, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 6, 5, 9, 5, 2, 3, 4, 1, 2, 5, 7, 8, 9, 8, 3, 1, 4, 2, 5, 3, 2, 2, 8, 4, 4, 2, 2, 6, 5], [1, 2, 0, 0, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 1, 2, 3, 0, 0, 3, 1, 1, 1, 2, 3, 0, 3], [47, 90, 66, 15, 42, 39, 26, 75, 64, 39, 49, 76], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 8, 8, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 3, 0, 2, 3, 0, 1, 0, 3], [45, 29, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 11, 4, 5, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [7, 2, 3, 1, 1, 6, 9, 8, 3, 0, 8, 2, 0, 5, 4, 5, 6, 3, 6, 5, 3, 7, 6, 2, 6, 9, 4, 3, 6, 3, 4, 1, 1, 5, 6, 5, 9, 8, 5, 1, 4, 6, 5, 5, 1, 8, 8, 4, 4, 2, 2, 6, 5], [1, 0, 2, 1, 0, 1, 1, 2, 1, 0, 2, 1, 2, 2, 2, 1, 2, 2, 3, 3, 2, 0, 1, 2, 1, 0, 3, 0, 3], [47, 88, 68, 58, 29, 46, 26, 54, 64, 39, 49, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 2, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 12, 6, 6, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.subtract(beta, sigma))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [5, 2, 6, 9, 1, 2, 8, 8, 4, 2, 2, 3, 5, 9, 4, 4, 3, 0, 2, 5, 3, 1, 9, 3, 4, 8, 9, 0, 1, 3, 6, 8, 1, 5, 7, 8, 1, 2, 5, 1, 4, 8, 5, 2, 1, 8, 8, 2, 4, 2, 3, 6, 5], [1, 2, 2, 1, 0, 0, 2, 0, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1, 0, 2, 2, 3], [47, 30, 16, 15, 42, 81, 83, 41, 42, 39, 49, 54], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 1, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 19, 11, 5, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.negative(alpha), tf.math.add(tf.math.add(alpha, grad), grad)))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(grad, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 2, 6, 1, 1, 6, 5, 8, 4, 9, 2, 6, 0, 5, 0, 5, 3, 3, 6, 5, 3, 7, 3, 2, 6, 8, 9, 5, 6, 3, 4, 1, 1, 3, 4, 8, 9, 8, 5, 1, 4, 8, 5, 3, 1, 8, 2, 4, 4, 2, 3, 6, 5], [1, 2, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 0, 2, 2, 2, 1, 2, 3, 3, 0, 3, 1, 2, 1, 0, 1, 0, 3], [66, 88, 84, 15, 43, 39, 26, 54, 35, 39, 69, 5], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 60, 60, 38, 22, 9, 6, 6, 5, 1, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.pow(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha)))))))))))), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [8, 2, 6, 2, 1, 5, 9, 8, 4, 9, 2, 3, 5, 9, 4, 5, 3, 0, 6, 9, 3, 9, 2, 3, 6, 8, 9, 0, 0, 1, 6, 8, 8, 2, 7, 2, 9, 8, 5, 1, 4, 8, 5, 2, 1, 8, 8, 2, 4, 2, 3, 6, 5], [2, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 2, 3, 3, 0, 3, 1, 2, 1, 0, 3, 0, 3], [66, 88, 16, 15, 42, 39, 74, 39, 68, 56, 69, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [4, 2], [94], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 2, 8, 4, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 3, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 2, 3, 1, 1, 9, 9, 8, 4, 9, 2, 6, 3, 5, 4, 5, 1, 4, 6, 5, 3, 7, 6, 2, 6, 8, 9, 5, 6, 3, 4, 1, 1, 5, 7, 8, 4, 8, 0, 1, 4, 8, 5, 3, 1, 8, 8, 4, 5, 2, 3, 6, 5, 0], [1, 2, 1, 2, 1, 0, 2, 2, 1, 0, 1, 2, 0, 2, 2, 1, 2, 1, 0, 0, 0, 2, 2, 2, 0, 1, 3, 1, 2, 3, 1, 0], [66, 88, 16, 15, 42, 39, 26, 54, 68, 39, 69, 54], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 5, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 60, 60, 38, 22, 10, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [7, 2, 6, 1, 1, 6, 9, 8, 0, 9, 2, 2, 3, 5, 4, 5, 1, 4, 8, 5, 3, 7, 6, 2, 6, 8, 5, 5, 8, 3, 4, 1, 1, 2, 7, 8, 4, 8, 0, 1, 4, 8, 5, 3, 1, 8, 8, 4, 5, 2, 3, 6, 5, 0], [1, 2, 0, 1, 0, 2, 2, 2, 1, 2, 0, 1, 2, 2, 2, 1, 2, 2, 3, 3, 2, 0, 1, 2, 2, 0, 3, 0, 2, 3, 3, 3], [28, 90, 48, 15, 68, 39, 26, 75, 64, 84, 95], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 10, 5, 4, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 3, 3, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))))), alpha), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024484403948065, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [7, 2, 6, 1, 1, 9, 9, 8, 2, 9, 2, 0, 3, 5, 4, 9, 1, 4, 6, 5, 3, 7, 6, 2, 6, 2, 9, 3, 6, 5, 4, 1, 1, 5, 7, 8, 4, 8, 0, 1, 4, 8, 8, 3, 1, 9, 8, 4, 5, 2, 5, 6, 5, 0], [2, 2, 0, 0, 2, 1, 2, 2, 1, 0, 2, 2, 0, 2, 2, 2, 2, 2, 3, 3, 0, 0, 1, 2, 1, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1], [47, 21, 16, 15, 29, 46, 26, 54, 64, 39, 49, 54], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 1, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 17, 7, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 4, 1, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.subtract(alpha, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3025880184911736, 2.3027995319540286, 2.302793129072087, 2.302853784509512, 2.302766437339052, 2.3027871040510006], "accuracy": [0.09074098616838455, 0.08875974267721176, 0.09576013684272766, 0.09140139818191528, 0.09496764093637466, 0.09879804402589798], "val_loss": [1.9736213684082031, 1.9736321313040597, 1.9736373765128, 1.97364718573434, 1.973661286490304, 1.9736206872122628], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [7, 2, 6, 1, 1, 6, 9, 8, 4, 9, 2, 8, 0, 5, 4, 5, 2, 3, 6, 2, 3, 7, 6, 5, 6, 8, 2, 5, 6, 3, 4, 1, 1, 5, 7, 5, 9, 8, 5, 1, 4, 8, 5, 3, 1, 6, 8, 4, 4, 2, 3, 6, 5], [1, 2, 1, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 2, 2, 1, 1, 2, 2, 3, 0, 3, 1, 2, 2, 0, 3, 0, 3], [47, 90, 16, 88, 42, 39, 26, 75, 64, 39, 49, 54], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), alpha)", "other_info": {"loss": [2.302193553487717, 2.301175616342063, 2.3024909101094964, 2.3015844048510266, 2.303114112184631, 2.302779387048427], "accuracy": [0.09074098616838455, 0.09668471664190292, 0.08889182657003403, 0.09245806187391281, 0.08558975160121918, 0.08598599582910538], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [7, 2, 6, 1, 0, 6, 2, 8, 4, 9, 2, 6, 3, 5, 4, 9, 1, 4, 6, 5, 3, 7, 6, 2, 6, 8, 9, 5, 6, 3, 4, 1, 1, 5, 7, 8, 4, 2, 0, 1, 4, 8, 9, 3, 1, 0, 8, 4, 5, 2, 3, 6, 5, 0, 2, 5, 0, 8, 6, 7, 5, 3, 2, 9, 8, 8, 3, 1, 8, 1, 7, 3, 5], [1, 2, 0, 0, 0, 1, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 3, 0, 2, 1, 1, 1, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3], [49, 88, 16, 15, 42, 39, 26, 54, 68, 39, 69, 54, 72], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [1, 2], [94], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 114, 114, 73, 41, 13, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 79, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.square(grad))))), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(alpha))))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(alpha)))), alpha)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), alpha)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha))))))))))), tf.math.add(alpha, alpha))))))))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), grad)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302193553487717, 2.301175616342063, 2.3024909101094964, 2.3015844048510266, 2.303114112184631, 2.302779387048427], "accuracy": [0.09074098616838455, 0.09668471664190292, 0.08889182657003403, 0.09245806187391281, 0.08558975160121918, 0.08598599582910538], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]