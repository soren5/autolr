[{"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 2, 5, 2, 2, 8, 4, 8, 1, 6, 2, 2, 4, 5, 5, 6, 1, 8, 4, 4, 9, 4, 2, 0, 6, 9, 2, 2, 2, 2, 1, 1, 5, 2, 5, 9, 6, 5, 1, 4, 8, 5, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 2, 0, 2, 2, 2, 0, 2, 2, 1, 0, 3, 2, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 59, 39, 33, 75, 29, 76, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [83], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 2, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.4714285731315613, "mapping_values": [1, 60, 60, 37, 23, 12, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(alpha)), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))))), grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))))))))))))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.925200742831902, 2.2867099252186116, 2.276228235319322, 2.1802570676255644, 2.388246119660063, 2.27362597708248, 2.359890505307386, 2.266368496891939, 2.4420953667662983], "accuracy": [0.16351869702339172, 0.17659489810466766, 0.14489498734474182, 0.23761722445487976, 0.15942411124706268, 0.1442345827817917, 0.16470743715763092, 0.16074495017528534, 0.14436666667461395], "val_loss": [1.928896495274135, 1.9720258712768555, 1.6941568170275008, 1.4308506080082484, 1.9743513379778181, 1.969709805079869, 1.974778175354004, 1.8659529004778181, 1.9659783499581474], "val_accuracy": [0.23066666722297668, 0.10000000149011612, 0.33766666054725647, 0.39266666769981384, 0.12700000405311584, 0.10100000351667404, 0.10533333569765091, 0.3596666753292084, 0.14933332800865173]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [8, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [30], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.2785714268684387, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.311746643266941, 2.2805600245678193, 2.332305889875346, 2.4190297061268677, 2.3036518718241825, 2.3034570573925923, 2.3029890861241666, 2.3028655809859213], "accuracy": [0.1698586642742157, 0.17870822548866272, 0.1508387327194214, 0.12151630967855453, 0.09813763201236725, 0.09906221181154251, 0.09760929644107819, 0.09813763201236725], "val_loss": [1.9668489864894323, 2.0723042488098145, 2.1994049889700755, 1.974325316292899, 1.9739244324820382, 1.9737565176827567, 1.9736700739179338, 1.9736741610935755], "val_accuracy": [0.10133333504199982, 0.0989999994635582, 0.24400000274181366, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 3, 5, 5, 6, 1, 8, 4, 4, 5, 4, 9, 6, 6, 9, 2, 9, 2, 2, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [1, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 1, 1, 2, 0, 1, 0, 3, 0, 2, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 16, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [1, 8, 1, 3], [3, 2], [75], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.25114285945892334, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3020149107071326, 2.3006091206348676, 2.301385003404689, 2.3006457326717977, 2.300320943553513, 2.3005709472727296, 2.3009304317579673, 2.3012866833426964, 2.3014714822730116, 2.299216057913824, 2.2998375658030996, 2.297830908415954, 2.29878311899785, 2.2990676147149554, 2.297756405743342, 2.298862330964874, 2.297395161035558, 2.2971758803734295, 2.2986717585323193, 2.2981173621507573, 2.2965218521395787, 2.295814033008727, 2.2972143398315645, 2.295753117077512, 2.2947987010529043, 2.2945699979600462, 2.294635780262925, 2.2941183765818494, 2.295614051025274, 2.2925286259964204, 2.2926947020615223, 2.2935714686724644, 2.2934715391039897, 2.294220044990462, 2.293633862320206, 2.292934328699471, 2.2921532721425626, 2.2922454356139506, 2.292077144249445, 2.2922392726621577, 2.2902442882121155, 2.292337646321881, 2.289583852750561, 2.2926336256835156, 2.2902215351880173, 2.2908495265132856, 2.2902196474582954, 2.2887100273702186, 2.2897147944007865, 2.2899776752740477, 2.28969885411437, 2.2880206361596045, 2.2871144836321484, 2.287289767233199, 2.2874978867819156, 2.287563734743589, 2.287835147575758, 2.2873054153773418, 2.2861882261297155, 2.2871973425752183, 2.2851661100300658, 2.28681112393853, 2.285178340358379, 2.2861161926056903, 2.284969682848417, 2.2848412373975724, 2.2837740919924117, 2.284850663544243, 2.284685203380683, 2.283838923801568, 2.2839258556683397, 2.283278726583553, 2.2835049473015925, 2.2841130829348684, 2.2808208009586073, 2.2833284745363116, 2.282389512419181, 2.2814828867390173, 2.2817594670915584, 2.2809125922060347, 2.280998632782218, 2.2797161447625545, 2.279344095955152, 2.277940252374869, 2.28017444563989, 2.280553032803639, 2.2799651368639613, 2.278330607862048, 2.278256474484731, 2.2783189496627463, 2.2794090582001494, 2.277804689416166, 2.278112598776172, 2.2772574106999173, 2.276118071859287, 2.2763389931410343, 2.277077816890263, 2.2759899964595216, 2.275707393983068, 2.274038284084092], "accuracy": [0.08519349992275238, 0.0948355570435524, 0.08836349099874496, 0.09417514503002167, 0.09457138925790787, 0.09311848133802414, 0.08955223858356476, 0.09377889335155487, 0.08849557489156723, 0.09576013684272766, 0.09985470771789551, 0.09919429570436478, 0.09919429570436478, 0.10170386731624603, 0.10011887550354004, 0.09945846349000931, 0.1014397069811821, 0.10196803510189056, 0.09509972482919693, 0.09879804402589798, 0.10857218503952026, 0.10210011899471283, 0.10249637067317963, 0.10817593336105347, 0.10434553027153015, 0.11002509295940399, 0.11081759631633759, 0.10672302544116974, 0.10896842926740646, 0.11306300014257431, 0.11491216719150543, 0.11319508403539658, 0.11293092370033264, 0.1026284471154213, 0.11042134463787079, 0.10711926966905594, 0.11081759631633759, 0.11795007437467575, 0.10936468094587326, 0.11781799048185349, 0.11662924289703369, 0.11174217611551285, 0.1224408894777298, 0.11596883088350296, 0.12349755316972733, 0.11636507511138916, 0.12072381377220154, 0.12495046854019165, 0.12098798155784607, 0.1290450394153595, 0.12336547672748566, 0.12323339283466339, 0.12812046706676483, 0.12838461995124817, 0.1216483935713768, 0.12561088800430298, 0.12693171203136444, 0.1286487877368927, 0.12996962666511536, 0.1254788041114807, 0.1294412910938263, 0.1294412910938263, 0.13459251821041107, 0.13419628143310547, 0.1328754425048828, 0.13247919082641602, 0.13802668452262878, 0.13498876988887787, 0.1364416927099228, 0.14238542318344116, 0.13829085230827332, 0.14251750707626343, 0.13842293620109558, 0.137630432844162, 0.14238542318344116, 0.13789460062980652, 0.14198917150497437, 0.148064985871315, 0.14555540680885315, 0.14476291835308075, 0.14278165996074677, 0.14529123902320862, 0.15361246466636658, 0.15070664882659912, 0.14397041499614716, 0.14859332144260406, 0.1516312211751938, 0.15321621298789978, 0.14912164211273193, 0.15440496802330017, 0.14634791016578674, 0.1504424810409546, 0.1534803807735443, 0.1644432693719864, 0.1604807823896408, 0.15678246319293976, 0.15902787446975708, 0.16140536963939667, 0.15995244681835175, 0.17091533541679382], "val_loss": [1.9707341875348772, 1.9704839842660087, 1.9702365057809013, 1.9699880055018835, 1.9697420937674386, 1.96949679510934, 1.969252245766776, 1.9690026555742537, 1.9687567438398088, 1.9685121944972448, 1.9682660102844238, 1.968019621712821, 1.9677753448486328, 1.9675308636256628, 1.9672838619777135, 1.9670392445155553, 1.966794150216239, 1.9665497371128626, 1.9663045065743583, 1.9660587310791016, 1.965815612248012, 1.9655732427324568, 1.9653289658682687, 1.965085506439209, 1.9648429325648717, 1.9645989962986536, 1.9643565586635046, 1.9641114643641882, 1.9638663700648717, 1.96362338747297, 1.9633804730006628, 1.9631376266479492, 1.9628947802952357, 1.962651184626988, 1.9624072483607702, 1.9621643338884627, 1.9619192395891463, 1.9616775512695312, 1.9614385196140833, 1.9611963544573103, 1.9609529631478446, 1.9607120241437639, 1.9604699271065849, 1.9602276257106237, 1.9599853924342565, 1.9597433635166712, 1.95950072152274, 1.9592592375619071, 1.9590202059064592, 1.9587770189557756, 1.9585352625165666, 1.9582952090672083, 1.9580549512590681, 1.9578120367867606, 1.9575677599225725, 1.957324504852295, 1.95708281653268, 1.9568383353097099, 1.9565951483590263, 1.9563493728637695, 1.9561069352286202, 1.9558618409293038, 1.9556209019252233, 1.9553749901907784, 1.9551293509347099, 1.954883234841483, 1.9546397072928292, 1.9543980870928084, 1.9541569437299455, 1.9539169584001814, 1.9536730902535575, 1.953430107661656, 1.9531847408839635, 1.952941826411656, 1.9526991844177246, 1.9524573598589217, 1.9522126742771693, 1.9519710540771484, 1.9517290251595634, 1.9514833177839006, 1.9512375422886439, 1.9509952408926827, 1.9507505553109306, 1.9505086626325334, 1.9502652032034737, 1.950021403176444, 1.9497771944318498, 1.9495317595345634, 1.9492877551487513, 1.9490433420453752, 1.9487975665501185, 1.9485515866960799, 1.9483075823102678, 1.9480626242501395, 1.9478160994393485, 1.9475694383893694, 1.9473255021231515, 1.9470765931265694, 1.9468294552394323, 1.9465814999171667], "val_accuracy": [0.036666665226221085, 0.03766666725277901, 0.03966666758060455, 0.03966666758060455, 0.04066666588187218, 0.0416666679084301, 0.04466666653752327, 0.04633333161473274, 0.04933333396911621, 0.05133333429694176, 0.052666667848825455, 0.054666668176651, 0.05700000002980232, 0.05900000035762787, 0.05999999865889549, 0.06300000101327896, 0.06433333456516266, 0.0663333311676979, 0.0676666647195816, 0.06966666877269745, 0.0716666653752327, 0.0729999989271164, 0.07466666400432587, 0.07699999958276749, 0.07966666668653488, 0.08233333379030228, 0.08433333039283752, 0.08733333647251129, 0.08900000154972076, 0.09233333170413971, 0.09399999678134918, 0.09733333438634872, 0.09866666793823242, 0.10166666656732559, 0.10366666316986084, 0.1080000028014183, 0.10999999940395355, 0.11266666650772095, 0.11500000208616257, 0.11866666376590729, 0.12066666781902313, 0.12333333492279053, 0.12533333897590637, 0.12700000405311584, 0.12933333218097687, 0.1303333342075348, 0.13233333826065063, 0.13500000536441803, 0.13699999451637268, 0.14033333957195282, 0.1420000046491623, 0.14300000667572021, 0.14399999380111694, 0.1469999998807907, 0.14866666495800018, 0.15066666901111603, 0.1523333340883255, 0.15433333814144135, 0.15833333134651184, 0.16066665947437286, 0.16200000047683716, 0.164000004529953, 0.1666666716337204, 0.1679999977350235, 0.17100000381469727, 0.17466667294502258, 0.17733334004878998, 0.17866666615009308, 0.18166667222976685, 0.18299999833106995, 0.1860000044107437, 0.18799999356269836, 0.18933333456516266, 0.1913333386182785, 0.19466666877269745, 0.1966666728258133, 0.1993333399295807, 0.20100000500679016, 0.20499999821186066, 0.20766666531562805, 0.20800000429153442, 0.20900000631809235, 0.2123333364725113, 0.2150000035762787, 0.2163333296775818, 0.21833333373069763, 0.22066666185855865, 0.22300000488758087, 0.2253333330154419, 0.22733333706855774, 0.2280000001192093, 0.23066666722297668, 0.2316666692495346, 0.23466666042804718, 0.2370000034570694, 0.2396666705608368, 0.2409999966621399, 0.24199999868869781, 0.24433332681655884, 0.24633333086967468]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [3, 8, 1, 3], [6, 2], [30], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.22742857038974762, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.925010805825327, 2.2983659357363915, 2.232209764939604, 2.309255850140319, 2.304070150154677, 2.3028395697425275], "accuracy": [0.1636507660150528, 0.1768590658903122, 0.1736890822649002, 0.13934750854969025, 0.09840179979801178, 0.09721305221319199], "val_loss": [1.9277079445975167, 1.9724797521318709, 1.9319113322666712, 1.974618775503976, 1.973517622266497, 1.973013469151088], "val_accuracy": [0.23499999940395355, 0.09966666996479034, 0.18466666340827942, 0.10100000351667404, 0.10300000011920929, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [3, 8, 1, 3], [6, 2], [30], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [63, 49, 44, 92]], "fitness": -0.10342857241630554, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.981857877822521, 2.3403685090406743, 2.3039178953131727, 2.3030769292468394, 2.3030642642163643, 2.303016586609804, 2.302873884099523, 2.302881100300265], "accuracy": [0.2036719024181366, 0.10130762308835983, 0.09549596905708313, 0.09998679161071777, 0.09298639744520187, 0.0936468094587326, 0.09549596905708313, 0.0956280529499054], "val_loss": [2.0988780430385043, 1.9742471149989538, 1.9738294056483678, 1.9737049511500768, 1.97369350705828, 1.973677430834089, 1.9736781801496233, 1.973707948412214], "val_accuracy": [0.1003333330154419, 0.10133333504199982, 0.10400000214576721, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [6, 2], [30], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [8, 8, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 2, 3, 0, 3, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3016993885168766, 2.3025807971888845, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0], [3, 8, 1, 3], [6, 2], [30], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [63, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07792893797159195, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [3, 8, 1, 3], [6, 2], [30], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [63, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 0, 3, 2, 1, 1, 0, 4, 4, 0, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [110688838.0250184, 2096969682.014001, 9770274805.720778, 26807752664.77665, 58526519080.13631, 106265570101.52635], "accuracy": [0.09826971590518951, 0.10236428678035736, 0.10117553919553757, 0.10460969805717468, 0.1002509593963623, 0.09826971590518951], "val_loss": [418723227.4285714, 3347530898.285714, 11295404324.571428, 26771288649.142857, 52284037997.71429, 90342939501.71428], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [8, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 0, 0, 4, 5, 5, 6, 1, 5, 4, 4, 5, 4, 5, 8, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 3, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [1, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 1, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 0, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [75], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 62, 62, 42, 20, 7, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.square(alpha))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))))))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [6, 2], [30], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 2, 3, 0, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 1, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [30], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(alpha))", "other_info": {"loss": [51989074500.37662, 7729906909867.839, 131017568958601.14, 918468145018361.5, 4133378941032315.5, 1.3403844557583694e+16], "accuracy": [0.09813763201236725, 0.10236428678035736, 0.1010434553027153, 0.10434553027153015, 0.10011887550354004, 0.09826971590518951], "val_loss": [430488336091.4286, 23207952852114.285, 249100826649746.28, 1357941689024512.0, 5086513969308818.0, 1.5004766442019694e+16], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 9, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 1, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [3, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 1, 0, 3, 0, 1, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 63, 52, 15, 39, 39, 33, 54, 29, 39, 88, 45, 77, 73, 79, 8], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 9, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [6, 2], [27], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 3, 0, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [94, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 61, 61, 41, 20, 11, 2, 2, 2, 0, 1, 2, 1, 1, 0, 0, 7, 5, 2, 1], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), tf.math.negative(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))))))))))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [14], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 3, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07792893797159195, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [30], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 3, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3016993885168766, 2.3025807971888845, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [2, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [86], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [34, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 0, 5, 6, 6, 2, 0, 0, 5, 5, 1, 1, 8, 4, 4, 1, 4, 2, 6, 6, 2, 2, 9, 2, 2, 9, 1, 5, 0, 9, 4, 6, 8, 2, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 8, 5, 9, 5], [1, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 0, 1, 3, 1, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 49, 23, 99, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [1, 8, 1, 3], [6, 2], [75], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [63, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 58, 58, 37, 21, 9, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))))), tf.math.pow(alpha, alpha))), tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.negative(alpha))))))))), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07792893797159195, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [40, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [7], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.09885714203119278, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 4, 4, 0, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.311013293445795, 2.371435400958169, 2.555485193991721, 2.877511548328362, 3.435339258835379, 4.13410658024526, 5.042364651107234, 6.207684754978916], "accuracy": [0.08532558381557465, 0.09615638852119446, 0.09760929644107819, 0.1018359512090683, 0.1002509593963623, 0.09879804402589798, 0.10236428678035736, 0.09959053993225098], "val_loss": [1.9822399275643485, 2.0360505240304128, 2.1608215740748813, 2.384216172354562, 2.7280020713806152, 3.202432496207101, 3.806725229535784, 4.534492492675781], "val_accuracy": [0.08833333104848862, 0.09666666388511658, 0.09866666793823242, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [47, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [66], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.05400000140070915, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.31175797569155, 2.277735916473264, 2.512491254475233, 2.30386498377166, 2.303102188547447, 2.302605863134575, 2.299181223356524, 2.299432390165398, 2.3052624987888297, 2.3032937217397995, 2.3040203727578064, 2.3032683013625794], "accuracy": [0.1698586642742157, 0.18016114830970764, 0.13697001338005066, 0.09774138033390045, 0.09853387624025345, 0.09576013684272766, 0.12732796370983124, 0.16616034507751465, 0.1002509593963623, 0.10566636174917221, 0.09642054885625839, 0.09219389408826828], "val_loss": [1.966512611934117, 1.8588330405099052, 1.9747121674673898, 1.9737041337149483, 1.9733802931649345, 1.972468648638044, 1.9586814471653529, 1.9761971746172224, 1.9739255905151367, 1.97365140914917, 1.973677635192871, 1.973672866821289], "val_accuracy": [0.10133333504199982, 0.13099999725818634, 0.09866666793823242, 0.09866666793823242, 0.10100000351667404, 0.1003333330154419, 0.14166666567325592, 0.10100000351667404, 0.09866666793823242, 0.10100000351667404, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 6, 8, 0, 4, 0, 1, 5, 9, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 6, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 3, 4, 2, 1, 3, 5, 9, 5], [3, 2, 0, 0, 2, 2, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [67, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [27], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 80, 80, 52, 28, 14, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), grad)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad)))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, grad)), tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), alpha))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3021249595713136, 2.300992130430194, 2.302036034479873, 2.3015699634745985, 2.3015005546333516, 2.302021020029703], "accuracy": [0.08506141602993011, 0.0940430611371994, 0.0874389111995697, 0.09206181764602661, 0.09232597798109055, 0.08968432247638702], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 2, 0, 3, 2, 2, 8, 4, 5, 8, 6, 2, 0, 4, 5, 5, 6, 1, 8, 4, 4, 5, 4, 2, 6, 6, 9, 2, 9, 2, 2, 1, 1, 5, 0, 9, 9, 6, 8, 1, 4, 8, 3, 9, 1, 6, 8, 4, 2, 1, 3, 5, 9, 5], [0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [51, 33, 23, 15, 25, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [6, 2], [30], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [6, 0, 9, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [137761073864.5462, 153994555745.28067, 153547942508.27, 170692020047.90067, 160028407226.68286, 145774324627.66238], "accuracy": [0.08651433140039444, 0.08730682730674744, 0.09206181764602661, 0.0874389111995697, 0.0878351628780365, 0.0940430611371994], "val_loss": [115329073152.0, 115329068470.85715, 115329061449.14285, 115329068470.85715, 115329066130.28572, 115329061449.14285], "val_accuracy": [0.0416666679084301, 0.0416666679084301, 0.0416666679084301, 0.0416666679084301, 0.0416666679084301, 0.0416666679084301]}}]