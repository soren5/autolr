[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 3, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 5, 1, 8, 1, 2, 2, 0, 3, 1, 1, 9, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 2, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 50, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [37, 80, 44, 92]], "fitness": -0.7940000295639038, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2313743432152933, 1.8085104863027366, 1.2721679813716043, 1.0514464415280165, 0.9841269783103912, 0.8869157755977962, 0.8436202927587401, 0.7828282872683588, 0.7751481283326679, 0.7340828935940347, 0.718208347108811, 0.6993964649997666, 0.695547288442883, 0.6767411981166204, 0.655707495363082, 0.6476873433537975, 0.6333404405242055, 0.6386867334908498, 0.6157679308627527, 0.6090160416904898, 0.6109958739722204, 0.59983607133492, 0.598131496577829, 0.5958311938338858, 0.5817281238044871, 0.592904732660642, 0.5695672992465833], "accuracy": [0.23352265357971191, 0.4543653428554535, 0.5659754276275635, 0.6296393871307373, 0.6469422578811646, 0.6800950765609741, 0.7003037929534912, 0.7185312509536743, 0.7145687341690063, 0.7306828498840332, 0.739400327205658, 0.7396644949913025, 0.7413815855979919, 0.748249888420105, 0.7569673657417297, 0.7565711140632629, 0.7662131786346436, 0.7642319202423096, 0.7740060687065125, 0.7714964747428894, 0.7765156626701355, 0.7817989587783813, 0.7783648371696472, 0.7777044177055359, 0.7839123010635376, 0.7774402499198914, 0.7951393723487854], "val_loss": [1.7557217734200614, 1.0993224893297469, 0.8093586649213519, 0.7361637353897095, 0.6913818802152362, 0.647650923047747, 0.6082387822014945, 0.5654542957033429, 0.5750682694571358, 0.5417056935174125, 0.5230872120176043, 0.5415451696940831, 0.5196133000510079, 0.5009987354278564, 0.5000703675406319, 0.49388125964573454, 0.4815055472510202, 0.48020402022770475, 0.46961401190076557, 0.4875795160021101, 0.4674936362675258, 0.45298073972974506, 0.46082636288234163, 0.4546066182000296, 0.47236008303506033, 0.4520039047513689, 0.4578754050391061], "val_accuracy": [0.4573333263397217, 0.6173333525657654, 0.6696666479110718, 0.6650000214576721, 0.6956666707992554, 0.7170000076293945, 0.7273333072662354, 0.7576666474342346, 0.7383333444595337, 0.762666642665863, 0.7673333287239075, 0.7490000128746033, 0.7753333449363708, 0.7903333306312561, 0.778333306312561, 0.7793333530426025, 0.7910000085830688, 0.7803333401679993, 0.7883333563804626, 0.7833333611488342, 0.7906666398048401, 0.8096666932106018, 0.800000011920929, 0.7986666560173035, 0.7919999957084656, 0.7973333597183228, 0.7883333563804626]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 3, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 4, 1, 8, 4, 2, 2, 0, 2, 1, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 2, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [37, 80, 44, 92]], "fitness": -0.7891428470611572, "mapping_values": [1, 3, 3, 1, 2, 0, 30, 30, 16, 14, 5, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, alpha), grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2313743926877, 1.8085094904304417, 1.2721528077972657, 1.0529316699563112, 0.9812568641215929, 0.8879097438271114, 0.8452879789640497, 0.7822198250652415, 0.7754201078852643, 0.7335943021101644, 0.7195975868032121, 0.7011977003518506, 0.6947734600611808, 0.6758437842315671, 0.6554035525264647, 0.6470757082799454, 0.6319514861700164, 0.6375353052285149, 0.6180082295454568, 0.6087293687151439, 0.6112856836193635, 0.5985730592726779, 0.599266342152505, 0.5957776418514475, 0.5840661693101137, 0.5906502752334938, 0.5693921639052962], "accuracy": [0.23352265357971191, 0.45410117506980896, 0.565711259841919, 0.628582775592804, 0.6479989290237427, 0.678642213344574, 0.6999075412750244, 0.7160216569900513, 0.7141724824905396, 0.7329282760620117, 0.737947404384613, 0.7387399077415466, 0.7441553473472595, 0.748778223991394, 0.757099449634552, 0.7569673657417297, 0.7668735980987549, 0.7664773464202881, 0.7737419009208679, 0.7726852297782898, 0.7761194109916687, 0.7798177003860474, 0.7775723338127136, 0.7775723338127136, 0.7836481332778931, 0.7778365015983582, 0.7943468689918518], "val_loss": [1.7557230676923479, 1.0992795739855086, 0.8100451401301793, 0.7345212187085833, 0.6923700060163226, 0.6523060117449079, 0.606546436037336, 0.5652923243386405, 0.570962769644601, 0.5440379210880825, 0.5233198744910104, 0.5383975846426827, 0.5193851334708077, 0.5005491290773664, 0.49910989829472135, 0.49295241492135183, 0.48150757380894255, 0.48410931655338835, 0.4691969837461199, 0.48831611020224436, 0.46984028816223145, 0.45264947414398193, 0.45895414693014963, 0.4573453153882708, 0.4666750431060791, 0.45026581627982004, 0.4587965522493635], "val_accuracy": [0.4573333263397217, 0.6169999837875366, 0.6676666736602783, 0.6646666526794434, 0.6956666707992554, 0.7163333296775818, 0.7286666631698608, 0.7576666474342346, 0.7406666874885559, 0.7620000243186951, 0.7670000195503235, 0.7540000081062317, 0.7720000147819519, 0.7900000214576721, 0.7816666960716248, 0.777999997138977, 0.7929999828338623, 0.7756666541099548, 0.7870000004768372, 0.7820000052452087, 0.7860000133514404, 0.8046666383743286, 0.8026666641235352, 0.7993333339691162, 0.7979999780654907, 0.8009999990463257, 0.7866666913032532]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 5, 9, 8, 0, 2, 2, 0, 4, 2, 1, 2, 3, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 4, 1, 2, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 47, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [28, 80, 44, 92]], "fitness": -0.7799999713897705, "mapping_values": [1, 3, 3, 1, 2, 0, 4, 4, 3, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.291348796116914, 2.2631444096832922, 2.234085883289328, 2.1945336553729553, 2.1408858085746196, 2.0679964422471078, 1.9666129750440842, 1.8462936776645777, 1.717758438874072, 1.5821579631765867, 1.4594295921736327, 1.36437294584271, 1.2822493044864924, 1.221791229668767, 1.161018713968242, 1.117807671189576, 1.0831004353467704, 1.0540789473782661, 1.008537645620866, 0.9932319577092019, 0.9751121579160024, 0.9445577595353898, 0.9211796617164683, 0.9147909498721727, 0.8968778540429627, 0.8886170227372368, 0.8776529465904482, 0.8630453492624884, 0.8547035254554789, 0.8449278033215845, 0.8342114183739302, 0.8213165497357866, 0.8185160320039123, 0.8179872812155358, 0.7934916470155047, 0.7853791995874218, 0.7892994365168128, 0.7852987642884018, 0.7635228855420003, 0.7670710033287761, 0.7539243587744061, 0.7607113215838599, 0.7489689565558302, 0.741022387043423, 0.7339032555552301, 0.7333709037519638, 0.7380116691190679, 0.7237800232580923, 0.7104284442363871, 0.7207443756261097, 0.7150776763680966, 0.7085744742200265, 0.711729474748524, 0.7066910814032846, 0.699368640251006, 0.6985252505642406, 0.6963062808262028, 0.6941788645940702, 0.694320873341241, 0.6818733880894925, 0.6671837343200953, 0.671747004839376, 0.6768196929856818, 0.6735082341222999, 0.6623992131071603, 0.6756235591219936, 0.6755248842190884], "accuracy": [0.11570466309785843, 0.19521859288215637, 0.25359925627708435, 0.30960243940353394, 0.35424646735191345, 0.3947959244251251, 0.4262316823005676, 0.4504028558731079, 0.47932901978492737, 0.5031039714813232, 0.5251618027687073, 0.5449742674827576, 0.5703341960906982, 0.585391640663147, 0.6037511825561523, 0.6103553175926208, 0.622639000415802, 0.633469820022583, 0.6515651941299438, 0.6553955674171448, 0.6551313996315002, 0.6674151420593262, 0.678642213344574, 0.6756042838096619, 0.6828688383102417, 0.6864351034164429, 0.6914542317390442, 0.6894729733467102, 0.6930392384529114, 0.703209638595581, 0.7051908373832703, 0.7059833407402039, 0.7021529674530029, 0.7073041796684265, 0.7157574892044067, 0.7186633348464966, 0.7154933214187622, 0.7194558382034302, 0.7255316376686096, 0.7224937081336975, 0.72672039270401, 0.7199841737747192, 0.7288337349891663, 0.7342491149902344, 0.7306828498840332, 0.7353057861328125, 0.7318716049194336, 0.7409853339195251, 0.7403249144554138, 0.7366266250610352, 0.7442874312400818, 0.7371549606323242, 0.7427024245262146, 0.7445515990257263, 0.7429665923118591, 0.7453441023826599, 0.7460044622421265, 0.7495707273483276, 0.746268630027771, 0.7536653280258179, 0.7580240368843079, 0.7568352818489075, 0.7537974119186401, 0.750231146812439, 0.7576277852058411, 0.7531369924545288, 0.7564390301704407], "val_loss": [1.9461123602730888, 1.9199043001447404, 1.887118135179792, 1.8430029324122839, 1.7827726772853307, 1.700784342629569, 1.593738113130842, 1.4653370380401611, 1.3298492431640625, 1.200861624308995, 1.091111523764474, 1.0040782860347204, 0.9335198061806815, 0.8781055722917829, 0.8345935004098075, 0.7987936564854213, 0.7700552599770683, 0.7468380587441581, 0.7239957536969867, 0.7072856766836983, 0.6919680663517543, 0.677866918700082, 0.6662901299340385, 0.6557706253869193, 0.6466318368911743, 0.6376728330339704, 0.6307434695107597, 0.6211813007082257, 0.6137865611485073, 0.6045501402446202, 0.6006250040871757, 0.5942482778004238, 0.5911684376852853, 0.5853732313428607, 0.5794718435832432, 0.5730809484209333, 0.568408897944859, 0.5660806042807442, 0.5597769021987915, 0.5561008964266095, 0.552824718611581, 0.5499166590826852, 0.5469758680888585, 0.5434777906962803, 0.5397519213812692, 0.5374324321746826, 0.534928560256958, 0.5314960650035313, 0.5279671805245536, 0.527949435370309, 0.525486673627581, 0.5215463297707694, 0.5205191714423043, 0.5178173439843314, 0.5181420700890678, 0.5166645560945783, 0.5102882896150861, 0.509299465588161, 0.507126910345895, 0.5072499343327114, 0.5006929636001587, 0.5009510517120361, 0.49946246828351704, 0.4984272377831595, 0.493660501071385, 0.49387856892177034, 0.4941578762871878], "val_accuracy": [0.24633333086967468, 0.3540000021457672, 0.398333340883255, 0.4410000145435333, 0.47066667675971985, 0.5063333511352539, 0.5339999794960022, 0.5543333292007446, 0.5856666564941406, 0.6116666793823242, 0.6503333449363708, 0.6603333353996277, 0.6766666769981384, 0.6833333373069763, 0.6899999976158142, 0.6916666626930237, 0.6986666917800903, 0.7009999752044678, 0.7093333601951599, 0.7116666436195374, 0.7163333296775818, 0.7213333249092102, 0.7239999771118164, 0.7269999980926514, 0.7319999933242798, 0.7300000190734863, 0.731333315372467, 0.7383333444595337, 0.7350000143051147, 0.7433333396911621, 0.7433333396911621, 0.75, 0.7436666488647461, 0.746666669845581, 0.7493333220481873, 0.7523333430290222, 0.7556666731834412, 0.7526666522026062, 0.7613333463668823, 0.7566666603088379, 0.7586666941642761, 0.7606666684150696, 0.7599999904632568, 0.7643333077430725, 0.765666663646698, 0.7630000114440918, 0.765999972820282, 0.7646666765213013, 0.768666684627533, 0.768666684627533, 0.7696666717529297, 0.7683333158493042, 0.7676666378974915, 0.7636666893959045, 0.7683333158493042, 0.7703333497047424, 0.7689999938011169, 0.7706666588783264, 0.7749999761581421, 0.7720000147819519, 0.7789999842643738, 0.7836666703224182, 0.7760000228881836, 0.7773333191871643, 0.7829999923706055, 0.778333306312561, 0.7776666879653931]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 8, 9, 3, 2, 4, 2, 2, 9, 2, 6, 2, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 4, 1, 1, 0, 0, 1, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 4, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [20, 80, 44, 92]], "fitness": -0.7111428380012512, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 11, 6, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, alpha)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3001808365338263, 2.293207493975902, 2.2894837738201366, 2.2842237466928776, 2.2789791648445537, 2.274080581889255, 2.2670675000148033, 2.2606213341268173, 2.2569562153431404, 2.251387550531361, 2.243009234904424, 2.235815769960663, 2.228801580672692, 2.222670197502623, 2.2135033434912073, 2.2054332154790064, 2.197282620267373, 2.1874499360662583, 2.1762882739545617, 2.165528410666056, 2.153721343477436, 2.142178697167859, 2.127099676847678, 2.111857025740783, 2.1006196041180236, 2.083922660739714, 2.0673925134058972, 2.046736715932989, 2.0299060669683464, 2.011452652034727, 1.9897225042454492, 1.965723196198329, 1.9449609337292642, 1.925041378874899, 1.8977980562378118, 1.864693600377859, 1.843270164029851, 1.8184327925862322, 1.786216260089126, 1.7637941918242734, 1.7314387800009843, 1.7084246318668752, 1.676400759452842, 1.6458619838031119, 1.62420509927828, 1.5952658451244328, 1.5776515335313017, 1.5439635077960077, 1.5156957041774806, 1.4992096535895936, 1.4784345612345182, 1.4525820616607605, 1.4367665544146355, 1.419963612800198, 1.3929255881628828, 1.3819216215662464, 1.3592279011846424, 1.350463484665973, 1.3291307510779817, 1.3080824990203872, 1.2857656058948967, 1.2648802774142376, 1.2611405909289741, 1.2546581362752143, 1.2304739175518633, 1.2293359143717288, 1.2255935008106074, 1.1977601287513282, 1.1877375321853683, 1.1880829639879469, 1.1749042924589501, 1.1513222399766907, 1.1467219837085683, 1.1467367249110811, 1.1292300053937734, 1.1280603447075077, 1.124809915284754, 1.1152962751990658, 1.102276868965679, 1.0902461694326415, 1.092211320951016, 1.076398702660383, 1.0734481150684199, 1.0650034171557776, 1.0616931947718964, 1.0481981972756245, 1.0415677011540505, 1.0410657418701612, 1.0338088620875758, 1.0309338021539758, 1.0196301856171328, 1.01151160831071, 1.0020028723859202, 0.9974299987797504, 0.9984465590195334, 0.9952404971734298, 0.9913913234979753, 0.9902805755907094, 0.9783170251735465, 0.9782555675730178], "accuracy": [0.09496764093637466, 0.11372341960668564, 0.1270637959241867, 0.137630432844162, 0.14529123902320862, 0.16734910011291504, 0.1846519559621811, 0.2008981704711914, 0.20499274134635925, 0.2238806039094925, 0.2339189052581787, 0.25518426299095154, 0.2681283950805664, 0.27684587240219116, 0.2884691655635834, 0.3007528781890869, 0.30999869108200073, 0.3210936486721039, 0.3329811096191406, 0.3413023352622986, 0.35001981258392334, 0.35886937379837036, 0.3679831027984619, 0.37670058012008667, 0.38488972187042236, 0.390569269657135, 0.39664509892463684, 0.40509840846061707, 0.4099854826927185, 0.41566503047943115, 0.416589617729187, 0.428609162569046, 0.42742040753364563, 0.42768457531929016, 0.44366663694381714, 0.4583278298377991, 0.4493461847305298, 0.45027077198028564, 0.46664905548095703, 0.460969477891922, 0.47787609696388245, 0.47589486837387085, 0.4905560612678528, 0.4892352521419525, 0.5008585453033447, 0.49768856167793274, 0.5008585453033447, 0.5139347314834595, 0.5165764093399048, 0.5268788933753967, 0.5211992859840393, 0.5349359512329102, 0.5307092666625977, 0.5374455451965332, 0.54220050573349, 0.5511821508407593, 0.5518425703048706, 0.5531634092330933, 0.5519746541976929, 0.5605600476264954, 0.5717870593070984, 0.5768062472343445, 0.568749189376831, 0.5742966532707214, 0.577070415019989, 0.583938717842102, 0.5775987505912781, 0.5935807824134827, 0.5976753234863281, 0.5918636918067932, 0.5919957756996155, 0.6092986464500427, 0.6091665625572205, 0.6036190986633301, 0.6033549308776855, 0.6083740592002869, 0.6083740592002869, 0.6127327680587769, 0.6217144131660461, 0.6235635876655579, 0.6217144131660461, 0.6164311170578003, 0.6225069165229797, 0.6244881749153137, 0.6330735683441162, 0.6343944072723389, 0.6370360851287842, 0.6289790272712708, 0.6362435817718506, 0.6394135355949402, 0.6450931429862976, 0.6530181169509888, 0.6490556001663208, 0.655527651309967, 0.6464139223098755, 0.6538106203079224, 0.6519614458084106, 0.6527539491653442, 0.650640606880188, 0.6563201546669006], "val_loss": [1.9659041677202498, 1.960953644343785, 1.9560014179774694, 1.9510212625776018, 1.9460453305925642, 1.9409243038722448, 1.9356559344700404, 1.9302362714494978, 1.9246572766985213, 1.918900830405099, 1.9127771513802665, 1.9063707760402135, 1.8995840208871024, 1.8924017633710588, 1.884699889591762, 1.876476219722203, 1.8677727154323034, 1.8584534781319755, 1.8484559059143066, 1.8379002979823522, 1.8266126768929618, 1.8145288739885603, 1.8015236854553223, 1.7877300807407923, 1.773198195866176, 1.7577496937343053, 1.7413195201328822, 1.7238853999546595, 1.7056069714682442, 1.6864352226257324, 1.666121142251151, 1.6448530469621931, 1.6224823338644845, 1.5993140425000871, 1.575124706540789, 1.549797194344657, 1.5240276881626673, 1.4977029051099504, 1.4707715511322021, 1.4438276290893555, 1.4161876610347204, 1.3888568196977888, 1.3611929757254464, 1.333693368094308, 1.3062069756644112, 1.2794179235185896, 1.2533771310533797, 1.227875096457345, 1.2031768730708532, 1.1793950285230363, 1.1567231587001257, 1.1346508775438582, 1.113682474408831, 1.093850748879569, 1.074591909136091, 1.0560193061828613, 1.0380174773080009, 1.0213147231510706, 1.0053372042519706, 0.9897148268563407, 0.9746707507542202, 0.9602359703608921, 0.946753876549857, 0.9341316223144531, 0.9215958118438721, 0.9102210657937186, 0.8995939663478306, 0.889073269707816, 0.8789310455322266, 0.8694956302642822, 0.860390305519104, 0.8515547173363822, 0.8432453189577375, 0.8351013490131923, 0.8271938562393188, 0.8199141025543213, 0.8130146605627877, 0.8063625608171735, 0.7997368233544486, 0.7931941407067435, 0.787343944822039, 0.781373245375497, 0.7756918328148978, 0.7700956889561245, 0.7649872984204974, 0.7595515251159668, 0.7546425887516567, 0.7500395774841309, 0.7457764319011143, 0.7413241011755807, 0.7369201523917062, 0.7323774780545916, 0.7281852449689593, 0.7242036887577602, 0.720531531742641, 0.7168386493410382, 0.7133460896355766, 0.7100772346769061, 0.706567815371922, 0.7034116472516742], "val_accuracy": [0.07100000232458115, 0.11999999731779099, 0.16300000250339508, 0.2070000022649765, 0.2460000067949295, 0.2796666622161865, 0.3083333373069763, 0.3283333480358124, 0.3440000116825104, 0.35766667127609253, 0.36666667461395264, 0.3773333430290222, 0.3869999945163727, 0.39633333683013916, 0.4036666750907898, 0.414000004529953, 0.4233333468437195, 0.4300000071525574, 0.43566668033599854, 0.4449999928474426, 0.44999998807907104, 0.4560000002384186, 0.4620000123977661, 0.4690000116825104, 0.4749999940395355, 0.4806666672229767, 0.49033331871032715, 0.4983333349227905, 0.5056666731834412, 0.5083333253860474, 0.5176666378974915, 0.5243333578109741, 0.531333327293396, 0.5376666784286499, 0.5446666479110718, 0.5493333339691162, 0.5519999861717224, 0.5556666851043701, 0.5596666932106018, 0.5649999976158142, 0.5696666836738586, 0.5736666917800903, 0.5823333263397217, 0.5899999737739563, 0.5956666469573975, 0.6013333201408386, 0.6056666374206543, 0.6143333315849304, 0.6166666746139526, 0.6266666650772095, 0.6343333125114441, 0.640999972820282, 0.6489999890327454, 0.6536666750907898, 0.6573333144187927, 0.6600000262260437, 0.6629999876022339, 0.6650000214576721, 0.6663333177566528, 0.6683333516120911, 0.6729999780654907, 0.675000011920929, 0.6736666560173035, 0.6756666898727417, 0.6779999732971191, 0.6796666383743286, 0.6806666851043701, 0.6816666722297668, 0.6816666722297668, 0.6846666932106018, 0.6833333373069763, 0.6850000023841858, 0.6850000023841858, 0.687333345413208, 0.6880000233650208, 0.6909999847412109, 0.6926666498184204, 0.6926666498184204, 0.6940000057220459, 0.6949999928474426, 0.6940000057220459, 0.6959999799728394, 0.6959999799728394, 0.6990000009536743, 0.6973333358764648, 0.6990000009536743, 0.6993333101272583, 0.6993333101272583, 0.7013333439826965, 0.703000009059906, 0.703000009059906, 0.7043333053588867, 0.7053333520889282, 0.7059999704360962, 0.7086666822433472, 0.7116666436195374, 0.7110000252723694, 0.7110000252723694, 0.7136666774749756, 0.7149999737739563]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 5, 6, 3, 0, 2, 2, 0, 4, 2, 3, 2, 5, 8, 5, 2, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 3, 3, 0, 1, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 47, 70, 98, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [15, 80, 44, 92]], "fitness": -0.5705714225769043, "mapping_values": [1, 3, 3, 1, 2, 0, 31, 31, 20, 11, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(alpha))), tf.math.add(beta, grad))))), grad), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3016139759977716, 2.298010792698858, 2.2976359187052973, 2.2957748277485566, 2.2939356779457003, 2.2925022455836963, 2.289177879413609, 2.2865331348663056, 2.2866643944499576, 2.2849790535078953, 2.281386396998601, 2.2787802085868907, 2.2769680915019297, 2.276202517005478, 2.273384965972941, 2.2714882659685376, 2.270196332939076, 2.268302845806887, 2.2650014017047413, 2.263065887590236, 2.260469249116431, 2.2598217439972696, 2.2565441235512194, 2.253518430831772, 2.2534930173825782, 2.250926719097933, 2.248298803986245, 2.244928699490133, 2.243103085287243, 2.2412002791723538, 2.2393366906621184, 2.2346206894482696, 2.233843999594871, 2.2322046243440616, 2.229161193578345, 2.2226974146949647, 2.2225177197991077, 2.220517564333189, 2.215076444234358, 2.214026805321932, 2.211037369515083, 2.2081647046159336, 2.2046792522287326, 2.2001701236448237, 2.198434370320786, 2.194979952720367, 2.1921253049409843, 2.187412308380667, 2.182825730540072, 2.179751229654639, 2.1770970089529107, 2.1726378370757904, 2.1688409635435244, 2.1656893396799544, 2.1592648043498355, 2.156730459571247, 2.1518626569552177, 2.1494130902144857, 2.1441216493374036, 2.139185739656276, 2.1322704198227864, 2.1246134509909282, 2.1222528522009263, 2.118467575617911, 2.1110445262733593, 2.1064558768899073, 2.1027739334887423, 2.093391331762229, 2.0889872961733333, 2.0841824576650327, 2.078105519901508, 2.0689048185450543, 2.062523626648219, 2.0588298280398765, 2.050211053435608, 2.044272463917811, 2.040495215689171, 2.032433948937566, 2.0260655660796805, 2.0165878001016444, 2.011134813584829, 2.0020348540134654, 1.998601982921358, 1.9869435158356574, 1.9808974715114316, 1.9720200701569837, 1.9611584713997197, 1.9532506325304422, 1.9457016002862617, 1.936999763023458, 1.926053954846099, 1.9189265232044614, 1.9096194233609038, 1.9025604460989212, 1.8878578830939936, 1.8818113480608114, 1.8747249702499715, 1.8680182204758564, 1.8520088883092485, 1.8454729250440698], "accuracy": [0.09087307006120682, 0.1018359512090683, 0.10342095047235489, 0.10659094154834747, 0.10870426893234253, 0.11702549457550049, 0.12362963706254959, 0.1320829540491104, 0.12930920720100403, 0.13578127324581146, 0.1394795924425125, 0.15691454708576202, 0.15519747138023376, 0.15889579057693481, 0.16576409339904785, 0.1740853190422058, 0.17870822548866272, 0.18082155287265778, 0.19363360106945038, 0.1912561058998108, 0.20697398483753204, 0.20116232335567474, 0.216880202293396, 0.2156914472579956, 0.21820102632045746, 0.22533351182937622, 0.2339189052581787, 0.2374851405620575, 0.23576806485652924, 0.2421080470085144, 0.2436930388212204, 0.2569013237953186, 0.252938836812973, 0.25584468245506287, 0.2627129852771759, 0.27077004313468933, 0.2678642272949219, 0.2763175368309021, 0.2942807972431183, 0.2822612524032593, 0.28886541724205017, 0.2975828945636749, 0.3011491298675537, 0.3057720363140106, 0.3082816004753113, 0.3163386583328247, 0.31779158115386963, 0.31937655806541443, 0.3230748772621155, 0.32901862263679504, 0.33324527740478516, 0.3295469582080841, 0.34064191579818726, 0.3381323516368866, 0.3571522831916809, 0.3463214933872223, 0.3457931578159332, 0.349359393119812, 0.3555673062801361, 0.3583410382270813, 0.3683793544769287, 0.37643641233444214, 0.3629639446735382, 0.3699643313884735, 0.3781534731388092, 0.37102100253105164, 0.3737947344779968, 0.38462555408477783, 0.3823801279067993, 0.38805970549583435, 0.387399286031723, 0.39823007583618164, 0.39849424362182617, 0.4006075859069824, 0.3999471664428711, 0.3961167633533478, 0.39545634388923645, 0.4057588279247284, 0.3987584114074707, 0.4084004759788513, 0.4143442213535309, 0.4154008626937866, 0.4138158857822418, 0.41949543356895447, 0.42226919531822205, 0.42187294363975525, 0.43111875653266907, 0.4263637661933899, 0.4325716495513916, 0.4295337498188019, 0.43508124351501465, 0.43983620405197144, 0.4431383013725281, 0.4430062174797058, 0.43825122714042664, 0.44868576526641846, 0.443798691034317, 0.44987452030181885, 0.4469687044620514, 0.4500066041946411], "val_loss": [1.9691211155482702, 1.967287881033761, 1.9654528072902135, 1.9636229106358118, 1.9618099076407296, 1.9599830763680595, 1.95815794808524, 1.9563226018633162, 1.9545101438249861, 1.9527030672345842, 1.9508746010916573, 1.949031148638044, 1.9471940994262695, 1.9453489439828056, 1.943479401724679, 1.9415960993085588, 1.9396978105817522, 1.9377802440098353, 1.9358463968549455, 1.9338946342468262, 1.9319184848240443, 1.929905618940081, 1.9278546742030553, 1.9257759366716658, 1.923701558794294, 1.92158419745309, 1.9194322994777135, 1.9172391210283553, 1.9150008474077498, 1.91275235584804, 1.910440376826695, 1.9080946786063058, 1.905689307621547, 1.9032485825674874, 1.9007675307137626, 1.8982048715863908, 1.8956091063363212, 1.8929412705557687, 1.8901847430637904, 1.8874028750828333, 1.8845342908586775, 1.8816382544381278, 1.8786147662571497, 1.8755413464137487, 1.872412817818778, 1.8691648074558802, 1.8658979960850306, 1.8625249181474959, 1.8590291568211146, 1.8554919787815638, 1.851865223475865, 1.8481298174176897, 1.8443021774291992, 1.8404350280761719, 1.8364411081586565, 1.8323854037693568, 1.8282170976911272, 1.8239917073931013, 1.819636276790074, 1.8151487622942244, 1.810551643371582, 1.8058227811540877, 1.8010217802865165, 1.7961298397609167, 1.7910759789603097, 1.7859193256923132, 1.780733517238072, 1.7753068378993444, 1.7697591100420271, 1.7641288893563407, 1.7584004402160645, 1.7524397032601493, 1.746363980429513, 1.7402631895882743, 1.7339177131652832, 1.7275281633649553, 1.7210773740495955, 1.7144602366856165, 1.7077243668692452, 1.7007614544459753, 1.6937378134046281, 1.6865418979099818, 1.6792628424508231, 1.671788215637207, 1.6642630440848214, 1.656510353088379, 1.6485823222569056, 1.6406220027378626, 1.6324855600084578, 1.6242589609963554, 1.6158415249415807, 1.6073290961129325, 1.598693915775844, 1.5899243014199393, 1.580984013421195, 1.5719870839800154, 1.5629455702645438, 1.5537712574005127, 1.5443808010646276, 1.5349861213139124], "val_accuracy": [0.04533333331346512, 0.05999999865889549, 0.07400000095367432, 0.09200000017881393, 0.11133333295583725, 0.12866666913032532, 0.14366666972637177, 0.16066665947437286, 0.17866666615009308, 0.19699999690055847, 0.2123333364725113, 0.22766666114330292, 0.24166665971279144, 0.25433334708213806, 0.26733332872390747, 0.27900001406669617, 0.28966665267944336, 0.296999990940094, 0.3073333203792572, 0.3166666626930237, 0.3243333399295807, 0.3316666781902313, 0.33933332562446594, 0.34466665983200073, 0.34933334589004517, 0.3540000021457672, 0.3580000102519989, 0.3606666624546051, 0.3656666576862335, 0.367333322763443, 0.37166666984558105, 0.3763333261013031, 0.3790000081062317, 0.3813333213329315, 0.3840000033378601, 0.38866665959358215, 0.39233332872390747, 0.3956666588783264, 0.39899998903274536, 0.40299999713897705, 0.4059999883174896, 0.40833333134651184, 0.4113333225250244, 0.41333332657814026, 0.41499999165534973, 0.41966667771339417, 0.42266666889190674, 0.42766666412353516, 0.42899999022483826, 0.4333333373069763, 0.43666666746139526, 0.4390000104904175, 0.44200000166893005, 0.44433334469795227, 0.4483333230018616, 0.45133334398269653, 0.45266667008399963, 0.4569999873638153, 0.45766666531562805, 0.4606666564941406, 0.46166667342185974, 0.4650000035762787, 0.46666666865348816, 0.46833333373069763, 0.46933332085609436, 0.4723333418369293, 0.47333332896232605, 0.47699999809265137, 0.4793333411216736, 0.4816666543483734, 0.484333336353302, 0.4866666793823242, 0.492000013589859, 0.492333322763443, 0.4970000088214874, 0.4986666738986969, 0.5009999871253967, 0.5026666522026062, 0.5046666860580444, 0.5073333382606506, 0.5090000033378601, 0.5113333463668823, 0.515333354473114, 0.515999972820282, 0.5196666717529297, 0.5210000276565552, 0.5223333239555359, 0.5236666798591614, 0.5270000100135803, 0.5286666750907898, 0.5320000052452087, 0.5350000262260437, 0.5389999747276306, 0.5396666526794434, 0.5410000085830688, 0.5429999828338623, 0.5456666946411133, 0.5476666688919067, 0.5486666560173035, 0.5513333082199097]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 3, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 8, 0, 1, 2, 0, 4, 2, 1, 2, 3, 4, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 3, 3, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [37, 80, 44, 92]], "fitness": -0.16742856800556183, "mapping_values": [1, 3, 3, 1, 2, 0, 37, 37, 23, 14, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.negative(tf.math.subtract(tf.math.add(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.negative(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.sqrt(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)))), tf.math.add(beta, grad))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.549263408076667, 2.4039277799881176, 2.3085459257397183, 2.3410876648474237, 2.3064826990650817, 2.3029779156264283, 2.2875908135013683, 2.323840463040228, 2.3043694646366992, 2.304135756989543, 2.3037619185784646, 2.3031164545818266], "accuracy": [0.19495442509651184, 0.17936864495277405, 0.10487385839223862, 0.1592920422554016, 0.09549596905708313, 0.1002509593963623, 0.14859332144260406, 0.11042134463787079, 0.09906221181154251, 0.09470347315073013, 0.09311848133802414, 0.09945846349000931], "val_loss": [1.9760067803519112, 1.9863166809082031, 1.9686920983450753, 1.9785733222961426, 1.9740815162658691, 1.9720217841012138, 1.9947656903948103, 1.9738241604396276, 1.974006244114467, 1.9739111491612025, 1.973634856087821, 1.972630841391427], "val_accuracy": [0.09866666793823242, 0.10133333504199982, 0.10133333504199982, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.16466666758060455, 0.09799999743700027, 0.09966666996479034, 0.1003333330154419, 0.09799999743700027, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 1, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 4, 1, 8, 4, 2, 2, 0, 2, 1, 1, 2, 6, 8, 3, 9, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 4, 1, 2, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [95, 20, 5, 64, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [28, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 31, 31, 18, 13, 6, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta))))), tf.math.subtract(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))))), grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 2, 4, 3, 1, 8, 3, 2, 1, 2, 6, 4, 3, 6, 0, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 1, 2, 0, 0, 1, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 32, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [34, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 4, 15, 15, 8, 7, 2, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), grad)))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 8, 4, 3, 2, 2, 2, 2, 0, 4, 6, 0, 3, 9, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [95, 20, 70, 64, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 3, 1, 0, 3], [8, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 29, 29, 17, 12, 6, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [2, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 8, 1, 8, 4, 8, 2, 0, 2, 1, 1, 2, 2, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 2, 0, 3, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [37, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 4, 13, 13, 8, 5, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), grad)))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, beta))))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [27760.51466925685, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.038304053246974945, 0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.484633646561599e+32, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 0, 2, 2, 3, 0, 2, 5, 3, 0, 2, 3, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 3, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 1, 6, 6, 4, 2, 8, 1, 4, 0, 8, 6, 0, 8, 5, 6, 5, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 2, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [13, 31, 70, 87, 11, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 3, 2, 3, 3, 1, 0, 3], [28, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, beta))))), tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, alpha))))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [2, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 3, 1, 8, 4, 2, 2, 0, 2, 1, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 2, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 34, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 3, 1, 0, 3], [37, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 4, 15, 15, 8, 7, 2, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), grad)))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(grad, alpha), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 8, 2, 3, 2, 4, 0, 2, 1, 2, 6, 0, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 2, 2, 0, 0, 1, 3, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 93, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [28, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 13, 13, 7, 6, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [8, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 3, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 4, 1, 8, 4, 2, 2, 1, 2, 1, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 2, 3, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 74, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [37, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 33, 33, 18, 15, 4, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), beta)), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, alpha), grad))))), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 3, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 5, 6, 8, 4, 2, 2, 0, 4, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 3, 3, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 0, 3, 2, 3, 3, 1, 0, 3], [28, 80, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 14, 7, 7, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(tf.math.subtract(tf.math.multiply(beta, sigma), sigma))), alpha)", "other_info": {"loss": [2.3024415696821414, 2.3008083202866927, 2.3024234322666444, 2.302551203085179, 2.3026802556515684, 2.3032396182313555], "accuracy": [0.08942015469074249, 0.09496764093637466, 0.09113723784685135, 0.09140139818191528, 0.08545766770839691, 0.09047681838274002], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 3, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 2, 1, 8, 4, 2, 2, 0, 2, 8, 1, 2, 6, 8, 3, 2, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 0, 0, 2, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 0, 3, 2, 3, 3, 1, 0, 3], [37, 80, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, beta)))", "other_info": {"loss": [2.3024415696821414, 2.3008083202866927, 2.3024234322666444, 2.302551203085179, 2.3026802556515684, 2.3032396182313555], "accuracy": [0.08942015469074249, 0.09496764093637466, 0.09113723784685135, 0.09140139818191528, 0.08545766770839691, 0.09047681838274002], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 5, 6, 8, 0, 4, 2, 0, 4, 2, 1, 2, 3, 8, 3, 8, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 3, 3, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 47, 77, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 0, 3, 2, 3, 3, 1, 0, 3], [28, 80, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 30, 30, 19, 11, 5, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024415696821414, 2.3008083202866927, 2.3024234322666444, 2.302551203085179, 2.3026802556515684, 2.3032396182313555], "accuracy": [0.08942015469074249, 0.09496764093637466, 0.09113723784685135, 0.09140139818191528, 0.08545766770839691, 0.09047681838274002], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [2, 3, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 9, 1, 8, 1, 2, 2, 0, 2, 1, 1, 2, 6, 8, 3, 6, 2, 0, 1, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 1, 2, 0, 0, 3, 3, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [33, 47, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [37, 80, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024415696821414, 2.3008083202866927, 2.3024234322666444, 2.302551203085179, 2.3026802556515684, 2.3032396182313555], "accuracy": [0.08942015469074249, 0.09496764093637466, 0.09113723784685135, 0.09140139818191528, 0.08545766770839691, 0.09047681838274002], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [8, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 1, 9, 3, 2, 4, 2, 2, 9, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 4, 1, 2, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [95, 37, 70, 64, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [28, 80, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 30, 30, 18, 12, 7, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))), tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024415696821414, 2.3008083202866927, 2.3024234322666444, 2.302551203085179, 2.3026802556515684, 2.3032396182313555], "accuracy": [0.08942015469074249, 0.09496764093637466, 0.09113723784685135, 0.09140139818191528, 0.08545766770839691, 0.09047681838274002], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [2, 2, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 55, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 8, 9, 3, 2, 4, 2, 2, 9, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 4, 1, 2, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [9, 8, 1, 3], [1, 2], [93], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 3, 2, 8, 1, 3, 9, 2, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 3, 1, 0, 3], [30, 80, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024415696821414, 2.3008083202866927, 2.3024234322666444, 2.302551203085179, 2.3026802556515684, 2.3032396182313555], "accuracy": [0.08942015469074249, 0.09496764093637466, 0.09113723784685135, 0.09140139818191528, 0.08545766770839691, 0.09047681838274002], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]