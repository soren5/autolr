[{"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 6, 2, 2, 6, 0, 2, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 76, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 2, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.8288571238517761, "mapping_values": [1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2032218233248844, 1.8615222057378555, 1.4993963190719137, 1.066067797003043, 0.9053275596275148, 0.8732836914257744, 0.7557034745523092, 0.7025157320280557, 0.6751711291014133, 0.6576284698176582, 0.655529273121569, 0.6021788744421966, 0.6016580490561493, 0.5858052922372159, 0.5576508433638373, 0.5519083100948603, 0.5345358220719391, 0.5191614612486258, 0.5074125644065102, 0.5301132383615491, 0.4953556113066123, 0.47970945226391937, 0.46891771357498147, 0.4650965060548161, 0.455570635538469, 0.4514511140889306], "accuracy": [0.2569013237953186, 0.39122968912124634, 0.4768194556236267, 0.5995244979858398, 0.6679434776306152, 0.6643772125244141, 0.7046625018119812, 0.7292299270629883, 0.7430986762046814, 0.7466648817062378, 0.7464007139205933, 0.7750627398490906, 0.7671377658843994, 0.7749306559562683, 0.7833839654922485, 0.791969358921051, 0.7969884872436523, 0.7991018295288086, 0.8149517774581909, 0.7964601516723633, 0.8127063512802124, 0.819970965385437, 0.8215559124946594, 0.8238013386726379, 0.8265751004219055, 0.8309338092803955], "val_loss": [1.8324251856122697, 1.4794411999838692, 0.9348995004381452, 0.8953524998256138, 0.664709210395813, 0.6171901907239642, 0.5522639240537371, 0.5481789282390049, 0.5098929064614433, 0.5457734891346523, 0.47076148646218435, 0.48130706378391813, 0.4913466487612043, 0.42281832865306307, 0.4233940158571516, 0.46452668734959196, 0.40135912384305683, 0.41131716115134104, 0.47353156975337435, 0.3980720213481358, 0.3668243885040283, 0.3971099172319685, 0.43874544756753103, 0.38013947010040283, 0.369598993233272, 0.38471043961388723], "val_accuracy": [0.320333331823349, 0.48366665840148926, 0.54666668176651, 0.6313333511352539, 0.6883333325386047, 0.7256666421890259, 0.75, 0.7576666474342346, 0.7546666860580444, 0.746999979019165, 0.7873333096504211, 0.7820000052452087, 0.7833333611488342, 0.8086666464805603, 0.8080000281333923, 0.7793333530426025, 0.8259999752044678, 0.8143333196640015, 0.7860000133514404, 0.8270000219345093, 0.843666672706604, 0.8253333568572998, 0.7879999876022339, 0.8253333568572998, 0.8413333296775818, 0.8333333134651184]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 4, 5, 2, 2, 6, 9, 0, 4, 5, 3, 0, 5, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [2, 2, 2, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 69, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.8242856860160828, "mapping_values": [1, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), alpha))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.20339455394823, 1.8528391664463688, 1.4728245108654439, 1.0887484993712304, 0.9469539911015442, 0.8040751531737875, 0.7627763046942462, 0.7179875248820947, 0.7054970811827622, 0.6793840789224934, 0.6673949956815194, 0.6204257776094482, 0.6144814605112042, 0.5928432063388157, 0.5643043475002424, 0.5640901039068993, 0.5383599727003566, 0.5346382156480903, 0.5206175666947517, 0.5269094649055268, 0.5010073041289222, 0.49442914826223455, 0.4855921535900697, 0.4706059627174906, 0.45481069394862256, 0.4652297251441176], "accuracy": [0.25676923990249634, 0.395720511674881, 0.4881785809993744, 0.5935807824134827, 0.6388852000236511, 0.6913221478462219, 0.7065116763114929, 0.722757875919342, 0.7323999404907227, 0.741909921169281, 0.7409853339195251, 0.7574957013130188, 0.7664773464202881, 0.7737419009208679, 0.7849689722061157, 0.7853652238845825, 0.7956677079200745, 0.7965922355651855, 0.8079513907432556, 0.7973847389221191, 0.8120459914207458, 0.8101968169212341, 0.8153480291366577, 0.8222163319587708, 0.8276317715644836, 0.8224804997444153], "val_loss": [1.833188806261335, 1.4225878715515137, 0.9138243538992745, 0.9133939402444022, 0.608130829674857, 0.6107017653329032, 0.5855549914496285, 0.5498687199183873, 0.6024153573172433, 0.5362338849476406, 0.4719277960913522, 0.470613922391619, 0.49696523802621023, 0.4351346067019871, 0.42312783002853394, 0.4411989450454712, 0.398921719619206, 0.4229217767715454, 0.467164295060294, 0.40316747767584665, 0.377650967666081, 0.41234380858285086, 0.4264066389628819, 0.4045171397072928, 0.37546093123299734, 0.37711890254701885], "val_accuracy": [0.32100000977516174, 0.4716666638851166, 0.5776666402816772, 0.5986666679382324, 0.7083333134651184, 0.7246666550636292, 0.7463333606719971, 0.7436666488647461, 0.7293333411216736, 0.746999979019165, 0.7753333449363708, 0.7886666655540466, 0.7763333320617676, 0.8056666851043701, 0.8080000281333923, 0.7900000214576721, 0.8276666402816772, 0.8053333163261414, 0.7826666831970215, 0.8273333311080933, 0.8370000123977661, 0.8336666822433472, 0.8209999799728394, 0.8026666641235352, 0.8336666822433472, 0.831333339214325]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [6, 6, 2, 3, 2, 2, 3, 0, 9, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 31, 54, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [4, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 80, 44, 92]], "fitness": -0.8222857117652893, "mapping_values": [1, 16, 16, 8, 8, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, grad), tf.math.add(alpha, grad))))), grad)))), tf.math.add(alpha, tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.203380394762911, 1.864345961920164, 1.5356540770310894, 1.1212474467212403, 0.8966481328293978, 0.857833899739648, 0.7388900123204947, 0.7129919995894411, 0.6815733625006761, 0.6660393981995946, 0.6580700101853677, 0.6059052663125918, 0.6124971826724278, 0.5794430420131353, 0.5586545038862535, 0.5489587412770429, 0.5349221920230212, 0.5157710609025392, 0.52256009097207, 0.5113430930449899, 0.4945071504384047, 0.4743086701339467, 0.47465538353479736, 0.46913909317716207, 0.4432383287088384, 0.46648430373564437], "accuracy": [0.25676923990249634, 0.39004093408584595, 0.48474442958831787, 0.5798441171646118, 0.6580372452735901, 0.6803592443466187, 0.715889573097229, 0.7277770638465881, 0.7392682433128357, 0.7466648817062378, 0.7457403540611267, 0.7714964747428894, 0.7631752490997314, 0.7827235460281372, 0.7815347909927368, 0.7936864495277405, 0.796328067779541, 0.8063663840293884, 0.805177628993988, 0.8063663840293884, 0.8128384351730347, 0.8222163319587708, 0.8206313848495483, 0.8219521641731262, 0.8342359066009521, 0.8224804997444153], "val_loss": [1.8331248419625419, 1.5932639326368059, 0.9227246556963239, 0.7022680214473179, 0.6173218658992222, 0.5552586146763393, 0.5799696615764073, 0.538648179599217, 0.5983587673732212, 0.5400855541229248, 0.48972131524767193, 0.46772427218300955, 0.4619827611105783, 0.4137072648320879, 0.4197449173246111, 0.4361900772367205, 0.41609052249363493, 0.4544381925037929, 0.4163856676646641, 0.41344350576400757, 0.3652994121823992, 0.42640112127576557, 0.4117525134767805, 0.3984456743512835, 0.3762718609401158, 0.38033510957445416], "val_accuracy": [0.3199999928474426, 0.4816666543483734, 0.5600000023841858, 0.6976666450500488, 0.7160000205039978, 0.7360000014305115, 0.7436666488647461, 0.7556666731834412, 0.7296666502952576, 0.7519999742507935, 0.7873333096504211, 0.7896666526794434, 0.7879999876022339, 0.8153333067893982, 0.8169999718666077, 0.7956666946411133, 0.8076666593551636, 0.7943333387374878, 0.8143333196640015, 0.8253333568572998, 0.8426666855812073, 0.8083333373069763, 0.8256666660308838, 0.8106666803359985, 0.8326666951179504, 0.8289999961853027]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 3, 2, 2, 4, 0, 4, 5, 3, 0, 0, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 2, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [44, 80, 44, 92]], "fitness": -0.8082857131958008, "mapping_values": [1, 22, 22, 13, 9, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.pow(grad, grad)))), tf.math.add(alpha, alpha))), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9779912241382873, 1.3575566274583488, 0.955744705896462, 0.8896318079300718, 0.8289353494882867, 0.7549868151260137, 0.7178182482420257, 0.6702014506060009, 0.6783954388650338, 0.652185701006014, 0.6627168178227694, 0.6131708196771143, 0.6090673744922552, 0.6012029679475632, 0.588041782489369, 0.5614253446300347, 0.5548082905564531, 0.5488031356641094, 0.5274732704049859, 0.5251331075921649], "accuracy": [0.3275656998157501, 0.5340113639831543, 0.6513010263442993, 0.6679434776306152, 0.6885483860969543, 0.7190595865249634, 0.7275128960609436, 0.7469290494918823, 0.7372870445251465, 0.7532690763473511, 0.7474573850631714, 0.7691190242767334, 0.7685906887054443, 0.7728173136711121, 0.7714964747428894, 0.7902522683143616, 0.7928939461708069, 0.7922335267066956, 0.8010830879211426, 0.8029322624206543], "val_loss": [1.4528070177350725, 0.7154191732406616, 0.689789993422372, 0.635525005204337, 0.6137313161577497, 0.5804508924484253, 0.522572500365121, 0.5367884806224278, 0.579483049256461, 0.5352059432438442, 0.4807476486478533, 0.47719996316092356, 0.4819065843309675, 0.43784969193594797, 0.4312587891306196, 0.4275749496051243, 0.4190856558935983, 0.4307086893490383, 0.45876775469098774, 0.43835811955588205], "val_accuracy": [0.3423333466053009, 0.7016666531562805, 0.6693333387374878, 0.7020000219345093, 0.7143333554267883, 0.7353333234786987, 0.7730000019073486, 0.762666642665863, 0.7310000061988831, 0.7573333382606506, 0.7929999828338623, 0.7953333258628845, 0.7870000004768372, 0.8136666417121887, 0.8193333148956299, 0.8046666383743286, 0.8146666884422302, 0.8029999732971191, 0.796999990940094, 0.8096666932106018]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 6, 2, 2, 8, 0, 4, 5, 3, 0, 0, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [44, 80, 44, 92]], "fitness": -0.8002856969833374, "mapping_values": [1, 14, 14, 8, 6, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(grad))), alpha)), tf.math.add(alpha, grad))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9782234099184943, 1.3556184243248943, 1.0310087616748151, 0.887475419313743, 0.8274335303893572, 0.7572089719057492, 0.7302034539931391, 0.6862561423009208, 0.679458499765667, 0.6478283319175991, 0.6500540456798933, 0.6272786857114728, 0.6032854533466319, 0.6086510339858368, 0.5881214450379058, 0.5650985458854199, 0.5620107260110624, 0.5554056653509114, 0.5465108828065324, 0.5192119664346632, 0.5140929705336771, 0.5340382346009787, 0.5045541849717047, 0.5049672321069667, 0.4893385754553019], "accuracy": [0.3279619514942169, 0.5371813774108887, 0.6289790272712708, 0.6639809608459473, 0.6893408894538879, 0.7205125093460083, 0.7168141603469849, 0.7375511527061462, 0.7347774505615234, 0.7485140562057495, 0.7503632307052612, 0.7622507214546204, 0.7737419009208679, 0.7692511081695557, 0.7751948237419128, 0.7866860628128052, 0.7901201844215393, 0.7928939461708069, 0.7959318161010742, 0.8049134612083435, 0.8100647330284119, 0.7959318161010742, 0.8103289008140564, 0.8149517774581909, 0.8164047002792358], "val_loss": [1.456282717841012, 0.7104649884360177, 0.6798887593405587, 0.6507981504712786, 0.5713628019605365, 0.5508472578866142, 0.5422040224075317, 0.532821774482727, 0.5366851772580828, 0.5015582868031093, 0.5060194219861712, 0.4953641210283552, 0.463451623916626, 0.44323389870779856, 0.44179855074201313, 0.44805960995810373, 0.4225064771515982, 0.4588463817323957, 0.4399594579424177, 0.40853095054626465, 0.5229341472898211, 0.4137605343546186, 0.4104765909058707, 0.4105730482510158, 0.4092791335923331], "val_accuracy": [0.3409999907016754, 0.7076666951179504, 0.6916666626930237, 0.7056666612625122, 0.7409999966621399, 0.7453333139419556, 0.7596666812896729, 0.7473333477973938, 0.7093333601951599, 0.7766666412353516, 0.7796666622161865, 0.7699999809265137, 0.7860000133514404, 0.809333324432373, 0.8046666383743286, 0.7950000166893005, 0.8136666417121887, 0.793666660785675, 0.8003333210945129, 0.8273333311080933, 0.7713333368301392, 0.8233333230018616, 0.8259999752044678, 0.8146666884422302, 0.8173333406448364]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 3, 1, 2, 6, 0, 4, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 0, 2, 1, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 76, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 80, 44, 92]], "fitness": -0.7985714077949524, "mapping_values": [1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.multiply(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(alpha, grad), tf.math.add(alpha, grad))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.021065499867273, 1.9037548593636502, 1.3179427235905268, 1.0443053290104238, 0.8596287621892501, 0.7976985383090436, 0.7113087222072599, 0.7274832330706129, 0.6631254559778156, 0.5938313221493732, 0.641179343823035, 0.5767646144409819, 0.550002119095885, 0.5550727379666879, 0.5573505116900936, 0.5121094512311207, 0.5257869849918604, 0.4922307290263762], "accuracy": [0.32320696115493774, 0.38409721851348877, 0.5453705191612244, 0.6082419753074646, 0.6789063811302185, 0.6919825673103333, 0.7308149337768555, 0.7164179086685181, 0.7489103078842163, 0.7753269076347351, 0.7625148296356201, 0.7761194109916687, 0.7877426743507385, 0.789988100528717, 0.7857614755630493, 0.8001585006713867, 0.8035926818847656, 0.8149517774581909], "val_loss": [1.7047145366668701, 1.1519529819488525, 0.8983156340462821, 0.7947346993855068, 0.6121555396488735, 0.5834869997841972, 0.5469790697097778, 0.5179169007710048, 0.4974084070750645, 0.4694700070789882, 0.4391899449484689, 0.5216207163674491, 0.4320059929575239, 0.49832829407283236, 0.4298431021826608, 0.4248859201158796, 0.413808354309627, 0.4732802425112043], "val_accuracy": [0.398333340883255, 0.6133333444595337, 0.6026666760444641, 0.6796666383743286, 0.7076666951179504, 0.7296666502952576, 0.7310000061988831, 0.7513333559036255, 0.762666642665863, 0.7836666703224182, 0.7996666431427002, 0.7459999918937683, 0.8019999861717224, 0.7743333578109741, 0.7933333516120911, 0.7986666560173035, 0.8016666769981384, 0.781333327293396]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 9, 2, 0, 2, 6, 0, 4, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 1, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [75, 89, 76, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 2, 3, 2, 3, 0, 1, 0, 3], [24, 94, 44, 92]], "fitness": -0.7574285864830017, "mapping_values": [1, 16, 16, 10, 6, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.297304524406702, 2.285289450690668, 2.2713483552324334, 2.260600224902932, 2.2471373384465885, 2.231638390705208, 2.2157351441938236, 2.1949304235672766, 2.1742249615928357, 2.14736282505836, 2.1187501672299596, 2.084962609106791, 2.045634653936398, 2.000817758878618, 1.9534108020594532, 1.8992096897381454, 1.8391279705511407, 1.7757819155817884, 1.7239915934599086, 1.6573828082625672, 1.6044752527111479, 1.5407223065043358, 1.4939183030602734, 1.446667533146943, 1.3860411305138463, 1.3560136977188055, 1.3123689912423921, 1.2894613836986546, 1.256258640070759, 1.2264974368262553, 1.1993678344506882, 1.1770564367459073, 1.1542014485384258, 1.123074254607323, 1.1355962486251974, 1.0902943225065007, 1.0785806082684082, 1.059154697460285, 1.0420611980427148, 1.0275521697133303, 1.0321165281846743, 1.0123167392080485, 0.9867953692429164, 0.9940445759765318, 0.971573616125958, 0.9681804014030087, 0.9560672039872918, 0.9581094230989565, 0.9369957336046125, 0.9336757206047657, 0.9106677140479138, 0.9172167304704973, 0.9068510166217213, 0.8909425741456928, 0.8916743382045921, 0.8967066260140569, 0.8834780680111386, 0.8690305696093034, 0.878220627100366, 0.8688108700298913, 0.8678839288572232, 0.8487047800030832, 0.8636000223242296, 0.8457101225112927, 0.8480674366688984, 0.8438829250890565, 0.8333420624916879, 0.8275822266107694, 0.8170886390150309, 0.8251481777672849, 0.8180199435216686, 0.8187337185429261, 0.8191271840919829, 0.8136267867054937, 0.8088480033705719, 0.7933563775374448, 0.7960874446394768, 0.7878798068301899, 0.7942689030933469, 0.7824825340840857, 0.7867640102496946, 0.7803548005640925, 0.7758298438963023, 0.7872995697763917, 0.7708210075740817, 0.7752951114657313, 0.7727320611657972, 0.771091724525369, 0.7631651095946578, 0.7586191606449177, 0.7559960923962007, 0.747612707571756, 0.7560087148744228, 0.758420607645624], "accuracy": [0.10302469879388809, 0.13697001338005066, 0.1710474193096161, 0.20103025436401367, 0.2300885021686554, 0.2619204819202423, 0.2785629332065582, 0.3210936486721039, 0.3291507065296173, 0.35622772574424744, 0.36547350883483887, 0.3831726312637329, 0.39690926671028137, 0.4150046110153198, 0.42491084337234497, 0.4411570429801941, 0.4633469879627228, 0.468630313873291, 0.47430986166000366, 0.488971084356308, 0.5036323070526123, 0.5101043581962585, 0.520671010017395, 0.5297846794128418, 0.5495971441268921, 0.5501254796981812, 0.5591071248054504, 0.566239595413208, 0.5720512270927429, 0.5931845307350159, 0.5947695374488831, 0.5933166146278381, 0.6032228469848633, 0.6122044920921326, 0.6007132530212402, 0.6207898855209351, 0.6280544400215149, 0.6287148594856262, 0.6407343745231628, 0.64231938123703, 0.6351869106292725, 0.6465460062026978, 0.6456214785575867, 0.6559239029884338, 0.6552634835243225, 0.661471426486969, 0.6655659675598145, 0.6619997620582581, 0.6692643165588379, 0.6679434776306152, 0.6826046705245972, 0.6775855422019958, 0.67666095495224, 0.6869634389877319, 0.6775855422019958, 0.6783780455589294, 0.6881521344184875, 0.6936996579170227, 0.6952846646308899, 0.6917183995246887, 0.6900013089179993, 0.6983225345611572, 0.6915863156318665, 0.6980583667755127, 0.6988508701324463, 0.6988508701324463, 0.7057191729545593, 0.7066437602043152, 0.7053229212760925, 0.7012283802032471, 0.7144366502761841, 0.7082287669181824, 0.7099458575248718, 0.7054550051689148, 0.7148329019546509, 0.7148329019546509, 0.7119271159172058, 0.7149649858474731, 0.7164179086685181, 0.7144366502761841, 0.713379979133606, 0.7189275026321411, 0.7213049530982971, 0.7190595865249634, 0.7276449799537659, 0.7131158113479614, 0.719852089881897, 0.7220974564552307, 0.7238145470619202, 0.7322678565979004, 0.7297582626342773, 0.7238145470619202, 0.7255316376686096, 0.7228899598121643], "val_loss": [1.9596994263785226, 1.9485747473580497, 1.9371818814958846, 1.9250420842851912, 1.9116549491882324, 1.8968054226466589, 1.880021367754255, 1.8603147779192244, 1.8377154895237513, 1.8113890375409807, 1.7813722746712821, 1.746734891619001, 1.7075276374816895, 1.6631407397133964, 1.6139655113220215, 1.560335942677089, 1.5021157605307442, 1.441509178706578, 1.3805288246699743, 1.3194827692849296, 1.2603423595428467, 1.2037180491856165, 1.1519970212663924, 1.1044660636356898, 1.060178347996303, 1.021090132849557, 0.9857911723000663, 0.9544353825705392, 0.926128455570766, 0.9006516252245221, 0.8769219262259347, 0.8564486503601074, 0.8372395379202706, 0.8197559799466815, 0.8054289136614118, 0.7909755536488124, 0.7780851466315133, 0.7652127913066319, 0.7539316756384713, 0.7433942556381226, 0.7337837559836251, 0.7256800958088466, 0.7159345660890851, 0.7083079814910889, 0.7001254728862217, 0.6936640569141933, 0.6869304520743233, 0.6815146037510463, 0.6760001863752093, 0.6701242242540631, 0.6644839559282575, 0.6594796861921038, 0.6541631051472255, 0.6490675551550729, 0.6450567075184414, 0.6408591270446777, 0.637311577796936, 0.6333713190896171, 0.6301031623567853, 0.6261692728315081, 0.6219102995736259, 0.6178326606750488, 0.6151993104389736, 0.6128822565078735, 0.6094757318496704, 0.6067439147404262, 0.6039637327194214, 0.6006787845066616, 0.5969936847686768, 0.5954682997294835, 0.5917708192552839, 0.5898243870053973, 0.5880147729601178, 0.5858475651059832, 0.5831468275615147, 0.5812046527862549, 0.5798733915601458, 0.5769776957375663, 0.574428881917681, 0.5731020144053868, 0.5705722570419312, 0.5676416158676147, 0.5659072739737374, 0.5646396364484515, 0.5622795820236206, 0.5611951180866787, 0.559505649975368, 0.5585384709494454, 0.5548731940133231, 0.5532514538083758, 0.5519635166440692, 0.5505235876355853, 0.5488718577793666, 0.5470425401415143], "val_accuracy": [0.13433332741260529, 0.2293333262205124, 0.30033332109451294, 0.3449999988079071, 0.3696666657924652, 0.39399999380111694, 0.414000004529953, 0.42766666412353516, 0.4440000057220459, 0.4566666781902313, 0.46966665983200073, 0.49133333563804626, 0.5076666474342346, 0.5180000066757202, 0.5329999923706055, 0.5460000038146973, 0.5546666383743286, 0.5680000185966492, 0.5793333053588867, 0.5996666550636292, 0.6036666631698608, 0.6223333477973938, 0.6383333206176758, 0.6496666669845581, 0.6623333096504211, 0.6660000085830688, 0.6703333258628845, 0.6733333468437195, 0.6746666431427002, 0.6766666769981384, 0.6803333163261414, 0.6813333630561829, 0.6853333115577698, 0.6893333196640015, 0.6903333067893982, 0.6990000009536743, 0.6993333101272583, 0.6990000009536743, 0.699999988079071, 0.7016666531562805, 0.7036666870117188, 0.7036666870117188, 0.7076666951179504, 0.7113333344459534, 0.7123333215713501, 0.7143333554267883, 0.7160000205039978, 0.718999981880188, 0.7200000286102295, 0.7226666808128357, 0.7253333330154419, 0.7246666550636292, 0.7269999980926514, 0.7289999723434448, 0.7319999933242798, 0.7300000190734863, 0.7329999804496765, 0.7336666584014893, 0.7356666922569275, 0.7323333621025085, 0.7379999756813049, 0.7383333444595337, 0.7379999756813049, 0.7403333187103271, 0.7426666617393494, 0.7423333525657654, 0.7443333268165588, 0.7440000176429749, 0.7440000176429749, 0.7450000047683716, 0.7493333220481873, 0.7480000257492065, 0.75, 0.7493333220481873, 0.7506666779518127, 0.749666690826416, 0.7483333349227905, 0.75, 0.7513333559036255, 0.750333309173584, 0.7519999742507935, 0.753000020980835, 0.7549999952316284, 0.7549999952316284, 0.7566666603088379, 0.7546666860580444, 0.7573333382606506, 0.7543333172798157, 0.7630000114440918, 0.7609999775886536, 0.7603333592414856, 0.7576666474342346, 0.7586666941642761, 0.762666642665863]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 2, 2, 6, 2, 0, 4, 3, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [75, 89, 76, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [3, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [24, 94, 44, 92]], "fitness": -0.7571428418159485, "mapping_values": [1, 22, 22, 12, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))))), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.297304569407382, 2.2852894686720453, 2.2713483552324334, 2.260600224902932, 2.247137482392081, 2.2316385661417293, 2.215735211647607, 2.1949302345266304, 2.174224133882635, 2.147362334617078, 2.118749573561084, 2.0849609536863887, 2.0456308888060115, 2.0008133730128175, 1.9534067377170568, 1.899205339929573, 1.8391223852707803, 1.7757698985107224, 1.7239757122664072, 1.6573646750826136, 1.6044535363559724, 1.54070004957416, 1.4938899454675598, 1.4466446270764448, 1.3860043731458183, 1.3559899768336825, 1.312337881916345, 1.2894401590601485, 1.256244325351249, 1.226463980568304, 1.1993564548210272, 1.1770406078747502, 1.1541820025919545, 1.1230793174357698, 1.1355878537467379, 1.090273773145871, 1.0785664181274084, 1.0591430672565079, 1.0420392426391398, 1.0275320360578992, 1.0320855336906636, 1.0122930217082111, 0.9867646985475366, 0.9940299346163257, 0.9715469139379014, 0.9681834695581999, 0.9560847689431216, 0.9580785809113066, 0.9370242532501604, 0.9336540947154434, 0.9106610331474246, 0.917268077498335, 0.906847852426765, 0.8909554655179371, 0.8916450189152225, 0.8966610137544934, 0.8834871626360038, 0.8690365479528125, 0.8781859977071186, 0.8688082482993973, 0.8678330114378732, 0.8487008621569527, 0.8635747758640888, 0.8457025746234168, 0.8480964221297442, 0.8439287317269955, 0.8333382235069663, 0.827591596900228, 0.8170928197089061, 0.825139470938694, 0.8180016448169951, 0.818714713636186, 0.8191605359414281, 0.8136356942815205, 0.808866971511536, 0.7933597489669889, 0.7960431278499834, 0.7878890272538424, 0.7942634504453271, 0.7825045587285603, 0.786747113604351, 0.7803673643115457, 0.7758396214119998, 0.7873000221528933, 0.7708205566146764, 0.7752742286151064, 0.7727567306709264, 0.7710702247733626, 0.763128683764181, 0.7585981149069464, 0.756059138805733, 0.7475880022849453, 0.7559799304365592, 0.7584583786075236], "accuracy": [0.10302469879388809, 0.13697001338005066, 0.1710474193096161, 0.20103025436401367, 0.2300885021686554, 0.2619204819202423, 0.2786950170993805, 0.3210936486721039, 0.32941487431526184, 0.3563597798347473, 0.36547350883483887, 0.3831726312637329, 0.3967771828174591, 0.4150046110153198, 0.42491084337234497, 0.4411570429801941, 0.4633469879627228, 0.4683661460876465, 0.4745740294456482, 0.488971084356308, 0.5036323070526123, 0.5102364420890808, 0.520671010017395, 0.5297846794128418, 0.5497292280197144, 0.5501254796981812, 0.5588429570198059, 0.5661075115203857, 0.5720512270927429, 0.5931845307350159, 0.5945053696632385, 0.5934486985206604, 0.6034870147705078, 0.6123365759849548, 0.6003170013427734, 0.6207898855209351, 0.6280544400215149, 0.628582775592804, 0.6412627100944519, 0.6420552134513855, 0.6349227428436279, 0.646149754524231, 0.6453573107719421, 0.6559239029884338, 0.655527651309967, 0.661471426486969, 0.665830135345459, 0.6619997620582581, 0.669792652130127, 0.6676793098449707, 0.6827367544174194, 0.6774534583091736, 0.6763967871665955, 0.6870955228805542, 0.6783780455589294, 0.678642213344574, 0.6882842183113098, 0.694360077381134, 0.6954167485237122, 0.6919825673103333, 0.6900013089179993, 0.6984546184539795, 0.6914542317390442, 0.6979262828826904, 0.6988508701324463, 0.698718786239624, 0.7058512568473816, 0.7067758440971375, 0.7047945857048035, 0.7005679607391357, 0.7143045663833618, 0.7079645991325378, 0.7104741930961609, 0.7053229212760925, 0.7148329019546509, 0.7145687341690063, 0.7123233675956726, 0.7149649858474731, 0.715889573097229, 0.7144366502761841, 0.7132478952407837, 0.7186633348464966, 0.7213049530982971, 0.719852089881897, 0.7281733155250549, 0.7125874757766724, 0.719852089881897, 0.7220974564552307, 0.724210798740387, 0.7318716049194336, 0.7300224304199219, 0.7240787148475647, 0.7260599732398987, 0.7224937081336975], "val_loss": [1.9596994263785226, 1.9485746792384557, 1.9371818133762904, 1.9250421524047852, 1.9116549491882324, 1.8968052864074707, 1.8800209590366908, 1.8603147779192244, 1.8377149445669991, 1.8113880838666643, 1.781372342790876, 1.7467333929879325, 1.7075245380401611, 1.6631358691624232, 1.6139613900865828, 1.5603296756744385, 1.5021058831896101, 1.4414886747087752, 1.3805028711046492, 1.3194565432412284, 1.2603192670004708, 1.2036922318594796, 1.151967900139945, 1.1044397354125977, 1.0601512363978796, 1.0210686411176408, 0.9857724394117083, 0.954418250492641, 0.9261068957192558, 0.9006259441375732, 0.8768939631325858, 0.8564304113388062, 0.8372250965663365, 0.8197363104139056, 0.8054219824927193, 0.7909599202019828, 0.7780779429844448, 0.7652133703231812, 0.7539278439113072, 0.743376340184893, 0.7337647506168911, 0.7256766727992466, 0.7159194435392108, 0.7083124603543963, 0.7001350266592843, 0.6936599356787545, 0.6869160277502877, 0.6815124920436314, 0.6759752716336932, 0.6701023408344814, 0.6644579683031354, 0.6594684294291905, 0.654165540422712, 0.6490464721407209, 0.6450457913534982, 0.6408750499997821, 0.6373346703393119, 0.6334317071097237, 0.6301418883459908, 0.6261993816920689, 0.6219459601811, 0.6178625992366246, 0.6152036530630929, 0.6128908395767212, 0.6094454526901245, 0.6067008290972028, 0.6039773566382272, 0.6006683962685722, 0.5969669137682233, 0.5954339844839913, 0.591746279171535, 0.5897961684635707, 0.587989057813372, 0.5858231101717267, 0.583132437297276, 0.5811984709330967, 0.5798731531415667, 0.5769845417567662, 0.5744354895183018, 0.5730922733034406, 0.5705853019441877, 0.5676248414175851, 0.565852233341762, 0.5646217039653233, 0.5622444323131016, 0.5611743416104998, 0.5594582387379238, 0.5584905317851475, 0.5548842804772514, 0.5532424109322684, 0.5519513402666364, 0.5505271298544747, 0.5488936730793544, 0.5470600468771798], "val_accuracy": [0.13433332741260529, 0.2293333262205124, 0.30033332109451294, 0.3449999988079071, 0.3696666657924652, 0.39399999380111694, 0.414000004529953, 0.42766666412353516, 0.4440000057220459, 0.4566666781902313, 0.46966665983200073, 0.49133333563804626, 0.5076666474342346, 0.5180000066757202, 0.5329999923706055, 0.5463333129882812, 0.5546666383743286, 0.5680000185966492, 0.5793333053588867, 0.5996666550636292, 0.6036666631698608, 0.621666669845581, 0.6383333206176758, 0.6493333578109741, 0.6623333096504211, 0.6660000085830688, 0.6703333258628845, 0.6733333468437195, 0.6746666431427002, 0.6769999861717224, 0.6806666851043701, 0.6813333630561829, 0.6850000023841858, 0.6896666884422302, 0.6899999976158142, 0.6990000009536743, 0.6986666917800903, 0.6986666917800903, 0.6996666789054871, 0.7016666531562805, 0.70333331823349, 0.7036666870117188, 0.7076666951179504, 0.7116666436195374, 0.7123333215713501, 0.7143333554267883, 0.7160000205039978, 0.7193333506584167, 0.7200000286102295, 0.7226666808128357, 0.7253333330154419, 0.7253333330154419, 0.7266666889190674, 0.7293333411216736, 0.7323333621025085, 0.7300000190734863, 0.7329999804496765, 0.7336666584014893, 0.7353333234786987, 0.7319999933242798, 0.7379999756813049, 0.7386666536331177, 0.7379999756813049, 0.7406666874885559, 0.7429999709129333, 0.7426666617393494, 0.7443333268165588, 0.7440000176429749, 0.7440000176429749, 0.7453333139419556, 0.749666690826416, 0.7483333349227905, 0.7493333220481873, 0.749666690826416, 0.750333309173584, 0.7493333220481873, 0.7486666440963745, 0.75, 0.7516666650772095, 0.7506666779518127, 0.7519999742507935, 0.753000020980835, 0.7549999952316284, 0.7546666860580444, 0.7566666603088379, 0.7546666860580444, 0.7570000290870667, 0.7546666860580444, 0.762666642665863, 0.7609999775886536, 0.7603333592414856, 0.7576666474342346, 0.7586666941642761, 0.762333333492279]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 2, 2, 6, 2, 0, 4, 5, 3, 0, 6, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 76, 80, 1, 17, 33, 34, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [0, 33, 44, 92]], "fitness": -0.10485713928937912, "mapping_values": [1, 41, 41, 27, 14, 9, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022831744679118, 2.302250608366872, 2.3001201843714685, 2.301923687809793, 2.3020389751436343, 2.300939583554795, 2.301818497916884, 2.301805334446405, 2.302178951034677, 2.3009847850217606, 2.300486424658607, 2.30201248117426, 2.3008873816321254, 2.300561988232489, 2.3013754409963365, 2.300212405251002, 2.300456648946139, 2.2999524302124237, 2.30167072673657, 2.3001612254641453, 2.302391010551972, 2.2998115389086644, 2.3007275319102574, 2.300810194443781, 2.2994958797954155, 2.2997674203551974, 2.299106010529721, 2.3000652694966672, 2.299836962151568, 2.300548878202286, 2.2989660740654467, 2.299652764668412, 2.2994528050120984, 2.2989053241864266, 2.3015856017305585, 2.2969443992994654, 2.2983115302919632, 2.2984113518462093, 2.2986070338556432, 2.298309000586128, 2.2999396586163074, 2.298475489183707, 2.2964456578633725, 2.2983001592278622, 2.2967817547487908, 2.299172834272414, 2.297044748139498, 2.298360699691541, 2.2960568062932563, 2.2974943763874998, 2.2958999674286527, 2.2968742363425516, 2.297806958890216, 2.29719355600448, 2.296668178637455, 2.2963693196416735, 2.2970123402493865, 2.295062631805575, 2.296181645958321, 2.296407466771785, 2.2962019294244485, 2.2962130782563595, 2.2968257361588273, 2.296547005598839, 2.2949277631925664, 2.2970177100681277, 2.2956059394086186, 2.2963779956405475, 2.2952922545624386, 2.2965699178415786, 2.295186632581123, 2.2954613601904756, 2.294630095848806, 2.294704340357964, 2.294780211378759, 2.294273094809082, 2.2944015021872732, 2.2947004894145238, 2.2962932142016594, 2.294239020980565, 2.29528148781118, 2.294237418370618, 2.294167273111662, 2.2949829091800282, 2.2943364742519896, 2.2945293218483935, 2.2929174259212495, 2.2938798385887664, 2.2939508662578403, 2.293485427371987, 2.293449843548639, 2.2922297322030523, 2.293011801448465, 2.292528890080188, 2.293639506142389, 2.2937270410938537, 2.2926704911917364, 2.293368816816607, 2.293780179622702, 2.290731904308605], "accuracy": [0.08955223858356476, 0.08717474341392517, 0.09272222965955734, 0.09272222965955734, 0.09008057415485382, 0.09047681838274002, 0.08809932321310043, 0.09681680053472519, 0.09259014576673508, 0.0956280529499054, 0.09430722147226334, 0.09391097724437714, 0.09628847241401672, 0.09734513610601425, 0.09153348207473755, 0.09972262382507324, 0.09034473448991776, 0.09774138033390045, 0.09509972482919693, 0.09642054885625839, 0.09325055778026581, 0.09232597798109055, 0.09325055778026581, 0.09602430462837219, 0.09179764986038208, 0.09602430462837219, 0.09840179979801178, 0.09496764093637466, 0.09840179979801178, 0.09166556596755981, 0.10276053100824356, 0.09853387624025345, 0.10011887550354004, 0.10011887550354004, 0.09509972482919693, 0.10566636174917221, 0.09787346422672272, 0.10077928751707077, 0.10289261490106583, 0.10408136248588562, 0.09338264167308807, 0.10038304328918457, 0.1018359512090683, 0.10474177449941635, 0.1010434553027153, 0.10276053100824356, 0.10236428678035736, 0.09840179979801178, 0.10487385839223862, 0.10447761416435242, 0.10606260597705841, 0.10249637067317963, 0.09642054885625839, 0.10011887550354004, 0.10645885765552521, 0.10474177449941635, 0.1022322028875351, 0.10936468094587326, 0.10117553919553757, 0.10249637067317963, 0.1014397069811821, 0.1022322028875351, 0.10381719470024109, 0.1014397069811821, 0.109232597053051, 0.10579843819141388, 0.11174217611551285, 0.10777968913316727, 0.11293092370033264, 0.10645885765552521, 0.10593052208423615, 0.11279883980751038, 0.109232597053051, 0.10685510188341141, 0.108440101146698, 0.11319508403539658, 0.11174217611551285, 0.11081759631633759, 0.10896842926740646, 0.11121384054422379, 0.10698718577623367, 0.11174217611551285, 0.11055342853069305, 0.10553427785634995, 0.10751552134752274, 0.11332716792821884, 0.10857218503952026, 0.11359133571386337, 0.11028926074504852, 0.11742173880338669, 0.11213842034339905, 0.11411966383457184, 0.11227050423622131, 0.10896842926740646, 0.11002509295940399, 0.11306300014257431, 0.11517632752656937, 0.10962884873151779, 0.10949676483869553, 0.11966715008020401], "val_loss": [1.9708914756774902, 1.970801625932966, 1.97071259362357, 1.9706230163574219, 1.9705334390912737, 1.97044495173863, 1.9703546932765417, 1.9702631405421667, 1.970172677721296, 1.9700824873788017, 1.9699927057538713, 1.969902447291783, 1.9698129381452287, 1.9697223390851701, 1.9696320806230818, 1.9695416178022112, 1.9694523811340332, 1.9693621226719447, 1.969273294721331, 1.969184126172747, 1.9690943445478166, 1.9690042904445104, 1.9689150537763322, 1.9688260895865304, 1.968736035483224, 1.9686461857386999, 1.9685568809509277, 1.968468529837472, 1.968379088810512, 1.9682893753051758, 1.9682005473545618, 1.9681109019688197, 1.9680209841047014, 1.9679319517953056, 1.9678426470075334, 1.9677530697413854, 1.9676643780299596, 1.9675752094813757, 1.967484951019287, 1.967395509992327, 1.9673068182809013, 1.9672175816127233, 1.967128140585763, 1.9670392445155553, 1.9669495991298132, 1.966860294342041, 1.9667707170758928, 1.966681821005685, 1.966592584337507, 1.966503415788923, 1.9664146559579032, 1.966327326638358, 1.966238566807338, 1.9661496707371302, 1.9660613196236747, 1.9659722191946847, 1.9658829144069128, 1.9657932690211706, 1.9657043729509627, 1.9656150000435966, 1.9655265808105469, 1.9654374803815569, 1.965348720550537, 1.9652602331978934, 1.9651718820844377, 1.9650825772966658, 1.9649940899440221, 1.9649056707109724, 1.9648170471191406, 1.9647280829293388, 1.964639459337507, 1.9645506995064872, 1.9644630977085658, 1.9643748828342982, 1.964285441807338, 1.96419586454119, 1.964106627873012, 1.9640184811183385, 1.9639288357325964, 1.9638406208583288, 1.9637517247881209, 1.963662760598319, 1.9635752269199915, 1.963487148284912, 1.9633985246930803, 1.9633112634931291, 1.9632220949445451, 1.9631336075919015, 1.9630457333156042, 1.9629574503217424, 1.9628687586103166, 1.962780475616455, 1.9626919201442175, 1.9626050676618303, 1.9625161715916224, 1.9624276842389787, 1.962338924407959, 1.9622507095336914, 1.9621615409851074, 1.9620727130344935], "val_accuracy": [0.036666665226221085, 0.036666665226221085, 0.036666665226221085, 0.03700000047683716, 0.03766666725277901, 0.038333334028720856, 0.039000000804662704, 0.03966666758060455, 0.03966666758060455, 0.03966666758060455, 0.03999999910593033, 0.04066666588187218, 0.04066666588187218, 0.04066666588187218, 0.0416666679084301, 0.0416666679084301, 0.041999999433755875, 0.0430000014603138, 0.04466666653752327, 0.04500000178813934, 0.04500000178813934, 0.04633333161473274, 0.047333333641290665, 0.04866666719317436, 0.049666665494441986, 0.05000000074505806, 0.05133333429694176, 0.05133333429694176, 0.05233333259820938, 0.05233333259820938, 0.05366666615009308, 0.05433333292603493, 0.054666668176651, 0.056333333253860474, 0.05666666850447655, 0.0573333315551281, 0.058666665107011795, 0.05900000035762787, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.06133333221077919, 0.06233333423733711, 0.06266666948795319, 0.06333333253860474, 0.06433333456516266, 0.06433333456516266, 0.06499999761581421, 0.06599999964237213, 0.06666667014360428, 0.06733333319425583, 0.0676666647195816, 0.06833333522081375, 0.06966666877269745, 0.07066666334867477, 0.07066666334867477, 0.07133333384990692, 0.0716666653752327, 0.0729999989271164, 0.0729999989271164, 0.07400000095367432, 0.07466666400432587, 0.07466666400432587, 0.07566666603088379, 0.07633333653211594, 0.07699999958276749, 0.07833333313465118, 0.0793333351612091, 0.0806666687130928, 0.08133333176374435, 0.08233333379030228, 0.08299999684095383, 0.08366666734218597, 0.0846666693687439, 0.08533333241939545, 0.08733333647251129, 0.08799999952316284, 0.08799999952316284, 0.08866667002439499, 0.09033333510160446, 0.09166666865348816, 0.09233333170413971, 0.09266666322946548, 0.09366666525602341, 0.0949999988079071, 0.09533333033323288, 0.09666666388511658, 0.0976666659116745, 0.09833333641290665, 0.0989999994635582, 0.09933333098888397, 0.10066666454076767, 0.10133333504199982, 0.10166666656732559, 0.10400000214576721, 0.10433333367109299, 0.10700000077486038, 0.10733333230018616, 0.10866666585206985, 0.10899999737739563]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 3, 2, 2, 4, 0, 4, 6, 3, 0, 0, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 2, 1, 2, 0, 0, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 76, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 5, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 0, 3, 2, 3, 0, 1, 0, 3], [44, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 15, 11, 6, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.pow(grad, grad)))), tf.math.add(alpha, alpha))), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))))))), tf.math.negative(tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 3, 2, 2, 4, 0, 4, 5, 5, 0, 0, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 2, 1, 2, 0, 2, 0, 0, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [8, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [43, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 13, 7, 6, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.pow(grad, grad)))), tf.math.add(alpha, alpha))), grad)), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(sigma, beta), sigma)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 3, 2, 4, 4, 0, 4, 5, 6, 5, 0, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 1, 1, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 65, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 5, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 2, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 3, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 19, 11, 8, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, alpha))), tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.negative(beta), beta), sigma))), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), alpha)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11742173880338669, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 3, 2, 4, 4, 0, 4, 6, 3, 0, 0, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [8, 2, 1, 3], [1, 2], [93], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [6, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [24, 94, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 11, 11, 5, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.negative(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07053229212760925, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 2, 9, 2, 2, 0, 9, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 0, 2, 2, 2, 1, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 76, 80, 0, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [4, 2], [93], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 6, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 3, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07079645991325378, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 4, 3, 2, 2, 6, 4, 4, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 1, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 4, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 3, 2, 2, 4, 0, 4, 9, 3, 0, 0, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [1, 2, 2, 1, 2, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 5, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 0, 3, 2, 3, 0, 1, 0, 3], [44, 80, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 16, 9, 4, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 4, 2, 2, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, grad))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.square(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [18548801.24447065, 360286750.398098, 1661613718.1645753, 4699268089.575485, 9906864707.558844, 18118603369.023907], "accuracy": [0.09919429570436478, 0.09589222073554993, 0.10474177449941635, 0.09681680053472519, 0.10381719470024109, 0.10368511080741882], "val_loss": [71504034.28571428, 571333595.4285715, 1927469202.2857144, 4567903524.571428, 8920602916.571428, 15413555200.0], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 2, 2, 6, 0, 0, 4, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 99, 76, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 6, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 13, 13, 6, 7, 2, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023232622011824, 2.3023881557327552, 2.300352717182813, 2.302254147013779, 2.302466312781805, 2.301461221519604], "accuracy": [0.08928807079792023, 0.0866464152932167, 0.09206181764602661, 0.09219389408826828, 0.08902391046285629, 0.08955223858356476], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 3, 3, 2, 5, 6, 4, 4, 3, 0, 0, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 0, 2, 2, 2, 2, 1, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 33, 92, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [5, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 2, 3, 2, 3, 0, 1, 0, 3], [44, 80, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 10, 10, 5, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 4, 2, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(beta, beta))", "other_info": {"loss": [2.3023229068564133, 2.302386977149511, 2.3003511022913647, 2.302251875282452, 2.3024635957988213, 2.3014581804939342], "accuracy": [0.08928807079792023, 0.0866464152932167, 0.09192973375320435, 0.09219389408826828, 0.08902391046285629, 0.08955223858356476], "val_loss": [1.9709809167044503, 1.9709805761064803, 1.970980099269322, 1.9709795543125697, 1.9709792137145996, 1.9709789412362235], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [2, 3, 5, 3, 2, 2, 6, 0, 4, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 1, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 76, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [1, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(alpha, grad)))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023232622011824, 2.3023881557327552, 2.300352717182813, 2.302254147013779, 2.302466312781805, 2.301461221519604], "accuracy": [0.08928807079792023, 0.0866464152932167, 0.09206181764602661, 0.09219389408826828, 0.08902391046285629, 0.08955223858356476], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 5, 2, 2, 6, 2, 0, 4, 5, 3, 0, 2, 1, 9, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [71, 89, 76, 80, 1, 17, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [2, 2], [93], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 2, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 0, 3, 2, 3, 0, 1, 0, 3], [44, 80, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023232622011824, 2.3023881557327552, 2.300352717182813, 2.302254147013779, 2.302466312781805, 2.301461221519604], "accuracy": [0.08928807079792023, 0.0866464152932167, 0.09206181764602661, 0.09219389408826828, 0.08902391046285629, 0.08955223858356476], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]