[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 5, 2, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8222857117652893, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2719573945322717, 1.9816816041750158, 1.9370234835149431, 1.4228134943336432, 1.0673173475007276, 0.9065092711668477, 0.7899281289898378, 0.7570228162395672, 0.702949066447733, 0.7351390985198041, 0.6262046785213534, 0.63700477884997, 0.5900746996077438, 0.5984916930358644, 0.5596163715385348, 0.5663092997032874, 0.5438268821882833, 0.5261671399207336, 0.5049120737356579, 0.49572168558485646, 0.503618643473105, 0.47197868981145363, 0.4924292871350893, 0.47433432085623345, 0.48754402001173963, 0.4600399082299977, 0.4404306019325581, 0.47420778585195134, 0.43022957501268466, 0.4374560439599236, 0.4279539323580531, 0.42698718239964745, 0.4279459474494885, 0.4130791048836069, 0.3931064392951627, 0.3869645407431004, 0.40029542888349245, 0.3818047075160758, 0.4226748198802209, 0.3622271456321343, 0.39184995913754334, 0.39909557503574417, 0.3679684783607473, 0.3487595247830288, 0.38294235679609206, 0.3402052011708416, 0.3598811702800071, 0.34137332014687355, 0.36639506366778485, 0.3476558123652363, 0.32860202189638726], "accuracy": [0.2715625464916229, 0.31660282611846924, 0.2933562397956848, 0.4640074074268341, 0.5880332589149475, 0.6580372452735901, 0.6988508701324463, 0.7165499925613403, 0.7382115721702576, 0.722757875919342, 0.7668735980987549, 0.7600052952766418, 0.7773081660270691, 0.7815347909927368, 0.7897239327430725, 0.7927618622779846, 0.793950617313385, 0.7987055778503418, 0.8099326491355896, 0.8113855719566345, 0.8127063512802124, 0.8219521641731262, 0.81112140417099, 0.8202351331710815, 0.8193105459213257, 0.8264430165290833, 0.8362171649932861, 0.8249900937080383, 0.8391229510307312, 0.8417646288871765, 0.8436138033866882, 0.8378021121025085, 0.8426892161369324, 0.8482366800308228, 0.8540483713150024, 0.8561616539955139, 0.8491612672805786, 0.8605204224586487, 0.8389908671379089, 0.8605204224586487, 0.8514066934585571, 0.857218325138092, 0.8619733452796936, 0.8688416481018066, 0.8544445633888245, 0.8754457831382751, 0.8634262084960938, 0.8735966086387634, 0.8609166741371155, 0.8660678863525391, 0.8745211958885193], "val_loss": [1.7631874084472656, 1.936103139604841, 1.5403601101466589, 0.952617951801845, 0.8264101573399135, 0.6970666476658413, 0.5577361924307687, 0.5507575784410749, 0.6381528207233974, 0.5252753836768014, 0.5554365941456386, 0.4397664751325335, 0.5119374138968331, 0.4252968004771641, 0.44476681096213205, 0.4193504197256906, 0.41157855306352886, 0.41339304617473055, 0.39286366530827116, 0.4040583201817104, 0.3747748221669878, 0.3852623275348118, 0.3897855877876282, 0.3764474732535226, 0.422676111970629, 0.36639492000852314, 0.41509562730789185, 0.37147716113499235, 0.3864448666572571, 0.35584031684058054, 0.3509425861494882, 0.36655689988817486, 0.3570504103388105, 0.39407301800591604, 0.33971530199050903, 0.3405984469822475, 0.33169745547430857, 0.3849274771554129, 0.3361667905535017, 0.3704281193869455, 0.43707152775355745, 0.33706403630120413, 0.3279050077710833, 0.3383455106190273, 0.3266179987362453, 0.3184113928249904, 0.3393004706927708, 0.3374327761786325, 0.344890296459198, 0.32458382844924927, 0.331105147089277], "val_accuracy": [0.2683333456516266, 0.10400000214576721, 0.41466665267944336, 0.5576666593551636, 0.6573333144187927, 0.6669999957084656, 0.7540000081062317, 0.7630000114440918, 0.7233333587646484, 0.7453333139419556, 0.7400000095367432, 0.8026666641235352, 0.7713333368301392, 0.8073333501815796, 0.7986666560173035, 0.8169999718666077, 0.8236666917800903, 0.8196666836738586, 0.8253333568572998, 0.8233333230018616, 0.8296666741371155, 0.8276666402816772, 0.8230000138282776, 0.8396666646003723, 0.8066666722297668, 0.8446666598320007, 0.7986666560173035, 0.8320000171661377, 0.8309999704360962, 0.8453333377838135, 0.8503333330154419, 0.840666651725769, 0.843999981880188, 0.8259999752044678, 0.8553333282470703, 0.8576666712760925, 0.856333315372467, 0.8383333086967468, 0.859000027179718, 0.8399999737739563, 0.8256666660308838, 0.8583333492279053, 0.8696666955947876, 0.8560000061988831, 0.8560000061988831, 0.8723333477973938, 0.8579999804496765, 0.8603333234786987, 0.8556666374206543, 0.8636666536331177, 0.8560000061988831]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 2, 3, 0, 0, 3, 4, 5, 0, 3, 9, 5, 3, 7, 9, 6, 0, 6, 9, 7, 6, 9], [2, 2, 2, 2, 0, 0, 1, 2, 2, 0, 2, 2, 1, 2, 0], [59, 92, 1, 57, 57, 39, 47, 15], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8185714483261108, "mapping_values": [1, 45, 45, 30, 15, 8, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), grad))))))), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(grad, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.271979058659576, 1.9246344542097122, 1.543828058126281, 1.6454377308371768, 1.1577986075326736, 0.952198822949273, 0.8215171044308354, 0.7490688422573021, 0.6973766236808463, 0.7215898112141619, 0.6510483319371084, 0.6435570945167869, 0.6204131277576492, 0.6033006035152633, 0.5864716810620204, 0.5679357190724802, 0.5614535416066923, 0.5473622774026019, 0.5223747349654553, 0.5150980322651655, 0.5347580227003499, 0.4980921595324268, 0.4967676924479841, 0.476891163821706, 0.4917216527542308, 0.47269588169200055, 0.44698973223439076, 0.4467305896808411, 0.4471050863764494], "accuracy": [0.2716946303844452, 0.3280940353870392, 0.45066702365875244, 0.4647998809814453, 0.5669000148773193, 0.6349227428436279, 0.689869225025177, 0.7137762308120728, 0.7359662055969238, 0.7257958054542542, 0.7567031979560852, 0.755118191242218, 0.7700436115264893, 0.7720248103141785, 0.7799497842788696, 0.7889314293861389, 0.7923656105995178, 0.7967243194580078, 0.8020076751708984, 0.8117818236351013, 0.8014793395996094, 0.8142913579940796, 0.8096684813499451, 0.8247259259223938, 0.8178576231002808, 0.8235371708869934, 0.8338396549224854, 0.8370096683502197, 0.8309338092803955], "val_loss": [1.7622056007385254, 1.396672316959926, 1.4402078219822474, 1.0938636234828405, 0.810684323310852, 0.6400207281112671, 0.5717613015856061, 0.5241908856800624, 0.5542864799499512, 0.5409666299819946, 0.52385299546378, 0.44504427909851074, 0.43938593353543964, 0.42247588293892996, 0.42192254747663227, 0.48342158113207134, 0.4081248641014099, 0.3927180085863386, 0.4025563086782183, 0.4148151023047311, 0.38345359904425486, 0.39039590529033114, 0.3788582001413618, 0.3615369711603437, 0.3781072837965829, 0.38115369422095163, 0.38048599447522846, 0.3588559457233974, 0.400737464427948], "val_accuracy": [0.2723333239555359, 0.36266666650772095, 0.4763333201408386, 0.5526666641235352, 0.6273333430290222, 0.7056666612625122, 0.7390000224113464, 0.7646666765213013, 0.734666645526886, 0.7446666955947876, 0.7366666793823242, 0.7990000247955322, 0.8050000071525574, 0.812666654586792, 0.8106666803359985, 0.781333327293396, 0.8176666498184204, 0.8296666741371155, 0.8193333148956299, 0.8220000267028809, 0.8316666483879089, 0.824999988079071, 0.8343333601951599, 0.843666672706604, 0.8309999704360962, 0.8373333215713501, 0.8349999785423279, 0.8403333425521851, 0.815666675567627]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 6, 2, 8, 7, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 0, 2, 0, 3, 1, 1, 2, 0, 0, 2, 1, 2], [59, 92, 74, 57, 57, 39], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8142856955528259, "mapping_values": [1, 24, 24, 15, 9, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.negative(tf.math.negative(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.271918010182621, 1.9412880915030986, 1.8218870129898288, 1.3636426342917691, 1.1048714960523647, 0.8998162484896449, 0.7959069065083413, 0.7195373694532347, 0.6886604998200214, 0.6989003675110887, 0.619566280285066, 0.6241659033158358, 0.5911230678886487, 0.5836086145575965, 0.5612350129621407, 0.5669437925955088, 0.5525490539484272, 0.5399876296433633, 0.5141359100945165, 0.49597814215046776, 0.5041088066584777, 0.4702561802363997, 0.46612759784558794, 0.471115189686018, 0.48557013835354, 0.4524902914375315, 0.43842156235930185], "accuracy": [0.2715625464916229, 0.32703739404678345, 0.36626601219177246, 0.5209351181983948, 0.5951657891273499, 0.6577730774879456, 0.6971337795257568, 0.7283053994178772, 0.7371549606323242, 0.7360982894897461, 0.7625148296356201, 0.7684586048126221, 0.7758552432060242, 0.7824593782424927, 0.7849689722061157, 0.7898560166358948, 0.7976489067077637, 0.7996301651000977, 0.8029322624206543, 0.8138951063156128, 0.8129705190658569, 0.8238013386726379, 0.8252542614936829, 0.8286884427070618, 0.8201030492782593, 0.833179235458374, 0.8313300609588623], "val_loss": [1.7626939501081194, 1.4846064703805106, 1.3290315014975411, 0.8620712586811611, 0.7162857566561017, 0.6244403805051532, 0.5546424048287528, 0.520514965057373, 0.5139634268624442, 0.49122398240225656, 0.5664135558264596, 0.440664325441633, 0.43711231436048237, 0.4598818506513323, 0.41150901147297453, 0.4230820877211435, 0.4021127479416983, 0.4014578972543989, 0.40549964564187185, 0.3944880962371826, 0.4064710055078779, 0.36799822534833637, 0.397098183631897, 0.39033851453236174, 0.39698948178972515, 0.3700226034436907, 0.3827028955732073], "val_accuracy": [0.27399998903274536, 0.3083333373069763, 0.4503333270549774, 0.6193333268165588, 0.6830000281333923, 0.7203333377838135, 0.75, 0.7670000195503235, 0.765999972820282, 0.7763333320617676, 0.7396666407585144, 0.8009999990463257, 0.800000011920929, 0.7940000295639038, 0.8163333535194397, 0.809333324432373, 0.8223333358764648, 0.828000009059906, 0.8209999799728394, 0.8273333311080933, 0.8159999847412109, 0.8420000076293945, 0.8316666483879089, 0.8223333358764648, 0.8196666836738586, 0.8416666388511658, 0.831333339214325]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 8, 4, 9, 0, 6, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 1, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8142856955528259, "mapping_values": [1, 29, 29, 19, 10, 3, 12, 12, 7, 5, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.pow(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), grad)), grad)), grad), tf.math.add(alpha, grad))), tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), grad), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.negative(tf.math.sqrt(tf.math.pow(grad, grad)))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.271941249711623, 2.0077297062118684, 2.1092606166161407, 1.925380968760978, 1.161298703216779, 0.876900912622309, 0.7775952627771897, 0.6906062188307214, 0.6647177553683885, 0.6723343770753721, 0.6185695363498713, 0.6041229248692441, 0.5761764245601048, 0.5755903071904337, 0.5749924449699587, 0.5605537744639745, 0.5484420337720775, 0.5294742545022185, 0.5251540929224702, 0.49815631971272967, 0.5090104183540085, 0.4886783143320198, 0.5025365092868992, 0.4936741849710409, 0.49905185061139734, 0.4566465504433044, 0.4724664386938025, 0.4676713604834794, 0.4490953304622435, 0.44376869705752797, 0.4355148438724938, 0.43650242083218466, 0.44304221276090033, 0.41860394924780664, 0.3978029932281077], "accuracy": [0.27143046259880066, 0.32545238733291626, 0.2355038970708847, 0.31264033913612366, 0.5889578461647034, 0.6695284843444824, 0.7098137736320496, 0.7405890822410583, 0.7500990629196167, 0.7454761862754822, 0.7637035846710205, 0.7709681391716003, 0.7866860628128052, 0.7876105904579163, 0.7839123010635376, 0.7885351777076721, 0.7905164361000061, 0.7997622489929199, 0.8049134612083435, 0.8127063512802124, 0.8061022162437439, 0.8158763647079468, 0.8094043135643005, 0.8166688680648804, 0.813498854637146, 0.8259146809577942, 0.8208954930305481, 0.822348415851593, 0.8309338092803955, 0.8359529972076416, 0.8383304476737976, 0.8370096683502197, 0.8389908671379089, 0.8455950617790222, 0.8529917001724243], "val_loss": [1.7631305285862513, 1.9628983225141252, 2.092114584786551, 1.5384540898459298, 0.7887719358716693, 0.6896304743630546, 0.5302591153553554, 0.5286811760493687, 0.5394572189876011, 0.4626343420573643, 0.4657294239316668, 0.4357445410319737, 0.4253560645239694, 0.4228398288999285, 0.41294520241873606, 0.43016508647373747, 0.39371542419706074, 0.4197336179869516, 0.4049294250352042, 0.3899943232536316, 0.3883229579244341, 0.42100922550473896, 0.40230058772223337, 0.37920847109385897, 0.38904714584350586, 0.367789021560124, 0.41290873289108276, 0.35850316286087036, 0.38839039632252287, 0.3511725238391331, 0.3652253406388419, 0.3724743809018816, 0.3542171120643616, 0.3753936801637922, 0.35407782452447073], "val_accuracy": [0.27266666293144226, 0.10400000214576721, 0.10433333367109299, 0.5243333578109741, 0.6476666927337646, 0.6653333306312561, 0.7606666684150696, 0.7603333592414856, 0.7436666488647461, 0.8026666641235352, 0.7673333287239075, 0.8056666851043701, 0.8173333406448364, 0.8080000281333923, 0.8106666803359985, 0.8043333292007446, 0.8240000009536743, 0.8163333535194397, 0.8246666789054871, 0.831333339214325, 0.8240000009536743, 0.8056666851043701, 0.8100000023841858, 0.8349999785423279, 0.8206666707992554, 0.8399999737739563, 0.8069999814033508, 0.8403333425521851, 0.8246666789054871, 0.8543333411216736, 0.8443333506584167, 0.8389999866485596, 0.8450000286102295, 0.8366666436195374, 0.8463333249092102]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 6, 2, 6, 7, 5, 2, 5, 4, 2, 8, 0, 8, 2, 4, 9, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 0, 0, 2, 2, 3, 2, 2, 0, 1, 2], [59, 54, 74, 57, 57, 39], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8117142915725708, "mapping_values": [1, 26, 26, 16, 10, 3, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad)))), tf.math.sqrt(tf.math.add(tf.math.pow(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2718642685690797, 1.9428999717477102, 1.6437029004522115, 1.3307163660410704, 1.0373338479344494, 0.8303043180531704, 0.8161153789319855, 0.7237635051978971, 0.6968894944592805, 0.6850598789303767, 0.6226687801197582, 0.6201181127772811, 0.6231287619960841, 0.5779852853900233, 0.5688935694378349, 0.5645203604012936, 0.5434842909631035, 0.5305481085475284, 0.5186740215845616, 0.48492336757761567, 0.5001706702834218, 0.4733108147268266, 0.4954618185053979, 0.48479124612780516, 0.48265620681902893, 0.45209121801330115, 0.4314414042531224, 0.46484232910903467, 0.42209110122551424, 0.42484161941886434, 0.4192582575628676, 0.4423372939065652, 0.4187636789888549, 0.4020554420301203, 0.3943680177676821], "accuracy": [0.2716946303844452, 0.31845200061798096, 0.42847707867622375, 0.5159159898757935, 0.6108836531639099, 0.6843217611312866, 0.6884163022041321, 0.7240787148475647, 0.7313432693481445, 0.735569953918457, 0.7705719470977783, 0.7640998363494873, 0.765949010848999, 0.7840443849563599, 0.7807422876358032, 0.7861577272415161, 0.8031964302062988, 0.8026680946350098, 0.8018755912780762, 0.819442629814148, 0.8191784620285034, 0.8219521641731262, 0.8156121969223022, 0.8197067975997925, 0.8195747137069702, 0.8297450542449951, 0.8367455005645752, 0.828820526599884, 0.8441421389579773, 0.8486329317092896, 0.8441421389579773, 0.8318583965301514, 0.8451988101005554, 0.8548408150672913, 0.8570862412452698], "val_loss": [1.7622812816074915, 1.6377218450818742, 1.0467675072806222, 0.9146739414760044, 0.6558384554726737, 0.7155902215412685, 0.5493611437933785, 0.6167799064091274, 0.4983558143888201, 0.5553360155650547, 0.518643856048584, 0.4456325258527483, 0.4477456637791225, 0.45338053362710135, 0.4168299266270229, 0.45784010205950054, 0.40874519518443514, 0.41375694956098286, 0.4018025057656424, 0.38624392236982075, 0.40118928466524395, 0.36962567056928364, 0.37025907209941317, 0.36549352748053415, 0.3740487950188773, 0.36389792816979544, 0.39524302312306, 0.3502943856375558, 0.37941079480307444, 0.3449362260954721, 0.36258786065237864, 0.37659252541405813, 0.34559775250298636, 0.3997132011822292, 0.3381139891488211], "val_accuracy": [0.27433332800865173, 0.35600000619888306, 0.5256666541099548, 0.5879999995231628, 0.6966666579246521, 0.6589999794960022, 0.7570000290870667, 0.7200000286102295, 0.7756666541099548, 0.746999979019165, 0.753333330154419, 0.7940000295639038, 0.8033333420753479, 0.7839999794960022, 0.8100000023841858, 0.7900000214576721, 0.8169999718666077, 0.8133333325386047, 0.8246666789054871, 0.8346666693687439, 0.8220000267028809, 0.8366666436195374, 0.8373333215713501, 0.8486666679382324, 0.8326666951179504, 0.8446666598320007, 0.8273333311080933, 0.8539999723434448, 0.8299999833106995, 0.8583333492279053, 0.8393333554267883, 0.8346666693687439, 0.8569999933242798, 0.8293333053588867, 0.8553333282470703]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], [1, 6, 2, 6, 7, 5, 4, 0, 4, 3, 1, 9, 2, 0, 4, 5, 0, 2, 9, 5, 3, 7, 9], [2, 2, 2, 2, 1, 3, 0, 0, 3, 0, 0, 2, 1, 2], [87, 92, 74, 89, 57, 39], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 0, 2, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8108571171760559, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2718491578823254, 1.9223306583076532, 1.602650734175623, 1.373578287071603, 1.1548077403404742, 0.9230509403280657, 0.8446663090376854, 0.7414801810175404, 0.7585427770210279, 0.6935019151504093, 0.6478536145451865, 0.6381349965187978, 0.6282438464514915, 0.6099048069502463, 0.5919986697172901, 0.5918268478935452, 0.5462244154754773, 0.5470354326916661, 0.5437836577910883, 0.4983699899174203, 0.5071177200839, 0.48467379471471894, 0.49998439395936284, 0.49767969797678185, 0.47624613708587543, 0.46851700996253565, 0.4456471454087911, 0.46957077239687417, 0.4342288710792004, 0.4452897206848292, 0.42545941131950415, 0.44355889869451115, 0.417171046722362, 0.41575755769581985, 0.39698833566867064, 0.39207263555997207, 0.3817197468420612, 0.3853164536999264, 0.3972484402770868, 0.3774079097898141, 0.3867713283034458, 0.39665861014267395, 0.36392954594549515, 0.35789090534321555, 0.35199245212572816, 0.35410596102991787, 0.34964765754153526, 0.336868056464803, 0.36197631996557494, 0.3388209466716286, 0.3252354208992583, 0.3289742288359908, 0.3228792021059168, 0.3080106932119277, 0.31022641856310434, 0.3150741490571727, 0.3039618556832656, 0.30166251175061287, 0.2988310024809481], "accuracy": [0.2716946303844452, 0.3261128067970276, 0.4566107392311096, 0.5089156031608582, 0.5546162724494934, 0.6536785364151001, 0.6799629926681519, 0.7173424959182739, 0.711530864238739, 0.7349095344543457, 0.7552502751350403, 0.757099449634552, 0.7631752490997314, 0.7692511081695557, 0.7773081660270691, 0.7778365015983582, 0.7993659973144531, 0.7989697456359863, 0.7930260300636292, 0.8131026029586792, 0.8096684813499451, 0.819970965385437, 0.8141592741012573, 0.811649739742279, 0.8211596608161926, 0.8272355198860168, 0.8337075710296631, 0.8232730031013489, 0.8441421389579773, 0.8372738361358643, 0.8413683772087097, 0.8302733898162842, 0.8471800088882446, 0.8471800088882446, 0.8531237840652466, 0.8556333184242249, 0.8569541573524475, 0.8589354157447815, 0.8544445633888245, 0.8615770936012268, 0.8529917001724243, 0.8504821062088013, 0.8631620407104492, 0.8647470474243164, 0.8697662353515625, 0.8631620407104492, 0.8663320541381836, 0.8750495314598083, 0.86118084192276, 0.8706908226013184, 0.8780874609947205, 0.8733324408531189, 0.8795403242111206, 0.8865407705307007, 0.8857482671737671, 0.8787478804588318, 0.8887861371040344, 0.8865407705307007, 0.8865407705307007], "val_loss": [1.7622621400015694, 1.2769972937447684, 1.462770972933088, 1.2534985542297363, 0.7192692586353847, 0.6603310448782784, 0.561751127243042, 0.6728567736489433, 0.5214755194527763, 0.5160315377371651, 0.5352414846420288, 0.46964495522635324, 0.4688476834978376, 0.48641938822610037, 0.4623690502984183, 0.4242168664932251, 0.4040861896106175, 0.41635042428970337, 0.4042168600218637, 0.38907002551215036, 0.40582312856401714, 0.42891762937818256, 0.39962885209492277, 0.37282233578818186, 0.3838449461119516, 0.37240924154009136, 0.3977931227002825, 0.3450841137341091, 0.37730285951069426, 0.3597456898008074, 0.3531044125556946, 0.36732986143657137, 0.37861705677849905, 0.3885023423603603, 0.3380532605307443, 0.3322609407561166, 0.339400725705283, 0.36104317222322735, 0.3419758677482605, 0.3332969035421099, 0.408088709626879, 0.3185708522796631, 0.3217394862856184, 0.3341001868247986, 0.32783604519707815, 0.32163814987455097, 0.32141069003513884, 0.3364907503128052, 0.3215496965817043, 0.31822675466537476, 0.32154351472854614, 0.32454213925770353, 0.3043817366872515, 0.30127614736557007, 0.30722349882125854, 0.336942332131522, 0.32335193668093, 0.3062851343836103, 0.3309380156653268], "val_accuracy": [0.2736666798591614, 0.46666666865348816, 0.39266666769981384, 0.42766666412353516, 0.6660000085830688, 0.6933333277702332, 0.7416666746139526, 0.706333339214325, 0.7720000147819519, 0.7586666941642761, 0.7336666584014893, 0.7953333258628845, 0.7886666655540466, 0.7796666622161865, 0.7876666784286499, 0.8053333163261414, 0.8203333616256714, 0.8163333535194397, 0.8263333439826965, 0.8286666870117188, 0.8153333067893982, 0.8073333501815796, 0.8263333439826965, 0.8349999785423279, 0.8213333487510681, 0.8429999947547913, 0.8159999847412109, 0.8516666889190674, 0.8303333520889282, 0.8529999852180481, 0.8479999899864197, 0.8363333344459534, 0.8296666741371155, 0.831333339214325, 0.856333315372467, 0.8576666712760925, 0.8539999723434448, 0.8453333377838135, 0.8516666889190674, 0.859666645526886, 0.8296666741371155, 0.8656666874885559, 0.8633333444595337, 0.8556666374206543, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8569999933242798, 0.8686666488647461, 0.862666666507721, 0.8690000176429749, 0.8663333058357239, 0.8743333220481873, 0.8776666522026062, 0.871999979019165, 0.8629999756813049, 0.8693333268165588, 0.8736666440963745, 0.8616666793823242]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 2, 8, 0, 0, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 0, 0, 1, 2, 3, 0, 0, 2, 1, 2], [59, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8100000023841858, "mapping_values": [1, 30, 30, 18, 12, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2718852460345005, 1.9905599728079046, 2.031625587233872, 1.7069067881642992, 1.0110514320087722, 0.8619190185864557, 0.7657421898879647, 0.6565834017729542, 0.6522365300930282, 0.6690278885197944, 0.5896943324057181, 0.6244977139337046, 0.5685878454410735, 0.5728201036361293, 0.53352487821778, 0.540269987977743, 0.5194679624675964, 0.5224911359874028, 0.5018684432105366, 0.4862416714622738, 0.49613253542177427, 0.46629894530815674, 0.4900798786034469, 0.46705965840459074, 0.4895781858123887, 0.44763963446247423, 0.43107221498859083, 0.4323315288664375, 0.44708668484569397, 0.4458455470464548, 0.41362683927897903, 0.42481259192536774, 0.42245914396466894, 0.41288884085450644, 0.39279969142664534], "accuracy": [0.2715625464916229, 0.3195086419582367, 0.26865673065185547, 0.39664509892463684, 0.6425835490226746, 0.6823405027389526, 0.7071720957756042, 0.7493065595626831, 0.7500990629196167, 0.7474573850631714, 0.7784969210624695, 0.763967752456665, 0.7835160493850708, 0.7836481332778931, 0.8025360107421875, 0.7954035401344299, 0.8047813773155212, 0.8050455451011658, 0.8094043135643005, 0.813498854637146, 0.8140271902084351, 0.8264430165290833, 0.809140145778656, 0.8280280232429504, 0.8203672170639038, 0.8319904804229736, 0.8358209133148193, 0.8422929644584656, 0.8325188159942627, 0.8366134166717529, 0.8455950617790222, 0.8388587832450867, 0.8437458872795105, 0.8459912538528442, 0.8562937378883362], "val_loss": [1.7622534888131278, 1.9534506116594588, 1.7898355892726354, 0.7904711280550275, 0.780310937336513, 0.5615382024220058, 0.5042215415409633, 0.5201860325677055, 0.49880875859941753, 0.4808821507862636, 0.5466285603387016, 0.4245558636529105, 0.4530045134680612, 0.4119291731289455, 0.4615698882511684, 0.422925020967211, 0.39265492984226774, 0.40643926177706036, 0.40869602135249544, 0.40299990347453524, 0.37694493361881803, 0.38973625217165264, 0.3911282164709909, 0.37425569125584196, 0.3692686642919268, 0.37449169158935547, 0.3951566900525774, 0.4070858529635838, 0.4147237879889352, 0.3408568160874503, 0.3477138195719038, 0.3684831346784319, 0.39510187932423185, 0.38080755301884245, 0.34601578542164396], "val_accuracy": [0.273333340883255, 0.10400000214576721, 0.1003333330154419, 0.6536666750907898, 0.6203333139419556, 0.7413333058357239, 0.7720000147819519, 0.7596666812896729, 0.7706666588783264, 0.7763333320617676, 0.7493333220481873, 0.8016666769981384, 0.7996666431427002, 0.8119999766349792, 0.7929999828338623, 0.8100000023841858, 0.8293333053588867, 0.8220000267028809, 0.8216666579246521, 0.824999988079071, 0.8299999833106995, 0.8263333439826965, 0.8190000057220459, 0.8389999866485596, 0.8376666903495789, 0.8420000076293945, 0.8206666707992554, 0.8190000057220459, 0.8100000023841858, 0.8569999933242798, 0.8500000238418579, 0.8336666822433472, 0.8233333230018616, 0.8320000171661377, 0.8526666760444641]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 6, 2, 6, 7, 4, 4, 0, 4, 2, 8, 0, 0, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 0, 1, 1, 3, 0, 2, 3, 0, 0, 2, 1, 2], [59, 92, 74, 57, 57, 39], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 1, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.7945713996887207, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.1893307909816246, 1.88314865693881, 1.3077757997976365, 1.0942496144933755, 0.854749768724405, 0.8047774592489536, 0.7609506451285291, 0.7452112550685718, 0.7213688151018574, 0.6849717503887646, 0.655286262378937, 0.6387990678558103, 0.6297073019116137, 0.605539198037325, 0.5901893954849545, 0.5700107775722055, 0.5515975958840281, 0.5962513185070175, 0.5236670052953258, 0.532652226996192], "accuracy": [0.2670717239379883, 0.3797384798526764, 0.5296525955200195, 0.6024303436279297, 0.6796988248825073, 0.6900013089179993, 0.7102100253105164, 0.7128516435623169, 0.7193237543106079, 0.7306828498840332, 0.7461365461349487, 0.7540615797042847, 0.7565711140632629, 0.7655527591705322, 0.7730814814567566, 0.7791573405265808, 0.7943468689918518, 0.7687227725982666, 0.8047813773155212, 0.796328067779541], "val_loss": [1.849740709577288, 1.4517252785818917, 0.8742786134992327, 0.7442774942943028, 0.5817642382213047, 0.5457759925297329, 0.5650650773729596, 0.5386112928390503, 0.5781733478818621, 0.4863257919039045, 0.6112807478223529, 0.47554627486637663, 0.4548389230455671, 0.44852726800101145, 0.4253349985395159, 0.4625985792704991, 0.4519260270254953, 0.42444359404700144, 0.48082828521728516, 0.4190498079572405], "val_accuracy": [0.375, 0.4090000092983246, 0.637666642665863, 0.6656666398048401, 0.7269999980926514, 0.753333330154419, 0.7419999837875366, 0.7426666617393494, 0.7136666774749756, 0.781333327293396, 0.7170000076293945, 0.7926666736602783, 0.7916666865348816, 0.7900000214576721, 0.8136666417121887, 0.7876666784286499, 0.7926666736602783, 0.8006666898727417, 0.7616666555404663, 0.8096666932106018]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 6, 2, 6, 7, 5, 9, 0, 4, 3, 1, 9, 2, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 0, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.7931428551673889, "mapping_values": [1, 29, 29, 20, 9, 6, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))))), tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, alpha))), tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.218327640306208, 2.2885420730856856, 1.9215689628918755, 1.314633395150353, 0.8863676994106064, 0.7640923006171485, 0.7209425329327536, 0.6625602634953565, 0.6448740600248479, 0.5937865196028878, 0.6193727694088678, 0.5699680544728254, 0.5546056381573751, 0.5799196629539347, 0.5218241454556382, 0.5415849356981333], "accuracy": [0.28080835938453674, 0.19178444147109985, 0.38964468240737915, 0.5385021567344666, 0.6781138777732849, 0.7156254053115845, 0.7283053994178772, 0.7565711140632629, 0.7523444890975952, 0.7766477465629578, 0.7683265209197998, 0.7880068421363831, 0.7909126877784729, 0.7816668748855591, 0.8047813773155212, 0.7955356240272522], "val_loss": [1.9741801534380232, 1.9001365389142717, 0.979276009968349, 0.7549474239349365, 0.5708553450448173, 0.5567312240600586, 0.5547339916229248, 0.5040003912789481, 0.48567984785352436, 0.45086683545793804, 0.4393065571784973, 0.5068801982062203, 0.5050085442406791, 0.41059327125549316, 0.48333784512111116, 0.437572181224823], "val_accuracy": [0.10866666585206985, 0.351666659116745, 0.5839999914169312, 0.6693333387374878, 0.734333336353302, 0.7360000014305115, 0.7353333234786987, 0.7613333463668823, 0.7773333191871643, 0.7986666560173035, 0.8076666593551636, 0.7596666812896729, 0.7516666650772095, 0.8059999942779541, 0.7786666750907898, 0.7919999957084656]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 6, 2, 6, 8, 5, 4, 0, 4, 3, 5, 5, 2, 0, 4, 8, 0, 3, 3, 5, 3, 7, 9], [2, 2, 2, 2, 0, 0, 1, 2, 1, 1, 0, 2, 1, 2], [87, 92, 74, 9, 37, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 3, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.7891428470611572, "mapping_values": [1, 19, 19, 11, 8, 2, 9, 9, 6, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, grad), tf.math.multiply(grad, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(alpha, alpha)))), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.sqrt(beta)), tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1893290536530565, 1.8740722750786067, 1.3479091199066944, 1.0246361922263596, 0.9175385034725162, 0.7844016303034853, 0.7735043276633254, 0.7353262990661946, 0.7153495071098364, 0.6706980706253198, 0.6353625446546189, 0.6385385153819825, 0.6235489289223037, 0.6019499648154262, 0.5835525989453744, 0.5498856099101262, 0.5707612321865226, 0.5589486238364735, 0.5516003228181766], "accuracy": [0.2670717239379883, 0.38409721851348877, 0.5188218355178833, 0.6203936338424683, 0.6576409935951233, 0.707040011882782, 0.6956809163093567, 0.7154933214187622, 0.7232862114906311, 0.7391361594200134, 0.757099449634552, 0.7543256878852844, 0.7564390301704407, 0.7683265209197998, 0.774798572063446, 0.7891955971717834, 0.7893276810646057, 0.7825914621353149, 0.7909126877784729], "val_loss": [1.8493894168308802, 1.409095048904419, 0.8537629842758179, 0.7935351303645543, 0.5810888494764056, 0.6119508913585118, 0.5848189422062465, 0.5208425010953631, 0.5238808393478394, 0.48924899101257324, 0.5789060422352382, 0.5160346371786935, 0.45708186285836355, 0.42839767251695904, 0.4580236162458147, 0.50131584916796, 0.4751643112727574, 0.4099001543862479, 0.4888226645333426], "val_accuracy": [0.37599998712539673, 0.40966665744781494, 0.6269999742507935, 0.6153333187103271, 0.7436666488647461, 0.7073333263397217, 0.7203333377838135, 0.7506666779518127, 0.7576666474342346, 0.7746666669845581, 0.7523333430290222, 0.7453333139419556, 0.7896666526794434, 0.8040000200271606, 0.7796666622161865, 0.7986666560173035, 0.768666684627533, 0.8033333420753479, 0.7609999775886536]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [4, 6, 2, 6, 8, 9, 4, 0, 4, 3, 1, 2, 2, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 1, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [2, 2], [76], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 2, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), grad), tf.math.add(alpha, alpha))), grad))))), tf.math.add(alpha, grad)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.negative(grad), grad)), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [10443108.366567025, 192461440.1014397, 916837731.106591, 2514288498.897372, 5441765844.989566, 9735852726.388588], "accuracy": [0.09826971590518951, 0.09866596013307571, 0.09100515395402908, 0.09985470771789551, 0.09694888442754745, 0.10487385839223862], "val_loss": [38884898.28571428, 310612114.28571427, 1047796041.1428572, 2483043108.571429, 4848978944.0, 8378198308.571428], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 6, 2, 2, 7, 5, 2, 0, 4, 2, 8, 0, 8, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 0, 2, 2, 1, 3, 1, 0, 3, 0, 0, 2, 1, 2], [87, 17, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 5, 2, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 1, 2, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 5, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [31, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 14, 9, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), alpha)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.sqrt(tf.math.negative(grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [16694.700345955, 300170.72134625545, 1420345.1242570335, 3884150.0809008055, 8393489.092458064, 15002202.062078986], "accuracy": [0.09813763201236725, 0.09879804402589798, 0.09100515395402908, 0.09985470771789551, 0.09694888442754745, 0.10487385839223862], "val_loss": [61196.515625, 482343.125, 1620347.857142857, 3832111.8571428573, 7474537.428571428, 12904508.285714285], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 3, 2, 6, 1, 5, 4, 9, 4, 2, 3, 3, 0, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [1, 2, 2, 2, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 1, 9, 9, 6, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.square(tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, grad)), grad), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.negative(tf.math.sqrt(beta))), tf.math.pow(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 9, 2, 6, 9, 5, 4, 0, 4, 2, 8, 0, 0, 0, 6, 5, 0, 3, 9, 5, 3, 7, 9], [1, 2, 2, 2, 2, 2, 1, 1, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 1, 2, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3020989214660723, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 2, 8, 0, 0, 5, 4, 5, 2, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 0, 1, 1, 2, 3, 0, 1, 2, 1, 2], [19, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(grad), tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), tf.math.negative(tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [1, 6, 5, 6, 7, 5, 4, 0, 4, 2, 8, 0, 4, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 0, 0, 1, 2, 3, 0, 0, 2, 1, 2], [59, 92, 74, 57, 57, 39], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 2, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [66, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 2, 9, 9, 6, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(grad, grad)))), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.negative(tf.math.sqrt(alpha)), tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [122305776.54126324, 2257272488.0517764, 10757815606.134989, 29507357064.50403, 63870858215.24871, 114278982161.1095], "accuracy": [0.09826971590518951, 0.09866596013307571, 0.09100515395402908, 0.09985470771789551, 0.09694888442754745, 0.10487385839223862], "val_loss": [455801782.85714287, 3644024612.571429, 12295893284.571428, 29142629814.857143, 56915621595.42857, 98345741750.85715], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 6, 2, 6, 8, 5, 4, 0, 3, 3, 1, 2, 2, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 0, 2, 2, 1, 0, 1, 1, 2, 0, 0, 2, 1, 2], [59, 92, 11, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 2, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3017941088393665, 2.302238126897604, 2.302447357355344, 2.3039047642784536, 2.310057404459806, 2.348253971109175], "accuracy": [0.10579843819141388, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973743302481515, 1.9739666666303362, 1.9746520178658622, 1.977611746106829, 1.9912074634007044, 2.0881902149745395], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [1, 3, 2, 1, 1, 5, 4, 0, 3, 2, 8, 3, 0, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 0, 2, 0, 3, 1, 1, 2, 0, 0, 2, 1, 2], [87, 32, 74, 57, 57, 39], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 9, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3020989214660723, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 2, 8, 7, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 1, 3, 1, 0, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 2, 0, 7, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [1, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 2, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 5, 3, 0, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3020986565005557, 2.302583947142023, 2.30258580350668, 2.302585543957621, 2.302585957623775, 2.3025847832288378, 2.3025857773376353], "accuracy": [0.1010434553027153, 0.09959053993225098, 0.1002509593963623, 0.09998679161071777, 0.09919429570436478, 0.10302469879388809, 0.09998679161071777], "val_loss": [1.973644597189767, 1.9736448696681432, 1.9736449377877372, 1.973644460950579, 1.973644529070173, 1.973644529070173, 1.9736443247113908], "val_accuracy": [0.09866666793823242, 0.10100000351667404, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 6, 2, 6, 1, 5, 3, 0, 4, 2, 8, 3, 0, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 1, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 0, 0, 6, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [6, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 2, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 1, 15, 15, 10, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, grad))), grad)), grad), tf.math.sqrt(tf.math.add(alpha, alpha)))))), grad)), tf.math.multiply(tf.math.negative(alpha), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]