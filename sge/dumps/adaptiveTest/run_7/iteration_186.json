[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 3, 1, 3, 0, 5, 4, 4, 3, 6, 2, 4, 1, 3, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 3, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [84, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8274285793304443, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 5, 6, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.956821944199974, 1.3933787916503673, 1.0557336874405596, 0.8836120319971082, 0.818512561912975, 0.7779298268997626, 0.730700001480746, 0.7112363916047418, 0.6980631161816226, 0.6802220627805261, 0.6484362585449168, 0.6616467893509392, 0.6275530426871617, 0.6022798714699479, 0.6003347112518087, 0.5856406772298867, 0.6051313911352206, 0.571592850259046, 0.5657686189007939, 0.5402007515813696, 0.5496814380137991, 0.5125739317937943, 0.5269004498978553, 0.5170139373214788, 0.5311183418265234, 0.4843777573387369, 0.4903793640423917, 0.49712532104093005, 0.48459546621669913, 0.4712483606373456, 0.4580078587485122, 0.4578607245018107, 0.45654972173345404, 0.4489531765099388, 0.4478944114658732], "accuracy": [0.3473781645298004, 0.522520124912262, 0.6140536069869995, 0.6662263870239258, 0.6922467350959778, 0.7028133869171143, 0.7269845604896545, 0.7246070504188538, 0.7358341217041016, 0.7367587089538574, 0.7526086568832397, 0.7493065595626831, 0.7604015469551086, 0.7707040309906006, 0.7675340175628662, 0.7808743715286255, 0.7740060687065125, 0.7860256433486938, 0.7890635132789612, 0.7961959838867188, 0.7942147850990295, 0.8062343001365662, 0.8053097128868103, 0.8067626357078552, 0.8016114234924316, 0.8183859586715698, 0.81548011302948, 0.8109893202781677, 0.8175934553146362, 0.8197067975997925, 0.8302733898162842, 0.8293488025665283, 0.828292191028595, 0.8302733898162842, 0.8335754871368408], "val_loss": [1.4248393603733607, 0.7625100101743426, 0.6600351163319179, 0.6982254130499703, 0.6391217708587646, 0.5552378722599575, 0.5407394681658063, 0.54054742200034, 0.5138661861419678, 0.5152660608291626, 0.5213146720613752, 0.5520180804388863, 0.46534410544804167, 0.45408698490687777, 0.4488526242119925, 0.4685310976845877, 0.4739303248269217, 0.48458826541900635, 0.42980581521987915, 0.4536645753043039, 0.41482564381190706, 0.40836335931505474, 0.4240179402487619, 0.3961326650210789, 0.3962257504463196, 0.41496595314570833, 0.39736286231449675, 0.3877579995564052, 0.3776692237172808, 0.36636327845709665, 0.3696924958910261, 0.39478540420532227, 0.35838952234813143, 0.3605407731873648, 0.3994394370487758], "val_accuracy": [0.4129999876022339, 0.690666675567627, 0.7183333039283752, 0.6546666622161865, 0.6966666579246521, 0.7643333077430725, 0.7596666812896729, 0.7590000033378601, 0.7673333287239075, 0.7646666765213013, 0.750333309173584, 0.7403333187103271, 0.7889999747276306, 0.7953333258628845, 0.8013333082199097, 0.7826666831970215, 0.7829999923706055, 0.7839999794960022, 0.8050000071525574, 0.7950000166893005, 0.8159999847412109, 0.8299999833106995, 0.8133333325386047, 0.8220000267028809, 0.8306666612625122, 0.8083333373069763, 0.8169999718666077, 0.831333339214325, 0.8360000252723694, 0.8479999899864197, 0.8389999866485596, 0.8183333277702332, 0.8473333120346069, 0.8429999947547913, 0.8199999928474426]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 1, 3, 7, 3, 0, 1, 1, 2, 4, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 91, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [6, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 56, 44]], "fitness": -0.8257142901420593, "mapping_values": [1, 2, 2, 1, 1, 0, 23, 23, 13, 10, 2, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.459219640382387, 2.0893769014024968, 2.0832253834511927, 2.1926818624258892, 2.1133809057854704, 2.070427625627408, 1.9562531369725364, 1.7091017576209337, 1.1772633599819304, 0.9887992634733576, 0.8271981486318732, 0.7491822383737898, 0.6848723781721356, 0.666979017424278, 0.6478668731500633, 0.6038167217640341, 0.630062874872545, 0.5750764083349001, 0.5550409533430825, 0.5526458853743789, 0.5598498458607857, 0.5514667955419218, 0.5236019817530408, 0.4986099526118829, 0.5135815332492014, 0.476191654346717, 0.49595912929617925, 0.4685224861382903, 0.47443438206901795, 0.4610423393505219, 0.46400045741975837, 0.4470835409506421, 0.44829373224426206, 0.434119068352837, 0.4473446025281235, 0.42101613391329035, 0.42672873935238437, 0.41038617946767475, 0.40467012851245493, 0.4044725849344714, 0.39432298212853784, 0.4056772350076167, 0.40334161189820833], "accuracy": [0.20776647329330444, 0.25214633345603943, 0.26601505279541016, 0.17699114978313446, 0.2899220585823059, 0.2456742823123932, 0.3047153651714325, 0.39043718576431274, 0.5539559125900269, 0.6441685557365417, 0.689869225025177, 0.7154933214187622, 0.7483819723129272, 0.7433628439903259, 0.7548540234565735, 0.7734777331352234, 0.7692511081695557, 0.7853652238845825, 0.7947431206703186, 0.7938185334205627, 0.7828556299209595, 0.7913089394569397, 0.8075551390647888, 0.817989706993103, 0.8101968169212341, 0.8206313848495483, 0.8112534880638123, 0.8259146809577942, 0.8259146809577942, 0.8321225643157959, 0.8300092220306396, 0.8368775844573975, 0.8341038227081299, 0.837537944316864, 0.8304054737091064, 0.8457271456718445, 0.8399154543876648, 0.8429533839225769, 0.8510104417800903, 0.852331280708313, 0.8531237840652466, 0.8445383906364441, 0.846387505531311], "val_loss": [1.9585516793387276, 1.6282270976475306, 1.976543358394078, 1.8844531604221888, 1.9692465237208776, 1.1468268121991838, 1.8685789108276367, 0.9808829852512905, 0.8778583662850517, 0.6880371570587158, 0.5711328131811959, 0.6069669553211757, 0.5326064143862043, 0.5320208242961338, 0.45866589886801584, 0.5051674842834473, 0.4543225254331316, 0.4555425133023943, 0.4119183932031904, 0.4268971255847386, 0.4182411772864206, 0.41754816259656635, 0.41613110474177767, 0.42223191261291504, 0.37809142044612337, 0.43143982546670095, 0.38288854701178415, 0.3608164531844003, 0.36077338457107544, 0.35778617007391794, 0.36002956117902485, 0.38140301193509785, 0.3419820410864694, 0.3812356506075178, 0.40668915850775583, 0.3551144003868103, 0.35524266958236694, 0.33130025012152536, 0.37893806185041157, 0.3695041707583836, 0.3491961189678737, 0.38502447094236103, 0.33597136395318167], "val_accuracy": [0.24933333694934845, 0.4436666667461395, 0.09866666793823242, 0.26899999380111694, 0.09866666793823242, 0.5440000295639038, 0.17399999499320984, 0.5649999976158142, 0.5643333196640015, 0.6990000009536743, 0.7440000176429749, 0.7239999771118164, 0.753000020980835, 0.7513333559036255, 0.7913333177566528, 0.7663333415985107, 0.7956666946411133, 0.7946666479110718, 0.8149999976158142, 0.8050000071525574, 0.8106666803359985, 0.8146666884422302, 0.8236666917800903, 0.8173333406448364, 0.8256666660308838, 0.8080000281333923, 0.8303333520889282, 0.8450000286102295, 0.8476666808128357, 0.8453333377838135, 0.8429999947547913, 0.8330000042915344, 0.8576666712760925, 0.8383333086967468, 0.8246666789054871, 0.8460000157356262, 0.840666651725769, 0.8606666922569275, 0.8456666469573975, 0.8306666612625122, 0.8523333072662354, 0.8373333215713501, 0.8550000190734863]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 2, 3, 7, 3, 0, 1, 1, 2, 4, 5, 2, 0, 1, 2, 1, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 1, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [84, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [6, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.819428563117981, "mapping_values": [1, 2, 2, 1, 1, 0, 23, 23, 13, 10, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, beta)), grad)), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.pow(tf.math.add(beta, grad), alpha), tf.math.add(beta, alpha)), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(grad, tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9568121153460265, 1.393197392822178, 1.0509130383573897, 0.8810326618021506, 0.8229505394223406, 0.7831705119300906, 0.7371987419641092, 0.7040457991466641, 0.6863072738041573, 0.6793931162415588, 0.6549267649193954, 0.6339731645181022, 0.637638461737821, 0.6004284518096645, 0.5984701182564819, 0.5930639599938167, 0.5929969970765225, 0.57912397551546, 0.5661596738352137, 0.5437276229614658, 0.5538712031789947, 0.5151513384758694, 0.5128848152374154, 0.5249473845812277, 0.5141229899394718, 0.4965293285176266, 0.4876349870680881], "accuracy": [0.3473781645298004, 0.522520124912262, 0.6192048788070679, 0.6695284843444824, 0.691850483417511, 0.7025492191314697, 0.7199841737747192, 0.7279091477394104, 0.7386078238487244, 0.7404569983482361, 0.7465327978134155, 0.7622507214546204, 0.7588165402412415, 0.774798572063446, 0.7744023203849792, 0.7771760821342468, 0.7777044177055359, 0.783119797706604, 0.7877426743507385, 0.7921014428138733, 0.7932901978492737, 0.8063663840293884, 0.8095363974571228, 0.8005547523498535, 0.8096684813499451, 0.8136309385299683, 0.8187822103500366], "val_loss": [1.4255354404449463, 0.7647635425840106, 0.6643336500440326, 0.7448402302605766, 0.6413546289716449, 0.5632218973977225, 0.5494357006890433, 0.5370204789297921, 0.5139429228646415, 0.5100589650017875, 0.50532785483769, 0.5397712673459735, 0.4595928532736642, 0.44818861143929617, 0.47111053126198904, 0.4670212779726301, 0.5085164989743914, 0.4845195157187326, 0.4334403361592974, 0.4602086203438895, 0.4174740995679583, 0.4062426771436419, 0.4248277119227818, 0.39556762150355745, 0.4049520918301174, 0.4363485404423305, 0.3943313019616263], "val_accuracy": [0.41333332657814026, 0.6883333325386047, 0.7203333377838135, 0.6276666522026062, 0.6986666917800903, 0.7606666684150696, 0.7630000114440918, 0.7549999952316284, 0.7636666893959045, 0.7649999856948853, 0.7749999761581421, 0.7409999966621399, 0.7943333387374878, 0.7979999780654907, 0.7760000228881836, 0.7863333225250244, 0.7616666555404663, 0.7886666655540466, 0.8040000200271606, 0.7903333306312561, 0.8143333196640015, 0.8320000171661377, 0.8076666593551636, 0.8226666450500488, 0.8209999799728394, 0.7873333096504211, 0.8216666579246521]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 0, 3, 7, 3, 0, 1, 1, 2, 4, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 2, 3, 1, 1, 3, 3, 0, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8019999861717224, "mapping_values": [1, 2, 2, 1, 1, 0, 19, 19, 11, 8, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta)))), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, alpha)), tf.math.add(beta, alpha))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9566691158910894, 1.3927547883332414, 1.0607993042133645, 0.8778857966975261, 0.8390805565166184, 0.7751998166130393, 0.731722735332035, 0.7059745241732504, 0.6956287189292681, 0.6766083751765886, 0.6518425709614586, 0.6500663025079071, 0.6299311571731512, 0.6055808526775888, 0.6016555662876926, 0.5858328898962951, 0.6079829052738179, 0.5651333297579091, 0.5698948016791469, 0.5444158224019675], "accuracy": [0.34724608063697815, 0.5237088799476624, 0.6104874014854431, 0.6708492636680603, 0.687887966632843, 0.7057191729545593, 0.7232862114906311, 0.7256637215614319, 0.7333245277404785, 0.7425703406333923, 0.7519482374191284, 0.7536653280258179, 0.7622507214546204, 0.7734777331352234, 0.7696473598480225, 0.783119797706604, 0.7725531458854675, 0.7874785661697388, 0.7861577272415161, 0.7931581139564514], "val_loss": [1.4285702024187361, 0.7706717933927264, 0.6807486159460885, 0.7493537494114467, 0.6011859008244106, 0.553024172782898, 0.5503349474498204, 0.5226091657366071, 0.5092425005776542, 0.5069455078669957, 0.5023142269679478, 0.5516880410058158, 0.4603632858821324, 0.4466831854411534, 0.44814908504486084, 0.47772749832698275, 0.47697676931108746, 0.4880871943065098, 0.4314362577029637, 0.45415537697928293], "val_accuracy": [0.4129999876022339, 0.6933333277702332, 0.6970000267028809, 0.6516666412353516, 0.7243333458900452, 0.7593333125114441, 0.7549999952316284, 0.7663333415985107, 0.768666684627533, 0.7636666893959045, 0.7710000276565552, 0.7419999837875366, 0.7866666913032532, 0.7983333468437195, 0.8076666593551636, 0.7886666655540466, 0.7820000052452087, 0.7883333563804626, 0.8076666593551636, 0.7916666865348816]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 1, 1, 3, 0, 5, 4, 4, 3, 6, 2, 4, 1, 3, 9, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 3, 3, 3, 2, 1, 3, 1, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [84, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7937142848968506, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, beta))), alpha)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9919672039883751, 1.3455607850144427, 1.0314532869669266, 0.8845337880301737, 0.8169160700351366, 0.7943167685675127, 0.7230545737724168, 0.7298633884271972, 0.6840724737699935, 0.6485905494546342, 0.6997764805178553, 0.6407199183380788, 0.6148120044575486, 0.6039494048996435, 0.6117561556297507, 0.5718976768520231, 0.5818004200581657], "accuracy": [0.3387927711009979, 0.5344076156616211, 0.6240919232368469, 0.6716417670249939, 0.6939638257026672, 0.7020208835601807, 0.7380794882774353, 0.7259278893470764, 0.7433628439903259, 0.7611940503120422, 0.7363624572753906, 0.7593448758125305, 0.7670056819915771, 0.7709681391716003, 0.7667415142059326, 0.7812706232070923, 0.7791573405265808], "val_loss": [1.3504296030317033, 0.7381832088742938, 0.7419135229928153, 0.6454873766217913, 0.5678410359791347, 0.5409370490482875, 0.5710560934884208, 0.5483804941177368, 0.4893597534724644, 0.5042189700262887, 0.4834709167480469, 0.46944943496159147, 0.4711155210222517, 0.4832014186041696, 0.46864937032972065, 0.44551682472229004, 0.4706375428608486], "val_accuracy": [0.4193333387374878, 0.6850000023841858, 0.687666654586792, 0.6959999799728394, 0.7480000257492065, 0.7646666765213013, 0.7260000109672546, 0.7353333234786987, 0.7746666669845581, 0.7680000066757202, 0.7879999876022339, 0.7913333177566528, 0.7903333306312561, 0.7716666460037231, 0.7796666622161865, 0.7863333225250244, 0.781333327293396]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 3, 1, 3, 0, 5, 4, 4, 3, 6, 2, 4, 1, 2, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 3, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 91, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [6, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7911428809165955, "mapping_values": [1, 2, 2, 1, 1, 0, 33, 33, 18, 15, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), alpha), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))))), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9921702082603363, 1.3428136379239173, 1.0483341554624845, 0.8815692234048754, 0.8019358540381171, 0.7604351737133627, 0.7593609803404082, 0.7246785895337267, 0.6684709082048457, 0.6839667503324561, 0.6730176803379515, 0.645457515178371, 0.6217020970246795, 0.6019666406692941, 0.6111664209525189, 0.5759434154902499, 0.5818602934080171], "accuracy": [0.3387927711009979, 0.5340113639831543, 0.6194690465927124, 0.674679696559906, 0.7029454708099365, 0.7166820764541626, 0.7165499925613403, 0.7275128960609436, 0.7561748623847961, 0.7400607466697693, 0.7446836829185486, 0.7564390301704407, 0.7640998363494873, 0.772288978099823, 0.7667415142059326, 0.7807422876358032, 0.778761088848114], "val_loss": [1.3451737335750036, 0.7416915723255703, 0.7102840968540737, 0.6438445023127964, 0.5736146313803536, 0.5943402903420585, 0.5594086817332676, 0.5160623618534633, 0.5213265248707363, 0.49268753187997, 0.5286117792129517, 0.47528553009033203, 0.4779714345932007, 0.481790508542742, 0.48226986612592426, 0.4470263719558716, 0.4823725734438215], "val_accuracy": [0.4193333387374878, 0.6796666383743286, 0.7080000042915344, 0.6976666450500488, 0.731333315372467, 0.7239999771118164, 0.7486666440963745, 0.7606666684150696, 0.7673333287239075, 0.7720000147819519, 0.746666669845581, 0.7860000133514404, 0.7850000262260437, 0.7746666669845581, 0.7643333077430725, 0.7846666574478149, 0.7799999713897705]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 1, 3, 0, 5, 4, 8, 3, 6, 2, 4, 1, 3, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 1, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 91, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [6, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7777143120765686, "mapping_values": [1, 2, 2, 1, 1, 0, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), grad)), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9876741354160967, 1.369515695513326, 1.011212657565816, 0.8575599105791756, 0.8086765016531349, 0.7800882465693583, 0.7426106045668419, 0.7050696313184376, 0.6728056987845713, 0.645870940717708, 0.653152437856279, 0.6254047328817091, 0.5960035176561209, 0.6019479982951502, 0.6035281568942777], "accuracy": [0.34143441915512085, 0.5038964748382568, 0.6436402201652527, 0.6865671873092651, 0.6930392384529114, 0.7062475085258484, 0.7168141603469849, 0.735041618347168, 0.743891179561615, 0.7548540234565735, 0.7582882046699524, 0.7637035846710205, 0.7721568942070007, 0.7741381525993347, 0.7718927264213562], "val_loss": [1.4016765866960799, 0.7438183171408517, 0.6721312148230416, 0.61288092817579, 0.6515431574412754, 0.5566854817526681, 0.5491730485643659, 0.5538226706641061, 0.5032117196491787, 0.492038403238569, 0.5331178052084786, 0.48668013300214497, 0.48964020184108187, 0.5043775354112897, 0.46263931478772846], "val_accuracy": [0.3529999852180481, 0.6890000104904175, 0.7116666436195374, 0.7229999899864197, 0.699999988079071, 0.7493333220481873, 0.7516666650772095, 0.7323333621025085, 0.7799999713897705, 0.7866666913032532, 0.7526666522026062, 0.7839999794960022, 0.762333333492279, 0.7620000243186951, 0.7846666574478149]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 1, 3, 9, 3, 0, 1, 1, 2, 9, 5, 2, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 3, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 91, 47, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [6, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7488571405410767, "mapping_values": [1, 2, 2, 1, 1, 0, 25, 25, 16, 9, 3, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.957546300325002, 1.3850247219899674, 1.0682750758698367, 0.8746362121712026, 0.8401613171783027, 0.7688967591468228, 0.7293893314780907, 0.6901917974820715, 0.6980582035181466, 0.6823672224281486, 0.646160502703655], "accuracy": [0.3469819128513336, 0.5233126282691956, 0.6103553175926208, 0.6686038970947266, 0.687491774559021, 0.7124554514884949, 0.7239466309547424, 0.7366266250610352, 0.7326641082763672, 0.7405890822410583, 0.7531369924545288], "val_loss": [1.4101824079241072, 0.7528326681682042, 0.6537288427352905, 0.7368226562227521, 0.6075040783200946, 0.5626176255089896, 0.5504359006881714, 0.5240703991481236, 0.5350321360996791, 0.5236350979123797, 0.5160932881491525], "val_accuracy": [0.41366666555404663, 0.6813333630561829, 0.718666672706604, 0.6493333578109741, 0.7183333039283752, 0.762666642665863, 0.7559999823570251, 0.750333309173584, 0.7433333396911621, 0.753000020980835, 0.7580000162124634]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 0, 3, 7, 3, 0, 1, 1, 2, 2, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 1, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.6674285531044006, "mapping_values": [1, 2, 2, 1, 1, 0, 19, 19, 11, 8, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.subtract(grad, tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.square(grad), tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0774496531584132, 1.8127530650566, 1.0054213954882458, 0.8589839283438438, 0.8224392488033954, 0.805207957436994, 0.7875070592604766, 0.8523740949191122, 11.277696477549659, NaN, NaN], "accuracy": [0.35068023204803467, 0.38026681542396545, 0.6371681690216064, 0.6882842183113098, 0.6999075412750244, 0.6999075412750244, 0.7112666964530945, 0.7055870890617371, 0.6058644652366638, 0.09734513610601425, 0.09998679161071777], "val_loss": [1.8977951322283064, 0.8421813760484967, 0.6227941513061523, 0.5398013762065342, 0.5363160712378365, 0.5319230045591082, 0.5406688962663923, 0.6648729869297573, 16211.435825892857, NaN, NaN], "val_accuracy": [0.3696666657924652, 0.6833333373069763, 0.7223333120346069, 0.7583333253860474, 0.7609999775886536, 0.7670000195503235, 0.7670000195503235, 0.7379999756813049, 0.15299999713897705, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 0, 3, 7, 3, 0, 4, 1, 2, 4, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 3, 3, 3, 1, 1, 1, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 91, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10400000214576721, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.30291128668724, 2.258998450664812, 2.33883087941448, 2.303057709453191, 2.303496293765899, 2.303145108048501], "accuracy": [0.1744815707206726, 0.17210407555103302, 0.09668471664190292, 0.1018359512090683, 0.09417514503002167, 0.09985470771789551], "val_loss": [1.9806767191205705, 2.141564437321254, 1.9739231382097517, 1.9736730711800712, 1.9736218452453613, 1.9736661229814803], "val_accuracy": [0.10400000214576721, 0.1003333330154419, 0.10133333504199982, 0.10133333504199982, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 3, 7, 3, 0, 5, 8, 2, 3, 5, 8, 6, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 2, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10400000214576721, "mapping_values": [1, 2, 2, 1, 1, 0, 17, 17, 10, 7, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, grad))), beta)))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.302911804620191, 2.248983801127645, 2.3381058049948305, 2.3030893892077344, 2.3032905658663476, 2.303296265585107], "accuracy": [0.1744815707206726, 0.17157575488090515, 0.1006472036242485, 0.09642054885625839, 0.10091137140989304, 0.09576013684272766], "val_loss": [1.9806842122759138, 2.1457719802856445, 1.9738494328090124, 1.9736502511160714, 1.9736426217215401, 1.9736366953168596], "val_accuracy": [0.10400000214576721, 0.1003333330154419, 0.10133333504199982, 0.10133333504199982, 0.09966666996479034, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 9, 3, 7, 3, 0, 1, 1, 2, 4, 4, 0, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [53, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10028571635484695, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [30.978489704734187, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2078985571861267, 0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [378349.4285714286, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10733333230018616, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 3, 7, 3, 8, 2, 4, 2, 4, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 91, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [6, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, alpha)), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [9.206706645185753e+20, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05309734493494034, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 0, 3, 7, 2, 0, 5, 1, 2, 4, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 91, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [66, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 9, 3, 7, 3, 0, 1, 1, 2, 4, 4, 0, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 3, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [84, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, beta), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [9, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 1, 3, 7, 3, 0, 1, 1, 2, 4, 4, 0, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 1, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 22, 22, 12, 10, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), grad))), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.pow(alpha, alpha)), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [468999358.89168084, 67486921187.66451, 1162956809335.6987, 8230332775381.125, 35884205723453.77, 121007521340649.05], "accuracy": [0.09708096832036972, 0.09615638852119446, 0.10474177449941635, 0.10302469879388809, 0.10394927859306335, 0.1002509593963623], "val_loss": [3823511698.285714, 206045904896.0, 2211420120210.2856, 12055747905828.572, 45157757110564.57, 133202418822582.86], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 6, 3, 4, 1, 0, 5, 4, 4, 3, 6, 2, 4, 1, 3, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 93, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 4, 5, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.pow(grad, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 9, 3, 7, 3, 0, 1, 1, 2, 4, 4, 0, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 2, 3, 1, 1, 3, 3, 0, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 3, 1, 3, 0, 5, 4, 4, 3, 6, 2, 4, 1, 3, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 3, 3, 2, 1, 1, 3, 3, 0, 1, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 36, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [6, 2], [76], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.09828571230173111, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 11, 10, 1, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, alpha))), alpha), tf.math.add(beta, grad)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.312699685558399, 2.3749188251971507, 2.5408930727173042, 2.8223497493785716, 3.2075689140012975, 3.6659201800374466, 4.085068483079319, 4.433903647546109], "accuracy": [0.09298639744520187, 0.09668471664190292, 0.10091137140989304, 0.10474177449941635, 0.10593052208423615, 0.10051512718200684, 0.1006472036242485, 0.10487385839223862], "val_loss": [1.9812058040073939, 2.0318947519574846, 2.1420958382742747, 2.312941210610526, 2.5210515430995395, 2.7265560967581615, 2.8948140825544084, 2.9964147976466586], "val_accuracy": [0.08900000154972076, 0.09666666388511658, 0.09866666793823242, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 1, 3, 9, 8, 0, 2, 1, 2, 9, 5, 2, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 28, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 3, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 6, 2, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.3023081245895987, 2.302987328893268, 2.3024762182849163, 2.302101254321486, 2.3010959768843233, 2.302378950306705], "accuracy": [0.09760929644107819, 0.09457138925790787, 0.09325055778026581, 0.08915598690509796, 0.09259014576673508, 0.09100515395402908], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]