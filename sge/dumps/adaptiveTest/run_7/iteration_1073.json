[{"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 2, 2, 4, 2, 9, 5, 3, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [3, 2], [93], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.7888571619987488, "mapping_values": [1, 26, 26, 15, 11, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 13, 7, 6, 2], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad)), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, alpha))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(sigma, beta), sigma))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2529350347396737, 2.0366244759967125, 1.5751166275983253, 1.2140385026645824, 1.0511005114192709, 0.97412369194095, 0.8918572472008134, 0.84769251813915, 0.8030151039334399, 0.7971767446289697, 0.7647214288945211, 0.7545551356701189, 0.7251234504808414, 0.7186214594777391, 0.7108380909782311, 0.6945131067996012, 0.6865897907982129, 0.6707304445917203, 0.657350529225873, 0.6608909543132769, 0.6453465618209879, 0.6382711713796814, 0.6286231351015259, 0.6340448906975589, 0.6335696641558969, 0.6094774125494962, 0.6076963419187432, 0.6056708209880859, 0.5923825990349121, 0.5865273431165895, 0.5953581249236809, 0.5799374279407793, 0.578069803083672, 0.5844720633211641], "accuracy": [0.20803064107894897, 0.40047550201416016, 0.502971887588501, 0.5852595567703247, 0.633469820022583, 0.6617355942726135, 0.6840575933456421, 0.7008321285247803, 0.7079645991325378, 0.7123233675956726, 0.719852089881897, 0.7275128960609436, 0.7337207794189453, 0.7358341217041016, 0.7412495017051697, 0.7470611333847046, 0.7474573850631714, 0.7540615797042847, 0.7598732113838196, 0.7535332441329956, 0.7635715007781982, 0.7619865536689758, 0.7672698497772217, 0.7666094303131104, 0.7675340175628662, 0.7681944370269775, 0.7736098170280457, 0.7749306559562683, 0.7847048044204712, 0.7819310426712036, 0.785101056098938, 0.787082314491272, 0.7865539789199829, 0.785629391670227], "val_loss": [1.8440879413059779, 1.4737982068743025, 1.0106921536581857, 0.8026975733893258, 0.7257526602063861, 0.6651836633682251, 0.6296863385609218, 0.6022108112062726, 0.6027510336467198, 0.5643521547317505, 0.5801952225821358, 0.5525892632348197, 0.5444433348519462, 0.5355770928519112, 0.519584059715271, 0.507295915058681, 0.4990316118512835, 0.49180974279131207, 0.4910635437284197, 0.49229226793561665, 0.48359748295375277, 0.4843931368419102, 0.47578721387045725, 0.4731170449938093, 0.4684292418616159, 0.4697328976222447, 0.452568667275565, 0.45894478048597065, 0.44674549783979145, 0.4478537440299988, 0.45503108842032297, 0.4542536735534668, 0.45148772852761404, 0.4466968263898577], "val_accuracy": [0.4206666648387909, 0.5479999780654907, 0.6470000147819519, 0.6936666369438171, 0.7023333311080933, 0.7179999947547913, 0.7413333058357239, 0.7446666955947876, 0.7243333458900452, 0.7553333044052124, 0.7336666584014893, 0.7523333430290222, 0.7556666731834412, 0.7680000066757202, 0.7770000100135803, 0.781000018119812, 0.7739999890327454, 0.7853333353996277, 0.7829999923706055, 0.777999997138977, 0.7893333435058594, 0.7863333225250244, 0.7910000085830688, 0.7883333563804626, 0.7900000214576721, 0.7786666750907898, 0.8059999942779541, 0.7913333177566528, 0.8133333325386047, 0.8056666851043701, 0.7993333339691162, 0.7990000247955322, 0.7950000166893005, 0.7979999780654907]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [5, 3, 3, 3, 2, 2, 8, 2, 9, 5, 3, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 0, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [3, 2], [93], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.25285714864730835, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.6179441762024056, 2.310416420138098, 2.3053444172208337, 2.3039718774866826, 2.303519340317877, 2.3035384657644027, 2.3024954023362465, 2.249303102650741, 2.327833827680931, 2.304013711586447, 2.302977954013992, 2.303034408863084, 2.303033786222463], "accuracy": [0.16417910158634186, 0.09708096832036972, 0.09298639744520187, 0.09694888442754745, 0.0956280529499054, 0.09470347315073013, 0.09959053993225098, 0.14859332144260406, 0.1430458277463913, 0.10236428678035736, 0.09655263274908066, 0.09602430462837219, 0.09787346422672272], "val_loss": [1.985438551221575, 1.9752333504813058, 1.97384854725429, 1.9739247730800085, 1.9735984802246094, 1.9733967781066895, 1.9713539396013533, 1.9445116179330009, 1.9750266075134277, 1.9738121032714844, 1.9737467765808105, 1.9737035206386022, 1.9737257957458496], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.1003333330154419, 0.09966666996479034, 0.12700000405311584, 0.17033334076404572, 0.18733333051204681, 0.09799999743700027, 0.09799999743700027, 0.09866666793823242, 0.1003333330154419, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 2, 0, 3, 2, 2, 2, 4, 2, 3, 0, 0, 3, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 6, 3, 8, 6], [3, 2], [93], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [55, 4, 44, 92]], "fitness": -0.23885715007781982, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 7, 6, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(sigma, beta), sigma))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3012694639221802, 2.3015502502795115, 2.3023732961869556, 2.300541107161107, 2.3010051505535096, 2.3014377316684143, 2.301063742572763, 2.301505754243082, 2.3002527926529024, 2.29929689560521, 2.29851338873135, 2.299495372758361, 2.2995118276711706, 2.2997474951310135, 2.299566916817325, 2.2983541382837602, 2.2974542658862154, 2.298005990348456, 2.2986914088398223, 2.296883148555632, 2.297052255978658, 2.2968673683066236, 2.297347207851004, 2.2968016076695728, 2.2965387050045196, 2.2961698661406658, 2.2957505943941765, 2.2942216074808384, 2.295780977694555, 2.294529394246269, 2.293696729152147, 2.2943628300702206, 2.293029759081678, 2.293554311352257, 2.2942875939085656, 2.2943120243338044, 2.292282388037411, 2.293067043389091, 2.2930542712261364, 2.2912366832362316, 2.2917024952907763, 2.2922296266766145, 2.291465001099334, 2.2926112391520106, 2.291685080090534, 2.2914854041998804, 2.292712803419791, 2.289707492135063, 2.2903937051135945, 2.288208502190161, 2.2897787889264687, 2.29013122083835, 2.2902924367985027, 2.289193430061527, 2.288199684387185, 2.289030693588539, 2.2884896626294235, 2.2867907256561106, 2.2892613923938567, 2.287878407841235, 2.286688929645849, 2.2864079150415413, 2.287865148763993, 2.286300048474166, 2.2851754856021445, 2.2857733961928397, 2.2858066889178783, 2.28658281901824, 2.2850134889164053, 2.2848190880879877, 2.285510038986277, 2.284407890987686, 2.283597046216371, 2.284943265055842, 2.284340015633578, 2.2818117648414287, 2.2829889299185866, 2.2825727739574697, 2.283394800342857, 2.2824117288046573, 2.2819249936067165, 2.28079923344578, 2.2812397666752786, 2.280335604317861, 2.2809029745939084, 2.280497477212366, 2.281731550483467, 2.280605387583763, 2.280538565415622, 2.28172239626183, 2.2797068015002715, 2.279607184133856, 2.2793553812061997, 2.2793625223323293, 2.2801368090423373, 2.27900758389201, 2.2779554115892986, 2.2764890095057377, 2.277069780537166, 2.2767686578087787], "accuracy": [0.0948355570435524, 0.08809932321310043, 0.09140139818191528, 0.09338264167308807, 0.09998679161071777, 0.09589222073554993, 0.10011887550354004, 0.09113723784685135, 0.09153348207473755, 0.10355303436517715, 0.09800554811954498, 0.09087307006120682, 0.09681680053472519, 0.1014397069811821, 0.09721305221319199, 0.0956280529499054, 0.09906221181154251, 0.09734513610601425, 0.09972262382507324, 0.10659094154834747, 0.10632677376270294, 0.10910051316022873, 0.10659094154834747, 0.10606260597705841, 0.10500594228506088, 0.10460969805717468, 0.10342095047235489, 0.11306300014257431, 0.10315678268671036, 0.10460969805717468, 0.11610091477632523, 0.11306300014257431, 0.11134592443704605, 0.11887465417385101, 0.11306300014257431, 0.10896842926740646, 0.10830801725387573, 0.10870426893234253, 0.11676132678985596, 0.11676132678985596, 0.11874257028102875, 0.11557257920503616, 0.11781799048185349, 0.11517632752656937, 0.12178047746419907, 0.1146479994058609, 0.1154404953122139, 0.1216483935713768, 0.11979923397302628, 0.12455421686172485, 0.12679962813854218, 0.11715757846832275, 0.12032756209373474, 0.11530841141939163, 0.1266675442457199, 0.12151630967855453, 0.12296922504901886, 0.1282525360584259, 0.12362963706254959, 0.12574297189712524, 0.13089419901371002, 0.13261127471923828, 0.12600713968276978, 0.12957337498664856, 0.13432836532592773, 0.13815876841545105, 0.13155461847782135, 0.1356491893529892, 0.1352529376745224, 0.13419628143310547, 0.1344604343175888, 0.1352529376745224, 0.13908334076404572, 0.13855500519275665, 0.1352529376745224, 0.14291374385356903, 0.14291374385356903, 0.136045441031456, 0.14278165996074677, 0.1434420794248581, 0.14410249888896942, 0.14780081808567047, 0.14278165996074677, 0.14978206157684326, 0.14714039862155914, 0.15110288560390472, 0.146479994058609, 0.14740456640720367, 0.15176330506801605, 0.14093250036239624, 0.14898955821990967, 0.14898955821990967, 0.15202747285366058, 0.15202747285366058, 0.14832915365695953, 0.14621582627296448, 0.1534803807735443, 0.1574428677558899, 0.15519747138023376, 0.16180160641670227], "val_loss": [1.9707467215401786, 1.970517362867083, 1.9702860287257604, 1.9700531278337752, 1.9698190689086914, 1.9695837838309151, 1.9693522453308105, 1.9691169602530343, 1.9688842637198312, 1.96865143094744, 1.968421391078404, 1.9681900569370814, 1.9679604257856096, 1.9677324295043945, 1.9675029345921107, 1.967273235321045, 1.9670420374189104, 1.9668101583208357, 1.9665769849504744, 1.9663464001246862, 1.9661154747009277, 1.9658843449183874, 1.9656527382986886, 1.9654246057782854, 1.9651950427464075, 1.9649675233023507, 1.9647379602704729, 1.9645072392054967, 1.964278084891183, 1.9640500886099679, 1.9638214111328125, 1.963590213230678, 1.9633611951555525, 1.9631318364824568, 1.9629039764404297, 1.9626761845179967, 1.9624487331935339, 1.9622209412711007, 1.961993898664202, 1.9617674010140556, 1.9615402221679688, 1.961313247680664, 1.9610858644757951, 1.9608588899884904, 1.960629667554583, 1.9604026930672782, 1.9601761954171317, 1.959949152810233, 1.9597197941371374, 1.9594902311052596, 1.9592612811497279, 1.9590326036725725, 1.9588023594447546, 1.9585740906851632, 1.9583444595336914, 1.9581174169267928, 1.9578920091901506, 1.9576656477791923, 1.957436970302037, 1.9572091102600098, 1.9569813183375768, 1.956751823425293, 1.9565239633832658, 1.956296512058803, 1.9560681070600237, 1.9558402470179967, 1.95561306817191, 1.9553865705217635, 1.95515809740339, 1.9549288749694824, 1.9547004699707031, 1.9544717243739538, 1.95424257005964, 1.9540146418980189, 1.9537860325404577, 1.9535575594220842, 1.953329086303711, 1.953098978315081, 1.95287139075143, 1.9526406696864538, 1.9524106298174178, 1.9521826335362025, 1.9519549778529577, 1.9517240524291992, 1.9514945575169154, 1.95126553944179, 1.951038428715297, 1.9508100237165178, 1.950580324445452, 1.9503494671412878, 1.9501183373587472, 1.9498893874032157, 1.949659756251744, 1.9494317599705286, 1.94920015335083, 1.948972293308803, 1.9487416403634208, 1.9485092163085938, 1.9482786314828056, 1.9480466161455428], "val_accuracy": [0.036666665226221085, 0.03766666725277901, 0.03933333232998848, 0.03966666758060455, 0.04066666588187218, 0.041333332657814026, 0.04333333298563957, 0.04500000178813934, 0.04800000041723251, 0.05066666752099991, 0.052000001072883606, 0.05400000140070915, 0.05533333495259285, 0.05833333358168602, 0.059333331882953644, 0.061000000685453415, 0.06266666948795319, 0.06433333456516266, 0.0663333311676979, 0.0676666647195816, 0.07000000029802322, 0.07133333384990692, 0.0729999989271164, 0.07466666400432587, 0.07633333653211594, 0.07900000363588333, 0.08166666328907013, 0.0833333358168602, 0.08566666394472122, 0.08799999952316284, 0.09033333510160446, 0.09266666322946548, 0.09533333033323288, 0.09799999743700027, 0.09966666996479034, 0.10133333504199982, 0.10499999672174454, 0.10766666382551193, 0.1106666699051857, 0.11266666650772095, 0.11566666513681412, 0.11766666918992996, 0.12033333629369736, 0.12266666442155838, 0.12433333694934845, 0.12566666305065155, 0.12800000607967377, 0.12966667115688324, 0.12999999523162842, 0.13333334028720856, 0.13566666841506958, 0.13733333349227905, 0.14033333957195282, 0.14133332669734955, 0.14233332872390747, 0.14433333277702332, 0.14666666090488434, 0.14933332800865173, 0.15033333003520966, 0.1523333340883255, 0.15433333814144135, 0.15700000524520874, 0.15966667234897614, 0.1613333374261856, 0.1626666635274887, 0.16466666758060455, 0.16599999368190765, 0.16899999976158142, 0.17166666686534882, 0.17466667294502258, 0.17733334004878998, 0.1783333271741867, 0.18166667222976685, 0.18333333730697632, 0.18566666543483734, 0.18799999356269836, 0.18833333253860474, 0.1899999976158142, 0.19333332777023315, 0.1966666728258133, 0.19766665995121002, 0.19966666400432587, 0.20233333110809326, 0.20499999821186066, 0.20766666531562805, 0.20733332633972168, 0.20900000631809235, 0.21166667342185974, 0.2150000035762787, 0.21566666662693024, 0.21699999272823334, 0.21966665983200073, 0.22233332693576813, 0.2240000069141388, 0.22599999606609344, 0.22699999809265137, 0.2290000021457672, 0.2303333282470703, 0.23100000619888306, 0.23366667330265045]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 1, 3, 3, 2, 2, 6, 3, 8, 0, 0, 0, 2, 1, 1, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 0, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [4, 2], [93], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.11457142978906631, "mapping_values": [1, 29, 29, 16, 13, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.divide_no_nan(alpha, tf.math.multiply(tf.math.sqrt(grad), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(grad, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.6066969322443416, 2.310401251507851, 2.3053819813260374, 2.303793280494054, 2.3034656496253296, 2.303694773910698], "accuracy": [0.16378284990787506, 0.09628847241401672, 0.09377889335155487, 0.09694888442754745, 0.0940430611371994, 0.09668471664190292], "val_loss": [1.985574449811663, 1.9751630510602678, 1.9738802228655135, 1.9738402366638184, 1.9736401694161552, 1.9735044070652552], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.1003333330154419, 0.09966666996479034, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 2, 0, 3, 2, 2, 2, 4, 2, 3, 0, 0, 3, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [78, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 6, 3, 8, 6], [3, 2], [93], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [81, 33, 44, 92]], "fitness": -0.11371428519487381, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.656811012426277, 2.310926158146977, 2.305600097670358, 2.3039862800661632, 2.303549613305181, 2.3036280167400403], "accuracy": [0.16391493380069733, 0.09813763201236725, 0.09206181764602661, 0.0944393053650856, 0.0956280529499054, 0.09272222965955734], "val_loss": [1.9864110265459334, 1.9753337587629045, 1.973888874053955, 1.9739466394696916, 1.9736225264413017, 1.9734064510890417], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.1003333330154419, 0.09966666996479034, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 6, 3, 3, 2, 2, 4, 2, 9, 2, 8, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [3, 2], [93], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [81, 33, 44, 92]], "fitness": -0.11314285546541214, "mapping_values": [1, 26, 26, 15, 11, 2, 1, 1, 0, 1, 0, 6, 3, 3, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.609949220582526, 2.310488213196627, 2.3053089249104146, 2.303806700647909, 2.3035205441884172, 2.3036352859401843], "accuracy": [0.16391493380069733, 0.09668471664190292, 0.09140139818191528, 0.0952318087220192, 0.09351472556591034, 0.0948355570435524], "val_loss": [1.985797950199672, 1.9751332146780831, 1.9738807678222656, 1.9738948685782296, 1.9736651011875697, 1.9735815184456962], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.1003333330154419, 0.09966666996479034, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 9, 0, 4, 3, 2, 2, 3, 0, 4, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3, 8, 6], [3, 2], [93], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [81, 97, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 11, 8, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), sigma), beta)), sigma)), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 6, 0, 2, 2, 2, 2, 4, 2, 3, 0, 0, 1, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [2, 2, 0, 1, 2, 0, 0, 0, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [78, 2, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 6, 3, 8, 6], [3, 2], [93], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 3, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [81, 15, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 16, 13, 5, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.pow(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(grad, tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08770307898521423, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 2, 2, 4, 9, 9, 5, 3, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [3, 2], [93], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 6, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [48, 48, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), alpha), tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), alpha))))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08770307898521423, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 2, 2, 4, 3, 2, 3, 3, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0], [6, 8, 6, 3, 8, 6], [7, 2], [93], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 6, 2, 8, 1, 6, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 0, 1, 1, 0, 3], [81, 69, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 45, 45, 26, 19, 4, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 11, 6, 5, 2], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.pow(tf.math.multiply(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), grad)), alpha))))), grad)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(beta, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(tf.math.subtract(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 0, 3, 2, 2, 4, 3, 2, 5, 3, 2, 0, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 2, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 6, 3, 8, 6], [3, 2], [93], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 3, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [81, 33, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 13, 11, 1, 10, 10, 6, 4, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), grad)))))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.pow(tf.math.add(tf.math.add(beta, grad), alpha), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 2, 2, 9, 3, 2, 5, 8, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 2, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 8, 1, 3, 8, 6], [3, 2], [93], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 3, 6, 2, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [81, 33, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 18, 10, 8, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(sigma, beta), sigma))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.math.square(alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 9, 2, 2, 4, 2, 9, 5, 3, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 98, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [3, 2], [93], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 3, 3, 0, 1, 0, 0], [81, 33, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 17, 10, 7, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(grad, tf.math.add(alpha, alpha)), tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad))), tf.math.square(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.math.negative(beta), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), sigma)), sigma), tf.math.add(sigma, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.square(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 5, 3, 2, 2, 2, 4, 2, 3, 0, 0, 3, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 3, 2, 1, 2, 1, 2, 1, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [78, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3, 8, 6], [3, 2], [93], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [61, 18, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 7, 5, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [217.2029798182955, 2.340848614463811, 2.316224728278071, 2.306807773618052, 2.303965966966977, 4.265421624322845, 2668169304540.1157], "accuracy": [0.09245806187391281, 0.09417514503002167, 0.09338264167308807, 0.09694888442754745, 0.09959053993225098, 0.09285431355237961, 0.09826971590518951], "val_loss": [2.021158150264195, 1.9915761266435896, 1.9792436872209822, 1.9753056253705705, 1.9741143499101912, 1.9738244329180037, 1.9963553292410714], "val_accuracy": [0.09866666793823242, 0.1003333330154419, 0.09866666793823242, 0.1003333330154419, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 6, 3, 3, 2, 2, 4, 3, 2, 5, 3, 0, 2, 8, 2, 4, 5, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [28, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 5, 1, 3, 8, 1], [3, 2], [93], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 3, 0, 1, 0, 3], [81, 84, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 14, 12, 0, 1, 1, 0, 1, 0, 9, 5, 5, 0, 0, 19, 11, 8, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(grad, alpha))), tf.math.multiply(grad, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.multiply(alpha, tf.math.add(alpha, alpha))))))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(sigma, beta), sigma))), tf.math.negative(tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 2, 2, 4, 2, 9, 5, 3, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 84, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3], [3, 2], [93], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 0, 0, 3, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 21, 12, 9, 4], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, alpha)))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(sigma, tf.math.add(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.negative(sigma)), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.pow(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 2, 2, 4, 2, 9, 5, 3, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [0, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3, 8, 6], [3, 2], [93], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 2, 8, 1, 0, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 0, 0, 1, 0, 3], [48, 33, 68, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08770307898521423, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [5, 9, 3, 3, 2, 2, 2, 4, 5, 5, 0, 0, 3, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [73, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0], [6, 1, 1, 3], [3, 2], [93], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 1, 8, 2, 1, 6, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 0, 3, 2, 0, 0, 1, 0, 3], [81, 33, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 19, 11, 8, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.subtract(beta, tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), sigma), beta), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09417514503002167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [2, 8, 5, 6, 4, 2, 4, 3, 2, 2, 4, 3, 2, 8, 2, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [3, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 1, 3, 8, 6], [3, 2], [93], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 6, 8, 2, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 0, 3, 2, 3, 0, 1, 0, 3], [81, 33, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 6, 3, 3, 0, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), alpha)), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3013741904246006, 2.3019022980953143, 2.302976997662938, 2.3014002072419064, 2.3021202722576395, 2.3028092075096476], "accuracy": [0.09457138925790787, 0.08770307898521423, 0.09021265059709549, 0.09047681838274002, 0.09800554811954498, 0.09311848133802414], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 2, 2, 4, 1, 4, 2, 3, 0, 2, 8, 3, 4, 9, 6, 0, 4, 4, 5, 2, 1, 9, 6, 9, 2, 9, 2, 8, 0, 1, 5, 0, 9, 9, 6, 8, 1, 4, 5, 3, 9, 1, 6, 8, 4, 3, 1, 6, 5, 9, 5], [2, 2, 0, 1, 2, 2, 0, 0, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 3, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [94, 89, 76, 80, 1, 39, 33, 75, 29, 39, 88, 45, 77, 73, 79, 8], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 0, 8, 4, 2, 2, 0, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 1, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [80, 20, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [6, 8, 6, 3, 8, 6], [3, 2], [93], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 3, 6, 2, 8, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 3, 3, 2, 3, 0, 1, 0, 3], [48, 33, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 29, 29, 15, 14, 4, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 12, 6, 6, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.math.multiply(grad, tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(tf.math.sqrt(sigma), tf.math.subtract(sigma, beta))), sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3013741904246006, 2.3019022980953143, 2.302976997662938, 2.3014002072419064, 2.3021202722576395, 2.3028092075096476], "accuracy": [0.09457138925790787, 0.08770307898521423, 0.09021265059709549, 0.09047681838274002, 0.09800554811954498, 0.09311848133802414], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]