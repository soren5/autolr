[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 9, 7, 9, 2, 0, 4, 6, 3, 2, 2, 2, 1, 9, 0, 8, 2, 2, 5, 9, 2, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 0, 4, 0, 0, 2, 3, 2, 1, 0, 2, 2, 1, 0, 3, 4, 2, 2, 3, 3, 0, 3, 0, 0], [26, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1], [0, 0], [2, 8], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8059999942779541, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 6, 3, 2, 4, 2, 2, 0, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), grad)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.020267591075245, 1.4430242564621194, 1.0346175228773153, 0.9177204770592178, 0.814323224214877, 0.7762936662059371, 0.7631301374609255, 0.6997801906727781, 0.6911599687723168, 0.6765280198805274, 0.6486583995057009, 0.63707023896026, 0.62688692529928, 0.6176466397825974, 0.598696672566862, 0.5846118436135541, 0.5705756076440961, 0.588906421889372, 0.5841399090102068, 0.5327342709041999, 0.5380948956112552, 0.5340741461750822, 0.5202275295818739, 0.5242379033774937, 0.5096997327698126, 0.5158338009201068, 0.5090383365799518, 0.4777215905807368, 0.4830760044656992, 0.4873308077850173, 0.47200126830833367, 0.47471825119337746, 0.4770991700420826, 0.4639468008989136, 0.45648234561843454, 0.44356707792634176, 0.423620628776835, 0.4217583565168125, 0.4260816283906849, 0.43586043383876455, 0.41071812539068525, 0.4212310759146704, 0.41137185653029745, 0.4122635750935267, 0.3957637455430029], "accuracy": [0.33403778076171875, 0.49531105160713196, 0.6174877882003784, 0.6623960137367249, 0.6956809163093567, 0.7086250185966492, 0.7094175219535828, 0.7395324110984802, 0.7331924438476562, 0.7359662055969238, 0.7574957013130188, 0.7514199018478394, 0.7588165402412415, 0.7633073329925537, 0.7763835787773132, 0.7779685854911804, 0.7876105904579163, 0.7668735980987549, 0.7774402499198914, 0.8037247657775879, 0.7991018295288086, 0.8017435073852539, 0.8005547523498535, 0.8001585006713867, 0.8094043135643005, 0.8070268034934998, 0.8082155585289001, 0.8248580098152161, 0.8138951063156128, 0.816008448600769, 0.8261788487434387, 0.8257825970649719, 0.8211596608161926, 0.8285563588142395, 0.8335754871368408, 0.8341038227081299, 0.8438779711723328, 0.845859169960022, 0.8383304476737976, 0.8376700282096863, 0.8507462739944458, 0.8462554216384888, 0.8494254350662231, 0.8444063067436218, 0.8507462739944458], "val_loss": [1.6021367481776647, 0.7765324115753174, 0.7033006974628994, 0.6068940332957676, 0.5685347318649292, 0.5784554140908378, 0.5834985460553851, 0.5294233049665179, 0.5354296309607369, 0.4906917299543108, 0.5039037125451225, 0.47497211183820454, 0.5309005805424282, 0.4625170571463449, 0.4659952436174665, 0.4393534745488848, 0.46615965025765554, 0.4636929716382708, 0.44090776784079416, 0.4306954826627459, 0.4121644156319754, 0.4203497682298933, 0.39691958257130217, 0.397689231804439, 0.3842623914991106, 0.45145678520202637, 0.38689652511051725, 0.38555688517434256, 0.3951984558786665, 0.3719611849103655, 0.3737287436212812, 0.3954419663974217, 0.41274657419749666, 0.37403703587395803, 0.35521782296044485, 0.3551442623138428, 0.36572020394461496, 0.3614324246134077, 0.350398702280862, 0.3379041382244655, 0.34071495703288485, 0.3426854269845145, 0.37818281991141184, 0.3336495842252459, 0.3327237793377468], "val_accuracy": [0.40566667914390564, 0.6930000185966492, 0.706333339214325, 0.734333336353302, 0.7536666393280029, 0.750333309173584, 0.7193333506584167, 0.7549999952316284, 0.7450000047683716, 0.781333327293396, 0.7673333287239075, 0.7916666865348816, 0.7553333044052124, 0.7900000214576721, 0.8036666512489319, 0.8086666464805603, 0.781000018119812, 0.7960000038146973, 0.7963333129882812, 0.8053333163261414, 0.828000009059906, 0.8173333406448364, 0.8299999833106995, 0.8296666741371155, 0.8376666903495789, 0.7836666703224182, 0.8363333344459534, 0.8330000042915344, 0.8289999961853027, 0.8443333506584167, 0.8460000157356262, 0.8186666369438171, 0.8109999895095825, 0.8389999866485596, 0.8483333587646484, 0.8486666679382324, 0.8453333377838135, 0.8386666774749756, 0.846666693687439, 0.8633333444595337, 0.859666645526886, 0.8519999980926514, 0.824999988079071, 0.8569999933242798, 0.859333336353302]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [7, 2, 9, 3, 5, 2, 3, 4, 6, 6, 2, 1, 2, 3, 3, 8, 8, 3, 7, 2, 9, 9, 5, 4, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8005714416503906, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))), tf.math.multiply(beta, grad)), tf.math.multiply(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.sqrt(alpha)))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.020253037086898, 1.4432848576998052, 1.0402996458192906, 0.9080872695207627, 0.7922685841968613, 0.780965830506335, 0.7586098607772723, 0.7029181166473649, 0.6988157056908739, 0.6834463272915383, 0.6386232109605802, 0.6421361350191268, 0.6219925268403984, 0.6191224398834673, 0.6017473492451064, 0.580214648254008, 0.5873483648043204, 0.5956137513739637, 0.574257204758099, 0.5337453309523825, 0.5454978342022264, 0.5277284958721262, 0.5201348983348715, 0.5233759415651971, 0.5068022275581934, 0.5152589119326216, 0.5029729804452919, 0.47866473508044916, 0.48175362240621017, 0.48518099383419183, 0.4707342910846904, 0.47676064741058816, 0.4806593782346577, 0.458009875725289, 0.45213849538463124, 0.44723938042776473, 0.42458356580540896, 0.42302230840125465, 0.4224354474378567, 0.43049109751648196, 0.41490130146355, 0.4248570594702887, 0.4203794105508623, 0.4066316504732587, 0.3959497246074954], "accuracy": [0.33403778076171875, 0.4966318905353546, 0.616299033164978, 0.6679434776306152, 0.6989829540252686, 0.703209638595581, 0.7144366502761841, 0.7383436560630798, 0.7345132827758789, 0.7345132827758789, 0.7593448758125305, 0.7486461400985718, 0.7640998363494873, 0.7630431652069092, 0.7740060687065125, 0.7804781198501587, 0.7783648371696472, 0.7668735980987549, 0.7799497842788696, 0.8005547523498535, 0.7936864495277405, 0.8059701323509216, 0.8058380484580994, 0.8006868362426758, 0.81112140417099, 0.8057059645652771, 0.8119139075279236, 0.8259146809577942, 0.8150838613510132, 0.8169330358505249, 0.8278959393501282, 0.8234050869941711, 0.8215559124946594, 0.8330471515655518, 0.8343679904937744, 0.8355567455291748, 0.8422929644584656, 0.8400475382804871, 0.8430854678153992, 0.8401796221733093, 0.8490291833877563, 0.8446704745292664, 0.8454629778862, 0.848368763923645, 0.8544445633888245], "val_loss": [1.6021877697535925, 0.7734470367431641, 0.6992088896887643, 0.6279063735689435, 0.602855920791626, 0.602394700050354, 0.6129557745797294, 0.5398544584001813, 0.5190818650381905, 0.48987187658037457, 0.48224607535770964, 0.48794398988996235, 0.5259641919817243, 0.46952320848192486, 0.45716765948704313, 0.537600040435791, 0.4645035948072161, 0.4579993486404419, 0.430868787424905, 0.44441148212977816, 0.41452782494681223, 0.4097600153514317, 0.3968322277069092, 0.4047518031937735, 0.3845427802630833, 0.4465015871184213, 0.3879889930997576, 0.3869509186063494, 0.39491633006504606, 0.3705158659390041, 0.37832285676683697, 0.38768179076058523, 0.3952152132987976, 0.3694752539907183, 0.35950824192592074, 0.3526017495564052, 0.3681449719837734, 0.3599726983479091, 0.3435911791665213, 0.33852964639663696, 0.33902714933667866, 0.3511397923742022, 0.3670646548271179, 0.3361994283539908, 0.3313135930470058], "val_accuracy": [0.4059999883174896, 0.6953333616256714, 0.7073333263397217, 0.7149999737739563, 0.7160000205039978, 0.7136666774749756, 0.7080000042915344, 0.746999979019165, 0.753000020980835, 0.7903333306312561, 0.7896666526794434, 0.778333306312561, 0.7670000195503235, 0.7866666913032532, 0.79666668176651, 0.7459999918937683, 0.784333348274231, 0.7950000166893005, 0.8053333163261414, 0.796999990940094, 0.828000009059906, 0.8209999799728394, 0.8316666483879089, 0.8246666789054871, 0.8363333344459534, 0.7903333306312561, 0.8386666774749756, 0.8333333134651184, 0.8270000219345093, 0.8423333168029785, 0.8393333554267883, 0.8213333487510681, 0.8256666660308838, 0.843666672706604, 0.843999981880188, 0.8446666598320007, 0.8389999866485596, 0.8420000076293945, 0.8560000061988831, 0.8646666407585144, 0.8610000014305115, 0.8513333201408386, 0.8303333520889282, 0.8573333621025085, 0.8629999756813049]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 1, 1, 1, 9, 2, 2, 4, 2, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 0, 9, 2, 8, 6, 5, 6, 1, 2, 2, 7, 2, 1, 8, 2, 3, 8, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 2, 3, 1, 4, 0, 3, 2, 3, 2, 1, 0, 2, 2, 2, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [50, 15, 14, 94, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 8], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7874285578727722, "mapping_values": [1, 2, 2, 1, 1, 0, 59, 59, 34, 25, 5, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(grad, tf.math.pow(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), grad)), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.negative(beta)), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.add(beta, beta)))), grad), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0202839390130296, 1.4425622626318357, 1.0364054439247654, 0.8998505213650825, 0.8368336711152198, 0.7668092345139605, 0.7455137364616515, 0.7006002038288205, 0.7059371820640539, 0.667106542612788, 0.6440249120223918, 0.6244032053096561, 0.6096851994427298, 0.623458903534317, 0.6062469095948224, 0.5858246556535736, 0.579354413968697], "accuracy": [0.3339056968688965, 0.4959714710712433, 0.6170915365219116, 0.6667547225952148, 0.6844538450241089, 0.7119271159172058, 0.7166820764541626, 0.7372870445251465, 0.7294940948486328, 0.7448157668113708, 0.7541936039924622, 0.7605336308479309, 0.7726852297782898, 0.7635715007781982, 0.769911527633667, 0.7771760821342468, 0.7836481332778931], "val_loss": [1.6023056507110596, 0.7735123804637364, 0.7000541687011719, 0.6066996370043073, 0.6373649665287563, 0.5651908942631313, 0.5734291246959141, 0.5327824354171753, 0.5229347433362689, 0.5119826963969639, 0.47909864357539583, 0.47038711820329937, 0.5196668079921177, 0.4625046593802316, 0.464209999356951, 0.5108847107206073, 0.46395581109183176], "val_accuracy": [0.40566667914390564, 0.6953333616256714, 0.7193333506584167, 0.7303333282470703, 0.7229999899864197, 0.7476666569709778, 0.721666693687439, 0.762666642665863, 0.7596666812896729, 0.7599999904632568, 0.7839999794960022, 0.7906666398048401, 0.7633333206176758, 0.7863333225250244, 0.7816666960716248, 0.7476666569709778, 0.7820000052452087]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [7, 2, 1, 7, 8, 5, 6, 0, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 6, 4, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7822856903076172, "mapping_values": [1, 2, 2, 1, 1, 0, 40, 40, 22, 18, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.sqrt(grad), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))))), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.multiply(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, beta))))), alpha))))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9988147357608885, 1.337614366060644, 1.087487657410893, 0.9073819275608372, 0.8058476962150127, 0.8099521378626235, 0.7221892864208779, 0.7222515606703839, 0.7001848352930061, 0.6454180515894187, 0.666716509333943, 0.6311289609588605, 0.6368309781457203, 0.601566649635848, 0.6023763380093486], "accuracy": [0.33866068720817566, 0.5365209579467773, 0.6086382269859314, 0.6553955674171448, 0.6951525807380676, 0.6923788189888, 0.7316074371337891, 0.7244749665260315, 0.7360982894897461, 0.7526086568832397, 0.7493065595626831, 0.7553823590278625, 0.754589855670929, 0.7711002230644226, 0.7714964747428894], "val_loss": [1.466519934790475, 0.8844113009316581, 0.7578532184873309, 0.6598674058914185, 0.6421756233487811, 0.5516425371170044, 0.5533813919339862, 0.5225917782102313, 0.5246994665690831, 0.5180188587733677, 0.5110728740692139, 0.5063080276761737, 0.5333098684038434, 0.5015922955104283, 0.5245207718440464], "val_accuracy": [0.42366665601730347, 0.6023333072662354, 0.6263333559036255, 0.6850000023841858, 0.715666651725769, 0.7540000081062317, 0.7336666584014893, 0.768666684627533, 0.7543333172798157, 0.7756666541099548, 0.753000020980835, 0.762333333492279, 0.7296666502952576, 0.7693333625793457, 0.7473333477973938]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [7, 2, 1, 7, 8, 5, 6, 2, 3, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 4, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.767714262008667, "mapping_values": [1, 2, 2, 1, 1, 0, 38, 38, 22, 16, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, beta), grad)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, beta))))))))))))), alpha)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9988543032781088, 1.3424625863425563, 1.0790925633165704, 0.908151591860182, 0.8193019137894552, 0.8006483332639389, 0.7242104563620491, 0.7259206876558256, 0.6982392295634097, 0.6385846024475329, 0.6635338005734913, 0.6345188542600195, 0.6323878650793766], "accuracy": [0.3385286033153534, 0.5344076156616211, 0.6090344786643982, 0.6540747880935669, 0.6909258961677551, 0.6973979473114014, 0.7308149337768555, 0.719852089881897, 0.7351737022399902, 0.7555144429206848, 0.7519482374191284, 0.7537974119186401, 0.7563069462776184], "val_loss": [1.4661173479897636, 0.8643139089856829, 0.7596664258411953, 0.6587881360735212, 0.6792644432612828, 0.5567635468074253, 0.5914057663508824, 0.5225540740149361, 0.5044098751885551, 0.5341830764498029, 0.510371174131121, 0.49295476504734587, 0.5519187791006905], "val_accuracy": [0.42399999499320984, 0.6039999723434448, 0.625333309173584, 0.6859999895095825, 0.6856666803359985, 0.7519999742507935, 0.7089999914169312, 0.7773333191871643, 0.7710000276565552, 0.7540000081062317, 0.7606666684150696, 0.7739999890327454, 0.7106666564941406]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 4, 7, 9, 5, 0, 6, 6, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 5, 9, 2, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 2, 3, 3, 4, 0, 5, 2, 3, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [93, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1], [0, 0], [2, 8], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7617142796516418, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 6, 4, 1, 4, 2, 2, 0, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.pow(grad, tf.math.add(tf.math.add(beta, beta), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9988201532098107, 1.3377123170635248, 1.0857329835052172, 0.9082900843663128, 0.8141377546594851, 0.8019625373079383, 0.7335670788951633, 0.7220583775843045, 0.7016933320173576, 0.6415624685291255, 0.6511268824508177, 0.6411014210278757, 0.624650485952375], "accuracy": [0.33866068720817566, 0.5363888740539551, 0.6087703108787537, 0.6528860330581665, 0.6927750706672668, 0.6952846646308899, 0.7257958054542542, 0.724739134311676, 0.7318716049194336, 0.7539294958114624, 0.7564390301704407, 0.7491744756698608, 0.7640998363494873], "val_loss": [1.4664113180977958, 0.8808625425611224, 0.7622580528259277, 0.6591507537024361, 0.7157206194741386, 0.5628199917929513, 0.5975323915481567, 0.5266612086977277, 0.516940746988569, 0.5146894965853009, 0.5421763999121529, 0.5141470943178449, 0.5127969639641898], "val_accuracy": [0.42366665601730347, 0.6013333201408386, 0.621999979019165, 0.6846666932106018, 0.6656666398048401, 0.753333330154419, 0.7093333601951599, 0.7743333578109741, 0.7620000243186951, 0.7713333368301392, 0.7300000190734863, 0.7649999856948853, 0.7563333511352539]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0], [7, 2, 1, 7, 8, 5, 6, 0, 3, 3, 2, 3, 2, 3, 3, 3, 9, 2, 7, 4, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 2, 5, 2, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 29, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.6765714287757874, "mapping_values": [1, 2, 2, 1, 1, 0, 30, 30, 17, 13, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)))))))))), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, beta), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, alpha))), tf.math.add(beta, alpha))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9134082956053342, 1.3452644704622978, 0.8866660223582228, 0.7631140927581298, 0.7160615827334698, 0.6895915728203609, 0.6629140508047358, 0.622475469471394, 0.6513414970320985, 0.6458368464436404, 0.6912965917584131, 0.7433826982730951, 0.9137832209292719], "accuracy": [0.36507725715637207, 0.5172368288040161, 0.6785101294517517, 0.7246070504188538, 0.7351737022399902, 0.7405890822410583, 0.7465327978134155, 0.7600052952766418, 0.7622507214546204, 0.7568352818489075, 0.748249888420105, 0.7357020378112793, 0.691850483417511], "val_loss": [1.2174670355660575, 0.7563079595565796, 0.5648916959762573, 0.544332776750837, 0.5078912803104946, 0.4903523751667568, 0.4761453526360648, 0.44715759583881926, 0.48842101437704905, 0.5384283746991839, 0.5360841921397618, 0.5472120557512555, 0.6492324216025216], "val_accuracy": [0.5733333230018616, 0.6779999732971191, 0.7379999756813049, 0.7573333382606506, 0.7793333530426025, 0.7753333449363708, 0.7860000133514404, 0.8069999814033508, 0.7946666479110718, 0.7883333563804626, 0.7906666398048401, 0.7603333592414856, 0.7710000276565552]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [7, 2, 1, 7, 4, 4, 6, 2, 3, 3, 0, 3, 2, 8, 3, 3, 8, 2, 7, 4, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 1, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [15, 50, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.10428571701049805, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.144400301358766, 2.305164881827037, 2.3275953435689987, 2.365290259389105, 2.352022800620647, 2.337584903542203], "accuracy": [0.10870426893234253, 0.09721305221319199, 0.09919429570436478, 0.10434553027153015, 0.09853387624025345, 0.1022322028875351], "val_loss": [1.973827566419329, 1.9776995522635323, 2.020968096596854, 2.004043851579939, 2.015519278390067, 1.984898907797677], "val_accuracy": [0.1133333370089531, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 8, 5, 6, 6, 3, 3, 0, 3, 2, 8, 8, 3, 4, 2, 7, 4, 9, 9, 5, 8, 5, 8, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 3, 5, 2, 3, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [26, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [5, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 24, 24, 13, 11, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.square(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.multiply(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(alpha, grad)))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, beta))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 1, 3, 7, 9, 2, 0, 4, 6, 3, 0, 2, 2, 1, 3, 0, 8, 2, 2, 5, 9, 2, 8, 6, 6, 6, 1, 2, 3, 7, 5, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 2, 3, 1, 4, 0, 5, 3, 3, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [26, 69, 64, 19, 67, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 23, 14, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.negative(grad))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))))))), tf.math.add(beta, tf.math.sqrt(beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07924976944923401, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 1, 8, 7, 0, 3, 0, 8, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 1, 0, 7, 8, 8, 5, 1, 6, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 2, 9, 9, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 0, 1, 2, 3, 0, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [0, 3, 0, 3, 1, 1], [43, 76, 44, 97]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 10, 5, 1, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 10, 6, 4, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.subtract(tf.math.negative(grad), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma)))))", "other_info": {"loss": [2.3022238148863226, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [3, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 2, 5, 5, 3, 2, 3, 2, 3, 3, 3, 3, 2, 7, 2, 9, 4, 5, 3, 5, 5, 1, 2, 3, 2, 8, 1, 8, 2, 3, 5, 5, 6, 4, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 3, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 29, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 1, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 8, 5, 6, 2, 3, 3, 0, 3, 2, 8, 3, 3, 8, 2, 7, 4, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 2, 3, 1, 3, 2, 3, 3, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [15, 50, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [9, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 2, 3, 1, 1], [43, 24, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 36, 36, 20, 16, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.sqrt(grad)))), alpha))), tf.math.multiply(tf.math.add(beta, grad), beta)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, beta)), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022238148863226, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 4, 8, 5, 6, 2, 3, 2, 0, 5, 2, 8, 9, 3, 8, 2, 7, 4, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 1, 3, 3, 1, 5, 3, 3, 3, 1, 3, 1, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 27, 91, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 5, 5, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, grad), tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(alpha)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3009895236343203, 2.321790620367745, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09351472556591034, 0.07858935743570328, 0.0866464152932167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9751575333731515, 2.0034285954066684, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.017999999225139618, 0.09000000357627869, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 1, 8, 7, 5, 3, 0, 1, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68, 4, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 9, 2, 0, 4, 6, 3, 2, 2, 0, 1, 3, 0, 2, 2, 2, 5, 9, 2, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 0, 5, 2, 1, 2, 2, 0, 2, 2, 1, 0, 1, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 3], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 3, 41, 41, 25, 16, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), grad), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad), grad), tf.math.add(tf.math.negative(grad), tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), beta)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.square(beta), tf.math.add(beta, beta))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 8, 5, 6, 2, 3, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 4, 9, 9, 5, 6, 5, 2, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 0, 2, 3, 3, 3, 3, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 55, 55, 33, 22, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), beta)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), grad), tf.math.multiply(tf.math.add(beta, grad), beta)))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta)))))), tf.math.add(beta, alpha)))), tf.math.square(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), beta)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(beta, tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), beta)), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [7, 2, 1, 7, 8, 5, 6, 1, 3, 3, 2, 3, 2, 3, 3, 3, 8, 9, 7, 4, 5, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 0, 1, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 37, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 6, 5, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2997648002386186, 2.302786795281463, 2.3025317696563916, 2.3024673649915504, 2.302106454277618, 2.3011764233941494], "accuracy": [0.09576013684272766, 0.0886276587843895, 0.08492933213710785, 0.09351472556591034, 0.08519349992275238, 0.09391097724437714], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [7, 1, 1, 7, 9, 2, 0, 4, 6, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 5, 9, 2, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 2, 3, 1, 3, 2, 3, 3, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [15, 50, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 9, 7, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.subtract(grad, grad), tf.math.add(tf.math.add(beta, grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, beta)), tf.math.add(beta, grad)))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2997648002386186, 2.302786795281463, 2.3025317696563916, 2.3024673649915504, 2.302106454277618, 2.3011764233941494], "accuracy": [0.09576013684272766, 0.0886276587843895, 0.08492933213710785, 0.09351472556591034, 0.08519349992275238, 0.09391097724437714], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 6, 9, 2, 0, 4, 6, 2, 2, 2, 2, 1, 2, 0, 8, 2, 2, 5, 9, 2, 8, 6, 3, 6, 1, 2, 3, 7, 0, 1, 4, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [1, 0, 3, 3, 1, 4, 0, 2, 2, 3, 2, 1, 0, 2, 2, 3, 3, 5, 4, 2, 2, 2, 3, 0, 3, 0, 0, 0, 3], [26, 69, 14, 19, 16, 17, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 73, 73, 44, 29, 9, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), grad), grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), grad)))), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta)), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.multiply(grad, grad))), grad))), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, beta)))))))), tf.math.sqrt(beta))))))), grad)), tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.subtract(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(sigma))", "other_info": {"loss": [2.2997648002386186, 2.302786795281463, 2.3025317696563916, 2.3024673649915504, 2.302106454277618, 2.3011764233941494], "accuracy": [0.09576013684272766, 0.0886276587843895, 0.08492933213710785, 0.09351472556591034, 0.08519349992275238, 0.09391097724437714], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [7, 2, 1, 7, 8, 5, 6, 0, 3, 5, 4, 3, 2, 3, 3, 3, 8, 6, 7, 4, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 0, 5, 2, 3, 3, 1, 0, 2, 3, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [76, 69, 14, 62, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [19, 9, 44]], "fitness": -0.024000000208616257, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 23, 14, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.add(beta, beta), tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), beta))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3016267034434654, 2.3092478773361185, 2.313693980121373, 2.3185285496248813, 2.3231996722492827, 2.327542032154402], "accuracy": [0.09087307006120682, 0.07555144280195236, 0.06273940205574036, 0.06406023353338242, 0.05098401755094528, 0.046889446675777435], "val_loss": [1.975189208984375, 1.9794787679399763, 1.9838508197239466, 1.9883828163146973, 1.9930806159973145, 1.9979331152779716], "val_accuracy": [0.02199999988079071, 0.014666666276752949, 0.009999999776482582, 0.007666666526347399, 0.007333333138376474, 0.006666666828095913]}}]