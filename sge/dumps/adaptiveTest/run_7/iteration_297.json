[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 6, 2, 0, 0, 5, 2, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 1, 3, 1, 2, 3, 0, 0, 2, 1, 2], [87, 92, 16, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8308571577072144, "mapping_values": [1, 13, 13, 8, 5, 0, 4, 4, 3, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.square(grad)))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.negative(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2067914090970913, 2.1682410364562905, 1.9911379350600005, 1.4275705561488612, 1.0009497283251687, 0.792285799932927, 0.6855774637478501, 0.7029380538381401, 0.6452898205688616, 0.627492102074853, 0.5905754414169685, 0.6068420043994313, 0.5815163653099369, 0.5327665770782881, 0.5415726199504045, 0.5282675881805263, 0.5409951698132919, 0.4949084309704347, 0.4868415462074814, 0.4833963998493627, 0.47355270227893403, 0.47378232585850044, 0.45011348114069094, 0.4418776530977631, 0.4305808886151508, 0.4482246987130963, 0.4426285083763761, 0.4237246043048184, 0.4138185687273595, 0.4234221388580084, 0.4004121716933212, 0.39938060587202917, 0.3934346715677463, 0.3707729077232103, 0.401863850917893, 0.4151721239255294, 0.36691040060444907, 0.3712155259776629, 0.35382217790362164, 0.3520546161999335, 0.3655286691192276, 0.3791090136608191, 0.3443377052811804], "accuracy": [0.24580636620521545, 0.26958128809928894, 0.360190212726593, 0.5074626803398132, 0.6395456194877625, 0.6976621150970459, 0.7392682433128357, 0.7342491149902344, 0.7537974119186401, 0.7651565074920654, 0.77677983045578, 0.7753269076347351, 0.7794214487075806, 0.8004226684570312, 0.7885351777076721, 0.8029322624206543, 0.7992339134216309, 0.8124422430992126, 0.8153480291366577, 0.8171972036361694, 0.8212917447090149, 0.822348415851593, 0.8345000743865967, 0.8345000743865967, 0.8396512866020203, 0.8335754871368408, 0.8327829837799072, 0.8403117060661316, 0.8445383906364441, 0.8437458872795105, 0.8515387773513794, 0.8514066934585571, 0.8514066934585571, 0.86118084192276, 0.8486329317092896, 0.8401796221733093, 0.8665962219238281, 0.8669924736022949, 0.8688416481018066, 0.8733324408531189, 0.8667283058166504, 0.8548408150672913, 0.8728041052818298], "val_loss": [1.9361951010567802, 1.8270771844046456, 1.5691677502223425, 1.0817807742527552, 0.5989565849304199, 0.5862009184701102, 0.622455188206264, 0.4930973393576486, 0.46460907799857004, 0.47314982754843576, 0.45008030959538053, 0.4888773815972464, 0.4593407085963658, 0.42543230737958637, 0.4378495471818106, 0.4226044842175075, 0.39775436265128, 0.3971275431769235, 0.4197051865713937, 0.37434002331324984, 0.36018292393003193, 0.3828335404396057, 0.3471483588218689, 0.3683103152683803, 0.4119575960295541, 0.34626500947134836, 0.35962882212230135, 0.339102566242218, 0.3624891383307321, 0.356687673500606, 0.3656007392065866, 0.35651032413755146, 0.3298860021999904, 0.34385664973940167, 0.37263516017368864, 0.344585052558354, 0.31470775604248047, 0.31597565753119333, 0.32912428038460867, 0.3431216222899301, 0.3453045742852347, 0.3628482563155038, 0.3494734082903181], "val_accuracy": [0.22200000286102295, 0.26233333349227905, 0.492333322763443, 0.5516666769981384, 0.7179999947547913, 0.7263333201408386, 0.7233333587646484, 0.7689999938011169, 0.7876666784286499, 0.7829999923706055, 0.7990000247955322, 0.7770000100135803, 0.7826666831970215, 0.8086666464805603, 0.793666660785675, 0.7963333129882812, 0.8193333148956299, 0.8230000138282776, 0.8166666626930237, 0.8460000157356262, 0.8433333039283752, 0.8286666870117188, 0.8506666421890259, 0.8346666693687439, 0.8086666464805603, 0.8486666679382324, 0.8413333296775818, 0.8543333411216736, 0.843666672706604, 0.8473333120346069, 0.8289999961853027, 0.8496666550636292, 0.8616666793823242, 0.8503333330154419, 0.8363333344459534, 0.8443333506584167, 0.8616666793823242, 0.8636666536331177, 0.8573333621025085, 0.8550000190734863, 0.8526666760444641, 0.8339999914169312, 0.8500000238418579]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 6, 2, 0, 0, 5, 4, 1, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 2, 2, 3, 3, 2, 3, 0, 0, 2, 1, 2], [30, 18, 74, 57, 57, 39], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 6, 1, 8, 0, 5, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8271428346633911, "mapping_values": [1, 16, 16, 9, 7, 1, 13, 13, 9, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), grad), grad)))))), grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.math.square(tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.206841020819659, 2.165874207670096, 1.9542885933254908, 1.4273358310738007, 1.019996282053252, 0.8064136846253522, 0.8490139213314996, 0.6953643921296736, 0.66049738017528, 0.628921008845362, 0.6142105946152233, 0.5704100770232952, 0.580554331558224, 0.5508702230129133, 0.5355629819085994, 0.5490346070703278, 0.5290512426607109, 0.5165548107966047, 0.4905149448565079, 0.46703956490415766, 0.4722829587337379, 0.4649175364682073, 0.4467254036398076, 0.4673271815987185, 0.44368924240095425, 0.42270338381790074, 0.4572281544951085, 0.4347080957494344, 0.4207500114519331, 0.42448384733310923, 0.4129373251510066, 0.42241023262619987, 0.3928537521545268], "accuracy": [0.2456742823123932, 0.2689208686351776, 0.378549724817276, 0.5247655510902405, 0.6320168972015381, 0.7034738063812256, 0.6885483860969543, 0.739928662776947, 0.7467969655990601, 0.7675340175628662, 0.7689869403839111, 0.7858935594558716, 0.7802139520645142, 0.796328067779541, 0.7988376617431641, 0.7936864495277405, 0.8026680946350098, 0.809140145778656, 0.8138951063156128, 0.82683926820755, 0.8224804997444153, 0.8276317715644836, 0.8388587832450867, 0.8228767514228821, 0.8363492488861084, 0.8467837572097778, 0.8257825970649719, 0.8389908671379089, 0.842028796672821, 0.8407079577445984, 0.8451988101005554, 0.8453308939933777, 0.8518029451370239], "val_loss": [1.9363460540771484, 1.8213881765093123, 1.3330988883972168, 0.8628370932170323, 0.6495021070752826, 0.7056312901633126, 0.5392440727778843, 0.5208353485379901, 0.46145122391836985, 0.47974162442343576, 0.4662409169333322, 0.4791006190436227, 0.47270422322409494, 0.4453149863651821, 0.41399104254586355, 0.4270960177694048, 0.3978011693273272, 0.3882526840482439, 0.37886028630392893, 0.37831006731305805, 0.3612088050161089, 0.3762350593294416, 0.389988260609763, 0.3676951697894505, 0.3544727052961077, 0.38084375858306885, 0.36657931974955965, 0.3377896547317505, 0.37909639733178274, 0.3575443284852164, 0.39224083934511456, 0.36248924902507235, 0.3457806706428528], "val_accuracy": [0.22166666388511658, 0.2613333463668823, 0.5103333592414856, 0.609000027179718, 0.7203333377838135, 0.6553333401679993, 0.7536666393280029, 0.7506666779518127, 0.7879999876022339, 0.7836666703224182, 0.7896666526794434, 0.7829999923706055, 0.7763333320617676, 0.7983333468437195, 0.815666675567627, 0.8036666512489319, 0.8206666707992554, 0.82833331823349, 0.8389999866485596, 0.8453333377838135, 0.8453333377838135, 0.8343333601951599, 0.8240000009536743, 0.8363333344459534, 0.8473333120346069, 0.828000009059906, 0.8393333554267883, 0.8536666631698608, 0.8273333311080933, 0.8496666550636292, 0.8166666626930237, 0.8446666598320007, 0.8519999980926514]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 2, 0, 0, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 5, 2, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8165714144706726, "mapping_values": [1, 19, 19, 11, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.negative(tf.math.square(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.20676161830042, 2.1665779406195225, 1.958236501421895, 1.4769664482118714, 1.050032385320491, 0.7935367084576107, 0.7040300934526662, 0.6708926533380473, 0.6385886986194869, 0.6235639233992888, 0.6109483298876219, 0.5734150865137491, 0.5603560093308578, 0.5395313842405874, 0.5240202770099632, 0.5451876471827075, 0.5110836188003702, 0.49323886250696947, 0.48186776822568433, 0.4632354355160712, 0.46102507815321975, 0.456754820056485, 0.43605491811447233, 0.4388860056365974, 0.43527916369421166], "accuracy": [0.2456742823123932, 0.26918503642082214, 0.37022849917411804, 0.48487651348114014, 0.6244881749153137, 0.6968696117401123, 0.7351737022399902, 0.7424382567405701, 0.7541936039924622, 0.76106196641922, 0.7660810947418213, 0.7799497842788696, 0.7886672616004944, 0.7996301651000977, 0.805177628993988, 0.7918372750282288, 0.8082155585289001, 0.816008448600769, 0.8144234418869019, 0.8259146809577942, 0.8290846943855286, 0.8310658931732178, 0.8392550349235535, 0.8327829837799072, 0.8360850811004639], "val_loss": [1.9361631529671806, 1.8328981399536133, 1.4411193643297469, 0.9553229808807373, 0.5891354765210833, 0.5998671906335014, 0.5889979771205357, 0.5003930159977504, 0.4840968336377825, 0.5767876080104283, 0.41909431559698923, 0.44000113010406494, 0.4281211069652012, 0.45322242804936, 0.39989941460745676, 0.39681462730680195, 0.41857033116476877, 0.3900140183312552, 0.3781017405646188, 0.36931316341672626, 0.3593572803906032, 0.3726584145001003, 0.3665735977036612, 0.4147066388811384, 0.3653517876352583], "val_accuracy": [0.22200000286102295, 0.2683333456516266, 0.43799999356269836, 0.6333333253860474, 0.7383333444595337, 0.7129999995231628, 0.7319999933242798, 0.7583333253860474, 0.7766666412353516, 0.7396666407585144, 0.8223333358764648, 0.8076666593551636, 0.8033333420753479, 0.793666660785675, 0.8253333568572998, 0.8209999799728394, 0.8043333292007446, 0.8276666402816772, 0.831333339214325, 0.847000002861023, 0.8416666388511658, 0.8353333473205566, 0.8363333344459534, 0.815666675567627, 0.8346666693687439]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 6, 2, 6, 7, 0, 4, 0, 4, 3, 8, 9, 0, 8, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 1, 0, 2, 2, 3, 0, 0, 2, 1, 2], [68, 16, 74, 7, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 5, 2, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8080000281333923, "mapping_values": [1, 20, 20, 12, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, grad)))))))))), grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.206810993399398, 2.16389553601385, 1.9549793691966417, 1.3331779852487848, 0.9929067037912046, 0.8193230454979351, 0.865997453753691, 0.7095599223782971, 0.6689988128765147, 0.6634097516560331, 0.6387510435960044, 0.5917986046683755, 0.5900630440773068, 0.5746247083078585, 0.551519038363565, 0.5587786232255249, 0.5414131569856068, 0.5169862828722657, 0.5066449550699957, 0.5047909299994441, 0.4901358629765685, 0.4841468549990273, 0.4758504756713162, 0.45434886867800695, 0.44931113991156674, 0.46607969754234424, 0.46259319078038946, 0.4352418071266966, 0.42502429900294075, 0.43943904891163366, 0.41630590762271386, 0.4283913444880686, 0.400447298345659], "accuracy": [0.24593845009803772, 0.2693171203136444, 0.3761722445487976, 0.5341434478759766, 0.6402060389518738, 0.689869225025177, 0.6865671873092651, 0.739400327205658, 0.7512878179550171, 0.7448157668113708, 0.7560427784919739, 0.7746664881706238, 0.774798572063446, 0.7858935594558716, 0.7935543656349182, 0.7893276810646057, 0.7957997918128967, 0.8098005652427673, 0.8074230551719666, 0.8107251524925232, 0.8157442808151245, 0.8195747137069702, 0.8236692547798157, 0.8317263126373291, 0.8329150676727295, 0.8244617581367493, 0.8256505131721497, 0.8343679904937744, 0.8413683772087097, 0.8358209133148193, 0.8438779711723328, 0.8409721255302429, 0.8482366800308228], "val_loss": [1.9363179888044084, 1.8200898170471191, 1.220245429447719, 0.9127915246146066, 0.6763826949255807, 0.7445805243083409, 0.5265561853136335, 0.5197336333138602, 0.4844604900905064, 0.47496725831712994, 0.4646489790507725, 0.44762764658246723, 0.4865015574863979, 0.45880002634865896, 0.41719116483415875, 0.4467355523790632, 0.4197571277618408, 0.4198859589440482, 0.47734888962336947, 0.38867654119219097, 0.37797989164079937, 0.38900089263916016, 0.359465880053384, 0.38984533718654085, 0.3917783073016575, 0.36635314566748484, 0.3847601669175284, 0.341583788394928, 0.38513892889022827, 0.36307611635753084, 0.3964065568787711, 0.3598968301500593, 0.3560056686401367], "val_accuracy": [0.22200000286102295, 0.2683333456516266, 0.5053333044052124, 0.6650000214576721, 0.6723333597183228, 0.6416666507720947, 0.7586666941642761, 0.7663333415985107, 0.7826666831970215, 0.7829999923706055, 0.796999990940094, 0.8096666932106018, 0.7716666460037231, 0.7940000295639038, 0.8223333358764648, 0.7956666946411133, 0.8116666674613953, 0.812666654586792, 0.7766666412353516, 0.8309999704360962, 0.8306666612625122, 0.8299999833106995, 0.8460000157356262, 0.8339999914169312, 0.8243333101272583, 0.8366666436195374, 0.8266666531562805, 0.8546666502952576, 0.8273333311080933, 0.8483333587646484, 0.8203333616256714, 0.8473333120346069, 0.846666693687439]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [4, 6, 2, 6, 7, 4, 4, 0, 4, 2, 8, 0, 0, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2], [59, 92, 74, 57, 57, 39], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 1, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.806857168674469, "mapping_values": [1, 3, 3, 1, 2, 0, 8, 8, 5, 3, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.negative(grad)), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.2067958277922894, 2.164580102987797, 1.980838362724396, 1.5329935986525536, 1.0379252822533607, 0.8421151067098653, 0.7468047525668267, 0.7043928085553128, 0.6418470081211065, 0.6141525638369584, 0.6314907404866594, 0.5880550178932302, 0.5787593879877316, 0.5563579287511357, 0.5531838317242407, 0.5257949721166061, 0.5315457557123476, 0.502421988858019, 0.5023658758440447, 0.5158884069545158], "accuracy": [0.2456742823123932, 0.26958128809928894, 0.36785101890563965, 0.47827234864234924, 0.6284506916999817, 0.6859067678451538, 0.7217012047767639, 0.7268524765968323, 0.7564390301704407, 0.7688548564910889, 0.7564390301704407, 0.7721568942070007, 0.7758552432060242, 0.7881389260292053, 0.7865539789199829, 0.8037247657775879, 0.7980451583862305, 0.8125742673873901, 0.8086118102073669, 0.8084797263145447], "val_loss": [1.9362469400678362, 1.8276713916233607, 1.5964823450360979, 1.0919026647295271, 0.8832419259207589, 0.5596043722970145, 0.5745139292308262, 0.4936227968760899, 0.4609795808792114, 0.5371545723506382, 0.4423022099903652, 0.4522958653313773, 0.4789307117462158, 0.4715016058513096, 0.39756016220365253, 0.40009879214423044, 0.4142928719520569, 0.40232101508549284, 0.4567224979400635, 0.3906230160168239], "val_accuracy": [0.22200000286102295, 0.2626666724681854, 0.4790000021457672, 0.5619999766349792, 0.6700000166893005, 0.7483333349227905, 0.7263333201408386, 0.7706666588783264, 0.7883333563804626, 0.7636666893959045, 0.7953333258628845, 0.8083333373069763, 0.7636666893959045, 0.7803333401679993, 0.8299999833106995, 0.8173333406448364, 0.8073333501815796, 0.8103333115577698, 0.7826666831970215, 0.8243333101272583]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 2, 2, 5, 7, 5, 2, 0, 4, 8, 4, 9, 0, 6, 4, 5, 0, 2, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2], [59, 92, 49, 57, 57, 39, 47, 15], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 1, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.8025714159011841, "mapping_values": [1, 28, 28, 19, 9, 2, 16, 16, 10, 6, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, grad)))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)), grad))))), tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.sqrt(alpha)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(grad))))))), tf.math.add(beta, grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.206929149345526, 2.166125225841314, 1.988789084502152, 1.4263926807443117, 0.9823929354845651, 0.8893628396756141, 0.7548548462777924, 0.6647321614197548, 0.6614627487639615, 0.6229574590736392, 0.6034308496782447, 0.5769256782837201, 0.5661501865408377, 0.5371592754087019, 0.5657591460135635, 0.5231180095149857, 0.51851814938826, 0.5060604395741689, 0.488194302993916, 0.48388133032006075, 0.469062523035845, 0.4613167349066575, 0.44611812255102584, 0.4482256655309808, 0.45109292586497535, 0.4245214254006482, 0.44290122801538595, 0.42883380600379806, 0.4104241739056602, 0.416772846882889, 0.41243733675677335, 0.4071564527471792, 0.39899284870176427, 0.3781355406393732, 0.398824398760247, 0.4068483148803958, 0.37435132792565673, 0.3732036280200592, 0.3558645486800174], "accuracy": [0.24580636620521545, 0.2685246467590332, 0.3653414249420166, 0.5144630670547485, 0.6460176706314087, 0.6708492636680603, 0.7135120630264282, 0.7464007139205933, 0.7503632307052612, 0.7675340175628662, 0.7705719470977783, 0.7778365015983582, 0.7837802171707153, 0.7977809906005859, 0.7824593782424927, 0.8053097128868103, 0.8063663840293884, 0.8070268034934998, 0.8131026029586792, 0.8145555257797241, 0.8244617581367493, 0.8255184292793274, 0.8370096683502197, 0.8277638554573059, 0.8296129703521729, 0.8407079577445984, 0.834632158279419, 0.8380662798881531, 0.8485008478164673, 0.844010055065155, 0.845859169960022, 0.8470479249954224, 0.8477083444595337, 0.8584070801734924, 0.8508783578872681, 0.8451988101005554, 0.8627657890319824, 0.8609166741371155, 0.8663320541381836], "val_loss": [1.9364988463265556, 1.8230373518807548, 1.717240265437535, 0.9317842551640102, 1.0084524495261056, 0.6623506716319493, 0.5293559517179217, 0.5239681346075875, 0.4648068972996303, 0.47834311212812153, 0.4330331598009382, 0.4839784247534616, 0.477501596723284, 0.4449749844414847, 0.41107317379542757, 0.4074594463620867, 0.4007942931992667, 0.40447236810411724, 0.37772250175476074, 0.37657410757882254, 0.3858778902462551, 0.36797198227473665, 0.3842055967875889, 0.36929755551474436, 0.35837658814021517, 0.3525235056877136, 0.3756498864718846, 0.35823778595243183, 0.36110962288720266, 0.35346165725163053, 0.3700644884790693, 0.36990206582205637, 0.33215057849884033, 0.32548665148871286, 0.32761711733681814, 0.34348486151014057, 0.31823807103293283, 0.3218749591282436, 0.3764283997671945], "val_accuracy": [0.2213333398103714, 0.26633334159851074, 0.45533332228660583, 0.6243333220481873, 0.6420000195503235, 0.7116666436195374, 0.7490000128746033, 0.7573333382606506, 0.7826666831970215, 0.7823333144187927, 0.8130000233650208, 0.7723333239555359, 0.778333306312561, 0.7903333306312561, 0.8176666498184204, 0.8046666383743286, 0.8153333067893982, 0.8136666417121887, 0.8339999914169312, 0.8383333086967468, 0.8196666836738586, 0.843999981880188, 0.8230000138282776, 0.8309999704360962, 0.8473333120346069, 0.8489999771118164, 0.8273333311080933, 0.8443333506584167, 0.8383333086967468, 0.8526666760444641, 0.8243333101272583, 0.8396666646003723, 0.8546666502952576, 0.8656666874885559, 0.8569999933242798, 0.8486666679382324, 0.8646666407585144, 0.8603333234786987, 0.8323333263397217]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 6, 2, 0, 0, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2], [59, 92, 74, 57, 57, 39], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.17342856526374817, "mapping_values": [1, 15, 15, 9, 6, 0, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.pow(grad, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)))))))), grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, sigma)", "other_info": {"loss": [2.301429087821881, 2.3021638146827343, 2.3021188795039085, 2.301822085721287, 2.3011761433759212, 2.2980755008427445, 2.293789249574346, 2.294358057951206, 2.2944161542386836, 2.2902421631660004, 2.2900445912539635, 2.2892098419261, 2.2879633568438873, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09311848133802414, 0.09153348207473755, 0.0936468094587326, 0.09311848133802414, 0.09826971590518951, 0.10527011007070541, 0.12151630967855453, 0.11253467202186584, 0.12138422578573227, 0.1434420794248581, 0.1352529376745224, 0.13630960881710052, 0.14410249888896942, 0.10619468986988068, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9647880281720842, 1.964111600603376, 1.964111600603376, 1.9631078583853585, 1.9598768098013741, 1.9609500340053014, 1.9605351856776647, 1.9594454084123885, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.11900000274181366, 0.10233332961797714, 0.10233332961797714, 0.1313333362340927, 0.15166667103767395, 0.1340000033378601, 0.15166667103767395, 0.16733333468437195, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 6, 2, 6, 7, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 5, 2, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.square(grad)), tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3022356129057924, 2.3024550014561855, 2.3027814818946455, 2.3037583065889513, 2.308460618400649, 2.3269219573903563], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9737514087132044, 1.9740519523620605, 1.9747873033796037, 1.9771290506635393, 1.9858882086617606, 2.022909573146275], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 2, 2, 6, 7, 5, 4, 0, 4, 8, 4, 9, 0, 6, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2], [59, 92, 1, 57, 57, 39, 47, 15], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 1, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [10140679.77984773, 195053557.1332717, 907244035.5503896, 2509924728.4765553, 5438098389.86871, 9926782374.93594], "accuracy": [0.09959053993225098, 0.09985470771789551, 0.09853387624025345, 0.10355303436517715, 0.09589222073554993, 0.10553427785634995], "val_loss": [38884898.28571428, 310612114.28571427, 1047796041.1428572, 2483043108.571429, 4848978944.0, 8378198308.571428], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 2, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 5, 2, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 3, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(beta, tf.math.negative(tf.math.square(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.2591284235130133e+17, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.052172765135765076, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 3, 3, 0, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026204129031242, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 2, 2, 6, 7, 5, 6, 2, 4, 8, 4, 8, 0, 1, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 0, 2, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 1, 0, 8, 4, 5, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [8, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 19, 12, 4, 12, 12, 7, 5, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), grad))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), grad))))), tf.math.negative(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.negative(tf.math.sqrt(tf.math.pow(grad, grad)))), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025627843204064, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 6, 2, 0, 0, 5, 4, 6, 1, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 0, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2], [4, 92, 74, 57, 57, 39], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 20, 9, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))), tf.math.negative(tf.math.pow(tf.math.square(grad), tf.math.add(alpha, tf.math.negative(grad))))))))), tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06524897366762161, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 2, 2, 6, 7, 2, 8, 0, 4, 8, 2, 9, 0, 6, 4, 5, 0, 1, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 2, 0, 0, 2, 1, 2], [59, 92, 1, 57, 57, 39, 47, 15], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 4, 1, 0, 8, 1, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 5, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [96, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), grad), tf.math.add(alpha, grad))), tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(grad, tf.math.subtract(tf.math.negative(tf.math.sqrt(grad)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 2, 2, 0, 7, 5, 4, 0, 3, 8, 4, 9, 0, 6, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 2, 0, 3, 3, 2, 3, 0, 0, 2, 1, 2], [59, 92, 61, 57, 57, 39, 47, 15], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 8, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 19, 9, 4, 4, 4, 3, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026204129031242, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 2, 6, 6, 7, 5, 4, 0, 4, 8, 4, 9, 3, 6, 4, 5, 3, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 2, 0, 0, 2, 1, 2], [59, 92, 1, 57, 57, 39, 47, 15], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 6, 1, 1, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 20, 12, 4, 16, 16, 8, 8, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(alpha, tf.math.subtract(tf.math.sqrt(tf.math.pow(grad, grad)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06524897366762161, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2], [59, 92, 74, 57, 57, 39], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 6, 0, 5, 2, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 2, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 3, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026204129031242, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [4, 6, 2, 6, 7, 4, 4, 0, 4, 2, 8, 0, 0, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 2, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2], [59, 92, 74, 57, 57, 39], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 1, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [68, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 9, 9, 6, 3, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.negative(tf.math.sqrt(grad)), tf.math.pow(grad, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.301429087821881, 2.3021638146827343, 2.3021188795039085, 2.301822085721287, 2.3011761433759212, 2.3015539312028865], "accuracy": [0.09311848133802414, 0.09153348207473755, 0.0936468094587326, 0.09311848133802414, 0.09826971590518951, 0.0936468094587326], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 2, 6, 7, 5, 4, 0, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 5, 0, 9, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 5, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 23, 23, 14, 9, 2, 6, 6, 5, 1, 1, 7, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(grad), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), alpha))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.negative(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(beta)), tf.math.negative(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.301429087821881, 2.3021638146827343, 2.3021188795039085, 2.301822085721287, 2.3011761433759212, 2.3015539312028865], "accuracy": [0.09311848133802414, 0.09153348207473755, 0.0936468094587326, 0.09311848133802414, 0.09826971590518951, 0.0936468094587326], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [3, 6, 2, 6, 7, 4, 4, 0, 4, 2, 8, 0, 0, 2, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 2, 1, 3, 3, 2, 3, 0, 0, 2, 1, 2], [21, 92, 74, 57, 57, 39], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 5, 2, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [23, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 2, 1, 3], [4, 2], [76], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 3, 0, 1, 1, 0, 1, 0, 3], [48, 49, 44, 92]], "fitness": -0.041428569704294205, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 8, 7, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.square(grad)), tf.math.add(grad, grad)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3015378577724, 2.302998309279666, 2.3044798812846055, 2.3066760919286495, 2.309520395660854, 2.3147356695329604], "accuracy": [0.09298639744520187, 0.09008057415485382, 0.0874389111995697, 0.07951393723487854, 0.07806102186441422, 0.07013604789972305], "val_loss": [1.9713689940316337, 1.972480297088623, 1.9743334225245885, 1.9771060943603516, 1.980806623186384, 1.9853265626089913], "val_accuracy": [0.03400000184774399, 0.028333334252238274, 0.01966666616499424, 0.015333333052694798, 0.013000000268220901, 0.019999999552965164]}}]