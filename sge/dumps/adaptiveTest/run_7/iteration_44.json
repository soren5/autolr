[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8202857375144958, "mapping_values": [1, 2, 2, 1, 1, 0, 66, 66, 42, 24, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, alpha))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))))))), tf.math.add(beta, beta))))))))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(beta, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9502785533662674, 1.357309220158712, 1.047183269200119, 0.8553655279814811, 0.8034154593495803, 0.8213530717556109, 0.7068536895582027, 0.7228536839183485, 0.6794321843661715, 0.6580270040761116, 0.6761800206930977, 0.6469225002758539, 0.627150549722968, 0.6054753738466176, 0.6029571559073005, 0.5696114209885169, 0.5783241743566558, 0.5641303966703857, 0.5454386960340607, 0.5499642772555524, 0.5295344389913073, 0.542340478436066, 0.5411866488095839, 0.499787496656018, 0.5061908284623656, 0.5028119346626588, 0.5009485434594644, 0.4912920827957554, 0.4786548104977107, 0.4730789244151339, 0.4776011652887269, 0.4621465580850119, 0.45840209961063466, 0.4584690920114045, 0.4555271981044641, 0.4472510193624296, 0.43654222898416517, 0.4245322870186307, 0.4249768638143198, 0.4214402481140068, 0.42344827088524306, 0.39897525379009346, 0.4063606197611058, 0.41199196700123336, 0.39516552091983204, 0.40609358345764723, 0.3835445849721647, 0.38811602389429856, 0.3734827396372416, 0.40253544869739083, 0.3678202004661618, 0.3635146293807354, 0.369244430779529, 0.3686543338058836, 0.3604313421518638, 0.3620716991236874, 0.36019036046281827, 0.34483139175764715, 0.3452051919740441, 0.33951805164911303], "accuracy": [0.3501518964767456, 0.533350944519043, 0.6086382269859314, 0.6837934255599976, 0.7018887996673584, 0.6910579800605774, 0.7353057861328125, 0.7255316376686096, 0.7466648817062378, 0.7530049085617065, 0.7423061728477478, 0.750759482383728, 0.7594769597053528, 0.7695152759552002, 0.7675340175628662, 0.7891955971717834, 0.7766477465629578, 0.7836481332778931, 0.7943468689918518, 0.7907806038856506, 0.8012151718139648, 0.7936864495277405, 0.7947431206703186, 0.8156121969223022, 0.8078193068504333, 0.8144234418869019, 0.8043851256370544, 0.8220842480659485, 0.8198388814926147, 0.8231409192085266, 0.8177255392074585, 0.8298771381378174, 0.8289526104927063, 0.8304054737091064, 0.8308017253875732, 0.8327829837799072, 0.8379341959953308, 0.8421608805656433, 0.8445383906364441, 0.8413683772087097, 0.845859169960022, 0.8543124794960022, 0.8521991968154907, 0.8479725122451782, 0.8507462739944458, 0.850350022315979, 0.8593316674232483, 0.8541803956031799, 0.8660678863525391, 0.8488970994949341, 0.8646149635314941, 0.8669924736022949, 0.8614450097084045, 0.8639545440673828, 0.8639545440673828, 0.868049144744873, 0.8676528930664062, 0.8732003569602966, 0.8737286925315857, 0.878879964351654], "val_loss": [1.3199952329908098, 0.8341153178896222, 0.6812070778438023, 0.6252635717391968, 0.6514108180999756, 0.5486410685947963, 0.574068410055978, 0.597397872379848, 0.5810345241001674, 0.5077080386025565, 0.4846388442175729, 0.5246189151491437, 0.4656691551208496, 0.499139666557312, 0.45487964153289795, 0.4621084928512573, 0.4389297195843288, 0.43173391478402273, 0.4336310454777309, 0.4266290409224374, 0.4062529717172895, 0.4263503040586199, 0.41157170704432894, 0.41336478505815777, 0.40893694332667757, 0.4207436101777213, 0.42107571022851126, 0.4002411024911063, 0.3851735932486398, 0.3808982287134443, 0.3858261023248945, 0.37709018162318636, 0.3683871967451913, 0.3686918616294861, 0.3791162201336452, 0.3576455201421465, 0.3659987619944981, 0.34698727301188875, 0.36519503593444824, 0.34106757811137606, 0.3468207376343863, 0.35458903653281076, 0.36538388047899517, 0.33878847530909945, 0.35125471012932913, 0.32637237651007517, 0.3638118931225368, 0.3404518706457956, 0.3523701684815543, 0.32169367585863384, 0.321157021181924, 0.3353454555783953, 0.35108792781829834, 0.3551790288516453, 0.3073446580341884, 0.3468873585973467, 0.3062040039471218, 0.3170239159039089, 0.30626411948885235, 0.3597562313079834], "val_accuracy": [0.5636666417121887, 0.6496666669845581, 0.675000011920929, 0.7423333525657654, 0.6903333067893982, 0.7616666555404663, 0.7193333506584167, 0.7306666374206543, 0.7206666469573975, 0.7766666412353516, 0.7876666784286499, 0.762333333492279, 0.7953333258628845, 0.7553333044052124, 0.7929999828338623, 0.796999990940094, 0.8046666383743286, 0.8043333292007446, 0.8023333549499512, 0.8083333373069763, 0.8180000185966492, 0.8009999990463257, 0.8193333148956299, 0.8153333067893982, 0.8186666369438171, 0.8130000233650208, 0.8069999814033508, 0.824999988079071, 0.82833331823349, 0.8376666903495789, 0.8259999752044678, 0.8336666822433472, 0.8423333168029785, 0.8410000205039978, 0.8386666774749756, 0.8456666469573975, 0.8323333263397217, 0.8519999980926514, 0.8373333215713501, 0.856333315372467, 0.8529999852180481, 0.8473333120346069, 0.8383333086967468, 0.8576666712760925, 0.8479999899864197, 0.859333336353302, 0.8333333134651184, 0.8533333539962769, 0.8523333072662354, 0.8696666955947876, 0.8636666536331177, 0.859000027179718, 0.8486666679382324, 0.8399999737739563, 0.8723333477973938, 0.8533333539962769, 0.8700000047683716, 0.8686666488647461, 0.8696666955947876, 0.8433333039283752]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 3, 6, 5, 5, 9, 1, 3, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 3, 3, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.8057143092155457, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9516406330717806, 1.3363533196999113, 1.047441912640544, 0.8788099862706975, 0.8066227529830212, 0.8007062368027018, 0.7405115968405437, 0.7006585334569487, 0.6908048606504618, 0.6728976599812082, 0.6586608669194468, 0.6349942347377031, 0.6263348729130834, 0.6071157971582298, 0.605443640021978, 0.5712986796240151, 0.5899076516665109, 0.5611720495865786, 0.5457968609743367, 0.5509945291648404, 0.5322103348854998, 0.5357596858767093, 0.5272177611800579, 0.5170740303330654, 0.5053128926603786, 0.5106436849789865, 0.48941085725853456, 0.4966334950859363, 0.4779488704759116, 0.46567624114555156, 0.4753703716652756, 0.45966402960569946, 0.45568388053738224, 0.4559053242789157, 0.45651732078711466, 0.448074889858527, 0.4264807296726666, 0.4265628124681588, 0.4179109637731921, 0.4198156179784705, 0.4189122985571666, 0.3967858182204603, 0.4035372858813662, 0.4080856556134091, 0.388683569020347, 0.4138057900969347, 0.38291338738779807], "accuracy": [0.349359393119812, 0.5414080023765564, 0.6136573553085327, 0.6744155287742615, 0.7021529674530029, 0.6911900639533997, 0.7176066637039185, 0.7353057861328125, 0.7387399077415466, 0.7401928305625916, 0.748778223991394, 0.7557786107063293, 0.757099449634552, 0.769911527633667, 0.7633073329925537, 0.7878747582435608, 0.7714964747428894, 0.7844406366348267, 0.7956677079200745, 0.7866860628128052, 0.8009510040283203, 0.8005547523498535, 0.8033285140991211, 0.806630551815033, 0.8086118102073669, 0.8094043135643005, 0.8148196935653687, 0.817989706993103, 0.817989706993103, 0.8261788487434387, 0.8187822103500366, 0.8322546482086182, 0.83119797706604, 0.829216718673706, 0.8272355198860168, 0.8298771381378174, 0.8404437899589539, 0.8429533839225769, 0.8466516733169556, 0.8401796221733093, 0.8471800088882446, 0.8562937378883362, 0.8521991968154907, 0.848368763923645, 0.8557654023170471, 0.8450667262077332, 0.8576145768165588], "val_loss": [1.2964332103729248, 0.8190732853753226, 0.6937828063964844, 0.6785790579659599, 0.6182887043271746, 0.654868585722787, 0.5283197505133492, 0.6277533088411603, 0.5016378675188337, 0.5174367087227958, 0.4852433885846819, 0.5105939933231899, 0.4708080121449062, 0.4810457910810198, 0.47378695011138916, 0.4867426497595651, 0.43611582687922884, 0.4347446986607143, 0.41386581318719046, 0.4196195261819022, 0.4078376889228821, 0.4157386081559317, 0.41170776741845266, 0.4027134435517447, 0.40654174770627705, 0.4080554417201451, 0.42039020572389874, 0.38883176020213533, 0.3822902611323765, 0.37237731899533955, 0.4168833919933864, 0.37419322558811735, 0.37317040988377165, 0.36837724276951384, 0.3682886276926313, 0.35817371947424753, 0.35800732033593313, 0.3468610644340515, 0.3575406329972403, 0.33871989590781076, 0.3435554248946054, 0.33775506700788227, 0.3639781730515616, 0.3336078865187509, 0.37485675300870624, 0.3266110675675528, 0.3587646314076015], "val_accuracy": [0.5633333325386047, 0.6496666669845581, 0.6890000104904175, 0.7226666808128357, 0.7083333134651184, 0.7006666660308838, 0.7570000290870667, 0.7066666483879089, 0.7723333239555359, 0.753333330154419, 0.7863333225250244, 0.7613333463668823, 0.7929999828338623, 0.7673333287239075, 0.7839999794960022, 0.7816666960716248, 0.8050000071525574, 0.800000011920929, 0.8196666836738586, 0.812666654586792, 0.8209999799728394, 0.8063333630561829, 0.8109999895095825, 0.8233333230018616, 0.8169999718666077, 0.8173333406448364, 0.8083333373069763, 0.8320000171661377, 0.8270000219345093, 0.8429999947547913, 0.8016666769981384, 0.8363333344459534, 0.8349999785423279, 0.8393333554267883, 0.8433333039283752, 0.8456666469573975, 0.843999981880188, 0.8500000238418579, 0.8443333506584167, 0.8586666584014893, 0.8573333621025085, 0.8600000143051147, 0.8383333086967468, 0.8573333621025085, 0.8299999833106995, 0.856333315372467, 0.8389999866485596]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 70, 44]], "fitness": -0.7720000147819519, "mapping_values": [1, 8, 8, 5, 3, 1, 24, 24, 14, 10, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.negative(grad)))))), tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, beta), alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0891215467119197, 1.5969317003783454, 1.078289981610141, 0.950330750974666, 0.8426338240864444, 0.7922230216616322, 0.7732693182242749, 0.7176411381219404, 0.7400661974755639, 0.7087098914461207, 0.7001751498728223, 0.654668248663363, 0.6358946304216739, 0.6319213905008225, 0.6451029431676631, 0.6358576093713889, 0.6275421029635551], "accuracy": [0.28820499777793884, 0.501518964767456, 0.6007132530212402, 0.64231938123703, 0.6802271604537964, 0.6940959095954895, 0.7088891863822937, 0.7191916704177856, 0.715889573097229, 0.7273808121681213, 0.728701651096344, 0.7494386434555054, 0.7511557340621948, 0.7556465268135071, 0.7448157668113708, 0.7519482374191284, 0.7553823590278625], "val_loss": [1.679924488067627, 0.8717246396200997, 0.7716582672936576, 0.664892452103751, 0.6177452291761126, 0.6280169486999512, 0.5641742263521466, 0.5434895583561489, 0.5276153768811908, 0.5532804897853306, 0.5076754093170166, 0.48608762877328054, 0.5270890167781285, 0.5032622814178467, 0.5404993295669556, 0.49791749886104036, 0.5077996594565255], "val_accuracy": [0.4933333396911621, 0.6433333158493042, 0.6603333353996277, 0.6869999766349792, 0.7049999833106995, 0.6990000009536743, 0.7396666407585144, 0.737333357334137, 0.765666663646698, 0.7633333206176758, 0.7670000195503235, 0.7739999890327454, 0.7400000095367432, 0.7540000081062317, 0.7413333058357239, 0.7559999823570251, 0.7733333110809326]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 9, 0, 4, 0, 3, 2, 3, 2, 2, 3, 3, 8, 2, 1, 2, 9, 9, 5, 6, 5, 5, 1, 5, 1, 7, 2, 9, 3, 2, 3, 1, 5, 5, 5, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 0, 2, 1, 3, 0, 5, 3, 1, 2, 1, 0, 2, 3, 1, 0, 5, 4, 2, 3, 1, 3, 0, 3, 0, 0], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.486857146024704, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 6, 3, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(grad, grad), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.0183139349475527, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.32703739404678345, 0.29626205563545227, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.802771840776716, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.4463333189487457, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 6, 3, 5, 7, 9, 0, 4, 8, 9, 0, 2, 3, 3, 8, 2, 6, 2, 9, 4, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 2, 3, 1, 4, 3, 5, 2, 3, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [11, 61, 23, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [83, 41, 44]], "fitness": -0.24085713922977448, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 6, 4, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(beta))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.7729499608046027, 2.3023914370034837, 6.153597382160147, 2.4532159684183354, 2.514991411364798, 2.414015988569218, 2.48086441071782], "accuracy": [0.17514199018478394, 0.12455421686172485, 0.1562541276216507, 0.10289261490106583, 0.14674416184425354, 0.1014397069811821, 0.09509972482919693], "val_loss": [1.9956180708748954, 1.6828103065490723, 2.121701513017927, 2.0226238114493236, 2.050755500793457, 2.1257897785731723, 2.041290487561907], "val_accuracy": [0.1003333330154419, 0.3816666603088379, 0.10100000351667404, 0.10133333504199982, 0.10100000351667404, 0.09866666793823242, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [5, 0, 1, 6, 5, 5, 7, 4, 0, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 3, 1, 4, 0, 5, 2, 1, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [11, 61, 23, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.18771427869796753, "mapping_values": [1, 2, 2, 1, 1, 0, 24, 24, 15, 9, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))), tf.math.multiply(grad, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.990148059538626, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17500990629196167, 0.13380002975463867, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6.815677234104702, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.17733334004878998, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 0, 8, 5, 2, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 2, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 1, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 3, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.13114285469055176, "mapping_values": [1, 2, 2, 1, 1, 0, 59, 59, 37, 22, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.negative(beta), alpha), tf.math.sqrt(grad))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, alpha)))))))))))), tf.math.add(beta, beta)))))))), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.sqrt(alpha))), tf.math.add(grad, tf.math.multiply(grad, tf.math.square(tf.math.add(tf.math.add(beta, grad), beta)))))), beta))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022323739275152, 2.302536372259198, 2.301486924308371, 2.3022777695366736, 2.3029274131486193, 2.301885969367057, 2.3031529705711185, 2.300795480449517, 2.299546013418804, 2.300404482167458, 2.3005756450099337, 2.301444809466085, 2.3001562680519174, 2.3013963615574684, 2.3005943837781166, 2.298664747684576, 2.2980430849539117, 2.2998637763217236, 2.299607260289241, 2.2994773869406764, 2.299788376501192, 2.2989233613659787, 2.298178478774299, 2.2981037348804065, 2.298945588836297, 2.2984525483156224, 2.3005459786028264, 2.299484970956635, 2.2985014408145834, 2.299394194098228, 2.2971768834886612, 2.297087143220449, 2.2974611342685445, 2.2965206086218335, 2.2982161524682834, 2.296876804908316, 2.2982379583367076, 2.2972599788348846, 2.297850630113619, 2.297207116450868, 2.2973582937008574, 2.2963551355154603, 2.2950246287469205, 2.2968948217131726, 2.295973638990032, 2.295547292500502, 2.2962572919442246, 2.2984761250820522, 2.294926846803628, 2.295525347252784, 2.2952985175297385, 2.294970069657763, 2.295069096441424, 2.2958583523804847, 2.295064615897845, 2.294471536786754, 2.2950955353644797, 2.2939589785358074, 2.2945690969702213, 2.294382145344668, 2.2955910445298846, 2.29373591214816, 2.295097970061881, 2.29395811206015, 2.2929160964644866, 2.2955093639181308, 2.2939947797417277, 2.293393423749062, 2.292945645945404, 2.293205750160182, 2.2921430779926815, 2.2931817635065213, 2.292574868336361, 2.293034175068648, 2.293501157455787, 2.2918091678443036, 2.2939327690878786, 2.2925929230564166, 2.2925290816401165, 2.2916878098273843, 2.290594826096069, 2.291388682465055, 2.2907582508054913, 2.2905595091591895, 2.2919537673111776, 2.2914730723129995, 2.2910605177919012, 2.2914193358954784, 2.289982782678046, 2.290808041743504, 2.2900740245959668, 2.290592468457215, 2.2902420036324482, 2.289745205318797, 2.2893130616457738, 2.2899789764833582, 2.2887131773863394, 2.2893093496092622, 2.290520990623884, 2.2879690371956634], "accuracy": [0.08691058307886124, 0.09549596905708313, 0.09008057415485382, 0.09668471664190292, 0.08889182657003403, 0.0886276587843895, 0.09338264167308807, 0.09272222965955734, 0.09351472556591034, 0.09351472556591034, 0.09866596013307571, 0.0936468094587326, 0.09377889335155487, 0.09153348207473755, 0.09391097724437714, 0.09826971590518951, 0.10276053100824356, 0.09417514503002167, 0.09932637959718704, 0.10249637067317963, 0.09681680053472519, 0.09853387624025345, 0.09972262382507324, 0.09853387624025345, 0.09972262382507324, 0.10170386731624603, 0.09708096832036972, 0.09721305221319199, 0.1010434553027153, 0.10117553919553757, 0.10210011899471283, 0.09866596013307571, 0.10289261490106583, 0.10606260597705841, 0.09668471664190292, 0.09945846349000931, 0.10196803510189056, 0.10130762308835983, 0.10196803510189056, 0.10645885765552521, 0.10447761416435242, 0.10817593336105347, 0.10302469879388809, 0.10276053100824356, 0.10817593336105347, 0.10791176557540894, 0.10487385839223862, 0.10051512718200684, 0.10962884873151779, 0.10460969805717468, 0.1088363528251648, 0.11002509295940399, 0.1138555034995079, 0.10777968913316727, 0.10355303436517715, 0.10579843819141388, 0.10910051316022873, 0.11121384054422379, 0.11055342853069305, 0.1080438494682312, 0.10672302544116974, 0.11478008329868317, 0.10474177449941635, 0.10896842926740646, 0.11411966383457184, 0.10500594228506088, 0.11187426000833511, 0.11728965491056442, 0.10513802617788315, 0.1138555034995079, 0.11359133571386337, 0.11081759631633759, 0.10949676483869553, 0.11451591551303864, 0.11768590658903122, 0.11359133571386337, 0.11306300014257431, 0.11306300014257431, 0.11491216719150543, 0.11742173880338669, 0.12270505726337433, 0.1158367469906807, 0.11557257920503616, 0.11715757846832275, 0.1150442510843277, 0.11715757846832275, 0.11755382269620895, 0.11702549457550049, 0.12495046854019165, 0.11768590658903122, 0.11979923397302628, 0.12310130894184113, 0.1216483935713768, 0.1216483935713768, 0.1266675442457199, 0.11953506618738174, 0.12996962666511536, 0.12296922504901886, 0.12151630967855453, 0.1262712925672531], "val_loss": [1.9708636828831263, 1.970745631626674, 1.9706271035330636, 1.9705092566353934, 1.9703930446079798, 1.970273767198835, 1.970156260899135, 1.970038754599435, 1.9699206352233887, 1.9698027202061243, 1.9696857588631767, 1.9695679800851005, 1.9694507462637765, 1.9693328312465124, 1.9692161423819405, 1.9690983636038644, 1.968982424054827, 1.9688663482666016, 1.9687494550432478, 1.9686320168631417, 1.9685156685965401, 1.968398094177246, 1.9682807922363281, 1.9681645802089147, 1.9680478913443429, 1.9679317474365234, 1.967815739767892, 1.967698437826974, 1.9675814764840263, 1.967463765825544, 1.9673476900373186, 1.9672299793788366, 1.967113971710205, 1.966996669769287, 1.9668808664594377, 1.9667651312691825, 1.9666493279593331, 1.9665326390947615, 1.9664162227085658, 1.966301373073033, 1.9661857060023717, 1.966069153376988, 1.9659528732299805, 1.9658382279532296, 1.965721947806222, 1.965604509626116, 1.9654883657182967, 1.9653726305280412, 1.965257167816162, 1.9651411601475306, 1.965024471282959, 1.9649088723318917, 1.9647933415004186, 1.964677333831787, 1.964561598641532, 1.9644474302019392, 1.9643314225333077, 1.964214869907924, 1.964099339076451, 1.9639826502118791, 1.9638665744236536, 1.9637507711138045, 1.9636343547276087, 1.9635203906467982, 1.9634052004132951, 1.9632911000932967, 1.9631749561854772, 1.9630584716796875, 1.9629437582833427, 1.9628280912126814, 1.962712015424456, 1.9625964845929826, 1.9624813624790736, 1.962364741734096, 1.962250096457345, 1.9621358598981584, 1.9620201928274972, 1.961904730115618, 1.961789676121303, 1.9616748946053642, 1.961559568132673, 1.9614447866167342, 1.961329460144043, 1.961214201790946, 1.9610992159162248, 1.96098450251988, 1.960869244166783, 1.9607550076075964, 1.9606402942112513, 1.960524218423026, 1.960409232548305, 1.9602930886404855, 1.960178988320487, 1.9600635256086076, 1.9599483353751046, 1.9598331451416016, 1.9597163200378418, 1.9595997674124581, 1.9594858033316476, 1.9593711580548967], "val_accuracy": [0.036666665226221085, 0.036666665226221085, 0.03700000047683716, 0.03766666725277901, 0.03866666555404663, 0.03933333232998848, 0.03966666758060455, 0.03966666758060455, 0.0403333343565464, 0.04066666588187218, 0.04100000113248825, 0.0416666679084301, 0.041999999433755875, 0.043666668236255646, 0.04466666653752327, 0.04500000178813934, 0.04633333161473274, 0.04766666516661644, 0.049666665494441986, 0.050333332270383835, 0.05133333429694176, 0.052000001072883606, 0.052666667848825455, 0.05366666615009308, 0.05433333292603493, 0.0560000017285347, 0.05666666850447655, 0.05766666680574417, 0.058666665107011795, 0.059333331882953644, 0.05966666713356972, 0.06133333221077919, 0.06266666948795319, 0.06266666948795319, 0.06366666406393051, 0.06433333456516266, 0.06533333659172058, 0.0663333311676979, 0.06733333319425583, 0.06800000369548798, 0.06866666674613953, 0.070333331823349, 0.07066666334867477, 0.07133333384990692, 0.07266666740179062, 0.0729999989271164, 0.07366666942834854, 0.07466666400432587, 0.07533333450555801, 0.07699999958276749, 0.07833333313465118, 0.07900000363588333, 0.08100000023841858, 0.08233333379030228, 0.08299999684095383, 0.08366666734218597, 0.0860000029206276, 0.08733333647251129, 0.08833333104848862, 0.08866667002439499, 0.08966666460037231, 0.09233333170413971, 0.09266666322946548, 0.09300000220537186, 0.09366666525602341, 0.09600000083446503, 0.09700000286102295, 0.09833333641290665, 0.09933333098888397, 0.09966666996479034, 0.10166666656732559, 0.10199999809265137, 0.10366666316986084, 0.10599999874830246, 0.10700000077486038, 0.1080000028014183, 0.11033333092927933, 0.11133333295583725, 0.1120000034570694, 0.11366666853427887, 0.1146666631102562, 0.11633333563804626, 0.11699999868869781, 0.11933333426713943, 0.12033333629369736, 0.12066666781902313, 0.12266666442155838, 0.12333333492279053, 0.1236666664481163, 0.125, 0.12533333897590637, 0.12700000405311584, 0.12700000405311584, 0.1289999932050705, 0.12966667115688324, 0.12999999523162842, 0.1303333342075348, 0.1313333362340927, 0.13333334028720856, 0.13466666638851166]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [9, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 5, 1, 6, 5, 5, 7, 4, 0, 4, 2, 2, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 4, 2, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 4, 5, 9, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1170316367.777584, 22464225191.815083, 103165464844.88284, 286598567972.5183, 613496269830.3569, 1144542898500.8774], "accuracy": [0.09325055778026581, 0.1022322028875351, 0.10157178342342377, 0.10210011899471283, 0.10236428678035736, 0.09338264167308807], "val_loss": [4405858304.0, 35236070546.28571, 118909155035.42857, 281844861220.5714, 550463696310.8572, 951186957458.2858], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68, 15], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 9, 1, 6, 5, 5, 0, 4, 3, 4, 4, 9, 9, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 4, 2, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 2, 0, 3, 1, 1], [99, 17, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 2, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09391097724437714, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [7, 0, 1, 0, 4, 8, 8, 0, 0, 3, 2, 2, 2, 2, 8, 3, 8, 0, 7, 2, 9, 9, 6, 0, 2], [4, 1, 5, 3, 1, 5, 2, 3, 0, 0, 0, 2, 0, 2], [51, 85, 34, 19, 22], [0, 0, 1, 1], [0, 0], [2, 5], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [4, 1, 2, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09391097724437714, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 2, 2, 1, 2, 1, 0, 4], [86, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 98, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 22, 13, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(grad)))))), tf.math.pow(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.multiply(tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07092854380607605, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 1, 0, 7, 5, 6, 7, 4, 2, 3, 2, 5, 2, 5, 9, 0, 4, 0, 1, 2, 9, 9, 8, 6, 7], [4, 3, 5, 2, 1, 4, 3, 5, 2, 3, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 61, 41, 19, 22], [1, 0, 1], [0, 1], [2, 7, 4], [5], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 9, 1, 5, 5, 4, 7, 5], [2, 3, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 24, 24, 13, 11, 0, 1, 0, 0, 0, 0, 5, 4, 1, 2], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.pow(beta, tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), grad)), tf.math.add(beta, beta))))))))), tf.math.add(grad, tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [9, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [7, 2, 1, 7, 5, 5, 4, 2, 0, 5, 2, 8, 2, 5, 5, 3, 8, 8, 7, 8, 9, 9, 2], [4, 3, 1, 3, 1, 4, 0, 5, 2, 1, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [78, 61, 14, 99, 22, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 9, 0], [1, 0, 0, 3, 1, 1], [43, 9, 44, 79]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 20, 20, 12, 8, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [11184096.24467894, 214255615.57733455, 983374377.6409986, 2731143008.029587, 5845448838.035663, 10904234080.435345], "accuracy": [0.09325055778026581, 0.1022322028875351, 0.10157178342342377, 0.10210011899471283, 0.10236428678035736, 0.09338264167308807], "val_loss": [42054355.428571425, 335942180.5714286, 1133256850.2857144, 2685592283.428571, 5244515181.714286, 9061652187.428572], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 1, 0, 4, 8, 8, 0, 0, 3, 2, 2, 2, 2, 8, 3, 8, 0, 7, 2, 9, 9, 6, 0, 2], [4, 1, 5, 3, 1, 5, 2, 3, 0, 0, 0, 2, 0, 2], [51, 85, 34, 19, 22], [0, 0, 1], [0, 0], [2, 9], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 3, 2, 2, 0, 1, 12, 8, 4, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(alpha)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.negative(sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07026813179254532, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [7, 0, 1, 6, 2, 1, 6, 4, 0, 2, 2, 2, 2, 2, 3, 8, 8, 2, 7, 2, 3, 9, 3, 2, 2, 3, 6, 2, 8, 8, 5], [4, 3, 5, 3, 2, 3, 0, 5, 2, 1, 1, 2, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [11, 61, 23, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [9, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 41, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 39, 39, 22, 17, 3, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(beta, alpha))))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), grad))), tf.math.add(beta, grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3033121448419096, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [7, 0, 1, 9, 4, 8, 8, 0, 0, 3, 2, 2, 2, 2, 8, 3, 8, 0, 7, 2, 9, 9, 6, 0, 2], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [4, 1, 2, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07106062769889832, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 0, 2, 2, 3, 0, 5, 2, 1, 2, 1, 0, 4], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 9, 9, 7, 5], [1, 0, 0, 3, 1, 1], [81, 17, 29, 48]], "fitness": -0.08257143199443817, "mapping_values": [1, 2, 2, 1, 1, 0, 24, 24, 14, 10, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(beta)), tf.math.multiply(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)), beta)), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.931403256237326, 2.335193841653556, 2.3043276638544437, 2.3035696480866545, 2.303405641360038, 2.3029988718039136, 2.302994339929958, 2.3029926571123602, 2.3029259004455596], "accuracy": [0.1682736724615097, 0.14753665030002594, 0.09536388516426086, 0.09694888442754745, 0.09747721254825592, 0.09642054885625839, 0.09391097724437714, 0.09576013684272766, 0.09245806187391281], "val_loss": [1.9594066483633858, 1.9744695254734583, 1.9737821306501115, 1.9735580853053503, 1.9736195972987585, 1.9736651011875697, 1.973716872079032, 1.9735920769827706, 1.9734588350568498], "val_accuracy": [0.09866666793823242, 0.1003333330154419, 0.10133333504199982, 0.10400000214576721, 0.10133333504199982, 0.09866666793823242, 0.09966666996479034, 0.10133333504199982, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [7, 0, 9, 6, 2, 5, 6, 4, 0, 5, 2, 2, 2, 2, 3, 8, 8, 4, 7, 2, 3, 9, 3, 2, 2, 3, 3, 2, 8, 3, 8], [4, 3, 5, 1, 1, 4, 0, 5, 2, 1, 2, 3, 0, 2, 3, 5, 3, 5, 4, 1, 4, 5], [11, 61, 23, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [81, 17, 29, 48]], "fitness": -0.05714285746216774, "mapping_values": [1, 2, 2, 1, 1, 0, 39, 39, 24, 15, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.square(grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), beta), tf.math.add(beta, grad))))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), beta))))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.9535025278055405, 2.5998184859177944, 2.3068853125611883, 2.3037626791497923, 2.3031911586080764, 2.303022659434272, 2.3028453239407662], "accuracy": [0.1690661758184433, 0.17091533541679382, 0.09708096832036972, 0.09734513610601425, 0.09681680053472519, 0.09945846349000931, 0.1002509593963623], "val_loss": [1.9342682702200753, 1.9789511816842216, 1.9743153708321708, 1.9736819948468889, 1.9736426898411341, 1.9736619676862444, 1.9736650330679757], "val_accuracy": [0.09866666793823242, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10133333504199982, 0.10133333504199982, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 6, 4, 5, 7, 4, 0, 4, 2, 1, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 2, 4, 0, 5, 2, 1, 2, 1, 0, 4, 3], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 9, 9, 7, 5], [3, 0, 0, 3, 1, 1], [81, 79, 29, 48]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 3, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, beta)))), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022848541993883, 2.302716937157708, 2.3017982006261946, 2.302715628516515, 2.303485155011118, 2.302582730769544], "accuracy": [0.08691058307886124, 0.09536388516426086, 0.08915598690509796, 0.09615638852119446, 0.08717474341392517, 0.08770307898521423], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 6, 5, 5, 9, 4, 0, 4, 2, 3, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [3, 3, 5, 2, 1, 1, 0, 2, 2, 1, 2, 1, 0, 4], [10, 72, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 1, 0, 3, 1, 1], [0, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 7, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3022848541993883, 2.302716937157708, 2.3017982006261946, 2.302715628516515, 2.303485155011118, 2.302582730769544], "accuracy": [0.08691058307886124, 0.09536388516426086, 0.08915598690509796, 0.09615638852119446, 0.08717474341392517, 0.08770307898521423], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]