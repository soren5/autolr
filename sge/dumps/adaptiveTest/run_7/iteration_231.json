[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 0, 2, 3, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [76, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [7, 4, 0, 3], [7, 4], [76], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [36, 49, 44, 92]], "fitness": -0.8268571496009827, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [1.963155154633311, 1.4281251042542, 1.0329422517585527, 0.8785464512106764, 0.804078482633663, 0.772289465092838, 0.7154747119606163, 0.7038052606466125, 0.703034067882948, 0.6441464391303904, 0.6340400008729514, 0.6106971063870229, 0.6427196025958607, 0.5986952255147244, 0.5705066226524148, 0.559698912776488, 0.5685715104972745, 0.5535660466781271, 0.5482856204103186, 0.5317239095868372, 0.5316342526911241, 0.4939604861672371, 0.5080324352385897, 0.4839431320663614, 0.46764599689639336, 0.502972812676836, 0.48213647221530104, 0.4847242427642209, 0.4594756041566977, 0.44120641483953205, 0.44704563337278685, 0.4359759771434969, 0.44385562377158033, 0.4368085850262922, 0.42110198669666, 0.4191299259127281, 0.4282797470643552, 0.40656430597523213], "accuracy": [0.340509831905365, 0.5143309831619263, 0.6304318904876709, 0.6723021864891052, 0.6944921612739563, 0.7125874757766724, 0.7276449799537659, 0.7314753532409668, 0.7257958054542542, 0.7535332441329956, 0.7580240368843079, 0.7688548564910889, 0.7535332441329956, 0.7736098170280457, 0.7847048044204712, 0.7865539789199829, 0.7877426743507385, 0.7864218950271606, 0.7932901978492737, 0.8010830879211426, 0.7987055778503418, 0.8157442808151245, 0.8082155585289001, 0.8171972036361694, 0.82683926820755, 0.8115176558494568, 0.8203672170639038, 0.8187822103500366, 0.8321225643157959, 0.8358209133148193, 0.8380662798881531, 0.8359529972076416, 0.8345000743865967, 0.8335754871368408, 0.8498216867446899, 0.842028796672821, 0.8404437899589539, 0.8492933511734009], "val_loss": [1.4679713589804513, 0.7896834782191685, 0.8022781269890922, 0.6412045104163033, 0.6020892177309308, 0.5683235100337437, 0.5446946110044207, 0.5053203446524483, 0.5078200953347343, 0.4970639773777553, 0.4628119809286935, 0.4708638531821115, 0.474455612046378, 0.44827680928366526, 0.44164724009377615, 0.4608206067766462, 0.4376064879553659, 0.41946050098964144, 0.4183373195784433, 0.40436004740851267, 0.39360816138131277, 0.43727885825293406, 0.43569423471178326, 0.3943649785859244, 0.3888554402760097, 0.40768367052078247, 0.3705644692693438, 0.3739390117781503, 0.36858376434871126, 0.3853167636053903, 0.35093384981155396, 0.35306033917835783, 0.33972316128867014, 0.3520279441561018, 0.35829279252461027, 0.3904195513044085, 0.3829026051930019, 0.33792201961789814], "val_accuracy": [0.4243333339691162, 0.6596666574478149, 0.6483333110809326, 0.7059999704360962, 0.7123333215713501, 0.75, 0.7480000257492065, 0.7766666412353516, 0.7649999856948853, 0.7816666960716248, 0.7946666479110718, 0.7926666736602783, 0.7983333468437195, 0.7960000038146973, 0.8069999814033508, 0.7900000214576721, 0.7906666398048401, 0.8149999976158142, 0.8230000138282776, 0.8233333230018616, 0.8299999833106995, 0.800000011920929, 0.8029999732971191, 0.824999988079071, 0.8309999704360962, 0.812333345413208, 0.8373333215713501, 0.8316666483879089, 0.8386666774749756, 0.8266666531562805, 0.8510000109672546, 0.8539999723434448, 0.8606666922569275, 0.8516666889190674, 0.8433333039283752, 0.8330000042915344, 0.8266666531562805, 0.8576666712760925]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 3, 5, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [76, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [7, 4, 0, 3], [7, 4], [76], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [36, 49, 44, 92]], "fitness": -0.7797142863273621, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 1, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.246342226057918, 1.9442325699456915, 1.41623858417644, 1.1388920507946223, 1.0052869661829618, 0.9047867570019763, 0.8653519624464578, 0.8259233483753625, 0.7828031437287729, 0.7742837574487947, 0.7590553710694011, 0.7305867572454902, 0.71289382795254, 0.7020087741889092, 0.6806499517085199, 0.6796786096338204, 0.6793563254851676, 0.6561341731618534, 0.6413096947173055, 0.6365067070076227], "accuracy": [0.2211068570613861, 0.4163254499435425, 0.5354642868041992, 0.6077136397361755, 0.6509047746658325, 0.678642213344574, 0.6989829540252686, 0.7054550051689148, 0.7108704447746277, 0.7154933214187622, 0.7223616242408752, 0.737022876739502, 0.7380794882774353, 0.7417778372764587, 0.752212405204773, 0.750759482383728, 0.7454761862754822, 0.7622507214546204, 0.7663452625274658, 0.765949010848999], "val_loss": [1.8118336541312081, 1.3076377936771937, 0.9089611598423549, 0.764194301196507, 0.6789736236844744, 0.6564584800175258, 0.6231240545000348, 0.6118916273117065, 0.5955381563731602, 0.5908881085259574, 0.579074570110866, 0.5381644453321185, 0.5266995259693691, 0.5238660063062396, 0.501400181225368, 0.5142287526811872, 0.5062169517789569, 0.4927065202168056, 0.48508739471435547, 0.5130199364253453], "val_accuracy": [0.45133334398269653, 0.5680000185966492, 0.6489999890327454, 0.6866666674613953, 0.7193333506584167, 0.7153333425521851, 0.7250000238418579, 0.737333357334137, 0.7233333587646484, 0.7239999771118164, 0.7233333587646484, 0.7596666812896729, 0.7639999985694885, 0.765666663646698, 0.7883333563804626, 0.778333306312561, 0.7806666493415833, 0.7829999923706055, 0.7823333144187927, 0.7536666393280029]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 3, 3, 0, 2, 8, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [10, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [7, 4, 0, 3], [7, 4], [76], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [40, 49, 44, 92]], "fitness": -0.7788571715354919, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.1344943038382156, 1.4537207028963752, 1.1322661402706993, 0.9559334408668495, 0.8552338072038392, 0.834933868528058, 0.779505065931006, 0.741324759446052, 0.7383045356476139, 0.7173783346300097, 0.6870555101746597, 0.704414218723215, 0.6715566888540144, 0.6592771190583604, 0.6309568802788588, 0.6546318006632019, 0.6269181329245738, 0.6105138912586378, 0.6118301506669782, 0.5864446558074992], "accuracy": [0.29784706234931946, 0.5070664286613464, 0.5955620408058167, 0.6573768258094788, 0.6851142644882202, 0.6927750706672668, 0.709549605846405, 0.7271166443824768, 0.726192057132721, 0.7339849472045898, 0.7415136694908142, 0.7378153204917908, 0.7500990629196167, 0.7532690763473511, 0.7672698497772217, 0.7528728246688843, 0.7644960880279541, 0.7714964747428894, 0.7732135653495789, 0.7798177003860474], "val_loss": [1.3441872937338692, 0.8144497701099941, 0.7532906532287598, 0.720488360949925, 0.623544556753976, 0.582983272416251, 0.5656043631689889, 0.5352557556969779, 0.538655264036996, 0.5314013276781354, 0.5453926154545375, 0.5046600443976266, 0.4943094934735979, 0.5068191800798688, 0.47474091393607004, 0.4621008634567261, 0.47157178606305805, 0.47445925644465853, 0.4612292732511248, 0.45214269842420307], "val_accuracy": [0.6013333201408386, 0.6733333468437195, 0.6736666560173035, 0.6606666445732117, 0.7120000123977661, 0.7206666469573975, 0.753333330154419, 0.7526666522026062, 0.7576666474342346, 0.7566666603088379, 0.7363333106040955, 0.7789999842643738, 0.777999997138977, 0.7556666731834412, 0.7873333096504211, 0.7826666831970215, 0.7803333401679993, 0.7736666798591614, 0.7846666574478149, 0.7806666493415833]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 0, 2, 3, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 2, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [51, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [2, 4, 0, 3], [2, 2], [76], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [7, 49, 44, 92]], "fitness": -0.3248571455478668, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(beta, alpha)))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3033443445448296, 2.3008777207198348, 2.3029571972377014, 2.2999980134451317, 2.3010782769736897, 2.2972607254556867, 2.299465137591782, 2.298202998382131, 2.298336314046545, 2.2991126376907696, 2.2980416021673293, 2.2972804031288936, 2.2989513089612426, 2.296934066242656, 2.295872966296259, 2.29659058096355, 2.295818957733267, 2.2968643761235397, 2.294180138330607, 2.294064367987366, 2.293922433763715, 2.292666490508455, 2.293371969635429, 2.2926788560907365, 2.2925209381230487, 2.293013476613742, 2.290915601493786, 2.2896945496686243, 2.291427769318957, 2.2900150205795837, 2.2892069402482327, 2.289238940329521, 2.2898043005961815, 2.2881310259456633, 2.2892380587381695, 2.2891591300644407, 2.2871479989672694, 2.2881822372235483, 2.2873421650300676, 2.2864572270010064, 2.285498831455088, 2.2848594088863625, 2.2866545566525582, 2.2847559999056055, 2.2833220467449666, 2.2834556998357547, 2.2842217164977416, 2.2832091600352338, 2.2823283279324724, 2.2846433601170295, 2.282644585532724, 2.281941410163453, 2.281594857500686, 2.281007249798395, 2.2815838980873138, 2.2793627599951236, 2.2783203491555577, 2.2814297870386073, 2.2808852389409573, 2.2779363361820173, 2.2802212790349503, 2.2788017008676507, 2.278210966515582, 2.277292538123785, 2.2766637233396043, 2.2756404185795813, 2.2770544069947944, 2.275733240244962, 2.2753790308219597, 2.2744483134025724, 2.2733128582245605, 2.272857127204122, 2.2740542557040824, 2.273725857713896, 2.2726213518560145, 2.274514864212518, 2.2720128752063875, 2.2719514557651133, 2.2722647570820533, 2.2713967591165916, 2.272193677767692, 2.270395890045569, 2.2698488181623975, 2.2685705825652995, 2.26861895867437, 2.268733564983222, 2.2673756294026273, 2.268361854987799, 2.267834753833348, 2.266167384978881, 2.2670201077799454, 2.2661064539319726, 2.268403502156816, 2.265648992542483, 2.265466059802026, 2.2644647891574046, 2.264614886485543, 2.2643241747857528, 2.2639903629208757, 2.264105888011984], "accuracy": [0.09457138925790787, 0.09391097724437714, 0.08691058307886124, 0.09694888442754745, 0.09694888442754745, 0.09998679161071777, 0.09708096832036972, 0.09879804402589798, 0.09959053993225098, 0.09906221181154251, 0.09932637959718704, 0.1006472036242485, 0.1014397069811821, 0.108440101146698, 0.10632677376270294, 0.10289261490106583, 0.10421344637870789, 0.10368511080741882, 0.10962884873151779, 0.11306300014257431, 0.11689341068267822, 0.11755382269620895, 0.109232597053051, 0.12112006545066833, 0.11345925182104111, 0.10817593336105347, 0.11900673806667328, 0.1282525360584259, 0.12032756209373474, 0.1216483935713768, 0.12072381377220154, 0.12323339283466339, 0.12442214041948318, 0.12772421538829803, 0.12402588874101639, 0.12574297189712524, 0.12759213149547577, 0.1278562992811203, 0.12878087162971497, 0.1278562992811203, 0.13115836679935455, 0.13815876841545105, 0.1290450394153595, 0.14172500371932983, 0.14172500371932983, 0.1450270712375641, 0.1352529376745224, 0.1414608359336853, 0.14542332291603088, 0.14000792801380157, 0.1368379294872284, 0.1422533392906189, 0.14581957459449768, 0.14212125539779663, 0.14529123902320862, 0.14753665030002594, 0.14978206157684326, 0.1406683325767517, 0.1434420794248581, 0.15717871487140656, 0.15202747285366058, 0.1492537260055542, 0.15400871634483337, 0.15453705191612244, 0.16259410977363586, 0.15836745500564575, 0.1562541276216507, 0.16021661460399628, 0.15651829540729523, 0.1674811840057373, 0.16483952105045319, 0.16642451286315918, 0.16523577272891998, 0.16734910011291504, 0.16734910011291504, 0.15876370668411255, 0.16351869702339172, 0.1678774207830429, 0.1702549159526825, 0.17461365461349487, 0.17091533541679382, 0.177255317568779, 0.1736890822649002, 0.18240654468536377, 0.17540615797042847, 0.18042530119419098, 0.18240654468536377, 0.17857614159584045, 0.17857614159584045, 0.18636904656887054, 0.18214239180088043, 0.18333113193511963, 0.17712323367595673, 0.18214239180088043, 0.18412363529205322, 0.18518029153347015, 0.19231277704238892, 0.18702945113182068, 0.19336943328380585, 0.18636904656887054], "val_loss": [1.9706121172223772, 1.9702393668038505, 1.9698679106576102, 1.969496590750558, 1.9691265651157923, 1.9687598092215401, 1.968393189566476, 1.9680329731532507, 1.9676643780299596, 1.9672995976039342, 1.9669320242745536, 1.9665673119681222, 1.9662012372698103, 1.9658379554748535, 1.9654724257332938, 1.965108803340367, 1.96474027633667, 1.9643768583025252, 1.9640140533447266, 1.9636506353105818, 1.9632886477879115, 1.9629225730895996, 1.9625560215541296, 1.9621915817260742, 1.9618285724094935, 1.961467947278704, 1.9611050742013114, 1.960742746080671, 1.9603791236877441, 1.960014820098877, 1.9596529688153947, 1.9592924118041992, 1.9589311735970634, 1.958569117954799, 1.9582067217145647, 1.9578426224844796, 1.9574792725699288, 1.9571143559047155, 1.95675413949149, 1.9563937868390764, 1.9560364995683943, 1.955674171447754, 1.9553104128156389, 1.9549463135855538, 1.95458037512643, 1.9542139598301478, 1.9538519723074776, 1.9534897804260254, 1.9531275204249792, 1.9527649879455566, 1.952402182987758, 1.9520367213657923, 1.9516706466674805, 1.9513049806867326, 1.9509404046194894, 1.9505737849644251, 1.9502085277012415, 1.9498442241123743, 1.949479443686349, 1.9491160937717982, 1.9487500871930803, 1.9483845574515206, 1.9480155536106654, 1.9476492745535714, 1.9472853115626745, 1.9469098363603865, 1.9465418543134416, 1.9461772101266044, 1.9458098411560059, 1.9454434939793177, 1.945068086896624, 1.9446966307503837, 1.9443253789629256, 1.943950925554548, 1.9435787882123674, 1.9432069914681571, 1.9428323337009974, 1.942460400717599, 1.942086969103132, 1.9417122432163783, 1.9413408551897322, 1.940967082977295, 1.940591607775007, 1.9402128628322057, 1.9398354121616908, 1.9394564628601074, 1.9390807832990373, 1.9386980874197823, 1.9383178438459123, 1.9379349436078752, 1.937556334904262, 1.9371743202209473, 1.9367948940822057, 1.9364125388009208, 1.9360277312142509, 1.9356433323451452, 1.9352568217686243, 1.9348665646144323, 1.9344782829284668, 1.9340910911560059], "val_accuracy": [0.03700000047683716, 0.03966666758060455, 0.04066666588187218, 0.041999999433755875, 0.04500000178813934, 0.04933333396911621, 0.05166666582226753, 0.054666668176651, 0.05833333358168602, 0.060333333909511566, 0.06300000101327896, 0.06599999964237213, 0.06866666674613953, 0.07133333384990692, 0.07400000095367432, 0.07699999958276749, 0.08233333379030228, 0.0846666693687439, 0.08900000154972076, 0.09266666322946548, 0.09533333033323288, 0.09933333098888397, 0.10300000011920929, 0.10766666382551193, 0.11166666448116302, 0.11666666716337204, 0.12033333629369736, 0.12333333492279053, 0.12600000202655792, 0.1289999932050705, 0.13066667318344116, 0.13500000536441803, 0.13866665959358215, 0.1420000046491623, 0.14366666972637177, 0.14733333885669708, 0.15000000596046448, 0.15333333611488342, 0.1576666682958603, 0.16099999845027924, 0.16300000250339508, 0.16633333265781403, 0.16899999976158142, 0.1743333339691162, 0.17800000309944153, 0.18199999630451202, 0.18433333933353424, 0.18833333253860474, 0.1899999976158142, 0.195333331823349, 0.19833333790302277, 0.20200000703334808, 0.20600000023841858, 0.20866666734218597, 0.21033333241939545, 0.21466666460037231, 0.21833333373069763, 0.22100000083446503, 0.22566667199134827, 0.22699999809265137, 0.2290000021457672, 0.23233333230018616, 0.23533333837985992, 0.23899999260902405, 0.2409999966621399, 0.24500000476837158, 0.2473333328962326, 0.25, 0.25099998712539673, 0.2540000081062317, 0.257999986410141, 0.25966668128967285, 0.26233333349227905, 0.26499998569488525, 0.2680000066757202, 0.2709999978542328, 0.27399998903274536, 0.2759999930858612, 0.2770000100135803, 0.2796666622161865, 0.28200000524520874, 0.28433331847190857, 0.28700000047683716, 0.2876666784286499, 0.289000004529953, 0.29233333468437195, 0.29366666078567505, 0.29466667771339417, 0.2953333258628845, 0.296999990940094, 0.2983333468437195, 0.3009999990463257, 0.3033333420753479, 0.3059999942779541, 0.30799999833106995, 0.30933332443237305, 0.3100000023841858, 0.3113333284854889, 0.312666654586792, 0.31566667556762695]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 3, 6, 0, 2, 5, 3, 5, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [76, 46, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [7, 4, 0, 3], [7, 4], [76], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 4, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [2, 49, 44, 92]], "fitness": -0.14714285731315613, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 10, 5, 2, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.square(grad), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.303448401170085, 2.301239507640153, 2.3035754332090836, 2.300870255991893, 2.302204869788919, 2.2986263688749657, 2.3010894543049814, 2.300056147647808, 2.300466123935396, 2.3014795121074654, 2.300677452829331, 2.3001513371236446, 2.302073687074868, 2.300292098180509, 2.299509375307302, 2.3004388392262882, 2.299987926679658, 2.3012221964547788, 2.2987748218360533, 2.298915422194197, 2.2990023641066073, 2.2980482551195305, 2.2990335467437695, 2.2985705911774663, 2.29859899085794, 2.299362513524918, 2.297530446684261, 2.29651976308771, 2.2985401624670243, 2.29737596511211, 2.2967884153533116, 2.2970721231963673, 2.297871513420864, 2.2964608150938672, 2.2978149190665142, 2.298004466466081, 2.2962169118797333, 2.2975552595365536, 2.2968534513817898, 2.296200840118271, 2.2954391188955956, 2.2951768293608734, 2.297194310686985, 2.2955616503312304, 2.2943959405881666, 2.294831562854705, 2.295702323276196, 2.29492780340661, 2.294324799645862, 2.2969066989010885, 2.2951850717912623, 2.2947250817981235, 2.2946676107965143, 2.2943014321058275, 2.295068709605626, 2.2930874704228197, 2.2923012458731735, 2.2956843229726385, 2.2953445074375924, 2.2925557486526937, 2.295324108651317, 2.293976980256461, 2.2938307267232987, 2.293011724893774, 2.292529433300435, 2.2921557296079778, 2.2936054241891863, 2.292372803882664, 2.2923531652583327, 2.2914837876079166, 2.291066350623239, 2.290640415060144, 2.292030408256137, 2.292043677001125, 2.291135267448652, 2.2932783626467717, 2.291175477020713, 2.291277536957287, 2.2919499752244707, 2.2912381216834454, 2.2921383953711705, 2.29064088204061, 2.2904609515918577, 2.289507766772003, 2.289653454820761, 2.2901537819561186, 2.2888903262954994, 2.2903265124220087, 2.29001072813192, 2.288696955003286, 2.2897078418114467, 2.2890680563086137, 2.2914764358382955, 2.289102212990028, 2.2893394883503104, 2.2885117368329047, 2.288947736330477, 2.289064299428877, 2.288810979546872, 2.2891457408977582], "accuracy": [0.09430722147226334, 0.09298639744520187, 0.08625016361474991, 0.09430722147226334, 0.09391097724437714, 0.09642054885625839, 0.09311848133802414, 0.09470347315073013, 0.09470347315073013, 0.09351472556591034, 0.0936468094587326, 0.0956280529499054, 0.09338264167308807, 0.1018359512090683, 0.09879804402589798, 0.09417514503002167, 0.09351472556591034, 0.0936468094587326, 0.09985470771789551, 0.09998679161071777, 0.1014397069811821, 0.10342095047235489, 0.0952318087220192, 0.10540219396352768, 0.09853387624025345, 0.0936468094587326, 0.10038304328918457, 0.11055342853069305, 0.10236428678035736, 0.10077928751707077, 0.1022322028875351, 0.1006472036242485, 0.10170386731624603, 0.10645885765552521, 0.09998679161071777, 0.09959053993225098, 0.10474177449941635, 0.1014397069811821, 0.10408136248588562, 0.1010434553027153, 0.10513802617788315, 0.10949676483869553, 0.10236428678035736, 0.11213842034339905, 0.11200633645057678, 0.11147800832986832, 0.10474177449941635, 0.108440101146698, 0.11227050423622131, 0.10857218503952026, 0.10447761416435242, 0.10910051316022873, 0.11134592443704605, 0.11068551242351532, 0.10645885765552521, 0.11028926074504852, 0.11728965491056442, 0.10500594228506088, 0.10381719470024109, 0.11636507511138916, 0.11213842034339905, 0.10989301651716232, 0.11240258812904358, 0.11200633645057678, 0.11610091477632523, 0.11398758739233017, 0.11319508403539658, 0.11187426000833511, 0.10751552134752274, 0.12362963706254959, 0.11517632752656937, 0.11702549457550049, 0.1154404953122139, 0.12112006545066833, 0.11755382269620895, 0.11372341960668564, 0.11649715900421143, 0.11979923397302628, 0.11781799048185349, 0.11887465417385101, 0.11438383162021637, 0.11940298229455948, 0.11913882195949554, 0.12362963706254959, 0.12481838464736938, 0.1212521493434906, 0.1266675442457199, 0.11913882195949554, 0.12362963706254959, 0.1224408894777298, 0.12138422578573227, 0.1224408894777298, 0.11874257028102875, 0.12429005652666092, 0.120459645986557, 0.12098798155784607, 0.12732796370983124, 0.12191256135702133, 0.1262712925672531, 0.11913882195949554], "val_loss": [1.9708469935825892, 1.9707111631120955, 1.9705757413591658, 1.9704399790082658, 1.9703050340924944, 1.9701711109706335, 1.9700367110116142, 1.9699047633579798, 1.9697697503226144, 1.9696360996791296, 1.969501291002546, 1.969367572239467, 1.9692331041608537, 1.969099794115339, 1.9689654622759138, 1.9688318797520228, 1.968696117401123, 1.9685619899204798, 1.9684290885925293, 1.9682957104274206, 1.968162672860282, 1.9680280004228865, 1.9678937367030553, 1.967759472983224, 1.967625549861363, 1.9674927166530065, 1.9673582485743932, 1.9672246660505022, 1.9670906066894531, 1.966956615447998, 1.966822624206543, 1.9666895185198103, 1.9665568215506417, 1.966423443385533, 1.9662901333400182, 1.966156346457345, 1.9660228320530482, 1.9658889089311873, 1.965756552559989, 1.9656243324279785, 1.9654934746878487, 1.965360164642334, 1.9652273995535714, 1.9650943619864327, 1.964960711342948, 1.9648264476231165, 1.9646944999694824, 1.964562211717878, 1.9644299234662737, 1.9642975670950753, 1.9641649382455009, 1.9640319687979562, 1.963897977556501, 1.9637643950326102, 1.963632038661412, 1.9634990010942732, 1.9633663041251046, 1.9632336071559362, 1.9631009783063615, 1.9629696437290736, 1.962836401803153, 1.9627039773123605, 1.9625703266688757, 1.9624388558523995, 1.9623079299926758, 1.9621729850769043, 1.9620407649448939, 1.9619097709655762, 1.96177795955113, 1.9616471018110002, 1.9615136555262975, 1.9613819122314453, 1.9612499645778112, 1.9611176082066126, 1.9609860692705428, 1.9608543259756905, 1.9607225145612444, 1.9605911799839564, 1.9604593004499162, 1.9603271484375, 1.9601966312953405, 1.9600660460335868, 1.959934915815081, 1.9598026275634766, 1.9596714292253767, 1.9595394134521484, 1.9594085557120187, 1.9592761993408203, 1.9591445241655623, 1.959012508392334, 1.9588806288582938, 1.9587492942810059, 1.95861850466047, 1.9584879875183105, 1.9583558355058943, 1.9582246371677943, 1.9580930301121302, 1.957960537501744, 1.9578289304460799, 1.9576980045863561], "val_accuracy": [0.036666665226221085, 0.036666665226221085, 0.03766666725277901, 0.038333334028720856, 0.03933333232998848, 0.03966666758060455, 0.03933333232998848, 0.04066666588187218, 0.04066666588187218, 0.041333332657814026, 0.041999999433755875, 0.04266666620969772, 0.04466666653752327, 0.04500000178813934, 0.047333333641290665, 0.04866666719317436, 0.05000000074505806, 0.05133333429694176, 0.05133333429694176, 0.05233333259820938, 0.05366666615009308, 0.054666668176651, 0.0560000017285347, 0.05700000002980232, 0.058666665107011795, 0.059333331882953644, 0.059333331882953644, 0.06133333221077919, 0.06233333423733711, 0.06300000101327896, 0.06400000303983688, 0.06499999761581421, 0.0663333311676979, 0.06700000166893005, 0.06833333522081375, 0.06933332979679108, 0.07066666334867477, 0.07133333384990692, 0.07199999690055847, 0.0729999989271164, 0.07400000095367432, 0.07466666400432587, 0.07599999755620956, 0.07699999958276749, 0.07866666465997696, 0.08100000023841858, 0.08233333379030228, 0.08299999684095383, 0.0833333358168602, 0.08566666394472122, 0.08733333647251129, 0.08833333104848862, 0.08933333307504654, 0.09200000017881393, 0.09266666322946548, 0.09333333373069763, 0.09433333575725555, 0.09700000286102295, 0.09833333641290665, 0.0989999994635582, 0.09966666996479034, 0.10166666656732559, 0.10233332961797714, 0.10433333367109299, 0.10733333230018616, 0.10766666382551193, 0.10999999940395355, 0.11133333295583725, 0.11233333498239517, 0.11400000005960464, 0.11566666513681412, 0.11666666716337204, 0.11866666376590729, 0.12033333629369736, 0.12066666781902313, 0.12266666442155838, 0.12333333492279053, 0.12433333694934845, 0.12533333897590637, 0.12666666507720947, 0.1276666671037674, 0.12933333218097687, 0.12966667115688324, 0.12999999523162842, 0.1303333342075348, 0.13300000131130219, 0.13433332741260529, 0.13600000739097595, 0.1366666704416275, 0.1379999965429306, 0.14033333957195282, 0.14133332669734955, 0.14166666567325592, 0.14233332872390747, 0.14266666769981384, 0.14399999380111694, 0.1446666717529297, 0.14633333683013916, 0.1469999998807907, 0.14800000190734863]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 3, 5, 0, 4, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [76, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [7, 4, 0, 3], [2, 4], [76], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 0, 0, 1, 1, 0, 1, 0, 3], [36, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 2, 1, 1, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [31466.711153999815, 592178.199643376, 2779131.943204332, 7665063.5259543, 16307444.650112271, 29845612.152159557], "accuracy": [0.09826971590518951, 0.10487385839223862, 0.09734513610601425, 0.10302469879388809, 0.09879804402589798, 0.09708096832036972], "val_loss": [119583.30357142857, 945686.2857142857, 3180041.714285714, 7524380.857142857, 14680422.0, 25349933.14285714], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 3, 3, 2, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 1, 1, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [51, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [2, 4, 0, 3], [2, 2], [76], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 4, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 0, 3, 2, 1, 1, 0, 21, 12, 9, 4], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.subtract(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.pow(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 3, 5, 9, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [76, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [7, 4, 0, 3], [7, 4], [76], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 0, 0, 1, 1, 0, 1, 0, 3], [16, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 3, 2, 1, 1, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [5493.803967503981, 101011.04087348105, 471502.5713165368, 1297516.8538171973, 2757198.894531766, 5042305.368775591], "accuracy": [0.09813763201236725, 0.10487385839223862, 0.09734513610601425, 0.10302469879388809, 0.09879804402589798, 0.09721305221319199], "val_loss": [20557.816964285714, 160746.14732142858, 538748.5178571428, 1272739.357142857, 2480893.0714285714, 4281384.571428572], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 2, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [10, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [2, 4, 0, 3], [2, 4], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 3, 3, 4, 1, 2, 0, 7, 5, 6, 4, 4, 5, 5, 3, 9, 9, 2, 6, 5], [3, 1, 0, 1, 1, 0, 1, 0, 3], [29, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(alpha))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 3, 5, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [76, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [7, 4, 0, 3], [2, 4], [76], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [9, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 4, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [36, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 1, 3, 2, 1, 1, 0, 1, 1, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302959791720583, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [51, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [7, 4, 0, 3], [7, 4], [76], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 1, 9, 9, 2, 6, 5], [0, 1, 3, 1, 1, 0, 1, 0, 3], [55, 49, 44, 92, 20, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 26, 17, 9, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.negative(alpha), sigma), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.negative(tf.math.square(tf.math.square(alpha))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 0, 2, 3, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [10, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [2, 4, 0, 3], [2, 2], [76], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 4, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 1, 3, 2, 1, 0, 2], [33, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 1, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 21, 12, 9, 2], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(alpha))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.multiply(beta, tf.math.pow(alpha, tf.math.subtract(tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.pow(sigma, beta), alpha))))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 3, 3, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 2, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [76, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [2, 4, 0, 3], [2, 4], [76], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 4, 5, 5, 3, 9, 9, 2, 6, 5], [0, 0, 0, 1, 1, 0, 1, 0, 3], [13, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302938944659512, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 4, 3, 0, 2, 3, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [7, 4, 0, 3], [5, 2], [76], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [6, 4, 8, 3, 4, 1, 4, 0, 7, 8, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3, 2], [28, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 20, 11, 9, 4], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), alpha)))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, tf.math.pow(tf.math.negative(alpha), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [51, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [2, 4, 0, 3], [6, 2], [76], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 4, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 3, 1, 0, 3], [89, 49, 44, 92, 64]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 27, 18, 9, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.math.sqrt(sigma), tf.math.multiply(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.negative(beta), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(alpha, sigma)))), tf.math.pow(tf.math.negative(alpha), tf.math.square(tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 0, 2, 3, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [51, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [7, 4, 0, 3], [2, 2], [76], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [5, 8, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [16, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.302959791720583, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 3, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 2, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [51, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [2, 4, 0, 3], [3, 4], [76], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 4, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [7, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302395346520237, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 3, 3, 9, 2, 5, 3, 2, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [51, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [7, 4, 0, 3], [6, 2], [76], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 1, 1, 0, 1, 0, 3], [53, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 26, 17, 9, 4], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.negative(alpha), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.negative(tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.square(alpha))))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 3, 3, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [10, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [5, 4, 0, 3], [2, 4], [76], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 4, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 3, 2, 1, 0, 2], [16, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))))), grad), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302959350846179, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 3, 0, 2, 5, 3, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 1, 0, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [10, 86, 27, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [2, 4, 0, 3], [2, 2], [76], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [16, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 21, 12, 9, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.pow(alpha, tf.math.subtract(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.pow(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]