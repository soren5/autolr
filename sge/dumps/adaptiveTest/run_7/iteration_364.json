[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 3, 8, 4, 9, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 2, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8180000185966492, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 3, 2, 1, 1, 1, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1864545932299175, 1.7735212512886078, 1.8945867308158255, 1.1978305349134577, 0.9944229171953465, 0.8448744512599425, 0.8019846784770922, 0.731725277106807, 0.6956298555822074, 0.6619794231128101, 0.68662788706244, 0.6414834254642346, 0.6032787280280466, 0.602585262775799, 0.566554676453514, 0.5629983308245682, 0.5565954894437577, 0.5212042599762939, 0.5415680898517555, 0.5064313890612467, 0.507493518158083, 0.49905142788369944, 0.5022024198167943, 0.4853831228681166, 0.47274862351654984, 0.46760659098719654, 0.4429529933031319, 0.436349821872463, 0.4625618674728014, 0.43657734654740477, 0.4302502367214961, 0.4234626091246151, 0.4300714838010382, 0.40730774136519216, 0.4253133030032847, 0.40093404335305516, 0.3850151099596262, 0.3910655237861266, 0.40750161891505704, 0.36510430430109475, 0.38295351142628853, 0.3682167569148054, 0.3630102300341607, 0.36801058396041636, 0.36010482973820024, 0.3455115932759167], "accuracy": [0.28622373938560486, 0.3963809311389923, 0.3572843670845032, 0.5604279637336731, 0.6312243938446045, 0.6775855422019958, 0.6975300312042236, 0.719852089881897, 0.7342491149902344, 0.7516840696334839, 0.7364945411682129, 0.7497028112411499, 0.7658169269561768, 0.772288978099823, 0.789459764957428, 0.7865539789199829, 0.7902522683143616, 0.8021397590637207, 0.7909126877784729, 0.8099326491355896, 0.8076872229576111, 0.8156121969223022, 0.81112140417099, 0.8182538747787476, 0.8235371708869934, 0.8253863453865051, 0.8334434032440186, 0.8379341959953308, 0.8309338092803955, 0.8401796221733093, 0.842028796672821, 0.8471800088882446, 0.8364813327789307, 0.8485008478164673, 0.8432175517082214, 0.8520671129226685, 0.8585391640663147, 0.8516708612442017, 0.8490291833877563, 0.8661999702453613, 0.8564258217811584, 0.8613129258155823, 0.8615770936012268, 0.860652506351471, 0.8656716346740723, 0.8729361891746521], "val_loss": [1.5197746413094657, 1.36090544291905, 1.2578206402914864, 0.8808387007032122, 0.693485072680882, 0.6535122735159737, 0.6365349973951068, 0.5804219756807599, 0.5023924963814872, 0.5183381693703788, 0.5014245339802333, 0.4897855520248413, 0.4531337874276297, 0.45531431266239714, 0.43645176717213224, 0.4281855395862034, 0.4003840684890747, 0.48163293089185444, 0.38769670895167757, 0.409885082926069, 0.3923350317137582, 0.42415066276277813, 0.4215509976659502, 0.4007682374545506, 0.42398898942129953, 0.361248893397195, 0.3868867073740278, 0.45193122114454, 0.3528243218149458, 0.34725314378738403, 0.3568176456860134, 0.35446020535060335, 0.361559978553227, 0.363970730985914, 0.32994366543633596, 0.33412852457591463, 0.33358293771743774, 0.34883226667131695, 0.34115850925445557, 0.3288442833083017, 0.31747035469327656, 0.3353875620024545, 0.33926319224493845, 0.3533741661480495, 0.3428911140986851, 0.34690492493765696], "val_accuracy": [0.30000001192092896, 0.41100001335144043, 0.49433332681655884, 0.6313333511352539, 0.6863333582878113, 0.7153333425521851, 0.7039999961853027, 0.7390000224113464, 0.768666684627533, 0.7540000081062317, 0.7630000114440918, 0.7630000114440918, 0.7870000004768372, 0.7950000166893005, 0.8090000152587891, 0.8149999976158142, 0.824999988079071, 0.7823333144187927, 0.8256666660308838, 0.8183333277702332, 0.8346666693687439, 0.8143333196640015, 0.8119999766349792, 0.8230000138282776, 0.812666654586792, 0.8476666808128357, 0.8323333263397217, 0.7990000247955322, 0.8476666808128357, 0.8579999804496765, 0.8503333330154419, 0.8510000109672546, 0.8416666388511658, 0.8423333168029785, 0.8629999756813049, 0.8653333187103271, 0.859666645526886, 0.8493333458900452, 0.8523333072662354, 0.8650000095367432, 0.8696666955947876, 0.8600000143051147, 0.8526666760444641, 0.8516666889190674, 0.859666645526886, 0.8506666421890259]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 2, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 4, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8154285550117493, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.negative(tf.math.negative(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1859149050640156, 1.786817018618248, 1.3791921747799925, 1.0295049551219484, 0.9309129348725155, 0.8623294468569073, 0.7739269180840127, 0.7316416718893363, 0.7348640955922594, 0.6871119077888068, 0.6684017210132048, 0.6501425106480389, 0.6032363183037669, 0.5930193526444733, 0.575238704437341, 0.5646129956240383, 0.5812020056188822, 0.5320479040290103, 0.5394250934724841, 0.512369247357355, 0.5258026978500673, 0.4836600159751646, 0.5041601358269656, 0.4938574814446897], "accuracy": [0.2868841588497162, 0.3891163766384125, 0.49966979026794434, 0.6033549308776855, 0.6392814517021179, 0.6675472259521484, 0.7066437602043152, 0.7218332886695862, 0.7186633348464966, 0.735041618347168, 0.7473253011703491, 0.7481178045272827, 0.7670056819915771, 0.7726852297782898, 0.7877426743507385, 0.7844406366348267, 0.7845727205276489, 0.7992339134216309, 0.7921014428138733, 0.8070268034934998, 0.8035926818847656, 0.8236692547798157, 0.8173292875289917, 0.8204993009567261], "val_loss": [1.523838724408831, 1.2544646603720528, 0.8072282586778913, 0.7030392033713204, 0.7658120393753052, 0.6756952660424369, 0.561599782535008, 0.6004777124949864, 0.5393967628479004, 0.5029564755303519, 0.5048231397356305, 0.48602473735809326, 0.4645587546484811, 0.464437518801008, 0.4428300176348005, 0.4395909139088222, 0.4071243575641087, 0.45883229800633024, 0.38911372423171997, 0.4267017926488604, 0.39670818192618235, 0.4044247269630432, 0.4328567896570478, 0.4193682755742754], "val_accuracy": [0.296999990940094, 0.44600000977516174, 0.6383333206176758, 0.6836666464805603, 0.6236666440963745, 0.690666675567627, 0.7476666569709778, 0.7183333039283752, 0.7383333444595337, 0.7816666960716248, 0.7706666588783264, 0.768666684627533, 0.7793333530426025, 0.781333327293396, 0.7950000166893005, 0.8053333163261414, 0.8190000057220459, 0.7873333096504211, 0.8306666612625122, 0.8149999976158142, 0.8256666660308838, 0.8193333148956299, 0.8103333115577698, 0.8043333292007446]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [3, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 0, 6, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 5, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [13, 49, 44, 92]], "fitness": -0.744857132434845, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.300857918436627, 2.2902489017108176, 2.270185807692518, 2.2399623869526986, 2.1987536979184537, 2.1429632599988966, 2.055425325168705, 1.9267380239941172, 1.7520240891044323, 1.5760807730597024, 1.450047142470061, 1.3796957254315316, 1.3594034277389802, 1.3269634256116025, 1.2845048284203133, 1.1699895674227219, 1.04815890220304, 0.9455467144322827, 0.9060357472742585, 0.8941145673199352, 0.8948325678861656, 0.8866434212783387, 0.8684683128543864, 0.838657095581549, 0.8209675495430243, 0.7909555385031201, 0.7965494183627385, 0.7905117277188339, 0.8118405801713616, 0.7952424616247451, 0.7875328924457206, 0.7868904890936631, 0.764976400677806, 0.735372699459609, 0.7205228680522607, 0.702909532027584, 0.7055182639460726, 0.7230970388264342, 0.7191098838780834, 0.7113747300410141, 0.6977583452569117, 0.70289530586872, 0.6866319076401792, 0.6865577908113979, 0.6800338539386296, 0.662935932432703, 0.6538016180462447, 0.6666334209393643, 0.6612645199018273, 0.6533556266656688, 0.6382316719303199, 0.6298181289978441, 0.6272160845929605, 0.6226503527663592, 0.6149254971334034], "accuracy": [0.0956280529499054, 0.1220446452498436, 0.17936864495277405, 0.25782591104507446, 0.3222824037075043, 0.36322811245918274, 0.395720511674881, 0.43111875653266907, 0.4507991075515747, 0.47364944219589233, 0.49214106798171997, 0.5256901383399963, 0.5443138480186462, 0.564258337020874, 0.5762779116630554, 0.6210539937019348, 0.6501122713088989, 0.6600185036659241, 0.6625280380249023, 0.6588297486305237, 0.6711134314537048, 0.685510516166687, 0.6948884129524231, 0.6934354901313782, 0.6923788189888, 0.7066437602043152, 0.6971337795257568, 0.7022850513458252, 0.6977941989898682, 0.7009642124176025, 0.7121912837028503, 0.7135120630264282, 0.7125874757766724, 0.718399167060852, 0.7265883088111877, 0.7306828498840332, 0.7320036888122559, 0.7314753532409668, 0.7300224304199219, 0.7409853339195251, 0.7391361594200134, 0.7436270117759705, 0.7448157668113708, 0.7469290494918823, 0.7500990629196167, 0.7512878179550171, 0.7519482374191284, 0.7473253011703491, 0.7445515990257263, 0.7454761862754822, 0.7553823590278625, 0.763967752456665, 0.7602694630622864, 0.7671377658843994, 0.7701756954193115], "val_loss": [1.9654229709080286, 1.9504169736589705, 1.927117007119315, 1.8957505907331194, 1.8519294602530343, 1.785031999860491, 1.6822711059025355, 1.530893087387085, 1.3364316054752894, 1.1402050427028112, 0.9861517974308559, 0.8755339213779995, 0.8114151273454938, 0.7804635763168335, 0.7440639734268188, 0.7383102178573608, 0.6768207209450858, 0.6550730807440621, 0.6633283751351493, 0.6712012120655605, 0.6843723910195487, 0.6784625223704747, 0.6486159903662545, 0.6143562964030674, 0.5929153476442609, 0.5815365144184658, 0.573718820299421, 0.5736234698976789, 0.5760878665106637, 0.571208153452192, 0.5648994616099766, 0.5592536755970546, 0.5486244985035488, 0.5357423680169242, 0.5298610755375454, 0.5349949768611363, 0.545049956866673, 0.5506837368011475, 0.5495333841868809, 0.5429087366376605, 0.5348091295787266, 0.5287050179072789, 0.5228915384837559, 0.5148676974432809, 0.5029518263680595, 0.49139675072261263, 0.4835010085787092, 0.47862134660993305, 0.4716042791094099, 0.4621549333844866, 0.45500188214438303, 0.4536073889051165, 0.45681061063494, 0.4600809471947806, 0.46088738100869314], "val_accuracy": [0.07699999958276749, 0.2240000069141388, 0.3499999940395355, 0.3889999985694885, 0.40966665744781494, 0.4403333365917206, 0.47066667675971985, 0.5049999952316284, 0.543666660785675, 0.5916666388511658, 0.6586666703224182, 0.6673333048820496, 0.6786666512489319, 0.6783333420753479, 0.6956666707992554, 0.7009999752044678, 0.7153333425521851, 0.7163333296775818, 0.6926666498184204, 0.7096666693687439, 0.7323333621025085, 0.7283333539962769, 0.7223333120346069, 0.7279999852180481, 0.7296666502952576, 0.734000027179718, 0.7363333106040955, 0.7390000224113464, 0.7383333444595337, 0.7423333525657654, 0.7440000176429749, 0.7416666746139526, 0.7476666569709778, 0.7543333172798157, 0.7563333511352539, 0.7613333463668823, 0.7670000195503235, 0.7646666765213013, 0.7673333287239075, 0.768666684627533, 0.7680000066757202, 0.7649999856948853, 0.7676666378974915, 0.7710000276565552, 0.7713333368301392, 0.7736666798591614, 0.7803333401679993, 0.7829999923706055, 0.7850000262260437, 0.7883333563804626, 0.7860000133514404, 0.7839999794960022, 0.7796666622161865, 0.778333306312561, 0.777999997138977]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 1, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [12, 49, 44, 92]], "fitness": -0.7120000123977661, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 1, 4, 2, 2, 0, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad)))), tf.math.add(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301141533916495, 2.292394842154881, 2.275801380816515, 2.2508105155011178, 2.217937997303556, 2.1762202024428348, 2.113840859154543, 2.0243549812361232, 1.8943731971404902, 1.738940674284619, 1.5809195679034918, 1.4530362193894, 1.392370982696635, 1.3279442306144944, 1.3478448636748173, 1.3283070908435473, 1.2300116484899877, 1.1412406182953585, 1.0261782727866928, 0.9482600987075641, 0.9098194688696352, 0.889120161037372, 0.8835937351582781, 0.8929292724636709, 0.8950651179309754, 0.8479794268327193, 0.8239125373530083, 0.7988207926839618], "accuracy": [0.0952318087220192, 0.11530841141939163, 0.16074495017528534, 0.2324659824371338, 0.2981112003326416, 0.34486857056617737, 0.3743230700492859, 0.41223087906837463, 0.4263637661933899, 0.4473649561405182, 0.46849822998046875, 0.4963677227497101, 0.5226522088050842, 0.5437855124473572, 0.5507858991622925, 0.5711266398429871, 0.5974111557006836, 0.6269977688789368, 0.6476026773452759, 0.6557918190956116, 0.6563201546669006, 0.6639809608459473, 0.6856426000595093, 0.6799629926681519, 0.687491774559021, 0.6964733600616455, 0.7013604640960693, 0.6992471218109131], "val_loss": [1.9664334569658553, 1.9540765626089913, 1.9347382954188757, 1.9089902469090052, 1.8752601487295968, 1.8272901943751745, 1.7564091682434082, 1.6523401737213135, 1.5074732644217355, 1.3294902529035295, 1.1516448429652624, 1.0077759538378035, 0.8995288440159389, 0.8224830627441406, 0.7985314641680036, 0.7559938601085118, 0.7459088904517037, 0.7187235525676182, 0.6644319636481149, 0.6530007634844098, 0.6603934935161045, 0.6697928394590106, 0.6852499076298305, 0.6863290752683368, 0.6640849794660296, 0.6307879516056606, 0.6061744179044452, 0.5929261445999146], "val_accuracy": [0.06800000369548798, 0.18666666746139526, 0.32733333110809326, 0.37566667795181274, 0.4000000059604645, 0.42100000381469727, 0.44733333587646484, 0.47600001096725464, 0.5073333382606506, 0.5433333516120911, 0.5889999866485596, 0.6486666798591614, 0.6656666398048401, 0.6673333048820496, 0.6653333306312561, 0.6946666836738586, 0.6976666450500488, 0.7046666741371155, 0.7179999947547913, 0.7179999947547913, 0.6990000009536743, 0.7166666388511658, 0.7329999804496765, 0.7260000109672546, 0.7213333249092102, 0.7206666469573975, 0.7246666550636292, 0.7250000238418579]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 2, 8, 1, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 2, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [4, 49, 44, 92]], "fitness": -0.2160000056028366, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3023254648097016, 2.30186607068981, 2.301369210464796, 2.3006049050253146, 2.2999655998866353, 2.3015543682038935, 2.3010353899398863, 2.301070956569133, 2.299966811000112, 2.301485925759338, 2.300200834848688, 2.2998195057610604, 2.299794030211558, 2.2970167607710645, 2.3005974072947746, 2.2978903757913347, 2.2974309191932423, 2.2970020579561155, 2.2990484778056954, 2.2974967927571224, 2.2990562776926566, 2.29743516157017, 2.2967165612651685, 2.296400604908099, 2.2972376258413254, 2.2959775736681176, 2.2957266435143246, 2.294976795385731, 2.2967510563176874, 2.2965573923163616, 2.2952664769509874, 2.295093123120182, 2.2963353770677646, 2.2931316270804314, 2.2942542566867035, 2.294763810473064, 2.2929193760346993, 2.294136796881258, 2.292683640081869, 2.2943423805204066, 2.2943159862516294, 2.294365624521135, 2.2931037166760726, 2.2930590459589064, 2.294287036769284, 2.2926907460955013, 2.291991350059071, 2.2926569665506484, 2.2917782985113866, 2.2915177185931275, 2.2914882395576415, 2.2908113643619537, 2.2906725390901213, 2.292204611368498, 2.2912264023915476, 2.288960474609085, 2.2885224871773366, 2.2908023350337365, 2.289588074500865, 2.2890753025832886, 2.290470521778494, 2.2892241902150468, 2.288523992417023, 2.288375367357463, 2.288706089070665, 2.2874862471623207, 2.2883675827751415, 2.2871743862765292, 2.2873810993729173, 2.285871214161869, 2.2858116859458204, 2.287239800260335, 2.2864936018160162, 2.2870912309398963, 2.286082890559307, 2.285323948829307, 2.2857716145563938, 2.2860251156377784, 2.284596277690913, 2.2860524270512785, 2.2844118509530675, 2.2856088470647427, 2.2830465281124614, 2.2839281638662783, 2.2835106158442326, 2.2833810658770437, 2.28449829829887, 2.283517033149065, 2.2818695981473245, 2.2832839477961295, 2.282872534604388, 2.2839973619695604, 2.282187917339268, 2.2842122814706003, 2.281972180079192, 2.2829411366454773, 2.2805229137129928, 2.2807616385738405, 2.281970185059535, 2.280866507447202], "accuracy": [0.09206181764602661, 0.08968432247638702, 0.09232597798109055, 0.0956280529499054, 0.09417514503002167, 0.09959053993225098, 0.09866596013307571, 0.0948355570435524, 0.09430722147226334, 0.09153348207473755, 0.09932637959718704, 0.09681680053472519, 0.09192973375320435, 0.1088363528251648, 0.10038304328918457, 0.1018359512090683, 0.10328886657953262, 0.10276053100824356, 0.1018359512090683, 0.10368511080741882, 0.09576013684272766, 0.10091137140989304, 0.10394927859306335, 0.10751552134752274, 0.10302469879388809, 0.10685510188341141, 0.10791176557540894, 0.11332716792821884, 0.10698718577623367, 0.1088363528251648, 0.10460969805717468, 0.10896842926740646, 0.11200633645057678, 0.11108175665140152, 0.1138555034995079, 0.10447761416435242, 0.10672302544116974, 0.11094967275857925, 0.11134592443704605, 0.11081759631633759, 0.11068551242351532, 0.10989301651716232, 0.1162329912185669, 0.109232597053051, 0.11147800832986832, 0.11187426000833511, 0.11742173880338669, 0.11478008329868317, 0.11398758739233017, 0.11478008329868317, 0.11702549457550049, 0.1162329912185669, 0.12191256135702133, 0.11795007437467575, 0.120459645986557, 0.12191256135702133, 0.12732796370983124, 0.1228371411561966, 0.1270637959241867, 0.12693171203136444, 0.11795007437467575, 0.12230881303548813, 0.12574297189712524, 0.1220446452498436, 0.12349755316972733, 0.13657376170158386, 0.12891295552253723, 0.12693171203136444, 0.12851670384407043, 0.12970545887947083, 0.1340641975402832, 0.12719587981700897, 0.13815876841545105, 0.12442214041948318, 0.1344604343175888, 0.1340641975402832, 0.13181878626346588, 0.136045441031456, 0.1368379294872284, 0.13261127471923828, 0.13789460062980652, 0.13129045069217682, 0.1418570876121521, 0.13578127324581146, 0.13076211512088776, 0.1442345827817917, 0.1340641975402832, 0.13512085378170013, 0.13829085230827332, 0.1352529376745224, 0.13961167633533478, 0.14132875204086304, 0.14080041646957397, 0.13895125687122345, 0.1472724825143814, 0.1422533392906189, 0.14291374385356903, 0.14780081808567047, 0.1442345827817917, 0.15321621298789978], "val_loss": [1.970780917576381, 1.9705770356314523, 1.9703753335135323, 1.9701722690037318, 1.9699709074837821, 1.9697679792131697, 1.969564982822963, 1.9693638256617956, 1.9691606249128069, 1.9689576285226005, 1.9687580381120955, 1.9685557910374232, 1.9683552469526018, 1.968153953552246, 1.967954090663365, 1.9677564757210868, 1.967555318559919, 1.9673545701163155, 1.9671553203037806, 1.9669545037405831, 1.9667561394827706, 1.9665564128330775, 1.9663538251604353, 1.966155733380999, 1.9659577778407507, 1.9657590729849679, 1.965557643345424, 1.9653566905430384, 1.9651566914149694, 1.9649559429713659, 1.9647562844412667, 1.9645566259111678, 1.9643586022513253, 1.9641589437212263, 1.9639618737357003, 1.9637632369995117, 1.9635650771004813, 1.963367257799421, 1.9631681442260742, 1.9629695756094796, 1.9627734592982702, 1.962573528289795, 1.9623750277927943, 1.9621778896876745, 1.9619797297886439, 1.9617833409990584, 1.9615870884486608, 1.9613879067557198, 1.9611903599330358, 1.960991723196847, 1.9607952662876673, 1.9605962889535087, 1.9603986058916365, 1.9602013996669225, 1.9600043296813965, 1.9598074640546526, 1.959608895438058, 1.9594111442565918, 1.959214687347412, 1.95901700428554, 1.95882020677839, 1.958623000553676, 1.9584285191127233, 1.9582315172467912, 1.9580332892281669, 1.9578356061662947, 1.9576373100280762, 1.9574407849993025, 1.957242556980678, 1.9570462363106864, 1.9568463053022112, 1.9566489628383092, 1.956451756613595, 1.9562557084219796, 1.9560583659580775, 1.9558600698198592, 1.955662522997175, 1.9554662023271834, 1.955266066959926, 1.9550679070608956, 1.9548674310956682, 1.9546698842729842, 1.9544708388192313, 1.9542735644749232, 1.954076153891427, 1.953880446297782, 1.9536822182791573, 1.9534860338483537, 1.953289372580392, 1.953089782169887, 1.9528891018458776, 1.952690941946847, 1.9524919646126884, 1.9522949627467565, 1.9520957810538155, 1.95189482825143, 1.9516959871564592, 1.9514972823006767, 1.9512985774448939, 1.9510989870343889], "val_accuracy": [0.036666665226221085, 0.03733333200216293, 0.039000000804662704, 0.03966666758060455, 0.03999999910593033, 0.04066666588187218, 0.0416666679084301, 0.0430000014603138, 0.04500000178813934, 0.04699999839067459, 0.04899999871850014, 0.05133333429694176, 0.05233333259820938, 0.05299999937415123, 0.055666666477918625, 0.05700000002980232, 0.058666665107011795, 0.05966666713356972, 0.06133333221077919, 0.06266666948795319, 0.06400000303983688, 0.06599999964237213, 0.0676666647195816, 0.06933332979679108, 0.07100000232458115, 0.07199999690055847, 0.0729999989271164, 0.07466666400432587, 0.07666666805744171, 0.07866666465997696, 0.08033332973718643, 0.08299999684095383, 0.0846666693687439, 0.08733333647251129, 0.08900000154972076, 0.09233333170413971, 0.09399999678134918, 0.09433333575725555, 0.0963333323597908, 0.09866666793823242, 0.10133333504199982, 0.10233332961797714, 0.10533333569765091, 0.10733333230018616, 0.11033333092927933, 0.1120000034570694, 0.11433333158493042, 0.11666666716337204, 0.11900000274181366, 0.12033333629369736, 0.12300000339746475, 0.12433333694934845, 0.12533333897590637, 0.12733332812786102, 0.1289999932050705, 0.12999999523162842, 0.1316666603088379, 0.1340000033378601, 0.1353333294391632, 0.13699999451637268, 0.1393333375453949, 0.14166666567325592, 0.14266666769981384, 0.14366666972637177, 0.14533333480358124, 0.14666666090488434, 0.14866666495800018, 0.15033333003520966, 0.15066666901111603, 0.15299999713897705, 0.15466666221618652, 0.15733332931995392, 0.1589999943971634, 0.16200000047683716, 0.1626666635274887, 0.164000004529953, 0.16633333265781403, 0.16766667366027832, 0.16899999976158142, 0.17266666889190674, 0.17533333599567413, 0.17733334004878998, 0.1783333271741867, 0.18066667020320892, 0.18199999630451202, 0.1836666613817215, 0.1860000044107437, 0.18799999356269836, 0.18966667354106903, 0.19066666066646576, 0.19333332777023315, 0.19599999487400055, 0.1966666728258133, 0.19833333790302277, 0.20033332705497742, 0.20233333110809326, 0.20533333718776703, 0.20733332633972168, 0.2083333283662796, 0.20933333039283752]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 2, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.14885714650154114, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 1, 3, 2, 1, 1, 1, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1404492560315993, 2.2931896618344387, 1.8959293732978821, 1.4666593428757748, 1.9128717412849097, 1.9905382824485738, 2.1410329173726335, 1.8932455454551627, 2.1708261449307718], "accuracy": [0.28978997468948364, 0.32465988397598267, 0.4647998809814453, 0.5325584411621094, 0.44168537855148315, 0.4159291982650757, 0.33839651942253113, 0.3975696861743927, 0.3065645098686218], "val_loss": [1.6586245809282576, 1.4924263613564628, 1.2092631884983607, 1.487208706992013, 1.2776834624154227, 1.831153052193778, 1.641803843634469, 1.6700845445905412, 1.894357749394008], "val_accuracy": [0.30666667222976685, 0.42800000309944153, 0.5586666464805603, 0.6356666684150696, 0.5226666927337646, 0.32499998807907104, 0.4269999861717224, 0.35100001096725464, 0.27666667103767395]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 5, 0, 2, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [13, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 1, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 2, 1, 0, 0, 0, 0, 20, 11, 9, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.math.subtract(beta, tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, tf.math.add(tf.math.negative(alpha), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08334434032440186, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 4, 2, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 4, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [5, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [64, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.negative(beta))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(alpha))", "other_info": {"loss": [2.302847022346423, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 2, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 2, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 4, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 2, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 0, 1, 0, 0, 0, 0, 21, 12, 9, 4], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.negative(tf.math.add(grad, tf.math.sqrt(tf.math.pow(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.pow(beta, tf.math.subtract(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.pow(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 1, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 2, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 4, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0], [4, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 1, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 20, 11, 9, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.math.subtract(beta, tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, tf.math.add(tf.math.negative(alpha), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [0, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 2, 6, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [4, 2], [76], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [11, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 15, 15, 8, 7, 2, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1225795275.9181836, 24142894242.97979, 110669945121.71179, 302517913936.77985, 656972801340.6271, 1221461505512.128], "accuracy": [0.09879804402589798, 0.09906221181154251, 0.0948355570435524, 0.10051512718200684, 0.10130762308835983, 0.10011887550354004], "val_loss": [4720882834.285714, 37755801014.85714, 127412530614.85715, 302001104018.2857, 589834953874.2858, 1019211602797.7142], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 1, 0, 2, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 6, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 20, 11, 9, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, tf.math.add(tf.math.negative(alpha), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), sigma))))", "other_info": {"loss": [2.302847022346423, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 2, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 2, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 4, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [4, 2], [76], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 3, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 0, 3, 6, 9, 4, 2, 9, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 2, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [1, 2], [76], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [36, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), grad)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07185312360525131, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 1, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0], [2, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 5, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [84, 49, 44, 92]], "fitness": -0.06028571352362633, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 9, 5, 1, 4, 2, 2, 0, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(alpha)), tf.math.negative(tf.math.add(beta, grad)))), tf.math.sqrt(tf.math.pow(tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(alpha), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.30141769288758, 2.3003438265095957, 2.3015046630474427, 2.3098485714818318, 2.3288651226911847, 2.3581606013789673, 2.3878689263837214], "accuracy": [0.09681680053472519, 0.10896842926740646, 0.1072513535618782, 0.10738343745470047, 0.10579843819141388, 0.10091137140989304, 0.10011887550354004], "val_loss": [1.9702959741864885, 1.9702624593462263, 1.9748133250645228, 1.9882402420043945, 2.0116137777056013, 2.039658546447754, 2.070687702723912], "val_accuracy": [0.10333333164453506, 0.11400000005960464, 0.10199999809265137, 0.10266666859388351, 0.10066666454076767, 0.10066666454076767, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 5, 0, 2, 2, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 1, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [35], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 6, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 3, 2, 1, 1, 1, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.302414070172726, 2.3021763150466197, 2.3018933072491343, 2.3013525664168673, 2.3009274240498057, 2.302742595355178], "accuracy": [0.09192973375320435, 0.08902391046285629, 0.09126931428909302, 0.09417514503002167, 0.09113723784685135, 0.09668471664190292], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [1, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 2, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 1, 1, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [48, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 2, 3, 2, 1, 1, 1, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha)))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302414070172726, 2.3021763150466197, 2.3018933072491343, 2.3013525664168673, 2.3009274240498057, 2.302742595355178], "accuracy": [0.09192973375320435, 0.08902391046285629, 0.09126931428909302, 0.09417514503002167, 0.09113723784685135, 0.09668471664190292], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 5, 0, 5, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 5, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 4, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [4, 8, 1, 3], [0, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 4, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 4, 2, 1, 3, 2, 1, 1, 1, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(beta)), tf.math.negative(tf.math.square(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, beta)", "other_info": {"loss": [2.3024207005143684, 2.3021974619022845, 2.3019283768554737, 2.301402354993053, 2.3009914817779826, 2.302821394506305], "accuracy": [0.09192973375320435, 0.08902391046285629, 0.09126931428909302, 0.09391097724437714, 0.09087307006120682, 0.09642054885625839], "val_loss": [1.9709947449820382, 1.971008232661656, 1.9710210391453333, 1.9710346630641393, 1.9710478782653809, 1.9710610934666224], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [1, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 0, 3, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 2, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 4, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [11, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302414070172726, 2.3021763150466197, 2.3018933072491343, 2.3013525664168673, 2.3009274240498057, 2.302742595355178], "accuracy": [0.09192973375320435, 0.08902391046285629, 0.09126931428909302, 0.09417514503002167, 0.09113723784685135, 0.09668471664190292], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 9, 2, 4, 1, 5, 2, 5, 4, 3, 1, 9, 0, 0, 4, 5, 0, 3, 9, 5, 3, 7, 9], [2, 2, 2, 0, 1, 0, 1, 2, 3, 0, 0, 2, 1, 2], [87, 72, 16, 57, 57, 39], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 0, 0, 0, 8, 4, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 4, 2, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [20, 4, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [76], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 3, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.03314285725355148, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 20, 11, 9, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(beta, tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, tf.math.add(tf.math.negative(alpha), tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), sigma))))", "other_info": {"loss": [2.3032599772759528, 2.305147058503062, 2.306932614353811, 2.308588590100457, 2.3102814915976615, 2.3143706010584943], "accuracy": [0.09060890227556229, 0.08321225643157959, 0.07911768555641174, 0.08149518072605133, 0.07013604789972305, 0.07290978729724884], "val_loss": [1.972900118146624, 1.974862711770194, 1.976818016597203, 1.9788054057529993, 1.9808038984026228, 1.9828376088823592], "val_accuracy": [0.027666667476296425, 0.022333333268761635, 0.019333332777023315, 0.015666667371988297, 0.012333333492279053, 0.01066666655242443]}}]