[{"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [4, 2, 0, 3, 2, 6, 9, 4, 4, 8, 2, 8, 0, 2, 5, 5, 2, 1, 3, 4, 5, 5, 1, 2, 6, 8, 9, 2, 6, 3, 3, 1, 1, 5, 6, 9, 2, 6, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [1, 3, 2, 2, 0, 1, 2, 2, 2, 0, 2, 2, 0, 1, 0, 0, 1, 1, 3, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 2, 0, 1, 2, 1], [23, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [25, 49, 44, 92]], "fitness": -0.7954285740852356, "mapping_values": [1, 34, 34, 21, 13, 4, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 5, 4, 1, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), alpha), grad))))))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.square(grad))))))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2198250252793352, 1.7254409709894394, 1.2249998792980357, 1.06207016145454, 0.9547049949717418, 0.8694440087685102, 0.8325142645722509, 0.8240357127093274, 0.7810480931825201, 0.7439270845068571, 0.7383067967900826, 0.7245804155979804, 0.685029805761523, 0.6860574859244524, 0.672682821845114, 0.6701332317949869, 0.665903556797215, 0.6464233727912388, 0.6325856905729228, 0.633835227497974, 0.6269100557669767, 0.6189190101440887, 0.6217881072277658, 0.6172382036346281, 0.5999647749964556, 0.5989696755149125, 0.5940418877637523], "accuracy": [0.23774930834770203, 0.46387532353401184, 0.5752212405204773, 0.624620258808136, 0.6560559868812561, 0.687491774559021, 0.6947563290596008, 0.6999075412750244, 0.7162858247756958, 0.7223616242408752, 0.7263241410255432, 0.7322678565979004, 0.7477215528488159, 0.7434949278831482, 0.7503632307052612, 0.7474573850631714, 0.7537974119186401, 0.7574957013130188, 0.7652885913848877, 0.7675340175628662, 0.7676661014556885, 0.7701756954193115, 0.7721568942070007, 0.7729493975639343, 0.7815347909927368, 0.7784969210624695, 0.7798177003860474], "val_loss": [1.7034521784101213, 1.0210014751979284, 0.7958272014345441, 0.7049015079225812, 0.6649304628372192, 0.595382639339992, 0.6683697700500488, 0.5860478707722255, 0.5520467928477696, 0.5691909790039062, 0.5203635011400495, 0.5146548748016357, 0.5062603780201503, 0.4942064455577305, 0.47664308547973633, 0.48036835874829975, 0.4764411279133388, 0.4941202231815883, 0.45983803272247314, 0.48987105914524626, 0.4576477663857596, 0.4541793721062796, 0.45439263752528597, 0.4581901345934187, 0.46779847145080566, 0.4458888939448765, 0.4429707867758615], "val_accuracy": [0.515999972820282, 0.6163333058357239, 0.6636666655540466, 0.7059999704360962, 0.7123333215713501, 0.7456666827201843, 0.7036666870117188, 0.734666645526886, 0.7509999871253967, 0.734000027179718, 0.7670000195503235, 0.7749999761581421, 0.7646666765213013, 0.777999997138977, 0.7953333258628845, 0.7886666655540466, 0.7906666398048401, 0.7823333144187927, 0.7983333468437195, 0.7583333253860474, 0.7870000004768372, 0.8046666383743286, 0.7903333306312561, 0.7889999747276306, 0.7856666445732117, 0.7946666479110718, 0.7996666431427002]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 3, 4, 6, 9, 6, 4, 8, 2, 0, 0, 5, 4, 5, 3, 1, 3, 4, 3, 5, 1, 2, 6, 8, 2, 2, 6, 3, 3, 1, 1, 5, 6, 8, 9, 6, 2, 1, 4, 8, 6, 9, 1, 1, 8, 4, 2, 1, 3, 6, 5], [1, 3, 2, 2, 1, 0, 0, 2, 1, 1, 2, 2, 1, 0, 2, 0, 1, 2, 3, 0, 0, 0, 1, 2, 1, 2, 2, 0, 3, 0, 1, 0, 1, 0, 3, 0, 0], [47, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.35857143998146057, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.409572270410629, 2.4558823416970266, 2.2788695992731918, 2.3035218662762795, 2.3015525376303887, 2.5291299792234185, 2.306096764823874], "accuracy": [0.20737022161483765, 0.17012283205986023, 0.1592920422554016, 0.09879804402589798, 0.10738343745470047, 0.15242372453212738, 0.09417514503002167], "val_loss": [1.8120583125523158, 1.9227864401681083, 1.9740229334150041, 1.9735099247523717, 1.9558168138776506, 1.97867522920881, 1.9742317199707031], "val_accuracy": [0.22466666996479034, 0.3240000009536743, 0.09866666793823242, 0.09866666793823242, 0.2029999941587448, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 2, 0, 3, 2, 6, 1, 5, 4, 8, 2, 2, 0, 4, 1, 5, 2, 1, 3, 4, 0, 5, 1, 2, 6, 8, 9, 1, 6, 3, 4, 3, 1, 5, 6, 9, 2, 0, 8, 1, 9, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [0, 0, 2, 2, 0, 1, 2, 2, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 3, 0, 1, 0, 3, 0], [47, 97, 6, 15, 42, 39, 26, 75, 29, 39, 49, 45, 77, 73, 64, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [25, 49, 44, 92]], "fitness": -0.3368571400642395, "mapping_values": [1, 45, 45, 27, 18, 6, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, grad)))), grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))))), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(alpha, grad)), alpha))))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4094936154254314, 2.4884796679185257, 2.216595654096491, 2.358780311413917, 2.303927443235652, 2.301610830327413, 2.3658051517708523, 2.4572230125100245, 2.303720483218107, 2.3031003548563307, 2.3030434374040256, 2.303048945310928], "accuracy": [0.20776647329330444, 0.1958790123462677, 0.17355699837207794, 0.11227050423622131, 0.09932637959718704, 0.10355303436517715, 0.15149913728237152, 0.11517632752656937, 0.10038304328918457, 0.09496764093637466, 0.09642054885625839, 0.09760929644107819], "val_loss": [1.8307724680219377, 1.9342859131949288, 2.030062062399728, 1.9752568517412459, 1.9733277729579382, 1.9594971111842565, 1.8263990538460868, 1.9741009984697615, 1.9736763409205846, 1.9737368992396764, 1.9737066541399275, 1.973702839442662], "val_accuracy": [0.19766665995121002, 0.09966666996479034, 0.3083333373069763, 0.1003333330154419, 0.10400000214576721, 0.17599999904632568, 0.3323333263397217, 0.10400000214576721, 0.09866666793823242, 0.09866666793823242, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 0, 3, 4, 6, 9, 6, 4, 8, 2, 0, 0, 5, 4, 5, 3, 1, 3, 4, 3, 5, 1, 2, 6, 8, 2, 2, 6, 3, 3, 1, 1, 5, 6, 8, 9, 6, 2, 1, 4, 8, 6, 9, 1, 1, 8, 4, 2, 1, 3, 6, 5], [1, 2, 2, 2, 0, 0, 2, 2, 1, 0, 1, 1, 0, 1, 2, 0, 1, 2, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 3, 3, 2], [3, 97, 6, 70, 42, 39, 26, 75, 64, 39, 49, 54, 77], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [2, 8, 1, 3], [0, 2], [94], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.2639999985694885, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4095616142243728, 2.370181757650198, 2.529504429694133, 2.307545734670546, 2.3039569965584747, 2.3030719684650713, 2.3032331108306896], "accuracy": [0.20723815262317657, 0.16193369030952454, 0.20499274134635925, 0.09879804402589798, 0.09972262382507324, 0.09985470771789551, 0.0948355570435524], "val_loss": [1.813455309186663, 1.9176880972726005, 1.9806388446262904, 1.9749457495553153, 1.973890917641776, 1.97367034639631, 1.9736582892281669], "val_accuracy": [0.2199999988079071, 0.3109999895095825, 0.10400000214576721, 0.09866666793823242, 0.09866666793823242, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 2, 0, 3, 2, 6, 8, 4, 5, 8, 2, 2, 0, 4, 5, 5, 2, 1, 3, 4, 3, 5, 1, 2, 6, 8, 9, 2, 6, 3, 3, 1, 1, 5, 6, 9, 2, 6, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [2, 2, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [18, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77, 99, 92], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.2622857093811035, "mapping_values": [1, 28, 28, 17, 11, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), grad)))))), tf.math.add(alpha, alpha)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.409774740531759, 2.3267689397416613, 2.3026451839983126, 2.304323814076172, 2.3036165626340965, 2.303273048446226, 2.303245747897131], "accuracy": [0.2075023055076599, 0.1670849323272705, 0.12970545887947083, 0.09721305221319199, 0.10091137140989304, 0.09721305221319199, 0.09536388516426086], "val_loss": [1.8201992852347237, 1.8978729929242815, 1.9749550819396973, 1.9740846497671944, 1.9736357416425432, 1.9736674172537667, 1.9736762046813965], "val_accuracy": [0.22166666388511658, 0.25466665625572205, 0.09799999743700027, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 3, 2, 6, 1, 4, 4, 8, 2, 2, 2, 8, 5, 8, 2, 1, 3, 5, 3, 5, 1, 2, 6, 8, 9, 2, 6, 3, 3, 1, 1, 5, 6, 9, 2, 6, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [1, 3, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1, 1, 3, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 2, 0, 1, 2, 1], [47, 33, 6, 15, 42, 39, 26, 75, 29, 39, 49, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [2, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.25285714864730835, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4102281790367917, 2.3592941891389705, 2.3039600760032, 2.303325259910677, 2.3031292075982357, 2.3026242819853966], "accuracy": [0.20697398483753204, 0.1736890822649002, 0.09311848133802414, 0.09576013684272766, 0.10091137140989304, 0.10527011007070541], "val_loss": [1.8102696963718958, 1.9748576709202357, 1.9738477298191615, 1.9737131936209542, 1.9735452788216727, 1.970761775970459], "val_accuracy": [0.23666666448116302, 0.09866666793823242, 0.10133333504199982, 0.09966666996479034, 0.1066666692495346, 0.13733333349227905]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 3, 4, 4, 9, 6, 2, 8, 2, 0, 0, 5, 4, 5, 3, 1, 3, 4, 3, 5, 1, 2, 6, 8, 2, 2, 6, 3, 3, 1, 1, 5, 6, 8, 9, 6, 2, 1, 4, 8, 6, 9, 1, 1, 8, 4, 2, 1, 3, 6, 5], [0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [18, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77, 99, 92], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.23485714197158813, "mapping_values": [1, 18, 18, 11, 7, 5, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, grad)))), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4095479256094974, 2.351690627674873, 2.305605313088585, 2.299512034819158, 2.9325170460598833, 2.3079162399451714], "accuracy": [0.2075023055076599, 0.1682736724615097, 0.09932637959718704, 0.11042134463787079, 0.21133272349834442, 0.09668471664190292], "val_loss": [1.8183016777038574, 1.9781349045889718, 1.9737251826695033, 1.9422667367117745, 1.9795092173985072, 1.9747027669634138], "val_accuracy": [0.21766667068004608, 0.09866666793823242, 0.10133333504199982, 0.17900000512599945, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 2, 0, 3, 2, 6, 1, 4, 4, 8, 2, 2, 0, 4, 5, 5, 2, 1, 3, 4, 3, 5, 1, 2, 6, 8, 9, 2, 6, 3, 3, 1, 1, 5, 6, 9, 2, 6, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [18, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77, 99, 92], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.22914285957813263, "mapping_values": [1, 38, 38, 21, 17, 7, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), grad)))), tf.math.add(alpha, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4095717897945472, 2.262619201549056, 2.3051197366345404, 2.3035575794332837, 2.3030806377248645, 2.302952901829881], "accuracy": [0.20723815262317657, 0.17051908373832703, 0.0952318087220192, 0.09826971590518951, 0.09879804402589798, 0.09721305221319199], "val_loss": [1.8244179316929408, 1.976790087563651, 1.9740000452314104, 1.9737907137189592, 1.9736168725149972, 1.9735612869262695], "val_accuracy": [0.2070000022649765, 0.10133333504199982, 0.10133333504199982, 0.1003333330154419, 0.09966666996479034, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [1, 2, 0, 3, 2, 6, 1, 4, 4, 8, 2, 2, 2, 4, 5, 5, 2, 1, 0, 4, 3, 5, 1, 2, 6, 8, 9, 2, 6, 3, 3, 1, 1, 5, 6, 9, 2, 6, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [0, 0, 1, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [47, 97, 6, 15, 42, 39, 26, 75, 29, 39, 49, 45, 77, 73, 79, 8], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.1785714328289032, "mapping_values": [1, 46, 46, 27, 19, 10, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha))))))))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.subtract(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.sqrt(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.40959117135761, 2.2871861784071768, 2.3025928773679722, 3.9541380015881997, 2.306062992647922, 2.303742814010491, 2.303432533313034, 2.303085337477495], "accuracy": [0.2075023055076599, 0.17474573850631714, 0.11227050423622131, 0.15321621298789978, 0.09840179979801178, 0.09391097724437714, 0.09338264167308807, 0.09259014576673508], "val_loss": [1.8276128768920898, 1.9767319815499442, 1.9412264142717635, 1.9788374219621931, 1.9745267459324427, 1.9738648278372628, 1.9737679617745536, 1.973635196685791], "val_accuracy": [0.20933333039283752, 0.10400000214576721, 0.23766666650772095, 0.1003333330154419, 0.10400000214576721, 0.10400000214576721, 0.09799999743700027, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [6, 2, 0, 3, 2, 6, 1, 4, 4, 8, 2, 2, 0, 4, 5, 5, 2, 1, 3, 4, 3, 5, 1, 2, 6, 8, 9, 2, 6, 3, 3, 1, 1, 5, 6, 9, 2, 6, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [47, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [2, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.10057143121957779, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.6287214209012792, 2.4396979963743233, 3.5014833867384567, Infinity, 3.077136489614724, 2.913950305085188, 2.899347511186198, 2.9081759749150407], "accuracy": [0.2075023055076599, 0.12349755316972733, 0.14819706976413727, 0.08770307898521423, 0.10236428678035736, 0.10447761416435242, 0.10117553919553757, 0.10500594228506088], "val_loss": [2.0707522119794572, 1.9829305240086146, 2.1058359146118164, 2.768209525517055, 2.6298655101231168, 2.1468169348580495, 2.571535587310791, 2.4570227350507463], "val_accuracy": [0.1003333330154419, 0.11666666716337204, 0.1433333307504654, 0.09799999743700027, 0.09866666793823242, 0.10100000351667404, 0.09799999743700027, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [6, 2, 0, 3, 8, 6, 1, 4, 4, 8, 2, 2, 0, 4, 5, 5, 2, 1, 3, 4, 3, 5, 2, 2, 6, 8, 9, 2, 6, 2, 3, 0, 2, 5, 6, 9, 2, 6, 0, 1, 4, 8, 3, 9, 1, 3, 8, 5, 2, 1, 3, 0, 9, 9, 0, 7, 6, 7, 0], [1, 3, 0, 2, 1, 2, 0, 2, 2, 0, 2, 2, 0, 1, 0, 0, 1, 0, 3, 0, 0, 2, 2, 2, 0, 2, 2, 0, 2, 1, 0, 1, 0, 3, 1, 3], [18, 97, 6, 46, 42, 39, 26, 75, 70, 39, 49, 54, 28, 99, 36, 83, 75, 92, 90], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 84, 84, 53, 31, 16, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), grad)), grad)))))), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))))))), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(alpha), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), grad))))), tf.math.square(grad))), grad)))))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), alpha), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3019702806133937, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 3, 4, 6, 9, 6, 4, 8, 2, 0, 0, 5, 4, 5, 3, 1, 3, 4, 3, 5, 1, 2, 6, 8, 2, 2, 6, 3, 3, 1, 1, 5, 6, 8, 9, 6, 2, 1, 4, 8, 6, 9, 1, 1, 8, 4, 2, 1, 3, 6, 5], [3, 3, 2, 2, 1, 0, 0, 2, 1, 1, 2, 2, 1, 0, 2, 0, 1, 2, 3, 0, 0, 0, 1, 2, 1, 2, 2, 0, 3, 0, 1, 0, 1, 0, 3, 0, 0], [47, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [2, 2], [94], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 4, 4, 0, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3019702806133937, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 5, 1, 3, 2, 6, 1, 9, 4, 8, 2, 2, 2, 4, 5, 5, 2, 1, 8, 4, 3, 5, 1, 2, 6, 8, 9, 2, 6, 3, 3, 1, 1, 5, 6, 9, 2, 6, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 1, 2, 2, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [18, 97, 6, 15, 80, 39, 26, 75, 64, 39, 49, 54, 77, 99, 92], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 5, 5, 2, 3, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 1, 4, 5, 2, 6, 9, 4, 4, 8, 4, 2, 0, 5, 5, 8, 2, 1, 3, 4, 3, 5, 8, 2, 5, 5, 9, 8, 6, 3, 3, 1, 4, 9, 9, 9, 2, 6, 8, 1, 4, 8, 1, 9, 0, 3, 6, 4, 2, 1, 3, 5, 9], [1, 3, 2, 2, 1, 0, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 2, 0, 3, 0, 0, 2, 1, 2, 0, 2, 2, 0, 2, 0, 0, 1, 0, 3], [47, 97, 55, 15, 13, 39, 26, 75, 75, 39, 49, 54, 77, 83, 61], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [0, 8, 1, 3], [6, 2], [94], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 41, 41, 28, 13, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 4, 0, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, alpha)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))))))))))), tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(grad))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3019702806133937, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [6, 2, 6, 3, 2, 6, 1, 8, 4, 8, 2, 2, 0, 4, 5, 5, 2, 2, 3, 4, 0, 5, 1, 2, 6, 8, 9, 3, 6, 3, 3, 1, 1, 5, 6, 9, 2, 0, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9, 0, 6, 8], [0, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 2, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [18, 97, 6, 72, 42, 28, 26, 75, 64, 39, 49, 54, 77, 67, 92, 73, 14, 35], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 85, 85, 53, 32, 16, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 5, 3, 2, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(grad, tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad)))))))))))))), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, alpha)), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(tf.math.subtract(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), alpha)))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 3, 4, 6, 9, 6, 4, 8, 2, 0, 3, 5, 4, 5, 5, 1, 3, 4, 3, 5, 1, 2, 6, 8, 2, 2, 6, 3, 3, 1, 1, 5, 6, 8, 9, 6, 2, 1, 4, 8, 6, 9, 1, 1, 8, 4, 2, 1, 3, 6, 5], [2, 3, 2, 0, 1, 0, 0, 2, 1, 1, 2, 0, 1, 0, 0, 0, 1, 2, 3, 0, 0, 0, 1, 2, 1, 2, 2, 0, 3, 0, 1, 0, 1, 0, 3, 0, 0], [47, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 35, 22, 13, 5, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 5, 4, 1, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), alpha))), tf.math.add(alpha, tf.math.multiply(alpha, grad)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.square(alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.negative(tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3015291939920455, 2.3023470898251475, 2.3027967431714993, 2.304766915147142, 2.314455613011713, 2.3635971052708675], "accuracy": [0.10777968913316727, 0.10355303436517715, 0.09998679161071777, 0.10513802617788315, 0.10170386731624603, 0.09998679161071777], "val_loss": [1.9737257957458496, 1.974022456577846, 1.9750769478934151, 1.9794644628252303, 1.9993478911263602, 2.1042066301618303], "val_accuracy": [0.09966666996479034, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 2, 0, 3, 4, 6, 9, 6, 4, 8, 2, 0, 0, 5, 4, 5, 3, 1, 3, 4, 3, 5, 1, 2, 6, 8, 2, 2, 6, 3, 3, 1, 1, 5, 6, 8, 9, 6, 2, 1, 4, 8, 6, 9, 1, 1, 8, 4, 2, 1, 3, 6, 5], [2, 3, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [21, 35, 6, 8, 42, 39, 26, 75, 62, 39, 49, 34, 77, 71, 55], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 3, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 86, 86, 52, 34, 15, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))))))))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.add(alpha, alpha))))))))))), tf.math.sqrt(alpha)))))))), alpha)), tf.math.pow(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 3, 4, 6, 9, 6, 4, 8, 2, 0, 0, 5, 4, 5, 3, 1, 3, 4, 3, 5, 1, 2, 6, 8, 2, 2, 6, 3, 3, 1, 1, 5, 6, 8, 9, 6, 2, 1, 4, 8, 6, 9, 1, 1, 8, 4, 2, 1, 3, 6, 5], [2, 3, 2, 2, 1, 0, 0, 2, 1, 1, 2, 2, 1, 0, 2, 0, 1, 2, 3, 0, 0, 0, 1, 2, 1, 2, 2, 0, 3, 0, 1, 0, 1, 0, 3, 0, 0], [18, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77, 99, 92], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [2, 8, 1, 3], [0, 2], [18], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 5, 4, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3019702806133937, 2.3025851429508597, 2.3025851429508597, 2.3025852824246265, 2.3025851429508597, 2.3025849675143384], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644460950579, 1.973644392830985, 1.973644392830985, 1.9736442565917969], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [6, 2, 0, 3, 2, 6, 1, 4, 4, 8, 2, 2, 0, 4, 5, 5, 2, 1, 3, 4, 3, 5, 1, 2, 6, 8, 9, 2, 6, 3, 3, 1, 1, 5, 6, 9, 2, 6, 8, 1, 4, 8, 3, 9, 1, 3, 8, 4, 2, 1, 3, 5, 9], [2, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 0, 3, 1, 1, 1, 2, 2, 0, 3, 0, 1, 0, 3, 0], [47, 97, 6, 15, 42, 39, 26, 75, 64, 39, 49, 54, 77], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 3, 2, 3, 0, 1, 0, 3], [45, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 2, 2, 1, 1, 0, 4, 4, 0, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3019702806133937, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 3, 4, 6, 9, 6, 4, 8, 2, 0, 0, 5, 4, 5, 3, 1, 3, 4, 3, 5, 1, 2, 6, 8, 2, 2, 6, 3, 3, 1, 1, 5, 6, 8, 9, 6, 2, 1, 4, 8, 6, 9, 1, 1, 8, 4, 2, 1, 3, 6, 5], [1, 3, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1, 1, 3, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 2, 0, 1, 2, 1], [21, 35, 6, 8, 42, 39, 26, 75, 62, 39, 49, 34, 77], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 9, 6, 9, 0, 2, 8, 2, 2, 1, 2, 6, 8, 3, 6, 2, 0, 9, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 3, 0, 0, 1, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [55, 81, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [8, 8, 1, 3], [6, 2], [94], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 8, 9, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 1, 3, 2, 3, 0, 1, 0, 3], [25, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.301204285239342, 2.3037284670756586, 2.3018244987213694, 2.3022407872597177, 2.2994606219357063, 2.302623961942071], "accuracy": [0.0936468094587326, 0.08849557489156723, 0.0878351628780365, 0.0952318087220192, 0.09893012791872025, 0.08625016361474991], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]