[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 3, 3, 6, 2, 2, 8, 2, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8248571157455444, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 12, 9, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9763209012363723, 1.3433899118159944, 1.0650721108278878, 0.8524712962623066, 0.8500259495319991, 0.7567726976017138, 0.7262346492609123, 0.7237356354012198, 0.6821270529635909, 0.6637720995103017, 0.6383131898436737, 0.645776838233458, 0.6431398160500754, 0.6222720956207187, 0.5978218941341507, 0.5777948123589011, 0.5592260213339758, 0.5643947177149947, 0.5581195098360878, 0.5382543812259755, 0.5488129877977997, 0.535978968361381, 0.5268187467621428, 0.5017526435570207, 0.5121664642705075, 0.500814577292741, 0.49529413578375187, 0.47223969077264094, 0.4926754863640699, 0.4700703219045753, 0.4651036745427134, 0.4648921347376126, 0.46861223957762504, 0.4502679404486849, 0.4398973719507806, 0.4461532780648915, 0.4363558190515438, 0.4359271276927722, 0.4185139104013414, 0.4319200540152618, 0.4141765982050386, 0.4297110585291876], "accuracy": [0.352529376745224, 0.5279355645179749, 0.5975432395935059, 0.6851142644882202, 0.6833971738815308, 0.7156254053115845, 0.7238145470619202, 0.7232862114906311, 0.7375511527061462, 0.7499669790267944, 0.7557786107063293, 0.7547219395637512, 0.7557786107063293, 0.76542067527771, 0.7726852297782898, 0.7788931727409363, 0.7872143983840942, 0.7897239327430725, 0.7918372750282288, 0.7973847389221191, 0.7907806038856506, 0.7985734939575195, 0.7997622489929199, 0.8127063512802124, 0.8061022162437439, 0.8141592741012573, 0.8137630224227905, 0.8228767514228821, 0.8165367841720581, 0.8259146809577942, 0.8294808864593506, 0.8302733898162842, 0.8269713521003723, 0.8321225643157959, 0.8356888294219971, 0.8327829837799072, 0.8385946154594421, 0.8367455005645752, 0.848368763923645, 0.837537944316864, 0.8471800088882446, 0.8379341959953308], "val_loss": [1.520707641329084, 0.8098581688744682, 0.7107714414596558, 0.6669601542609078, 0.6006746632712228, 0.564705457006182, 0.5456585202898298, 0.5212420395442418, 0.543077962739127, 0.5044606072562081, 0.5203629050936017, 0.5061831644603184, 0.4857220309121268, 0.46354280199323383, 0.45213782787323, 0.46302073342459543, 0.47423865113939556, 0.4261610763413565, 0.4265042969158718, 0.4229933960097177, 0.4301851051194327, 0.440173728125436, 0.4108572517122541, 0.38990981238228933, 0.39614369188036236, 0.3938252755573818, 0.3773353099822998, 0.4107764959335327, 0.3705052988869803, 0.3745358075414385, 0.38935612780707224, 0.3958440508161272, 0.36027224574770245, 0.379566558769771, 0.3913383569036211, 0.39943340846470426, 0.3473597083772932, 0.3545272776058742, 0.36163409267153057, 0.35310643911361694, 0.37196121897016254, 0.35651096275874544], "val_accuracy": [0.5016666650772095, 0.6570000052452087, 0.6956666707992554, 0.7049999833106995, 0.7279999852180481, 0.7593333125114441, 0.7543333172798157, 0.7713333368301392, 0.7519999742507935, 0.7739999890327454, 0.7599999904632568, 0.7583333253860474, 0.781333327293396, 0.793666660785675, 0.8056666851043701, 0.7990000247955322, 0.7826666831970215, 0.8166666626930237, 0.8116666674613953, 0.812666654586792, 0.8130000233650208, 0.7946666479110718, 0.8193333148956299, 0.8346666693687439, 0.8299999833106995, 0.8246666789054871, 0.8323333263397217, 0.8180000185966492, 0.8416666388511658, 0.8420000076293945, 0.8306666612625122, 0.8213333487510681, 0.843666672706604, 0.8270000219345093, 0.8193333148956299, 0.8226666450500488, 0.8536666631698608, 0.8450000286102295, 0.843666672706604, 0.8473333120346069, 0.8289999961853027, 0.843999981880188]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 0, 3, 7, 3, 0, 9, 2, 2, 8, 2, 8, 3, 1, 3, 8, 6, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 2, 3, 1, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [90, 16, 27, 6, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8197143077850342, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9759895686601934, 1.3445874750181164, 1.0543846829991534, 0.8687809795168775, 0.8301042428720172, 0.7493780856953793, 0.7371135411906818, 0.7238127925943595, 0.6721659430565063, 0.6677542207436618, 0.6333972890820123, 0.650141491133854, 0.6413933464312802, 0.6203998216800466, 0.6015768240802182, 0.5791302349400196, 0.5558117464737822, 0.5602027872345309, 0.5642854765563389, 0.5438945872703989, 0.5493087395071086, 0.5332568300445838, 0.5273850111756043, 0.5110067503091099, 0.5090447317387182, 0.502432749004034, 0.4899452530460713, 0.47929282421291686, 0.4943980695139762, 0.4687624645349671, 0.4661622510696714, 0.464490492377598, 0.4618963052245211, 0.44519931340119967, 0.44144495007714984, 0.4414165701651696, 0.43594769421207624, 0.43265242739014104, 0.41788596373822445, 0.430221631806115, 0.41403746721829876, 0.4265637642293952], "accuracy": [0.35239729285240173, 0.5275393128395081, 0.6004490852355957, 0.6796988248825073, 0.6905296444892883, 0.7160216569900513, 0.7215691208839417, 0.7217012047767639, 0.7420420050621033, 0.7449478507041931, 0.7564390301704407, 0.7552502751350403, 0.755118191242218, 0.7658169269561768, 0.7691190242767334, 0.776251494884491, 0.7910447716712952, 0.7898560166358948, 0.7845727205276489, 0.7984414100646973, 0.7924976944923401, 0.7943468689918518, 0.8014793395996094, 0.8084797263145447, 0.8059701323509216, 0.8129705190658569, 0.8165367841720581, 0.8207634687423706, 0.8164047002792358, 0.8248580098152161, 0.829216718673706, 0.8285563588142395, 0.8296129703521729, 0.8363492488861084, 0.8356888294219971, 0.8314621448516846, 0.8388587832450867, 0.8376700282096863, 0.8481045961380005, 0.8355567455291748, 0.8494254350662231, 0.8396512866020203], "val_loss": [1.5135978630610876, 0.81585465158735, 0.7303622620446342, 0.7334850345339093, 0.5962873016084943, 0.5631112882069179, 0.5488048962184361, 0.5182477065495082, 0.5429808412279401, 0.49866182463509695, 0.5113672018051147, 0.5023128645760673, 0.488052453313555, 0.46873933928353445, 0.4515542473111834, 0.46892930780138287, 0.4453294106892177, 0.42616849286215647, 0.431603057043893, 0.42062837736947195, 0.42155106578554424, 0.4329252072743007, 0.4099135143416269, 0.39628660678863525, 0.3955023799623762, 0.39141981090818134, 0.3727972252028329, 0.44235083035060335, 0.3704558525766645, 0.37868755204336985, 0.39352681807109285, 0.38493411030088154, 0.35784925733293804, 0.38954982587269377, 0.3881232057298933, 0.3909539410046169, 0.3458351492881775, 0.3605023281914847, 0.36925610474177767, 0.3505575145993914, 0.3707038334437779, 0.35695349318640573], "val_accuracy": [0.5043333172798157, 0.656333327293396, 0.6886666417121887, 0.6936666369438171, 0.731333315372467, 0.7563333511352539, 0.7509999871253967, 0.7763333320617676, 0.7486666440963745, 0.7763333320617676, 0.7699999809265137, 0.7613333463668823, 0.7796666622161865, 0.7896666526794434, 0.800000011920929, 0.7983333468437195, 0.7983333468437195, 0.812333345413208, 0.809333324432373, 0.812333345413208, 0.8206666707992554, 0.8040000200271606, 0.8230000138282776, 0.8330000042915344, 0.8270000219345093, 0.8259999752044678, 0.8326666951179504, 0.7913333177566528, 0.840666651725769, 0.8393333554267883, 0.8270000219345093, 0.8296666741371155, 0.8423333168029785, 0.8203333616256714, 0.8209999799728394, 0.8259999752044678, 0.8536666631698608, 0.8433333039283752, 0.8416666388511658, 0.8479999899864197, 0.82833331823349, 0.8453333377838135]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 3, 7, 6, 2, 6, 2, 2, 8, 9, 3, 3, 2, 3, 4, 2, 9, 1, 6, 5, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 1, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8077142834663391, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 20, 16, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.976610202437237, 1.3421866105075495, 1.0524585892212248, 0.8681104963938353, 0.8292330067076813, 0.7558422949981413, 0.7346130251774242, 0.719041924773584, 0.6673777008557348, 0.6594971830519577, 0.6435585731544263, 0.6536730693048254, 0.6400412743700304, 0.6168644242456104, 0.599679432572186, 0.5846355849048638, 0.5600204931636292, 0.557870957703717, 0.5626116389092075, 0.5427211478102587, 0.5492712683634215, 0.5338698025896659, 0.5256788297934603], "accuracy": [0.35226520895957947, 0.5285959839820862, 0.6000528335571289, 0.6754721999168396, 0.6939638257026672, 0.713908314704895, 0.7205125093460083, 0.7214370369911194, 0.7504953145980835, 0.7540615797042847, 0.7560427784919739, 0.7524765729904175, 0.752740740776062, 0.767930269241333, 0.7733456492424011, 0.774270236492157, 0.7890635132789612, 0.7909126877784729, 0.7868181467056274, 0.7969884872436523, 0.7910447716712952, 0.7979130744934082, 0.8009510040283203], "val_loss": [1.5185956273760115, 0.8186149426868984, 0.7029283727918353, 0.7269881623131889, 0.5853459324155535, 0.5708308049610683, 0.5492266416549683, 0.5240544761930194, 0.5307863269533429, 0.5071337904248919, 0.5122521945408413, 0.49940667833600727, 0.4921119213104248, 0.4702566351209368, 0.45979695660727365, 0.4659614562988281, 0.45432416030338835, 0.42440405062266756, 0.43403795787266325, 0.42014806611197336, 0.4323581116540091, 0.4204574057034084, 0.4119537813322885], "val_accuracy": [0.5049999952316284, 0.6506666541099548, 0.6940000057220459, 0.6949999928474426, 0.734333336353302, 0.7573333382606506, 0.7519999742507935, 0.7710000276565552, 0.7643333077430725, 0.7643333077430725, 0.7743333578109741, 0.7636666893959045, 0.7760000228881836, 0.7866666913032532, 0.7963333129882812, 0.8003333210945129, 0.7906666398048401, 0.8186666369438171, 0.8076666593551636, 0.8133333325386047, 0.8116666674613953, 0.8103333115577698, 0.8186666369438171]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 3, 3, 6, 2, 2, 8, 2, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [22, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7739999890327454, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9766741068828313, 1.3412752369407177, 1.0535141906450454, 0.8659947049883866, 0.8289719430793467, 0.755907909075944, 0.7467091805852084, 0.7121339738565807, 0.6782337424698728, 0.6642170133938359, 0.6447436469987777, 0.6463408537465882, 0.6397049909002667], "accuracy": [0.35239729285240173, 0.5281997323036194, 0.598599910736084, 0.6762647032737732, 0.6931713223457336, 0.7148329019546509, 0.7154933214187622, 0.7239466309547424, 0.7436270117759705, 0.7448157668113708, 0.7515519857406616, 0.754589855670929, 0.7537974119186401], "val_loss": [1.5197253567831857, 0.818459050995963, 0.703512293951852, 0.7290035997118268, 0.5838795048849923, 0.6012448923928397, 0.5371154206139701, 0.519784688949585, 0.5552662781306675, 0.5162395579474313, 0.5250699179513114, 0.49701683861868723, 0.500657217843192], "val_accuracy": [0.5049999952316284, 0.6520000100135803, 0.6933333277702332, 0.6940000057220459, 0.7356666922569275, 0.7319999933242798, 0.7570000290870667, 0.7749999761581421, 0.7390000224113464, 0.7676666378974915, 0.7609999775886536, 0.765999972820282, 0.7689999938011169]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 3, 7, 3, 3, 6, 2, 0, 8, 2, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7734285593032837, "mapping_values": [1, 2, 2, 1, 1, 0, 32, 32, 18, 14, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, beta), alpha)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9766157501960364, 1.3409047381532442, 1.0571182098024636, 0.8652354393180461, 0.835191015026683, 0.750428510773467, 0.7485447554083832, 0.7159378007182261, 0.6640476815814843, 0.6686586817383782, 0.6444745900026009, 0.6505290759694637, 0.6406629714810255], "accuracy": [0.35226520895957947, 0.528992235660553, 0.6004490852355957, 0.6782459616661072, 0.6930392384529114, 0.7182670831680298, 0.7150970697402954, 0.7235503792762756, 0.7530049085617065, 0.743891179561615, 0.7518161535263062, 0.7549861073493958, 0.7534011602401733], "val_loss": [1.51888142313276, 0.8147794348852975, 0.71930878502982, 0.7212596109935215, 0.5862909385136196, 0.5831501824515206, 0.5460129124777657, 0.5206080504826137, 0.5321081876754761, 0.5039240973336356, 0.5262006861822945, 0.5009373256138393, 0.49905824661254883], "val_accuracy": [0.5043333172798157, 0.6536666750907898, 0.6953333616256714, 0.6953333616256714, 0.7350000143051147, 0.750333309173584, 0.7536666393280029, 0.7746666669845581, 0.7596666812896729, 0.7746666669845581, 0.7613333463668823, 0.7596666812896729, 0.7716666460037231]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 8, 3, 7, 6, 1, 6, 2, 2, 8, 9, 3, 8, 2, 3, 8, 2, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [30, 9, 44]], "fitness": -0.6837142705917358, "mapping_values": [1, 2, 2, 1, 1, 0, 33, 33, 21, 12, 5, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), alpha)), tf.math.multiply(tf.math.sqrt(grad), tf.math.add(tf.math.add(beta, grad), tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.256795517693831, 1.8256521595782451, 1.32445716026547, 0.9544242580789444, 0.8645559590270002, 0.807920289919786, 0.7642412536793917, 0.7361061535711695, 0.6975285843016685, 0.6607421716096269, 0.6311363556350085, 0.6008774280122967, 0.5807753930931409, 0.5690446179918625, 0.5398704713330277, 0.5299706176177243, 0.5240160152660527, 0.501211456504748, 0.4915883645185028, 0.47207937618807844, 0.4761520314328407, 0.45020182991087665, 0.43905590908984937, 0.4300887607477911, 0.4233200506779181, 0.40050540390724454, 0.4072128552778632, 0.40010022678552853, 0.39500354775789154, 0.3809073540662431, 0.37266687420003086, 0.369736481482059, 0.36639879557119936, 0.3626429658831386], "accuracy": [0.20274733006954193, 0.42649585008621216, 0.5639941692352295, 0.6478668451309204, 0.6881521344184875, 0.6901333928108215, 0.709021270275116, 0.7232862114906311, 0.7428345084190369, 0.750759482383728, 0.7671377658843994, 0.7733456492424011, 0.7837802171707153, 0.7932901978492737, 0.7997622489929199, 0.8034605979919434, 0.8009510040283203, 0.8112534880638123, 0.8120459914207458, 0.8228767514228821, 0.8181217908859253, 0.830669641494751, 0.8376700282096863, 0.8424250483512878, 0.8384625315666199, 0.8475762605667114, 0.8477083444595337, 0.8491612672805786, 0.8487650156021118, 0.8519350290298462, 0.8555012345314026, 0.8577466607093811, 0.8622375130653381, 0.8594637513160706], "val_loss": [1.807689939226423, 0.9654560429709298, 0.7023354598454067, 0.705546532358442, 0.5883860247475761, 0.5645568711417062, 0.5707368850708008, 0.5373302868434361, 0.48092198371887207, 0.4598418814795358, 0.47808202675410677, 0.43701852219445364, 0.4281259945460728, 0.43944235358919415, 0.40238449403217863, 0.3939616935593741, 0.39405542612075806, 0.40431649344308035, 0.3898226533617292, 0.37824887888772146, 0.3752278685569763, 0.38283016851970125, 0.37601068190165926, 0.3591159326689584, 0.3605136445590428, 0.3735160401889256, 0.3685374515397208, 0.3647227202142988, 0.3558467711721148, 0.36086537156786236, 0.3675852588244847, 0.3625680719103132, 0.3604774645396641, 0.3763535278184073], "val_accuracy": [0.4259999990463257, 0.6510000228881836, 0.6973333358764648, 0.7170000076293945, 0.7319999933242798, 0.7386666536331177, 0.753000020980835, 0.7553333044052124, 0.7833333611488342, 0.7929999828338623, 0.7886666655540466, 0.8019999861717224, 0.8013333082199097, 0.8096666932106018, 0.8220000267028809, 0.824999988079071, 0.8320000171661377, 0.8273333311080933, 0.8316666483879089, 0.8393333554267883, 0.8476666808128357, 0.8363333344459534, 0.8483333587646484, 0.8550000190734863, 0.8550000190734863, 0.8523333072662354, 0.8489999771118164, 0.8560000061988831, 0.862666666507721, 0.859333336353302, 0.8610000014305115, 0.8616666793823242, 0.8586666584014893, 0.8533333539962769]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 3, 7, 1, 2, 6, 2, 2, 8, 9, 3, 3, 2, 3, 8, 2, 2, 4, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 0, 3, 1, 1, 3, 3, 3, 0, 3, 1, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [33, 9, 44]], "fitness": -0.6622856855392456, "mapping_values": [1, 2, 2, 1, 1, 0, 39, 39, 22, 17, 5, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(grad, alpha), tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), beta))))))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2133526260102383, 1.5182298953585762, 0.997984998962426, 0.8393026934229325, 0.7865434605857055, 0.7585766084788419, 0.7297164302429014, 0.6748782315384584, 0.6377981431952494, 0.5946361763822782, 0.5799939717441549, 0.5573515383684876, 0.5195395238663085, 0.5262177174416641, 0.5034500584626289, 0.5013732987663545, 0.4852537384335202, 0.46888091141490135, 0.4666191371889194, 0.4417097868582104, 0.4388849447707553, 0.42827366178518494, 0.4181904298219037, 0.4244142085168151, 0.40363734915681315, 0.40535399714921994, 0.3941632260531167, 0.40181627910544354, 0.396012531905646, 0.39167502372098906, 0.38180880093256464, 0.3735044058468899, 0.3743642734703434], "accuracy": [0.24422137439250946, 0.49953770637512207, 0.6546030640602112, 0.6955488324165344, 0.6973979473114014, 0.7164179086685181, 0.7325320243835449, 0.7430986762046814, 0.7592127919197083, 0.7750627398490906, 0.785629391670227, 0.7882710099220276, 0.8030643463134766, 0.8043851256370544, 0.8072909712791443, 0.8124422430992126, 0.8186501264572144, 0.8212917447090149, 0.8235371708869934, 0.8400475382804871, 0.8383304476737976, 0.8337075710296631, 0.8448025584220886, 0.8339717388153076, 0.8438779711723328, 0.8438779711723328, 0.8467837572097778, 0.8524633646011353, 0.8516708612442017, 0.8473120927810669, 0.8532558679580688, 0.8590674996376038, 0.8545766472816467], "val_loss": [1.5763788904462541, 0.7489590644836426, 0.6758583784103394, 0.6004492044448853, 0.590907199042184, 0.554551226752145, 0.5304322413035801, 0.5008104869297573, 0.44007727929524015, 0.4371210677283151, 0.4367157220840454, 0.42059400251933504, 0.40944916009902954, 0.40719206844057354, 0.38784317459378925, 0.3970576695033482, 0.39369332790374756, 0.38089392866407124, 0.3710842558315822, 0.3796668563570295, 0.3750008429799761, 0.3732141852378845, 0.36959359475544523, 0.387187659740448, 0.368704582963671, 0.3917651091303144, 0.39288073778152466, 0.3998675857271467, 0.4166897450174604, 0.4152003952435085, 0.41188643659864155, 0.39495382990155903, 0.4318155476025173], "val_accuracy": [0.4909999966621399, 0.6893333196640015, 0.7146666646003723, 0.7333333492279053, 0.7383333444595337, 0.7556666731834412, 0.7666666507720947, 0.7789999842643738, 0.8026666641235352, 0.8059999942779541, 0.8046666383743286, 0.8143333196640015, 0.8233333230018616, 0.8326666951179504, 0.8376666903495789, 0.8309999704360962, 0.8383333086967468, 0.8386666774749756, 0.8486666679382324, 0.843999981880188, 0.846666693687439, 0.8496666550636292, 0.8473333120346069, 0.8483333587646484, 0.8493333458900452, 0.846666693687439, 0.8523333072662354, 0.862333357334137, 0.8536666631698608, 0.8476666808128357, 0.8539999723434448, 0.8546666502952576, 0.846666693687439]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 3, 8, 6, 2, 6, 5, 2, 0, 9, 3, 8, 2, 3, 8, 2, 8, 4, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 2, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 1, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.654285728931427, "mapping_values": [1, 2, 2, 1, 1, 0, 18, 18, 11, 7, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.square(tf.math.add(grad, alpha))))), grad)), tf.math.add(beta, grad)), tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9408064035140544, 1.3323269546890082, 0.9500175646472175, 0.7915451412329411, 0.7366058675761961, 0.7136390031903506, 0.7760671790186849, 0.7215147899945241, 0.7773459594893087, 0.7919019035942849], "accuracy": [0.3663980960845947, 0.5624092221260071, 0.6704530715942383, 0.71100252866745, 0.7228899598121643, 0.7339849472045898, 0.724210798740387, 0.7290979027748108, 0.7207766771316528, 0.7296261787414551], "val_loss": [1.3144701548985072, 0.7632791996002197, 0.6525979212352208, 0.5338987622942243, 0.5112063203539167, 0.6035434177943638, 0.5219039235796247, 0.5151522500174386, 0.6237116370882306, 0.5997230155127389], "val_accuracy": [0.5926666855812073, 0.6643333435058594, 0.7196666598320007, 0.7609999775886536, 0.7746666669845581, 0.7246666550636292, 0.7649999856948853, 0.7599999904632568, 0.762666642665863, 0.7739999890327454]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 9, 2, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 2, 8, 9, 5, 1, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 0, 3, 1, 3, 3, 0, 3, 0, 0, 3, 2, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.46371427178382874, "mapping_values": [1, 2, 2, 1, 1, 0, 32, 32, 19, 13, 6, 8, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, alpha), grad))))), tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, sigma))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.348743719494716, 2.2551792934822323, 2.3045196663890897, 2.302713840078007, 2.1862442511546063, 2.647803342069979, 2.3042813022894677, 2.2996680491541546, 2.2818897023350257, 2.3061929234361225], "accuracy": [0.2292959988117218, 0.16734910011291504, 0.09919429570436478, 0.09708096832036972, 0.20103025436401367, 0.13908334076404572, 0.09734513610601425, 0.12429005652666092, 0.18861444294452667, 0.10038304328918457], "val_loss": [1.7681710379464286, 1.9760076659066337, 1.9735986845833915, 1.9704820769173759, 3.4762263979230608, 1.9752225194658553, 1.9727869033813477, 1.9556007385253906, 1.9771365438188826, 1.9765767369951521], "val_accuracy": [0.24433332681655884, 0.09866666793823242, 0.10100000351667404, 0.10100000351667404, 0.42533332109451294, 0.10100000351667404, 0.10100000351667404, 0.12466666847467422, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 3, 7, 6, 2, 6, 2, 2, 8, 9, 3, 3, 2, 3, 8, 2, 8, 1, 6, 5, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 0, 3, 1, 1, 3, 3, 0, 0, 3, 3, 2, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.4374285638332367, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 20, 16, 4, 6, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(tf.math.sqrt(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), alpha)), alpha)), tf.math.multiply(grad, tf.math.multiply(grad, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))), tf.math.add(beta, beta)))))), grad)), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9414304134600417, 1.332716465319121, 0.9441552404572604, 0.7882756935433783, 0.7370679684759777, 0.7086192171461216, 0.7237303774622311, 0.7267803208954882, 0.7158726065418015, 0.7704216460856653, 0.7552954927332853, 0.7721420706318292], "accuracy": [0.366530179977417, 0.5616167187690735, 0.6713775992393494, 0.7094175219535828, 0.7253995537757874, 0.7284374833106995, 0.7466648817062378, 0.7329282760620117, 0.7353057861328125, 0.7253995537757874, 0.7339849472045898, 0.7235503792762756], "val_loss": [1.314634050641741, 0.7688460690634591, 0.6336852482386998, 0.5515729018620082, 0.4846952642713274, 0.498420204435076, 0.48714462348393034, 0.4969008650098528, 0.5819624662399292, 0.5239393370492118, 0.5365246023450579, 0.5211061068943569], "val_accuracy": [0.5926666855812073, 0.6610000133514404, 0.7263333201408386, 0.750333309173584, 0.7803333401679993, 0.7756666541099548, 0.7870000004768372, 0.7733333110809326, 0.7566666603088379, 0.7753333449363708, 0.7710000276565552, 0.7716666460037231]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 7, 3, 3, 6, 2, 2, 8, 6, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 2, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [51, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 17, 17, 9, 8, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 3, 3, 1, 8, 2, 8, 2, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 32, 32, 19, 13, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, alpha)), beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.sqrt(grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7.697490474584416e+20, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.056795667856931686, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 3, 0, 6, 2, 6, 2, 2, 8, 2, 3, 3, 1, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.3655848033896465, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19495442509651184, 0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [153.62918090820312, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 9, 3, 7, 3, 3, 6, 2, 2, 8, 2, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7.700532117497192e+20, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.056795667856931686, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 3, 8, 6, 2, 2, 9, 0, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 14, 14, 8, 6, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 3, 7, 6, 2, 6, 2, 2, 2, 2, 3, 8, 2, 3, 8, 2, 8, 4, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 36, 36, 19, 17, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), beta), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7.697397917611358e+20, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.056795667856931686, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 9, 2, 6, 2, 3, 9, 2, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 3, 3, 1, 3, 2, 3, 0, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [5, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [24, 9, 44]], "fitness": -0.07314285635948181, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.302004558913161, 2.3016178686353337, 2.3009744809366977, 2.2992121905320673, 2.3001017361080263, 2.2998396033356454, 2.2992092044897334, 2.2990712984410324, 2.3001022300448133, 2.2997571256859524, 2.2983398530398533, 2.301186638265128, 2.2996708355433655, 2.299849673284909], "accuracy": [0.09628847241401672, 0.09311848133802414, 0.09576013684272766, 0.09377889335155487, 0.0952318087220192, 0.09602430462837219, 0.10051512718200684, 0.1010434553027153, 0.09760929644107819, 0.09470347315073013, 0.10328886657953262, 0.09549596905708313, 0.0940430611371994, 0.09734513610601425], "val_loss": [1.9700416156223841, 1.9696441377912248, 1.9694032669067383, 1.969599383217948, 1.9696525165012904, 1.9697299003601074, 1.9697559220450265, 1.9697177750723702, 1.9697022438049316, 1.9697889600481306, 1.9701764242989677, 1.9703568731035506, 1.9705514226640974, 1.970721857888358], "val_accuracy": [0.043666668236255646, 0.04933333396911621, 0.05700000002980232, 0.05900000035762787, 0.06233333423733711, 0.06566666811704636, 0.0676666647195816, 0.070333331823349, 0.07333333045244217, 0.06933332979679108, 0.06666667014360428, 0.06433333456516266, 0.061666667461395264, 0.06333333253860474]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 9, 3, 0, 6, 2, 6, 6, 2, 8, 2, 3, 3, 1, 9, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 0, 3, 3, 3, 3, 2, 3, 0, 3, 3, 2, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 2, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 33, 33, 21, 12, 5, 3, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, beta), beta), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, grad), tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.multiply(beta, tf.math.subtract(grad, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3025263776679665, 2.3031422525364817, 2.303248350725135, 2.3009450806917657, 2.3020717927635213, 2.3017376713733224], "accuracy": [0.09628847241401672, 0.08928807079792023, 0.08915598690509796, 0.08955223858356476, 0.09417514503002167, 0.09232597798109055], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 9, 3, 0, 9, 3, 6, 2, 2, 8, 2, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 1, 3, 3, 3, 0, 3, 3, 2, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [53, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [13, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 22, 14, 4, 6, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.add(beta, alpha)))), tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), tf.math.add(beta, grad)))), tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3025263776679665, 2.3031422525364817, 2.303248350725135, 2.3009450806917657, 2.3020717927635213, 2.3017376713733224], "accuracy": [0.09628847241401672, 0.08928807079792023, 0.08915598690509796, 0.08955223858356476, 0.09417514503002167, 0.09232597798109055], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 3, 7, 3, 3, 6, 2, 2, 0, 2, 8, 3, 1, 3, 8, 2, 8, 2, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 1, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [36, 65, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [3, 3, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 37, 37, 20, 17, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.multiply(tf.math.add(beta, grad), tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))))), grad)), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [2.3025263776679665, 2.3031422525364817, 2.303248350725135, 2.3009450806917657, 2.3020717927635213, 2.3017376713733224], "accuracy": [0.09628847241401672, 0.08928807079792023, 0.08915598690509796, 0.08955223858356476, 0.09417514503002167, 0.09232597798109055], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]