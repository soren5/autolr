[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.821142852306366, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 5, 3, 2, 1, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9855421729107354, 1.493301995473531, 1.063123068135916, 0.8888531483364395, 0.8304713567517862, 0.7700107934342367, 0.7533145398196763, 0.7257990341034737, 0.6840187449024464, 0.672335091764271, 0.6759897675953206, 0.6179007510420291, 0.6503794397880782, 0.6124922261891852, 0.5787146276549704, 0.5937772908026216, 0.5733281244392078, 0.5647325344514601, 0.5776660340636272, 0.5310002833136384, 0.5369247023487104, 0.5218933201453406, 0.5298461714409377, 0.5143452279949705, 0.5017152531445224, 0.503449142286255, 0.4882345910022571, 0.48328929948627264, 0.4743857618218101, 0.46135926077772427, 0.4728817769155652, 0.4510546137061275, 0.4718583537217192, 0.45919442169733365, 0.4348196593439102, 0.44321266001698334, 0.43913373783311477, 0.43153629718581366, 0.4137179263043382, 0.417811035503722, 0.44525220672515214, 0.41505533718571547, 0.39916261006749426, 0.40422385207508627, 0.4007704227025152, 0.39912299966736553, 0.38727878367722923, 0.3870439699234318], "accuracy": [0.33007529377937317, 0.4904239773750305, 0.6085061430931091, 0.6741513609886169, 0.6868313550949097, 0.7106062769889832, 0.7160216569900513, 0.7260599732398987, 0.7411174178123474, 0.7469290494918823, 0.7388719916343689, 0.7623828053474426, 0.7498348951339722, 0.7660810947418213, 0.7814027070999146, 0.7709681391716003, 0.7807422876358032, 0.7918372750282288, 0.7786290049552917, 0.7992339134216309, 0.7988376617431641, 0.8057059645652771, 0.8024039268493652, 0.8070268034934998, 0.8125742673873901, 0.8105930685997009, 0.8152159452438354, 0.8168009519577026, 0.8247259259223938, 0.826310932636261, 0.8247259259223938, 0.8343679904937744, 0.8272355198860168, 0.8325188159942627, 0.8438779711723328, 0.830669641494751, 0.8348963260650635, 0.8401796221733093, 0.8433496356010437, 0.8432175517082214, 0.837141752243042, 0.8488970994949341, 0.852331280708313, 0.847840428352356, 0.850350022315979, 0.847840428352356, 0.856689989566803, 0.8573504090309143], "val_loss": [1.5401888915470667, 0.8314417430332729, 0.7482716185706002, 0.6309780223029, 0.5618841137204852, 0.6642153092793056, 0.5468129941395351, 0.5390119552612305, 0.536181994846889, 0.5159046649932861, 0.47526473658425467, 0.4791785478591919, 0.47366697447640554, 0.4620762552533831, 0.4776382957186018, 0.4467143842152187, 0.43158923728125437, 0.44814692224775043, 0.4130841834204538, 0.4074885845184326, 0.41164006505693707, 0.43115993056978497, 0.4203247768538339, 0.3943692020007542, 0.4294461863381522, 0.39221967118127005, 0.3825771382876805, 0.3827305776732309, 0.37777849606105257, 0.393095816884722, 0.38298180273600985, 0.3674021363258362, 0.3631171924727304, 0.3593861630984715, 0.35765076535088675, 0.3486447163990566, 0.3815587844167437, 0.3419289248330252, 0.34623714855739046, 0.36374934230531963, 0.3411693402699062, 0.34072136878967285, 0.32599048103605, 0.36315191643578665, 0.34158073152814594, 0.330782379422869, 0.3340717213494437, 0.3305118680000305], "val_accuracy": [0.3659999966621399, 0.6653333306312561, 0.6756666898727417, 0.7120000123977661, 0.7566666603088379, 0.6846666932106018, 0.7563333511352539, 0.7540000081062317, 0.7506666779518127, 0.7649999856948853, 0.7933333516120911, 0.7733333110809326, 0.8006666898727417, 0.793666660785675, 0.7823333144187927, 0.8050000071525574, 0.809333324432373, 0.7983333468437195, 0.8196666836738586, 0.8303333520889282, 0.824999988079071, 0.8113333582878113, 0.8109999895095825, 0.8323333263397217, 0.812666654586792, 0.8296666741371155, 0.8326666951179504, 0.8349999785423279, 0.8370000123977661, 0.8263333439826965, 0.8309999704360962, 0.8429999947547913, 0.8456666469573975, 0.8486666679382324, 0.8423333168029785, 0.8496666550636292, 0.8296666741371155, 0.8510000109672546, 0.8516666889190674, 0.8413333296775818, 0.8556666374206543, 0.8569999933242798, 0.8619999885559082, 0.8460000157356262, 0.8516666889190674, 0.8566666841506958, 0.8606666922569275, 0.8586666584014893]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 2, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8122857213020325, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 5, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad)), tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))))))), tf.math.add(beta, beta)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.985154736767891, 1.4933506930745146, 1.0641639046680973, 0.8887980649531431, 0.8302809943014117, 0.782759082890489, 0.7418954187317484, 0.714847108171821, 0.6826258357710228, 0.6635433087464195, 0.6748047297688334, 0.627232700472164, 0.6243809199273358, 0.6181308386300959, 0.5771234227272308, 0.5831038565557584, 0.582448663842708, 0.5733096571551842, 0.564091346688542, 0.5328411534871439, 0.5236281614104565, 0.5209768935044081, 0.5326173085231728, 0.5137878086242252, 0.5016787073410985, 0.4954106570423838, 0.48593623478965925, 0.47500365938666067, 0.480299136118567, 0.46324590829070283, 0.4651871905460995, 0.44624876455623935, 0.46220000158085595, 0.4547880260447753, 0.4306995853055438, 0.44140341120184434, 0.44150861327390883, 0.42820367550081534, 0.41242656243585907, 0.4255836775408067, 0.4385312582051135, 0.4066401923321588, 0.3925461278985504, 0.4047549885844416, 0.39723434366050603, 0.39132757740580665, 0.38171860735492935, 0.38393041618259877, 0.39442560425870343, 0.3802618963914289, 0.36464538587681167, 0.3740340027637832, 0.36414861067363913, 0.361860706463403, 0.3450495209857347, 0.36795365505324945, 0.3394841496907583, 0.3502592811526529, 0.34492271644973704, 0.3350594679063196, 0.3345459122951272, 0.34764415136716936, 0.32292293434712427, 0.34282927765601884, 0.318878151390767, 0.3215252629848692, 0.3298901318086688, 0.3074427793023136, 0.3152817818254386, 0.30181841700068557, 0.3012157589208968, 0.29357984884855, 0.3049131773993828, 0.29674619305969907], "accuracy": [0.3299432098865509, 0.4905560612678528, 0.609430730342865, 0.672170102596283, 0.6853784322738647, 0.7073041796684265, 0.7250033020973206, 0.7317395210266113, 0.741909921169281, 0.7519482374191284, 0.7411174178123474, 0.7565711140632629, 0.7573636174201965, 0.7647602558135986, 0.7835160493850708, 0.778761088848114, 0.7775723338127136, 0.7887993454933167, 0.7869502305984497, 0.7968564033508301, 0.8039889335632324, 0.8050455451011658, 0.7984414100646973, 0.8072909712791443, 0.8113855719566345, 0.8170651197433472, 0.8165367841720581, 0.8247259259223938, 0.8198388814926147, 0.8255184292793274, 0.8289526104927063, 0.8345000743865967, 0.8305375576019287, 0.8322546482086182, 0.843481719493866, 0.833179235458374, 0.8359529972076416, 0.8430854678153992, 0.8450667262077332, 0.8430854678153992, 0.8392550349235535, 0.8536521196365356, 0.8549728989601135, 0.8465195894241333, 0.8519350290298462, 0.8502179384231567, 0.8603883385658264, 0.8577466607093811, 0.8532558679580688, 0.8556333184242249, 0.8621054291725159, 0.8638224601745605, 0.8642187118530273, 0.8644828796386719, 0.8749174475669861, 0.8648791313171387, 0.8776912093162537, 0.8712190985679626, 0.8681812286376953, 0.8784837126731873, 0.8758420348167419, 0.8692378997802734, 0.8779553771018982, 0.8739928603172302, 0.8808611631393433, 0.8798044919967651, 0.8794082403182983, 0.8861445188522339, 0.8803328275680542, 0.8883898854255676, 0.889578640460968, 0.8891823887825012, 0.8858803510665894, 0.8874653577804565], "val_loss": [1.5452702045440674, 0.8279940741402763, 0.7086495842252459, 0.6384537049702236, 0.5684945072446551, 0.6453933204923358, 0.552534648350307, 0.5340912852968488, 0.5171968936920166, 0.5207472017833165, 0.4914863790784563, 0.4754630838121687, 0.4866898570741926, 0.4524406705583845, 0.4475462692124503, 0.45186337402888704, 0.43619812386376516, 0.45675298145839144, 0.41290570156914846, 0.41318139859608244, 0.41158745118549894, 0.43274301290512085, 0.41084909439086914, 0.3945344260760716, 0.4148191043308803, 0.3911815200533186, 0.375173670904977, 0.3753711921828134, 0.3777319959231785, 0.3836049182074411, 0.374175454889025, 0.35999189955847605, 0.35695444686072214, 0.35413938760757446, 0.35524867262159077, 0.34372149194989887, 0.3797469309398106, 0.3399010385785784, 0.35847956793648855, 0.36050924233027865, 0.33711640323911396, 0.340714624949864, 0.32419482299259733, 0.3590694410460336, 0.3367761714117868, 0.32877475023269653, 0.3347946660859244, 0.33045319999967304, 0.3258142045566014, 0.32284548452922274, 0.32342129945755005, 0.318774904523577, 0.3452296427318028, 0.3115050196647644, 0.31873669794627596, 0.3152398552213396, 0.31447476148605347, 0.3125465341976711, 0.3049776979855129, 0.3101503252983093, 0.3206151212964739, 0.30027404001780916, 0.327581592968532, 0.31054872274398804, 0.2984915716307504, 0.29838540724345614, 0.3041987930025373, 0.32436745507376535, 0.29965925216674805, 0.2992257220404489, 0.2983067546572004, 0.3416374070303781, 0.2978223817689078, 0.29388368129730225], "val_accuracy": [0.36633333563804626, 0.6656666398048401, 0.6856666803359985, 0.7043333053588867, 0.7546666860580444, 0.6893333196640015, 0.765999972820282, 0.7646666765213013, 0.7606666684150696, 0.7576666474342346, 0.7760000228881836, 0.7796666622161865, 0.7896666526794434, 0.8009999990463257, 0.8063333630561829, 0.8043333292007446, 0.8136666417121887, 0.79666668176651, 0.8216666579246521, 0.8223333358764648, 0.8196666836738586, 0.8080000281333923, 0.8190000057220459, 0.8323333263397217, 0.8163333535194397, 0.8293333053588867, 0.8379999995231628, 0.8373333215713501, 0.8349999785423279, 0.8346666693687439, 0.8356666564941406, 0.8493333458900452, 0.8473333120346069, 0.8526666760444641, 0.840666651725769, 0.8526666760444641, 0.8293333053588867, 0.8536666631698608, 0.8456666469573975, 0.8413333296775818, 0.8569999933242798, 0.8603333234786987, 0.8603333234786987, 0.840666651725769, 0.8539999723434448, 0.8619999885559082, 0.8600000143051147, 0.8603333234786987, 0.8656666874885559, 0.8646666407585144, 0.859333336353302, 0.8663333058357239, 0.8519999980926514, 0.8686666488647461, 0.8656666874885559, 0.8693333268165588, 0.8603333234786987, 0.8703333139419556, 0.8709999918937683, 0.8673333525657654, 0.8616666793823242, 0.874666690826416, 0.8573333621025085, 0.871666669845581, 0.8696666955947876, 0.8763333559036255, 0.8709999918937683, 0.8666666746139526, 0.8786666393280029, 0.8743333220481873, 0.8773333430290222, 0.8603333234786987, 0.8776666522026062, 0.8776666522026062]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8080000281333923, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 5, 6, 3, 3, 0, 0, 3, 1, 2, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad)), tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))))))), tf.math.add(beta, beta)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9851474812348537, 1.4930050846387555, 1.0638649960739455, 0.890211692071783, 0.8198200504084808, 0.7793085623048851, 0.7469712940850798, 0.7196570091621672, 0.6807352957346373, 0.6717510623639648, 0.6673879619004341, 0.6355873989375543, 0.6139843435162141, 0.6445987255597521, 0.5793696555636578, 0.5769397098910083, 0.5701151207618868, 0.575269507583988, 0.5701400032487166, 0.5333116654517739, 0.5300365703657964, 0.5197892363328723, 0.5241421515033734, 0.5175229826025156, 0.5055403896940698, 0.4960308905605784, 0.48830721588843945, 0.4747920076191433, 0.47798746693970395, 0.4603850467526886, 0.4747440399054161, 0.45385754174560117, 0.4664768703334036, 0.4604133378402857, 0.4320603981348407, 0.4461961821353415, 0.443197650085776, 0.4268759065229564, 0.4185101205583703, 0.41470823555558883, 0.4399388881604181, 0.4072611984236995, 0.39360619576584155, 0.40176004758679146, 0.4035481082221631, 0.39090277974741916, 0.3819036571388436, 0.386220978357694, 0.3983501027194406, 0.3795851904560845, 0.3616913168059679, 0.37757603477146867, 0.3609997494314262, 0.36730141583261805, 0.3470665259706724, 0.36677480003758506, 0.34038858840557185, 0.35883999103883224, 0.34399558074123837, 0.336419684193185, 0.33357740584979867], "accuracy": [0.3299432098865509, 0.49068814516067505, 0.6070532202720642, 0.6730946898460388, 0.6913221478462219, 0.7098137736320496, 0.7214370369911194, 0.7294940948486328, 0.7458723783493042, 0.748249888420105, 0.7390040755271912, 0.7560427784919739, 0.7627789974212646, 0.7519482374191284, 0.7827235460281372, 0.7844406366348267, 0.7824593782424927, 0.7877426743507385, 0.7841764688491821, 0.7993659973144531, 0.8041210174560547, 0.8057059645652771, 0.8053097128868103, 0.8037247657775879, 0.8070268034934998, 0.81548011302948, 0.8150838613510132, 0.8269713521003723, 0.8215559124946594, 0.8278959393501282, 0.8226125836372375, 0.830669641494751, 0.8289526104927063, 0.830669641494751, 0.8430854678153992, 0.8309338092803955, 0.832650899887085, 0.8424250483512878, 0.8432175517082214, 0.8469158411026001, 0.8408400416374207, 0.8545766472816467, 0.8552370667457581, 0.8490291833877563, 0.8541803956031799, 0.8536521196365356, 0.858671247959137, 0.8574824929237366, 0.8524633646011353, 0.8597279191017151, 0.8613129258155823, 0.8590674996376038, 0.8638224601745605, 0.8626337051391602, 0.8730682730674744, 0.869502067565918, 0.8765024542808533, 0.8685774803161621, 0.8687095642089844, 0.8772949576377869, 0.8770307898521423], "val_loss": [1.5449934346335275, 0.8248581715992519, 0.7003732579095023, 0.6345599038260323, 0.5621862070901054, 0.6749758379799979, 0.5395540509905133, 0.5500822918755668, 0.5207187618528094, 0.5398641995021275, 0.5006106240408761, 0.4845754929951259, 0.48654578413282124, 0.46203592845371794, 0.45007405962262836, 0.4423912763595581, 0.4342788202422006, 0.4735021080289568, 0.41348306621823994, 0.4036979504993984, 0.410569429397583, 0.43177487168993267, 0.42009198665618896, 0.39730516501835417, 0.4241649678775242, 0.3819539546966553, 0.3759006943021502, 0.37755738837378366, 0.3768060973712376, 0.38668454544884817, 0.3759755662509373, 0.364337044102805, 0.3578485591070993, 0.359207238469805, 0.3694328580583845, 0.3487979088510786, 0.37152178798403057, 0.340636534350259, 0.345047618661608, 0.36107958214623587, 0.3384617141314915, 0.338878904070173, 0.3286000234740121, 0.3551198584692819, 0.3394191265106201, 0.3293843609946115, 0.33328306674957275, 0.330804705619812, 0.3245243855885097, 0.32160735981804983, 0.3237091473170689, 0.3209995286805289, 0.3414497545787266, 0.31375594649996075, 0.3158520630427769, 0.3116591232163565, 0.3176638313702175, 0.31083160638809204, 0.305719188281468, 0.3114027125494821, 0.31100547313690186], "val_accuracy": [0.36633333563804626, 0.6643333435058594, 0.6903333067893982, 0.706333339214325, 0.7573333382606506, 0.6800000071525574, 0.7593333125114441, 0.7490000128746033, 0.7663333415985107, 0.7356666922569275, 0.7696666717529297, 0.7773333191871643, 0.7896666526794434, 0.7946666479110718, 0.8090000152587891, 0.8069999814033508, 0.8163333535194397, 0.7799999713897705, 0.8199999928474426, 0.8299999833106995, 0.8213333487510681, 0.8076666593551636, 0.8119999766349792, 0.8303333520889282, 0.8076666593551636, 0.8349999785423279, 0.8339999914169312, 0.8399999737739563, 0.8379999995231628, 0.828000009059906, 0.8353333473205566, 0.8450000286102295, 0.8500000238418579, 0.8486666679382324, 0.8306666612625122, 0.8450000286102295, 0.8349999785423279, 0.8536666631698608, 0.8533333539962769, 0.8413333296775818, 0.8569999933242798, 0.8613333106040955, 0.8613333106040955, 0.8486666679382324, 0.8556666374206543, 0.8606666922569275, 0.8629999756813049, 0.862333357334137, 0.8643333315849304, 0.8676666617393494, 0.8566666841506958, 0.862333357334137, 0.8539999723434448, 0.8690000176429749, 0.8636666536331177, 0.871666669845581, 0.8633333444595337, 0.8709999918937683, 0.8686666488647461, 0.8700000047683716, 0.8696666955947876]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8074285984039307, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9851453851447396, 1.4938074430974089, 1.0644399706855379, 0.8921907025951168, 0.8101421838517769, 0.7888086931171072, 0.7513848087885565, 0.7119328619041589, 0.6815748345645632, 0.6867079910522187, 0.6818861304461885, 0.6239772871689726, 0.6133941282858828, 0.6425897719018951, 0.5821589389182416, 0.5906511478656477, 0.5695360438336534, 0.5787545266310143, 0.5649102861422117, 0.5334950791547138, 0.5301198282608377, 0.5221226192531553, 0.5266688420803729, 0.5078926948846969, 0.5031533460292078, 0.49455999071571916, 0.493024436856116, 0.4760119374386308, 0.47697898388900906, 0.4677081978347843, 0.4669910941409271, 0.4523591939657592, 0.4602891854236249, 0.4562186258438477, 0.4322586012097587, 0.44855166304664146, 0.4427983928484105, 0.42588167626859963, 0.4196070130467179, 0.41063070568851334, 0.44009329857465346, 0.4099926429614572, 0.39786694887417845, 0.3969551165696574, 0.3999005185378431, 0.3920794956995244, 0.3789513598320081], "accuracy": [0.3299432098865509, 0.4905560612678528, 0.6069211363792419, 0.6704530715942383, 0.6985867023468018, 0.709021270275116, 0.7209087014198303, 0.7251353859901428, 0.7440232634544373, 0.7452120184898376, 0.7372870445251465, 0.7640998363494873, 0.7660810947418213, 0.7519482374191284, 0.7816668748855591, 0.7746664881706238, 0.7828556299209595, 0.7877426743507385, 0.7865539789199829, 0.7971205711364746, 0.8030643463134766, 0.8030643463134766, 0.8025360107421875, 0.8084797263145447, 0.8099326491355896, 0.8175934553146362, 0.811649739742279, 0.8231409192085266, 0.8226125836372375, 0.824329674243927, 0.82683926820755, 0.8334434032440186, 0.832650899887085, 0.8334434032440186, 0.8417646288871765, 0.8297450542449951, 0.8327829837799072, 0.8428213000297546, 0.8417646288871765, 0.848368763923645, 0.8392550349235535, 0.8536521196365356, 0.8553691506385803, 0.8515387773513794, 0.8535200357437134, 0.8521991968154907, 0.8609166741371155], "val_loss": [1.5451106343950545, 0.8275852714266095, 0.695621269089835, 0.635193943977356, 0.6016046319689069, 0.6570218290601458, 0.5578955241612026, 0.5346671172550747, 0.5493554728371757, 0.5068152632032122, 0.4808969667979649, 0.49052010263715473, 0.47869740213666645, 0.4623786892209734, 0.4697280781609671, 0.44630309513636995, 0.4312763980456761, 0.48991080692836214, 0.4150163616452898, 0.407201886177063, 0.4105535405022757, 0.4234194500105722, 0.40715736150741577, 0.39175030163356234, 0.4168668048722403, 0.38171435253960745, 0.3772055847304208, 0.37744040148598806, 0.3801254119191851, 0.3838649306978498, 0.3843080145972116, 0.36022537095206125, 0.3593296834400722, 0.3535722153527396, 0.37231701612472534, 0.3483871476990836, 0.370699269430978, 0.34001987321036203, 0.3408990332058498, 0.36186600582940237, 0.33637397629874094, 0.33756171805518015, 0.3355179599353245, 0.35716892991747173, 0.33897556577410015, 0.3266807964869908, 0.33994873080934795], "val_accuracy": [0.36633333563804626, 0.6636666655540466, 0.690666675567627, 0.7036666870117188, 0.7086666822433472, 0.6890000104904175, 0.7509999871253967, 0.7639999985694885, 0.746666669845581, 0.7706666588783264, 0.7856666445732117, 0.7723333239555359, 0.8013333082199097, 0.7929999828338623, 0.7900000214576721, 0.8040000200271606, 0.8130000233650208, 0.7713333368301392, 0.8193333148956299, 0.8330000042915344, 0.8196666836738586, 0.8149999976158142, 0.8230000138282776, 0.8363333344459534, 0.815666675567627, 0.8336666822433472, 0.8370000123977661, 0.8386666774749756, 0.8299999833106995, 0.8393333554267883, 0.8309999704360962, 0.8453333377838135, 0.846666693687439, 0.8519999980926514, 0.828000009059906, 0.8486666679382324, 0.8336666822433472, 0.8550000190734863, 0.8543333411216736, 0.840666651725769, 0.8566666841506958, 0.862666666507721, 0.8553333282470703, 0.8513333201408386, 0.8526666760444641, 0.862666666507721, 0.8586666584014893]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0], [1, 6, 0, 3], [3, 2], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [95, 9, 44]], "fitness": -0.38942858576774597, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 6, 3, 3, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.negative(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.25024120153579, 2.1327379585304405, 1.876461568226384, 2.435730453841895, 2.298556696768718, 2.8145510750738953], "accuracy": [0.23325848579406738, 0.24963676929473877, 0.368511438369751, 0.18953903019428253, 0.1158367469906807, 0.12112006545066833], "val_loss": [1.5017010484422957, 1.554995366505214, 2.0357973916190013, 1.9780383791242326, 1.8525805473327637, 1.9786936896187919], "val_accuracy": [0.3776666522026062, 0.3543333411216736, 0.3423333466053009, 0.09866666793823242, 0.2653333246707916, 0.09866666793823242]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 1, 8, 2, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.23914285004138947, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3459118936732932, 3.603712843929095, NaN, NaN, NaN, NaN], "accuracy": [0.19918107986450195, 0.17540615797042847, 0.10355303436517715, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.627185617174421, 357.78981236049106, NaN, NaN, NaN, NaN], "val_accuracy": [0.37700000405311584, 0.16766667366027832, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.23771429061889648, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.345910662311085, 3.212250321123342, 2.7895246824930373, 2.580263795129627, 329.6569991635136, NaN], "accuracy": [0.19918107986450195, 0.1460837423801422, 0.1592920422554016, 0.11147800832986832, 0.10394927859306335, 0.09932637959718704], "val_loss": [1.623893874032157, 1.8618262835911341, 2.0385325295584544, 2.0659402438572476, 12477.54296875, NaN], "val_accuracy": [0.37566667795181274, 0.2980000078678131, 0.1393333375453949, 0.10400000214576721, 0.09066666662693024, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.2345714271068573, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3455085455544666, 3.098300664117229, 3.9524065909085255, 2.6660930952612025, NaN, NaN], "accuracy": [0.19931316375732422, 0.15453705191612244, 0.14872540533542633, 0.10210011899471283, 0.09945846349000931, 0.09998679161071777], "val_loss": [1.634460687637329, 1.9898932320731026, 2.2303290367126465, 27.229854583740234, NaN, NaN], "val_accuracy": [0.36899998784065247, 0.11766666918992996, 0.1459999978542328, 0.14533333480358124, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 3, 9, 8, 2, 6, 4, 3, 6, 2, 3, 2, 4, 4, 8, 2, 5, 5, 6, 9, 2, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10285714268684387, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 21, 14, 4, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(tf.math.pow(grad, grad), grad), tf.math.pow(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad))))), grad))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [9.731735674145515, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2934883236885071, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [179.0139421735491, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.109333336353302, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 0, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07977809756994247, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 7, 6, 2, 6, 5, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 17, 17, 10, 7, 2, 5, 2, 2, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024626743398273, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [1, 8, 0, 3], [3, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [31, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 10, 10, 6, 4, 2, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 0, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0], [5, 4, 0, 3], [3, 2], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [0, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 4, 3, 2, 1, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, sigma), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024626743398273, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0], [1, 8, 9, 3], [1, 2], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [57, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 1, 2, 0, 4, 3, 3, 0, 1, 13, 8, 5, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.negative(sigma))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 9, 3, 7, 6, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [29, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [3, 1, 0, 3, 1, 1, 2, 0, 7, 5, 3], [1, 0, 1, 3, 3, 1, 0, 2, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 20, 11, 9, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.negative(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.subtract(sigma, tf.math.add(tf.math.negative(sigma), alpha))))), tf.math.add(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, alpha))))", "other_info": {"loss": [2025.1756319298704, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09272222965955734, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [131830876621092.58, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 1, 8, 2, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 3, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024060629803222, 2.3026464390102834, 2.302724735627573, 2.3018416150402574, 2.3031726455046058, 2.303797166675955], "accuracy": [0.0886276587843895, 0.09060890227556229, 0.08875974267721176, 0.09034473448991776, 0.08915598690509796, 0.08532558381557465], "val_loss": [1.9709816660199846, 1.9709817341395788, 1.9709817341395788, 1.9709817341395788, 1.9709818022591727, 1.9709818022591727], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 7, 6, 0, 6, 2, 2, 8, 2, 3, 6, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 65, 27, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 37, 37, 22, 15, 6, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.negative(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))))))))), beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302405968507236, 2.302646376028226, 2.302724578172429, 2.3018414710947646, 2.303172375594998, 2.303796941767027], "accuracy": [0.0886276587843895, 0.09060890227556229, 0.08875974267721176, 0.09034473448991776, 0.08915598690509796, 0.08532558381557465], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]