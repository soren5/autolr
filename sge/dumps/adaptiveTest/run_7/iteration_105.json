[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [5, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8337143063545227, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.negative(grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9534166154293353, 1.4167795612858964, 1.0344437042231793, 0.9003519499070451, 0.8318248954289751, 0.7802876662017647, 0.7336914302288439, 0.7280703559212791, 0.6827054062555369, 0.6707027930987274, 0.6631665940156246, 0.6707776335519869, 0.6422830227658639, 0.6430782754155765, 0.5822080351562863, 0.5889940195001112, 0.590840009138679, 0.5841728691112537, 0.5739421497530012, 0.555120742568219, 0.5451983913076616, 0.5241432168763689, 0.535851349691752, 0.5455945044885836, 0.5191237422311783, 0.5131667714667846, 0.4987144744816615, 0.49038558566197116, 0.4971230177674012, 0.5076133400583627, 0.4679533293840514, 0.4662550571391202, 0.46295189753168875, 0.4709380108839989, 0.4414743746843289, 0.4708661295521796, 0.439735623823732, 0.4220158327776821, 0.43960884977892295, 0.4460727592555996, 0.4324611690751062, 0.40597636874687903, 0.4355640557849601, 0.39903811648096377, 0.39565725714113925, 0.4012538132658409, 0.3953404137605154, 0.3953238534039321, 0.37803770098877054, 0.3958919364990985, 0.3684885753041891, 0.37158412709212213, 0.3673741995752952, 0.3752104692793856, 0.37343024271055064, 0.34825742003814086, 0.37101491613001353, 0.35954879485085467, 0.35454463969762096, 0.3496301213724423], "accuracy": [0.3451327383518219, 0.5095760226249695, 0.6211860775947571, 0.6692643165588379, 0.6857746839523315, 0.7013604640960693, 0.7170783281326294, 0.722757875919342, 0.7420420050621033, 0.7396644949913025, 0.750231146812439, 0.7397965788841248, 0.7559106945991516, 0.7553823590278625, 0.7872143983840942, 0.7732135653495789, 0.7736098170280457, 0.7778365015983582, 0.7825914621353149, 0.7886672616004944, 0.7975168228149414, 0.8057059645652771, 0.7954035401344299, 0.7960638999938965, 0.8045172095298767, 0.8113855719566345, 0.8121780753135681, 0.8171972036361694, 0.8107251524925232, 0.8083476424217224, 0.8271034359931946, 0.821820080280304, 0.83119797706604, 0.8252542614936829, 0.8370096683502197, 0.8226125836372375, 0.8352925777435303, 0.8451988101005554, 0.8338396549224854, 0.8341038227081299, 0.8378021121025085, 0.8429533839225769, 0.8359529972076416, 0.8531237840652466, 0.8481045961380005, 0.8488970994949341, 0.8527275323867798, 0.8535200357437134, 0.863558292388916, 0.8506141901016235, 0.8658037185668945, 0.8622375130653381, 0.8652753829956055, 0.8640866279602051, 0.8661999702453613, 0.8704266548156738, 0.8557654023170471, 0.8683133125305176, 0.8754457831382751, 0.8702945709228516], "val_loss": [1.391406433922904, 0.7976788112095424, 0.7217228072030204, 0.6820102419172015, 0.5838649443217686, 0.6234406232833862, 0.5687767096928188, 0.5165138414927891, 0.5659502404076713, 0.4972931316920689, 0.5878379004342216, 0.503941467830113, 0.5100377116884504, 0.4630896193640573, 0.4648851326533726, 0.47540153775896343, 0.4570233310971941, 0.4465575558798654, 0.4333869048527309, 0.43485476289476666, 0.41953682047980173, 0.4259253570011684, 0.4160993184362139, 0.4139067104884556, 0.3919379540852138, 0.4058997460774013, 0.3812779869352068, 0.45980111190250944, 0.3745104329926627, 0.3765989201409476, 0.368779114314488, 0.3843663249697004, 0.3919019954545157, 0.35859635046550203, 0.4535134860447475, 0.3554443972451346, 0.3574399777821132, 0.3748347759246826, 0.3437557986804417, 0.3563460792813982, 0.3444927675383432, 0.35484819752829416, 0.3412526249885559, 0.33576864855630056, 0.3448985389300755, 0.32698040349142893, 0.33131292036601473, 0.34363532066345215, 0.3254368645804269, 0.31907263823917936, 0.32565414905548096, 0.32488083839416504, 0.3407425028937204, 0.3548925689288548, 0.31707762820380075, 0.3326689771243504, 0.3304822104317801, 0.32235619851521086, 0.31661055769239155, 0.3149962169783456], "val_accuracy": [0.5320000052452087, 0.6443333625793457, 0.6606666445732117, 0.690666675567627, 0.7416666746139526, 0.7203333377838135, 0.7459999918937683, 0.7649999856948853, 0.7379999756813049, 0.7770000100135803, 0.7289999723434448, 0.7603333592414856, 0.7706666588783264, 0.800000011920929, 0.7806666493415833, 0.7853333353996277, 0.7853333353996277, 0.7953333258628845, 0.8143333196640015, 0.8140000104904175, 0.8159999847412109, 0.8036666512489319, 0.815666675567627, 0.8133333325386047, 0.8346666693687439, 0.8183333277702332, 0.8373333215713501, 0.793666660785675, 0.8366666436195374, 0.8370000123977661, 0.8433333039283752, 0.8263333439826965, 0.8333333134651184, 0.8426666855812073, 0.7979999780654907, 0.8503333330154419, 0.8443333506584167, 0.8463333249092102, 0.8539999723434448, 0.8473333120346069, 0.8516666889190674, 0.8513333201408386, 0.8523333072662354, 0.8606666922569275, 0.8526666760444641, 0.862666666507721, 0.8640000224113464, 0.8550000190734863, 0.8573333621025085, 0.8643333315849304, 0.8650000095367432, 0.859333336353302, 0.856333315372467, 0.846666693687439, 0.8673333525657654, 0.8546666502952576, 0.859666645526886, 0.8659999966621399, 0.8673333525657654, 0.8666666746139526]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 9, 2, 6, 2, 3, 8, 2, 3, 3, 4, 4, 8, 1, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [5, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8185714483261108, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9531942964182742, 1.4120803004195426, 1.0809790434507944, 0.9071149300385807, 0.8469488344581734, 0.7661684881332387, 0.7264704609811582, 0.7205658098725816, 0.6952454960971319, 0.6604257824634753, 0.6562352964213937, 0.66553849883288, 0.6422259647848426, 0.6167945842921789, 0.6001217275121823, 0.5807583884020775, 0.6005946802283637, 0.5705519888646976, 0.5748026248738278, 0.5538501822402087, 0.5425108957835444, 0.5204619812124582, 0.5310167297553613, 0.5538560963026552, 0.5141092931605475, 0.5041167779274904, 0.49820475926441427, 0.49678518696231866, 0.49534074396678346, 0.48555091526120675, 0.4650331186840421, 0.46065114147832226, 0.46200222401665564, 0.46167726048137125, 0.4369903130538239, 0.46121381355267255, 0.4372800287711008, 0.4187385532850004, 0.4426958260125551, 0.4419916960163643, 0.42701721218173627, 0.4034896886635293, 0.4249121215105403, 0.3980741301634371, 0.39581502812838654, 0.3988552717303776, 0.38549451572689414, 0.39501699434846477, 0.37108526496272504, 0.3903558351667314, 0.3633647502932991, 0.3658807730599165, 0.36364510527470834, 0.3693799510600151, 0.37026844841378037, 0.3426834650326871, 0.3670173523731834, 0.3556423287987788, 0.3503153962096077, 0.3478200233111749], "accuracy": [0.34500065445899963, 0.5126138925552368, 0.6078457236289978, 0.663848876953125, 0.6748117804527283, 0.7082287669181824, 0.7205125093460083, 0.7273808121681213, 0.7353057861328125, 0.741909921169281, 0.7511557340621948, 0.746268630027771, 0.7581561207771301, 0.7656848430633545, 0.7744023203849792, 0.7774402499198914, 0.767930269241333, 0.7832518815994263, 0.7821952104568481, 0.7877426743507385, 0.7967243194580078, 0.8043851256370544, 0.7987055778503418, 0.7917051911354065, 0.8041210174560547, 0.8119139075279236, 0.8136309385299683, 0.8145555257797241, 0.8108572363853455, 0.8149517774581909, 0.8264430165290833, 0.8264430165290833, 0.8315942287445068, 0.8273676037788391, 0.8392550349235535, 0.8256505131721497, 0.8368775844573975, 0.848368763923645, 0.8323867321014404, 0.8362171649932861, 0.8393871188163757, 0.8465195894241333, 0.8441421389579773, 0.8536521196365356, 0.8506141901016235, 0.850350022315979, 0.8556333184242249, 0.8521991968154907, 0.8664641380310059, 0.8545766472816467, 0.867520809173584, 0.8626337051391602, 0.8669924736022949, 0.8689737319946289, 0.86553955078125, 0.8734645247459412, 0.8597279191017151, 0.872407853603363, 0.8766345381736755, 0.8709549307823181], "val_loss": [1.3870550564357214, 0.7926349639892578, 0.6855536528996059, 0.6489409037998745, 0.5832629374095372, 0.5957827738353184, 0.5626635721751622, 0.5328947986875262, 0.5369578940527779, 0.4931553602218628, 0.5677595649446759, 0.5124126672744751, 0.503185680934361, 0.4705605336597988, 0.47211376258305143, 0.5151829549244472, 0.45124956539699007, 0.4708455971309117, 0.4470374754496983, 0.42955262320382254, 0.42119243315287996, 0.4366533415658133, 0.43168813841683523, 0.4075640184538705, 0.3885507753917149, 0.41055904967444284, 0.378694440637316, 0.456965514591762, 0.36976810012544903, 0.3740895986557007, 0.3673853022711618, 0.37822139263153076, 0.4015828881944929, 0.3563805988856724, 0.4450886419841221, 0.3540944457054138, 0.35160501514162334, 0.39082338980266024, 0.3446924686431885, 0.356688780444009, 0.3426670432090759, 0.37240632091249737, 0.34474184683391024, 0.339222184249333, 0.3476901650428772, 0.3226764713014875, 0.3311029246875218, 0.3465877260480608, 0.31842813321522306, 0.31835568802697317, 0.32661363056727816, 0.3260037047522409, 0.3351486921310425, 0.3494704876627241, 0.3140887958662851, 0.3270602822303772, 0.3272321309362139, 0.3179404139518738, 0.31752026081085205, 0.3141506484576634], "val_accuracy": [0.5356666445732117, 0.6460000276565552, 0.7046666741371155, 0.7056666612625122, 0.7416666746139526, 0.75, 0.7379999756813049, 0.7559999823570251, 0.7459999918937683, 0.7786666750907898, 0.734000027179718, 0.7570000290870667, 0.7760000228881836, 0.7829999923706055, 0.7816666960716248, 0.7476666569709778, 0.7913333177566528, 0.7820000052452087, 0.8019999861717224, 0.8146666884422302, 0.812333345413208, 0.7910000085830688, 0.8023333549499512, 0.8203333616256714, 0.8376666903495789, 0.8173333406448364, 0.8373333215713501, 0.7913333177566528, 0.8399999737739563, 0.8376666903495789, 0.8396666646003723, 0.8339999914169312, 0.824999988079071, 0.8473333120346069, 0.8003333210945129, 0.8529999852180481, 0.8489999771118164, 0.8360000252723694, 0.8543333411216736, 0.8450000286102295, 0.8529999852180481, 0.8410000205039978, 0.8479999899864197, 0.8556666374206543, 0.8476666808128357, 0.8646666407585144, 0.8606666922569275, 0.8489999771118164, 0.8629999756813049, 0.8669999837875366, 0.8613333106040955, 0.859000027179718, 0.8579999804496765, 0.8473333120346069, 0.8693333268165588, 0.8569999933242798, 0.862666666507721, 0.862666666507721, 0.8683333396911621, 0.8669999837875366]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 9, 2, 6, 2, 3, 8, 2, 3, 3, 4, 4, 8, 1, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.62971431016922, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.961979954942752, 1.4921392114202439, 0.8910252916310615, 0.8029446813172479, 0.7278003019427485, 0.7681108112065012, 0.7786843585709791, 0.7685503919740883, 0.781188839714147, 0.8897354704214834, 1.1605303763020638, 1.4253899219281418, 1.6647026989642955, 1.7694977010796964, 1.6880865712538056], "accuracy": [0.35781270265579224, 0.49729230999946594, 0.6818121671676636, 0.7107383608818054, 0.728701651096344, 0.7362303733825684, 0.7191916704177856, 0.7157574892044067, 0.7170783281326294, 0.7112666964530945, 0.6481310129165649, 0.6276581883430481, 0.5326905250549316, 0.47629112005233765, 0.4831594228744507], "val_loss": [1.5932846750531877, 0.7325303724833897, 0.5739338568278721, 0.564018964767456, 0.5108936684472221, 0.5845558813640049, 0.515667029789516, 0.5710260186876569, 0.6026342936924526, 0.557057091167995, 0.8943389654159546, 0.8942245585577828, 1.0404582704816545, 1.1723096030099052, 1.0334697791508265], "val_accuracy": [0.5806666612625122, 0.6816666722297668, 0.7429999709129333, 0.7609999775886536, 0.7716666460037231, 0.7419999837875366, 0.768666684627533, 0.7383333444595337, 0.7620000243186951, 0.7753333449363708, 0.7236666679382324, 0.6636666655540466, 0.5673333406448364, 0.5143333077430725, 0.5873333215713501]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 5, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 1, 1, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [98, 69, 80, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [13, 9, 44]], "fitness": -0.498285710811615, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, beta))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3023650442777672, 2.2995145236811285, 2.300020096718029, 2.297963287316734, 2.2977163791341586, 2.2945571733330374, 2.293690444770947, 2.29195974629238, 2.2906854259748943, 2.2903233892047536, 2.288350973619273, 2.286162378828618, 2.2864089177158986, 2.2839924337495163, 2.284020170008486, 2.2817390720842066, 2.280891013828802, 2.2793858445252817, 2.277222289889165, 2.276119644111882, 2.276198581823536, 2.272101460698573, 2.2724902437757017, 2.2725751651292305, 2.2701579132541108, 2.2682834424835234, 2.2672008190487576, 2.2652942229570603, 2.264263645060515, 2.2614465541119086, 2.261464729064712, 2.2602870008964673, 2.2585809654988602, 2.257031211228245, 2.2559582304724644, 2.2540620808682625, 2.2545827763065796, 2.2525464381839084, 2.2494869849086987, 2.245923227590577, 2.24843556905199, 2.2443919391868894, 2.242947999591195, 2.2403527805125316, 2.2409210532269914, 2.2386351339002375, 2.2372557981501418, 2.23547667383817, 2.232981169527674, 2.2329545117734586, 2.231042453594306, 2.227363617979792, 2.227067342633978, 2.2223184650064916, 2.2233845074383685, 2.2199036267612744, 2.2178759592525115, 2.2168256985497212, 2.2161172433315786, 2.2138730731732843, 2.2125180820668646, 2.2087388347247336, 2.2070119716015473, 2.2033370606509717, 2.2034295109111586, 2.200672732116272, 2.1988350292317165, 2.1960499455758438, 2.193283653183699, 2.1921943439515887, 2.1903317546831884, 2.1869471484423473, 2.1845589869089443, 2.182544321038263, 2.180396783148781, 2.1765002451395206, 2.174960012968741, 2.1729865004247633, 2.167468694758185, 2.166440300040194, 2.1656336956618722, 2.159297810726949, 2.159522827542957, 2.1565919818659, 2.1530889877789936, 2.1490946147640573, 2.146611918705235, 2.1431734789600303, 2.141060380257982, 2.1360835765787733, 2.1324772914765044, 2.1303272972237934, 2.1260342520493496, 2.121534037756929, 2.119628398709089, 2.1192195139950325, 2.1126354631573343, 2.112378298189221, 2.1056046980310033, 2.103842584983847], "accuracy": [0.09259014576673508, 0.09642054885625839, 0.09576013684272766, 0.09893012791872025, 0.10236428678035736, 0.11253467202186584, 0.11240258812904358, 0.1142517477273941, 0.11940298229455948, 0.11940298229455948, 0.1266675442457199, 0.136045441031456, 0.1298375427722931, 0.1402720957994461, 0.13630960881710052, 0.1468762308359146, 0.1422533392906189, 0.14859332144260406, 0.15902787446975708, 0.1592920422554016, 0.1566503793001175, 0.1784440577030182, 0.17223615944385529, 0.16919825971126556, 0.17580240964889526, 0.18399155139923096, 0.18372738361358643, 0.19297318160533905, 0.18980319797992706, 0.20301149785518646, 0.19970941543579102, 0.19812442362308502, 0.20552106201648712, 0.21159687638282776, 0.20723815262317657, 0.21872936189174652, 0.21054022014141083, 0.21780477464199066, 0.22639016807079315, 0.23352265357971191, 0.23405098915100098, 0.24157971143722534, 0.23656055331230164, 0.24554219841957092, 0.23537181317806244, 0.24633470177650452, 0.2499009370803833, 0.25716549158096313, 0.25980716943740845, 0.2565050721168518, 0.260071337223053, 0.2712983787059784, 0.26482629776000977, 0.2771100103855133, 0.27037379145622253, 0.27803459763526917, 0.2868841588497162, 0.28120461106300354, 0.27605336904525757, 0.2891295850276947, 0.29282790422439575, 0.3007528781890869, 0.299299955368042, 0.29718664288520813, 0.30260202288627625, 0.3051116168498993, 0.3070928454399109, 0.31765949726104736, 0.31898030638694763, 0.31845200061798096, 0.3151499032974243, 0.3195086419582367, 0.313300758600235, 0.3249240517616272, 0.3263769745826721, 0.3343019485473633, 0.3279619514942169, 0.33020737767219543, 0.3427552580833435, 0.3369435966014862, 0.3354906737804413, 0.35345396399497986, 0.34539690613746643, 0.3423590064048767, 0.35068023204803467, 0.3469819128513336, 0.34922730922698975, 0.35266146063804626, 0.35741645097732544, 0.3591335415840149, 0.360190212726593, 0.36243560910224915, 0.3626997768878937, 0.37722888588905334, 0.3737947344779968, 0.36626601219177246, 0.3745872378349304, 0.3751155734062195, 0.37088891863822937, 0.3800026476383209], "val_loss": [1.9697416850498743, 1.968508584158761, 1.9672737121582031, 1.966043131692069, 1.964813504900251, 1.96359007699149, 1.962362834385463, 1.9611541203090124, 1.9599452699933733, 1.9587219102042062, 1.9574954850333077, 1.9562854085649763, 1.955073356628418, 1.9538651193891252, 1.9526434625898088, 1.9514194216047014, 1.9501850264413017, 1.9489648682730538, 1.9477500915527344, 1.9465147427150182, 1.9452899524143763, 1.9440375055585588, 1.942798137664795, 1.9415542057582311, 1.9402832984924316, 1.939004693712507, 1.9377193450927734, 1.9364164216177804, 1.9351087978907995, 1.9337975638253349, 1.932488032749721, 1.9311589513506209, 1.9298128400530135, 1.9284546715872628, 1.9270995685032435, 1.925722394670759, 1.9243495123726981, 1.922945771898542, 1.9215281350272042, 1.9200680596487862, 1.9186342103140694, 1.9171535628182548, 1.9156642641339983, 1.9141568456377303, 1.9126264708382743, 1.9110915320260184, 1.9095398357936315, 1.9079556465148926, 1.9063496589660645, 1.9047327041625977, 1.9031051227024622, 1.9014319692339217, 1.899749483380999, 1.8980193138122559, 1.8962689808436803, 1.8944931030273438, 1.8927101407732283, 1.8908724103655135, 1.889035974230085, 1.8871865953717912, 1.8852965491158622, 1.8833654267447335, 1.8814232689993722, 1.8794212341308594, 1.8774079595293318, 1.875368867601667, 1.8732822281973702, 1.871171201978411, 1.8690082686288017, 1.8668404987880163, 1.8646197319030762, 1.862363338470459, 1.860053607395717, 1.857743535723005, 1.855365821293422, 1.852963651929583, 1.850515910557338, 1.8480499131338937, 1.8454930441720145, 1.8429004805428642, 1.8403048515319824, 1.8376483917236328, 1.8349789891924178, 1.8322596549987793, 1.8294903891427177, 1.8266517775399345, 1.8237735203334264, 1.820871353149414, 1.8179172788347517, 1.8149078232901437, 1.8118608338492257, 1.8087692941938127, 1.8055905614580428, 1.8023912566048759, 1.799144676753453, 1.7958711896623885, 1.7925270625523158, 1.789172785622733, 1.785701138632638, 1.7822256088256836], "val_accuracy": [0.0403333343565464, 0.05166666582226753, 0.06066666543483734, 0.07066666334867477, 0.0820000022649765, 0.09433333575725555, 0.1066666692495346, 0.11966666579246521, 0.1289999932050705, 0.14100000262260437, 0.1509999930858612, 0.16099999845027924, 0.17133332788944244, 0.1836666613817215, 0.19599999487400055, 0.20733332633972168, 0.21766667068004608, 0.22733333706855774, 0.2370000034570694, 0.24666666984558105, 0.2553333342075348, 0.26499998569488525, 0.2736666798591614, 0.28200000524520874, 0.2876666784286499, 0.2926666736602783, 0.2983333468437195, 0.3059999942779541, 0.3100000023841858, 0.3166666626930237, 0.32366666197776794, 0.32633334398269653, 0.3316666781902313, 0.3356666564941406, 0.34066668152809143, 0.343666672706604, 0.3479999899864197, 0.35100001096725464, 0.35333332419395447, 0.3569999933242798, 0.36033332347869873, 0.36133334040641785, 0.36533331871032715, 0.3659999966621399, 0.367000013589859, 0.3709999918937683, 0.3726666569709778, 0.37566667795181274, 0.3773333430290222, 0.37833333015441895, 0.38066667318344116, 0.38199999928474426, 0.38499999046325684, 0.38733333349227905, 0.39133334159851074, 0.39366665482521057, 0.39633333683013916, 0.40066665410995483, 0.4026666581630707, 0.40400001406669617, 0.4050000011920929, 0.40700000524520874, 0.4116666615009308, 0.41200000047683716, 0.4129999876022339, 0.41366666555404663, 0.41600000858306885, 0.41733333468437195, 0.4189999997615814, 0.42100000381469727, 0.42399999499320984, 0.4273333251476288, 0.429666668176651, 0.4313333332538605, 0.4326666593551636, 0.4350000023841858, 0.4363333284854889, 0.43799999356269836, 0.44066667556762695, 0.4426666796207428, 0.44566667079925537, 0.4476666748523712, 0.4490000009536743, 0.44999998807907104, 0.45100000500679016, 0.45133334398269653, 0.45533332228660583, 0.4556666612625122, 0.4573333263397217, 0.4580000042915344, 0.4593333303928375, 0.460999995470047, 0.46433332562446594, 0.4659999907016754, 0.46666666865348816, 0.4676666557788849, 0.4690000116825104, 0.4703333377838135, 0.47200000286102295, 0.4729999899864197]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 2, 0, 3, 1, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 30, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 3, 3, 1, 1], [76, 9, 44]], "fitness": -0.10400000214576721, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.393898129038067, 2.3597000222148803, 2.305502734872659, 2.3033060548548305, 2.302932776952574, 2.302771354253817], "accuracy": [0.201294407248497, 0.14436666667461395, 0.09998679161071777, 0.09840179979801178, 0.09800554811954498, 0.09945846349000931], "val_loss": [2.0099940981183733, 1.9772848401750838, 1.9744226591927665, 1.9737683704921178, 1.9736360141209193, 1.9730990954807825], "val_accuracy": [0.17733334004878998, 0.10100000351667404, 0.10100000351667404, 0.09866666793823242, 0.09866666793823242, 0.15666666626930237]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 5, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 1, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [5, 2], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [0, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 39, 39, 23, 16, 3, 1, 1, 0, 1, 0, 13, 8, 5, 3], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(alpha, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), grad)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.square(grad))))))), tf.math.add(beta, beta)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.negative(sigma))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [76, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [0, 0, 2, 3, 1, 1], [43, 63, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 6, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 0, 3, 1, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [12, 3, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 36, 36, 21, 15, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, beta))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06339981406927109, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68, 34, 88], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 9, 2, 6, 2, 3, 8, 2, 3, 3, 4, 4, 8, 1, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [5, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [9, 1, 0, 3, 1, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 3, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), grad), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025024475092115, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 5, 3, 0, 4, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 1, 3, 3, 1, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [12, 63, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 3, 3, 1, 1], [65, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [115.26509782367647, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2052568942308426, 0.10381719470024109, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6918214.285714285, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [3, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 1, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [12, 86, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 36, 36, 21, 15, 3, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, beta))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [1.6280982149190297e+21, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0536256767809391, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 9, 2, 6, 2, 3, 8, 2, 3, 3, 4, 4, 8, 1, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [61, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [5, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 9, 2, 6, 2, 3, 8, 2, 3, 3, 4, 4, 8, 1, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [5, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [493630072.1332828, 73182818539.34012, 1252228783274.2834, 8856326583340.498, 38873232239672.13, 128972800459453.16], "accuracy": [0.10077928751707077, 0.09470347315073013, 0.09906221181154251, 0.10196803510189056, 0.10500594228506088, 0.10011887550354004], "val_loss": [4101326262.857143, 221020927707.42856, 2372155061979.4287, 12932052456009.143, 48438316405321.14, 142879713544484.56], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 5, 6, 9, 2, 6, 2, 2, 8, 2, 3, 3, 4, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 2, 3, 1, 1, 1, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 69, 90, 68, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [4, 9, 0, 3, 1, 5, 7, 9, 7, 5], [1, 0, 3, 3, 1, 1], [38, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.303348053022855, 2.303584453184465, 2.303388600462164, 2.303782908797752, 2.3034942956916127, 2.304134851874393, 2.303322619230457, 2.303665577822106, 2.3035786377361753, 2.3037022275223062, 2.303459768801664, 2.303706692824227], "accuracy": [0.0944393053650856, 0.09708096832036972, 0.09430722147226334, 0.09430722147226334, 0.09140139818191528, 0.09681680053472519, 0.09853387624025345, 0.09589222073554993, 0.09087307006120682, 0.09536388516426086, 0.0940430611371994, 0.09074098616838455], "val_loss": [1.9741514750889368, 1.973642008645194, 1.9739812442234583, 1.9739719799586706, 1.9740924154009138, 1.9739468438284737, 1.9742091042654855, 1.973715169089181, 1.9738062449863978, 1.9740124429975237, 1.9737804957798548, 1.973853383745466], "val_accuracy": [0.09866666793823242, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.09799999743700027, 0.09866666793823242, 0.10133333504199982, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09866666793823242, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.6281444084909044e+21, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0536256767809391, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 69, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 4, 0, 3, 1, 5, 5, 0, 7, 5], [0, 0, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3025024475092115, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 0, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [93, 16, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [5, 2], [76], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.09771428257226944, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 13, 8, 5, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.negative(sigma)))), alpha)", "other_info": {"loss": [2.3016623815509543, 2.298413478561349, 2.299355962131285, 2.3003389504386953, 2.301208981401995, 2.301395566408991, 2.301443309831802], "accuracy": [0.0944393053650856, 0.10117553919553757, 0.0956280529499054, 0.08968432247638702, 0.08955223858356476, 0.0820235088467598, 0.08717474341392517], "val_loss": [1.968564578465053, 1.9692503384181432, 1.971158845084054, 1.972024781363351, 1.9722742353166853, 1.9725066593715124, 1.9725960322788783], "val_accuracy": [0.07566666603088379, 0.09533333033323288, 0.07966666668653488, 0.07233333587646484, 0.07733333110809326, 0.07866666465997696, 0.070333331823349]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 9, 2, 6, 2, 3, 8, 2, 3, 3, 4, 4, 8, 1, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 69, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [5, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.0722857117652893, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.3023620411043138, 2.3001127617785233, 2.30090147396199, 2.2998808731161735, 2.300493379924685, 2.299522393289228, 2.2996243075797933, 2.2990702517107255, 2.2991400398299238, 2.299872319491438, 2.2996959206670926, 2.2992445238199313, 2.299992808387453, 2.299893436304661], "accuracy": [0.09179764986038208, 0.09430722147226334, 0.08981640636920929, 0.09245806187391281, 0.09509972482919693, 0.09998679161071777, 0.10157178342342377, 0.1002509593963623, 0.09668471664190292, 0.09760929644107819, 0.09893012791872025, 0.10685510188341141, 0.09655263274908066, 0.09998679161071777], "val_loss": [1.9700732231140137, 1.9697604860578264, 1.9693968636648995, 1.969245229448591, 1.9692816734313965, 1.9694084439958846, 1.9694440705435616, 1.9694366455078125, 1.9694786752973283, 1.9696364402770996, 1.9699873243059431, 1.9702771050589425, 1.970421314239502, 1.9706317356654577], "val_accuracy": [0.04533333331346512, 0.050999999046325684, 0.058666665107011795, 0.06566666811704636, 0.06833333522081375, 0.07133333384990692, 0.07266666740179062, 0.07400000095367432, 0.07500000298023224, 0.07366666942834854, 0.0716666653752327, 0.06700000166893005, 0.06533333659172058, 0.06466666609048843]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 8, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 0, 3, 1, 3, 3, 1, 3, 0, 3, 1, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [12, 86, 45, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [3, 0, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3029155548238296, 2.3014014994762735, 2.3032523349071177, 2.302536343728326, 2.3036281107092704, 2.3017626699911937], "accuracy": [0.09047681838274002, 0.09113723784685135, 0.08942015469074249, 0.0886276587843895, 0.08875974267721176, 0.09536388516426086], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 3, 8, 9, 2, 6, 2, 2, 8, 2, 3, 3, 2, 3, 8, 2, 8, 6, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 69, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.040571428835392, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3030285478787667, 2.3017324449647263, 2.303940012344453, 2.303549267313248, 2.305034663777672, 2.3033650418345673], "accuracy": [0.08981640636920929, 0.08981640636920929, 0.08757099509239197, 0.0874389111995697, 0.08730682730674744, 0.09245806187391281], "val_loss": [1.9711793490818568, 1.9713397026062012, 1.9715774399893624, 1.9718223980494909, 1.9720886775425501, 1.9723544120788574], "val_accuracy": [0.032999999821186066, 0.03233333304524422, 0.03133333474397659, 0.029999999329447746, 0.0273333340883255, 0.02666666731238365]}}]