[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 6, 9, 2, 6, 2, 3, 8, 2, 3, 3, 2, 3, 8, 1, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.805142879486084, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 20, 15, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, alpha)), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(tf.math.multiply(grad, tf.math.multiply(grad, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))))), tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9968431445318142, 1.3933290392258826, 1.04553204559143, 0.8957839733133101, 0.8048503399446356, 0.7700542886464068, 0.7607320251560576, 0.7140394868930695, 0.7283227368274054, 0.6702002448459988, 0.6385720569491308, 0.6615472545776195, 0.6147995843485503, 0.6205509527484424, 0.5921231656656478, 0.5953944876776269, 0.5707345540025026, 0.5860912210480601, 0.5581440778141402, 0.5391431994772606, 0.5350360437044772, 0.535761008976221, 0.524222268333619, 0.5237225948260555, 0.5158820754863551, 0.4997555879538227, 0.5011555908095048, 0.4906849464515512, 0.4869500788730984, 0.4683202043925577, 0.46182836239694713, 0.46425690644720463, 0.45283362660677584, 0.44293768717911675, 0.46048134163842774, 0.44046728219480213], "accuracy": [0.3447364866733551, 0.5123497843742371, 0.6145819425582886, 0.6622639298439026, 0.6948884129524231, 0.7033417224884033, 0.7141724824905396, 0.7325320243835449, 0.7213049530982971, 0.7396644949913025, 0.7588165402412415, 0.7452120184898376, 0.7664773464202881, 0.7614582180976868, 0.7758552432060242, 0.7681944370269775, 0.7865539789199829, 0.7750627398490906, 0.7887993454933167, 0.7969884872436523, 0.7948752045631409, 0.7987055778503418, 0.8010830879211426, 0.802800178527832, 0.8105930685997009, 0.8148196935653687, 0.8137630224227905, 0.816008448600769, 0.8215559124946594, 0.8274996876716614, 0.8255184292793274, 0.8290846943855286, 0.8325188159942627, 0.8364813327789307, 0.8327829837799072, 0.8396512866020203], "val_loss": [1.5486533641815186, 0.791746803692409, 0.7336200135094779, 0.6519246782575335, 0.6121941804885864, 0.5908247062138149, 0.5331825699125018, 0.5202968972069877, 0.5017576387950352, 0.546372481754848, 0.5511621577399117, 0.4952964782714844, 0.5133110455104283, 0.4734948532921927, 0.5053784166063581, 0.4425243820462908, 0.46696838310786654, 0.45390660422188894, 0.42541055168424335, 0.4425032820020403, 0.4316547768456595, 0.4428055967603411, 0.43688832010541645, 0.39559548241751535, 0.40256920882633757, 0.3859556402478899, 0.39866383586611065, 0.4260794605527605, 0.37655025720596313, 0.36452493497303556, 0.36480958121163504, 0.3646006669316973, 0.3569378341947283, 0.3846494810921805, 0.3664888398987906, 0.3519989081791469], "val_accuracy": [0.3636666536331177, 0.6600000262260437, 0.6536666750907898, 0.6826666593551636, 0.7056666612625122, 0.7133333086967468, 0.7649999856948853, 0.7689999938011169, 0.7873333096504211, 0.7710000276565552, 0.7379999756813049, 0.7586666941642761, 0.7543333172798157, 0.7900000214576721, 0.7570000290870667, 0.8146666884422302, 0.7866666913032532, 0.7886666655540466, 0.815666675567627, 0.7950000166893005, 0.8109999895095825, 0.7946666479110718, 0.8050000071525574, 0.8346666693687439, 0.8266666531562805, 0.8286666870117188, 0.8230000138282776, 0.800000011920929, 0.8429999947547913, 0.8456666469573975, 0.8496666550636292, 0.8399999737739563, 0.847000002861023, 0.8256666660308838, 0.8410000205039978, 0.8476666808128357]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 0, 9, 2, 6, 2, 3, 8, 2, 3, 3, 2, 3, 8, 4, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [1, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7971428632736206, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 22, 14, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), grad)))))))))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9968177660061714, 1.3920286018708914, 1.0472749772010117, 0.89667962461399, 0.8058752000938081, 0.7681852485982104, 0.7542440198384508, 0.708884860829686, 0.7332279159329618, 0.6690044628237027, 0.635786812563047, 0.6685240608180566, 0.6177959421354593, 0.6394010112663822, 0.594333391179498, 0.5913428504469215, 0.5643609340605624, 0.5831417374213484, 0.5369064213459314, 0.5375091044532152, 0.5247906700195873, 0.5401000858313687, 0.5161001097335634, 0.5174592723857142], "accuracy": [0.3447364866733551, 0.5127459764480591, 0.6145819425582886, 0.6617355942726135, 0.6931713223457336, 0.7034738063812256, 0.7176066637039185, 0.7357020378112793, 0.7194558382034302, 0.739928662776947, 0.7594769597053528, 0.746268630027771, 0.7635715007781982, 0.7569673657417297, 0.7730814814567566, 0.7721568942070007, 0.7872143983840942, 0.7788931727409363, 0.7977809906005859, 0.7979130744934082, 0.8009510040283203, 0.7921014428138733, 0.8061022162437439, 0.8092722296714783], "val_loss": [1.5497135434831892, 0.789639983858381, 0.7361571448189872, 0.6581750767571586, 0.6149176018578666, 0.5756407976150513, 0.5311719860349383, 0.5316837685448783, 0.5067528997148786, 0.5502226863588605, 0.5655815771647862, 0.5143144641603742, 0.4876529148646763, 0.47121994835989817, 0.5037916558129447, 0.43829342297145296, 0.4752260276249477, 0.45707341602870394, 0.42652521814618793, 0.43075250727789743, 0.41761668239321026, 0.4265765292303903, 0.41717379433768137, 0.44015514850616455], "val_accuracy": [0.3636666536331177, 0.6610000133514404, 0.6489999890327454, 0.6803333163261414, 0.7053333520889282, 0.7246666550636292, 0.768666684627533, 0.7543333172798157, 0.781000018119812, 0.7703333497047424, 0.7366666793823242, 0.7490000128746033, 0.7703333497047424, 0.7839999794960022, 0.7576666474342346, 0.8159999847412109, 0.7846666574478149, 0.7839999794960022, 0.8163333535194397, 0.8033333420753479, 0.8133333325386047, 0.8053333163261414, 0.8140000104904175, 0.8040000200271606]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 0, 0, 9, 2, 6, 2, 3, 8, 2, 3, 3, 2, 3, 8, 4, 8, 5, 8, 9, 6, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 31, 87, 30, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.776285707950592, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 5, 2, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.negative(tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9968395885963324, 1.3931608742978578, 1.046576062197919, 0.8925034271223733, 0.8079240811326169, 0.7661377737046926, 0.756201930128588, 0.7046856932541824, 0.7273601663740886, 0.6744456549818805, 0.6542246402246825, 0.6539239647633773, 0.6147008662556991, 0.6254619008608939], "accuracy": [0.3447364866733551, 0.5124818682670593, 0.6145819425582886, 0.6639809608459473, 0.6923788189888, 0.7088891863822937, 0.7121912837028503, 0.7304186820983887, 0.7248712182044983, 0.7366266250610352, 0.752212405204773, 0.7512878179550171, 0.765949010848999, 0.759609043598175], "val_loss": [1.5485901491982597, 0.7913585560662406, 0.7451597622462681, 0.6546526295798165, 0.6015188864299229, 0.591414315359933, 0.5282313993998936, 0.5205609117235456, 0.5006192752293178, 0.5365453617913383, 0.5352528095245361, 0.4898900645119803, 0.4927039997918265, 0.4781397410801479], "val_accuracy": [0.3636666536331177, 0.659333348274231, 0.6516666412353516, 0.6830000281333923, 0.7200000286102295, 0.7129999995231628, 0.7753333449363708, 0.7603333592414856, 0.7889999747276306, 0.7733333110809326, 0.7463333606719971, 0.7699999809265137, 0.7613333463668823, 0.7763333320617676]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 4, 7, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 5, 2, 1, 3, 3, 0, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [18, 9, 44]], "fitness": -0.6794285774230957, "mapping_values": [1, 2, 2, 1, 1, 0, 32, 32, 20, 12, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))))), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2998291857884055, 2.2962063858773902, 2.295393933142653, 2.289818197177811, 2.285265724278869, 2.282589334333735, 2.2799509148855313, 2.2745409409887425, 2.271329020622494, 2.2692531873647326, 2.263037135178749, 2.259607510906185, 2.256743117818554, 2.2528306582915296, 2.248777061043446, 2.2434652898730763, 2.238199419679895, 2.2356136161984077, 2.229187098917409, 2.2245441633775456, 2.2188593913944814, 2.2125562624829933, 2.211056816453522, 2.20396344039135, 2.196986470980147, 2.1907764790537114, 2.184378213445351, 2.177410515843287, 2.1696067889604933, 2.163841980260361, 2.154150689707897, 2.147318908488352, 2.1383279470829932, 2.129034775438058, 2.119967282550556, 2.111032330805615, 2.1016511269343794, 2.088490084476947, 2.074758881953225, 2.0659270712948588, 2.0555717966827687, 2.042820279939284, 2.0301363771113863, 2.018548357787464, 2.0039636458955057, 1.990243653028617, 1.9751263161250991, 1.958230111404039, 1.9424235726926997, 1.9263392492071858, 1.9102255487486104, 1.8944755272700913, 1.8756308002935471, 1.8637277190207553, 1.8427690732842816, 1.8275707306375026, 1.8028140798960979, 1.7911229998664517, 1.7720175434679892, 1.7555865035663585, 1.7349613015488894, 1.7216382483134827, 1.6963230368168662, 1.6766662244641817, 1.6609426576227417, 1.6428065244878494, 1.624265381090393, 1.606879168875607, 1.5790200952872027, 1.5693812834320602, 1.5500708225931963, 1.540210427325935, 1.522058475837889, 1.510126262702458, 1.4923464105334248, 1.4777768532739513, 1.4594147501053543, 1.443587398626675, 1.4257066303697072, 1.4228320918488166, 1.419202879167677, 1.389199301047395, 1.3898094086488948, 1.363298184631397, 1.3577181322069813, 1.3484731495356783, 1.333193629425058, 1.3248380913694757, 1.3082026704710865, 1.295641304101643, 1.2936632370101684, 1.2805062911576914, 1.2796244272041346, 1.2626338688893608, 1.2640341091874001, 1.2482060051203687, 1.2332757406734818, 1.214383921429875, 1.2276860969004582, 1.2137229561317615], "accuracy": [0.09708096832036972, 0.10685510188341141, 0.10685510188341141, 0.1200634017586708, 0.13551710546016693, 0.1450270712375641, 0.14898955821990967, 0.16100911796092987, 0.17144367098808289, 0.17870822548866272, 0.19178444147109985, 0.19838859140872955, 0.2082948088645935, 0.21516312658786774, 0.22374852001667023, 0.23774930834770203, 0.25359925627708435, 0.251750111579895, 0.2623167335987091, 0.2654867172241211, 0.2946770489215851, 0.29084664583206177, 0.29018622636795044, 0.3004887104034424, 0.30484744906425476, 0.3191123902797699, 0.32267865538597107, 0.328490287065506, 0.3357548415660858, 0.33866068720817566, 0.3469819128513336, 0.34526482224464417, 0.3603222966194153, 0.3590014576911926, 0.3619072735309601, 0.37722888588905334, 0.3843613862991333, 0.39189010858535767, 0.3899088501930237, 0.39941883087158203, 0.39928674697875977, 0.40509840846061707, 0.40562674403190613, 0.4147404432296753, 0.41606128215789795, 0.4251750111579895, 0.4208162724971771, 0.4212125241756439, 0.4283449947834015, 0.43428874015808105, 0.4373266398906708, 0.4415532946586609, 0.4497424364089966, 0.4461762011051178, 0.45489367842674255, 0.4563465714454651, 0.4583278298377991, 0.4559503495693207, 0.46189406514167786, 0.46651697158813477, 0.471800297498703, 0.47047945857048035, 0.4768194556236267, 0.4810461103916168, 0.4885748326778412, 0.49465063214302063, 0.4905560612678528, 0.5003302097320557, 0.5097081065177917, 0.511821448802948, 0.5081230998039246, 0.5116893649101257, 0.5173689126968384, 0.5130101442337036, 0.5266147255897522, 0.5241051316261292, 0.5345396995544434, 0.5400871634483337, 0.5391625761985779, 0.5321621894836426, 0.5374455451965332, 0.5466912984848022, 0.5400871634483337, 0.5536917448043823, 0.5507858991622925, 0.5587108731269836, 0.5576542019844055, 0.5604279637336731, 0.561352550983429, 0.5663716793060303, 0.5649187564849854, 0.5658433437347412, 0.5667679309844971, 0.573107898235321, 0.5742966532707214, 0.5721833109855652, 0.5848633050918579, 0.5888257622718811, 0.5801082849502563, 0.5871087312698364], "val_loss": [1.9675751413617815, 1.9642068317958288, 1.9608518736703056, 1.9575394221714564, 1.9541879381452287, 1.9508278710501534, 1.9474845613752092, 1.944103581564767, 1.94065523147583, 1.9371775218418665, 1.9335930688040597, 1.929926531655448, 1.9261845861162459, 1.9223778588431222, 1.9184163638523646, 1.9143353189740862, 1.9100934437343053, 1.9057230268205916, 1.9011378288269043, 1.8964098521641322, 1.8915016991751534, 1.8863610540117537, 1.8810528346470423, 1.8754757472446986, 1.8696955272129603, 1.8636225291660853, 1.8573149953569685, 1.850717612675258, 1.8438451630728585, 1.8366802079336983, 1.8291515622820174, 1.8212929453168596, 1.8130824225289481, 1.804527759552002, 1.7956160136631556, 1.7863117626735143, 1.7767015865870885, 1.7665834426879883, 1.7559258597237724, 1.7449375561305456, 1.7335918971470423, 1.7218469892229353, 1.7095319543566023, 1.6967509133475167, 1.683664083480835, 1.6700095449175154, 1.655884061540876, 1.6413812977927071, 1.6262574536459786, 1.6107994147709437, 1.5947750977107458, 1.5785993848528181, 1.5619447571890694, 1.5451319558279855, 1.5279406479426794, 1.51057801927839, 1.4927279608590263, 1.4748958519526891, 1.4569245747157507, 1.4387292521340507, 1.4203451701572962, 1.4021894250597273, 1.383866446358817, 1.3653647899627686, 1.3470466477530343, 1.3289837837219238, 1.3110359396253313, 1.2930911949702673, 1.275092431477138, 1.2577193805149622, 1.2405338627951485, 1.22384170123509, 1.2073213713509696, 1.191267456327166, 1.1756464072636195, 1.160278252192906, 1.145317213875907, 1.1306557995932442, 1.1163829735347204, 1.1026262555803572, 1.0895581586020333, 1.0764822278703963, 1.0641802379063197, 1.0516774654388428, 1.0398808206830705, 1.028644323348999, 1.0175202574048723, 1.006793464933123, 0.9963074411664691, 0.986133200781686, 0.9764288493565151, 0.9669539247240339, 0.9578816890716553, 0.9490381649562291, 0.9406616347176688, 0.9322647707802909, 0.9240508079528809, 0.9158355167933873, 0.9084035328456334, 0.9011554377419608], "val_accuracy": [0.057999998331069946, 0.08699999749660492, 0.12333333492279053, 0.1483333259820938, 0.18166667222976685, 0.2136666625738144, 0.24066667258739471, 0.26466667652130127, 0.2853333353996277, 0.30000001192092896, 0.31566667556762695, 0.33000001311302185, 0.34066668152809143, 0.35100001096725464, 0.35733333230018616, 0.36533331871032715, 0.3696666657924652, 0.3776666522026062, 0.38366666436195374, 0.3903333246707916, 0.39899998903274536, 0.40400001406669617, 0.40966665744781494, 0.4143333435058594, 0.41866666078567505, 0.42266666889190674, 0.4300000071525574, 0.43799999356269836, 0.4426666796207428, 0.4480000138282776, 0.4516666531562805, 0.45533332228660583, 0.46000000834465027, 0.4636666774749756, 0.4673333466053009, 0.46933332085609436, 0.4753333330154419, 0.47999998927116394, 0.48533332347869873, 0.4906666576862335, 0.49566665291786194, 0.500333309173584, 0.5043333172798157, 0.5076666474342346, 0.5120000243186951, 0.5183333158493042, 0.5210000276565552, 0.5223333239555359, 0.527999997138977, 0.5329999923706055, 0.5386666655540466, 0.5423333048820496, 0.546999990940094, 0.5503333210945129, 0.5533333420753479, 0.5566666722297668, 0.5600000023841858, 0.5619999766349792, 0.5646666884422302, 0.5686666369438171, 0.5720000267028809, 0.574999988079071, 0.5796666741371155, 0.5833333134651184, 0.5903333425521851, 0.593999981880188, 0.5973333120346069, 0.6000000238418579, 0.6019999980926514, 0.6039999723434448, 0.609666645526886, 0.6133333444595337, 0.6190000176429749, 0.6226666569709778, 0.6309999823570251, 0.6359999775886536, 0.637666642665863, 0.6433333158493042, 0.6446666717529297, 0.6486666798591614, 0.6503333449363708, 0.6536666750907898, 0.6543333530426025, 0.6576666831970215, 0.6610000133514404, 0.6623333096504211, 0.6620000004768372, 0.6650000214576721, 0.6679999828338623, 0.6700000166893005, 0.6706666946411133, 0.6726666688919067, 0.6733333468437195, 0.6740000247955322, 0.6753333210945129, 0.6759999990463257, 0.6766666769981384, 0.6783333420753479, 0.6796666383743286, 0.6816666722297668]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 7, 4, 9, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 4, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [84, 9, 44]], "fitness": -0.44114285707473755, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.305937841851493, 2.3186355199890682, 2.1590656251356886, 2.173977671093425, 2.0581129114972034, 2.3136710047076297, 2.3873956958615565, 2.3113291059203545, 2.304809515392146, 2.3038067060328746], "accuracy": [0.21304979920387268, 0.20921939611434937, 0.2712983787059784, 0.22454100847244263, 0.30379077792167664, 0.24858011305332184, 0.1912561058998108, 0.09694888442754745, 0.10170386731624603, 0.10077928751707077], "val_loss": [1.9778807503836495, 1.740849494934082, 1.9731114251273019, 1.5175155571528844, 1.4047990867069788, 1.9775007111685616, 1.9865072795322962, 1.974156379699707, 1.9739771570478166, 1.9737640108380998], "val_accuracy": [0.1106666699051857, 0.20999999344348907, 0.09933333098888397, 0.46133333444595337, 0.49533334374427795, 0.10833333432674408, 0.09866666793823242, 0.09966666996479034, 0.09799999743700027, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 1, 7, 6, 3, 6, 3, 5, 9, 8, 3, 2, 2, 3, 2, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 2, 5, 3, 1, 3, 3, 3, 3, 0, 1, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.43542855978012085, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.6598849988112816, 2.296283308698548, 2.462089463153205, 2.3044307056183135, 2.3029582578240606, 2.303072535807446, 2.302760792099773], "accuracy": [0.20961563289165497, 0.12098798155784607, 0.1530841439962387, 0.09945846349000931, 0.09708096832036972, 0.09549596905708313, 0.10117553919553757], "val_loss": [1.9748761313302177, 1.751715796334403, 1.9754643440246582, 1.9736736842564173, 1.9735799516950334, 1.973557472229004, 1.973588262285505], "val_accuracy": [0.10400000214576721, 0.5289999842643738, 0.09966666996479034, 0.10400000214576721, 0.10100000351667404, 0.10100000351667404, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 7, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [91, 9, 44]], "fitness": -0.2720000147819519, "mapping_values": [1, 2, 2, 1, 1, 0, 32, 32, 21, 11, 4, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), grad), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(grad, tf.math.add(grad, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.617163954787581, 2.508621232416085, 220630529.89341062, NaN, NaN, NaN, NaN], "accuracy": [0.17170783877372742, 0.15691454708576202, 0.10962884873151779, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.009875842503139, 1.8868912969316756, 1.1875716051499877e+25, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.20366667211055756, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 7, 4, 7, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07357019931077957, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 0, 9, 2, 6, 2, 3, 8, 2, 3, 3, 2, 3, 8, 4, 8, 5, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [31, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302849619820952, 2.3030603279637276, 2.3029701385389716, 2.302949265844204, 2.302803702909303, 2.303004454187099], "accuracy": [0.09325055778026581, 0.09074098616838455, 0.09259014576673508, 0.09840179979801178, 0.09615638852119446, 0.09219389408826828], "val_loss": [1.973609106881278, 1.9735990251813615, 1.9736772264753069, 1.97364718573434, 1.9736696652003698, 1.9736710275922502], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.09799999743700027, 0.1003333330154419, 0.1003333330154419, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 7, 4, 9, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 2, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 54, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.964937671498048e+22, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.057852331548929214, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 0, 6, 3, 6, 8, 5, 9, 8, 3, 6, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 49, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [1, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 33, 33, 23, 10, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), grad)), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.sqrt(alpha), tf.math.add(beta, tf.math.sqrt(grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(grad)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.9644529107202575e+22, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.057852331548929214, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 7, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07357019931077957, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 7, 6, 3, 6, 4, 5, 9, 8, 3, 4, 2, 5, 8, 0, 8, 2, 9, 6, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 2, 5, 3, 1, 3, 3, 3, 0, 3, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 15, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [9, 1, 0, 3, 1, 5, 5, 0, 7, 5], [3, 3, 0, 3, 1, 1], [67, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 37, 37, 24, 13, 4, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.square(grad)), grad), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.pow(tf.math.add(tf.math.square(tf.math.sqrt(tf.math.negative(grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302562248972917, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 7, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 5, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [0, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 23, 23, 13, 10, 2, 1, 0, 0, 0, 0, 3, 1, 2, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, alpha)), tf.math.add(beta, tf.math.square(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(grad, tf.math.add(beta, grad))))))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.300329347816299, 2.302287282850512, 2.302584009273823, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09760929644107819, 0.09959053993225098, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973043509892055, 1.9736442565917969, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09233333170413971, 0.10000000149011612, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 7, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 54, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 35, 35, 23, 12, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), beta)), grad), tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.964426009757813e+22, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.057852331548929214, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 9, 4, 9, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 0, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 54, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06353189796209335, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [7, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68, 30, 32], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 7, 6, 3, 6, 6, 5, 9, 8, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [30, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 3, 32, 32, 21, 11, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), grad), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), grad), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(grad, tf.math.add(grad, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 7, 6, 3, 6, 6, 5, 9, 4, 3, 2, 2, 3, 8, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 1, 5, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 17, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09325055778026581, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 4, 7, 6, 3, 6, 6, 5, 9, 8, 3, 2, 4, 3, 0, 8, 8, 2, 9, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 3, 3, 3, 3, 0, 1, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 36, 3, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.06514285504817963, "mapping_values": [1, 2, 2, 1, 1, 0, 32, 32, 21, 11, 4, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), grad), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(alpha))), tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.pow(grad, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.8777426223492877, 22.183497801212475, 2.6823537879380033, 2.9786176244423075, 3.392927977765131, 3.9306407015730818, 4.210524541511984], "accuracy": [0.03143574297428131, 0.05890899524092674, 0.09945846349000931, 0.09787346422672272, 0.10077928751707077, 0.1010434553027153, 0.09932637959718704], "val_loss": [2.6630305562700545, 2.1599514143807546, 2.5025766917637418, 2.711756569998605, 3.166043077196394, 3.5025858197893416, 3.6438356127057756], "val_accuracy": [0.006666666828095913, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 0, 9, 2, 6, 2, 3, 8, 2, 3, 3, 2, 3, 8, 4, 5, 5, 6, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 1, 1, 3, 3, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 87, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [1, 4, 0, 3], [1, 2], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 17, 17, 10, 7, 1, 36, 36, 21, 15, 3, 1, 0, 0, 0, 0, 13, 8, 5, 2], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(tf.math.multiply(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))))))))))), tf.math.add(beta, alpha)))))), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.negative(sigma))), alpha))", "other_info": {"loss": [2.3013500960401303, 2.3014077761736624, 2.3042861840917355, 2.3021159648517373, 2.30135071984592, 2.302306878458098], "accuracy": [0.09457138925790787, 0.09377889335155487, 0.08611807972192764, 0.08796724677085876, 0.09166556596755981, 0.0940430611371994], "val_loss": [1.9709820066179549, 1.9709820747375488, 1.9709824153355189, 1.970982551574707, 1.970982619694301, 1.9709820747375488], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]