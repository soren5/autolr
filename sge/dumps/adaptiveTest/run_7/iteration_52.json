[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [7, 2, 9, 3, 5, 2, 3, 4, 6, 6, 2, 1, 9, 3, 3, 8, 9, 3, 2, 2, 1, 9, 5, 4, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 3, 5, 2, 3, 2, 0, 1, 1, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8140000104904175, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9566373710288443, 1.5311745952826135, 1.0606412677606807, 0.8925975626958218, 0.865484551203454, 0.7692064677073955, 0.735750610676298, 0.7103660999744512, 0.7199314391812974, 0.6782234620345724, 0.6486465868192846, 0.6439834559251919, 0.6473481954915444, 0.6078107587933115, 0.6235969696834087, 0.5726056712147046, 0.5768742425299087, 0.571010739481161, 0.5749003589192654, 0.5489883658404457, 0.5322520445445273, 0.5450543044911179, 0.5151132236319352, 0.5152692500752323, 0.5033944205656153, 0.5235977540902962, 0.5199702705421846, 0.4841947175681457, 0.48706483267805656, 0.46562852951687056, 0.48211577833446734, 0.4657302015902517, 0.4522952060256384, 0.4862791227272489, 0.45622368031142646, 0.4368920131145987], "accuracy": [0.3416985869407654, 0.4776119291782379, 0.620261549949646, 0.666358470916748, 0.6737551093101501, 0.7149649858474731, 0.7263241410255432, 0.7294940948486328, 0.7215691208839417, 0.7437590956687927, 0.7518161535263062, 0.7535332441329956, 0.7506273984909058, 0.7643640041351318, 0.7592127919197083, 0.7824593782424927, 0.7740060687065125, 0.7862898111343384, 0.7771760821342468, 0.7961959838867188, 0.8047813773155212, 0.8012151718139648, 0.8055738806724548, 0.8105930685997009, 0.8156121969223022, 0.809140145778656, 0.8030643463134766, 0.8241975903511047, 0.8222163319587708, 0.8284242749214172, 0.8197067975997925, 0.8322546482086182, 0.8302733898162842, 0.8164047002792358, 0.8327829837799072, 0.837537944316864], "val_loss": [1.6089551448822021, 0.8386099679129464, 0.69422789982387, 0.6250498635428292, 0.5949474743434361, 0.5669095516204834, 0.6031035355159214, 0.5431869370596749, 0.5410842044012887, 0.5056919710976737, 0.4989797728402274, 0.49947229453495573, 0.4969684226172311, 0.47021416255405973, 0.4493504762649536, 0.4370047450065613, 0.44991213934762136, 0.4675205775669643, 0.4525818143572126, 0.41347882577351164, 0.41201770305633545, 0.3997072236878531, 0.3970986604690552, 0.396419312272753, 0.43847566843032837, 0.40343031712940763, 0.3832700678280422, 0.4023998805454799, 0.3864201818193708, 0.39695578813552856, 0.3597807969365801, 0.3631764905793326, 0.3872958592006138, 0.38089284726551603, 0.3603328125817435, 0.40145154510225567], "val_accuracy": [0.29899999499320984, 0.6553333401679993, 0.6899999976158142, 0.7110000252723694, 0.7379999756813049, 0.7483333349227905, 0.7183333039283752, 0.7580000162124634, 0.7639999985694885, 0.7749999761581421, 0.7736666798591614, 0.750333309173584, 0.768666684627533, 0.7793333530426025, 0.8040000200271606, 0.8186666369438171, 0.7956666946411133, 0.784333348274231, 0.7836666703224182, 0.8263333439826965, 0.8223333358764648, 0.8296666741371155, 0.8343333601951599, 0.8336666822433472, 0.8063333630561829, 0.8236666917800903, 0.8383333086967468, 0.8180000185966492, 0.8299999833106995, 0.8166666626930237, 0.8506666421890259, 0.8426666855812073, 0.8296666741371155, 0.8316666483879089, 0.8460000157356262, 0.8146666884422302]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [7, 2, 1, 7, 8, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 2, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 4, 0, 0, 2, 3, 3, 3, 0, 3, 2, 1, 3, 3, 4, 2, 2, 3, 3, 0, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 8], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 13, 44]], "fitness": -0.8131428360939026, "mapping_values": [1, 2, 2, 1, 1, 0, 39, 39, 20, 19, 3, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, grad)))))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha))))))))), tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9584121208590224, 1.5385580891867545, 1.0690182042143932, 0.9142495150169944, 0.822249703584582, 0.815986782237602, 0.7568000127469009, 0.7239991883953817, 0.6939574503753762, 0.6546779082609032, 0.6612124492573842, 0.656469118554185, 0.6379506057200888, 0.606068182308062, 0.5979206504020016, 0.574846017488226, 0.5794751280413138, 0.5773030949967838, 0.5641091512556735, 0.5494803548835414, 0.539856352424735, 0.5323665475076956, 0.5089766234927063, 0.538821882736949, 0.5046114341701893, 0.5197049728505537, 0.5132876764931273, 0.4828208357650748, 0.4889504233048718, 0.4619818781234994, 0.4829304270094979, 0.4676727278436321, 0.44516757875385693, 0.48218853135370954, 0.45963780395563614, 0.42745907785177323, 0.44847769393440345, 0.43939005504698725, 0.4197716792623963, 0.42657756525543405, 0.42974113335919306, 0.4249907206582072, 0.414476523211509, 0.40308470027148524, 0.40653106352955737, 0.39330603559617716, 0.4004940607953679, 0.38701173334451733, 0.3894083233376252, 0.37903019425308765, 0.3905012958738798, 0.38060456225034694, 0.38201877633814546, 0.3607430521444543, 0.3584273609274556, 0.34557763048292794, 0.3615024411297273, 0.3551026780796467, 0.35232234614447455, 0.34973272930409033, 0.34834683594875615], "accuracy": [0.3407739996910095, 0.476951539516449, 0.6180161237716675, 0.6693964004516602, 0.6944921612739563, 0.6882842183113098, 0.7140403985977173, 0.7268524765968323, 0.7364945411682129, 0.7528728246688843, 0.7449478507041931, 0.7498348951339722, 0.7574957013130188, 0.7691190242767334, 0.7724210619926453, 0.7819310426712036, 0.7779685854911804, 0.7816668748855591, 0.7861577272415161, 0.7938185334205627, 0.7984414100646973, 0.8038568496704102, 0.8115176558494568, 0.7956677079200745, 0.813498854637146, 0.8128384351730347, 0.8042530417442322, 0.828292191028595, 0.8232730031013489, 0.8284242749214172, 0.8210275769233704, 0.8290846943855286, 0.8367455005645752, 0.8186501264572144, 0.8281601071357727, 0.8450667262077332, 0.8278959393501282, 0.8308017253875732, 0.8454629778862, 0.8437458872795105, 0.8399154543876648, 0.8424250483512878, 0.8490291833877563, 0.8506141901016235, 0.8473120927810669, 0.8574824929237366, 0.8525954484939575, 0.8568220734596252, 0.8599920868873596, 0.8639545440673828, 0.8515387773513794, 0.8588033318519592, 0.8594637513160706, 0.8647470474243164, 0.8697662353515625, 0.872407853603363, 0.8689737319946289, 0.8688416481018066, 0.868049144744873, 0.8726720213890076, 0.8751816153526306], "val_loss": [1.6244073254721505, 0.8953825746263776, 0.8197391714368548, 0.69869978087289, 0.6071827411651611, 0.5866749286651611, 0.5509058066776821, 0.5329082182475499, 0.5085913283484322, 0.5262046371187482, 0.5153745583125523, 0.5207832711083549, 0.5075388465608869, 0.4619521754128592, 0.45337886469704763, 0.46360032899039133, 0.4490628923688616, 0.4573054313659668, 0.4502389260700771, 0.41262640271868023, 0.41148086956569124, 0.40528498377118793, 0.43911142008645193, 0.39049605812345234, 0.4264873266220093, 0.40441382782799856, 0.37988288913454327, 0.4018947652408055, 0.38365858793258667, 0.3897244249071394, 0.36566396270479473, 0.3635030559131077, 0.37068895782743183, 0.3886515072413853, 0.35976033551352365, 0.4084599954741342, 0.34835702180862427, 0.34563503095081877, 0.3449647086007254, 0.34934710604803904, 0.36495267493384226, 0.3426711218697684, 0.3335643836430141, 0.3380942940711975, 0.36240164722715107, 0.3421127029827663, 0.32868157965796335, 0.3322440130370004, 0.33150265898023334, 0.32006669895989553, 0.3355723278863089, 0.3469885843140738, 0.31888675689697266, 0.3178543107850211, 0.33949925218309673, 0.31150537729263306, 0.3211892672947475, 0.3162611126899719, 0.3264029962675912, 0.3450573001589094, 0.3192789213997977], "val_accuracy": [0.2893333435058594, 0.6570000052452087, 0.6690000295639038, 0.6890000104904175, 0.7256666421890259, 0.7326666712760925, 0.7369999885559082, 0.7636666893959045, 0.7743333578109741, 0.7596666812896729, 0.765999972820282, 0.7286666631698608, 0.7616666555404663, 0.784333348274231, 0.8029999732971191, 0.7986666560173035, 0.7963333129882812, 0.7860000133514404, 0.7893333435058594, 0.8230000138282776, 0.8203333616256714, 0.8190000057220459, 0.7950000166893005, 0.840666651725769, 0.8159999847412109, 0.8263333439826965, 0.8413333296775818, 0.8259999752044678, 0.8336666822433472, 0.8253333568572998, 0.846666693687439, 0.8410000205039978, 0.8393333554267883, 0.8259999752044678, 0.8483333587646484, 0.8076666593551636, 0.8539999723434448, 0.8519999980926514, 0.8553333282470703, 0.8523333072662354, 0.8416666388511658, 0.8533333539962769, 0.8560000061988831, 0.8610000014305115, 0.843999981880188, 0.8566666841506958, 0.8640000224113464, 0.8603333234786987, 0.8613333106040955, 0.8640000224113464, 0.8656666874885559, 0.8503333330154419, 0.8706666827201843, 0.8676666617393494, 0.8546666502952576, 0.8740000128746033, 0.8679999709129333, 0.8683333396911621, 0.8600000143051147, 0.8553333282470703, 0.8643333315849304]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 2, 1, 8, 8, 5, 6, 6, 3, 6, 5, 2, 0, 3, 9, 3, 2, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 5, 3, 3, 4, 0, 0, 3, 3, 3, 3, 3, 3, 2, 1, 0, 3, 4, 2, 2, 3, 3, 0, 3, 0, 0], [74, 40, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 8], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8122857213020325, "mapping_values": [1, 2, 2, 1, 1, 0, 15, 15, 9, 6, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9567348168998773, 1.5327261965020678, 1.044613703264615, 0.9282733840854838, 0.8500144357584282, 0.7649686805891118, 0.7445348770532468, 0.7021226585265621, 0.7011691642837313, 0.6887869994244508, 0.6587318705844841, 0.6472873772297553, 0.637456998179822, 0.6044353192760455, 0.6143523288393505, 0.5688968309873068, 0.5738976524411853, 0.5720903863366474, 0.5711040544456353, 0.5499336445068623, 0.5408343279823068, 0.5430535662286018, 0.5099122473954556, 0.5176386190695202, 0.5070288364582719, 0.5265490187315058, 0.517110036801448, 0.4827977826905178, 0.490650981440284, 0.46350994576647014, 0.48388035319280065, 0.46241181973909673, 0.447693842178669, 0.4885297205666698, 0.45453462550637275, 0.43540439532023884], "accuracy": [0.34103816747665405, 0.4765552878379822, 0.6238277554512024, 0.6538106203079224, 0.6767930388450623, 0.7177387475967407, 0.7207766771316528, 0.735569953918457, 0.7314753532409668, 0.739928662776947, 0.7429665923118591, 0.7549861073493958, 0.7535332441329956, 0.7688548564910889, 0.7651565074920654, 0.7841764688491821, 0.7763835787773132, 0.7874785661697388, 0.7860256433486938, 0.793422281742096, 0.7989697456359863, 0.800290584564209, 0.8075551390647888, 0.8087438941001892, 0.8156121969223022, 0.8084797263145447, 0.8030643463134766, 0.8224804997444153, 0.821820080280304, 0.8277638554573059, 0.8214238286018372, 0.8335754871368408, 0.8330471515655518, 0.8183859586715698, 0.832650899887085, 0.8400475382804871], "val_loss": [1.6125779833112444, 0.8229260274342128, 0.8333767482212612, 0.6510816812515259, 0.6007852554321289, 0.5723943540028164, 0.5730244943073818, 0.5281079666955131, 0.5541093179157802, 0.521205084664481, 0.4931901182447161, 0.5100941487721035, 0.49809132303510395, 0.46475311688014437, 0.4481164216995239, 0.4447920322418213, 0.4437692676271711, 0.480745792388916, 0.4605285440172468, 0.41260589020592825, 0.4087728602545602, 0.4000457099505833, 0.404725398336138, 0.4005956309182303, 0.4754752090999058, 0.40118078674588886, 0.37932419776916504, 0.3943930353437151, 0.390336275100708, 0.38826845373426166, 0.3612810628754752, 0.36362510068076, 0.37313285044261385, 0.3906171832765852, 0.3599254659243992, 0.3970913290977478], "val_accuracy": [0.2983333468437195, 0.6596666574478149, 0.6633333563804626, 0.7099999785423279, 0.7329999804496765, 0.7486666440963745, 0.722000002861023, 0.7646666765213013, 0.7426666617393494, 0.7696666717529297, 0.7816666960716248, 0.7383333444595337, 0.7706666588783264, 0.7803333401679993, 0.8059999942779541, 0.8096666932106018, 0.7990000247955322, 0.7766666412353516, 0.781333327293396, 0.8246666789054871, 0.8270000219345093, 0.8266666531562805, 0.82833331823349, 0.8309999704360962, 0.7883333563804626, 0.828000009059906, 0.8389999866485596, 0.8303333520889282, 0.8270000219345093, 0.8233333230018616, 0.8486666679382324, 0.8416666388511658, 0.8383333086967468, 0.8240000009536743, 0.8483333587646484, 0.8153333067893982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 5, 1, 1, 9, 2, 5, 0, 1, 3, 2, 2, 2, 1, 3, 2, 8, 2, 2, 0, 3, 2, 8, 6, 5, 1, 1, 2, 2, 7, 2, 1, 8, 2, 3, 8, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [3, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8088571429252625, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 12, 7, 5, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha)))))", "other_info": {"loss": [1.9568739522796155, 1.5322046859971976, 1.028208118522046, 0.9400981122696987, 0.8204051990393146, 0.7977782367888443, 0.7525955333040217, 0.7187829589831154, 0.6989100350522409, 0.6706295808340029, 0.6537954992212561, 0.6434307625548494, 0.6430171566034084, 0.6053440130350534, 0.6199116828167333, 0.5824201756999982, 0.5789943604248232, 0.5722477038885073, 0.5633046415188782, 0.5493566043671994, 0.5338263201274263, 0.5343241890140292, 0.5081538054543464, 0.5286515502015818, 0.5100607667868683, 0.5235736292461284, 0.5181995975957051, 0.4820087578483718, 0.487652288188142, 0.46543816418900325, 0.4943149472350505, 0.46425254786050774, 0.4477365817360481, 0.48259335089872984, 0.4546963139697309, 0.43619311880898465], "accuracy": [0.3415665030479431, 0.4761590361595154, 0.6296393871307373, 0.6561880707740784, 0.6950204968452454, 0.6971337795257568, 0.7201162576675415, 0.7342491149902344, 0.7331924438476562, 0.7485140562057495, 0.7514199018478394, 0.7540615797042847, 0.7535332441329956, 0.770439863204956, 0.7621186375617981, 0.7802139520645142, 0.7774402499198914, 0.7874785661697388, 0.7876105904579163, 0.7926297783851624, 0.8057059645652771, 0.8021397590637207, 0.8113855719566345, 0.8033285140991211, 0.8103289008140564, 0.8062343001365662, 0.8025360107421875, 0.8252542614936829, 0.8252542614936829, 0.8271034359931946, 0.8142913579940796, 0.8342359066009521, 0.8355567455291748, 0.8189142942428589, 0.8300092220306396, 0.8379341959953308], "val_loss": [1.6154088633401054, 0.809443439756121, 0.7606343371527535, 0.6540680783135551, 0.5620942456381661, 0.698076776095799, 0.5716638224465507, 0.5238878897258213, 0.5103886297770909, 0.5037631818226406, 0.49071342604500906, 0.495685338973999, 0.48335468769073486, 0.46448004245758057, 0.4517796209880284, 0.4399665083203997, 0.4573218311582293, 0.4636146000453404, 0.4472284998212542, 0.4151721511568342, 0.40833414452416555, 0.40261740343911306, 0.4463895048413958, 0.40195523841040476, 0.46644062655312674, 0.39927426406315397, 0.38288632461002897, 0.39593894141060965, 0.3837440184184483, 0.3882035272462027, 0.36373101813452585, 0.3664134740829468, 0.37540920291628155, 0.3730040618351528, 0.3647675854819162, 0.3929109573364258], "val_accuracy": [0.29600000381469727, 0.6663333177566528, 0.6956666707992554, 0.7103333473205566, 0.753000020980835, 0.6953333616256714, 0.7306666374206543, 0.7693333625793457, 0.7730000019073486, 0.7856666445732117, 0.7863333225250244, 0.7549999952316284, 0.7820000052452087, 0.7870000004768372, 0.8063333630561829, 0.8136666417121887, 0.7860000133514404, 0.7839999794960022, 0.7896666526794434, 0.8226666450500488, 0.8259999752044678, 0.8209999799728394, 0.8013333082199097, 0.8263333439826965, 0.7913333177566528, 0.8286666870117188, 0.8416666388511658, 0.8273333311080933, 0.8326666951179504, 0.8303333520889282, 0.8479999899864197, 0.8399999737739563, 0.8366666436195374, 0.8343333601951599, 0.8413333296775818, 0.8216666579246521]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 9, 6, 3, 3, 3, 2, 6, 0, 9, 2, 5, 8, 5, 6, 1, 2, 3, 7, 2, 9, 5, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 0, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8088571429252625, "mapping_values": [1, 2, 2, 1, 1, 0, 23, 23, 13, 10, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), grad), tf.math.add(beta, grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), beta), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9566331627252096, 1.530836945338382, 1.0604748918380027, 0.9077195122162931, 0.8450109799776442, 0.770044123822546, 0.7434020953848535, 0.712512378411727, 0.7128565775373467, 0.6655950627826414, 0.6407973839228636, 0.6462909503619841, 0.6423563796688836, 0.6075520865228498, 0.5963673932976522, 0.5760258616410415, 0.586944244801014, 0.5751061867398514, 0.5555201415781962, 0.5591641469260626, 0.5344110999865035, 0.545165952847634, 0.5107495975910067, 0.5236772687254706, 0.4999637681385152, 0.520984941162784, 0.5133052446216781, 0.4808325704731851, 0.4933732184145382, 0.46416879427305474, 0.4855721346092199, 0.46543244248163335, 0.44688250871775975, 0.4850488113232765, 0.454257669489476, 0.43296923536303933], "accuracy": [0.3415665030479431, 0.4776119291782379, 0.6210539937019348, 0.6593580842018127, 0.6794346570968628, 0.7152291536331177, 0.720380425453186, 0.728701651096344, 0.7263241410255432, 0.750231146812439, 0.754589855670929, 0.7515519857406616, 0.7506273984909058, 0.7677981853485107, 0.7718927264213562, 0.7827235460281372, 0.7749306559562683, 0.7821952104568481, 0.793422281742096, 0.7862898111343384, 0.8030643463134766, 0.8012151718139648, 0.8113855719566345, 0.8045172095298767, 0.8144234418869019, 0.8112534880638123, 0.8059701323509216, 0.8281601071357727, 0.8202351331710815, 0.8293488025665283, 0.8215559124946594, 0.8317263126373291, 0.8329150676727295, 0.819442629814148, 0.8342359066009521, 0.8405758738517761], "val_loss": [1.609196594783238, 0.8573283978870937, 0.7330671548843384, 0.6235591343470982, 0.5859006302697318, 0.5558318240301949, 0.5619191782815116, 0.5583803824016026, 0.5296794516699654, 0.5299460547310966, 0.4838693993432181, 0.5189366851534162, 0.5148013148988996, 0.46809111322675434, 0.45352074078151156, 0.5201576266969953, 0.44436447960989817, 0.4405107242720468, 0.4320919258253915, 0.4090261459350586, 0.4080092992101397, 0.3969079426356724, 0.4087674021720886, 0.3948126861027309, 0.44752352578299387, 0.40183241026742117, 0.3787981356893267, 0.40179154702595304, 0.3887464148657663, 0.38801906790052143, 0.3630552462169102, 0.35944786242076326, 0.3815141660826547, 0.37574563707624165, 0.3617620723588126, 0.40086896078927176], "val_accuracy": [0.29899999499320984, 0.6556666493415833, 0.6850000023841858, 0.7149999737739563, 0.7300000190734863, 0.750333309173584, 0.7333333492279053, 0.746999979019165, 0.7716666460037231, 0.7493333220481873, 0.7820000052452087, 0.7306666374206543, 0.7540000081062317, 0.7733333110809326, 0.8019999861717224, 0.7476666569709778, 0.800000011920929, 0.8046666383743286, 0.800000011920929, 0.8276666402816772, 0.8286666870117188, 0.828000009059906, 0.8206666707992554, 0.8349999785423279, 0.8080000281333923, 0.8273333311080933, 0.8420000076293945, 0.8236666917800903, 0.8259999752044678, 0.8240000009536743, 0.8489999771118164, 0.8423333168029785, 0.8336666822433472, 0.8349999785423279, 0.8476666808128357, 0.8119999766349792]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.806857168674469, "mapping_values": [1, 2, 2, 1, 1, 0, 40, 40, 22, 18, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.multiply(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta))))))))))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9582119532044633, 1.5370689650977591, 1.0290478334419322, 0.94280421727558, 0.8205803735239505, 0.7866879482594274, 0.757552000352373, 0.7061243145347129, 0.7137037725134328, 0.6586693598767156, 0.6409070537846401, 0.6733989717071995, 0.6492885068234137, 0.604936443449342, 0.632513325849875, 0.5830851874536039, 0.5619441720992504, 0.5804110296398279, 0.5570460236414218, 0.5516323078231348, 0.541339389352971, 0.5499852673567486, 0.5108110391074924, 0.5185085849487361, 0.5086766848427476, 0.525365775625987, 0.5174947428492318, 0.48849793059746227, 0.4903325542852847, 0.4689848796684571, 0.48175156461312363, 0.46911545753431766, 0.4463105825755291, 0.4816672387470769, 0.45615151514309177, 0.43365819870898153, 0.44629435151669766, 0.43954003860591156, 0.42411884106523434, 0.4260013360924268, 0.4256058529761363, 0.42294275777183427, 0.4192498387315443, 0.4051971712116835, 0.4111490223535599, 0.3936525110311323, 0.40662653403133525, 0.3894194208863956, 0.39555496983146465, 0.3817858043017404, 0.38070155241076564, 0.3863653167009574, 0.3811914834364011, 0.36058272382586687, 0.35486415051796716, 0.3464421967174619, 0.36708772276937685, 0.3555745595615648, 0.349405176021388, 0.3523398823096311, 0.3471600907967784], "accuracy": [0.34103816747665405, 0.47589486837387085, 0.627129852771759, 0.6491876840591431, 0.6947563290596008, 0.6997754573822021, 0.713908314704895, 0.7314753532409668, 0.7317395210266113, 0.7477215528488159, 0.7537974119186401, 0.7421740889549255, 0.7478536367416382, 0.767930269241333, 0.7568352818489075, 0.7771760821342468, 0.7858935594558716, 0.7841764688491821, 0.789459764957428, 0.7927618622779846, 0.7989697456359863, 0.798309326171875, 0.8124422430992126, 0.8076872229576111, 0.8123101592063904, 0.8068947196006775, 0.8050455451011658, 0.8226125836372375, 0.8230088353157043, 0.8249900937080383, 0.8203672170639038, 0.8300092220306396, 0.8350284099578857, 0.8193105459213257, 0.8317263126373291, 0.8397833704948425, 0.829216718673706, 0.8290846943855286, 0.8428213000297546, 0.8407079577445984, 0.8405758738517761, 0.8449346423149109, 0.8474441766738892, 0.8470479249954224, 0.8451988101005554, 0.8561616539955139, 0.8495575189590454, 0.8544445633888245, 0.8602562546730042, 0.8632941246032715, 0.8565579056739807, 0.8593316674232483, 0.8598600029945374, 0.8681812286376953, 0.8717474341392517, 0.8746532797813416, 0.8647470474243164, 0.8684453964233398, 0.8705587387084961, 0.8697662353515625, 0.8735966086387634], "val_loss": [1.6295297827039446, 0.8103088481085641, 0.737852658544268, 0.6409337520599365, 0.5686923095158168, 0.6128162145614624, 0.568312440599714, 0.5396194458007812, 0.51104165826525, 0.5190208980015346, 0.5260251079286847, 0.5189600672040667, 0.500261800629752, 0.46869305201939176, 0.4491096905299595, 0.4451232637677874, 0.45509871414729525, 0.4512168679918562, 0.43518318448747906, 0.42859002522059847, 0.4247876490865435, 0.40461911473955425, 0.4162915859903608, 0.40013099568230764, 0.4718447412763323, 0.40011254378727507, 0.3812697189194815, 0.40743565559387207, 0.39168719734464374, 0.3905134541647775, 0.3640766314097813, 0.36520091124943327, 0.3796748178345816, 0.38342190640313284, 0.3617738400186811, 0.38715881960732595, 0.3538351910454886, 0.3496253660746983, 0.34375414678028654, 0.35018002135413034, 0.3626353144645691, 0.3456079959869385, 0.3349768945149013, 0.3420499988964626, 0.35257294348308016, 0.3453352962221418, 0.33242911100387573, 0.33531475918633596, 0.3349276099886213, 0.3193475604057312, 0.3481405888284956, 0.3440764716693333, 0.32076116119112286, 0.3177671347345625, 0.3349803260394505, 0.3194254551615034, 0.318583003112248, 0.3140667591776167, 0.325065016746521, 0.34028635706220356, 0.321339019707271], "val_accuracy": [0.28833332657814026, 0.6690000295639038, 0.6973333358764648, 0.7113333344459534, 0.7480000257492065, 0.7226666808128357, 0.7253333330154419, 0.7583333253860474, 0.7763333320617676, 0.7726666927337646, 0.7606666684150696, 0.7246666550636292, 0.7706666588783264, 0.7796666622161865, 0.8036666512489319, 0.8013333082199097, 0.7873333096504211, 0.7896666526794434, 0.8053333163261414, 0.8103333115577698, 0.8090000152587891, 0.8209999799728394, 0.8136666417121887, 0.8289999961853027, 0.7919999957084656, 0.8270000219345093, 0.8399999737739563, 0.8199999928474426, 0.8256666660308838, 0.8236666917800903, 0.8479999899864197, 0.8399999737739563, 0.8323333263397217, 0.8299999833106995, 0.8483333587646484, 0.8296666741371155, 0.8476666808128357, 0.8479999899864197, 0.8539999723434448, 0.8526666760444641, 0.8443333506584167, 0.8533333539962769, 0.8553333282470703, 0.8569999933242798, 0.8496666550636292, 0.8516666889190674, 0.8603333234786987, 0.856333315372467, 0.859000027179718, 0.8673333525657654, 0.8553333282470703, 0.8533333539962769, 0.8676666617393494, 0.8673333525657654, 0.8586666584014893, 0.871999979019165, 0.8700000047683716, 0.8683333396911621, 0.8569999933242798, 0.8560000061988831, 0.8600000143051147]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [7, 2, 1, 1, 8, 5, 1, 6, 6, 6, 2, 3, 2, 3, 2, 2, 3, 6, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 0, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 30, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 6, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8062857389450073, "mapping_values": [1, 2, 2, 1, 1, 0, 38, 38, 21, 17, 3, 1, 0, 0, 0, 0, 13, 7, 6, 2], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))))), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.add(tf.math.add(beta, grad), beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(grad))))))), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha)), alpha)))", "other_info": {"loss": [1.9568754823027412, 1.5301097482186992, 1.0397342932679319, 0.91910871410288, 0.8304342676730062, 0.8091889184385069, 0.7495023262908572, 0.6928269251572883, 0.7148213457233005, 0.6596320999485863, 0.667973660781887, 0.6343679348979376, 0.649661761296345, 0.5992577338121067, 0.6194302166819872, 0.5739833430969294, 0.5716820594074389, 0.5730580096751188, 0.5694974990505757, 0.5449846760314359, 0.5314429082599346, 0.5452347528649485, 0.5122706106609405, 0.5193000406148868, 0.5135521754581127, 0.5244238303636972, 0.5082110513698912, 0.4880848007037765, 0.4911566585510981, 0.47045584662857154, 0.48212917476770445, 0.4647673200842979, 0.4453439993070117, 0.492874154537865, 0.4523996606620705, 0.43163351861634797, 0.4503011794697103, 0.4388269853629708, 0.4152767908272411, 0.4265203352625407, 0.4244874017648945, 0.423434209979489, 0.41327297092350074, 0.4015283869982175, 0.41425032360426833, 0.3926234321469219, 0.40107945478461626, 0.38688493845658356, 0.3887843698865434, 0.3790670005306198, 0.3848007133789287, 0.38533471618991694, 0.3798252698720454, 0.3595377161573378, 0.35643891252310617, 0.34950930369434074, 0.3672262155549905, 0.35471589776503176], "accuracy": [0.3416985869407654, 0.476951539516449, 0.6279223561286926, 0.6618676781654358, 0.6903975605964661, 0.6952846646308899, 0.720380425453186, 0.7442874312400818, 0.7284374833106995, 0.7506273984909058, 0.7395324110984802, 0.7598732113838196, 0.750231146812439, 0.7689869403839111, 0.7638356685638428, 0.7828556299209595, 0.7824593782424927, 0.7881389260292053, 0.7827235460281372, 0.7965922355651855, 0.8012151718139648, 0.7989697456359863, 0.8107251524925232, 0.8061022162437439, 0.8112534880638123, 0.8055738806724548, 0.8082155585289001, 0.822348415851593, 0.8211596608161926, 0.8234050869941711, 0.8198388814926147, 0.8318583965301514, 0.833179235458374, 0.81548011302948, 0.8323867321014404, 0.842028796672821, 0.8293488025665283, 0.8330471515655518, 0.8490291833877563, 0.8391229510307312, 0.8422929644584656, 0.8441421389579773, 0.8485008478164673, 0.8514066934585571, 0.8444063067436218, 0.856689989566803, 0.8500858545303345, 0.8570862412452698, 0.8632941246032715, 0.863558292388916, 0.8537842035293579, 0.8569541573524475, 0.8594637513160706, 0.868049144744873, 0.8729361891746521, 0.8722757697105408, 0.8628978729248047, 0.8705587387084961], "val_loss": [1.6138991968972343, 0.8219779218946185, 0.8099214690072196, 0.6788700989314488, 0.5875713654926845, 0.5960959706987653, 0.5342244931629726, 0.5626555851527623, 0.5169864552361625, 0.5325035878590175, 0.4809800216129848, 0.5193738426480975, 0.5007789645876203, 0.4511204617364066, 0.4477944033486502, 0.46511484895433697, 0.4469625438962664, 0.45175775459834505, 0.4456936631883894, 0.41368452991758076, 0.416108821119581, 0.39793969903673443, 0.410553583077022, 0.3965365375791277, 0.4766181537083217, 0.4037179010254996, 0.38070073298045565, 0.4083722914968218, 0.38182041474751066, 0.37947897400174824, 0.361588648387364, 0.363138701234545, 0.38818569694246563, 0.38041697229657856, 0.3596686380250113, 0.4100138545036316, 0.35210738863263813, 0.34608998468944, 0.34412279299327303, 0.34748224701200214, 0.361278806413923, 0.34576531818934847, 0.33557447365352083, 0.33574637344905306, 0.3576175996235439, 0.3400770510946001, 0.32705068588256836, 0.3300173112324306, 0.33094104698726107, 0.31725444964000155, 0.33978335346494404, 0.33834669419697355, 0.3180610367230007, 0.31656235456466675, 0.34829334701810566, 0.32118661063058035, 0.3151757887431553, 0.3135380148887634], "val_accuracy": [0.29600000381469727, 0.6629999876022339, 0.6779999732971191, 0.7049999833106995, 0.7403333187103271, 0.734666645526886, 0.7716666460037231, 0.7483333349227905, 0.7756666541099548, 0.746999979019165, 0.7896666526794434, 0.7323333621025085, 0.762666642665863, 0.79666668176651, 0.8036666512489319, 0.781333327293396, 0.8023333549499512, 0.7900000214576721, 0.7929999828338623, 0.8220000267028809, 0.8196666836738586, 0.8259999752044678, 0.8213333487510681, 0.8353333473205566, 0.7883333563804626, 0.8246666789054871, 0.840666651725769, 0.812666654586792, 0.8346666693687439, 0.8376666903495789, 0.8473333120346069, 0.843999981880188, 0.8286666870117188, 0.8309999704360962, 0.8479999899864197, 0.8143333196640015, 0.8513333201408386, 0.8529999852180481, 0.8550000190734863, 0.8536666631698608, 0.8450000286102295, 0.8546666502952576, 0.8506666421890259, 0.8606666922569275, 0.8523333072662354, 0.8560000061988831, 0.8653333187103271, 0.8613333106040955, 0.8610000014305115, 0.8673333525657654, 0.8613333106040955, 0.8569999933242798, 0.8693333268165588, 0.8690000176429749, 0.8513333201408386, 0.8690000176429749, 0.8690000176429749, 0.8666666746139526]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 1, 1, 5, 2, 3, 2, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 16, 44]], "fitness": -0.7788571715354919, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 11, 10, 0, 1, 0, 0, 0, 0, 14, 9, 5, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), grad)), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))), tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, beta)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.square(tf.math.square(alpha)), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [1.9584523836824133, 1.5405200780296149, 1.0369786063221231, 0.9353316402186523, 0.8128881901325472, 0.7885248909584205, 0.7542573574464461, 0.7073658376384988, 0.7187505330171536, 0.6635638322371691, 0.6490461463154173, 0.6637524729076708, 0.638789638772601, 0.6037120345387996], "accuracy": [0.34103816747665405, 0.47430986166000366, 0.6242240071296692, 0.6552634835243225, 0.6972658634185791, 0.698718786239624, 0.715889573097229, 0.7285695672035217, 0.728701651096344, 0.7506273984909058, 0.7518161535263062, 0.7563069462776184, 0.7524765729904175, 0.7687227725982666], "val_loss": [1.6383346148899622, 0.8065987484795707, 0.7292388677597046, 0.6267338650567191, 0.5664993694850377, 0.6195794684546334, 0.5687372854777745, 0.5473226649420602, 0.5116381815501622, 0.5301434653145927, 0.5199339730398995, 0.5024178879601615, 0.5085531643458775, 0.481567450932094], "val_accuracy": [0.2853333353996277, 0.6679999828338623, 0.6923333406448364, 0.7236666679382324, 0.7480000257492065, 0.7206666469573975, 0.7236666679382324, 0.7573333382606506, 0.7763333320617676, 0.7616666555404663, 0.7636666893959045, 0.7413333058357239, 0.7570000290870667, 0.7699999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 2, 5, 2, 3, 3, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 1, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7760000228881836, "mapping_values": [1, 2, 2, 1, 1, 0, 37, 37, 20, 17, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha))), tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), beta), tf.math.add(grad, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, alpha)), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9582197709625833, 1.536609670284827, 1.0322919995824753, 0.9495097005434985, 0.8165224471332816, 0.793593163267339, 0.7661406028351023, 0.6930545961710409, 0.7111347681023362, 0.6644835157983922, 0.662774515473186, 0.6508050936166841, 0.6443339565788766, 0.6045217631184713], "accuracy": [0.34103816747665405, 0.47549861669540405, 0.6273940205574036, 0.6515651941299438, 0.6959450244903564, 0.6972658634185791, 0.7121912837028503, 0.7405890822410583, 0.7272487282752991, 0.7495707273483276, 0.7427024245262146, 0.7556465268135071, 0.7515519857406616, 0.76542067527771], "val_loss": [1.6290592466081892, 0.8132195132119315, 0.7572616168430873, 0.6337373426982335, 0.5780711684908185, 0.6717380114964077, 0.5404192720140729, 0.5472843136106219, 0.509985089302063, 0.5288631234850202, 0.5076290709631783, 0.49316905226026264, 0.49203409467424664, 0.4914010763168335], "val_accuracy": [0.28833332657814026, 0.6643333435058594, 0.6886666417121887, 0.7193333506584167, 0.746999979019165, 0.7043333053588867, 0.7680000066757202, 0.7576666474342346, 0.7763333320617676, 0.762333333492279, 0.762333333492279, 0.7559999823570251, 0.7723333239555359, 0.7763333320617676]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [7, 2, 1, 7, 8, 5, 6, 6, 4, 1, 2, 3, 8, 3, 3, 9, 3, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.4488571286201477, "mapping_values": [1, 2, 2, 1, 1, 0, 58, 58, 37, 21, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.square(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha)))), tf.math.multiply(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))), beta))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.square(tf.math.square(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(grad, beta)), grad), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))))))), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.square(alpha))))), tf.math.add(beta, beta)))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.6310213220243868, 2.30480027151555, 2.2990824268982473, 2.751493882288975, 2.306918494784207, 2.3036533017058365, 2.3030502420800034, 2.30294853109552], "accuracy": [0.1608770340681076, 0.10091137140989304, 0.11742173880338669, 0.17593449354171753, 0.09998679161071777, 0.1006472036242485, 0.09721305221319199, 0.09113723784685135], "val_loss": [1.9760221072605677, 1.9728535924639021, 1.9621039118085588, 1.9798071043831962, 1.974320956638881, 1.9738007272992815, 1.9736402375357491, 1.9735839707510812], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.11933333426713943, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09966666996479034, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 9, 3, 5, 2, 3, 4, 6, 6, 2, 1, 2, 3, 3, 8, 8, 3, 7, 2, 9, 9, 5, 4, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 2, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.2280000001192093, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.631021353515415, 2.304804207295821, 2.298037272938144, 2.3065970280009522, 2.2713797500246566, 2.2981665244333622, 2.3189599244129453, 2.30397672773494, 2.3031283763610393, 2.3033775751380685, 2.3029497549628632], "accuracy": [0.1608770340681076, 0.1010434553027153, 0.11900673806667328, 0.14198917150497437, 0.15281997621059418, 0.11372341960668564, 0.14740456640720367, 0.09615638852119446, 0.09787346422672272, 0.09391097724437714, 0.10091137140989304], "val_loss": [1.9760221072605677, 1.9728491646902901, 1.9569473266601562, 1.9656469481331962, 1.9746032442365373, 1.9190194266183036, 1.975309235709054, 1.9738621711730957, 1.9737560408455985, 1.9737563133239746, 1.9737912586757116], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.17800000309944153, 0.18700000643730164, 0.09799999743700027, 0.3076666593551636, 0.09966666996479034, 0.09966666996479034, 0.09866666793823242, 0.1003333330154419, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [8, 2, 1, 7, 8, 1, 2, 2, 3, 3, 2, 2, 9, 8, 3, 3, 3, 5, 6, 4, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 2, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 1, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [42, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 21, 21, 11, 10, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.multiply(tf.math.add(grad, tf.math.add(beta, beta)), grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [7, 2, 1, 7, 8, 5, 6, 3, 3, 6, 2, 3, 9, 6, 3, 3, 3, 2, 6, 0, 9, 2, 5, 8, 5, 6, 1, 2, 3, 7, 2, 9, 5, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(grad)))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))), grad))), tf.math.divide_no_nan(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10328886657953262, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [0, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 54, 54, 32, 22, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad))), tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.add(tf.math.add(beta, alpha), grad))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))), tf.math.add(beta, alpha))), tf.math.add(beta, alpha)), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), beta)))), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))))), tf.math.add(tf.math.add(beta, grad), alpha))), tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(grad, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024684057070703, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [8, 2, 1, 7, 8, 1, 2, 2, 3, 3, 2, 3, 9, 8, 3, 3, 3, 5, 0, 4, 9, 4, 5, 8, 5, 2, 2, 3, 3, 7, 2, 9, 8, 6, 3, 2, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 3, 3, 3, 3, 1, 5, 2, 3, 1, 3, 1, 3, 1, 1, 3, 3, 1, 3, 2, 3, 0, 3, 2, 0, 0], [78, 82, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [10, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [9, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 4, 1, 1, 9, 2, 2, 4, 1, 3, 2, 2, 3, 1, 3, 6, 8, 2, 4, 0, 3, 4, 8, 6, 5, 1, 1, 2, 2, 7, 2, 1, 8, 2, 3, 8, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 4, 0, 0, 0, 3, 3, 3, 0, 3, 2, 1, 0, 3, 4, 2, 2, 3, 3, 0, 3, 0, 0], [74, 69, 14, 90, 16, 30, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0], [0, 0, 1], [2, 0], [5], [76], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 37, 37, 20, 17, 6, 4, 3, 2, 1, 0, 12, 8, 4, 3], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))))), tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))))))))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.subtract(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.negative(sigma)))", "other_info": {"loss": [2.3476640616016238, 3.0975313366774193, 7.074321094214114e+31, 2.3057262872298634, 176107530.952938, 2.306687414087183, 2.3068123731032464], "accuracy": [0.04266279190778732, 0.025756174698472023, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0846950667245046, 66.96712820870536, 1.976022175380162, 73319435.42857143, 1.9762895447867257, 1.976529325757708, 1.976759774344308], "val_accuracy": [0.008333333767950535, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [7, 6, 1, 7, 8, 5, 6, 6, 1, 6, 2, 3, 2, 3, 3, 3, 3, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 2, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [3, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, grad)))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [4.031109859191902e+19, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.053229428827762604, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 5, 9, 6, 8, 3, 3, 2, 6, 0, 9, 2, 5, 8, 5, 6, 1, 2, 3, 7, 2, 9, 5, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 0, 3, 3, 1, 1, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [87, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 34, 34, 21, 13, 3, 1, 0, 0, 0, 0, 12, 8, 4, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, grad), alpha)), tf.math.sqrt(alpha)))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.subtract(tf.math.square(beta), tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.negative(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [7, 0, 2, 7, 8, 5, 6, 6, 3, 6, 2, 3, 9, 6, 3, 3, 3, 2, 6, 0, 9, 2, 5, 8, 5, 6, 1, 2, 3, 7, 2, 9, 5, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 0, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [33, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [89, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(grad))), grad))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 9, 6, 3, 3, 3, 2, 6, 0, 9, 2, 5, 8, 5, 6, 1, 2, 3, 7, 2, 9, 5, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 0, 5, 0, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 1, 23, 23, 13, 10, 3, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), alpha), tf.math.add(tf.math.multiply(tf.math.add(beta, grad), beta), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.subtract(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.negative(sigma)))", "other_info": {"loss": [2.3016989091604363, 2.3026541942429657, 2.3016208796185618, 2.3037724077992863, 2.300743999356497, 2.3026666871119863], "accuracy": [0.09060890227556229, 0.09153348207473755, 0.09060890227556229, 0.0882314071059227, 0.09734513610601425, 0.09166556596755981], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]