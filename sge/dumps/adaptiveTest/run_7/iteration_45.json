[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8114285469055176, "mapping_values": [1, 2, 2, 1, 1, 0, 66, 66, 42, 24, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, alpha))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))))))), tf.math.add(beta, beta))))))))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(beta, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.006734388363659, 1.4541308567776199, 1.0357556441645532, 0.9149751598887581, 0.7880841115792949, 0.8207975505144999, 0.7447796076311805, 0.6933003546476458, 0.7156574973230585, 0.6791884107848578, 0.6384791766710726, 0.6418299826223459, 0.6285157754058772, 0.5958325853673395, 0.6200262765055555, 0.5910959303371186, 0.5651933527531294, 0.55780348084496, 0.5575792207741199, 0.555619303033242, 0.5492286064432376, 0.5406513419354109, 0.5132954164487243, 0.5268360146591613, 0.5066440165664825, 0.5096678485479558, 0.4953382988379789, 0.49228941320806147, 0.4914458523833001, 0.4687527228796786, 0.47507887874785165], "accuracy": [0.32703739404678345, 0.4974243938922882, 0.6215823292732239, 0.6571126580238342, 0.7041342258453369, 0.6905296444892883, 0.7187954187393188, 0.7390040755271912, 0.733060359954834, 0.7401928305625916, 0.7560427784919739, 0.7523444890975952, 0.7647602558135986, 0.7775723338127136, 0.7638356685638428, 0.7732135653495789, 0.7836481332778931, 0.7913089394569397, 0.7882710099220276, 0.7927618622779846, 0.7956677079200745, 0.7987055778503418, 0.8127063512802124, 0.7952714562416077, 0.8124422430992126, 0.8117818236351013, 0.8107251524925232, 0.8185180425643921, 0.8142913579940796, 0.8269713521003723, 0.8226125836372375], "val_loss": [1.5251805782318115, 0.8051483801433018, 0.7629886865615845, 0.6129955564226423, 0.6302752665110997, 0.6235406058175224, 0.549133437020438, 0.5606459890093122, 0.5634956530162266, 0.5143519639968872, 0.48841151169368197, 0.5246401854923793, 0.4643245254244123, 0.4826299122401646, 0.4896897418158395, 0.4521631513323103, 0.4337397302900042, 0.42440710748944965, 0.45090723037719727, 0.41983732155391146, 0.44030092443738666, 0.4121445417404175, 0.39865744965417044, 0.40393819979258944, 0.4461486850466047, 0.3840826834951128, 0.40060525281088694, 0.3845359001840864, 0.3695112807410104, 0.4068017601966858, 0.37420949765614103], "val_accuracy": [0.3199999928474426, 0.6610000133514404, 0.659333348274231, 0.7236666679382324, 0.7236666679382324, 0.7243333458900452, 0.7350000143051147, 0.7493333220481873, 0.721666693687439, 0.7493333220481873, 0.7770000100135803, 0.7546666860580444, 0.800000011920929, 0.7699999809265137, 0.7879999876022339, 0.79666668176651, 0.8116666674613953, 0.815666675567627, 0.8059999942779541, 0.8273333311080933, 0.8026666641235352, 0.8116666674613953, 0.8299999833106995, 0.812333345413208, 0.8043333292007446, 0.8426666855812073, 0.8163333535194397, 0.8266666531562805, 0.8373333215713501, 0.8116666674613953, 0.831333339214325]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 5, 5, 0, 2, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 9, 8, 2, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 4, 3, 5, 2, 1, 2, 1, 1, 2, 1, 1, 3, 5, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8048571348190308, "mapping_values": [1, 2, 2, 1, 1, 0, 58, 58, 37, 21, 3, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(tf.math.square(tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, alpha)))))), tf.math.add(beta, beta)))))), tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), alpha)), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(alpha)))))))))))))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))))))), tf.math.add(beta, beta))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0067322783072736, 1.454021643575125, 1.0367619121835185, 0.9159905098574493, 0.7877905923519404, 0.817184012044202, 0.7477523235518305, 0.6936318086532318, 0.6883026939247106, 0.6961387066541331, 0.640233464142461, 0.6471737161162602, 0.6288081369757762, 0.5956645634873133, 0.6078114735451924, 0.6067155124551946, 0.5623062488944885, 0.5570996059654663, 0.5449533317350771, 0.5606231195280156, 0.5501594328688215, 0.5460386291045901, 0.513138414444846, 0.5240541523741441, 0.5080080294432721, 0.5077492318660701, 0.49190772892131057, 0.49912004731570914, 0.49090291753956483, 0.47278697034702044, 0.475189181099069, 0.4556622278137671, 0.45939411473091585, 0.45386135321503634, 0.4527829177682552, 0.43470208044333025, 0.43924734515206, 0.4290729606463342, 0.4215420181992787, 0.4414160705048883, 0.41373464242342267, 0.4034439448620019, 0.4049395896290681, 0.40202596172318406, 0.406311130259157, 0.39784691961150775, 0.3820023866275109, 0.4047876517054049, 0.36917025742041454, 0.36840572285220735, 0.3740007722492719, 0.3704020723832392, 0.36443740491617654], "accuracy": [0.32703739404678345, 0.4983489513397217, 0.6210539937019348, 0.6593580842018127, 0.7045304179191589, 0.6940959095954895, 0.7149649858474731, 0.7338528633117676, 0.744419515132904, 0.7345132827758789, 0.7580240368843079, 0.7491744756698608, 0.7601373791694641, 0.77677983045578, 0.7662131786346436, 0.7701756954193115, 0.7843085527420044, 0.7921014428138733, 0.7957997918128967, 0.7895918488502502, 0.7938185334205627, 0.7955356240272522, 0.8103289008140564, 0.798309326171875, 0.8101968169212341, 0.8108572363853455, 0.8109893202781677, 0.8129705190658569, 0.81548011302948, 0.8259146809577942, 0.8215559124946594, 0.8317263126373291, 0.8271034359931946, 0.8309338092803955, 0.8345000743865967, 0.835160493850708, 0.8380662798881531, 0.8409721255302429, 0.8422929644584656, 0.8391229510307312, 0.8511425256729126, 0.8473120927810669, 0.846387505531311, 0.8537842035293579, 0.8495575189590454, 0.8548408150672913, 0.8619733452796936, 0.8494254350662231, 0.8636903762817383, 0.8623695969581604, 0.8632941246032715, 0.8631620407104492, 0.8671245574951172], "val_loss": [1.5251168864113944, 0.8048200607299805, 0.7637994629996163, 0.6159966332571847, 0.5871364729745048, 0.6343334742954799, 0.5476473569869995, 0.540090663092477, 0.585220183644976, 0.5216256209782192, 0.4822803224836077, 0.5099179063524518, 0.4640266214098249, 0.45960729462759836, 0.46679667064121794, 0.44881248474121094, 0.4265434316226414, 0.4176886422293527, 0.4473304918834141, 0.417642457144601, 0.4435276814869472, 0.41148217235292706, 0.40170339175633024, 0.4025380526270185, 0.42306444474628996, 0.3926224964005606, 0.4087610159601484, 0.38168710470199585, 0.36985425438199726, 0.4115135243960789, 0.3821053164345877, 0.36625178371156963, 0.3959997977529253, 0.36745280027389526, 0.354199298790523, 0.39388669388634817, 0.3541200927325657, 0.3495269588061741, 0.3657693692616054, 0.3540944457054138, 0.336424001625606, 0.33293953963688444, 0.36171555519104004, 0.35719006402151926, 0.35422823258808683, 0.3511725493839809, 0.32366576365062166, 0.31726904426302227, 0.3301088809967041, 0.3337324261665344, 0.34034253869737896, 0.3237253853252956, 0.33491709402629305], "val_accuracy": [0.3199999928474426, 0.6613333225250244, 0.6589999794960022, 0.7203333377838135, 0.7356666922569275, 0.7016666531562805, 0.7459999918937683, 0.7730000019073486, 0.7433333396911621, 0.7463333606719971, 0.7863333225250244, 0.7633333206176758, 0.796999990940094, 0.7879999876022339, 0.7933333516120911, 0.8029999732971191, 0.8159999847412109, 0.8180000185966492, 0.7960000038146973, 0.8270000219345093, 0.8036666512489319, 0.8133333325386047, 0.8289999961853027, 0.8169999718666077, 0.8090000152587891, 0.8349999785423279, 0.815666675567627, 0.8309999704360962, 0.8393333554267883, 0.8090000152587891, 0.8270000219345093, 0.8433333039283752, 0.8286666870117188, 0.8450000286102295, 0.8450000286102295, 0.8259999752044678, 0.8519999980926514, 0.8486666679382324, 0.8370000123977661, 0.843666672706604, 0.8566666841506958, 0.8583333492279053, 0.8396666646003723, 0.8399999737739563, 0.8473333120346069, 0.8503333330154419, 0.8629999756813049, 0.8669999837875366, 0.859666645526886, 0.8546666502952576, 0.8519999980926514, 0.8633333444595337, 0.8506666421890259]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 1, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 3, 2, 3, 7, 2, 1, 6, 2, 3, 6, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 38, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.795714259147644, "mapping_values": [1, 2, 2, 1, 1, 0, 55, 55, 33, 22, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.square(grad)), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, alpha)))))), tf.math.add(beta, beta)))), tf.math.add(beta, alpha)), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, beta))))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0029191894301994, 1.3733554789103914, 1.089054826102347, 0.9067351901535943, 0.7930592755363791, 0.7541424459186701, 0.7277241221366699, 0.7181456440066019, 0.6771005192264007, 0.678711724295482, 0.6537284742036531, 0.6323595281290325, 0.6276972558142219, 0.6183599573179337, 0.5916140887321908, 0.5856119020818766, 0.5637946775041126, 0.5656953289240831, 0.5670148277673204, 0.5457242034949394], "accuracy": [0.3299432098865509, 0.5324263572692871, 0.5952978730201721, 0.6606789231300354, 0.7009642124176025, 0.7091533541679382, 0.7256637215614319, 0.7239466309547424, 0.7396644949913025, 0.7411174178123474, 0.7540615797042847, 0.7606657147407532, 0.757099449634552, 0.7724210619926453, 0.7718927264213562, 0.7783648371696472, 0.7872143983840942, 0.7804781198501587, 0.7810064554214478, 0.7893276810646057], "val_loss": [1.425044332231794, 0.7575591461999076, 0.6960132803235736, 0.6267866236822945, 0.5859009878976005, 0.5738757508141654, 0.6342251130512783, 0.5491812058857509, 0.5183390889848981, 0.49509869303022114, 0.4859687600816999, 0.4854739393506731, 0.47822509493146625, 0.47587948186056955, 0.44675961562565397, 0.4658102648598807, 0.4677276611328125, 0.43886771372386385, 0.45423437867845806, 0.4298697454588754], "val_accuracy": [0.4516666531562805, 0.6646666526794434, 0.7276666760444641, 0.721666693687439, 0.7350000143051147, 0.7336666584014893, 0.7036666870117188, 0.7459999918937683, 0.7670000195503235, 0.777999997138977, 0.7850000262260437, 0.7720000147819519, 0.7886666655540466, 0.7739999890327454, 0.8073333501815796, 0.793666660785675, 0.7796666622161865, 0.8033333420753479, 0.7833333611488342, 0.8050000071525574]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 9, 5, 0, 4, 6, 3, 2, 2, 2, 3, 3, 0, 8, 2, 2, 2, 9, 9, 8, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 42, 44]], "fitness": -0.7822856903076172, "mapping_values": [1, 2, 2, 1, 1, 0, 58, 58, 36, 22, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, grad)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, beta))))))))), tf.math.add(beta, alpha))), tf.math.square(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))))), tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, beta)))))), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.275905893116957, 2.1927917917501247, 2.0336022938184293, 1.748652204625154, 1.457368746456957, 1.2689404488712048, 1.1472777482336223, 1.0668257218089952, 1.0139431811878001, 0.9587518807651659, 0.9202834433725781, 0.8911615913223833, 0.8656731318520549, 0.8361193968351917, 0.8308871624224442, 0.8078158354211272, 0.7961446065015293, 0.7792929133104847, 0.7717493696692062, 0.7624297838216728, 0.7495384642224758, 0.738620373417342, 0.7273855476394511, 0.7210037381720502, 0.7222937884001354, 0.7168524034853704, 0.7011132266984057, 0.6954470517817678, 0.6959874860016331, 0.6839325814089047, 0.6756835546098003, 0.6689832701879549, 0.6689975545737312, 0.6598496961240928, 0.6569920761033198, 0.6506192849107847, 0.6521089274287145, 0.6421586405788478, 0.6452603559720124], "accuracy": [0.15532954037189484, 0.3019416332244873, 0.40166425704956055, 0.46413949131965637, 0.5239730477333069, 0.5688812732696533, 0.5983357429504395, 0.624620258808136, 0.6460176706314087, 0.6596222519874573, 0.6730946898460388, 0.6863030195236206, 0.6906617283821106, 0.7034738063812256, 0.7065116763114929, 0.7108704447746277, 0.7161537408828735, 0.7220974564552307, 0.7181349992752075, 0.7309470176696777, 0.7239466309547424, 0.7354378700256348, 0.7386078238487244, 0.7408532500267029, 0.739928662776947, 0.7396644949913025, 0.7442874312400818, 0.7495707273483276, 0.7471932172775269, 0.7536653280258179, 0.7534011602401733, 0.7553823590278625, 0.7568352818489075, 0.7585523724555969, 0.7618544697761536, 0.763967752456665, 0.7640998363494873, 0.7635715007781982, 0.763967752456665], "val_loss": [1.9067580359322684, 1.7948590687343053, 1.5711964198521204, 1.2468245710645403, 1.0004497596195765, 0.8598348413194928, 0.7814097063882011, 0.7281554596764701, 0.6869708810533796, 0.6577892473765782, 0.632913487298148, 0.6198885951723371, 0.5991138390132359, 0.5918306623186383, 0.5759237153189523, 0.5684884786605835, 0.5578562702451434, 0.5442277874265399, 0.5368430444172451, 0.5348914521081107, 0.527222854750497, 0.5177082163946969, 0.5275956562587193, 0.5121527058737618, 0.5036292757306781, 0.49871679714747835, 0.4967855215072632, 0.4925516162599836, 0.49804864610944477, 0.4825365032468523, 0.4778405427932739, 0.5005874122892108, 0.47903168201446533, 0.47012998376573834, 0.4691077981676374, 0.472198486328125, 0.46967196464538574, 0.4608022996357509, 0.4610231603894915], "val_accuracy": [0.37599998712539673, 0.49133333563804626, 0.559333324432373, 0.5989999771118164, 0.6483333110809326, 0.6880000233650208, 0.6946666836738586, 0.7076666951179504, 0.7173333168029785, 0.7323333621025085, 0.7323333621025085, 0.737666666507721, 0.750333309173584, 0.7433333396911621, 0.7583333253860474, 0.7473333477973938, 0.7553333044052124, 0.7706666588783264, 0.7720000147819519, 0.7573333382606506, 0.7680000066757202, 0.7746666669845581, 0.7540000081062317, 0.7676666378974915, 0.7806666493415833, 0.7866666913032532, 0.7829999923706055, 0.7846666574478149, 0.7766666412353516, 0.7940000295639038, 0.793666660785675, 0.7646666765213013, 0.7873333096504211, 0.8003333210945129, 0.7883333563804626, 0.7879999876022339, 0.7876666784286499, 0.796999990940094, 0.79666668176651]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 6, 3, 6, 1, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 3, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.6825714111328125, "mapping_values": [1, 2, 2, 1, 1, 0, 40, 40, 26, 14, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, beta), alpha), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta))))))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))))))), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0740433210363602, 1.9079386368561193, 1.106703395762259, 0.8719894941519784, 0.7773525386422837, 1.002018572757934, 1.0241597835823308, 1.3147344542626676, 2.126224338984713], "accuracy": [0.35543522238731384, 0.3575485348701477, 0.6362435817718506, 0.6845859289169312, 0.7137762308120728, 0.6619997620582581, 0.6408664584159851, 0.6337339878082275, 0.5256901383399963], "val_loss": [1.7882563727242606, 1.0693742207118444, 0.6509585550853184, 0.549112149647304, 0.5865603515080043, 0.9064538478851318, 0.6422374078205654, 1.1140234470367432, 1.387897218976702], "val_accuracy": [0.4020000100135803, 0.5953333377838135, 0.7153333425521851, 0.7603333592414856, 0.7323333621025085, 0.7139999866485596, 0.7226666808128357, 0.6776666641235352, 0.5289999842643738]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 4, 9, 0, 4, 0, 3, 2, 3, 2, 2, 3, 3, 8, 2, 1, 2, 9, 9, 5, 6, 5, 5, 1, 5, 1, 7, 2, 9, 3, 2, 3, 1, 5, 5, 5, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 0, 2, 1, 3, 0, 5, 3, 1, 2, 1, 0, 2, 3, 1, 0, 5, 4, 2, 3, 1, 3, 0, 3, 0, 0], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [0, 0, 1, 0, 0], [0, 0, 0, 1], [2, 5, 8], [5], [76], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.19114285707473755, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.8104660571479623, 2.3097408375861606, 2.3042675206186023, 2.3036156949932707, 2.303232798534157, 2.303016261024057], "accuracy": [0.1438383311033249, 0.09760929644107819, 0.09615638852119446, 0.09668471664190292, 0.09840179979801178, 0.09840179979801178], "val_loss": [1.9821712630135673, 1.9751079423086983, 1.973897933959961, 1.9737401008605957, 1.9736878531319755, 1.9737051555088587], "val_accuracy": [0.10400000214576721, 0.09866666793823242, 0.09866666793823242, 0.1003333330154419, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 2, 7, 5, 5, 0, 4, 5, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.19114285707473755, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 10, 6, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.negative(grad)))))), tf.math.add(beta, tf.math.pow(tf.math.square(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.8101885580131643, 2.3097312329168473, 2.3042653477376147, 2.3036177507591225, 2.303235506384742, 2.3030185057360812], "accuracy": [0.14357416331768036, 0.09760929644107819, 0.09615638852119446, 0.09668471664190292, 0.09826971590518951, 0.09840179979801178], "val_loss": [1.98215913772583, 1.9751043319702148, 1.9738969802856445, 1.9737398965018136, 1.9736877850123815, 1.9737051555088587], "val_accuracy": [0.10400000214576721, 0.09866666793823242, 0.09866666793823242, 0.1003333330154419, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 3, 6, 5, 5, 9, 1, 3, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 3, 3, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 9, 9, 3, 4, 5, 2, 9, 7, 5], [2, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.13342857360839844, "mapping_values": [1, 8, 8, 6, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0720600447933735, 1.9302611564207448, 1.1594020996221603, 0.8976783260551536, 0.859135887311387, 0.8798600867943693, 0.9711692718829084, 1.1090562801004606, 1.038559966839347, 1.0978033674580467, 4.4391384129794424, 2.9149361489990904], "accuracy": [0.3549068868160248, 0.351340651512146, 0.6160348653793335, 0.6794346570968628, 0.6925109028816223, 0.6845859289169312, 0.6544709801673889, 0.64667809009552, 0.6514331102371216, 0.633469820022583, 0.15374454855918884, 0.11002509295940399], "val_loss": [1.78254577091762, 1.1206292765481132, 0.6920795270374843, 0.5750424691608974, 0.667537008013044, 0.5698985712868827, 0.6741494962147304, 0.718876770564488, 0.6880018200193133, 3.014829703739711, 2.7179763657706126, 2.0481085777282715], "val_accuracy": [0.40799999237060547, 0.5513333082199097, 0.7039999961853027, 0.7409999966621399, 0.7436666488647461, 0.731333315372467, 0.746666669845581, 0.7360000014305115, 0.7013333439826965, 0.6556666493415833, 0.09833333641290665, 0.1850000023841858]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 1, 3, 8, 8, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 0, 3, 1, 4, 0, 3, 0, 1, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [11, 61, 23, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.10771428793668747, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 6, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(grad), tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [6.258451447715502, 2.445749583450275, 2.388602064049806, 2.3837966107736412, 2.435463136071621, 2.39314949016498, 2.4084396241694046, 2.406307427638463, 2.4088400376707475, 2.422248812525453], "accuracy": [0.15031039714813232, 0.09734513610601425, 0.10368511080741882, 0.10091137140989304, 0.10117553919553757, 0.10091137140989304, 0.09536388516426086, 0.09787346422672272, 0.09959053993225098, 0.1026284471154213], "val_loss": [2.1119302340916226, 2.0158728190830777, 2.010343619755336, 2.1123828206743513, 1.9782844952174596, 1.9965683392116003, 2.133132117135184, 2.014669213976179, 1.9979455130440849, 2.0895646640232632], "val_accuracy": [0.1003333330154419, 0.10100000351667404, 0.09799999743700027, 0.09866666793823242, 0.10400000214576721, 0.1003333330154419, 0.10100000351667404, 0.09799999743700027, 0.09866666793823242, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 7, 3, 9, 0, 4, 0, 3, 2, 3, 2, 2, 3, 3, 8, 2, 1, 2, 9, 9, 5, 6, 5, 5, 1, 5, 1, 7, 2, 9, 3, 2, 3, 1, 5, 5, 5, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 3, 3, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 13, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.negative(tf.math.subtract(grad, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 6, 3, 5, 7, 9, 0, 4, 8, 9, 0, 2, 3, 3, 8, 2, 6, 2, 9, 4, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 2, 3, 1, 4, 3, 5, 2, 3, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [6, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [83, 41, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 15, 6, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta))), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), alpha), grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [8201.0983798559, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.14397041499614716, 0.09232597798109055, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6851799.857142857, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.06300000101327896, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 2, 3, 3, 8, 8, 7, 2, 5, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 2, 0, 5, 2, 1, 2, 1, 3, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 58, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1], [0, 1], [2], [5], [76], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 24, 24, 14, 10, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))), tf.math.add(tf.math.add(beta, beta), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 2, 9, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 0, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [3, 3, 1, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 2, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 98, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.1308382233779125e+27, 9.72535366924479, 18.449566291795982, 27.183665199113513, 35.9139915998381, 44.6411891136628], "accuracy": [0.07845727354288101, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.270196505955288, 12.731735501970563, 20.22091511317662, 27.706935337611608, 35.190660749162944, 42.66497148786272], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 3, 6, 5, 5, 9, 1, 3, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 3, 3, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [0, 0, 1], [0, 1], [2, 7, 4], [5], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 8, 1, 5, 5, 4, 7, 5], [2, 3, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 10, 7, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.square(sigma), tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 4, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 3, 2, 1, 4, 3, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [59, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 41, 41, 26, 15, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.pow(tf.math.subtract(tf.math.add(grad, tf.math.square(tf.math.add(beta, grad))), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), beta)))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), grad), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, grad), beta)), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))))))), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0734381154179573, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [7, 0, 1, 7, 3, 4, 0, 4, 0, 3, 2, 3, 2, 2, 3, 3, 8, 2, 1, 2, 9, 9, 5, 6, 5, 5, 1, 5, 1, 7, 2, 9, 3, 2, 3, 1, 5, 5, 5, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 0, 2, 1, 3, 0, 5, 3, 1, 2, 1, 0, 2, 3, 1, 0, 5, 4, 2, 3, 1, 3, 0, 3, 0, 0], [11, 61, 23, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 8, 9, 3, 4, 5, 2, 9, 7, 5], [1, 1, 0, 3, 1, 1], [83, 41, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 37, 37, 22, 15, 5, 1, 0, 0, 0, 0, 3, 3, 0, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.multiply(grad, tf.math.add(beta, grad)), tf.math.pow(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), beta)), tf.math.negative(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1230505718.9002194, 23900255564.31647, 110621455343.9049, 305304908121.7065, 656499410255.0215, 1211633419449.7024], "accuracy": [0.10157178342342377, 0.1006472036242485, 0.09417514503002167, 0.10434553027153015, 0.09655263274908066, 0.10051512718200684], "val_loss": [4719991076.571428, 37748684507.42857, 127388506989.71428, 301942851876.5714, 589714236562.2858, 1019008478646.8572], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 5, 3, 5, 7, 9, 0, 4, 8, 9, 0, 2, 3, 3, 8, 2, 6, 2, 9, 4, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 2, 3, 1, 4, 3, 5, 2, 3, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [11, 61, 23, 19, 22], [0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1], [2, 7, 7], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [83, 41, 44]], "fitness": -0.09685714542865753, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 8, 3, 1, 7, 4, 3, 1, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, beta)))))), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, sigma)))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [6.214817376641266, 2.4463929727549534, 2.3878614504449733, 2.384747625074335, 2.409114185309823, 2.376411348018412, 2.3992807792083637], "accuracy": [0.149649977684021, 0.09734513610601425, 0.10355303436517715, 0.1006472036242485, 0.09866596013307571, 0.10196803510189056, 0.0952318087220192], "val_loss": [2.1116587093898227, 2.0161794253758023, 2.0058557646615163, 2.0999974523271834, 1.981804507119315, 1.9830399240766252, 2.091700690133231], "val_accuracy": [0.1003333330154419, 0.10100000351667404, 0.09799999743700027, 0.09866666793823242, 0.10100000351667404, 0.1003333330154419, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [7, 0, 1, 9, 4, 8, 8, 0, 0, 3, 2, 2, 2, 2, 8, 3, 8, 0, 7, 2, 9, 9, 6, 0, 2], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [3, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3023677780454688, 2.3011165023590077, 2.303080804280916, 2.3011795599636007, 2.302158453492535, 2.301897638871638], "accuracy": [0.0936468094587326, 0.09285431355237961, 0.08928807079792023, 0.09457138925790787, 0.09047681838274002, 0.09681680053472519], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 8, 3, 2, 3, 3, 3, 8, 2, 7, 2, 6, 4, 5, 6, 5, 5, 1, 2, 3, 7, 5, 1, 8, 2, 3, 5, 5, 5, 8, 3, 9, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 0, 0, 2, 2, 2, 1, 0, 2, 0, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 8, 8, 5, 3, 1, 63, 63, 39, 24, 5, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, beta)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))))), tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, beta))))))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.square(tf.math.sqrt(tf.math.add(beta, grad)))))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.subtract(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(sigma))", "other_info": {"loss": [2.3023677780454688, 2.3011165023590077, 2.303080804280916, 2.3011795599636007, 2.302158453492535, 2.301897638871638], "accuracy": [0.0936468094587326, 0.09285431355237961, 0.08928807079792023, 0.09457138925790787, 0.09047681838274002, 0.09681680053472519], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 3, 6, 5, 5, 9, 1, 3, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 3, 3, 2, 2, 1, 2, 1, 0, 4], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.math.subtract(tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(sigma))", "other_info": {"loss": [2.3023677780454688, 2.3011165023590077, 2.303080804280916, 2.3011795599636007, 2.302158453492535, 2.301897638871638], "accuracy": [0.0936468094587326, 0.09285431355237961, 0.08928807079792023, 0.09457138925790787, 0.09047681838274002, 0.09681680053472519], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]