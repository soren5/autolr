[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 1, 7, 6, 1, 6, 6, 3, 8, 2, 3, 3, 8, 3, 3, 0, 8, 9, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 5, 2, 3, 3, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 5, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8040000200271606, "mapping_values": [1, 2, 2, 1, 1, 0, 33, 33, 19, 14, 3, 8, 5, 4, 1, 0, 3, 1, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(beta, tf.math.add(beta, grad)), grad)))), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))))), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.962914288681669, 1.5110833610069356, 1.040419714089634, 0.883610563082324, 0.8384951370078275, 0.7811573571091898, 0.7719407083729648, 0.7132820931360816, 0.699340503552114, 0.6551766127186555, 0.6636904213627206, 0.6440262657036289, 0.610836306071442, 0.6266470392224905, 0.600938856184459, 0.6158560254334176, 0.5827861630590663, 0.5638291284416361, 0.5747644116755379, 0.5421983381902317, 0.5463729751360431, 0.5444207544009353, 0.5420739292515866, 0.5263257313595, 0.5093277659768584, 0.506906317445848, 0.49179907337376283, 0.4994839706818945, 0.4835365805305022, 0.4757510570880838, 0.4607468712536131, 0.45956567740317555, 0.46701596517289523, 0.449248012109534, 0.44720300215661424, 0.44203281822993123, 0.4326616791513035, 0.44012476524908656, 0.43181551845869476, 0.4283192906562663, 0.420494023031956], "accuracy": [0.35305771231651306, 0.48949941992759705, 0.6304318904876709, 0.6728305220603943, 0.6837934255599976, 0.7069079279899597, 0.7066437602043152, 0.7301545143127441, 0.7325320243835449, 0.7528728246688843, 0.7427024245262146, 0.7535332441329956, 0.7740060687065125, 0.7611940503120422, 0.7721568942070007, 0.767930269241333, 0.778232753276825, 0.7918372750282288, 0.7807422876358032, 0.7942147850990295, 0.7947431206703186, 0.7948752045631409, 0.7952714562416077, 0.8014793395996094, 0.8055738806724548, 0.8120459914207458, 0.8168009519577026, 0.8109893202781677, 0.821820080280304, 0.8226125836372375, 0.8290846943855286, 0.8315942287445068, 0.8271034359931946, 0.8321225643157959, 0.8272355198860168, 0.8325188159942627, 0.8391229510307312, 0.8392550349235535, 0.8399154543876648, 0.8411042094230652, 0.8449346423149109], "val_loss": [1.7539120401654924, 0.9775460106985909, 0.7426495381764003, 0.701571158000401, 0.6353128126689366, 0.650623117174421, 0.5350465433938163, 0.5329150642667498, 0.5020993437085833, 0.48353937694004606, 0.5088302578244891, 0.5016199350357056, 0.5303472280502319, 0.48054347719464985, 0.4688641003199986, 0.46005109378269743, 0.4546305111476353, 0.43207511731556486, 0.42806577682495117, 0.4073379124913897, 0.42227636916296823, 0.4638261454445975, 0.4324116451399667, 0.3947404282433646, 0.4075458220073155, 0.41384656940187725, 0.41267746686935425, 0.4181999904768808, 0.37523196424756733, 0.3735127534185137, 0.36522760561534334, 0.38149450506482807, 0.3639836737087795, 0.3712688854762486, 0.3636991211346218, 0.3518877455166408, 0.36070452417646137, 0.36688877855028423, 0.37117152554648264, 0.3612129773412432, 0.3479647551264082], "val_accuracy": [0.4819999933242798, 0.6499999761581421, 0.659333348274231, 0.6596666574478149, 0.7059999704360962, 0.7036666870117188, 0.7649999856948853, 0.762666642665863, 0.7726666927337646, 0.7776666879653931, 0.7693333625793457, 0.7803333401679993, 0.734333336353302, 0.765333354473114, 0.784333348274231, 0.7863333225250244, 0.7943333387374878, 0.8100000023841858, 0.812666654586792, 0.8263333439826965, 0.8050000071525574, 0.793666660785675, 0.812333345413208, 0.8276666402816772, 0.8159999847412109, 0.8090000152587891, 0.8056666851043701, 0.809333324432373, 0.8443333506584167, 0.8416666388511658, 0.8396666646003723, 0.8333333134651184, 0.8456666469573975, 0.8363333344459534, 0.8389999866485596, 0.8536666631698608, 0.8420000076293945, 0.8399999737739563, 0.8309999704360962, 0.840666651725769, 0.846666693687439]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 6, 8, 7, 6, 1, 6, 6, 3, 8, 2, 3, 1, 8, 3, 3, 1, 8, 9, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 5, 2, 3, 3, 2, 3, 1, 3, 3, 0, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 5, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1], [1, 4, 1, 0, 2, 6], [1, 0], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7871428728103638, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 21, 14, 4, 8, 5, 4, 1, 0, 3, 1, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.subtract(grad, tf.math.add(beta, beta)), grad)))))), tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))))))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.negative(sigma)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9851673969015107, 1.4201389446769959, 1.018367275168568, 0.8935421983390484, 0.8513952547202351, 0.7784205385092747, 0.7578866349754868, 0.7151273361302292, 0.6975772267382426, 0.68245198928669, 0.6662715543703617, 0.6720398270994082, 0.631288416664976, 0.6292426856737788, 0.6114274528457693, 0.6026013832538828, 0.5869291578427502, 0.5747715429607211, 0.5834729889789829, 0.5473905735169545, 0.5542256064843886], "accuracy": [0.33258485794067383, 0.5090476870536804, 0.640338122844696, 0.6724342703819275, 0.6778497099876404, 0.7086250185966492, 0.7169462442398071, 0.7264562249183655, 0.7411174178123474, 0.7458723783493042, 0.7512878179550171, 0.7531369924545288, 0.759609043598175, 0.7675340175628662, 0.7725531458854675, 0.7695152759552002, 0.7773081660270691, 0.7821952104568481, 0.7835160493850708, 0.7942147850990295, 0.7913089394569397], "val_loss": [1.4462389945983887, 0.8002939053944179, 0.6694507769175938, 0.6449342114584786, 0.6283221926007952, 0.6008852209363665, 0.5815515347889492, 0.5472750663757324, 0.5669948714120048, 0.5027328899928502, 0.5465311663491386, 0.4714489153453282, 0.4820260150091989, 0.5176888193402972, 0.45592284202575684, 0.4529834985733032, 0.4692369018282209, 0.47947250093732563, 0.4529886075428554, 0.44034822498049053, 0.4369125621659415], "val_accuracy": [0.437666654586792, 0.6700000166893005, 0.718999981880188, 0.6930000185966492, 0.6993333101272583, 0.7009999752044678, 0.7266666889190674, 0.7563333511352539, 0.7390000224113464, 0.7860000133514404, 0.7573333382606506, 0.781000018119812, 0.7863333225250244, 0.7476666569709778, 0.7919999957084656, 0.8016666769981384, 0.7773333191871643, 0.7666666507720947, 0.7896666526794434, 0.7929999828338623, 0.7963333129882812]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 5, 3, 3, 3, 0, 3, 2, 3, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 1, 0], [0, 1, 1, 1], [8, 4], [1, 0], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [5, 9, 44]], "fitness": -0.7034285664558411, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(alpha, tf.math.add(beta, grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.299695077998653, 2.2999431065690517, 2.2959840623946035, 2.2891583397970727, 2.281523262394764, 2.2713612874957785, 2.2581803423617384, 2.245812072257608, 2.229149496928497, 2.209773036356946, 2.191544457543811, 2.1631966851816014, 2.1376223822059477, 2.101995005284507, 2.0588045922630673, 2.004605435613376, 1.94318040820822, 1.8806714564266616, 1.7972243419963891, 1.7158420026388939, 1.6389709389551426, 1.5561147636473533, 1.4738480552879416, 1.444417690619848, 1.3979862037351842, 1.3693224969021696, 1.3508316731928456, 1.3538774215250817, 1.3694777255517427, 1.3723169319728237, 1.3464024940958554, 1.3449712553201902, 1.25365294129731, 1.224003888927415, 1.1842938929091607, 1.1245748827470339, 1.0901052805694371, 1.0197540332832986, 0.9694589854404675, 0.9273271219227466, 0.9110532720343091, 0.9075304098164543, 0.9000099684269106, 0.9031199992939056, 0.8941696453261385], "accuracy": [0.09866596013307571, 0.0956280529499054, 0.10553427785634995, 0.11979923397302628, 0.14238542318344116, 0.17091533541679382, 0.21265354752540588, 0.23920221626758575, 0.2740721106529236, 0.3053757846355438, 0.3183199167251587, 0.35081231594085693, 0.3605864346027374, 0.38105931878089905, 0.3901730179786682, 0.40747588872909546, 0.4177783727645874, 0.42808082699775696, 0.4435345530509949, 0.44789329171180725, 0.45568618178367615, 0.4744419455528259, 0.49253731966018677, 0.49887728691101074, 0.5155197381973267, 0.5284639000892639, 0.5336151123046875, 0.54220050573349, 0.5456346869468689, 0.5509179830551147, 0.5602958798408508, 0.5650508403778076, 0.5968828201293945, 0.5979394912719727, 0.6168273687362671, 0.6302998065948486, 0.643772304058075, 0.6524897813796997, 0.6530181169509888, 0.6618676781654358, 0.666358470916748, 0.6623960137367249, 0.6642451286315918, 0.6653017997741699, 0.6707172393798828], "val_loss": [1.9698611668178014, 1.9667832510811942, 1.961782387324742, 1.9549495152064733, 1.9463765280587333, 1.936208929334368, 1.9244728769574846, 1.9112018857683455, 1.8961844444274902, 1.8787995065961565, 1.8581530026027135, 1.8332654408046178, 1.803013801574707, 1.7663662093026298, 1.7220779146466936, 1.6688103675842285, 1.6055243355887276, 1.5320594310760498, 1.449526309967041, 1.3604466233934676, 1.2693018232073103, 1.1814854485648019, 1.1012189728873116, 1.030745165688651, 0.9698411055973598, 0.9170513153076172, 0.8710473264966693, 0.8348155702863421, 0.81578186580113, 0.8079075472695487, 0.7909514904022217, 0.7634692702974591, 0.746800456728254, 0.7450180905205863, 0.7449278320584979, 0.7333747829709735, 0.7086681808744159, 0.679571441241673, 0.6570151022502354, 0.6511216163635254, 0.6551796197891235, 0.6618550334657941, 0.6681675910949707, 0.6748197078704834, 0.6832341636930194], "val_accuracy": [0.0403333343565464, 0.06433333456516266, 0.11433333158493042, 0.1756666600704193, 0.25099998712539673, 0.31066668033599854, 0.3400000035762787, 0.3556666672229767, 0.36399999260902405, 0.37966665625572205, 0.39133334159851074, 0.40066665410995483, 0.4126666784286499, 0.4339999854564667, 0.4546666741371155, 0.47099998593330383, 0.48533332347869873, 0.5019999742507935, 0.5236666798591614, 0.5429999828338623, 0.5663333535194397, 0.5849999785423279, 0.6046666502952576, 0.640333354473114, 0.6583333611488342, 0.6653333306312561, 0.6683333516120911, 0.6683333516120911, 0.6756666898727417, 0.6566666960716248, 0.6646666526794434, 0.6946666836738586, 0.6949999928474426, 0.6959999799728394, 0.699999988079071, 0.7043333053588867, 0.7083333134651184, 0.7126666903495789, 0.7239999771118164, 0.7269999980926514, 0.7160000205039978, 0.706333339214325, 0.7020000219345093, 0.7046666741371155, 0.7106666564941406]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 1, 0], [0, 1, 1, 1], [5, 1], [1, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [16, 9, 44]], "fitness": -0.6945714354515076, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2978081333796267, 2.286003455257907, 2.2583057252470495, 2.2168729108448404, 2.156192729690717, 2.056838783668631, 1.8993337146358216, 1.69726612699849, 1.488720885924124, 1.3712638793856382, 1.3643819766037688, 1.3649113934037864, 1.2672811261163082, 1.1380243815010282, 0.9873176653781005, 0.9136260584707289, 0.8911826558998626, 0.906609510740883, 0.9075217099473807, 0.8726893717177304], "accuracy": [0.10381719470024109, 0.13247919082641602, 0.21159687638282776, 0.2922995686531067, 0.3509443998336792, 0.3851538896560669, 0.4279487431049347, 0.44908201694488525, 0.49412229657173157, 0.5309734344482422, 0.549068808555603, 0.5601637959480286, 0.5910711884498596, 0.6263373494148254, 0.6552634835243225, 0.6608110070228577, 0.6668868064880371, 0.6733588576316833, 0.6828688383102417, 0.6852463483810425], "val_loss": [1.9632226399012975, 1.9425713675362724, 1.910668168749128, 1.8652150290352958, 1.7925331933157784, 1.6725576945713587, 1.4848663125719344, 1.248643466404506, 1.0405337810516357, 0.8971635614122663, 0.8155769620622907, 0.7751176527568272, 0.7508425542286464, 0.7149203675133842, 0.6565484489713397, 0.6642042568751744, 0.6810425519943237, 0.7014402832303729, 0.6834814037595477, 0.6408718994685582], "val_accuracy": [0.09933333098888397, 0.27566665410995483, 0.3463333249092102, 0.3813333213329315, 0.4129999876022339, 0.4633333384990692, 0.5096666812896729, 0.5693333148956299, 0.6323333382606506, 0.6639999747276306, 0.6769999861717224, 0.6883333325386047, 0.7006666660308838, 0.7103333473205566, 0.7243333458900452, 0.6980000138282776, 0.7123333215713501, 0.7213333249092102, 0.7160000205039978, 0.715666651725769]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 5, 5, 3, 3, 3, 3, 5, 2, 3, 2, 0, 1, 1, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 1], [1, 0, 1, 1], [6, 1], [1, 0], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.6625714302062988, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.005635094412755, 1.5115527817759264, 0.9005455105390688, 0.7763328104837302, 0.7439653828805071, 0.7343584623681304, 0.7079141584086365, 0.7180901337230462, 0.7458006151127793, 0.7822250699669442, 0.8045844227693588, 0.8235876902912302, 0.9817340536171718, 1.737609198505632], "accuracy": [0.35385021567344666, 0.5448421835899353, 0.6664905548095703, 0.7182670831680298, 0.724739134311676, 0.7281733155250549, 0.7450799345970154, 0.7284374833106995, 0.7279091477394104, 0.7300224304199219, 0.7135120630264282, 0.707040011882782, 0.7132478952407837, 0.5976753234863281], "val_loss": [1.6792197908673967, 0.6900252103805542, 0.5892629112516131, 0.5571238143103463, 0.5210436582565308, 0.5076452834265572, 0.514143739427839, 0.5682864529745919, 0.5652302844183785, 0.5371436391557965, 0.5650825159890311, 0.5637648957116264, 0.8617641244615827, 1.0735080242156982], "val_accuracy": [0.5249999761581421, 0.7086666822433472, 0.7236666679382324, 0.7480000257492065, 0.7680000066757202, 0.7723333239555359, 0.7703333497047424, 0.7429999709129333, 0.7743333578109741, 0.7606666684150696, 0.7636666893959045, 0.7559999823570251, 0.6626666784286499, 0.5873333215713501]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 2, 7, 8, 3, 2, 6, 3, 8, 2, 3, 0, 8, 3, 3, 0, 8, 2, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 5, 3, 3, 3, 0, 3, 2, 3, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [34, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 1, 0], [0, 1, 1, 1], [1, 4], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [16, 9, 44]], "fitness": -0.6011428833007812, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 20, 15, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, grad))), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.sqrt(beta))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(beta)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, grad)))))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2990039375243705, 2.2989018885781656, 2.2966799836794243, 2.2936447311023977, 2.291742730937409, 2.2893733749016794, 2.2855759672815648, 2.284560551055749, 2.281169954906318, 2.276961499232941, 2.27752032467025, 2.2728137283781185, 2.2728848260202588, 2.2701168036684463, 2.2673346681082176, 2.264609049780809, 2.2616540129473495, 2.2606715056968953, 2.2570328334571035, 2.2528670216752964, 2.2522988420168266, 2.2485099385805323, 2.2443225310384447, 2.2414156442714517, 2.2401334295624267, 2.2359120337529474, 2.231898941494266, 2.2286196751695946, 2.2267530001606435, 2.223229552209653, 2.2200261451281325, 2.2180146679760457, 2.2108417795854174, 2.209676957007617, 2.2046093888144846, 2.200810494880792, 2.198696873931522, 2.192398879569299, 2.1914741648123672, 2.184319946759916, 2.1787918327254956, 2.1772016936982266, 2.17066137404285, 2.166549495245566, 2.1597775767397778, 2.1552700350517924, 2.152215021129896, 2.1433768910093236, 2.1399189960750307, 2.1306067870639773, 2.1272542182842753, 2.1208770853291257, 2.1139197364034215, 2.107043590213109, 2.098215797337653, 2.091338761525777, 2.085333721937835, 2.080592333632784, 2.071895880170738, 2.0632080931657844, 2.0557261660523842, 2.0485515833814243, 2.038716861458817, 2.0303773934799274, 2.020491432756276, 2.012418237045504, 2.0045335417205727, 1.9943351788590724, 1.9831563278731574, 1.9765470241432759, 1.9655779588649207, 1.9539691795683682, 1.9434236053305058, 1.9335515938572296, 1.9184308549306333, 1.9129077954582645, 1.9025793683023469, 1.8877457146316456, 1.8809105206190901, 1.8633913624445682, 1.8544594100784113, 1.8445404303497437, 1.8273807411668732, 1.8141595129764563, 1.8072747999666672, 1.7857974499538827, 1.7812953695818228, 1.7713705902605985, 1.749612065306933, 1.7526422675731963, 1.732176978543072, 1.7210244666693972, 1.7041512351891999, 1.690522139413466, 1.6812442787854647, 1.6721968350393457, 1.65932359644734, 1.6491169826686185, 1.632603553984978, 1.6237920916800044], "accuracy": [0.10038304328918457, 0.09734513610601425, 0.10368511080741882, 0.10936468094587326, 0.11398758739233017, 0.12349755316972733, 0.13472460210323334, 0.13697001338005066, 0.14621582627296448, 0.15374454855918884, 0.15295206010341644, 0.1636507660150528, 0.1666886806488037, 0.175670325756073, 0.18861444294452667, 0.18874652683734894, 0.19601109623908997, 0.1982565075159073, 0.21120063960552216, 0.21833311021327972, 0.2141064554452896, 0.22401267290115356, 0.23352265357971191, 0.23973055183887482, 0.24897634983062744, 0.2475234419107437, 0.2620525658130646, 0.2697133719921112, 0.2641659080982208, 0.2735437750816345, 0.27618545293807983, 0.2818650007247925, 0.29863953590393066, 0.28939375281333923, 0.3016774654388428, 0.30365869402885437, 0.30445119738578796, 0.3143574297428131, 0.311319500207901, 0.32426363229751587, 0.33126401901245117, 0.32743361592292786, 0.3295469582080841, 0.3343019485473633, 0.3409060835838318, 0.34566107392311096, 0.34447231888771057, 0.3555673062801361, 0.3572843670845032, 0.3615110218524933, 0.3691718280315399, 0.3683793544769287, 0.3691718280315399, 0.3751155734062195, 0.38383305072784424, 0.3859463632106781, 0.38053098320961, 0.3843613862991333, 0.39202219247817993, 0.3910976052284241, 0.3871351182460785, 0.4060229957103729, 0.40443798899650574, 0.41183462738990784, 0.4111742079257965, 0.4130233824253082, 0.4189670979976654, 0.419759601354599, 0.4233258366584778, 0.4220050275325775, 0.4251750111579895, 0.4336283206939697, 0.4271562397480011, 0.4352133274078369, 0.43468499183654785, 0.4365341365337372, 0.4367983043193817, 0.4414212107658386, 0.4435345530509949, 0.4497424364089966, 0.4468366205692291, 0.45027077198028564, 0.4581957459449768, 0.4667811393737793, 0.4636111557483673, 0.4706115424633026, 0.4690265357494354, 0.46691322326660156, 0.4807819426059723, 0.4637432396411896, 0.4788006842136383, 0.47787609696388245, 0.47985735535621643, 0.4859331548213959, 0.4880464971065521, 0.48632940649986267, 0.48632940649986267, 0.4916127324104309, 0.4935939908027649, 0.4967639744281769], "val_loss": [1.968696049281529, 1.966449396950858, 1.964193889072963, 1.9619577271597726, 1.9597384589059013, 1.9575072016034807, 1.9552754674639021, 1.953035490853446, 1.9507834570748466, 1.9485365322657995, 1.9462741443089075, 1.9439642769949776, 1.9416723932538713, 1.939368452344622, 1.9370200974600655, 1.9346165657043457, 1.9321794509887695, 1.929773943764823, 1.9272829464503698, 1.9247440610613142, 1.9222019740513392, 1.9195711272103446, 1.9168621471949987, 1.9141131128583635, 1.911301612854004, 1.9084193365914481, 1.9054675102233887, 1.9024297169276647, 1.8993548665727888, 1.8961704117911202, 1.8928872517177038, 1.8895395823887415, 1.8860594204493932, 1.882535661969866, 1.87887362071446, 1.8750995908464705, 1.87123475755964, 1.867272240774972, 1.8632239614214217, 1.8590404646737235, 1.8546778133937292, 1.850255080631801, 1.845620836530413, 1.8409068925040108, 1.8359829357692175, 1.8310024397713798, 1.8258669035775321, 1.8205438341413225, 1.8150952884129115, 1.8094190188816615, 1.8036362103053503, 1.7977303096226283, 1.7916173253740584, 1.7853666033063615, 1.7788544382367815, 1.7721702030726842, 1.765319756099156, 1.758364200592041, 1.751215866633824, 1.7438394682747977, 1.736294882638114, 1.7285476412091936, 1.7206042834690638, 1.7124453272138322, 1.7040576934814453, 1.6954959801265173, 1.6867172718048096, 1.6776940482003349, 1.6685143538883753, 1.6591248171670097, 1.6495462145124162, 1.6397045339856828, 1.629671573638916, 1.6194955280848913, 1.6090525218418665, 1.5985214029039656, 1.5878252642495292, 1.5768654005868095, 1.5658398015158517, 1.5545296669006348, 1.5431020259857178, 1.5315705708095007, 1.5198472227369035, 1.507911137172154, 1.4959853717258997, 1.4838128771100725, 1.471834761755807, 1.4597217696053642, 1.447263513292585, 1.435229812349592, 1.4229558876582555, 1.410611629486084, 1.3982447215488978, 1.385906151362828, 1.3735670362200056, 1.3613582338605608, 1.349109513419015, 1.3369522775922502, 1.3247804982321603, 1.312671184539795], "val_accuracy": [0.04933333396911621, 0.06733333319425583, 0.08666666597127914, 0.10966666787862778, 0.12999999523162842, 0.14933332800865173, 0.1693333387374878, 0.1913333386182785, 0.21133333444595337, 0.2293333262205124, 0.24633333086967468, 0.26366665959358215, 0.27933332324028015, 0.2919999957084656, 0.3019999861717224, 0.31466665863990784, 0.3240000009536743, 0.3323333263397217, 0.3400000035762787, 0.3473333418369293, 0.3526666760444641, 0.359333336353302, 0.3630000054836273, 0.3656666576862335, 0.3709999918937683, 0.3766666650772095, 0.37933334708213806, 0.382999986410141, 0.3869999945163727, 0.3930000066757202, 0.3956666588783264, 0.40066665410995483, 0.4036666750907898, 0.4090000092983246, 0.41200000047683716, 0.41333332657814026, 0.4163333475589752, 0.41999998688697815, 0.42633333802223206, 0.4300000071525574, 0.4350000023841858, 0.4363333284854889, 0.43799999356269836, 0.4426666796207428, 0.44566667079925537, 0.4506666660308838, 0.453000009059906, 0.4556666612625122, 0.45766666531562805, 0.4606666564941406, 0.46533334255218506, 0.4673333466053009, 0.4690000116825104, 0.4726666808128357, 0.4749999940395355, 0.47699999809265137, 0.4806666672229767, 0.48399999737739563, 0.48766666650772095, 0.4896666705608368, 0.492000013589859, 0.49666666984558105, 0.49966666102409363, 0.5006666779518127, 0.503000020980835, 0.5053333044052124, 0.5096666812896729, 0.5133333206176758, 0.5170000195503235, 0.5196666717529297, 0.5220000147819519, 0.5233333110809326, 0.5273333191871643, 0.5303333401679993, 0.5333333611488342, 0.5363333225250244, 0.5403333306312561, 0.5426666736602783, 0.5463333129882812, 0.5483333468437195, 0.5506666898727417, 0.5529999732971191, 0.5550000071525574, 0.5556666851043701, 0.5580000281333923, 0.5600000023841858, 0.5619999766349792, 0.5643333196640015, 0.5666666626930237, 0.5683333277702332, 0.5713333487510681, 0.5743333101272583, 0.5753333568572998, 0.578000009059906, 0.5826666951179504, 0.5843333601951599, 0.5879999995231628, 0.5913333296775818, 0.593999981880188, 0.5946666598320007]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 1, 7, 2, 1, 6, 6, 3, 2, 2, 3, 3, 0, 3, 3, 0, 8, 9, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 2, 2, 2, 3, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 97, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 1, 0, 3], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.5708571672439575, "mapping_values": [1, 2, 2, 1, 1, 0, 34, 34, 19, 15, 4, 8, 5, 4, 1, 0, 3, 1, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(beta, beta)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.negative(beta), tf.math.add(beta, grad)), beta)), grad)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.006243837413503, 1.5295309384642906, 0.8968150330855783, 0.7729829573722611, 0.728460650000952, 0.6946141792326209, 0.656503959016053, 0.6588407857716281, 0.6624104108997482, 0.6853792564885617, 0.7303673757963239, 0.783361789226343, 1.0644800364616887, 1.1089875244618785], "accuracy": [0.3537181317806244, 0.5399550795555115, 0.6696605682373047, 0.7170783281326294, 0.7304186820983887, 0.739928662776947, 0.7593448758125305, 0.7510236501693726, 0.759080708026886, 0.7508915662765503, 0.746268630027771, 0.739400327205658, 0.6761326193809509, 0.6573768258094788], "val_loss": [1.6810938630785262, 0.6869186844144549, 0.5844247511454991, 0.5582055364336286, 0.5130091564995902, 0.4746206317629133, 0.47823124272482737, 0.49320110252925325, 0.5049573353358677, 0.48687643664223806, 0.5585971730096, 0.6704417807715279, 0.7003543036324638, 0.7282205309186663], "val_accuracy": [0.5233333110809326, 0.7089999914169312, 0.7289999723434448, 0.7443333268165588, 0.7676666378974915, 0.7856666445732117, 0.7943333387374878, 0.7833333611488342, 0.796999990940094, 0.7950000166893005, 0.7793333530426025, 0.7173333168029785, 0.7266666889190674, 0.7106666564941406]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 4, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 1, 1, 1], [1, 4], [1, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [6, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 2, 3, 1, 1], [43, 9, 44]], "fitness": -0.1508571356534958, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.26030517307806, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.3206973969936371, 0.11755382269620895, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.319631780896868, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.18700000643730164, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 9, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 4, 0, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [85, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0], [0, 1, 1, 1], [1, 4], [7, 0], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [17, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 1, 1, 1, 0, 1, 3, 2, 1, 1, 0, 12, 7, 5, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 2, 1, 8, 4, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 9, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 4, 0, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 32, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0], [0, 1, 1, 1], [5, 1], [1, 2], [76], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [13, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 12, 7, 5, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.negative(alpha), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 5, 2, 3, 3, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 5, 0, 9], [1, 0], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [0, 3, 0, 3, 1, 1], [49, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 4, 4, 0, 1, 3, 1, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [124895664.82694474, 2341234412.692643, 10437965439.340641, 28700008525.36468, 60021338477.18294, 109651452000.3001], "accuracy": [0.1022322028875351, 0.09615638852119446, 0.09536388516426086, 0.09549596905708313, 0.09959053993225098, 0.1014397069811821], "val_loss": [476104795.4285714, 3647982665.142857, 11965778505.142857, 27849818112.0, 53743015643.42857, 92098082523.42857], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 2, 1, 7, 6, 1, 6, 6, 3, 8, 2, 3, 8, 8, 3, 4, 0, 8, 9, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 5, 2, 3, 3, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 5, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3029421777804577, 2.302903756961815, 2.3030502674617725, 2.30285249029121, 2.303008254744893, 2.3030097075205247, 2.3030496522845247, 2.302943458268671], "accuracy": [0.09113723784685135, 0.09536388516426086, 0.0952318087220192, 0.09813763201236725, 0.09906221181154251, 0.09325055778026581, 0.0936468094587326, 0.10130762308835983], "val_loss": [1.9736783163888114, 1.9736508641924178, 1.9736386026654924, 1.9737418719700404, 1.97364228112357, 1.9736918721880232, 1.9736910547528947, 1.9737258638654436], "val_accuracy": [0.09866666793823242, 0.09966666996479034, 0.10400000214576721, 0.1003333330154419, 0.10100000351667404, 0.10100000351667404, 0.1003333330154419, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 32, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1], [1, 4, 0, 3], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 3, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.307479315650556, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08994849026203156, 0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0217649596078053, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 1, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 1, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 5, 5, 3, 2, 3, 3, 5, 2, 3, 2, 0, 1, 1, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 0, 1, 1], [5, 1], [1, 4], [76], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [8, 1, 0, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 1, 9, 9, 4, 5, 0, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.subtract(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 0, 1, 1], [5, 1], [1, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [8, 1, 0, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 20, 17, 3, 4, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad))))), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 5, 3, 3, 3, 0, 3, 2, 3, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0], [0, 1, 1, 1], [6, 8, 0, 5], [7, 0], [43], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 30, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 3, 2, 1, 1, 0, 12, 7, 5, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.subtract(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 1, 7, 6, 1, 6, 6, 3, 8, 2, 3, 3, 8, 1, 3, 0, 8, 9, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 5, 2, 3, 3, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [85, 15, 19, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0], [1, 4, 9, 7], [3, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [3, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 35, 35, 20, 15, 3, 5, 4, 3, 1, 1, 5, 2, 3, 2], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, beta)))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.multiply(grad, tf.math.add(beta, beta)), grad))))), tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [4.167299881051985, 98.92803969387649, 1105.6057802219716, 7169.259019046774, 30176.301299778763, 98257.64463701955], "accuracy": [0.09787346422672272, 0.09628847241401672, 0.0956280529499054, 0.09509972482919693, 0.09998679161071777, 0.10157178342342377], "val_loss": [12.257844652448382, 230.05572509765625, 1971.4806082589287, 10146.450892857143, 37167.755580357145, 108418.04241071429], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 9, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 4, 0, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [85, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 0, 0], [0, 1, 1, 1], [1, 4, 0, 3], [3, 0], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [17, 9, 44]], "fitness": -0.07742857187986374, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.2996999570612013, 2.301042374902004, 2.3007351258458906, 2.300175829712174, 2.3005816496878158, 2.30036678602037, 2.299046003996436, 2.299773988470567, 2.2990356868740873, 2.297748502345369, 2.29967584611245, 2.298666824580908, 2.300190966410518, 2.3003879444332425, 2.3001135037071623, 2.3003139852328056], "accuracy": [0.09945846349000931, 0.09285431355237961, 0.09655263274908066, 0.09760929644107819, 0.09800554811954498, 0.09932637959718704, 0.09694888442754745, 0.09734513610601425, 0.09985470771789551, 0.10355303436517715, 0.09721305221319199, 0.09959053993225098, 0.09721305221319199, 0.09536388516426086, 0.1006472036242485, 0.09417514503002167], "val_loss": [1.9703853470938546, 1.9697994504656111, 1.9696566717965263, 1.9696734292166573, 1.969740867614746, 1.9697960444859095, 1.9698051043919154, 1.9696770395551408, 1.9696756090436662, 1.9697895050048828, 1.9699162755693709, 1.97015346799578, 1.9704042162214006, 1.970592430659703, 1.9707670892987932, 1.9709196090698242], "val_accuracy": [0.04333333298563957, 0.049666665494441986, 0.0573333315551281, 0.061000000685453415, 0.06433333456516266, 0.06700000166893005, 0.0716666653752327, 0.07466666400432587, 0.07633333653211594, 0.07699999958276749, 0.07800000160932541, 0.07699999958276749, 0.07400000095367432, 0.07500000298023224, 0.07466666400432587, 0.07433333247900009]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 5, 1, 3, 3, 0, 3, 2, 3, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0], [1, 1, 1, 1], [5, 1], [1, 2], [76], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 3, 0, 3, 1, 5, 5, 0, 7, 5], [0, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 0, 1, 1, 0, 1, 0, 12, 7, 5, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(grad, alpha), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha)))", "other_info": {"loss": [2.3000129392165642, 2.302325842355646, 2.302586763510693, 2.301944591334278, 2.302463912630062, 2.30249364516833], "accuracy": [0.09840179979801178, 0.09008057415485382, 0.09140139818191528, 0.09060890227556229, 0.08717474341392517, 0.09338264167308807], "val_loss": [1.9709816660199846, 1.9709817341395788, 1.9709817341395788, 1.9709816660199846, 1.9709817341395788, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 4, 0, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [2, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0], [1, 4, 9], [7, 0], [43, 70], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [17, 9, 44]], "fitness": -0.02914285659790039, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 5, 5, 3, 2, 2, 5, 2, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3007473733997963, 2.3078775175369457, 2.3182949737046985, 2.333395638218362, 2.3566411632698574, 2.387232258114848], "accuracy": [0.09694888442754745, 0.07753269374370575, 0.06234315037727356, 0.044511955231428146, 0.028397833928465843, 0.01862369477748871], "val_loss": [1.9735593114580428, 1.9807346207754952, 1.9928685597011022, 2.0104757717677524, 2.034430571964809, 2.0664423533848355], "val_accuracy": [0.026000000536441803, 0.013000000268220901, 0.0063333334401249886, 0.006666666828095913, 0.0063333334401249886, 0.005333333276212215]}}]