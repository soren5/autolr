[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8148571252822876, "mapping_values": [1, 2, 2, 1, 1, 0, 66, 66, 42, 24, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, alpha))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))))))), tf.math.add(beta, beta))))))))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(beta, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.975365958681763, 1.4407490004228485, 1.0793941689913755, 0.8810050159696701, 0.8218548002417503, 0.782323870400963, 0.7451329410761072, 0.7094861177594481, 0.6977996171237203, 0.6850279913114251, 0.691157570895801, 0.636911421396225, 0.6174871456495539, 0.6549989441760291, 0.6039240491105234, 0.5996957303368893, 0.5790156341853978, 0.5761062093398921, 0.5763272688987469, 0.5704104338402698, 0.5568726712040944, 0.5161764834377791, 0.5211313647632475, 0.5184884788873189, 0.5317085161421355, 0.5030622215334608], "accuracy": [0.3509443998336792, 0.5008585453033447, 0.6079778075218201, 0.6709813475608826, 0.6931713223457336, 0.7094175219535828, 0.7147008180618286, 0.728701651096344, 0.733588695526123, 0.741909921169281, 0.7346453666687012, 0.7555144429206848, 0.7646281719207764, 0.7497028112411499, 0.7672698497772217, 0.7753269076347351, 0.7812706232070923, 0.7839123010635376, 0.7812706232070923, 0.7891955971717834, 0.7807422876358032, 0.8059701323509216, 0.8050455451011658, 0.8018755912780762, 0.8041210174560547, 0.8092722296714783], "val_loss": [1.5438264097486223, 0.7996494088854108, 0.7279582364218575, 0.635967527117048, 0.5905334949493408, 0.5553958756583077, 0.5527234928948539, 0.5657004969460624, 0.49823018482753206, 0.5117271797997611, 0.533358131136213, 0.4706449338368007, 0.5559863192694527, 0.4854001828602382, 0.5081239768436977, 0.45401338168552946, 0.44633497510637554, 0.4377856084278652, 0.4242738059588841, 0.46860737460000174, 0.4103378312928336, 0.4082321013723101, 0.40844471965517315, 0.42050797598702566, 0.4105127283505031, 0.40660107135772705], "val_accuracy": [0.37599998712539673, 0.6763333082199097, 0.6779999732971191, 0.7263333201408386, 0.7289999723434448, 0.7603333592414856, 0.737666666507721, 0.7453333139419556, 0.768666684627533, 0.7603333592414856, 0.7436666488647461, 0.7860000133514404, 0.7233333587646484, 0.7699999809265137, 0.750333309173584, 0.7896666526794434, 0.7960000038146973, 0.8009999990463257, 0.8140000104904175, 0.7903333306312561, 0.8240000009536743, 0.8193333148956299, 0.8240000009536743, 0.8143333196640015, 0.8159999847412109, 0.8119999766349792]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 6, 5, 5, 7, 4, 0, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 4, 0, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.7805714011192322, "mapping_values": [1, 2, 2, 1, 1, 0, 20, 20, 13, 7, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9947859957989384, 1.366943057013887, 1.0255371949156562, 0.8844701838279209, 0.8019314370985438, 0.7776701352410801, 0.7085228801450678, 0.6922590375072558, 0.6702814658225693, 0.650269280555714, 0.6587671019130017, 0.6247178114967387, 0.6195339124200524], "accuracy": [0.33166027069091797, 0.518161416053772, 0.6264694333076477, 0.6696605682373047, 0.6996433734893799, 0.7098137736320496, 0.7292299270629883, 0.739928662776947, 0.7391361594200134, 0.7512878179550171, 0.7453441023826599, 0.7656848430633545, 0.7619865536689758], "val_loss": [1.3935833317892892, 0.7474209240504673, 0.7010273081915719, 0.6162572417940412, 0.5783539158957345, 0.5587911094938006, 0.5701727867126465, 0.5058298110961914, 0.5460338592529297, 0.5015639747892108, 0.49504188128880094, 0.4821170227868216, 0.4952749354498727], "val_accuracy": [0.39533331990242004, 0.6976666450500488, 0.6756666898727417, 0.7369999885559082, 0.746666669845581, 0.7516666650772095, 0.7239999771118164, 0.7863333225250244, 0.7443333268165588, 0.7796666622161865, 0.7836666703224182, 0.7850000262260437, 0.7556666731834412]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [7, 0, 1, 6, 2, 5, 6, 4, 0, 2, 2, 2, 2, 2, 3, 8, 8, 2, 7, 2, 3, 9, 3, 2, 2, 3, 8, 2, 8, 3, 8], [4, 3, 5, 3, 1, 4, 0, 5, 2, 1, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [11, 61, 23, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 41, 44]], "fitness": -0.6945714354515076, "mapping_values": [1, 2, 2, 1, 1, 0, 53, 53, 31, 22, 3, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad))), tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))))))))))), grad)), grad))))))))), grad)), tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(grad, tf.math.sqrt(tf.math.multiply(tf.math.sqrt(grad), tf.math.add(beta, alpha))))), grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.125043143339287, 1.2628249554838156, 0.9153370783628489, 0.8247553414247292, 0.7660432033188638, 0.6718990544538457, 0.6263757065271169, 0.5845302184338835, 0.5599201022043456, 0.545457342509911, 0.5213252972098484, 0.5057749162103207, 0.5076590303212046, 0.4833743884153748, 0.4790558825158298, 0.44416107528827853, 0.45433466671606204, 0.4500583570394943, 0.42392259717711905, 0.44285119169927656, 0.44066373465193764], "accuracy": [0.2813366651535034, 0.5801082849502563, 0.6609430909156799, 0.6827367544174194, 0.7224937081336975, 0.7464007139205933, 0.7630431652069092, 0.7788931727409363, 0.7817989587783813, 0.7921014428138733, 0.804649293422699, 0.8124422430992126, 0.8121780753135681, 0.8169330358505249, 0.8236692547798157, 0.83119797706604, 0.8298771381378174, 0.8265751004219055, 0.8368775844573975, 0.8383304476737976, 0.8342359066009521], "val_loss": [1.1075286184038435, 0.7463798522949219, 0.6098054136548724, 0.6067606210708618, 0.5277360848018101, 0.47586563655308317, 0.44302012239183697, 0.43224988664899555, 0.4247446060180664, 0.4118227022034781, 0.40848405020577566, 0.40836532626833233, 0.40294184003557476, 0.4235810467175075, 0.397236100264958, 0.44253899369921, 0.40549675055912565, 0.4049177084650312, 0.43247564349855694, 0.4352156434740339, 0.4173275828361511], "val_accuracy": [0.5946666598320007, 0.6693333387374878, 0.7260000109672546, 0.7333333492279053, 0.7513333559036255, 0.7773333191871643, 0.7993333339691162, 0.8066666722297668, 0.8009999990463257, 0.8159999847412109, 0.8230000138282776, 0.8220000267028809, 0.8286666870117188, 0.8316666483879089, 0.8353333473205566, 0.8416666388511658, 0.8320000171661377, 0.8343333601951599, 0.8386666774749756, 0.8349999785423279, 0.8370000123977661]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [7, 0, 1, 0, 4, 8, 8, 0, 0, 3, 2, 2, 2, 2, 8, 3, 8, 0, 7, 2, 9, 9, 6, 0, 2], [4, 1, 5, 3, 1, 5, 2, 3, 0, 0, 0, 2, 0, 2], [51, 85, 34, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [4, 1, 2, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.6308571696281433, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.065808707381977, 2.303301769996505, 2.325939388448977, 2.3032259524159855, 2.3017459206057733, 2.2548099858114323, 2.090558684890958, 2.026555463055641, 1.687908665174349, 1.6312032956425793, 1.5456637650936853, 2.1162477688719457, 1.7519866783605387, 2.169015733431422, 2.3160325973230096, 2.307498014866007, 2.30622587665638], "accuracy": [0.18835029006004333, 0.10091137140989304, 0.13921542465686798, 0.10130762308835983, 0.10500594228506088, 0.1834632158279419, 0.27063795924186707, 0.3280940353870392, 0.4427420496940613, 0.47127196192741394, 0.49465063214302063, 0.3261128067970276, 0.4006075859069824, 0.3148857355117798, 0.10011887550354004, 0.10408136248588562, 0.1026284471154213], "val_loss": [1.9897345815386092, 1.8244969504220145, 1.9743002482822962, 1.973189353942871, 1.9700100762503487, 1.623328345162528, 1.6120996475219727, 1.3059534345354353, 1.0351826804024833, 1.1406758172171456, 2.65638998576573, 0.9738058362688337, 1.418823480606079, 1.9895368303571428, 1.9765090942382812, 1.974400179726737, 1.973776204245431], "val_accuracy": [0.10433333367109299, 0.2613333463668823, 0.09966666996479034, 0.11266666650772095, 0.16733333468437195, 0.41100001335144043, 0.5410000085830688, 0.5543333292007446, 0.5876666903495789, 0.5676666498184204, 0.38233333826065063, 0.6259999871253967, 0.518666684627533, 0.10400000214576721, 0.10100000351667404, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 6, 5, 5, 7, 4, 0, 4, 6, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 2, 4, 0, 5, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 4, 5, 9, 9, 7, 5], [1, 0, 0, 3, 1, 1], [81, 17, 29, 48]], "fitness": -0.45399999618530273, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 13, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.03191723701992, 2.2932989629126497, 2.304859878490661, 2.130221618542881, 2.401582634003407, 2.304493621954151, 2.302969170063872, 2.2996369917883044, 2.1641782359865283], "accuracy": [0.1880861222743988, 0.13181878626346588, 0.10315678268671036, 0.23735305666923523, 0.13300752639770508, 0.0944393053650856, 0.1006472036242485, 0.12376172095537186, 0.23497556149959564], "val_loss": [1.9894542694091797, 1.9797404153006417, 1.968228816986084, 2.3688806125095914, 1.9750173432486398, 1.9737012726919991, 1.972522803715297, 1.9553879329136439, 1.8874759674072266], "val_accuracy": [0.09533333033323288, 0.09866666793823242, 0.17399999499320984, 0.44733333587646484, 0.10100000351667404, 0.10100000351667404, 0.15166667103767395, 0.2173333317041397, 0.3070000112056732]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 9, 4, 0, 3, 2, 2, 2, 8, 3, 3, 8, 2, 7, 2, 0, 9], [4, 3, 5, 2, 1, 4, 1, 5, 2, 1, 2, 2, 0, 4], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 3, 0, 3, 1, 1], [8, 9, 44]], "fitness": -0.3594285845756531, "mapping_values": [1, 2, 2, 1, 1, 0, 13, 13, 9, 4, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))))), tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3015491351506903, 2.3000528381611174, 2.30012876479507, 2.2992260021823916, 2.298599772811676, 2.298191327019579, 2.298889502211805, 2.2981463043271844, 2.298043760971827, 2.296973671029509, 2.2972467352197374, 2.2970750250316896, 2.2957684502483846, 2.294987244581455, 2.294704647773387, 2.2951175480974726, 2.2936715730161494, 2.2935251268208727, 2.292502579672021, 2.2922194109238876, 2.2919984757860874, 2.2916397398426045, 2.291624056995348, 2.289298458436949, 2.2899121283351187, 2.291011386968834, 2.288562226871757, 2.2885723314296613, 2.2883642598732727, 2.2874695533585663, 2.2868178928721896, 2.2878834879110204, 2.286893061328133, 2.2856874807305134, 2.286559186008833, 2.284485211729484, 2.2851938495326114, 2.283191846173122, 2.283961168889278, 2.283772064914887, 2.281941064612394, 2.284901344009347, 2.2828457102311397, 2.279883560802423, 2.281000759056483, 2.279593413579324, 2.2809069789301497, 2.278064331815007, 2.27882169206554, 2.277742605829094, 2.2779419167702146, 2.2781456237015014, 2.277951361213173, 2.276664590004208, 2.2751823165051106, 2.274703059418799, 2.2750043936724267, 2.274069765728573, 2.2734021990920543, 2.273356491658729, 2.2749410247160315, 2.2720732946185516, 2.27224519460303, 2.2711951311600442, 2.27037773020846, 2.2718385870682485, 2.269233541906848, 2.269232405553074, 2.269088208100673, 2.268238992203559, 2.266693768799187, 2.2669923796141704, 2.2673125724593457, 2.267091828787001, 2.265489829513989, 2.264587289070519, 2.2655025355772747, 2.263551489268595, 2.264858199557797, 2.2648995723769714, 2.261081949437315, 2.2618787018157835, 2.2623942702941733, 2.2619824933495583, 2.260881409306867, 2.2603932139643934, 2.2583038614505098, 2.260193801370232, 2.2592425810552275, 2.2580987528220398, 2.256892432468663, 2.2559571659182356, 2.2584770406950514, 2.255332566649135, 2.2571025029181047, 2.256098490633024, 2.2546637013540796, 2.252617234614358, 2.2535111418237714, 2.2529938225071615], "accuracy": [0.09008057415485382, 0.10051512718200684, 0.09655263274908066, 0.09668471664190292, 0.0948355570435524, 0.1014397069811821, 0.0936468094587326, 0.10130762308835983, 0.09853387624025345, 0.10381719470024109, 0.10276053100824356, 0.10315678268671036, 0.10711926966905594, 0.10566636174917221, 0.11200633645057678, 0.1072513535618782, 0.1162329912185669, 0.11596883088350296, 0.1142517477273941, 0.11055342853069305, 0.11359133571386337, 0.11306300014257431, 0.11874257028102875, 0.12429005652666092, 0.12402588874101639, 0.11795007437467575, 0.13049794733524323, 0.12679962813854218, 0.1266675442457199, 0.13142253458499908, 0.1320829540491104, 0.12059172987937927, 0.1270637959241867, 0.12851670384407043, 0.12851670384407043, 0.13380002975463867, 0.13749834895133972, 0.14040417969226837, 0.13353586196899414, 0.14080041646957397, 0.13934750854969025, 0.13459251821041107, 0.14053626358509064, 0.14410249888896942, 0.1430458277463913, 0.15057456493377686, 0.15612204372882843, 0.15017831325531006, 0.15572579205036163, 0.16140536963939667, 0.15202747285366058, 0.15598995983600616, 0.15519747138023376, 0.15678246319293976, 0.1550653874874115, 0.16629242897033691, 0.16682076454162598, 0.16259410977363586, 0.1636507660150528, 0.16853784024715424, 0.16232994198799133, 0.17197199165821075, 0.16840575635433197, 0.1670849323272705, 0.1752740740776062, 0.16576409339904785, 0.17923656105995178, 0.17804782092571259, 0.17857614159584045, 0.18095363676548004, 0.18134988844394684, 0.18861444294452667, 0.18055738508701324, 0.18016114830970764, 0.19535067677497864, 0.1938977688550949, 0.18742570281028748, 0.18953903019428253, 0.18821820616722107, 0.18623696267604828, 0.19310526549816132, 0.1990489959716797, 0.19099193811416626, 0.19323734939098358, 0.20261524617671967, 0.1974640041589737, 0.20697398483753204, 0.20512482523918152, 0.20882314443588257, 0.21212521195411682, 0.21172896027565002, 0.2110685557126999, 0.20261524617671967, 0.21318188309669495, 0.2094835489988327, 0.2052568942308426, 0.21938978135585785, 0.21701228618621826, 0.21397437155246735, 0.21978603303432465], "val_loss": [1.9705265590122767, 1.9700747898646764, 1.9696238381522042, 1.969177314213344, 1.9687250001089913, 1.9682720048086983, 1.967822483607701, 1.9673708506992884, 1.9669204439435686, 1.966470173427037, 1.9660203116280692, 1.9655726977757044, 1.965123517172677, 1.964674472808838, 1.9642306055341447, 1.9637857164655412, 1.963339396885463, 1.9628923961094447, 1.9624481201171875, 1.9620057514735632, 1.9615601812090193, 1.9611199242728097, 1.9606773512704032, 1.960231099809919, 1.9597900935581751, 1.959348542349679, 1.9589034489222936, 1.9584603309631348, 1.958019460950579, 1.9575772285461426, 1.9571388108389718, 1.9566940580095564, 1.9562510081699915, 1.9558112961905343, 1.9553674289158411, 1.9549211774553572, 1.9544764927455358, 1.954035758972168, 1.953596864427839, 1.9531512260437012, 1.952704702104841, 1.952261243547712, 1.9518156732831682, 1.951366969517299, 1.950913974217006, 1.9504634312220983, 1.9500224930899483, 1.9495749473571777, 1.9491235869271415, 1.948676926749093, 1.9482286317007882, 1.9477795192173548, 1.9473320416041784, 1.946883269718715, 1.9464306150163924, 1.945977074759347, 1.9455218315124512, 1.9450713566371374, 1.94461761202131, 1.944162028176444, 1.9437097821916853, 1.9432522228785925, 1.9427961621965681, 1.9423390797206335, 1.9418862887791224, 1.9414317267281669, 1.9409713745117188, 1.940509591783796, 1.940047059740339, 1.939584187098912, 1.9391187940325056, 1.9386469296046667, 1.938183103288923, 1.9377164159502303, 1.937242031097412, 1.9367707797459193, 1.9363032749720983, 1.935828685760498, 1.9353524616786413, 1.9348780768258231, 1.9343959944588798, 1.9339173180716378, 1.9334372792925154, 1.9329542432512556, 1.9324745450701033, 1.9319884436471122, 1.9315009117126465, 1.9310171944754464, 1.9305246216910226, 1.9300312995910645, 1.929536955697196, 1.9290310314723425, 1.9285381180899483, 1.928041662488665, 1.9275494984218053, 1.9270473207746233, 1.9265448025294714, 1.9260360172816686, 1.9255307742527552, 1.925023147038051], "val_accuracy": [0.03766666725277901, 0.03999999910593033, 0.041333332657814026, 0.04533333331346512, 0.049666665494441986, 0.05233333259820938, 0.05666666850447655, 0.059333331882953644, 0.06333333253860474, 0.06666667014360428, 0.07066666334867477, 0.0729999989271164, 0.07666666805744171, 0.08233333379030228, 0.08633333444595337, 0.09099999815225601, 0.09466666728258133, 0.0989999994635582, 0.10499999672174454, 0.10966666787862778, 0.11533333361148834, 0.12033333629369736, 0.12399999797344208, 0.1276666671037674, 0.12999999523162842, 0.1353333294391632, 0.13866665959358215, 0.1420000046491623, 0.1456666737794876, 0.14933332800865173, 0.15199999511241913, 0.15733332931995392, 0.16233333945274353, 0.16466666758060455, 0.16833333671092987, 0.17533333599567413, 0.1783333271741867, 0.18299999833106995, 0.18733333051204681, 0.1899999976158142, 0.19599999487400055, 0.19900000095367432, 0.20366667211055756, 0.20800000429153442, 0.21066667139530182, 0.21566666662693024, 0.218666672706604, 0.22333332896232605, 0.22633333504199982, 0.2290000021457672, 0.23266667127609253, 0.23633334040641785, 0.23999999463558197, 0.24300000071525574, 0.2473333328962326, 0.25066667795181274, 0.2526666522026062, 0.2566666603088379, 0.26100000739097595, 0.26366665959358215, 0.2680000066757202, 0.2706666588783264, 0.27433332800865173, 0.2770000100135803, 0.2796666622161865, 0.28166666626930237, 0.28466665744781494, 0.2866666615009308, 0.2879999876022339, 0.2913333475589752, 0.2926666736602783, 0.2939999997615814, 0.29600000381469727, 0.2980000078678131, 0.30033332109451294, 0.3033333420753479, 0.3063333332538605, 0.3086666762828827, 0.3096666634082794, 0.31166666746139526, 0.31433331966400146, 0.3173333406448364, 0.3190000057220459, 0.32100000977516174, 0.32366666197776794, 0.3243333399295807, 0.3256666660308838, 0.3283333480358124, 0.33000001311302185, 0.3310000002384186, 0.3336666524410248, 0.3343333303928375, 0.335999995470047, 0.3383333384990692, 0.3400000035762787, 0.34066668152809143, 0.34166666865348816, 0.34333333373069763, 0.34466665983200073, 0.3463333249092102]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [7, 2, 1, 7, 5, 5, 4, 4, 0, 5, 2, 9, 2, 5, 5, 3, 8, 8, 7, 8, 9, 9, 2], [4, 3, 5, 2, 1, 4, 0, 5, 0, 1, 2, 1, 0, 4], [78, 61, 14, 99, 22, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [5, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44, 79]], "fitness": -0.1177142858505249, "mapping_values": [1, 2, 2, 1, 1, 0, 19, 19, 12, 7, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.299723774576546, 2.3013421021999227, 2.3022074458495485, 2.3030242471804536, 2.310251495983339, 2.445548189786982, 3.406226109205031, 6.261514350801427, 11.829190821049945, 21.608514700111, 36.13185315477913], "accuracy": [0.1006472036242485, 0.07951393723487854, 0.07977809756994247, 0.09642054885625839, 0.09787346422672272, 0.0952318087220192, 0.09430722147226334, 0.09998679161071777, 0.09298639744520187, 0.09853387624025345, 0.09985470771789551], "val_loss": [1.9702465193612235, 1.9737108094351632, 1.9738044057573592, 1.975968565259661, 2.0034943989345004, 2.3949715069362094, 4.059849602835519, 7.856960841587612, 14.754038674490792, 25.41897419520787, 40.84072004045759], "val_accuracy": [0.0949999988079071, 0.04699999839067459, 0.08966666460037231, 0.09733333438634872, 0.1003333330154419, 0.14133332669734955, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.10400000214576721, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [7, 5, 1, 7, 5, 5, 4, 4, 0, 3, 2, 2, 2, 2, 3, 3, 8, 8, 7, 8, 5, 9, 2, 1, 4, 6, 4, 7, 1, 6, 9, 3, 7, 8], [4, 3, 1, 2, 1, 3, 0, 5, 2, 1, 2, 1, 0, 4, 1, 3, 2, 4, 2, 1, 0, 3], [11, 61, 68, 60, 22], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 0, 1, 1], [43, 17, 44, 42, 73]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 56, 56, 34, 22, 5, 1, 0, 0, 0, 0, 12, 8, 4, 5], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.subtract(tf.math.add(tf.math.square(grad), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad)))), tf.math.add(beta, beta))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.3748899788479245, 2.791951159869745e+20, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03447365015745163, 0.058512747287750244, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.2252738816397533, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.00800000037997961, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 4, 4, 9, 3, 2, 2, 2, 3, 9, 6, 6, 8, 8, 2, 9, 4, 3], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 2, 4, 1], [3, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 6, 1, 3, 0, 9, 7, 5], [0, 0, 0, 3, 1, 1], [43, 56, 44, 39]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 24, 24, 14, 10, 2, 1, 0, 0, 0, 0, 5, 3, 2, 3], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))))))))), tf.math.multiply(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026840562723443, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [7, 0, 0, 7, 5, 6, 7, 4, 2, 3, 2, 2, 2, 5, 9, 0, 4, 0, 1, 2, 9, 9, 8, 6, 7], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 4, 7, 5], [2, 3, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0738343670964241, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 2, 1, 5, 5, 5, 5, 0, 1, 2, 2, 2, 5, 3, 3, 8, 2, 7, 2, 8, 8, 3, 4, 6, 1, 1, 8, 2, 6, 6, 9, 0, 5, 6, 6, 9, 9, 3, 8, 9, 1, 2, 2, 2, 6, 9, 9, 0, 5, 6, 2, 5, 3, 8, 6, 0, 2, 9, 2, 1, 9, 4, 2, 2, 4, 9, 2, 1, 5, 5, 7, 1, 9, 7, 2, 3, 5, 8], [2, 3, 5, 1, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 4, 0, 3, 0, 4, 5, 5, 0, 2, 3, 4, 0, 5, 3, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3, 4, 1, 0, 5], [11, 61, 14, 19, 3, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 2, 0, 7, 5], [1, 3, 1, 3, 1, 1], [1, 57, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 59, 59, 38, 21, 7, 1, 0, 0, 0, 0, 16, 10, 6, 1], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.square(beta), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.square(alpha), tf.math.multiply(alpha, tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), beta)), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.subtract(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))))))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(sigma, alpha), tf.math.square(tf.math.add(tf.math.negative(sigma), tf.math.add(alpha, tf.math.square(alpha)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09272222965955734, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [3, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 6, 1, 7, 9, 5, 7, 4, 0, 3, 2, 6, 8, 3, 3, 9, 5, 2, 7, 2, 9, 9, 6], [1, 3, 5, 2, 1, 4, 0, 2, 2, 3, 2, 1, 0, 4], [36, 61, 45, 19, 33], [1, 0, 1], [0], [2], [5], [76], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 9, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 87, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(beta, grad)), tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 2, 5, 9, 2, 4, 0, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 3, 4, 0, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 4, 3, 4, 5, 2, 9, 7, 5], [3, 2, 0, 3, 1, 1, 3], [76, 17, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 6, 2, 1, 1, 0, 0, 0, 0, 14, 7, 7, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.math.pow(beta, tf.math.multiply(tf.math.pow(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.add(alpha, alpha))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [7, 2, 1, 7, 5, 8, 9, 4, 0, 3, 2, 2, 2, 3, 3, 1, 8, 2, 1, 2, 1, 9, 3, 2, 7, 1, 1, 8, 0, 6, 6, 9, 0, 9, 5, 6, 6, 3, 3, 6, 3, 1, 1, 2, 3, 6, 3, 9, 0, 5, 8, 2, 3, 3, 8, 6, 0, 2, 7, 5, 9, 9, 4, 4, 2, 4, 9, 2, 1, 5, 5, 7, 1, 9, 7, 2, 3, 5, 8], [4, 2, 3, 2, 3, 4, 3, 5, 2, 1, 2, 1, 3, 4, 1, 5, 3, 1, 4, 3, 2, 3, 3, 3, 2, 3, 2, 5, 2, 1, 0, 1, 3, 5, 4, 1, 2, 1, 4, 3, 0, 1, 3, 0, 2], [43, 65, 41, 19, 22, 56, 91, 46, 58, 91, 56, 46, 25, 52, 10, 13, 88], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 10, 10, 5, 5, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.math.add(beta, beta)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3026840562723443, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 6, 5, 5, 7, 4, 3, 4, 3, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [3, 3, 5, 2, 3, 4, 0, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 1, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 34, 34, 22, 12, 4, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(grad, grad), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(beta, beta))))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06498481333255768, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 0, 1, 3, 5, 7, 4, 0, 6, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 4, 0, 2, 2, 1, 2, 1, 0, 4], [11, 88, 41, 19, 22, 54, 62, 80, 82, 51], [0, 0, 1], [0, 1], [2, 7, 4], [5], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [9, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 15, 15, 9, 6, 0, 3, 2, 1, 1, 0, 1, 1, 0, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.math.multiply(grad, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), alpha)))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026840562723443, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [7, 0, 0, 7, 5, 6, 7, 4, 2, 3, 2, 2, 2, 5, 9, 0, 4, 0, 1, 2, 9, 9, 8, 6, 7], [4, 2, 5, 2, 1, 4, 0, 5, 2, 1, 2, 3, 0, 4], [11, 22, 41, 19, 22, 56, 99, 46, 58, 91, 56, 46, 10, 52], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 4, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 33, 33, 21, 12, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), beta), alpha), tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))), alpha), beta))), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3017515130345974, 2.300742611452384, 2.301306485216521, 2.3008789469175146, 2.3007542865623685, 2.3008510126744466], "accuracy": [0.08902391046285629, 0.09787346422672272, 0.09377889335155487, 0.09285431355237961, 0.08942015469074249, 0.09496764093637466], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [7, 2, 1, 7, 9, 6, 7, 4, 0, 5, 2, 2, 2, 3, 3, 3, 8, 2, 1, 2, 1, 9, 1, 4, 7, 1, 1, 8, 2, 6, 6, 9, 0, 9, 5, 6, 4, 3, 3, 6, 3, 1, 1, 2, 3, 6, 3, 9, 0, 5, 8, 2, 5, 3, 8, 6, 0, 2, 7, 6, 9, 9, 4, 2, 2, 4, 9, 2, 4, 5, 5, 7, 1, 9, 7, 2, 3, 5, 8], [4, 3, 3, 2, 3, 4, 0, 5, 2, 2, 2, 1, 0, 4, 0, 5, 3, 1, 4, 3, 2, 3, 3, 3, 2, 1, 2, 5, 0, 1, 3, 1, 3, 5, 1, 1, 2, 1, 4, 3, 0, 1, 3, 0, 2], [83, 65, 41, 19, 22, 56, 99, 46, 58, 91, 56, 46, 25, 52, 10, 13, 88], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 121, 121, 76, 45, 15, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 74, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))))))), grad)))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), alpha)))))), beta))))))), tf.math.add(beta, tf.math.add(tf.math.pow(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.subtract(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))), alpha)))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3017515130345974, 2.300742611452384, 2.301306485216521, 2.3008789469175146, 2.3007542865623685, 2.3008510126744466], "accuracy": [0.08902391046285629, 0.09787346422672272, 0.09377889335155487, 0.09285431355237961, 0.08942015469074249, 0.09496764093637466], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 1, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 8, 8, 2, 7, 8, 9, 9], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 5], [11, 61, 39, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [1, 9, 44]], "fitness": -0.03942857310175896, "mapping_values": [1, 2, 2, 1, 1, 0, 29, 29, 16, 13, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(beta))))), tf.math.add(beta, tf.math.add(tf.math.pow(alpha, tf.math.add(beta, grad)), tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, beta)), tf.math.add(alpha, tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30195008544811, 2.301420401021584, 2.302465338984721, 2.302507577145876, 2.302880248027061, 2.303480095127082], "accuracy": [0.08849557489156723, 0.09576013684272766, 0.09074098616838455, 0.08902391046285629, 0.08413683623075485, 0.0886276587843895], "val_loss": [1.971428666796003, 1.9718729427882604, 1.972318172454834, 1.9727602686200822, 1.9732097898210799, 1.9736595835004533], "val_accuracy": [0.03400000184774399, 0.03133333474397659, 0.03033333271741867, 0.02800000086426735, 0.02666666731238365, 0.02566666714847088]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 6, 5, 5, 7, 6, 0, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 0, 3, 1, 4, 0, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 8, 9, 3, 4, 5, 9, 9, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44, 79]], "fitness": -0.015714285895228386, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 10, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), grad))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.967493426987146, 2.4797773294445076, 2.3737570104534758, 2.3328266369904416, 2.3359332260375703, 168045085583.90204, NaN], "accuracy": [0.19310526549816132, 0.10553427785634995, 0.09430722147226334, 0.10117553919553757, 0.09628847241401672, 0.1154404953122139, 0.1018359512090683], "val_loss": [2.0829860142299106, 1.9997266360691615, 1.98000853402274, 2.022320338657924, 2.0079028947012767, 1.6346571192871275e+26, NaN], "val_accuracy": [0.1003333330154419, 0.10400000214576721, 0.10400000214576721, 0.09799999743700027, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419]}}]