[{"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 2, 4, 6, 4, 0, 1, 9, 0, 5, 2, 0, 1, 1, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.831428587436676, "mapping_values": [1, 1, 1, 0, 1, 1, 35, 35, 23, 12, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.negative(grad)))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9887862138586936, 1.3865955633935108, 1.131379641617105, 0.9412060426037624, 0.8130643971922722, 0.7360450994573202, 0.7466923465282846, 0.6776985004278553, 0.6569589914316357, 0.637071342193345, 0.5984592233052454, 0.584653495104715, 0.5883346324851249, 0.5589964044423167, 0.5567814062111225, 0.5321097025750351, 0.5272877228463158, 0.5145110254904314, 0.48745965720277973, 0.49072995816144993, 0.47724915219571973, 0.4651394347945508, 0.4492488024202021, 0.45414282620275936, 0.46564008164257814, 0.42839776988215905, 0.42387347657289076, 0.41250247295821396, 0.40234454351488025, 0.40115797098884964, 0.400683821452182, 0.40791875283007356, 0.378445174070224, 0.3971699810755519, 0.36057035915682484, 0.3719779468010981, 0.3693112455315326, 0.3657519618486448, 0.35699583113925676, 0.3583226788706862, 0.34371863687987875, 0.3318895452947759, 0.3506028361371511, 0.34337144282751897, 0.31965761564316736, 0.31449264488703915, 0.31766275452380294, 0.2893996550194135, 0.32389915716126927, 0.29911649278708896, 0.301608233010339, 0.28406827855796674, 0.30557338665300404, 0.3007734880912195, 0.27724096046352525, 0.2757661092700172], "accuracy": [0.33443403244018555, 0.5279355645179749, 0.6086382269859314, 0.6502443552017212, 0.6901333928108215, 0.7186633348464966, 0.7098137736320496, 0.7423061728477478, 0.7471932172775269, 0.7623828053474426, 0.7724210619926453, 0.7761194109916687, 0.7751948237419128, 0.7857614755630493, 0.7874785661697388, 0.8012151718139648, 0.800818920135498, 0.8115176558494568, 0.8191784620285034, 0.8193105459213257, 0.8241975903511047, 0.826310932636261, 0.8314621448516846, 0.828292191028595, 0.828820526599884, 0.8430854678153992, 0.8400475382804871, 0.8461233377456665, 0.8520671129226685, 0.850350022315979, 0.8467837572097778, 0.8527275323867798, 0.8603883385658264, 0.8562937378883362, 0.8713511824607849, 0.8632941246032715, 0.8671245574951172, 0.8669924736022949, 0.863558292388916, 0.8652753829956055, 0.8706908226013184, 0.8779553771018982, 0.8725399374961853, 0.8698983192443848, 0.880729079246521, 0.8854840993881226, 0.8811253309249878, 0.8918240666389465, 0.8782195448875427, 0.8881257176399231, 0.8857482671737671, 0.8956544995307922, 0.8882578015327454, 0.8873332738876343, 0.895918607711792, 0.8989565372467041], "val_loss": [1.2654929501669747, 1.2420193808419364, 0.6897294691630772, 0.6999704497201102, 0.5965331792831421, 0.5914867094584874, 0.5248451573508126, 0.5265260253633771, 0.5031121628625053, 0.46050848279680523, 0.46437510422297884, 0.45572684492383686, 0.4435070242200579, 0.4090240342276437, 0.42747790472848074, 0.4175057751791818, 0.44592825855527607, 0.39717531204223633, 0.4373721054622105, 0.40847586733954294, 0.37433890785489765, 0.35295937742505756, 0.3756663884435381, 0.40513804980686735, 0.3533748984336853, 0.3593029890741621, 0.36715426615306307, 0.3544599839619228, 0.3411835857800075, 0.3629258360181536, 0.38878627334322247, 0.3439405560493469, 0.3557460478373936, 0.33138759647096905, 0.31119433471134733, 0.3159430367606027, 0.31896556275231497, 0.3100238357271467, 0.3311688814844404, 0.3101117014884949, 0.31029214177812847, 0.3188866802624294, 0.33862615483147757, 0.3095926472118923, 0.29623701742717196, 0.32990193367004395, 0.2979356987135751, 0.29408121960503714, 0.29179289511271883, 0.3160599044391087, 0.2840168646403721, 0.3075948783329555, 0.3184218832424709, 0.2939799427986145, 0.32361680269241333, 0.3017080937113081], "val_accuracy": [0.5329999923706055, 0.5559999942779541, 0.6856666803359985, 0.6790000200271606, 0.7323333621025085, 0.7229999899864197, 0.765999972820282, 0.750333309173584, 0.7649999856948853, 0.781000018119812, 0.7829999923706055, 0.7993333339691162, 0.8146666884422302, 0.8230000138282776, 0.8063333630561829, 0.8096666932106018, 0.7933333516120911, 0.8233333230018616, 0.7996666431427002, 0.8133333325386047, 0.8389999866485596, 0.8456666469573975, 0.8366666436195374, 0.8053333163261414, 0.8489999771118164, 0.8473333120346069, 0.8403333425521851, 0.8460000157356262, 0.8519999980926514, 0.8393333554267883, 0.8309999704360962, 0.8550000190734863, 0.8479999899864197, 0.8546666502952576, 0.8673333525657654, 0.8650000095367432, 0.8636666536331177, 0.8709999918937683, 0.8659999966621399, 0.8696666955947876, 0.8666666746139526, 0.8730000257492065, 0.8579999804496765, 0.8696666955947876, 0.8776666522026062, 0.8603333234786987, 0.8790000081062317, 0.8799999952316284, 0.878333330154419, 0.8703333139419556, 0.8843333125114441, 0.8663333058357239, 0.871666669845581, 0.8823333382606506, 0.8663333058357239, 0.878000020980835]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 6, 4, 4, 6, 4, 5, 1, 8, 2, 5, 2, 0, 1, 1, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 3, 0, 0, 1, 3, 2, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [46, 49, 44, 92]], "fitness": -0.8257142901420593, "mapping_values": [1, 3, 3, 1, 2, 0, 29, 29, 17, 12, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.square(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.002278226824201, 1.5157576392371153, 1.0397957239042672, 0.8707768019038327, 0.803558405962571, 0.7497127394414204, 0.7158969654824047, 0.6828693432452704, 0.6880202401961318, 0.6468674019343188, 0.6396147794002996, 0.597331446616279, 0.5780026870648686, 0.5877438916459043, 0.5537436650161809, 0.5469514369696926, 0.5382506714646905, 0.5351716617173712, 0.4938133144344022, 0.5037436474150576, 0.4960514657202335, 0.47892322191598785, 0.47013891136499836, 0.47163520008030346, 0.48584273194970706, 0.4598028751420087], "accuracy": [0.3497556447982788, 0.4803856909275055, 0.6077136397361755, 0.6711134314537048, 0.698190450668335, 0.7166820764541626, 0.728701651096344, 0.7413815855979919, 0.7333245277404785, 0.7565711140632629, 0.7556465268135071, 0.7781006693840027, 0.7798177003860474, 0.7757231593132019, 0.7936864495277405, 0.7918372750282288, 0.7985734939575195, 0.7981772422790527, 0.8164047002792358, 0.8129705190658569, 0.8173292875289917, 0.8187822103500366, 0.8264430165290833, 0.8214238286018372, 0.8166688680648804, 0.8294808864593506], "val_loss": [1.5083117825644357, 0.9380440030779157, 0.7525648730141776, 0.749487042427063, 0.6618207352502006, 0.6262589011873517, 0.5359606742858887, 0.5203277383531842, 0.48678793225969585, 0.4723337037222726, 0.47758616719927105, 0.4679043974195208, 0.47653928824833464, 0.4358307548931667, 0.42935469320842196, 0.40898232800619944, 0.43395850488117765, 0.3935399992125375, 0.41359080587114605, 0.38807447467531475, 0.36613523960113525, 0.3857860565185547, 0.3695807797568185, 0.3789087448801313, 0.39991661480494906, 0.3594468491418021], "val_accuracy": [0.4476666748523712, 0.606333315372467, 0.6933333277702332, 0.6443333625793457, 0.6756666898727417, 0.7099999785423279, 0.7646666765213013, 0.7593333125114441, 0.7820000052452087, 0.7803333401679993, 0.781000018119812, 0.7953333258628845, 0.7943333387374878, 0.8059999942779541, 0.8056666851043701, 0.8289999961853027, 0.8033333420753479, 0.8356666564941406, 0.815666675567627, 0.8299999833106995, 0.8446666598320007, 0.8303333520889282, 0.8396666646003723, 0.8230000138282776, 0.8246666789054871, 0.8399999737739563]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 6, 8, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 3, 8, 8, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8254285454750061, "mapping_values": [1, 1, 1, 0, 1, 0, 30, 30, 20, 10, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.square(tf.math.add(beta, alpha))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9889597022191738, 1.3799908640929155, 1.0913047424365405, 0.8563988680978729, 0.8868780508647269, 0.7506695454934049, 0.7523237687879156, 0.6743042279212482, 0.6579085362979434, 0.6390556524363901, 0.6160599835528957, 0.577737965879502, 0.5872853322036041, 0.5677701937461085, 0.5489683683128593, 0.5465334423300675, 0.5202358462759816, 0.5073565034865704, 0.4775498765901473, 0.4963756809223912, 0.47350962139029373, 0.4573858297102644, 0.46817353046990623, 0.45489404175448744, 0.46899135667240743, 0.43831324359649804, 0.4202637973084914, 0.40746760413221883, 0.41052251826691794, 0.4059538144705365, 0.3968714056131846, 0.40524126473765537, 0.37908066238205684, 0.39224864634005085, 0.3667232848515899, 0.3785073185963732, 0.3608065192820043, 0.37053220518638963, 0.36483939319333347, 0.36163134447981293, 0.34299104980284967, 0.33532172649323333, 0.3456971692001311, 0.3433093716951488, 0.31855918522744586, 0.3071677985168987, 0.3285181164080205, 0.30584452072658624, 0.31779730219205515, 0.3052583460196244, 0.30716403947609006, 0.28659722912013963, 0.31550198520620215, 0.3065698298350963], "accuracy": [0.33403778076171875, 0.529388427734375, 0.6292431354522705, 0.6725663542747498, 0.6617355942726135, 0.7180029153823853, 0.7150970697402954, 0.7437590956687927, 0.752212405204773, 0.7536653280258179, 0.7619865536689758, 0.7815347909927368, 0.7751948237419128, 0.7766477465629578, 0.7898560166358948, 0.7996301651000977, 0.8049134612083435, 0.8127063512802124, 0.8216879963874817, 0.813498854637146, 0.8249900937080383, 0.8297450542449951, 0.8245938420295715, 0.8296129703521729, 0.8274996876716614, 0.8401796221733093, 0.8421608805656433, 0.8502179384231567, 0.8475762605667114, 0.8506141901016235, 0.8488970994949341, 0.8492933511734009, 0.856689989566803, 0.8577466607093811, 0.8642187118530273, 0.8628978729248047, 0.8664641380310059, 0.8621054291725159, 0.8664641380310059, 0.8605204224586487, 0.8704266548156738, 0.8754457831382751, 0.8734645247459412, 0.869502067565918, 0.8815215826034546, 0.8889182209968567, 0.8796724081039429, 0.8865407705307007, 0.8786157965660095, 0.8858803510665894, 0.8857482671737671, 0.8953903317451477, 0.8805969953536987, 0.8873332738876343], "val_loss": [1.26525912966047, 1.1936987808772497, 0.6739160673958915, 0.7387081384658813, 0.6933271714619228, 0.6788767576217651, 0.5253601585115705, 0.48172242300851004, 0.5019967045102801, 0.4764520100184849, 0.4584002835409982, 0.4749306780951364, 0.46367347240448, 0.4174498660223825, 0.42074306522096905, 0.40172314643859863, 0.41804568256650654, 0.3896374872752598, 0.364375250680106, 0.4503145899091448, 0.3624969720840454, 0.3704611914498465, 0.3636793919972011, 0.37911020857947214, 0.36874390499932425, 0.35522105012621197, 0.3588970899581909, 0.35301277467182707, 0.33982292243412565, 0.3540534291948591, 0.3686430709702628, 0.346024181161608, 0.3372382862227304, 0.32525616032736643, 0.33966766936438425, 0.3238598789487566, 0.323480486869812, 0.3402616126196725, 0.3357946787561689, 0.3047136494091579, 0.3109208941459656, 0.3150743671825954, 0.3450890098299299, 0.31346494810921804, 0.29785785504749845, 0.33743973289217266, 0.30248007604054045, 0.3264842799731663, 0.2972419261932373, 0.3119262456893921, 0.2968446612358093, 0.3041849136352539, 0.324669395174299, 0.3010073815073286], "val_accuracy": [0.5329999923706055, 0.5673333406448364, 0.7043333053588867, 0.6729999780654907, 0.721666693687439, 0.6976666450500488, 0.7603333592414856, 0.777999997138977, 0.7609999775886536, 0.7716666460037231, 0.7870000004768372, 0.7860000133514404, 0.7903333306312561, 0.8149999976158142, 0.8066666722297668, 0.8186666369438171, 0.8199999928474426, 0.831333339214325, 0.8363333344459534, 0.7853333353996277, 0.846666693687439, 0.8389999866485596, 0.8456666469573975, 0.8233333230018616, 0.8383333086967468, 0.8489999771118164, 0.8446666598320007, 0.8506666421890259, 0.8489999771118164, 0.8473333120346069, 0.8386666774749756, 0.8550000190734863, 0.8533333539962769, 0.8586666584014893, 0.8616666793823242, 0.8640000224113464, 0.8576666712760925, 0.856333315372467, 0.8603333234786987, 0.8730000257492065, 0.8669999837875366, 0.8743333220481873, 0.8519999980926514, 0.8656666874885559, 0.874666690826416, 0.859666645526886, 0.8793333172798157, 0.8633333444595337, 0.8799999952316284, 0.8706666827201843, 0.874666690826416, 0.8650000095367432, 0.8640000224113464, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 4, 4, 6, 4, 0, 1, 4, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8217142820358276, "mapping_values": [1, 1, 1, 0, 1, 1, 37, 37, 22, 15, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(grad))), tf.math.subtract(tf.math.pow(tf.math.sqrt(grad), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))))))))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9890918079195337, 1.3927966618755192, 1.2997723363567226, 0.8899434404035585, 0.8179336188255505, 0.7238273614307263, 0.7233062568767086, 0.6836241474713411, 0.6291492936271388, 0.6456787044409008, 0.6056238087003635, 0.5713387213331471, 0.5747945265857504, 0.5575051688326034, 0.5413069654142443, 0.5209828550828809, 0.5173679930407058, 0.5092895342421617, 0.4865904985685327, 0.4819304260319848, 0.46523461020964324, 0.4373925891353659, 0.45857626584306477, 0.4499665747197738, 0.463182342413032, 0.4330458154870125, 0.4184238757943559, 0.40165771977965387, 0.4020099168826151, 0.3983060108428114, 0.3981866923699274, 0.41425228232657824, 0.36756116232899094, 0.39112884787567825, 0.3575813307572885, 0.370422612387097, 0.35805223918609835, 0.3594362990943716, 0.3582045196613001, 0.3587728735675051, 0.3467882944765722, 0.3184270653206958, 0.3328200836128736, 0.34427195553215284, 0.32909492413798624, 0.3011879552632527, 0.330968753698086, 0.29144377973195884, 0.32863392123787427, 0.29411063140661425, 0.298215521919477, 0.29155732352956254, 0.3019180715973698, 0.2886069483603343], "accuracy": [0.3343019485473633, 0.5276713967323303, 0.55791836977005, 0.6598864197731018, 0.6952846646308899, 0.7271166443824768, 0.7224937081336975, 0.7343811988830566, 0.7601373791694641, 0.7548540234565735, 0.7626469135284424, 0.7865539789199829, 0.7817989587783813, 0.7857614755630493, 0.7976489067077637, 0.8088759779930115, 0.807158887386322, 0.8112534880638123, 0.8148196935653687, 0.8190463781356812, 0.8276317715644836, 0.837141752243042, 0.8271034359931946, 0.8341038227081299, 0.8309338092803955, 0.8418967127799988, 0.8465195894241333, 0.8551049828529358, 0.8512746095657349, 0.8524633646011353, 0.8465195894241333, 0.8506141901016235, 0.8648791313171387, 0.8573504090309143, 0.8672566413879395, 0.8652753829956055, 0.870030403137207, 0.8656716346740723, 0.8665962219238281, 0.8656716346740723, 0.8659358024597168, 0.8862766027450562, 0.8776912093162537, 0.869502067565918, 0.8786157965660095, 0.8897107243537903, 0.8749174475669861, 0.8910315632820129, 0.8784837126731873, 0.8905032277107239, 0.8881257176399231, 0.8945978283882141, 0.8883898854255676, 0.8945978283882141], "val_loss": [1.2654940060206823, 1.274698121207101, 0.7464178970881871, 0.6950945513589042, 0.6482079880578178, 0.5287521055766514, 0.5165913615907941, 0.48302955286843435, 0.49384714875902447, 0.47748707021985737, 0.44324869768960135, 0.44567556040627615, 0.48324317591530935, 0.4129178353718349, 0.41381355694362093, 0.3976268001965114, 0.42741383825029644, 0.40141864333833965, 0.4232977969305856, 0.3931450162615095, 0.37108359166554045, 0.3565619502748762, 0.36666296209607807, 0.37093377113342285, 0.36543576206479755, 0.3538420115198408, 0.33390274218150545, 0.3392961961882455, 0.33769239698137554, 0.3453828862735203, 0.38164647987910677, 0.33030674287251066, 0.3385782412120274, 0.32635646206992014, 0.3369068077632359, 0.3203311732837132, 0.31750002929142546, 0.3335539187703814, 0.3490040387426104, 0.30956490550722393, 0.3119854586465018, 0.2971207584653582, 0.3552834221294948, 0.30938451630728586, 0.2948897310665676, 0.32338844878332956, 0.2967057057789394, 0.31717753410339355, 0.29492972578321186, 0.32638158968516756, 0.3238817879131862, 0.30829249961035593, 0.32939767837524414, 0.29679445709500996], "val_accuracy": [0.5329999923706055, 0.5356666445732117, 0.675000011920929, 0.6863333582878113, 0.718999981880188, 0.762666642665863, 0.7580000162124634, 0.7743333578109741, 0.7723333239555359, 0.7643333077430725, 0.812333345413208, 0.8046666383743286, 0.7649999856948853, 0.8159999847412109, 0.8163333535194397, 0.8199999928474426, 0.800000011920929, 0.8230000138282776, 0.8076666593551636, 0.8220000267028809, 0.8373333215713501, 0.8423333168029785, 0.840666651725769, 0.8263333439826965, 0.8429999947547913, 0.8429999947547913, 0.859666645526886, 0.8536666631698608, 0.8550000190734863, 0.8489999771118164, 0.8379999995231628, 0.8610000014305115, 0.8586666584014893, 0.8583333492279053, 0.8600000143051147, 0.8643333315849304, 0.8619999885559082, 0.859000027179718, 0.8533333539962769, 0.8700000047683716, 0.8646666407585144, 0.8743333220481873, 0.8539999723434448, 0.8703333139419556, 0.874666690826416, 0.8629999756813049, 0.875333309173584, 0.871999979019165, 0.8793333172798157, 0.8656666874885559, 0.8546666502952576, 0.8686666488647461, 0.8659999966621399, 0.8756666779518127]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [62, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 4, 9, 4, 4, 0, 1, 9, 8, 5, 2, 2, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.800000011920929, "mapping_values": [1, 1, 1, 0, 1, 1, 30, 30, 20, 10, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), tf.math.square(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9884558957502623, 1.393148120651628, 1.185586456011126, 0.909926603270591, 0.7937473083027381, 0.7196408703326864, 0.7582391748779784, 0.6729998773493079, 0.650036356003844, 0.6477620797055886, 0.6096484340444894, 0.5799734126842884, 0.5631719380164458, 0.5696984589800559, 0.5446574626314075, 0.5314736350723277, 0.5200797557563137, 0.5073875739054515, 0.4827862802182899, 0.48462625352729505, 0.47029452009160744, 0.4664244300787554, 0.4675466694403255, 0.45080991662677566, 0.46680425042725665, 0.4280870469050117], "accuracy": [0.33443403244018555, 0.5278034806251526, 0.5890899300575256, 0.6528860330581665, 0.7042662501335144, 0.7326641082763672, 0.7051908373832703, 0.7440232634544373, 0.7519482374191284, 0.755118191242218, 0.7664773464202881, 0.778761088848114, 0.787082314491272, 0.7814027070999146, 0.7952714562416077, 0.8053097128868103, 0.8042530417442322, 0.8129705190658569, 0.8203672170639038, 0.819442629814148, 0.8290846943855286, 0.8261788487434387, 0.828292191028595, 0.8323867321014404, 0.8285563588142395, 0.8429533839225769], "val_loss": [1.2612001555306571, 1.1016980239323206, 0.7535879782267979, 0.6639665705817086, 0.6324888297489711, 0.6003107002803257, 0.5231519256319318, 0.5239577633993966, 0.5159468139920916, 0.4782388210296631, 0.4620021070752825, 0.4598973648888724, 0.47168937751225065, 0.4418277485030038, 0.4252866506576538, 0.3934996213231768, 0.4330952763557434, 0.39630456481661114, 0.37488499709538053, 0.37356512035642353, 0.3551884038107736, 0.3676759600639343, 0.36326401574271067, 0.3866181288446699, 0.36646762064525057, 0.36459449359348844], "val_accuracy": [0.5353333353996277, 0.5756666660308838, 0.6603333353996277, 0.6996666789054871, 0.7260000109672546, 0.7176666855812073, 0.7680000066757202, 0.7440000176429749, 0.7643333077430725, 0.7733333110809326, 0.7879999876022339, 0.7916666865348816, 0.7979999780654907, 0.7979999780654907, 0.8106666803359985, 0.8296666741371155, 0.8023333549499512, 0.8266666531562805, 0.8370000123977661, 0.8330000042915344, 0.847000002861023, 0.8353333473205566, 0.8456666469573975, 0.8143333196640015, 0.8403333425521851, 0.8413333296775818]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 4, 0, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [67, 49, 44, 92]], "fitness": -0.31228572130203247, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(grad, grad)))), tf.math.negative(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.511150537118495, 2.2935033124498703, 2.1552748573045246, 2.3112687573944966, 2.303360974327322, 2.303675024028562, 2.3024644616446586], "accuracy": [0.1748778223991394, 0.1290450394153595, 0.22652225196361542, 0.09813763201236725, 0.10011887550354004, 0.0956280529499054, 0.1002509593963623], "val_loss": [1.952514375959124, 1.844050748007638, 2.0021166801452637, 1.9743050166538783, 1.9737179619925362, 1.9733828135899134, 1.9717453547886439], "val_accuracy": [0.2763333320617676, 0.32633334398269653, 0.09866666793823242, 0.10400000214576721, 0.09866666793823242, 0.09866666793823242, 0.10633333027362823]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [16, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 8, 4, 4, 4, 4, 0, 1, 0, 9, 5, 2, 1, 2, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 13, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [5, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [36, 49, 44, 92]], "fitness": -0.10314285755157471, "mapping_values": [1, 1, 1, 0, 1, 1, 30, 30, 19, 11, 3, 3, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.square(tf.math.add(beta, grad))), grad), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(sigma))", "other_info": {"loss": [2.3177152861536077, 3976.038749312649, 261514702.677569, 16525926932128.342, 1.0947293318242984e+18, 7.667744436459494e+22], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.9669906071254184, 114092.02678571429, 7476665197.714286, 489990538657792.0, 3.2112019941477057e+19, 2.1044933388846404e+24], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 4, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [22, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 4, 4, 4, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [53, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 4, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 2, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.negative(grad), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 1, 9, 8, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 1, 3, 3, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [64, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [5, 0, 0, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), alpha)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10540219396352768, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 8, 4, 4, 0, 1, 9, 4, 2, 2, 0, 1, 3, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [95, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 37, 37, 23, 14, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.subtract(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(grad, grad), tf.math.add(beta, tf.math.negative(grad)))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(sigma), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [21866920.48285774, 2.3139686573450797, 2.305565535164056, 2.3034816922890813, 2.3029833751316193, 2.30301135843771, 2.302924897645238], "accuracy": [0.09589222073554993, 0.09272222965955734, 0.09245806187391281, 0.09906221181154251, 0.09972262382507324, 0.09457138925790787, 0.09576013684272766], "val_loss": [1.9892192568097795, 1.977351188659668, 1.9746592385428292, 1.97370822089059, 1.9737421444484167, 1.9736857414245605, 1.9736604009355818], "val_accuracy": [0.1003333330154419, 0.10400000214576721, 0.09866666793823242, 0.10400000214576721, 0.09866666793823242, 0.1003333330154419, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 1, 4, 4, 6, 4, 5, 1, 4, 8, 5, 2, 0, 1, 6, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 3, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 8, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [11, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 33, 33, 20, 13, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, grad), tf.math.pow(grad, tf.math.square(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.sqrt(tf.math.square(grad)))))))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(sigma), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 4, 4, 4, 4, 0, 1, 0, 2, 5, 2, 1, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [3, 2], [94], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 2, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 31, 31, 18, 13, 3, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.negative(grad), tf.math.add(tf.math.add(beta, grad), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, alpha))), tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), grad)))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [2, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 6, 4, 4, 6, 4, 5, 1, 9, 2, 5, 2, 0, 1, 2, 8, 8, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 51, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), grad), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 1, 4, 9, 6, 4, 0, 1, 2, 8, 5, 2, 0, 1, 2, 2, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 8, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 34, 34, 21, 13, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(grad))), tf.math.subtract(tf.math.add(tf.math.sqrt(grad), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 5, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 4, 4, 1, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [561.3880243569695, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11795007437467575, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1278203620790.8572, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 3, 4, 6, 4, 6, 1, 4, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 1, 0, 3, 1, 2, 1, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 30, 30, 17, 13, 3, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), alpha), tf.math.pow(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))))))), grad), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 2, 4, 6, 4, 1, 3, 3, 8, 5, 8, 0, 1, 2, 8, 3, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 2, 1, 3, 3, 2, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [66, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 6, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 21, 21, 11, 10, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(grad, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), beta)), alpha), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))), tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.square(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 4, 4, 6, 4, 0, 1, 4, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 3, 1, 1, 3, 0, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [25, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [5, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.07771428674459457, "mapping_values": [1, 1, 1, 0, 1, 1, 38, 38, 23, 15, 3, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.sqrt(tf.math.square(tf.math.add(beta, alpha))), grad), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(sigma))", "other_info": {"loss": [2.302208329456326, 2.3000220376046077, 2.3020094535007862, 2.2998417594004237, 2.2997009246860434, 2.299213176516179, 2.300429086013792, 2.298251364697492, 2.2996602833719773, 2.3003292146722294, 2.2988445586248742, 2.299322926908389, 2.2995792624657856, 2.300050956225745, 2.3001069515577446, 2.3002596543906244], "accuracy": [0.09206181764602661, 0.09945846349000931, 0.09192973375320435, 0.09470347315073013, 0.09470347315073013, 0.1018359512090683, 0.09694888442754745, 0.11042134463787079, 0.09959053993225098, 0.09694888442754745, 0.10487385839223862, 0.10091137140989304, 0.09787346422672272, 0.09576013684272766, 0.10038304328918457, 0.09879804402589798], "val_loss": [1.9702376638139998, 1.9698733602251326, 1.969583579472133, 1.9696051052638464, 1.9697455678667342, 1.9697984286717005, 1.9698293549673898, 1.969752516065325, 1.9696990421840124, 1.9696908678327287, 1.969820158822196, 1.970155988420759, 1.9703888211931502, 1.970644474029541, 1.970829895564488, 1.9709553718566895], "val_accuracy": [0.04600000008940697, 0.04899999871850014, 0.05966666713356972, 0.06300000101327896, 0.06599999964237213, 0.0676666647195816, 0.07233333587646484, 0.07599999755620956, 0.07666666805744171, 0.07800000160932541, 0.0793333351612091, 0.07266666740179062, 0.07433333247900009, 0.07466666400432587, 0.07366666942834854, 0.07333333045244217]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [3, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 1, 9, 8, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 5, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [64, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026586536245732, 2.3011729441393225, 2.304126972378111, 2.3018469523602567, 2.301443338520129, 2.301036759295783], "accuracy": [0.08994849026203156, 0.0952318087220192, 0.09179764986038208, 0.08585391938686371, 0.09153348207473755, 0.09602430462837219], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 8, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 4, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [38, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 1, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.pow(tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026586536245732, 2.3011729441393225, 2.304126972378111, 2.3018469523602567, 2.301443338520129, 2.301036759295783], "accuracy": [0.08994849026203156, 0.0952318087220192, 0.09179764986038208, 0.08585391938686371, 0.09153348207473755, 0.09602430462837219], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]