[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [7, 2, 1, 7, 8, 5, 6, 2, 3, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 4, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7991428375244141, "mapping_values": [1, 2, 2, 1, 1, 0, 38, 38, 22, 16, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, beta), grad)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, beta))))))))))))), alpha)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9773355707941496, 1.5593489858814753, 1.062220148296404, 0.928588543066086, 0.8298217191782452, 0.7794651925256775, 0.7509162812153614, 0.7370987402418144, 0.7031064540907502, 0.6905810700006426, 0.6673389842339857, 0.657678514069507, 0.6394184093197591, 0.6245452843999125, 0.59807929428514, 0.5915199894364075, 0.5877461246353933, 0.5830583833290869, 0.5655073345203473, 0.5600314970738254, 0.5339264500142719, 0.5272928929489523, 0.5388486573701176], "accuracy": [0.3461894094944, 0.47272488474845886, 0.6184123754501343, 0.656980574131012, 0.6914542317390442, 0.713908314704895, 0.7170783281326294, 0.7191916704177856, 0.735041618347168, 0.7430986762046814, 0.7445515990257263, 0.7518161535263062, 0.761590301990509, 0.76106196641922, 0.7749306559562683, 0.7784969210624695, 0.7799497842788696, 0.780610203742981, 0.7821952104568481, 0.7898560166358948, 0.8006868362426758, 0.8057059645652771, 0.798309326171875], "val_loss": [1.5781259877341134, 0.8025817360196795, 0.7726448433739799, 0.6021053450448173, 0.6018970012664795, 0.5723530224391392, 0.5571569885526385, 0.5604457174028669, 0.4939428908484323, 0.5142160143171038, 0.5305839095796857, 0.5365839004516602, 0.46735836778368267, 0.46230173110961914, 0.4797481298446655, 0.44919141701289583, 0.502987197467259, 0.4275186913354056, 0.432875965322767, 0.43882053239004953, 0.4170480115073068, 0.41670669828142437, 0.4242331896509443], "val_accuracy": [0.3186666667461395, 0.6833333373069763, 0.640999972820282, 0.7483333349227905, 0.7386666536331177, 0.746999979019165, 0.7509999871253967, 0.7590000033378601, 0.7770000100135803, 0.765333354473114, 0.7480000257492065, 0.7319999933242798, 0.7873333096504211, 0.7773333191871643, 0.7763333320617676, 0.7910000085830688, 0.765666663646698, 0.8086666464805603, 0.800000011920929, 0.7919999957084656, 0.8069999814033508, 0.8073333501815796, 0.8066666722297668]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 0, 7, 4, 8, 5, 4, 6, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 2, 9, 9, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.7979999780654907, "mapping_values": [1, 2, 2, 1, 1, 0, 26, 26, 14, 12, 1, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad))), tf.math.pow(tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.subtract(beta, alpha))))), beta))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.983346630695269, 1.5104005195051844, 1.0352960994703075, 0.9318507953862221, 0.8241840596479936, 0.8084470683384282, 0.7502897551991542, 0.7290049712293577, 0.6982301955666477, 0.6866807353069848, 0.6920770514737251, 0.628746927642646, 0.634788681786562, 0.6425733560694522, 0.6071541922329565, 0.5923314677048762, 0.5790397551994692, 0.5977102381174417, 0.5647618916402829], "accuracy": [0.3443402349948883, 0.4850085973739624, 0.6317527294158936, 0.6481310129165649, 0.695813000202179, 0.6979262828826904, 0.719852089881897, 0.7275128960609436, 0.7412495017051697, 0.7456082701683044, 0.7327961921691895, 0.7633073329925537, 0.7656848430633545, 0.7573636174201965, 0.7726852297782898, 0.7773081660270691, 0.7860256433486938, 0.7765156626701355, 0.7832518815994263], "val_loss": [1.5398375988006592, 0.8126037291118077, 0.805943216596331, 0.590980955532619, 0.6231951202665057, 0.5776539019175938, 0.5632660218647548, 0.5415010111672538, 0.49283201353890554, 0.5497243915285382, 0.5274316072463989, 0.48094812461308073, 0.5425016369138446, 0.4503228834697178, 0.4788001264844622, 0.45006135531834196, 0.49214223452976774, 0.44013900416237967, 0.42298561334609985], "val_accuracy": [0.32600000500679016, 0.6779999732971191, 0.6110000014305115, 0.7459999918937683, 0.7396666407585144, 0.7390000224113464, 0.7303333282470703, 0.7683333158493042, 0.7829999923706055, 0.7573333382606506, 0.7673333287239075, 0.7879999876022339, 0.7413333058357239, 0.8106666803359985, 0.7696666717529297, 0.7933333516120911, 0.7773333191871643, 0.8053333163261414, 0.8103333115577698]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 9, 5, 0, 4, 6, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 2, 9, 9, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.797428548336029, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 22, 13, 5, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(beta, grad), beta)), tf.math.negative(tf.math.add(beta, alpha)))), tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0146836452889736, 1.472520464155668, 1.0703538005708813, 0.9091935240990923, 0.8413854449526855, 0.778321312166964, 0.727836472467582, 0.7059049776059887, 0.6920846420240724, 0.6718185821843579, 0.6474547934192062, 0.6443983562917537, 0.6157669957917616, 0.6004080678556637, 0.6106120477011175, 0.5849202565466014, 0.5750065828752146, 0.5753802643428783, 0.5595141210891095, 0.5511403201735172, 0.5332435457036637, 0.529695624216216, 0.544417632002447, 0.5038483070777691, 0.5026366844342259], "accuracy": [0.3210936486721039, 0.5045568346977234, 0.6197332143783569, 0.6605468392372131, 0.6824725866317749, 0.707040011882782, 0.7209087014198303, 0.733588695526123, 0.737947404384613, 0.7433628439903259, 0.7573636174201965, 0.7569673657417297, 0.7667415142059326, 0.7707040309906006, 0.7711002230644226, 0.7872143983840942, 0.78113853931427, 0.7853652238845825, 0.7881389260292053, 0.7946110367774963, 0.8018755912780762, 0.8021397590637207, 0.7935543656349182, 0.813498854637146, 0.8173292875289917], "val_loss": [1.6445914336613245, 0.7591439655848912, 0.7556259121213641, 0.6252726997647967, 0.5814123664583478, 0.5949878181729998, 0.566150324685233, 0.5553803784506661, 0.5295720441000802, 0.5211953265326363, 0.48702565261295866, 0.540622523852757, 0.5101080451692853, 0.48869756289890837, 0.4624510833195278, 0.46696577753339497, 0.5113800934382847, 0.44436473505837576, 0.44302500997270855, 0.4351063541003636, 0.444477983883449, 0.47193281991141184, 0.43506039891924175, 0.4264869008745466, 0.42292324134281706], "val_accuracy": [0.28433331847190857, 0.6836666464805603, 0.6516666412353516, 0.7193333506584167, 0.7400000095367432, 0.7149999737739563, 0.7406666874885559, 0.7419999837875366, 0.7673333287239075, 0.7546666860580444, 0.7699999809265137, 0.7519999742507935, 0.753333330154419, 0.777999997138977, 0.8029999732971191, 0.7960000038146973, 0.7593333125114441, 0.8006666898727417, 0.8040000200271606, 0.8073333501815796, 0.7996666431427002, 0.7706666588783264, 0.8040000200271606, 0.8056666851043701, 0.8056666851043701]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 3, 5, 5, 1, 2, 3, 2, 8, 1, 8, 2, 3, 5, 5, 6, 4, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 0, 3, 4, 3, 5, 2, 3, 2, 1, 1, 3, 1, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7934285998344421, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9923820626923059, 1.658849017794232, 1.0597694151594559, 0.9018956718270363, 0.8261033943725725, 0.7538549369352369, 0.7410122764234954, 0.7053570204391424, 0.6801273953550921, 0.6535275350267609, 0.6536293325407189, 0.6455413800000105, 0.6379250409801197, 0.6101851854987542, 0.6284534129185085, 0.5999689080995134, 0.583725624072821, 0.5801904367544017], "accuracy": [0.3331131935119629, 0.4678378105163574, 0.6196011304855347, 0.6647734642028809, 0.6848500967025757, 0.7119271159172058, 0.7102100253105164, 0.7280412316322327, 0.7382115721702576, 0.7458723783493042, 0.7495707273483276, 0.7486461400985718, 0.7569673657417297, 0.7709681391716003, 0.7526086568832397, 0.7718927264213562, 0.7791573405265808, 0.7774402499198914], "val_loss": [1.9107224600655692, 0.8533284323556083, 0.7449796370097569, 0.6895250763211932, 0.5802160671779087, 0.5685780218669346, 0.5720758949007306, 0.5276539666312081, 0.5140026978084019, 0.5126571825572422, 0.5329628331320626, 0.5305199793406895, 0.47328031063079834, 0.49146590914045063, 0.4980663401739938, 0.4590816157204764, 0.47216520990644184, 0.47545792375292095], "val_accuracy": [0.3023333251476288, 0.6990000009536743, 0.690666675567627, 0.6499999761581421, 0.7319999933242798, 0.7513333559036255, 0.7473333477973938, 0.7670000195503235, 0.7599999904632568, 0.7639999985694885, 0.7406666874885559, 0.7416666746139526, 0.7940000295639038, 0.7853333353996277, 0.7803333401679993, 0.7896666526794434, 0.7789999842643738, 0.7733333110809326]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 1, 4, 0, 6, 0, 3, 2, 3, 2, 1, 3, 8, 1, 2, 7, 2, 9, 9, 5, 6, 5, 5, 3, 2, 3, 7, 2, 1, 6, 2, 3, 6, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 0, 5, 2, 1, 2, 3, 0, 2, 2, 1, 1, 5, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 3], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7714285850524902, "mapping_values": [1, 2, 2, 1, 1, 0, 64, 64, 38, 26, 7, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(grad, alpha))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), grad)))), beta), alpha)), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), alpha)))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))))), tf.math.add(beta, beta)))), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.square(grad))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9775860487997508, 1.5653322482578287, 1.0603389242274524, 0.9350795507147611, 0.827517302627372, 0.7834918577405582, 0.751474565321885, 0.7355948404676296, 0.7036596623472865, 0.6818669273506586, 0.6869349611307793, 0.6322113209396794, 0.6374301012118794, 0.6199256438447531], "accuracy": [0.34605732560157776, 0.47364944219589233, 0.6218464970588684, 0.6567164063453674, 0.6910579800605774, 0.7074362635612488, 0.7173424959182739, 0.7206445932388306, 0.7374191284179688, 0.7445515990257263, 0.7375511527061462, 0.7658169269561768, 0.7625148296356201, 0.7648923397064209], "val_loss": [1.5819727693285262, 0.8048002549580165, 0.7518272229603359, 0.602391277040754, 0.607833845274789, 0.5903987033026559, 0.565010803086417, 0.5662474461964199, 0.48735354627881733, 0.5250212805611747, 0.5321026359285627, 0.4880677121026175, 0.5064672912870135, 0.46440701825278147], "val_accuracy": [0.31933334469795227, 0.6880000233650208, 0.6496666669845581, 0.7463333606719971, 0.7366666793823242, 0.737333357334137, 0.7456666827201843, 0.7556666731834412, 0.7829999923706055, 0.7670000195503235, 0.7670000195503235, 0.7793333530426025, 0.7429999709129333, 0.7806666493415833]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 9, 2, 0, 4, 6, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 2, 9, 9, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7251428365707397, "mapping_values": [1, 2, 2, 1, 1, 0, 64, 64, 39, 25, 6, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.subtract(grad, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(beta, grad), beta))), tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, beta))))))), tf.math.add(beta, alpha)))))))), tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), beta))))), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.sqrt(beta)))))), tf.math.add(tf.math.multiply(tf.math.add(beta, beta), grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9215088906053224, 1.2963198863866385, 0.8901780283351883, 0.8214997031889918, 0.7222631838752798, 0.6553017653966734, 0.6548369946481057, 0.6968315687665787, 0.67328371250272, 0.6818847129090178], "accuracy": [0.3703605830669403, 0.5616167187690735, 0.6775855422019958, 0.707040011882782, 0.7353057861328125, 0.7594769597053528, 0.7474573850631714, 0.7428345084190369, 0.7417778372764587, 0.7477215528488159], "val_loss": [1.309880154473441, 0.7337814739772252, 0.6037391594478062, 0.5323099408830915, 0.46737848009381977, 0.46568833930151804, 0.5345113618033273, 0.49879043442862375, 0.5194507837295532, 0.5126453638076782], "val_accuracy": [0.5, 0.6753333210945129, 0.7263333201408386, 0.7666666507720947, 0.7903333306312561, 0.7863333225250244, 0.7576666474342346, 0.7879999876022339, 0.7723333239555359, 0.7866666913032532]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 6, 1, 5, 5, 6, 2, 3, 3, 1, 3, 3, 3, 3, 3, 8, 2, 7, 2, 9, 9, 8, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 1, 4, 0, 5, 2, 1, 2, 1, 0, 3, 2, 1, 3, 5, 4, 2, 0, 3, 3, 0, 3, 0, 0], [57, 38, 41, 19, 22, 54, 76, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7080000042915344, "mapping_values": [1, 2, 2, 1, 1, 0, 41, 41, 25, 16, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), grad)), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, beta), alpha))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, beta)))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9220390579782662, 1.298205094023498, 0.8771018050271506, 0.7836519950385012, 0.6938271501108073, 0.6559671291097626, 0.6501820997051229, 0.7105002620153739, 0.7247308671135928, 0.7326799731653884, 0.781190761776963], "accuracy": [0.37062475085258484, 0.5600317120552063, 0.6794346570968628, 0.7176066637039185, 0.7424382567405701, 0.7464007139205933, 0.7580240368843079, 0.7425703406333923, 0.7453441023826599, 0.7342491149902344, 0.7280412316322327], "val_loss": [1.3191445214407784, 0.7097268445151192, 0.5439628192356655, 0.5130870171955654, 0.4831441470554897, 0.4638622317995344, 0.5105132034846714, 0.5559979847499302, 0.5068964106695992, 0.582625320979527, 0.5565904719488961], "val_accuracy": [0.503000020980835, 0.6836666464805603, 0.7516666650772095, 0.7733333110809326, 0.7770000100135803, 0.7919999957084656, 0.7753333449363708, 0.7703333497047424, 0.7793333530426025, 0.7446666955947876, 0.753000020980835]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 3, 5, 2, 0, 4, 5, 3, 2, 3, 2, 3, 3, 3, 8, 3, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 1, 1, 1, 4, 0, 1, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1], [0, 0], [2, 8], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.704285740852356, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 0, 4, 2, 2, 0, 0, 5, 3, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(grad, grad)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9157431240110758, 1.3572862024367713, 0.9051899355573583, 0.8462870719410472, 0.7095527894162168, 0.6919158340964761, 0.6634317486198933, 0.6592310519738677, 0.6386873423541463, 0.8679433879268451, 0.8503190942050569], "accuracy": [0.3707568347454071, 0.5455026030540466, 0.6742834448814392, 0.7046625018119812, 0.7358341217041016, 0.7383436560630798, 0.7493065595626831, 0.7617223858833313, 0.7589486241340637, 0.7337207794189453, 0.6993792057037354], "val_loss": [1.2347516332353865, 0.7705208574022565, 0.5332055262156895, 0.5228111062731061, 0.5042367662702288, 0.47904094627925325, 0.4870506354740688, 0.4846217802592686, 0.6070977960314069, 0.5489975043705532, 0.5363315003258842], "val_accuracy": [0.500333309173584, 0.6880000233650208, 0.7649999856948853, 0.762666642665863, 0.7760000228881836, 0.7919999957084656, 0.7789999842643738, 0.7833333611488342, 0.7423333525657654, 0.7699999809265137, 0.7606666684150696]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 4, 4, 0, 3, 0, 3, 2, 3, 2, 3, 2, 3, 1, 8, 6, 2, 9, 9, 5, 6, 5, 5, 3, 2, 3, 7, 2, 1, 0, 2, 3, 6, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 3, 1, 2, 1, 0, 2, 2, 1, 3, 3, 4, 2, 2, 3, 3, 0, 3, 3, 0, 1, 3], [11, 83, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.696571409702301, "mapping_values": [1, 2, 2, 1, 1, 0, 74, 74, 46, 28, 6, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(tf.math.pow(grad, tf.math.add(beta, grad)), tf.math.pow(grad, tf.math.negative(tf.math.multiply(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(alpha))))))), tf.math.add(beta, beta))), tf.math.add(beta, alpha)), tf.math.square(tf.math.multiply(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(beta, beta)))))), tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))))))))), tf.math.add(beta, beta)), tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(beta, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), grad))))))), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9220022764251279, 1.2974744832605467, 0.8769554996912459, 0.7852856107139788, 0.6986406488567217, 0.663570633212951, 0.6485136294834145, 0.6958403959407814, 0.6595223523669507, 0.6676997214953314, 0.8261364148497944], "accuracy": [0.37062475085258484, 0.5592392086982727, 0.6802271604537964, 0.719852089881897, 0.7417778372764587, 0.7450799345970154, 0.7564390301704407, 0.7436270117759705, 0.7528728246688843, 0.7450799345970154, 0.7255316376686096], "val_loss": [1.3183764389583044, 0.710566554750715, 0.5407418693814959, 0.5209911550794329, 0.4896243299756731, 0.45368952410561697, 0.5277822698865619, 0.47805791241782053, 0.48174568584987093, 0.5442883457456317, 0.623093843460083], "val_accuracy": [0.5016666650772095, 0.6823333501815796, 0.753000020980835, 0.7710000276565552, 0.7816666960716248, 0.7919999957084656, 0.7596666812896729, 0.7913333177566528, 0.7900000214576721, 0.7696666717529297, 0.7443333268165588]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 1, 2, 0, 8, 0, 2, 1, 9, 2, 3, 1, 2, 8, 3, 7, 1, 9, 9, 5, 6, 5, 5, 3, 2, 3, 7, 2, 3, 1, 2, 3, 6, 2, 5, 8, 3, 2, 6, 0, 0, 2, 8, 0], [4, 3, 3, 3, 1, 4, 0, 1, 2, 1, 2, 1, 0, 3, 2, 1, 3, 5, 4, 2, 0, 3, 3, 0, 3, 0, 0], [57, 38, 41, 19, 6, 54, 76, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.6271428465843201, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9220189691266962, 1.2977275667315256, 0.8776291083303882, 0.8070931312839794, 0.709915865161998, 0.6874828704470074, 0.667101150994382, 0.7142050449858567, 0.6988718875442372, 0.754907491775221, 0.8665891304433054, 0.9315367502196905, 0.9667230117054916], "accuracy": [0.37062475085258484, 0.5597675442695618, 0.681547999382019, 0.713908314704895, 0.7351737022399902, 0.7391361594200134, 0.7464007139205933, 0.7323999404907227, 0.7416457533836365, 0.7416457533836365, 0.7103421092033386, 0.6926429867744446, 0.7013604640960693], "val_loss": [1.317554201398577, 0.7108020441872733, 0.5375548260552543, 0.5230043275015694, 0.4992795331137521, 0.4937537057059152, 0.5081621919359479, 0.47786945956093924, 0.5090180465153286, 0.5443859781537738, 0.5953125783375331, 0.7642912013190133, 0.6671254634857178], "val_accuracy": [0.49933332204818726, 0.6809999942779541, 0.7486666440963745, 0.765999972820282, 0.7789999842643738, 0.7706666588783264, 0.7806666493415833, 0.8046666383743286, 0.7863333225250244, 0.762333333492279, 0.7406666874885559, 0.7170000076293945, 0.7183333039283752]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 1, 6, 3, 5, 7, 4, 0, 4, 8, 9, 3, 8, 3, 3, 8, 2, 6, 2, 9, 4, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 2, 2, 0, 1, 4, 3, 5, 2, 3, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.32428571581840515, "mapping_values": [1, 2, 2, 1, 1, 0, 24, 24, 15, 9, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, beta), beta), tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(alpha, tf.math.sqrt(grad))))))), grad))), tf.math.multiply(grad, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [1.9849533864047628, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.3419627547264099, 0.19442610442638397, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.8540901456560408, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.33533334732055664, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 0, 4, 0, 4, 0, 3, 2, 5, 2, 3, 3, 3, 1, 2, 7, 2, 9, 9, 9, 6, 5, 5, 3, 2, 3, 4, 2, 1, 6, 2, 3, 6, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 3, 2, 1, 0, 2, 2, 1, 3, 5, 4, 3, 2, 3, 3, 3, 3, 0, 0, 1, 3], [86, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [8, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [54, 73, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.negative(beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 2, 7, 2, 5, 3, 2, 2, 6, 2, 3, 2, 3, 3, 2, 8, 2, 7, 2, 4, 9, 0, 5, 6, 0, 1, 2, 3, 0, 2, 9, 8, 2, 3, 5, 9, 5, 8, 4, 2, 8, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 2, 5, 3, 3, 2, 1, 1, 2, 1, 1, 3, 3, 3, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 3, 3, 1, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [2, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 67, 67, 41, 26, 4, 1, 0, 0, 0, 0, 13, 7, 6, 1], "tree_depth": 73, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.math.multiply(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), alpha)), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))), tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(alpha, tf.math.square(tf.math.add(beta, grad)))))))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), tf.math.add(beta, beta))), tf.math.add(beta, beta)))))))), tf.math.add(beta, tf.math.square(grad))), tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, grad)))), tf.math.add(grad, tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.multiply(beta, tf.math.multiply(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [8, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 8, 2, 3, 3, 3, 8, 2, 9, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 0, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 9, 3, 0, 4, 6, 1, 5, 2, 2, 3, 3, 2, 8, 2, 2, 2, 9, 5, 8, 6, 5, 5, 1, 2, 3, 1, 2, 1, 8, 5, 3, 1, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 1, 0, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [82, 38, 66, 19, 16, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 42, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(tf.math.subtract(alpha, tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3346814931643527, 2.4918280124916237, 116716549574.83838, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.050851933658123016, 0.010566635988652706, 0.07026813179254532, 0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0527845110212053, 2.4070963178362166, 4.0101343299023744e+33, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004999999888241291, 0.01366666704416275, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 9, 2, 0, 8, 6, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 2, 1, 9, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 1, 5, 2, 1, 4, 0, 5, 3, 1, 0, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 2, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [67412.8275704106, 2.313909260131711, 2.305389774662865, 2.3034474281287856, 2.3030327189914965, 2.3029773500160595, 2.3030240758062748, 2.3029084066122185, 2.302949968692476, 2.302912571395251, 2.3028831559716436], "accuracy": [0.09866596013307571, 0.09377889335155487, 0.09681680053472519, 0.09417514503002167, 0.09589222073554993, 0.09655263274908066, 0.09351472556591034, 0.09576013684272766, 0.09219389408826828, 0.09509972482919693, 0.09602430462837219], "val_loss": [1.9888012068612235, 1.9773648806980677, 1.974562508719308, 1.9738918031964983, 1.973656449999128, 1.9736858095441545, 1.973675046648298, 1.97371244430542, 1.973672594342913, 1.9736292021615165, 1.9736817904881068], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.10100000351667404, 0.09799999743700027, 0.09799999743700027, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [2, 0, 2, 5, 5, 2, 0, 4, 5, 3, 2, 3, 2, 3, 3, 3, 8, 2, 9, 6, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 1, 0, 4, 1, 5, 2, 3, 0, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3031647205352783, 2.3030887899334562, 2.306292673663189, 2.308510543458954, 2.311734280487361, 2.3129993895529566, 2.3176574966517327, 2.321815942083572, 2.329585621905223, 2.3453839421665914, 2.3744335862954435, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09047681838274002, 0.0936468094587326, 0.08506141602993011, 0.08136309683322906, 0.08281600475311279, 0.07832518965005875, 0.07885351777076721, 0.07660810649394989, 0.0754193663597107, 0.07053229212760925, 0.07951393723487854, 0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.972067219870431, 1.9732443945748466, 1.9747650282723563, 1.9766617502485002, 1.9787402834211076, 1.981139864240374, 1.9841032028198242, 1.9874910627092635, 1.9932186262948173, 2.0060709544590543, 2.056539467402867, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02866666577756405, 0.023333333432674408, 0.024666666984558105, 0.024666666984558105, 0.0273333340883255, 0.035999998450279236, 0.04533333331346512, 0.05833333358168602, 0.08033332973718643, 0.09600000083446503, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 9, 1, 7, 1, 4, 0, 4, 0, 3, 2, 1, 2, 3, 3, 3, 9, 2, 7, 2, 9, 9, 0, 6, 5, 5, 3, 2, 3, 7, 2, 1, 2, 2, 5, 6, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 3, 3, 1, 2, 1, 0, 2, 2, 1, 3, 0, 4, 2, 3, 3, 3, 0, 3, 0, 0, 1, 3], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 9, 5, 0, 2, 6, 3, 2, 2, 4, 9, 3, 0, 8, 2, 2, 2, 9, 9, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 3, 2, 2, 1, 1, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 34, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 3, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.3025392420996353, 2.3011725984937903, 2.3024262197895324, 2.3021646486281595, 2.302875956303691, 2.3009815328172514], "accuracy": [0.09245806187391281, 0.09694888442754745, 0.09113723784685135, 0.08757099509239197, 0.09272222965955734, 0.0936468094587326], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 9, 5, 0, 4, 6, 3, 2, 2, 2, 0, 3, 0, 8, 2, 2, 2, 9, 9, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 0, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [51, 24, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3025392420996353, 2.3011725984937903, 2.3024262197895324, 2.3021646486281595, 2.302875956303691, 2.3009815328172514], "accuracy": [0.09245806187391281, 0.09694888442754745, 0.09113723784685135, 0.08757099509239197, 0.09272222965955734, 0.0936468094587326], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]