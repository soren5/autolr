[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 6, 5, 5, 7, 4, 0, 4, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 2, 1, 4, 0, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 17, 44]], "fitness": -0.8105714321136475, "mapping_values": [1, 2, 2, 1, 1, 0, 20, 20, 13, 7, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9701710674882706, 1.379780107863339, 1.025028493079716, 0.8758146878183793, 0.8148842895775739, 0.7679858996631636, 0.7388358690703722, 0.7052749344197562, 0.701567926316796, 0.6567120796748283, 0.6629267125443981, 0.62625904886903, 0.6068097429268585, 0.6096356544260335, 0.6234400962731463, 0.5758351734710833, 0.5795246789468325, 0.582036617165622, 0.5491613650822668, 0.5417054353719531, 0.535567991312516, 0.536157933177099, 0.5259736912708084, 0.5223297079154892, 0.5085020168834374, 0.5083169460831979, 0.5026626867262947, 0.47974171615342864, 0.48578651949100016, 0.4839663931667183], "accuracy": [0.34922730922698975, 0.5247655510902405, 0.6209219098091125, 0.6717738509178162, 0.6929071545600891, 0.7136441469192505, 0.718399167060852, 0.7306828498840332, 0.7331924438476562, 0.7506273984909058, 0.7460044622421265, 0.7658169269561768, 0.7664773464202881, 0.7652885913848877, 0.7621186375617981, 0.7876105904579163, 0.7795535326004028, 0.778761088848114, 0.7902522683143616, 0.7994980812072754, 0.796328067779541, 0.7977809906005859, 0.7961959838867188, 0.8047813773155212, 0.8072909712791443, 0.8100647330284119, 0.8144234418869019, 0.819970965385437, 0.8193105459213257, 0.8168009519577026], "val_loss": [1.3715958935873849, 0.9007077217102051, 0.6857722997665405, 0.6123054708753314, 0.5712797301156181, 0.6007466656821114, 0.5485403878348214, 0.519961987222944, 0.536357045173645, 0.5063665764672416, 0.5106064932686942, 0.4981215340750558, 0.4594763347080776, 0.49360677174159456, 0.45667403084891184, 0.4859234094619751, 0.46709607328687397, 0.42804681403296335, 0.42605445214680265, 0.4486946889332363, 0.42951278175626484, 0.41129523515701294, 0.43430330072130474, 0.4222273826599121, 0.40555067573274883, 0.4158365896769932, 0.3885595457894461, 0.39620535714285715, 0.4077518326895578, 0.3881995252200535], "val_accuracy": [0.46799999475479126, 0.5646666884422302, 0.7016666531562805, 0.7396666407585144, 0.7329999804496765, 0.7163333296775818, 0.7440000176429749, 0.7703333497047424, 0.7440000176429749, 0.7596666812896729, 0.7486666440963745, 0.7649999856948853, 0.8033333420753479, 0.7689999938011169, 0.8090000152587891, 0.7720000147819519, 0.7760000228881836, 0.800000011920929, 0.8103333115577698, 0.7963333129882812, 0.7983333468437195, 0.809333324432373, 0.8050000071525574, 0.815666675567627, 0.824999988079071, 0.8050000071525574, 0.824999988079071, 0.8180000185966492, 0.8216666579246521, 0.8213333487510681]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7971428632736206, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 22, 14, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, beta)), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9514888124758178, 1.4379474719942773, 1.1131317481199796, 0.8902268122924459, 0.8051360951218197, 0.7776863018141572, 0.713119351246637, 0.708173150336659, 0.6977467960165696, 0.6630536769564126, 0.6734693642022225, 0.61335923204553, 0.6173121107331577, 0.5794494895493555, 0.5985764489040367, 0.5780812324927767, 0.6029472491799753], "accuracy": [0.35239729285240173, 0.5033681392669678, 0.601109504699707, 0.6709813475608826, 0.6968696117401123, 0.709021270275116, 0.7378153204917908, 0.7321357727050781, 0.7395324110984802, 0.7510236501693726, 0.7429665923118591, 0.7708360552787781, 0.7700436115264893, 0.7843085527420044, 0.7765156626701355, 0.7858935594558716, 0.7770439982414246], "val_loss": [1.54426189831325, 1.1172703334263392, 0.6940531219754901, 0.6151583024433681, 0.62675712789808, 0.6015626532690865, 0.5606932980673653, 0.5349932057516915, 0.5998770339148385, 0.493414078439985, 0.49352959224155973, 0.47552008288247244, 0.4618312120437622, 0.4775174345288958, 0.48672849791390554, 0.4614979199000767, 0.4738606555121286], "val_accuracy": [0.34066668152809143, 0.534333348274231, 0.6863333582878113, 0.721666693687439, 0.7006666660308838, 0.7296666502952576, 0.734666645526886, 0.7463333606719971, 0.7213333249092102, 0.7793333530426025, 0.7889999747276306, 0.7986666560173035, 0.7986666560173035, 0.7923333048820496, 0.7720000147819519, 0.7836666703224182, 0.777999997138977]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [7, 2, 1, 7, 5, 5, 4, 4, 0, 3, 2, 2, 2, 5, 3, 3, 8, 8, 7, 8, 9, 9, 2], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4], [11, 61, 68, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 4, 5, 9, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44, 79]], "fitness": -0.7831428647041321, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 23, 13, 4, 1, 0, 0, 0, 0, 10, 7, 3, 4], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.square(alpha), grad), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, beta))))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.2207032393124346, 1.7199701843103004, 1.2205530020066728, 1.0591529309080419, 0.9311682858943876, 0.8550982309008129, 0.8225556959518273, 0.7821290371377376, 0.7564082174269027, 0.7258037505778402, 0.741377194977046, 0.6820328649024702, 0.6929338319410879, 0.6518351996673994, 0.6589838122301224, 0.6433806701374721, 0.6485830245552093], "accuracy": [0.24739135801792145, 0.46810197830200195, 0.5774666666984558, 0.6268656849861145, 0.6690001487731934, 0.6951525807380676, 0.6997754573822021, 0.7074362635612488, 0.7246070504188538, 0.7368907928466797, 0.7260599732398987, 0.7479857206344604, 0.7432307600975037, 0.7581561207771301, 0.7543256878852844, 0.7651565074920654, 0.7592127919197083], "val_loss": [1.7103914192744665, 1.0209050178527832, 0.8210334607533046, 0.6940279517854963, 0.6631300108773368, 0.6600943292890277, 0.619979705129351, 0.5894747120993478, 0.5787134511130196, 0.5393056528908866, 0.5289693559919085, 0.505055478640965, 0.5009077276502337, 0.5079916885920933, 0.5045764105660575, 0.4981452056339809, 0.48720463684626986], "val_accuracy": [0.5043333172798157, 0.656333327293396, 0.6520000100135803, 0.7103333473205566, 0.7086666822433472, 0.7146666646003723, 0.7269999980926514, 0.7236666679382324, 0.7400000095367432, 0.7636666893959045, 0.7696666717529297, 0.7826666831970215, 0.7760000228881836, 0.7749999761581421, 0.7743333578109741, 0.7756666541099548, 0.7726666927337646]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [5, 0, 6, 7, 5, 5, 7, 4, 0, 3, 0, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2, 1, 4, 3, 5, 2, 3, 2, 1, 0, 4], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7802857160568237, "mapping_values": [1, 2, 2, 1, 1, 0, 27, 27, 16, 11, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(grad, beta)))))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9514311804448325, 1.4390326449112445, 1.11649335545477, 0.901617295737941, 0.7988541307797001, 0.7958476315903831, 0.7205959127610937, 0.6952073118548431, 0.6848543385835199, 0.6884949816263678, 0.6738294859871558, 0.621830156238056, 0.6159286042009882, 0.5946531078803179, 0.5956811738004774, 0.581475707486699], "accuracy": [0.35239729285240173, 0.5031039714813232, 0.5959582328796387, 0.6656980514526367, 0.7045304179191589, 0.7020208835601807, 0.7313432693481445, 0.7366266250610352, 0.7446836829185486, 0.7391361594200134, 0.7423061728477478, 0.7663452625274658, 0.7717606425285339, 0.772288978099823, 0.7771760821342468, 0.7886672616004944], "val_loss": [1.5436151708875383, 1.15963990347726, 0.7988803046090263, 0.6172972917556763, 0.6472050292151315, 0.5905774661472866, 0.5583810976573399, 0.5453813586916242, 0.5967256341661725, 0.4926701954432896, 0.4911837577819824, 0.48462462425231934, 0.46823876244681223, 0.47544731412615093, 0.47934985160827637, 0.4517021179199219], "val_accuracy": [0.3426666557788849, 0.5139999985694885, 0.6399999856948853, 0.734666645526886, 0.70333331823349, 0.7336666584014893, 0.7456666827201843, 0.7566666603088379, 0.7213333249092102, 0.781000018119812, 0.7926666736602783, 0.7823333144187927, 0.7816666960716248, 0.7870000004768372, 0.7850000262260437, 0.784333348274231]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 6, 1, 7, 5, 5, 7, 4, 0, 3, 2, 0, 2, 3, 3, 9, 8, 2, 7, 2, 9, 9], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 3, 0, 4], [11, 61, 23, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.6062856912612915, "mapping_values": [1, 2, 2, 1, 1, 0, 27, 27, 16, 11, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta)))))), tf.math.pow(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.multiply(beta, alpha))))))), tf.math.add(beta, tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9382484729940928, 1.2666104555586626, 0.9519306860186121, 0.789172702689984, 0.7229164264158345, 0.7879839924978086, 0.7340205950649454, 0.7345374960704738, 0.7847973056882521, 0.8136015732479511, 0.9151379334660507, 0.9577254929704405, 1.0555626277548211, 2.4518085351756786, 4.397710287056075], "accuracy": [0.37683266401290894, 0.5732399821281433, 0.6544709801673889, 0.7148329019546509, 0.7362303733825684, 0.7207766771316528, 0.7382115721702576, 0.7283053994178772, 0.7244749665260315, 0.7094175219535828, 0.7148329019546509, 0.667811393737793, 0.6572447419166565, 0.44947826862335205, 0.13472460210323334], "val_loss": [1.1963163103376115, 0.7435533489499774, 0.6225351776395526, 0.5264793804713658, 0.5466420480183193, 0.5009515626089913, 0.516136748450143, 0.6314403159277779, 0.601056524685451, 0.5733004467827933, 0.6038599184581211, 0.6644105740955898, 0.9241665090833392, 2.069416114262172, 2.944223199571882], "val_accuracy": [0.5643333196640015, 0.6869999766349792, 0.737666666507721, 0.768666684627533, 0.7749999761581421, 0.7633333206176758, 0.7670000195503235, 0.7753333449363708, 0.7566666603088379, 0.7803333401679993, 0.7553333044052124, 0.7329999804496765, 0.7026666402816772, 0.21933333575725555, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 5, 1, 1, 5, 5, 5, 5, 0, 1, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 8, 9, 3, 4, 6, 1, 1, 8, 2, 6, 6, 9, 0, 9, 6, 6, 6, 3, 3, 8, 3, 1, 1, 2, 2, 6, 0, 9, 0, 5, 6, 2, 5, 3, 8, 6, 0, 2, 9, 2, 1, 9, 4, 2, 2, 4, 9, 2, 1, 5, 5, 7, 1, 9, 7, 2, 3, 5, 8], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 0, 5, 3, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3, 4, 1, 0, 5], [11, 61, 14, 19, 22, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.3531428575515747, "mapping_values": [1, 2, 2, 1, 1, 0, 87, 87, 55, 32, 10, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.square(grad), grad), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.negative(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(beta, beta)), alpha)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.sqrt(alpha))))), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad), tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))))), grad)))))))))), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))))))), tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.sqrt(grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4646246442390454, 2.2884518285516293, 2.302977504574029, 2.2564146791419586, 2.2746623995092805, 2.248337633999316, 2.131075403867003, 2.2878238709532526, 2.2612500983364057, 2.306985962109055], "accuracy": [0.19112402200698853, 0.13221503794193268, 0.09906221181154251, 0.16312244534492493, 0.21001188457012177, 0.1640470176935196, 0.24514594674110413, 0.17963281273841858, 0.15612204372882843, 0.09694888442754745], "val_loss": [1.8894389697483607, 1.9746684346880232, 1.9718267577035087, 1.9632738658360072, 1.8166890144348145, 1.9657478332519531, 1.9875426292419434, 1.977048669542585, 1.9775852475847517, 1.9740725925990514], "val_accuracy": [0.3296666741371155, 0.09866666793823242, 0.14800000190734863, 0.16200000047683716, 0.37566667795181274, 0.10633333027362823, 0.10566666722297668, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [7, 2, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 1, 2, 8, 9, 1, 4, 7, 1, 1, 8, 2, 6, 6, 9, 0, 9, 5, 6, 6, 3, 3, 6, 3, 1, 1, 2, 3, 6, 3, 9, 0, 5, 8, 2, 5, 3, 8, 6, 0, 2, 7, 6, 9, 9, 4, 2, 2, 4, 9, 2, 1, 5, 5, 7, 1, 9, 7, 2, 3, 5, 8], [4, 3, 3, 2, 3, 4, 0, 5, 2, 1, 2, 1, 0, 4, 1, 5, 3, 1, 4, 3, 2, 3, 3, 3, 2, 1, 2, 5, 0, 1, 3, 1, 3, 5, 4, 1, 2, 1, 4, 4, 0, 1, 3, 0, 2], [43, 65, 41, 19, 22, 56, 99, 46, 58, 91, 56, 46, 25, 52, 10, 13, 88], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.2565714418888092, "mapping_values": [1, 2, 2, 1, 1, 0, 117, 117, 74, 43, 12, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), beta))))))))), alpha)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), beta))), tf.math.add(beta, grad))))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, beta))))))))))), tf.math.add(beta, tf.math.add(tf.math.subtract(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), alpha)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4650524841591257, 2.2771369281335985, 2.295128455991522, 2.477749998795279, 2.333731457226942, 2.3051173070386857], "accuracy": [0.1912561058998108, 0.13076211512088776, 0.1484612375497818, 0.17778365314006805, 0.13512085378170013, 0.10381719470024109], "val_loss": [1.899092129298619, 1.9737026350838798, 1.9726672172546387, 1.9767836843218123, 1.983710697719029, 1.9658055305480957], "val_accuracy": [0.3233333230018616, 0.09866666793823242, 0.14666666090488434, 0.10100000351667404, 0.09933333098888397, 0.1393333375453949]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 9, 1, 2, 3, 3, 8, 2, 7, 2, 9, 9, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 3, 5, 3, 1, 5, 2, 3, 0, 0, 0, 2, 3, 2], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 5, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.25457143783569336, "mapping_values": [1, 2, 2, 1, 1, 0, 39, 39, 25, 14, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(grad, tf.math.add(beta, beta)))))), tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, beta)))))))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4651693944146276, 2.2723401358350865, 2.2613746092666203, 2.3040810263057696, 2.263341815826553, 2.336647701143762], "accuracy": [0.19138818979263306, 0.1306300312280655, 0.19059570133686066, 0.10210011899471283, 0.16140536963939667, 0.1748778223991394], "val_loss": [1.904177256992885, 1.9699206352233887, 1.9765787805829729, 1.9711670194353377, 1.7233355045318604, 1.9745313099452428], "val_accuracy": [0.32499998807907104, 0.12066666781902313, 0.1003333330154419, 0.09966666996479034, 0.296999990940094, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [7, 0, 0, 7, 5, 6, 7, 4, 2, 3, 2, 2, 2, 5, 9, 0, 4, 0, 1, 2, 9, 9, 8, 6, 7], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 22, 41, 19, 22, 56, 99, 46, 58, 91, 56, 46, 10, 52], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 4, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.24228571355342865, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.negative(tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.464874899634564, 2.2958430808690466, 2.2705735316318747, 2.2656684246171563, 2.268153189321661, 2.30674186787034], "accuracy": [0.19138818979263306, 0.13168670237064362, 0.12574297189712524, 0.18491612374782562, 0.15136705338954926, 0.09826971590518951], "val_loss": [1.8864709990365165, 1.9745488848005022, 1.9748148236955916, 1.9747405733380998, 1.9809961318969727, 1.9740065847124373], "val_accuracy": [0.3343333303928375, 0.09866666793823242, 0.09966666996479034, 0.10100000351667404, 0.1003333330154419, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 5, 1, 9, 5, 5, 0, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 4, 7, 2, 8, 9, 3, 4, 7, 1, 1, 8, 2, 6, 6, 9, 0, 9, 5, 6, 6, 3, 3, 6, 3, 1, 1, 2, 2, 6, 0, 9, 0, 5, 2, 2, 5, 3, 8, 6, 0, 2, 7, 6, 9, 9, 4, 2, 2, 4, 9, 2, 1, 5, 5, 7, 1, 9, 7, 2, 3, 5, 8], [4, 3, 5, 3, 1, 5, 5, 3, 0, 2, 1, 2, 3, 3, 0, 1, 4, 4, 0, 4, 3], [15, 11, 14, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.24199999868869781, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 5, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4648913965249153, 2.292777765003477, 2.291879669329777, 2.3401527466822483, 2.2041632672185045, 2.304198331112371], "accuracy": [0.1912561058998108, 0.13234710693359375, 0.11266675591468811, 0.16933034360408783, 0.18095363676548004, 0.10091137140989304], "val_loss": [1.8879055295671736, 1.974633012499128, 1.7382535253252303, 1.9618920598711287, 1.975161416190011, 1.973773615700858], "val_accuracy": [0.32866665720939636, 0.09866666793823242, 0.22433333098888397, 0.17666666209697723, 0.10133333504199982, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [5, 0, 0, 7, 3, 5, 7, 4, 0, 3, 2, 8, 8, 5, 9, 3, 4, 1, 7, 2, 9, 9, 8, 6, 7], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 61, 41, 19, 22, 56, 99, 46, 58, 91, 56, 46, 10, 52], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 3, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 16, 10, 6, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.negative(sigma)), tf.math.add(alpha, tf.math.square(alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [7, 9, 1, 7, 5, 6, 7, 9, 2, 3, 2, 2, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9], [4, 3, 5, 1, 1, 4, 2, 5, 3, 1, 3, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 1, 9, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 22, 13, 5, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(alpha, alpha), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(grad), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(grad, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.negative(sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [9, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [7, 0, 1, 2, 5, 5, 0, 4, 0, 5, 2, 2, 2, 3, 3, 3, 4, 2, 1, 2, 9, 9, 0], [4, 3, 5, 2, 1, 4, 1, 5, 2, 1, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 0, 7, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 3, 3, 1, 1], [43, 9, 44, 19]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 36, 36, 23, 13, 3, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(grad)))))), tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(beta, alpha))), tf.math.multiply(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.math.multiply(tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(alpha))))))), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [10840669.308925312, 213943092.6345265, 991757706.3130366, 2726822287.976753, 5893218245.435477, 10760293764.175934], "accuracy": [0.09708096832036972, 0.09232597798109055, 0.09985470771789551, 0.10236428678035736, 0.10011887550354004, 0.09668471664190292], "val_loss": [42054355.428571425, 335942180.5714286, 1133256850.2857144, 2685592283.428571, 5244515181.714286, 9061652187.428572], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [7, 0, 1, 7, 5, 9, 7, 4, 4, 3, 2, 2, 8, 0, 3, 3, 4, 0, 7, 2, 9, 9, 8, 6, 7, 8], [0, 0, 5, 3, 1, 5, 5, 3, 0, 0, 1, 2, 3, 3], [11, 61, 41, 19, 61, 56, 89, 46, 58, 91, 56, 46, 10, 52], [0, 0, 1], [0, 1], [2, 2], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 34, 34, 22, 12, 7, 3, 2, 1, 1, 0, 12, 8, 4, 3], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.pow(grad, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), alpha)))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.negative(sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 2, 8, 3, 8, 0, 7, 2, 9, 9], [4, 3, 5, 2, 1, 4, 0, 5, 3, 1, 1, 1, 0, 0], [11, 85, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 2, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 6, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [7, 0, 4, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 0, 3, 8, 2, 7, 2, 9, 9, 5], [4, 3, 5, 2, 1, 4, 1, 3, 2, 1, 2, 1, 2, 4], [17, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 5, 2, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 36, 36, 23, 13, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.pow(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)), tf.math.add(beta, alpha)), tf.math.negative(grad)), beta)), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))))))))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [9, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 0, 2, 7, 2, 9, 9], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 3, 0], [77, 61, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44, 51]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 36, 36, 20, 16, 3, 1, 0, 0, 0, 0, 12, 8, 4, 4], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(beta, tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), grad)))), beta)), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))))))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), sigma)))", "other_info": {"loss": [10840669.308925312, 213943092.6345265, 991757706.3130366, 2726822287.976753, 5893218245.435477, 10760293764.175934], "accuracy": [0.09708096832036972, 0.09232597798109055, 0.09985470771789551, 0.10236428678035736, 0.10011887550354004, 0.09668471664190292], "val_loss": [42054355.428571425, 335942180.5714286, 1133256850.2857144, 2685592283.428571, 5244515181.714286, 9061652187.428572], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 2, 6, 2, 6, 9, 0, 8], [4, 2, 5, 2, 0, 4, 0, 5, 2, 1, 2, 1, 0, 4, 0, 4], [11, 26, 41, 19, 22], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 47, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 40, 40, 24, 16, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(grad))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [892543.2283785602, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.04332320764660835, 0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.277185549318051e+21, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 7, 4, 0, 3, 2, 2, 2, 3, 3, 3, 8, 4, 7, 2, 9, 9], [4, 3, 0, 3, 3, 4, 0, 5, 3, 1, 2, 1, 0, 2, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 61, 41, 27, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44, 13]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 1, 36, 36, 22, 14, 5, 1, 0, 0, 0, 0, 12, 8, 4, 4], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.subtract(grad, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, grad), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(grad, grad))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.pow(tf.math.square(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), sigma)", "other_info": {"loss": [2.3030868752474136, 2.3014942390445423, 2.304796630932182, 2.3016018822460507, 2.3041280812087264, 2.3020046812872987], "accuracy": [0.09140139818191528, 0.0866464152932167, 0.08875974267721176, 0.09008057415485382, 0.08849557489156723, 0.08730682730674744], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [7, 0, 5, 7, 5, 5, 7, 4, 0, 2, 2, 2, 8, 5, 9, 3, 4, 1, 7, 2, 9, 9, 8, 6, 7], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 4, 4, 0, 1, 0, 4, 5, 5, 0, 2, 5, 4, 4, 5, 5, 2, 3, 1, 4, 5, 3, 0, 3, 2, 2, 0, 1, 3], [11, 61, 9, 19, 22, 56, 99, 46, 58, 91, 56, 46, 10, 52], [0, 1, 1, 1, 0, 1, 1], [0, 0, 0], [2, 2, 3], [5], [76], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 0, 3, 6, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 50]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 4, 4, 2, 2, 0, 3, 1, 1, 0, 0, 16, 10, 6, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.negative(sigma))))), tf.math.add(alpha, tf.math.square(alpha))))", "other_info": {"loss": [2.3030868752474136, 2.3014942390445423, 2.304796630932182, 2.3016018822460507, 2.3041280812087264, 2.3020046812872987], "accuracy": [0.09140139818191528, 0.0866464152932167, 0.08875974267721176, 0.09008057415485382, 0.08849557489156723, 0.08730682730674744], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]