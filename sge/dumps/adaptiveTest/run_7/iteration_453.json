[{"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8411428332328796, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.negative(grad), tf.math.divide_no_nan(grad, grad))), tf.math.pow(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.132797730943672, 1.8394693073705517, 1.3388558607437764, 0.9494504621000244, 0.8213026987610398, 0.7485382655639659, 0.716765806195034, 0.6813620844017702, 0.6373328396657109, 0.6481960552353759, 0.5998680703140221, 0.588340011743302, 0.5701772292071896, 0.5769145481023712, 0.5407213459334841, 0.5316037985438038, 0.5334273188058427, 0.49545806635325185, 0.48975270785014424, 0.49669989991134517, 0.49904672155338053, 0.4588798418839877, 0.4786564624068633, 0.45888599349507375, 0.4504762574894522, 0.4513476323087879, 0.4496524141937309, 0.4301324176388394, 0.42335140855871944, 0.4252684574636722, 0.41082933288460727, 0.39345581785657263, 0.3969803293658884, 0.39299420191076184, 0.37931797946795276, 0.370158179978401, 0.36419330851639015, 0.37768323017054733, 0.3698154090181743, 0.3633801137742869, 0.364709537578155, 0.3388781918707525], "accuracy": [0.30101704597473145, 0.37287017703056335, 0.5365209579467773, 0.6450931429862976, 0.6831330060958862, 0.7162858247756958, 0.7238145470619202, 0.7395324110984802, 0.7557786107063293, 0.7524765729904175, 0.7693831920623779, 0.7726852297782898, 0.7802139520645142, 0.7810064554214478, 0.7924976944923401, 0.7993659973144531, 0.8009510040283203, 0.8164047002792358, 0.8178576231002808, 0.8112534880638123, 0.8177255392074585, 0.826310932636261, 0.8202351331710815, 0.8296129703521729, 0.8289526104927063, 0.8335754871368408, 0.8286884427070618, 0.8444063067436218, 0.8433496356010437, 0.8372738361358643, 0.8457271456718445, 0.8549728989601135, 0.8524633646011353, 0.8508783578872681, 0.8585391640663147, 0.8628978729248047, 0.8683133125305176, 0.8603883385658264, 0.8603883385658264, 0.8625016212463379, 0.8642187118530273, 0.8734645247459412], "val_loss": [1.2545359815870012, 1.4111808708735876, 0.8652366399765015, 0.7310371909822736, 0.583362204687936, 0.5301311186381749, 0.5193325792040143, 0.5013016292027065, 0.48710901396615164, 0.47541020597730366, 0.44744845799037386, 0.4573161431721279, 0.44020932061331614, 0.4173623153141567, 0.4085675392832075, 0.40782374143600464, 0.40539983340672087, 0.38733593055180143, 0.38685985122408184, 0.4769843646458217, 0.38339293003082275, 0.38190822090421406, 0.4043748804501125, 0.3782139846256801, 0.3716897453580584, 0.36057757479803904, 0.3588254877499172, 0.343237612928663, 0.3662715383938381, 0.34652529444013325, 0.36616369656154085, 0.3198256662913731, 0.35715058871677946, 0.3356617774282183, 0.3250799093927656, 0.333842260496957, 0.315256553036826, 0.32085420404161724, 0.33258913244519916, 0.31520436491285053, 0.32163036721093313, 0.3837733779634748], "val_accuracy": [0.45366665720939636, 0.48233333230018616, 0.628333330154419, 0.6256666779518127, 0.7409999966621399, 0.7553333044052124, 0.7596666812896729, 0.7616666555404663, 0.765999972820282, 0.7820000052452087, 0.7889999747276306, 0.7836666703224182, 0.7979999780654907, 0.8023333549499512, 0.8176666498184204, 0.8146666884422302, 0.8146666884422302, 0.8243333101272583, 0.8233333230018616, 0.7979999780654907, 0.8303333520889282, 0.8379999995231628, 0.8143333196640015, 0.8393333554267883, 0.8399999737739563, 0.8383333086967468, 0.8443333506584167, 0.8503333330154419, 0.8293333053588867, 0.8533333539962769, 0.8373333215713501, 0.8636666536331177, 0.8420000076293945, 0.8493333458900452, 0.8613333106040955, 0.8583333492279053, 0.8703333139419556, 0.8650000095367432, 0.8573333621025085, 0.8676666617393494, 0.8650000095367432, 0.8333333134651184]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [41, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8251428604125977, "mapping_values": [1, 4, 4, 4, 0, 2, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(grad)), tf.math.divide_no_nan(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(beta, alpha), alpha)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.1328019465217345, 1.8376313649179945, 1.3412004883389164, 0.9407923349992805, 0.8527620908464848, 0.7434997228016675, 0.7024993113853581, 0.6890915747111452, 0.6331057773762533, 0.6477390585826168, 0.5979138419077366, 0.5934364455109338, 0.5793839552304559, 0.5634410916192263, 0.5333221786333318, 0.5293813032906179, 0.5341834808620937, 0.5022259002757851, 0.4865513494647395, 0.4992042428088966, 0.4923278383882117, 0.46922218805101995, 0.48412275786696485, 0.4542710912257547, 0.45342544489973774, 0.4326663760500593, 0.4417627776626425, 0.43622201392206894, 0.4240966245577304, 0.42482605437561033, 0.4070530039145253], "accuracy": [0.3011491298675537, 0.37405890226364136, 0.5398229956626892, 0.652621865272522, 0.6705851554870605, 0.7231541275978088, 0.7314753532409668, 0.7327961921691895, 0.7578919529914856, 0.7470611333847046, 0.7726852297782898, 0.7693831920623779, 0.7765156626701355, 0.7840443849563599, 0.7971205711364746, 0.8026680946350098, 0.7987055778503418, 0.8131026029586792, 0.8183859586715698, 0.8092722296714783, 0.8204993009567261, 0.8215559124946594, 0.8156121969223022, 0.8286884427070618, 0.8280280232429504, 0.837537944316864, 0.8315942287445068, 0.8405758738517761, 0.8469158411026001, 0.8379341959953308, 0.852331280708313], "val_loss": [1.2548595837184362, 1.403663158416748, 0.8198080914361137, 0.6911306210926601, 0.5858052458081927, 0.5213114363806588, 0.5273412636348179, 0.501423682485308, 0.4713787181036813, 0.48238846233912874, 0.4392587797982352, 0.4521756512778146, 0.4532168081828526, 0.40891798053468975, 0.40467374665396555, 0.41108798129217966, 0.4195191775049482, 0.38954376322882517, 0.3831189615385873, 0.4611186129706247, 0.3773834875651768, 0.4152827688625881, 0.4060060126440866, 0.3711439882005964, 0.35919536863054546, 0.3359022991997855, 0.35897444827216013, 0.33873518875667025, 0.36093797854014803, 0.33998042345046997, 0.38021201746804373], "val_accuracy": [0.45366665720939636, 0.48399999737739563, 0.668666660785675, 0.6663333177566528, 0.7393333315849304, 0.7639999985694885, 0.7543333172798157, 0.7630000114440918, 0.7696666717529297, 0.7839999794960022, 0.7919999957084656, 0.7906666398048401, 0.7896666526794434, 0.8143333196640015, 0.8233333230018616, 0.8113333582878113, 0.8026666641235352, 0.8240000009536743, 0.8273333311080933, 0.7983333468437195, 0.8373333215713501, 0.8163333535194397, 0.8209999799728394, 0.8426666855812073, 0.843666672706604, 0.8546666502952576, 0.8420000076293945, 0.8533333539962769, 0.8339999914169312, 0.8523333072662354, 0.8296666741371155]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [4, 0, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 1, 4, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8165714144706726, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.132771024834982, 1.8359342958350553, 1.3762206164616888, 0.9424348137067247, 0.8088265162464682, 0.7655672140408658, 0.705888841138335, 0.6944325630376053, 0.6430452900902155, 0.6419350598088628, 0.5876716674358271, 0.6032230861119905, 0.5711801655461618, 0.5700793560816234, 0.5660777586389133, 0.5242954161913167, 0.5337439135254304, 0.49303731038081977, 0.48888627701998544, 0.5023077638267983, 0.49699926337766265, 0.4596699813550348, 0.47218811291556206, 0.46151414813540004, 0.4549526808961287, 0.43955202647692115, 0.44641168607051235, 0.4339845627054263, 0.4128705988021937, 0.4361117257575601, 0.41396875560811136, 0.39510746283490883, 0.40196958045288084], "accuracy": [0.30101704597473145, 0.3727380931377411, 0.5251618027687073, 0.6382247805595398, 0.6882842183113098, 0.715889573097229, 0.7302865982055664, 0.7364945411682129, 0.7516840696334839, 0.7500990629196167, 0.7796856164932251, 0.7687227725982666, 0.7779685854911804, 0.7828556299209595, 0.7839123010635376, 0.8031964302062988, 0.8029322624206543, 0.8185180425643921, 0.8175934553146362, 0.809140145778656, 0.8182538747787476, 0.8276317715644836, 0.8238013386726379, 0.8278959393501282, 0.8304054737091064, 0.8352925777435303, 0.829216718673706, 0.8397833704948425, 0.8495575189590454, 0.8317263126373291, 0.8473120927810669, 0.8580108284950256, 0.8525954484939575], "val_loss": [1.2560396194458008, 1.4343411922454834, 0.9547807148524693, 0.5811272518975394, 0.5851044143949237, 0.5137823820114136, 0.5301446914672852, 0.5131119659968785, 0.4862009286880493, 0.46322987760816303, 0.5340605974197388, 0.4447420154299055, 0.4644454036440168, 0.4434137003762381, 0.40905788115092684, 0.413030207157135, 0.3947897468294416, 0.38833165168762207, 0.38710780654634747, 0.47421019417898996, 0.3814442753791809, 0.3678638253893171, 0.3968661682946341, 0.39414343663624357, 0.3694043074335371, 0.34223869017192293, 0.3505522438458034, 0.34466601269585745, 0.35776989800589426, 0.3635911004883902, 0.39172359875270296, 0.33413911717278616, 0.35427875178200857], "val_accuracy": [0.453000009059906, 0.47600001096725464, 0.609000027179718, 0.7513333559036255, 0.7296666502952576, 0.7680000066757202, 0.7609999775886536, 0.7633333206176758, 0.7689999938011169, 0.796999990940094, 0.7433333396911621, 0.7960000038146973, 0.7853333353996277, 0.7879999876022339, 0.8169999718666077, 0.8043333292007446, 0.8289999961853027, 0.8256666660308838, 0.828000009059906, 0.800000011920929, 0.82833331823349, 0.8450000286102295, 0.8173333406448364, 0.8349999785423279, 0.8386666774749756, 0.8506666421890259, 0.8446666598320007, 0.8550000190734863, 0.8416666388511658, 0.8433333039283752, 0.8240000009536743, 0.8526666760444641, 0.8460000157356262]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 0, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 5, 0, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.7937142848968506, "mapping_values": [1, 5, 5, 4, 1, 2, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.276809150768608, 2.204575576959836, 2.070116853496701, 1.8348571032801355, 1.5445404198065473, 1.329349606941877, 1.1910449980965159, 1.0969510795480901, 1.0255696724403047, 0.9657490972624857, 0.9318232260533234, 0.8954483458489129, 0.8745251825110567, 0.8446719649051867, 0.8243953432893205, 0.808132512237827, 0.7908669553019068, 0.7664127830800254, 0.7622063625301305, 0.7569821738390607, 0.7410530453234647, 0.734342845699271, 0.726223067828866, 0.7189001744654138, 0.712917221441182, 0.6982410752683536, 0.6918091167627056, 0.6777740523106922, 0.6907513169422913, 0.6728744583044227, 0.6663744778145636, 0.6676468818399648, 0.6584742913203957, 0.6481461021736739, 0.6555196075643515, 0.6420709038092522, 0.6322483824638092, 0.6351524242446596, 0.6251313308714687, 0.6244817463524385, 0.6255226382143572, 0.6129527026085003, 0.6126512141905409, 0.6035439613835056, 0.6143445172377267, 0.6145858920922668, 0.6043013172961497, 0.599672983799943, 0.5981908172758704, 0.5945804939215226, 0.5922116183365467, 0.5919153082954917, 0.5839425034259116, 0.5871322706249239], "accuracy": [0.15202747285366058, 0.2934883236885071, 0.3979659080505371, 0.45766741037368774, 0.5134063959121704, 0.5552766919136047, 0.591731607913971, 0.6180161237716675, 0.6446968913078308, 0.6559239029884338, 0.6716417670249939, 0.6806234121322632, 0.6896050572395325, 0.6882842183113098, 0.7004358768463135, 0.7124554514884949, 0.7165499925613403, 0.7207766771316528, 0.7224937081336975, 0.7289658188819885, 0.7283053994178772, 0.7354378700256348, 0.7364945411682129, 0.7404569983482361, 0.7388719916343689, 0.7412495017051697, 0.7506273984909058, 0.7523444890975952, 0.7442874312400818, 0.7580240368843079, 0.757099449634552, 0.7539294958114624, 0.7588165402412415, 0.7618544697761536, 0.7614582180976868, 0.7655527591705322, 0.7684586048126221, 0.7642319202423096, 0.7700436115264893, 0.7683265209197998, 0.7721568942070007, 0.7729493975639343, 0.7773081660270691, 0.7786290049552917, 0.7751948237419128, 0.7740060687065125, 0.7763835787773132, 0.7854973077774048, 0.7795535326004028, 0.7765156626701355, 0.7790252566337585, 0.7812706232070923, 0.7882710099220276, 0.7825914621353149], "val_loss": [1.9129743576049805, 1.820389951978411, 1.640483822141375, 1.362422159739903, 1.0943051406315394, 0.9250554357256208, 0.8317341463906425, 0.7617204019001552, 0.714885916028704, 0.6852060726710728, 0.6591344390596662, 0.6389859403882708, 0.6166424070085798, 0.6099482263837542, 0.5933237757001605, 0.5822491986410958, 0.5752412932259696, 0.5631387233734131, 0.5541320017405919, 0.5471258504050118, 0.5470154455729893, 0.5365999255861554, 0.5362449543816703, 0.5272611039025443, 0.5179276636668614, 0.5111118044172015, 0.5101725203650338, 0.5034381321498326, 0.5006520237241473, 0.49539038113185335, 0.4942045382090977, 0.4921779121671404, 0.4854212488446917, 0.4853341749736241, 0.4804123980658395, 0.4759239298956735, 0.4772566386631557, 0.4733372586114066, 0.4675700494221279, 0.4721401759556362, 0.4661574534007481, 0.46812675680433, 0.46296640804835726, 0.45399766308920725, 0.4609283208847046, 0.4516511304037912, 0.45149202006203787, 0.4525235891342163, 0.45012458733149935, 0.44683257171085905, 0.44744119473866056, 0.443898822580065, 0.4419588702065604, 0.44361659458705355], "val_accuracy": [0.3763333261013031, 0.45366665720939636, 0.5233333110809326, 0.5943333506584167, 0.6516666412353516, 0.6783333420753479, 0.6713333129882812, 0.6986666917800903, 0.7123333215713501, 0.7160000205039978, 0.7196666598320007, 0.7329999804496765, 0.737666666507721, 0.7416666746139526, 0.7476666569709778, 0.7516666650772095, 0.7513333559036255, 0.7523333430290222, 0.7576666474342346, 0.7689999938011169, 0.7643333077430725, 0.7606666684150696, 0.7666666507720947, 0.7723333239555359, 0.7720000147819519, 0.7803333401679993, 0.7710000276565552, 0.7749999761581421, 0.781000018119812, 0.7756666541099548, 0.7770000100135803, 0.7829999923706055, 0.781000018119812, 0.7826666831970215, 0.7893333435058594, 0.7876666784286499, 0.7866666913032532, 0.7900000214576721, 0.7946666479110718, 0.7916666865348816, 0.7976666688919067, 0.800000011920929, 0.7963333129882812, 0.8059999942779541, 0.7963333129882812, 0.8019999861717224, 0.8026666641235352, 0.8076666593551636, 0.8083333373069763, 0.8040000200271606, 0.8066666722297668, 0.8043333292007446, 0.8080000281333923, 0.8083333373069763]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 1, 2, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.7777143120765686, "mapping_values": [1, 4, 4, 3, 1, 2, 16, 16, 10, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)), tf.math.negative(tf.math.subtract(grad, grad)))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.276809150768608, 2.2045743621304177, 2.0701175648003143, 1.834867187699527, 1.544521286109372, 1.3293852074082344, 1.1910591281998695, 1.0969310706679878, 1.0256181328508596, 0.9659148067090301, 0.9319301026687173, 0.895408391165239, 0.8746698854495789, 0.8446292745879675, 0.8241407694188029, 0.8081865364046239, 0.7907873885254614, 0.7662853903742735, 0.7620950432627381, 0.7568391945620002, 0.7409444828909527, 0.7342871727409332, 0.7261980544180839, 0.7188539241267516, 0.7127506782302861, 0.698224147753929, 0.6918713250306335, 0.677902359925304, 0.6900728216906266, 0.6728450502654613, 0.66612008481277, 0.6678564422528317, 0.6585464178216833, 0.6481383093721941], "accuracy": [0.15202747285366058, 0.2934883236885071, 0.39743760228157043, 0.45766741037368774, 0.5135384798049927, 0.5548804402351379, 0.5918636918067932, 0.6184123754501343, 0.6450931429862976, 0.6561880707740784, 0.672170102596283, 0.6804913282394409, 0.6889446377754211, 0.6885483860969543, 0.7004358768463135, 0.7121912837028503, 0.7160216569900513, 0.7214370369911194, 0.7232862114906311, 0.7283053994178772, 0.7276449799537659, 0.7360982894897461, 0.7372870445251465, 0.7411174178123474, 0.739400327205658, 0.7404569983482361, 0.748778223991394, 0.7526086568832397, 0.744419515132904, 0.7572315335273743, 0.7569673657417297, 0.7543256878852844, 0.7592127919197083, 0.7619865536689758], "val_loss": [1.9129743576049805, 1.8203939710344588, 1.6404874665396554, 1.3624316624232702, 1.0943786076136999, 0.9250670160566058, 0.8316664525440761, 0.7616802283695766, 0.7149042572293963, 0.6852033478873116, 0.6589238813945225, 0.6389734063829694, 0.6165694168635777, 0.6095704521451678, 0.5933812175478254, 0.582210796219962, 0.5752337660108294, 0.5630188669477191, 0.5538437366485596, 0.5467568125043597, 0.546764714377267, 0.5368781770978656, 0.5357248272214618, 0.5276008333478656, 0.5182502440043858, 0.5110542263303485, 0.510362046105521, 0.502977865082877, 0.5011545419692993, 0.4960554667881557, 0.494078312601362, 0.49303756441388813, 0.48544868401118685, 0.4856623240879604], "val_accuracy": [0.3763333261013031, 0.453000009059906, 0.5233333110809326, 0.5946666598320007, 0.652999997138977, 0.6786666512489319, 0.6713333129882812, 0.6986666917800903, 0.7123333215713501, 0.7149999737739563, 0.7193333506584167, 0.7336666584014893, 0.737666666507721, 0.7413333058357239, 0.7483333349227905, 0.7509999871253967, 0.7519999742507935, 0.7526666522026062, 0.7576666474342346, 0.7689999938011169, 0.7639999985694885, 0.7616666555404663, 0.7680000066757202, 0.7713333368301392, 0.7689999938011169, 0.7799999713897705, 0.7710000276565552, 0.7766666412353516, 0.7833333611488342, 0.7746666669845581, 0.7763333320617676, 0.7823333144187927, 0.7829999923706055, 0.7816666960716248]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 5, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 20, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.7688571214675903, "mapping_values": [1, 5, 5, 4, 1, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2768091687499856, 2.2045755679219106, 2.0701156800464946, 1.8348629764987179, 1.54457500298671, 1.329413364544804, 1.1910809835407004, 1.0968912278089573, 1.0256003540551988, 0.9658133580133254, 0.9318606280348383, 0.8953496476662646, 0.8744355897389509, 0.8445943486751929, 0.8242139623086718, 0.8080370993095225, 0.7908907130630245, 0.766231670371451, 0.7621624471016721, 0.756952518241249, 0.7409683568697123, 0.7342548245971764, 0.7261445095211272, 0.7189918468027161, 0.7129735259757207, 0.6984930658510505, 0.6915473001130175, 0.6780071676509601, 0.6904495199831044, 0.6727279538586155, 0.6660739540140532], "accuracy": [0.15202747285366058, 0.2933562397956848, 0.39783385396003723, 0.45727115869522095, 0.5131422281265259, 0.555408775806427, 0.591731607913971, 0.6185444593429565, 0.6449610590934753, 0.6561880707740784, 0.6715096831321716, 0.6812838315963745, 0.6894729733467102, 0.6892088055610657, 0.7004358768463135, 0.7120591998100281, 0.7173424959182739, 0.722229540348053, 0.7234182953834534, 0.7292299270629883, 0.7280412316322327, 0.7353057861328125, 0.7363624572753906, 0.7397965788841248, 0.7396644949913025, 0.7407211661338806, 0.7495707273483276, 0.7530049085617065, 0.7425703406333923, 0.7568352818489075, 0.7580240368843079], "val_loss": [1.9129746300833566, 1.8203935623168945, 1.6404877049582345, 1.3624511786869593, 1.0944482258387975, 0.9250665051596505, 0.8317684616361346, 0.7617065395627703, 0.714928388595581, 0.6851765768868583, 0.6589390550340924, 0.639111842427935, 0.6165742363248553, 0.6097712176186698, 0.5933848108564105, 0.5821829012462071, 0.5754793201174054, 0.563152381352016, 0.5535142762320382, 0.5467058760779244, 0.5465655156544277, 0.5368901491165161, 0.5362955842699323, 0.5274525710514614, 0.5175873041152954, 0.5108896153313773, 0.5103599173682076, 0.5030216489519391, 0.5007414988109044, 0.4959122283118112, 0.4942626782826015], "val_accuracy": [0.3763333261013031, 0.4533333480358124, 0.5233333110809326, 0.5950000286102295, 0.6526666879653931, 0.6783333420753479, 0.67166668176651, 0.6986666917800903, 0.7126666903495789, 0.7160000205039978, 0.7206666469573975, 0.7333333492279053, 0.7383333444595337, 0.7433333396911621, 0.7483333349227905, 0.7509999871253967, 0.7516666650772095, 0.753000020980835, 0.7566666603088379, 0.7689999938011169, 0.7649999856948853, 0.7609999775886536, 0.7673333287239075, 0.7716666460037231, 0.7706666588783264, 0.7816666960716248, 0.7713333368301392, 0.7766666412353516, 0.7803333401679993, 0.7753333449363708, 0.7770000100135803]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 2, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 0, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [11, 49, 44, 92]], "fitness": -0.43542855978012085, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 9, 7, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(beta, alpha), alpha)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301487893413291, 2.3015942134247513, 2.299131595384585, 2.299207631166443, 2.2972015968607935, 2.297659114871153, 2.29601887541204, 2.294936879624969, 2.295772110545136, 2.2934540442629356, 2.292809482799183, 2.293090814770079, 2.2931428428622693, 2.2889729024806216, 2.289083977196557, 2.288570793943162, 2.2863783429185744, 2.28556559212125, 2.2849367123710764, 2.2837845585711833, 2.2832640460012708, 2.282311418572626, 2.282467566744495, 2.282770415370207, 2.2813428092264245, 2.2812561159671776, 2.2775107662297667, 2.2784661386999017, 2.2773073553456418, 2.2754660829214797, 2.2757861646033235, 2.274411542367438, 2.2741604414377954, 2.2726236801137385, 2.272281373953224, 2.272729412880493, 2.2688757044024173, 2.2710652852086755, 2.269878659596643, 2.2684983241008556, 2.26658540694091, 2.2662493682194222, 2.2633842265585455, 2.2616440423837725, 2.264320112317072, 2.2620982462782604, 2.26083432379463, 2.260790303965538, 2.258755900651677, 2.2579651840957182, 2.257698222929854, 2.255867936466002, 2.2559856473494198, 2.2542972881182104, 2.2519013830352974, 2.2533420705209557, 2.2516794949474743, 2.249217298729639, 2.247960952042809, 2.248391543554513, 2.245934609991448, 2.2462976404610027, 2.2452735399226817, 2.2442073045452715, 2.242474222542225, 2.2397547384153, 2.2403898561288966, 2.240803294949575, 2.2404584512419596, 2.237106884538285, 2.23411007507555, 2.2341209278602987, 2.2329654493635482, 2.2328851397767155, 2.231140097480928, 2.230525099511601, 2.227965877764985, 2.2296499038306306, 2.228314067079501, 2.224865026288832, 2.2239568915900585, 2.2241287753881482, 2.2234603216493483, 2.219276744581532, 2.2201925081394887, 2.214827878930864, 2.2158938875098855, 2.2177445304360703, 2.214408549114918, 2.213267908498139, 2.2111070423771158, 2.2112332775671217, 2.2084393126538497, 2.2090112875166383, 2.2053571636682143, 2.2040484795213264, 2.202538626714547, 2.201442455555769, 2.199659709586538, 2.199310814621048], "accuracy": [0.09272222965955734, 0.09259014576673508, 0.1018359512090683, 0.09272222965955734, 0.1002509593963623, 0.09866596013307571, 0.10751552134752274, 0.11451591551303864, 0.10645885765552521, 0.11332716792821884, 0.11702549457550049, 0.11319508403539658, 0.11042134463787079, 0.12323339283466339, 0.12640337646007538, 0.13155461847782135, 0.13617752492427826, 0.13142253458499908, 0.13578127324581146, 0.1410645842552185, 0.13630960881710052, 0.13961167633533478, 0.1430458277463913, 0.1394795924425125, 0.14410249888896942, 0.1442345827817917, 0.15532954037189484, 0.15255580842494965, 0.15770703554153442, 0.16682076454162598, 0.1620657742023468, 0.1682736724615097, 0.16880200803279877, 0.16800950467586517, 0.16972659528255463, 0.17236824333667755, 0.17831197381019592, 0.17276449501514435, 0.1768590658903122, 0.17936864495277405, 0.18240654468536377, 0.18636904656887054, 0.1900673657655716, 0.19601109623908997, 0.189274862408638, 0.19984149932861328, 0.1982565075159073, 0.1974640041589737, 0.19680359959602356, 0.21199312806129456, 0.20644564926624298, 0.20895522832870483, 0.21172896027565002, 0.21912561357021332, 0.22691850364208221, 0.21780477464199066, 0.2176727056503296, 0.2316734939813614, 0.22705058753490448, 0.22757892310619354, 0.23656055331230164, 0.22903183102607727, 0.23378682136535645, 0.23801347613334656, 0.2378813922405243, 0.24686303734779358, 0.2413155436515808, 0.23946638405323029, 0.24105137586593628, 0.25122177600860596, 0.2546559274196625, 0.2620525658130646, 0.2619204819202423, 0.26337340474128723, 0.25822216272354126, 0.2596750855445862, 0.26839256286621094, 0.26099589467048645, 0.2681283950805664, 0.27578920125961304, 0.2731475234031677, 0.2716946303844452, 0.2670717239379883, 0.2847708463668823, 0.27803459763526917, 0.2915070652961731, 0.29084664583206177, 0.27922335267066956, 0.28397834300994873, 0.28939375281333923, 0.2925637364387512, 0.2868841588497162, 0.2954695522785187, 0.3004887104034424, 0.3031303584575653, 0.3028661906719208, 0.30682867765426636, 0.30920618772506714, 0.31765949726104736, 0.3057720363140106], "val_loss": [1.9701416151864188, 1.9693066052028112, 1.9684819493974959, 1.9676593371800013, 1.9668284824916296, 1.9660024642944336, 1.965186595916748, 1.9643639836992537, 1.9635501589093889, 1.9627340861729212, 1.9619195801871163, 1.9611175400870187, 1.960305827004569, 1.9594932283673967, 1.9586783817836217, 1.9578676223754883, 1.9570578166416712, 1.9562460354396276, 1.9554272379193987, 1.9546076910836356, 1.9537931850978307, 1.9529779979160853, 1.9521610396248954, 1.9513489178248815, 1.9505351611546107, 1.9497273308890206, 1.9488986560276575, 1.9480765206473214, 1.947253840310233, 1.9464302062988281, 1.94560364314488, 1.9447729928152901, 1.9439448629106795, 1.9431054251534599, 1.9422668048313685, 1.9414318629673548, 1.9405715806143624, 1.9397279194423132, 1.9388725417000907, 1.9380145754132951, 1.937157426561628, 1.9362989834376745, 1.935429573059082, 1.9345555305480957, 1.9336863926478796, 1.9328009741646903, 1.9319138526916504, 1.9310280254908971, 1.9301330702645438, 1.9292286464146204, 1.9283287184579032, 1.927412782396589, 1.926504271371024, 1.9255852699279785, 1.9246563230242049, 1.9237194742475237, 1.9227709770202637, 1.921819073813302, 1.9208642414637975, 1.919907910483224, 1.918933595929827, 1.9179661614554269, 1.9169855798993791, 1.9159890583583288, 1.914990016392299, 1.9139711516244071, 1.9129586219787598, 1.9119371005467005, 1.910911968776158, 1.9098715100969588, 1.908813544682094, 1.9077544212341309, 1.9066818782261439, 1.9056081771850586, 1.9045205116271973, 1.903416565486363, 1.9023079190935408, 1.9011949130467005, 1.9000814301627023, 1.8989381108965193, 1.897789546421596, 1.896634646824428, 1.8954672813415527, 1.8942672865731376, 1.8930713108607702, 1.891853196280343, 1.8906136921473913, 1.8893900598798479, 1.8881440162658691, 1.8868882315499442, 1.8856201171875, 1.8843488693237305, 1.8830492155892509, 1.8817567144121443, 1.8804236139569963, 1.8790867669241769, 1.8777387482779366, 1.8763726098196847, 1.87498562676566, 1.8736060687473841], "val_accuracy": [0.03966666758060455, 0.043666668236255646, 0.05166666582226753, 0.05833333358168602, 0.06366666406393051, 0.070333331823349, 0.07599999755620956, 0.08433333039283752, 0.09333333373069763, 0.10133333504199982, 0.1106666699051857, 0.12033333629369736, 0.1263333261013031, 0.1340000033378601, 0.14133332669734955, 0.14533333480358124, 0.1536666601896286, 0.16233333945274353, 0.1693333387374878, 0.1783333271741867, 0.18466666340827942, 0.1926666647195816, 0.20100000500679016, 0.20800000429153442, 0.2160000056028366, 0.22200000286102295, 0.22866666316986084, 0.2356666624546051, 0.24300000071525574, 0.24833333492279053, 0.2526666522026062, 0.2590000033378601, 0.2666666805744171, 0.27433332800865173, 0.27799999713897705, 0.2823333442211151, 0.28733333945274353, 0.2906666696071625, 0.2943333387374878, 0.29866665601730347, 0.30300000309944153, 0.30799999833106995, 0.312333345413208, 0.31433331966400146, 0.31833332777023315, 0.32199999690055847, 0.32600000500679016, 0.32766667008399963, 0.3319999873638153, 0.33399999141693115, 0.33799999952316284, 0.34033334255218506, 0.3423333466053009, 0.34466665983200073, 0.34700000286102295, 0.34966665506362915, 0.3503333330154419, 0.35233333706855774, 0.35466668009757996, 0.3580000102519989, 0.35899999737739563, 0.3596666753292084, 0.3616666793823242, 0.3630000054836273, 0.36633333563804626, 0.36766666173934937, 0.36766666173934937, 0.36933332681655884, 0.3723333477973938, 0.3736666738986969, 0.375, 0.3763333261013031, 0.3776666522026062, 0.37933334708213806, 0.37966665625572205, 0.3813333213329315, 0.38199999928474426, 0.38333332538604736, 0.3856666684150696, 0.3856666684150696, 0.3889999985694885, 0.39133334159851074, 0.3919999897480011, 0.39399999380111694, 0.3956666588783264, 0.3973333239555359, 0.3996666669845581, 0.40166667103767395, 0.40299999713897705, 0.4036666750907898, 0.4059999883174896, 0.40666666626930237, 0.40799999237060547, 0.40933331847190857, 0.41066667437553406, 0.4116666615009308, 0.4129999876022339, 0.414000004529953, 0.41366666555404663, 0.41466665267944336]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 1, 2, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [8, 0, 9, 3, 2, 1, 3, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 3, 0, 1, 1, 0, 1, 0, 3], [97, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 2, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 3, 3, 0, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 1, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 1, 0, 2, 2, 8, 4, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 3, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [1, 2], [94], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 2, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 2, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.negative(grad), tf.math.add(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(beta, tf.math.sqrt(alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [3, 72, 16, 9, 57, 39, 26, 75], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 5, 0, 6, 4, 9, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 2, 13, 13, 9, 4, 3, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad), grad)))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, tf.math.pow(beta, tf.math.subtract(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [27, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 5, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 4, 4, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 3, 3, 8, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(alpha, beta)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 1, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 2, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [17, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 2, 16, 16, 10, 6, 3, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, grad)))), tf.math.subtract(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 8, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 2, 15, 15, 9, 6, 3, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)))), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), grad)), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1240.7343597009024, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12996962666511536, 0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [14874089806701.715, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 4, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 3, 1, 0, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 3, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [60, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 4, 0, 2, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 12, 6, 6, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.subtract(grad, grad), tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.negative(tf.math.subtract(grad, alpha)), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.multiply(beta, tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, alpha), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [20, 72, 16, 9, 57, 39, 26, 75], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 4, 0, 5, 4, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [5, 0, 2, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 5, 5, 2, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, grad)), tf.math.divide_no_nan(grad, grad))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(tf.math.add(sigma, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 1, 4, 4, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 6, 6, 1, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.negative(alpha), tf.math.divide_no_nan(grad, grad))), tf.math.pow(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1240.7412029322916, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12996962666511536, 0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [14874297424749.715, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 6, 1, 0, 8, 4, 0, 1, 2, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 2, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.negative(grad), tf.math.sqrt(beta)))), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [3, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [16, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 1, 2, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 5, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 4, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3018628464808253, 2.302878997203397, 2.3013124706848753, 2.3022704791430675, 2.3011974691636117, 2.302550942528407], "accuracy": [0.09179764986038208, 0.08915598690509796, 0.09681680053472519, 0.08651433140039444, 0.09153348207473755, 0.0870426595211029], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 2, 6, 4, 9, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [68, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), grad))), grad)), alpha)), tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3018628464808253, 2.302878997203397, 2.3013124706848753, 2.3022704791430675, 2.3011974691636117, 2.302550942528407], "accuracy": [0.09179764986038208, 0.08915598690509796, 0.09681680053472519, 0.08651433140039444, 0.09153348207473755, 0.0870426595211029], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [3, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [16, 72, 16, 9, 57, 39, 26, 75], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 2, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 4, 4, 2, 2, 0, 13, 13, 7, 6, 1, 4, 2, 2, 0, 0, 4, 2, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, beta)), tf.math.subtract(tf.math.negative(tf.math.divide_no_nan(grad, grad)), tf.math.add(beta, tf.math.pow(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), beta)", "other_info": {"loss": [2.3018628464808253, 2.302878997203397, 2.3013124706848753, 2.3022704791430675, 2.3011974691636117, 2.302550942528407], "accuracy": [0.09179764986038208, 0.08915598690509796, 0.09681680053472519, 0.08651433140039444, 0.09153348207473755, 0.0870426595211029], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]