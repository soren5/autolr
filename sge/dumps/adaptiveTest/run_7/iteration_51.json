[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8271428346633911, "mapping_values": [1, 2, 2, 1, 1, 0, 40, 40, 22, 18, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.multiply(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta))))))))))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9533325169993714, 1.4821059090066753, 1.0472532617748216, 0.9149704569791522, 0.8151376337627804, 0.7898872400224485, 0.72611058277146, 0.7613658165383758, 0.7118164023482615, 0.6730411580808411, 0.6554387095912636, 0.6501704114318886, 0.6350603766838762, 0.6110350805313958, 0.599750162902966, 0.5939777756269503, 0.5836581667148836, 0.6138643642631363, 0.5735700841451349, 0.562551768936769, 0.5486537309260401, 0.5485036586686967, 0.5287602822998841, 0.5341266421294877, 0.5329869971960575, 0.5021772501790182, 0.4973504581408588, 0.4830768611948834, 0.5011124300399334, 0.4900311070851457, 0.48738700273864854, 0.46900138123916235], "accuracy": [0.35239729285240173, 0.5094439387321472, 0.6149781942367554, 0.6676793098449707, 0.6940959095954895, 0.6970016956329346, 0.7290979027748108, 0.7112666964530945, 0.7250033020973206, 0.7409853339195251, 0.7434949278831482, 0.7519482374191284, 0.7618544697761536, 0.7655527591705322, 0.7755910754203796, 0.7761194109916687, 0.7814027070999146, 0.7592127919197083, 0.7837802171707153, 0.7836481332778931, 0.7988376617431641, 0.7948752045631409, 0.7994980812072754, 0.8030643463134766, 0.8016114234924316, 0.8101968169212341, 0.8170651197433472, 0.81548011302948, 0.8064984679222107, 0.8195747137069702, 0.8212917447090149, 0.821820080280304], "val_loss": [1.5273701463426863, 0.9710592542375837, 0.7598977770124163, 0.6274481500898089, 0.6309504338673183, 0.5614501919065203, 0.5719090700149536, 0.5718658140727452, 0.5063649756567818, 0.5072992358888898, 0.4752957139696394, 0.5053071464811053, 0.47190139974866596, 0.48411175182887484, 0.4689520427158901, 0.4483635255268642, 0.48430284432002474, 0.4910003798348563, 0.4245528153010777, 0.41957143374851774, 0.41412168741226196, 0.4248289465904236, 0.4073741265705654, 0.41000368765422274, 0.40001377889088224, 0.40457993745803833, 0.37884832280022757, 0.38079709666115896, 0.39234592233385357, 0.37453556060791016, 0.41661764894212994, 0.3761771747044155], "val_accuracy": [0.3683333396911621, 0.6116666793823242, 0.6510000228881836, 0.7173333168029785, 0.7236666679382324, 0.7516666650772095, 0.7490000128746033, 0.7446666955947876, 0.781000018119812, 0.7683333158493042, 0.7776666879653931, 0.768666684627533, 0.7879999876022339, 0.7673333287239075, 0.7806666493415833, 0.8016666769981384, 0.7749999761581421, 0.7766666412353516, 0.8186666369438171, 0.8256666660308838, 0.8226666450500488, 0.8103333115577698, 0.8276666402816772, 0.8259999752044678, 0.8289999961853027, 0.8199999928474426, 0.8446666598320007, 0.840666651725769, 0.8263333439826965, 0.8379999995231628, 0.8033333420753479, 0.843999981880188]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [8, 2, 1, 7, 8, 1, 2, 2, 3, 3, 2, 3, 9, 8, 3, 3, 3, 5, 6, 4, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 2, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 3, 1, 5, 2, 3, 1, 3, 1, 3, 2, 1, 3, 3, 1, 3, 2, 3, 0, 3, 2, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8225714564323425, "mapping_values": [1, 2, 2, 1, 1, 0, 60, 60, 38, 22, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad))))))), tf.math.add(beta, alpha)))), tf.math.multiply(grad, tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.square(beta)))), tf.math.add(beta, grad))))), tf.math.add(beta, alpha)))), tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(grad, beta)), alpha), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.square(alpha), tf.math.add(beta, grad))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9529246895493706, 1.4774102775128826, 1.0393026687009004, 0.9220640990460444, 0.8083640638989322, 0.8002541986328657, 0.7288656293708162, 0.7607007271200202, 0.7085428196661792, 0.6682501228068877, 0.648547403792884, 0.6672620744264955, 0.6264895524457146, 0.6122739076724598, 0.5992262802812417, 0.5970935908369716, 0.5827429435823446, 0.6058134919837198, 0.5730030783541277, 0.5625280789679634, 0.5496299747998106, 0.5502020546221982, 0.5298490001777096, 0.5378132751116805, 0.5372510222773967, 0.49988913174712224, 0.5023362009934053, 0.4768746424431436, 0.49609383978092314, 0.4866452989301441, 0.4846794132023692, 0.4724858329044499], "accuracy": [0.35186898708343506, 0.5081230998039246, 0.6170915365219116, 0.6635847091674805, 0.6930392384529114, 0.693831741809845, 0.7284374833106995, 0.7103421092033386, 0.7279091477394104, 0.7424382567405701, 0.7485140562057495, 0.7407211661338806, 0.767401933670044, 0.7671377658843994, 0.7740060687065125, 0.776251494884491, 0.7816668748855591, 0.7627789974212646, 0.783119797706604, 0.7852331399917603, 0.7942147850990295, 0.7921014428138733, 0.7991018295288086, 0.7998943328857422, 0.7980451583862305, 0.8105930685997009, 0.8113855719566345, 0.8190463781356812, 0.8103289008140564, 0.8227446675300598, 0.8208954930305481, 0.8240655064582825], "val_loss": [1.5139906406402588, 1.0055926867893763, 0.7744534185954502, 0.6446000848497663, 0.5767710038593837, 0.5816066435405186, 0.5751583916800362, 0.5601064477648053, 0.5075355257306781, 0.5173192535127912, 0.4863703761781965, 0.511421969958714, 0.48008269923073904, 0.48713799885341097, 0.4935354675565447, 0.4455317769731794, 0.47482952049800325, 0.4712112971714565, 0.4263558302606855, 0.41694164276123047, 0.4151254636900766, 0.42107141869408743, 0.4071299944605146, 0.4154102972575596, 0.4008343815803528, 0.3954474755695888, 0.38141800676073345, 0.38919806480407715, 0.38888769490378244, 0.372118421963283, 0.42113821847098215, 0.376679744039263], "val_accuracy": [0.3736666738986969, 0.5920000076293945, 0.6489999890327454, 0.706333339214325, 0.7509999871253967, 0.7450000047683716, 0.7459999918937683, 0.7540000081062317, 0.7839999794960022, 0.7620000243186951, 0.765666663646698, 0.7696666717529297, 0.7860000133514404, 0.7616666555404663, 0.7680000066757202, 0.8029999732971191, 0.7746666669845581, 0.7879999876022339, 0.8140000104904175, 0.8213333487510681, 0.828000009059906, 0.8076666593551636, 0.8303333520889282, 0.8243333101272583, 0.8296666741371155, 0.831333339214325, 0.8433333039283752, 0.8309999704360962, 0.828000009059906, 0.8363333344459534, 0.800000011920929, 0.8403333425521851]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 9, 6, 3, 3, 3, 2, 6, 0, 9, 2, 5, 8, 5, 6, 1, 2, 3, 7, 2, 9, 5, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 0, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.819428563117981, "mapping_values": [1, 2, 2, 1, 1, 0, 17, 17, 9, 8, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), grad), tf.math.add(beta, grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9529240441722262, 1.4770686158950004, 1.0444663805322971, 0.9164462155118642, 0.8149799036784431, 0.7933597224200517, 0.7269281778652371, 0.7614133266992635, 0.7040476805230709, 0.665863637462221, 0.6465999338101276, 0.6632182030881857, 0.6274710511251164, 0.6149583921188755, 0.6034964107094093, 0.5986978705407071, 0.5839547553413249, 0.6108972982818015, 0.5691485169730277, 0.5629708082243562, 0.5456029204739051, 0.5521109570932269, 0.5231432430559319, 0.5322780660067599, 0.5337069848855693, 0.5087161680427383, 0.4967380629601716, 0.48135625689005446, 0.5006622252069397, 0.4850070121195086, 0.48753217008324534, 0.47180073632225306], "accuracy": [0.35186898708343506, 0.5083872675895691, 0.6144498586654663, 0.6687359809875488, 0.6956809163093567, 0.6952846646308899, 0.7259278893470764, 0.7086250185966492, 0.7284374833106995, 0.7466648817062378, 0.748778223991394, 0.7441553473472595, 0.7680623531341553, 0.7664773464202881, 0.769911527633667, 0.7726852297782898, 0.7792893648147583, 0.7589486241340637, 0.7840443849563599, 0.7821952104568481, 0.7989697456359863, 0.7915731072425842, 0.804649293422699, 0.8031964302062988, 0.8001585006713867, 0.8070268034934998, 0.8132346868515015, 0.8165367841720581, 0.8082155585289001, 0.8226125836372375, 0.8190463781356812, 0.8208954930305481], "val_loss": [1.5139760971069336, 1.0086533342088972, 0.7651950802121844, 0.6426248209817069, 0.5887216329574585, 0.5779564550944737, 0.6139781985964093, 0.5661027601787022, 0.5042554310389927, 0.5015698841639927, 0.4740302051816668, 0.506484866142273, 0.48189505508967806, 0.48693977083478657, 0.496894257409232, 0.44983184337615967, 0.4663051537105015, 0.4781983920506069, 0.4278064455304827, 0.41579731021608624, 0.4089962158884321, 0.4187096953392029, 0.4027978352137974, 0.4131775328091213, 0.39847436973026823, 0.4012212497847421, 0.3771596721240452, 0.4032315100942339, 0.39132702350616455, 0.37461400032043457, 0.4228243146623884, 0.3732858385358538], "val_accuracy": [0.3733333349227905, 0.5913333296775818, 0.6536666750907898, 0.7080000042915344, 0.7409999966621399, 0.7473333477973938, 0.7269999980926514, 0.7406666874885559, 0.7823333144187927, 0.762666642665863, 0.778333306312561, 0.7696666717529297, 0.7886666655540466, 0.7616666555404663, 0.765666663646698, 0.7946666479110718, 0.7853333353996277, 0.7816666960716248, 0.8063333630561829, 0.8186666369438171, 0.8286666870117188, 0.8109999895095825, 0.828000009059906, 0.8259999752044678, 0.8299999833106995, 0.82833331823349, 0.8453333377838135, 0.8196666836738586, 0.8286666870117188, 0.8346666693687439, 0.793666660785675, 0.8420000076293945]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 5, 1, 1, 9, 2, 2, 4, 1, 3, 2, 2, 2, 1, 3, 6, 8, 2, 2, 0, 3, 2, 8, 6, 5, 1, 1, 2, 2, 7, 2, 1, 8, 2, 3, 8, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 4, 0, 0, 2, 3, 3, 3, 0, 3, 2, 1, 0, 3, 4, 2, 2, 3, 3, 0, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 8], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8151428699493408, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 20, 16, 4, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), beta), grad))))), tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))), tf.math.add(beta, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), beta)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9533257074895205, 1.4824180515482284, 1.0426278197140253, 0.9165278181518309, 0.8252124848178097, 0.7918062920756801, 0.7347151545438437, 0.7617528376294606, 0.7064329888590449, 0.6675228125556837, 0.6459847773779432, 0.6668613215463352, 0.6280461363410749, 0.6174949131952285, 0.5990484645574194, 0.6054613352876849, 0.5846125991856811, 0.6052346939518467, 0.5725208585445891, 0.556504098470925, 0.5514600407398609, 0.545026137651375, 0.5272178354201583, 0.5324706026843636, 0.5311599301112531, 0.5071453398811724, 0.5008346729503096, 0.4838234116734767, 0.48319573075527905, 0.4948938461799254, 0.49192031257503055, 0.4728776425528662], "accuracy": [0.35239729285240173, 0.5087835192680359, 0.6149781942367554, 0.6650376319885254, 0.6911900639533997, 0.6984546184539795, 0.7250033020973206, 0.7119271159172058, 0.7283053994178772, 0.7449478507041931, 0.7493065595626831, 0.7429665923118591, 0.7617223858833313, 0.7623828053474426, 0.7771760821342468, 0.7696473598480225, 0.7812706232070923, 0.7619865536689758, 0.7808743715286255, 0.7872143983840942, 0.7965922355651855, 0.7936864495277405, 0.8047813773155212, 0.800818920135498, 0.8010830879211426, 0.8084797263145447, 0.8129705190658569, 0.8158763647079468, 0.8183859586715698, 0.8210275769233704, 0.8149517774581909, 0.8190463781356812], "val_loss": [1.5270633356911796, 0.96347975730896, 0.7611225502831596, 0.6316441808428083, 0.6035596132278442, 0.5736920833587646, 0.5724824156079974, 0.5599509477615356, 0.5081439018249512, 0.5033374343599591, 0.47702862535204205, 0.5078781161989484, 0.4777378525052752, 0.467086706842695, 0.47587157998766216, 0.4561882529939924, 0.4592303548540388, 0.4667935882295881, 0.4231103573526655, 0.4220083441053118, 0.4133676290512085, 0.4260473506791251, 0.408271781035832, 0.4203801155090332, 0.39839076144354685, 0.39072937624795095, 0.37795486620494295, 0.38831472396850586, 0.41036597320011686, 0.3727016363825117, 0.41837831905909945, 0.3757680484226772], "val_accuracy": [0.36800000071525574, 0.6163333058357239, 0.652999997138977, 0.7170000076293945, 0.7400000095367432, 0.746999979019165, 0.746999979019165, 0.750333309173584, 0.7826666831970215, 0.7760000228881836, 0.778333306312561, 0.7703333497047424, 0.7773333191871643, 0.7833333611488342, 0.7816666960716248, 0.7929999828338623, 0.7933333516120911, 0.7896666526794434, 0.8166666626930237, 0.8216666579246521, 0.8270000219345093, 0.8063333630561829, 0.8253333568572998, 0.8173333406448364, 0.8273333311080933, 0.8366666436195374, 0.8426666855812073, 0.8276666402816772, 0.8173333406448364, 0.8373333215713501, 0.7983333468437195, 0.8423333168029785]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [7, 2, 1, 7, 8, 5, 6, 6, 2, 6, 2, 3, 2, 3, 3, 3, 3, 2, 6, 0, 9, 3, 5, 8, 5, 5, 3, 2, 3, 7, 2, 8, 8, 8, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 3, 1, 5, 2, 3, 1, 3, 1, 3, 2, 1, 3, 3, 1, 2, 0, 2, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8054285645484924, "mapping_values": [1, 2, 2, 1, 1, 0, 42, 42, 24, 18, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), grad), alpha), grad))), beta))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))))))), beta)))), tf.math.square(tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.sqrt(grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9529180602784233, 1.4776503397977236, 1.041426487264065, 0.9160539853243764, 0.8073732619272357, 0.8011490305920854, 0.7246848857949171, 0.7620291132669345, 0.703450070372536, 0.6713679550015584, 0.6491185999297667, 0.6461504953585564, 0.6192879531330294, 0.6344643022169794, 0.5937293454357158, 0.6196427248992058, 0.5824985881255461, 0.6068696547666199, 0.5683607164863361, 0.5592345201800669, 0.5458334186420055, 0.5563388668298879, 0.5207249081019854, 0.5331988299070899, 0.5382730163493098, 0.5113112324295956, 0.49729529252267707, 0.47763694985951133, 0.4841307361663498, 0.48712512955862725, 0.49016560064393766, 0.47124051033718367, 0.45724849528671807, 0.465528382620933, 0.4546012923017138, 0.45585144773812547, 0.44337533342524954, 0.45157536620225225, 0.439245629327928, 0.42060773118123906, 0.4470328855287791, 0.42278654281536604, 0.4112002013098405, 0.4230420111452568], "accuracy": [0.35186898708343506, 0.5086514353752136, 0.6173557043075562, 0.6651697158813477, 0.6956809163093567, 0.6933034062385559, 0.7280412316322327, 0.7061154246330261, 0.7322678565979004, 0.7424382567405701, 0.7494386434555054, 0.7552502751350403, 0.7691190242767334, 0.7567031979560852, 0.7766477465629578, 0.763439416885376, 0.7795535326004028, 0.7619865536689758, 0.7845727205276489, 0.7862898111343384, 0.7977809906005859, 0.7927618622779846, 0.8042530417442322, 0.8006868362426758, 0.7964601516723633, 0.8064984679222107, 0.813498854637146, 0.8164047002792358, 0.8210275769233704, 0.8197067975997925, 0.8177255392074585, 0.8231409192085266, 0.8305375576019287, 0.8235371708869934, 0.8294808864593506, 0.8333113193511963, 0.83119797706604, 0.8360850811004639, 0.8396512866020203, 0.8428213000297546, 0.8366134166717529, 0.8393871188163757, 0.8504821062088013, 0.8442742228507996], "val_loss": [1.5135930265699113, 1.0077431542532784, 0.7732388632638114, 0.6583107709884644, 0.6052854231425694, 0.5671636036464146, 0.5936815738677979, 0.56528982094356, 0.5068891218730381, 0.5055255208696637, 0.47884375708443777, 0.4998482976640974, 0.49531384876796175, 0.4652303286961147, 0.5031351361955915, 0.4663835423333304, 0.48499938419886995, 0.46747556754520964, 0.4266907913344247, 0.4174706084387643, 0.4116814136505127, 0.4197253670011248, 0.4085548520088196, 0.41259218965257916, 0.4226100274494716, 0.3993549517222813, 0.38157334497996737, 0.38582522528512136, 0.41303328956876484, 0.3706250105585371, 0.4262812393052237, 0.3757169927869524, 0.36812909160341534, 0.37935794251305716, 0.3741996969495501, 0.36435467004776, 0.427213191986084, 0.37234465565000263, 0.3528874090739659, 0.3718682186944144, 0.3618118677820478, 0.35114119734082905, 0.3609526497977121, 0.3605529155050005], "val_accuracy": [0.3733333349227905, 0.5913333296775818, 0.6476666927337646, 0.6963333487510681, 0.7300000190734863, 0.7453333139419556, 0.7390000224113464, 0.7433333396911621, 0.7833333611488342, 0.7663333415985107, 0.7753333449363708, 0.7713333368301392, 0.7633333206176758, 0.7893333435058594, 0.7699999809265137, 0.7793333530426025, 0.7723333239555359, 0.7889999747276306, 0.8159999847412109, 0.8196666836738586, 0.8253333568572998, 0.812666654586792, 0.824999988079071, 0.8259999752044678, 0.7996666431427002, 0.8306666612625122, 0.8413333296775818, 0.8306666612625122, 0.8153333067893982, 0.8360000252723694, 0.7903333306312561, 0.8416666388511658, 0.8403333425521851, 0.8273333311080933, 0.8389999866485596, 0.8479999899864197, 0.8130000233650208, 0.8433333039283752, 0.8483333587646484, 0.8366666436195374, 0.8450000286102295, 0.847000002861023, 0.8473333120346069, 0.8379999995231628]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 9, 3, 5, 2, 3, 4, 6, 6, 2, 1, 2, 3, 3, 8, 8, 3, 7, 2, 9, 9, 5, 4, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7905714511871338, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.693635231216334, 2.3045251058344953, 2.3034880790161245, 2.2997461147847478, 2.214469810376755, 2.3031237307729784, 2.0188993897026775, 1.5561146018621927, 1.276919444963649, 1.036950456105707, 0.8891667052188239, 0.7839946237773692, 0.786564354403081, 0.722010421793868, 0.6889647581888747, 0.6889135657583701, 0.6423804294069477, 0.6116050311114889, 0.5918711704222785, 0.5627704729351779, 0.5554540066309042, 0.5648259675230379, 0.5139819510372606, 0.5238758004447016], "accuracy": [0.19931316375732422, 0.10249637067317963, 0.1026284471154213, 0.11411966383457184, 0.2082948088645935, 0.10685510188341141, 0.2921674847602844, 0.4893673360347748, 0.5768062472343445, 0.6565843224525452, 0.6870955228805542, 0.7166820764541626, 0.7211728692054749, 0.7329282760620117, 0.7489103078842163, 0.7391361594200134, 0.7692511081695557, 0.772288978099823, 0.7754589915275574, 0.7943468689918518, 0.791969358921051, 0.7853652238845825, 0.805177628993988, 0.8074230551719666], "val_loss": [1.9759784426007951, 1.9738057000296456, 1.9721486909048898, 1.963874680655343, 1.9768373625619071, 1.9635569708687919, 0.8726422275815692, 1.1748455592564173, 0.8605672631944928, 0.7553892476218087, 0.6285023859569004, 0.6648557186126709, 0.6388660669326782, 0.5547008514404297, 0.515231558254787, 0.49522158077784945, 0.5131615059716361, 0.4755653994424002, 0.43397432565689087, 0.45432911600385395, 0.44646997111184256, 0.4207657660756792, 0.4655830349240984, 0.4415074416569301], "val_accuracy": [0.1003333330154419, 0.09866666793823242, 0.09966666996479034, 0.1303333342075348, 0.09866666793823242, 0.16866666078567505, 0.6423333287239075, 0.5393333435058594, 0.6396666765213013, 0.6456666588783264, 0.7200000286102295, 0.6916666626930237, 0.7059999704360962, 0.762333333492279, 0.7493333220481873, 0.7786666750907898, 0.7749999761581421, 0.7723333239555359, 0.8090000152587891, 0.8059999942779541, 0.7853333353996277, 0.8009999990463257, 0.7903333306312561, 0.8080000281333923]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [4, 2, 5, 7, 8, 5, 6, 2, 3, 3, 6, 0, 8, 3, 3, 3, 8, 2, 7, 4, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 2, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [3, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7680000066757202, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 9, 7, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, grad)))))))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.953366975081422, 1.4822872458132834, 1.04882500690791, 0.9134022331807781, 0.8112567752154906, 0.7959311898862209, 0.7385561931103354, 0.7604706915944969, 0.7121047197693863, 0.6705808929558742, 0.6472766537707889, 0.666501352933766, 0.6251830062090272, 0.6249288298497662, 0.6010364914897757], "accuracy": [0.35239729285240173, 0.5099722743034363, 0.6139215230941772, 0.667811393737793, 0.6946242451667786, 0.6977941989898682, 0.7209087014198303, 0.7104741930961609, 0.7215691208839417, 0.7416457533836365, 0.7474573850631714, 0.7452120184898376, 0.7662131786346436, 0.759609043598175, 0.7724210619926453], "val_loss": [1.52405960219247, 0.9815073013305664, 0.7642674275806972, 0.63652993951525, 0.5888587066105434, 0.5748497588293893, 0.5846599170139858, 0.5528220619474139, 0.505787866456168, 0.5009986502783639, 0.48033199991498676, 0.5097344773156303, 0.49661452429635183, 0.46804819788251606, 0.50877126625606], "val_accuracy": [0.3686666786670685, 0.606333315372467, 0.6516666412353516, 0.7113333344459534, 0.7443333268165588, 0.7459999918937683, 0.7396666407585144, 0.7593333125114441, 0.7793333530426025, 0.7846666574478149, 0.7713333368301392, 0.765999972820282, 0.7563333511352539, 0.7833333611488342, 0.7573333382606506]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [2, 2, 1, 1, 9, 1, 2, 4, 2, 3, 2, 2, 2, 1, 3, 0, 1, 2, 2, 0, 9, 2, 8, 6, 5, 6, 1, 2, 2, 7, 2, 1, 8, 2, 3, 8, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [2, 3, 3, 3, 3, 3, 1, 5, 2, 3, 2, 1, 1, 3, 3, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [18, 12, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7657142877578735, "mapping_values": [1, 2, 2, 1, 1, 0, 13, 13, 7, 6, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9529241430698023, 1.4776064290063193, 1.0481240873433784, 0.9098850336088685, 0.8126452827592174, 0.7619406480468606, 0.7754827161601128, 0.7267630222199253, 0.7248574287159851, 0.6691534446057642, 0.6514335363186141, 0.6646485285689062, 0.6239244131175298, 0.6142751640490002, 0.6063759939120414], "accuracy": [0.35186898708343506, 0.5077268481254578, 0.6141856908798218, 0.672170102596283, 0.6931713223457336, 0.7102100253105164, 0.7104741930961609, 0.7305507659912109, 0.7231541275978088, 0.7405890822410583, 0.7457403540611267, 0.7458723783493042, 0.7656848430633545, 0.7630431652069092, 0.769911527633667], "val_loss": [1.5139596462249756, 1.0065833500453405, 0.7720835549490792, 0.6458027022225517, 0.5744788987295968, 0.6290393386568341, 0.5738627570016044, 0.542236191885812, 0.5070403814315796, 0.5019434520176479, 0.486612285886492, 0.5119459288460868, 0.4764981780733381, 0.4742651496614729, 0.5141670874186924], "val_accuracy": [0.3736666738986969, 0.5920000076293945, 0.6543333530426025, 0.7066666483879089, 0.7513333559036255, 0.7306666374206543, 0.7310000061988831, 0.7646666765213013, 0.7749999761581421, 0.7833333611488342, 0.762666642665863, 0.7713333368301392, 0.7760000228881836, 0.7680000066757202, 0.765333354473114]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [7, 2, 1, 7, 8, 5, 1, 6, 3, 6, 2, 3, 2, 3, 3, 2, 3, 6, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 1, 2, 3, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7599999904632568, "mapping_values": [1, 2, 2, 1, 1, 0, 38, 38, 21, 17, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(tf.math.multiply(alpha, tf.math.add(beta, alpha)), beta)))))))), tf.math.add(tf.math.add(beta, grad), beta))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), grad))))), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9993223779945641, 1.3749158311403502, 1.0604956979764812, 0.8836360365927826, 0.8398200899791629, 0.7743103746898012, 0.739539985415202, 0.7318552974161298, 0.690055404781996, 0.6909009288755847, 0.6530941379714273, 0.6269825471469425, 0.6287256974302279, 0.6110449691946795], "accuracy": [0.33443403244018555, 0.5381059050559998, 0.6164311170578003, 0.6753401160240173, 0.6807554960250854, 0.7080966830253601, 0.7180029153823853, 0.717870831489563, 0.733588695526123, 0.7345132827758789, 0.7547219395637512, 0.7598732113838196, 0.7561748623847961, 0.7738739848136902], "val_loss": [1.4028585297720773, 0.975370100566319, 0.6485604899270194, 0.6237906047276088, 0.6394668817520142, 0.5871398619243077, 0.5762228795460292, 0.5238863229751587, 0.5217550311769757, 0.5071995088032314, 0.49514317512512207, 0.5137167998722622, 0.5045462846755981, 0.4993231637137277], "val_accuracy": [0.5106666684150696, 0.5583333373069763, 0.7303333282470703, 0.7233333587646484, 0.7036666870117188, 0.7480000257492065, 0.7393333315849304, 0.7683333158493042, 0.7706666588783264, 0.7630000114440918, 0.7670000195503235, 0.7583333253860474, 0.753000020980835, 0.7609999775886536]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [7, 2, 1, 7, 8, 5, 6, 6, 3, 6, 5, 3, 2, 3, 2, 3, 3, 2, 6, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 5, 3, 3, 3, 1, 5, 3, 3, 2, 0, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 40, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 8, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [3, 48, 44]], "fitness": -0.6977142691612244, "mapping_values": [1, 2, 2, 1, 1, 0, 40, 40, 23, 17, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), grad), tf.math.multiply(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, alpha))))), tf.math.pow(tf.math.add(beta, grad), beta))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302648052705073, 2.301125773443853, 2.2980473367151664, 2.2942006911395043, 2.2868753829888537, 2.281336500376695, 2.2736353409084047, 2.26340571928018, 2.2542773816311885, 2.24046126272952, 2.230273877782372, 2.2122893210620047, 2.1972307310821106, 2.1790969502168513, 2.1566352528383264, 2.1311712790599917, 2.1020559194207333, 2.0685552482544516, 2.030908619534023, 1.985250937483645, 1.9344227127253562, 1.87105351795909, 1.8073073944096332, 1.7478752526404315, 1.6765585844117763, 1.6087312262056053, 1.5434213626685473, 1.4980125067303633, 1.437306946767178, 1.4086314857029691, 1.379420551594301, 1.3686149622140356, 1.3783451181439959, 1.3539472536844837, 1.3572881946379813, 1.3659814694900523, 1.338599810872993, 1.3573445726961997, 1.3379627265918839, 1.3023489794758223, 1.2648174085983621, 1.2241670494900876, 1.2077825642406759, 1.1352032738716973, 1.1009227111748638, 1.0486889024373485, 0.990771834419829, 0.9541685710005583, 0.9176998384766307, 0.9201875208958091, 0.9063983868377997, 0.8997750787639882, 0.9049020730635084, 0.9045665588487235], "accuracy": [0.08492933213710785, 0.0940430611371994, 0.09721305221319199, 0.11398758739233017, 0.13313961029052734, 0.14634791016578674, 0.17355699837207794, 0.1990489959716797, 0.21872936189174652, 0.26403382420539856, 0.2740721106529236, 0.30524370074272156, 0.3245278000831604, 0.3361510932445526, 0.3564918637275696, 0.3695680797100067, 0.3770968019962311, 0.3937392830848694, 0.4021925628185272, 0.41024965047836304, 0.41751420497894287, 0.43085458874702454, 0.439439982175827, 0.44128912687301636, 0.46110156178474426, 0.4678378105163574, 0.4702152907848358, 0.4877823293209076, 0.4983489513397217, 0.5042926669120789, 0.514198899269104, 0.5211992859840393, 0.5320301055908203, 0.5391625761985779, 0.5428609251976013, 0.5517104864120483, 0.5532954931259155, 0.5621450543403625, 0.5669000148773193, 0.5773345828056335, 0.5935807824134827, 0.6063928008079529, 0.6184123754501343, 0.6289790272712708, 0.6409985423088074, 0.6477347612380981, 0.6515651941299438, 0.6564522385597229, 0.6668868064880371, 0.6606789231300354, 0.6619997620582581, 0.6630563735961914, 0.657508909702301, 0.6601505875587463], "val_loss": [1.9702254704066686, 1.9681555203029089, 1.9647876875741142, 1.9601522173200334, 1.9542973382132394, 1.9473062923976354, 1.9392505373273576, 1.9301599093845911, 1.920038836342948, 1.9088835716247559, 1.8965087618146623, 1.8826257160731725, 1.8667404311043876, 1.8483761378696986, 1.8269119943891252, 1.8017567907060896, 1.7722837584359306, 1.7378007343837194, 1.6974902493613107, 1.6507436888558524, 1.5971781185695104, 1.536792482648577, 1.4702134472983224, 1.3987912450517928, 1.3247003214699882, 1.2508519036429269, 1.1798405987875802, 1.1139428956168038, 1.0542264325278146, 1.0009948866707938, 0.9538327285221645, 0.9119934013911656, 0.8749627385820661, 0.8436684608459473, 0.8226974351065499, 0.8132788964680263, 0.8074006353105817, 0.7936391830444336, 0.7709890944617135, 0.7534906353269305, 0.7507806846073696, 0.7553480352674212, 0.7560714312962123, 0.7468149662017822, 0.7256894281932286, 0.6982114825929914, 0.6720723935535976, 0.6560877050672259, 0.6530593803950718, 0.6574151345661708, 0.6635545662471226, 0.6694510323660714, 0.6750132186072213, 0.680992569242205], "val_accuracy": [0.03966666758060455, 0.05433333292603493, 0.08166666328907013, 0.1289999932050705, 0.18166667222976685, 0.24500000476837158, 0.2953333258628845, 0.33266666531562805, 0.3526666760444641, 0.36533331871032715, 0.3773333430290222, 0.38600000739097595, 0.39366665482521057, 0.40166667103767395, 0.4099999964237213, 0.4243333339691162, 0.43666666746139526, 0.44966667890548706, 0.46033334732055664, 0.47066667675971985, 0.48399999737739563, 0.4973333477973938, 0.5149999856948853, 0.5266666412353516, 0.5453333258628845, 0.5653333067893982, 0.5809999704360962, 0.5976666808128357, 0.6223333477973938, 0.6493333578109741, 0.6610000133514404, 0.6656666398048401, 0.6666666865348816, 0.6700000166893005, 0.6679999828338623, 0.6729999780654907, 0.6556666493415833, 0.6626666784286499, 0.6880000233650208, 0.6963333487510681, 0.6949999928474426, 0.6983333230018616, 0.7006666660308838, 0.7009999752044678, 0.7053333520889282, 0.7086666822433472, 0.7153333425521851, 0.7226666808128357, 0.7286666631698608, 0.7136666774749756, 0.7023333311080933, 0.6923333406448364, 0.690666675567627, 0.6956666707992554]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [7, 2, 9, 3, 5, 5, 1, 4, 6, 6, 2, 1, 2, 3, 3, 6, 5, 3, 2, 2, 1, 9, 5, 4, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 3, 3, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 41, 41, 24, 17, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.add(beta, tf.math.square(grad)), tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(tf.math.multiply(grad, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(grad)))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 9, 7, 9, 2, 0, 4, 6, 3, 2, 2, 2, 1, 9, 0, 8, 2, 2, 5, 9, 2, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 2, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [3, 71, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 8], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [77, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303226566742975, 2.302992077582957, 2.3030628748321735, 2.302973843899385, 2.303004138143134, 2.3030419279445415, 2.303080314217526], "accuracy": [0.08849557489156723, 0.09549596905708313, 0.09351472556591034, 0.09615638852119446, 0.09391097724437714, 0.09681680053472519, 0.09602430462837219], "val_loss": [1.973611286708287, 1.9736465045383997, 1.9736691202436174, 1.973607131413051, 1.9736550876072474, 1.9737285886492049, 1.9736623764038086], "val_accuracy": [0.1003333330154419, 0.10400000214576721, 0.09966666996479034, 0.10400000214576721, 0.1003333330154419, 0.1003333330154419, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [8, 8, 1, 1, 9, 2, 2, 4, 1, 3, 2, 8, 2, 1, 3, 9, 8, 2, 2, 0, 3, 2, 8, 2, 6, 1, 6, 5, 2, 7, 2, 1, 8, 2, 3, 8, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 4, 0, 1, 1, 0, 3, 2, 1, 6, 3, 3, 3, 7, 8, 4, 2, 8, 1, 0, 0, 4, 2], [4, 3, 3, 3, 3, 3, 1, 5, 2, 3, 1, 3, 2, 3, 2, 1, 3, 3, 1, 2, 0, 3, 3, 3, 3, 0, 0, 4, 3, 5, 2, 0, 3, 4, 2, 0, 4, 3, 3, 3, 0, 0, 2, 2], [50, 15, 14, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 8], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [71, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09351472556591034, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [7, 2, 1, 2, 8, 1, 6, 2, 3, 3, 2, 3, 2, 8, 3, 3, 3, 2, 6, 4, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 3, 1, 5, 2, 3, 1, 3, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 8, 8, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.add(beta, alpha)))))))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07238145917654037, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [7, 1, 3, 7, 9, 2, 0, 4, 6, 3, 2, 2, 2, 1, 9, 0, 8, 2, 2, 5, 9, 2, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 3, 0, 5, 3, 3, 1, 3, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 53, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1], [0, 0], [2, 8], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7.159195932382394e+21, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05336151272058487, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 2, 1, 7, 8, 5, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 2, 6, 0, 9, 0, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 3, 3, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [74, 3, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 8], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 42, 42, 25, 17, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))), tf.math.sqrt(tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, beta))))))))), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 8, 1, 6, 2, 3, 3, 2, 3, 2, 8, 3, 3, 3, 2, 6, 4, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 4, 0, 0, 2, 3, 3, 3, 0, 3, 2, 1, 0, 3, 4, 2, 2, 3, 3, 0, 3, 0, 0], [50, 15, 14, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2, 8], [5], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [39, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 9, 9, 7, 9, 2, 0, 4, 6, 3, 2, 2, 2, 1, 9, 0, 8, 2, 2, 5, 9, 2, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 1, 5, 2, 2, 2, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [3, 69, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1], [0, 0, 1], [2, 1], [5], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [0, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 3, 0, 2, 5, 3, 2, 1, 0, 3, 1, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301754507799946, 2.3023066885986854, 2.3025832219981024, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.08889182657003403, 0.1018359512090683, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973043509892055, 1.9736442565917969, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09233333170413971, 0.10000000149011612, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [7, 2, 1, 7, 8, 1, 6, 2, 3, 3, 2, 3, 2, 8, 3, 2, 3, 2, 6, 4, 9, 4, 3, 8, 5, 5, 2, 2, 3, 7, 2, 2, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 1, 3, 1, 5, 2, 3, 3, 3, 1, 3, 2, 1, 3, 3, 1, 1, 2, 3, 3, 3, 3, 0, 0, 0], [37, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1], [0, 0], [2, 8], [5], [76], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [53, 9, 44]], "fitness": -0.06028571352362633, "mapping_values": [1, 2, 2, 1, 1, 0, 63, 63, 35, 28, 4, 4, 2, 2, 0, 0, 3, 1, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))), grad)), tf.math.add(alpha, tf.math.add(beta, grad))))), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))))))))))))), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), alpha)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), grad)))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3804260973035385, 2.68875898673723, 2.3393600796349467, 2.2995866278395316, 2.3316269278636526, 2.3401567674882973, 2.328343363863807, 2.3326162657072014], "accuracy": [0.21661603450775146, 0.09655263274908066, 0.10791176557540894, 0.1298375427722931, 0.09628847241401672, 0.1022322028875351, 0.09760929644107819, 0.09866596013307571], "val_loss": [2.0329837117876326, 2.020936897822789, 1.9338682719639368, 2.0051804951259067, 1.9914124352591378, 1.9897678239004952, 2.003423282078334, 1.9941114016941615], "val_accuracy": [0.09966666996479034, 0.10133333504199982, 0.1223333328962326, 0.09966666996479034, 0.09866666793823242, 0.10133333504199982, 0.09799999743700027, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [7, 2, 1, 3, 8, 2, 6, 2, 3, 3, 2, 3, 2, 8, 3, 3, 3, 2, 6, 4, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 3, 1, 3, 2, 3, 1, 3, 1, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [78, 15, 14, 1, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0, 0], [2], [5], [76], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 24, 24, 12, 12, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), grad), tf.math.add(beta, grad))), alpha), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad)))))))))), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302862584488566, 2.302760134850511, 2.302472336448777, 2.302883024339143, 2.301183480439232, 2.302441443592062], "accuracy": [0.08466517180204391, 0.08915598690509796, 0.08757099509239197, 0.09021265059709549, 0.09496764093637466, 0.09060890227556229], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]