[{"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 4, 4, 6, 4, 0, 1, 4, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.817714273929596, "mapping_values": [1, 1, 1, 0, 1, 1, 37, 37, 22, 15, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(grad))), tf.math.subtract(tf.math.pow(tf.math.sqrt(grad), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))))))))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1061153539876267, 1.4690184372133661, 1.116741967018585, 0.8932208777843859, 0.8147929506357934, 0.8022531676742741, 0.6915892832125844, 0.6897941672916914, 0.6400901565084431, 0.6459031330910908, 0.5809154844854045, 0.6062661238224311, 0.5613714045993939, 0.5537524579963538, 0.5700500965543537, 0.5326664486203478, 0.5199066006181546, 0.5008679342591106, 0.49641433183417233, 0.4702403424178542, 0.47731119880051487, 0.4588154932220047, 0.4543811469077434, 0.4503648134742856, 0.43296465538260076, 0.4401517360201916, 0.4300720064812616, 0.40074821648470493, 0.42309328950690617, 0.4010910229392575, 0.4050209280238758, 0.3944419773617567, 0.39276922564339, 0.3700433766380545, 0.38636118335384406, 0.39881187151483244, 0.3654516562140456, 0.37810935305802734, 0.34985430024366465, 0.34438974721367804, 0.3430401396403428, 0.3268047335353809, 0.3452997429495899, 0.3306102403331946, 0.3239755517164824, 0.3225530385419976], "accuracy": [0.2995641231536865, 0.5040285587310791, 0.5967507362365723, 0.6688680648803711, 0.6947563290596008, 0.7000396251678467, 0.7313432693481445, 0.7384757399559021, 0.7560427784919739, 0.7508915662765503, 0.7865539789199829, 0.769911527633667, 0.785629391670227, 0.7903843522071838, 0.7873464822769165, 0.7931581139564514, 0.8042530417442322, 0.8067626357078552, 0.816008448600769, 0.8267071843147278, 0.8265751004219055, 0.8348963260650635, 0.8261788487434387, 0.8348963260650635, 0.8392550349235535, 0.8388587832450867, 0.8389908671379089, 0.8492933511734009, 0.8430854678153992, 0.8539162874221802, 0.8537842035293579, 0.8527275323867798, 0.852331280708313, 0.8661999702453613, 0.8527275323867798, 0.8508783578872681, 0.86553955078125, 0.8615770936012268, 0.8668603897094727, 0.8716153502464294, 0.8737286925315857, 0.878879964351654, 0.8693699836730957, 0.8735966086387634, 0.8799365758895874, 0.8794082403182983], "val_loss": [1.4957200799669539, 0.9204340321677071, 0.8096602984837123, 0.7613873141152518, 0.7287981850760323, 0.5422077689852033, 0.5775271654129028, 0.5134155409676688, 0.4733867815562657, 0.4738410711288452, 0.4579066719327654, 0.4381657327924456, 0.48551627567836214, 0.4567307574408395, 0.4431190661021641, 0.41518306732177734, 0.4153238534927368, 0.4551155226571219, 0.3873899579048157, 0.4230418801307678, 0.3870583857808794, 0.36264469793864657, 0.3502994690622602, 0.38551247119903564, 0.3686977284295218, 0.3402643544333322, 0.374585109097617, 0.3401405555861337, 0.3394248144967215, 0.33061168023518156, 0.3453998735972813, 0.3375721148082188, 0.32659055505480084, 0.34222811460494995, 0.3802001050540379, 0.32184402431760517, 0.3798707553318569, 0.3179697905267988, 0.3489995002746582, 0.36183707203183857, 0.3048342210905893, 0.3182510903903416, 0.3242374743734087, 0.31467424971716745, 0.3011919856071472, 0.29665644679750713], "val_accuracy": [0.5146666765213013, 0.5929999947547913, 0.6600000262260437, 0.6513333320617676, 0.6930000185966492, 0.7566666603088379, 0.718666672706604, 0.7770000100135803, 0.7746666669845581, 0.7863333225250244, 0.7829999923706055, 0.7976666688919067, 0.7720000147819519, 0.79666668176651, 0.7829999923706055, 0.8199999928474426, 0.8130000233650208, 0.8033333420753479, 0.8299999833106995, 0.8146666884422302, 0.828000009059906, 0.8383333086967468, 0.8526666760444641, 0.8266666531562805, 0.8349999785423279, 0.8556666374206543, 0.8323333263397217, 0.8539999723434448, 0.8516666889190674, 0.859666645526886, 0.8553333282470703, 0.8633333444595337, 0.8653333187103271, 0.8506666421890259, 0.82833331823349, 0.8613333106040955, 0.8333333134651184, 0.8669999837875366, 0.8523333072662354, 0.8326666951179504, 0.878000020980835, 0.8709999918937683, 0.8650000095367432, 0.8633333444595337, 0.874666690826416, 0.8769999742507935]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 4, 4, 4, 4, 0, 1, 0, 9, 5, 2, 1, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8159999847412109, "mapping_values": [1, 1, 1, 0, 1, 1, 31, 31, 19, 12, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), grad))), tf.math.square(tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.106095624007821, 1.4688559513459856, 1.1453752463299443, 0.8963238516614075, 0.8136014793653215, 0.7560938471942262, 0.6967065410607086, 0.7052945478355187, 0.6479041736517379, 0.6421828372540522, 0.5853565609639331, 0.5979232308949934, 0.5406740764270385, 0.5988875708370917, 0.5360639571923117, 0.5472201966275755, 0.5422023993992708, 0.48748174569531516, 0.5132224636070953, 0.4793283101582115, 0.48290815194048947, 0.45914285096510005, 0.4530121943442388, 0.47435600320897037, 0.4363738342228031, 0.4389782642423831, 0.4380629133664858, 0.4031780187787003, 0.4210400232636083, 0.4037042325080866, 0.41396541813770543, 0.39541205850023525, 0.3875098362567009, 0.38689001905384346, 0.3869825104176959, 0.3906606744466567, 0.3680568029655048], "accuracy": [0.2995641231536865, 0.5044247508049011, 0.5855237245559692, 0.6668868064880371, 0.6940959095954895, 0.7106062769889832, 0.7320036888122559, 0.724739134311676, 0.7539294958114624, 0.7539294958114624, 0.7869502305984497, 0.7730814814567566, 0.7957997918128967, 0.7765156626701355, 0.8016114234924316, 0.7909126877784729, 0.7903843522071838, 0.8193105459213257, 0.8033285140991211, 0.8195747137069702, 0.8216879963874817, 0.8333113193511963, 0.8323867321014404, 0.82683926820755, 0.8381983637809753, 0.8376700282096863, 0.841500461101532, 0.8506141901016235, 0.8444063067436218, 0.8512746095657349, 0.8469158411026001, 0.8532558679580688, 0.8570862412452698, 0.8601241707801819, 0.8548408150672913, 0.852859616279602, 0.8642187118530273], "val_loss": [1.495600802557809, 0.976806674684797, 0.7990474700927734, 0.6642688683101109, 0.6324251038687569, 0.5404318060193744, 0.520696861403329, 0.5296139546803066, 0.48712003231048584, 0.48435912813459125, 0.47493633202144075, 0.4303937043462481, 0.4391547867230007, 0.44956765856061665, 0.49787661007472445, 0.4652958938053676, 0.4150697759219578, 0.4664640256336757, 0.40749224594661165, 0.4158344864845276, 0.39015011276517597, 0.3648318478039333, 0.35887530020305086, 0.3748693806784494, 0.36257827281951904, 0.3383892433983939, 0.3487470916339329, 0.3854580691882542, 0.3389636789049421, 0.34153618131365093, 0.3430110045841762, 0.32947794028690885, 0.3492955820901053, 0.37399539777210783, 0.3622873766081674, 0.32340684958866667, 0.38453935725348337], "val_accuracy": [0.5143333077430725, 0.5633333325386047, 0.67166668176651, 0.6776666641235352, 0.7089999914169312, 0.7639999985694885, 0.7559999823570251, 0.7620000243186951, 0.7873333096504211, 0.7776666879653931, 0.7799999713897705, 0.8059999942779541, 0.8036666512489319, 0.7876666784286499, 0.7649999856948853, 0.7540000081062317, 0.8130000233650208, 0.7910000085830688, 0.8213333487510681, 0.815666675567627, 0.8193333148956299, 0.8379999995231628, 0.8433333039283752, 0.8363333344459534, 0.8410000205039978, 0.8529999852180481, 0.8529999852180481, 0.8306666612625122, 0.8496666550636292, 0.8496666550636292, 0.856333315372467, 0.8650000095367432, 0.8516666889190674, 0.8306666612625122, 0.8309999704360962, 0.8616666793823242, 0.8320000171661377]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 2, 4, 6, 4, 1, 1, 3, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.806857168674469, "mapping_values": [1, 1, 1, 0, 1, 1, 30, 30, 17, 13, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.subtract(grad, tf.math.subtract(grad, tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, tf.math.sqrt(alpha))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), grad)))))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1061153000434945, 1.4667229917086881, 1.1174792961563496, 0.8949378761932157, 0.8245318724478965, 0.7641794946939717, 0.6895147017468362, 0.678191237382885, 0.6672610960632126, 0.646128946874183, 0.5933874517761878, 0.5978261502962764, 0.5672027260289453, 0.5766096184864934, 0.5313247077146368, 0.5351737901408989, 0.5403251588431174, 0.5049164435803977, 0.5103664190077023, 0.47693251292419914, 0.4859478875961223, 0.4614403875213273, 0.456703229087329, 0.461811133430713, 0.4296350751090374, 0.4430227232820181, 0.452167923648706, 0.40582791610857466, 0.42388248811654916, 0.40284291484872065, 0.41114009987046735, 0.4025884888522015, 0.39150371809818835, 0.37927008169973686, 0.39288855243777837, 0.39320650789259354, 0.3670755892799137, 0.3825396091954394, 0.35302266753691375, 0.3477655889186184, 0.3478739348857347, 0.34527272299737066, 0.34421517772681487, 0.33207338940528847, 0.3250310220155954, 0.3292646360332782, 0.3107006897535527, 0.3065213183638064, 0.3244632070980304, 0.31952886202505093, 0.2989898168643893], "accuracy": [0.2995641231536865, 0.5046889185905457, 0.5967507362365723, 0.6671509742736816, 0.6856426000595093, 0.7131158113479614, 0.7343811988830566, 0.7337207794189453, 0.7489103078842163, 0.7544577717781067, 0.7753269076347351, 0.7725531458854675, 0.7860256433486938, 0.7845727205276489, 0.8005547523498535, 0.7965922355651855, 0.7955356240272522, 0.8042530417442322, 0.811649739742279, 0.822348415851593, 0.8193105459213257, 0.8354246616363525, 0.8272355198860168, 0.8285563588142395, 0.8401796221733093, 0.8355567455291748, 0.8296129703521729, 0.8498216867446899, 0.8470479249954224, 0.8540483713150024, 0.8469158411026001, 0.8536521196365356, 0.8540483713150024, 0.8599920868873596, 0.8520671129226685, 0.8553691506385803, 0.8658037185668945, 0.8610487580299377, 0.8679170608520508, 0.8716153502464294, 0.8708229064941406, 0.8708229064941406, 0.8691058158874512, 0.8755778670310974, 0.880729079246521, 0.873860776424408, 0.8829745054244995, 0.8870691061019897, 0.8778232932090759, 0.8803328275680542, 0.887597382068634], "val_loss": [1.4957300935472762, 0.9227723053523472, 0.824489985193525, 0.6240835700716291, 0.6399754967008319, 0.5274909223828997, 0.5523122889654977, 0.5347406693867275, 0.47226028782980783, 0.46451864923749653, 0.4606997455869402, 0.4337794610432216, 0.46382462978363037, 0.4412611893245152, 0.44578823021480013, 0.43902882507869173, 0.4188507114137922, 0.49024314539773123, 0.41754915033067974, 0.40595436096191406, 0.3951341765267508, 0.3757429463522775, 0.36614911045346943, 0.3630463310650417, 0.37695192439215525, 0.34594647373471943, 0.359447853905814, 0.3813017266137259, 0.3394871439252581, 0.34251355273383005, 0.3516374315534319, 0.34076916319983347, 0.33692903178078787, 0.36247341121946064, 0.35416700158800396, 0.3237079552241734, 0.3853553022657122, 0.31912533726011005, 0.3541944112096514, 0.361148476600647, 0.30700457096099854, 0.3166242667606899, 0.323739869253976, 0.3090024249894278, 0.30155525888715473, 0.2982322318213327, 0.31105571133749826, 0.312219432422093, 0.3191932610103062, 0.29568902935300556, 0.3043901153973171], "val_accuracy": [0.5139999985694885, 0.590666651725769, 0.6653333306312561, 0.6943333148956299, 0.7053333520889282, 0.762666642665863, 0.7256666421890259, 0.7613333463668823, 0.7793333530426025, 0.7910000085830688, 0.7853333353996277, 0.8083333373069763, 0.7906666398048401, 0.8040000200271606, 0.7926666736602783, 0.7760000228881836, 0.8130000233650208, 0.7963333129882812, 0.8143333196640015, 0.8166666626930237, 0.8226666450500488, 0.8303333520889282, 0.8426666855812073, 0.8429999947547913, 0.8389999866485596, 0.8506666421890259, 0.8489999771118164, 0.8333333134651184, 0.8526666760444641, 0.8493333458900452, 0.8503333330154419, 0.8613333106040955, 0.8629999756813049, 0.8370000123977661, 0.8423333168029785, 0.8583333492279053, 0.8309999704360962, 0.8679999709129333, 0.8473333120346069, 0.8366666436195374, 0.8740000128746033, 0.8706666827201843, 0.8656666874885559, 0.8673333525657654, 0.871666669845581, 0.8759999871253967, 0.8679999709129333, 0.8663333058357239, 0.8690000176429749, 0.8740000128746033, 0.874666690826416]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 8, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.7991428375244141, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), grad), grad)), tf.math.sqrt(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1060647606581995, 1.4703091309291338, 1.070523438476033, 0.9084914437752389, 0.8180552478306455, 0.7539154077328869, 0.6820059378842133, 0.6943496623138128, 0.6389780391901712, 0.654641023692737, 0.5849540106388305, 0.604438012656503, 0.5648494101298122, 0.5797352629519724, 0.5673395659095024, 0.5265624250214349, 0.5267933268572881], "accuracy": [0.29943203926086426, 0.5031039714813232, 0.6144498586654663, 0.6650376319885254, 0.6903975605964661, 0.7131158113479614, 0.7363624572753906, 0.7296261787414551, 0.757099449634552, 0.7461365461349487, 0.7819310426712036, 0.7696473598480225, 0.787082314491272, 0.7777044177055359, 0.7866860628128052, 0.796328067779541, 0.8016114234924316], "val_loss": [1.495770011629377, 0.9670525618961879, 0.7890407868794033, 0.7048606361661639, 0.570023945399693, 0.5323700053351266, 0.555831892149789, 0.5032343353543963, 0.4660757269178118, 0.4697756426674979, 0.49757606642586844, 0.4299164925302778, 0.4772703307015555, 0.46270452226911274, 0.4302760532924107, 0.4484384570802961, 0.43082872458866667], "val_accuracy": [0.515333354473114, 0.5953333377838135, 0.6463333368301392, 0.6623333096504211, 0.7459999918937683, 0.7630000114440918, 0.7409999966621399, 0.7733333110809326, 0.7953333258628845, 0.7833333611488342, 0.7613333463668823, 0.8076666593551636, 0.7766666412353516, 0.7963333129882812, 0.7946666479110718, 0.7929999828338623, 0.8056666851043701]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 9, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 3, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.7968571186065674, "mapping_values": [1, 1, 1, 0, 1, 1, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, grad), alpha), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, grad), tf.math.pow(tf.math.negative(grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1061358465856768, 1.4696965861266962, 1.2550836177219284, 0.8896659985430693, 0.8087588719735292, 0.7544215656999017, 0.6909630920168683, 0.6894639098034905, 0.6400368929602105, 0.6585874000891183, 0.6016842029539035, 0.6086365867520777, 0.5461843321824417, 0.5861455891205098, 0.5743080380964021, 0.522766919176041, 0.5346948886355389], "accuracy": [0.2995641231536865, 0.5038964748382568, 0.5532954931259155, 0.6724342703819275, 0.6914542317390442, 0.717870831489563, 0.7329282760620117, 0.7347774505615234, 0.7549861073493958, 0.7449478507041931, 0.7671377658843994, 0.7626469135284424, 0.7973847389221191, 0.7784969210624695, 0.7825914621353149, 0.7964601516723633, 0.7971205711364746], "val_loss": [1.4954142911093575, 1.025967972619193, 0.8369670254843575, 0.5809593711580548, 0.6121020487376622, 0.5392210824148995, 0.5710913624082293, 0.5171458380562919, 0.5017895187650409, 0.49213026251111713, 0.4767582586833409, 0.4299902319908142, 0.4508327416011265, 0.45861564363752094, 0.43259161710739136, 0.47503232955932617, 0.4394822120666504], "val_accuracy": [0.5139999985694885, 0.5193333625793457, 0.6366666555404663, 0.7473333477973938, 0.7233333587646484, 0.7599999904632568, 0.7269999980926514, 0.7666666507720947, 0.7556666731834412, 0.7776666879653931, 0.7683333158493042, 0.8063333630561829, 0.7953333258628845, 0.777999997138977, 0.8006666898727417, 0.7806666493415833, 0.8006666898727417]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 0, 4, 4, 6, 4, 0, 1, 9, 8, 5, 2, 5, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.7891428470611572, "mapping_values": [1, 4, 4, 2, 2, 0, 17, 17, 11, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), grad), tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(grad))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1060832355315613, 1.47055182973738, 1.092550340290508, 0.8979170387289732, 0.8214591834381697, 0.7460584202620174, 0.6975696162462014, 0.6814462526079812, 0.6325870992296234, 0.6469354209268822, 0.5990429662159169, 0.5870631125231208, 0.5610527074206317, 0.5751989000446021], "accuracy": [0.2995641231536865, 0.5050851702690125, 0.6067890524864197, 0.6704530715942383, 0.6973979473114014, 0.7205125093460083, 0.7288337349891663, 0.7333245277404785, 0.7613261342048645, 0.7573636174201965, 0.776251494884491, 0.7766477465629578, 0.7876105904579163, 0.7843085527420044], "val_loss": [1.4961416380746024, 0.9499642508370536, 0.781484706061227, 0.6697639397212437, 0.6074092899050031, 0.592273473739624, 0.5486077070236206, 0.4963850293840681, 0.47206575529915945, 0.47204417841775076, 0.4502808025905064, 0.4388325384684971, 0.45703210149492535, 0.4548546927315848], "val_accuracy": [0.515666663646698, 0.6046666502952576, 0.6723333597183228, 0.7143333554267883, 0.7356666922569275, 0.7333333492279053, 0.7446666955947876, 0.7799999713897705, 0.7986666560173035, 0.7863333225250244, 0.7960000038146973, 0.7960000038146973, 0.7923333048820496, 0.7896666526794434]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 6, 4, 4, 6, 4, 5, 1, 9, 2, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.7857142686843872, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 18, 11, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.276174932123884, 2.0695807976320264, 2.014515519079169, 1.6290696302440897, 1.1690996681552726, 0.8313072389772839, 0.7270683020475345, 0.7078331725598326, 0.6580943994833226, 0.6239010642910394, 0.6204279428853524, 0.5882968286780822, 0.5799958662680662, 0.5319881630595712, 0.5563277264769366, 0.5337616633650901], "accuracy": [0.26363757252693176, 0.2747325301170349, 0.3276977837085724, 0.43204331398010254, 0.5678246021270752, 0.6808875799179077, 0.7272487282752991, 0.724739134311676, 0.748249888420105, 0.7676661014556885, 0.7638356685638428, 0.7685906887054443, 0.7750627398490906, 0.7989697456359863, 0.7902522683143616, 0.8043851256370544], "val_loss": [1.870121615273612, 1.9520959172930037, 1.8132380076817103, 0.9909835883549282, 0.5974453517368862, 0.594179494040353, 0.5766482864107404, 0.5696159941809518, 0.529725364276341, 0.4634526286806379, 0.4412496941430228, 0.4519972120012556, 0.4339980823653085, 0.5031517233167376, 0.47179005827222553, 0.4454449415206909], "val_accuracy": [0.38466668128967285, 0.19566667079925537, 0.2953333258628845, 0.5339999794960022, 0.7350000143051147, 0.7369999885559082, 0.734666645526886, 0.7016666531562805, 0.7540000081062317, 0.7900000214576721, 0.8063333630561829, 0.7933333516120911, 0.7993333339691162, 0.7789999842643738, 0.7906666398048401, 0.7879999876022339]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 4, 4, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [25, 49, 44, 92]], "fitness": -0.7508571147918701, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.negative(grad), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2953346049261287, 2.280260026698981, 2.267633026711551, 2.248339551614024, 2.2324436918587938, 2.209680385058031, 2.185939674694871, 2.1577772293990205, 2.121119889411881, 2.074388008800401, 2.0283289121331287, 1.970329764323574, 1.9073330389431455, 1.8393163324551827, 1.7629255218402569, 1.6822299646301482, 1.6176960707781511, 1.542407646611886, 1.4872917772488838, 1.4247003294898535, 1.3655640291358344, 1.3209146101870604, 1.2811447104379847, 1.257294366860733, 1.2055712730782835, 1.1783809310110442, 1.1542285588187249, 1.1435464681840262, 1.1078453717876058, 1.0828474174637317, 1.074121683312445, 1.0487318673012296, 1.0304266925910524, 1.02444732090769, 0.9940889439153288, 0.9903686150835647, 0.9694163180014808, 0.9625740734939766, 0.9450115981811797, 0.9448525578732252, 0.9217430911421886, 0.9303985186036331, 0.9126871869611608, 0.892128671235916, 0.8955373925665792, 0.8988164381548839, 0.8749402648170375, 0.8679410277450909, 0.8688532428309398, 0.8633357685287127, 0.8539875252466349, 0.8551182954255632, 0.8501986834225386, 0.835997462532445, 0.8449683809607902, 0.8306055053775305, 0.8211991260111875, 0.8293475116862754, 0.8116058416575048, 0.814490574288913, 0.796441681168382, 0.7965220052410882, 0.7876693557250642, 0.7989744161570691, 0.7841884349283997, 0.7900886355673301, 0.7809193795147101, 0.7758013349419587, 0.7746826157814256, 0.7704899462852433, 0.7732438649704207], "accuracy": [0.10698718577623367, 0.14859332144260406, 0.18280279636383057, 0.2300885021686554, 0.24937260150909424, 0.2981112003326416, 0.325320303440094, 0.34447231888771057, 0.36481308937072754, 0.3961167633533478, 0.40562674403190613, 0.422929584980011, 0.4434024691581726, 0.4539690911769867, 0.46664905548095703, 0.4877823293209076, 0.49689605832099915, 0.509311854839325, 0.5229163765907288, 0.5391625761985779, 0.555408775806427, 0.5560691952705383, 0.5703341960906982, 0.5769383311271667, 0.5919957756996155, 0.5996565818786621, 0.5992603302001953, 0.605468213558197, 0.6127327680587769, 0.6239598393440247, 0.6189407110214233, 0.6366398334503174, 0.6409985423088074, 0.6425835490226746, 0.6473385095596313, 0.6520935297012329, 0.6621318459510803, 0.6641130447387695, 0.6691322326660156, 0.6700568199157715, 0.6822084188461304, 0.6732267737388611, 0.6819442510604858, 0.6848500967025757, 0.6812838315963745, 0.6859067678451538, 0.6900013089179993, 0.694360077381134, 0.695813000202179, 0.696209192276001, 0.6983225345611572, 0.6964733600616455, 0.6966054439544678, 0.7020208835601807, 0.7061154246330261, 0.7040021419525146, 0.7028133869171143, 0.7057191729545593, 0.7107383608818054, 0.707040011882782, 0.7165499925613403, 0.7103421092033386, 0.7164179086685181, 0.7210407853126526, 0.7174745798110962, 0.7160216569900513, 0.7193237543106079, 0.7251353859901428, 0.722757875919342, 0.7211728692054749, 0.7185312509536743], "val_loss": [1.9573143550327845, 1.9434710230146135, 1.9289759227207728, 1.9128354617527552, 1.8944539342607771, 1.8727237837655204, 1.8467238971165247, 1.8158317974635534, 1.7790645871843611, 1.7350903238568987, 1.684422288622175, 1.6265026501246862, 1.561330999646868, 1.4912371976034982, 1.4169998850141252, 1.3419927869524275, 1.2702833584376745, 1.2015257562909807, 1.1395209857395716, 1.0833394527435303, 1.0334652151380266, 0.9891129221235003, 0.9502660206386021, 0.9179059777941022, 0.8868448734283447, 0.8604746375765119, 0.8376772403717041, 0.8177474566868373, 0.7988017967769078, 0.7824384655271258, 0.7672622203826904, 0.7532680375235421, 0.7407415934971401, 0.7297816787447248, 0.7181004115513393, 0.7086880547659737, 0.6993186133248466, 0.6916121244430542, 0.6833562850952148, 0.6773216213498797, 0.668913619858878, 0.6631722961153302, 0.6577919040407453, 0.6522026572908673, 0.646634749003819, 0.6418982573917934, 0.6362530844552177, 0.6308079276766095, 0.6274193865912301, 0.6217883314405169, 0.617937547819955, 0.6145746026720319, 0.610977053642273, 0.6073284830365863, 0.6032709905079433, 0.6009158406938825, 0.5965665919440133, 0.5928510257175991, 0.5896375179290771, 0.5870081186294556, 0.582755276135036, 0.5801943370274135, 0.5785395077296666, 0.5761939627783639, 0.5739510399954659, 0.572374769619533, 0.5698439223425729, 0.5673552240644183, 0.5654339279447284, 0.5627546991620745, 0.5597070966448102], "val_accuracy": [0.15166667103767395, 0.2683333456516266, 0.33533334732055664, 0.37166666984558105, 0.4033333361148834, 0.42366665601730347, 0.44200000166893005, 0.46000000834465027, 0.47966668009757996, 0.500333309173584, 0.5166666507720947, 0.5333333611488342, 0.550000011920929, 0.5653333067893982, 0.5730000138282776, 0.590666651725769, 0.5979999899864197, 0.6196666955947876, 0.637333333492279, 0.6503333449363708, 0.6583333611488342, 0.6660000085830688, 0.6763333082199097, 0.6776666641235352, 0.6836666464805603, 0.6823333501815796, 0.6856666803359985, 0.6903333067893982, 0.6940000057220459, 0.6956666707992554, 0.6959999799728394, 0.7006666660308838, 0.7039999961853027, 0.7036666870117188, 0.7083333134651184, 0.7093333601951599, 0.7120000123977661, 0.7163333296775818, 0.718999981880188, 0.7166666388511658, 0.721666693687439, 0.7226666808128357, 0.7253333330154419, 0.7269999980926514, 0.7283333539962769, 0.7310000061988831, 0.731333315372467, 0.734333336353302, 0.7336666584014893, 0.7369999885559082, 0.7353333234786987, 0.7369999885559082, 0.7403333187103271, 0.7403333187103271, 0.7433333396911621, 0.7429999709129333, 0.7473333477973938, 0.7473333477973938, 0.746999979019165, 0.7463333606719971, 0.7509999871253967, 0.75, 0.750333309173584, 0.7509999871253967, 0.749666690826416, 0.7543333172798157, 0.7519999742507935, 0.753333330154419, 0.7523333430290222, 0.7543333172798157, 0.7543333172798157]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [10, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 5, 4, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [0, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 10, 6, 2, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), tf.math.subtract(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(beta, tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3018291605902923, 2.302581521482547, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09945846349000931, 0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 8, 5, 0, 4, 0, 1, 9, 1, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 3, 0, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 42, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 0, 2, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 19, 19, 13, 6, 2, 3, 2, 1, 1, 0, 12, 6, 6, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), alpha)))))), tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.negative(sigma), tf.math.add(beta, tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(alpha, alpha), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [15, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 9, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 5, 0, 1, 0, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.pow(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08281600475311279, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 1, 9, 8, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 3, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [64, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 2, 0, 1, 1, 0, 1, 0, 3], [5, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(beta, alpha)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 0, 9, 1, 0, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [95, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 9, 5, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [35, 40, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), beta)", "other_info": {"loss": [2.302796445518295, 2.3205999189663276, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08757099509239197, 0.08241976052522659, 0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9763709477015905, 2.01751218523298, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.019999999552965164, 0.09866666793823242, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 0, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [19, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 8, 0, 9, 4, 0, 4, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 3, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [77, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.negative(tf.math.pow(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08281600475311279, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [9, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [35, 72, 31, 9, 57, 39, 26, 75], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 9, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 3, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2186.5286013451173, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.13168670237064362, 0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [81857009942528.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 71, 16, 9, 57, 39, 26, 75], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 5, 6, 8, 6, 0, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 2, 1, 0, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [25, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 1, 14, 14, 10, 4, 1, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.negative(grad))), grad)), tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, tf.math.pow(beta, tf.math.subtract(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 6, 6, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [83, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 9, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 3, 2, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.342223031220734, 898310091.807504, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09338264167308807, 0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.1989645957946777, 3.411389487242592e+32, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [5, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 9, 7, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 0, 3, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, grad), grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3013590248489835, 2.3012337815004207, 2.3034397542374307, 2.3005700872527326, 2.3030956804539784, 2.3013238149816018], "accuracy": [0.09179764986038208, 0.09694888442754745, 0.08770307898521423, 0.0956280529499054, 0.08730682730674744, 0.09457138925790787], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 9, 5, 4, 6, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 3, 0, 2, 0, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [5, 5, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(grad, grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.square(sigma))", "other_info": {"loss": [2.3013589573951996, 2.3012332416812047, 2.303438593635564, 2.300569052614981, 2.303093629254326, 2.301321295699297], "accuracy": [0.09179764986038208, 0.09694888442754745, 0.08770307898521423, 0.0956280529499054, 0.08730682730674744, 0.09457138925790787], "val_loss": [1.9709811210632324, 1.9709811210632324, 1.9709807804652624, 1.9709806442260742, 1.970979826790946, 1.9709793499537878], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 4, 8, 3, 4, 5, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 0, 1, 0, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 5, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 3, 1, 0, 1, 0, 3], [25, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 4, 4, 2, 2, 0, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.square(tf.math.add(beta, alpha)), grad), tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.square(alpha))", "other_info": {"loss": [2.3013590248489835, 2.3012337815004207, 2.3034397542374307, 2.3005700872527326, 2.3030956804539784, 2.3013238149816018], "accuracy": [0.09179764986038208, 0.09694888442754745, 0.08770307898521423, 0.0956280529499054, 0.08730682730674744, 0.09457138925790787], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]