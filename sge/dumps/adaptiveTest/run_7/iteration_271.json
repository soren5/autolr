[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 2, 6, 7, 5, 9, 0, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7, 9], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57, 39], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 6, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [62, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.8137142658233643, "mapping_values": [1, 35, 35, 23, 12, 6, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad)), tf.math.square(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))))))), tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.052218679990656, 1.6794074098935705, 1.2226130561018664, 0.9351986846384072, 0.8272375249040755, 0.8122791415349824, 0.7455767129453544, 0.7985078252978911, 0.7147565385952381, 0.6950468874531903, 0.6818657725588867, 0.657885260491276, 0.6589604544995437, 0.6287572040077308, 0.6328838394223865, 0.6048412976515622, 0.6014002396792406, 0.5921530300489806, 0.5819496820474014, 0.5631344093229037, 0.5421770868630787, 0.5731312045882864, 0.5409785381019737, 0.531882656914069, 0.5209869401581835, 0.5263814630919066, 0.5175126939165656, 0.5121799916513151, 0.47700611685859434, 0.4916760406718042, 0.4774332618425236, 0.4774738691659604, 0.45851041099666495, 0.47034301625628905, 0.44311318378942266, 0.4650884488625313, 0.4438653184186356, 0.4327445182668346, 0.4356224515324397, 0.4299562901844989, 0.431859951040701, 0.4386192752999747, 0.4158844179984931, 0.41111266286680803, 0.40185346615675055, 0.42048311921599485, 0.4127466134139497, 0.38380278084634273, 0.37239002045418657, 0.3972662777169159, 0.38655734684142645, 0.37081560565338567, 0.39684981107318157], "accuracy": [0.31541407108306885, 0.4877823293209076, 0.5694096088409424, 0.661471426486969, 0.6944921612739563, 0.6868313550949097, 0.7199841737747192, 0.696209192276001, 0.7302865982055664, 0.7391361594200134, 0.7382115721702576, 0.7510236501693726, 0.7499669790267944, 0.763967752456665, 0.7598732113838196, 0.772288978099823, 0.7666094303131104, 0.772288978099823, 0.7836481332778931, 0.7897239327430725, 0.7931581139564514, 0.78113853931427, 0.793950617313385, 0.7984414100646973, 0.802271842956543, 0.8006868362426758, 0.8076872229576111, 0.8090080618858337, 0.8231409192085266, 0.8131026029586792, 0.8228767514228821, 0.8286884427070618, 0.8314621448516846, 0.8224804997444153, 0.8350284099578857, 0.826310932636261, 0.8392550349235535, 0.841500461101532, 0.8409721255302429, 0.8413683772087097, 0.8385946154594421, 0.8345000743865967, 0.8491612672805786, 0.8515387773513794, 0.8516708612442017, 0.8451988101005554, 0.8485008478164673, 0.858671247959137, 0.8660678863525391, 0.8504821062088013, 0.8584070801734924, 0.8638224601745605, 0.8544445633888245], "val_loss": [1.8023045403616769, 1.047428778239659, 0.7458116327013288, 0.6997218472617013, 0.580974851335798, 0.5643194232668195, 0.6105139255523682, 0.5279091085706439, 0.6258760690689087, 0.5255313771111625, 0.521712030683245, 0.5285899298531669, 0.4869843210492815, 0.5511341265269688, 0.4923515660422189, 0.4571808065686907, 0.4770177091870989, 0.46882522106170654, 0.4569278955459595, 0.4351666399410793, 0.4642972605569022, 0.4257151910236904, 0.4133652704102652, 0.40516590220587595, 0.40681389399937223, 0.40736831937517437, 0.40650943347385954, 0.38397109508514404, 0.371286221912929, 0.39092556067875456, 0.38318886927195955, 0.3723627584321158, 0.398739150592259, 0.36407589060919626, 0.368731541293008, 0.36894711426326204, 0.3585444859095982, 0.3647707445280893, 0.3752966438020979, 0.3421655297279358, 0.3460504838398525, 0.3403661676815578, 0.3731094939368112, 0.33023972170693533, 0.3472997886793954, 0.37958396332604544, 0.3300832339695522, 0.3267965827669416, 0.3498204605919974, 0.34377568108694895, 0.34209609031677246, 0.337410501071385, 0.3286185434886387], "val_accuracy": [0.3230000138282776, 0.6223333477973938, 0.6830000281333923, 0.6856666803359985, 0.7390000224113464, 0.7393333315849304, 0.7026666402816772, 0.762333333492279, 0.7103333473205566, 0.7639999985694885, 0.7726666927337646, 0.7400000095367432, 0.7823333144187927, 0.7519999742507935, 0.7673333287239075, 0.793666660785675, 0.7766666412353516, 0.7749999761581421, 0.7963333129882812, 0.7976666688919067, 0.7850000262260437, 0.8066666722297668, 0.8240000009536743, 0.8206666707992554, 0.8193333148956299, 0.815666675567627, 0.8216666579246521, 0.8309999704360962, 0.8370000123977661, 0.824999988079071, 0.8396666646003723, 0.843999981880188, 0.8193333148956299, 0.8456666469573975, 0.843666672706604, 0.8343333601951599, 0.8479999899864197, 0.8456666469573975, 0.831333339214325, 0.8569999933242798, 0.8510000109672546, 0.856333315372467, 0.8333333134651184, 0.8616666793823242, 0.8500000238418579, 0.8276666402816772, 0.862333357334137, 0.8653333187103271, 0.8539999723434448, 0.8500000238418579, 0.8510000109672546, 0.859000027179718, 0.862333357334137]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 2, 6, 7, 5, 9, 0, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 3, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.8128571510314941, "mapping_values": [1, 13, 13, 8, 5, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad)), grad)), tf.math.square(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0522297434818793, 1.680286416980994, 1.1574720534209515, 1.0056425543776781, 0.8559582357582336, 0.8064594154014028, 0.7773619530113098, 0.7707145189990173, 0.7202976948045673, 0.6908460376977826, 0.6826664638273657, 0.6500832187091795, 0.6537533920470356, 0.6278300096314455, 0.63146573327961, 0.5964391812939984, 0.6007361473928211, 0.594896230904213, 0.5828780524010483, 0.5682617465912185, 0.5319145871679372, 0.5724116230307001, 0.5448168404129723, 0.5274308864797316, 0.5249236362123093, 0.5299149402270243, 0.5145563918483602, 0.5105953218442196, 0.480960487280193, 0.49587710205479824, 0.47565633757255177, 0.47587495448645695, 0.45147711050398615, 0.4660803016071952, 0.4425119515092633, 0.4638283439142955, 0.44483378023330356, 0.42989169161364765, 0.43995550901520414, 0.4270977419695881, 0.4330709913127757, 0.4362023505497256, 0.41904203158170633, 0.41148446633547775, 0.40652584788302043, 0.4207749486819801, 0.4084081471619778, 0.3865424327649744, 0.3844007506874086, 0.39355732764487317, 0.38108963914251975, 0.37244638175130473, 0.40480033131228965, 0.364915121709351, 0.3649896639504406, 0.3760215351649594, 0.3622614151262226, 0.35377894396464493, 0.3682766778003648, 0.3467165186593813, 0.34040289445717603, 0.35661204725901496, 0.3212504589034897, 0.33951615588917883, 0.34044727706685596, 0.3307872395340037, 0.3123286958533413, 0.3187369834737472, 0.3269554202535511, 0.32176588059825795, 0.3107097566741852, 0.30549133146923957, 0.3034380795484552, 0.3317861379397433, 0.2917111689553773, 0.3003670984389303, 0.30555256974459355], "accuracy": [0.3156782388687134, 0.4861973226070404, 0.5997886657714844, 0.6304318904876709, 0.6848500967025757, 0.693831741809845, 0.7102100253105164, 0.7123233675956726, 0.7260599732398987, 0.7400607466697693, 0.7376832365989685, 0.7534011602401733, 0.7543256878852844, 0.7621186375617981, 0.7601373791694641, 0.7777044177055359, 0.76542067527771, 0.7714964747428894, 0.7798177003860474, 0.7849689722061157, 0.7971205711364746, 0.7816668748855591, 0.7924976944923401, 0.8013472557067871, 0.800818920135498, 0.7985734939575195, 0.8099326491355896, 0.8088759779930115, 0.8211596608161926, 0.8125742673873901, 0.8238013386726379, 0.8278959393501282, 0.8338396549224854, 0.8272355198860168, 0.837141752243042, 0.8308017253875732, 0.8374059200286865, 0.8428213000297546, 0.8378021121025085, 0.8405758738517761, 0.8425571322441101, 0.8337075710296631, 0.8482366800308228, 0.8500858545303345, 0.8496896028518677, 0.8446704745292664, 0.8500858545303345, 0.8585391640663147, 0.8599920868873596, 0.8556333184242249, 0.8627657890319824, 0.8615770936012268, 0.852331280708313, 0.8664641380310059, 0.8659358024597168, 0.8618412613868713, 0.8679170608520508, 0.8663320541381836, 0.8651432991027832, 0.8706908226013184, 0.8729361891746521, 0.8677849769592285, 0.8799365758895874, 0.8739928603172302, 0.8712190985679626, 0.8771628737449646, 0.8869370222091675, 0.8803328275680542, 0.8772949576377869, 0.8791441321372986, 0.8850878477096558, 0.886672854423523, 0.8854840993881226, 0.8779553771018982, 0.8922203183174133, 0.8838990926742554, 0.8868049383163452], "val_loss": [1.802530084337507, 1.0539917264665877, 0.751927205494472, 0.6821280717849731, 0.6560310636247907, 0.5849359035491943, 0.5599589688437325, 0.5230562176023211, 0.6090130805969238, 0.5257307972226825, 0.5251842907496861, 0.5190662315913609, 0.5005465235028949, 0.5401765959603446, 0.48105517455509733, 0.452405503817967, 0.48798491273607525, 0.4813952956880842, 0.45160603523254395, 0.4314547692026411, 0.4621900660651071, 0.43369919061660767, 0.4241612809044974, 0.40919085911342074, 0.3947515402521406, 0.40376526968819754, 0.4074422631944929, 0.3843519857951573, 0.37624649490628925, 0.38028979301452637, 0.38255069085529875, 0.36651324374335154, 0.3951070138386318, 0.36119753973824636, 0.3677826523780823, 0.36441865989140104, 0.3601703814097813, 0.36200704744883944, 0.37464588029044016, 0.3441456896918161, 0.3444353938102722, 0.3444277048110962, 0.361326949937003, 0.3307697262082781, 0.3496228797095163, 0.3726463573319571, 0.3283102342060634, 0.32984777859279085, 0.33215342249189106, 0.33550110885075163, 0.3514827489852905, 0.3543687718255179, 0.3285279870033264, 0.32269084453582764, 0.34827608721596853, 0.3194582462310791, 0.340543270111084, 0.3717389873095921, 0.32394340208598543, 0.320610659463065, 0.31946481125695364, 0.30934527090617586, 0.31376624958855764, 0.3434170995439802, 0.3073667458125523, 0.306040746825082, 0.3082000953810556, 0.3119112764086042, 0.32091133083615986, 0.30989112172807964, 0.31258045775549753, 0.3027282272066389, 0.31458671603884014, 0.29334517887660433, 0.2999385254723685, 0.3458969678197588, 0.3048138277871268], "val_accuracy": [0.3216666579246521, 0.6190000176429749, 0.6439999938011169, 0.7153333425521851, 0.7023333311080933, 0.734666645526886, 0.746999979019165, 0.7720000147819519, 0.7183333039283752, 0.7633333206176758, 0.7723333239555359, 0.7523333430290222, 0.7723333239555359, 0.7563333511352539, 0.781000018119812, 0.7940000295639038, 0.7736666798591614, 0.7683333158493042, 0.8026666641235352, 0.8026666641235352, 0.7876666784286499, 0.7990000247955322, 0.8180000185966492, 0.8180000185966492, 0.8273333311080933, 0.8233333230018616, 0.8220000267028809, 0.8306666612625122, 0.8309999704360962, 0.8396666646003723, 0.8373333215713501, 0.8413333296775818, 0.8166666626930237, 0.8446666598320007, 0.8416666388511658, 0.8356666564941406, 0.8516666889190674, 0.8460000157356262, 0.8320000171661377, 0.8560000061988831, 0.8500000238418579, 0.8500000238418579, 0.8386666774749756, 0.8616666793823242, 0.8489999771118164, 0.831333339214325, 0.8616666793823242, 0.8619999885559082, 0.8643333315849304, 0.8569999933242798, 0.8463333249092102, 0.8486666679382324, 0.8600000143051147, 0.8723333477973938, 0.8453333377838135, 0.8663333058357239, 0.8569999933242798, 0.8450000286102295, 0.8730000257492065, 0.8663333058357239, 0.8666666746139526, 0.874666690826416, 0.8736666440963745, 0.8539999723434448, 0.8743333220481873, 0.8776666522026062, 0.875, 0.8793333172798157, 0.8686666488647461, 0.8696666955947876, 0.8740000128746033, 0.8806666731834412, 0.8666666746139526, 0.875, 0.8723333477973938, 0.8569999933242798, 0.8740000128746033]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 7, 8, 4, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [7, 72, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.8097142577171326, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.0521857889021993, 1.6800754500606891, 1.169122079470217, 1.0090490592752608, 0.8204372909169517, 0.7931810156260782, 0.7489692188367364, 0.7795341663341071, 0.7353254596728218, 0.688623749954731, 0.6799040629312331, 0.6581578783276626, 0.672300448963718, 0.6199004073042864, 0.625929729120685, 0.6068048446862736, 0.6012567411938426, 0.5874978341541082, 0.5800514049092934, 0.5794413137461106, 0.5374368577585433, 0.5546142448366216, 0.5472241436343986, 0.5251541720436801, 0.5179272439021319, 0.5290811429359437, 0.5183394812692064, 0.5102025236845363, 0.4839817325058961, 0.4920026350093792, 0.4769397671779133, 0.47887110678653017, 0.44987455056469755, 0.47005104328568553, 0.44736048551661356, 0.46343998270673425, 0.4440895086699284, 0.43100609814864044, 0.4257045893141024, 0.43035608587122043, 0.4366266502089835, 0.4421156071054622, 0.4155806550268232, 0.40749439814024285, 0.3971642766882479, 0.425614042159132, 0.4062782284007679, 0.38402658924922933, 0.37656127288986774, 0.4002329311775824, 0.3832357471385384, 0.371877652727901], "accuracy": [0.3155461549758911, 0.486989825963974, 0.5934486985206604, 0.6283186078071594, 0.6930392384529114, 0.6940959095954895, 0.7166820764541626, 0.7055870890617371, 0.7280412316322327, 0.7382115721702576, 0.7423061728477478, 0.7470611333847046, 0.7437590956687927, 0.7684586048126221, 0.7597411274909973, 0.7703077793121338, 0.7662131786346436, 0.7773081660270691, 0.7823272943496704, 0.7817989587783813, 0.7901201844215393, 0.7880068421363831, 0.7909126877784729, 0.8024039268493652, 0.8042530417442322, 0.7988376617431641, 0.8088759779930115, 0.8103289008140564, 0.8222163319587708, 0.8099326491355896, 0.8240655064582825, 0.8238013386726379, 0.8363492488861084, 0.8249900937080383, 0.8309338092803955, 0.8260467648506165, 0.8383304476737976, 0.8416325449943542, 0.8457271456718445, 0.8397833704948425, 0.8364813327789307, 0.8304054737091064, 0.846387505531311, 0.8529917001724243, 0.8510104417800903, 0.8418967127799988, 0.8488970994949341, 0.860652506351471, 0.8631620407104492, 0.8516708612442017, 0.8574824929237366, 0.8613129258155823], "val_loss": [1.8022043364388602, 1.0547796998705183, 0.9514315809522357, 0.631497996194022, 0.5981799364089966, 0.5625899859837123, 0.5816044126238141, 0.563935501234872, 0.587543112891061, 0.5449146543230329, 0.516558153288705, 0.5064369099480766, 0.49149160725729807, 0.5129875796181815, 0.487830604825701, 0.46672751222337994, 0.48422333172389437, 0.47683264528002056, 0.4598647356033325, 0.4342769980430603, 0.4504105363573347, 0.40969092505318777, 0.42251284633363995, 0.40600896733147757, 0.4015196817261832, 0.4037214347294399, 0.40192231110164095, 0.37855843135288786, 0.3783120257513864, 0.3759126237460545, 0.37845633711133686, 0.36881160736083984, 0.3964653866631644, 0.3615356513432094, 0.37472860302243916, 0.3642798236438206, 0.35804018804005217, 0.3481159210205078, 0.38017791509628296, 0.34907699482781546, 0.3446489827973502, 0.3439110517501831, 0.36205183608191355, 0.33521693093436106, 0.34539284876414705, 0.3731269751276289, 0.32802391052246094, 0.33370418207986013, 0.3559565544128418, 0.3362182208469936, 0.3492553063801357, 0.3578964727265494], "val_accuracy": [0.3230000138282776, 0.6206666827201843, 0.640666663646698, 0.7113333344459534, 0.7246666550636292, 0.7476666569709778, 0.7253333330154419, 0.7536666393280029, 0.7356666922569275, 0.7549999952316284, 0.7760000228881836, 0.7633333206176758, 0.777999997138977, 0.7670000195503235, 0.777999997138977, 0.7910000085830688, 0.778333306312561, 0.7693333625793457, 0.7883333563804626, 0.8006666898727417, 0.793666660785675, 0.8149999976158142, 0.8136666417121887, 0.8223333358764648, 0.8203333616256714, 0.8233333230018616, 0.8256666660308838, 0.8343333601951599, 0.8296666741371155, 0.8426666855812073, 0.8379999995231628, 0.843999981880188, 0.8176666498184204, 0.8443333506584167, 0.8370000123977661, 0.8373333215713501, 0.8456666469573975, 0.8506666421890259, 0.8270000219345093, 0.8513333201408386, 0.8479999899864197, 0.8536666631698608, 0.8399999737739563, 0.859000027179718, 0.8510000109672546, 0.8293333053588867, 0.8666666746139526, 0.8603333234786987, 0.8516666889190674, 0.8543333411216736, 0.8486666679382324, 0.8483333587646484]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 0, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 2, 2, 0, 1, 3, 3, 0, 3, 2, 0, 2, 1, 0], [87, 92, 74], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 4, 2, 8, 3, 7, 6, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 1, 2, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [71, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.8042857050895691, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, beta), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.0521758030024913, 1.681499740828959, 1.1949382051736954, 0.9731619491663434, 0.8195770316671277, 0.7886676031521929, 0.7569629033920929, 0.7814672289822379, 0.7106357266984485, 0.7051291017799393, 0.666677395854376, 0.6524337627128477, 0.6607800834781348, 0.616587543019907, 0.6392277163474189, 0.6010106664528354, 0.602971478326367, 0.5750524754915349, 0.5741517549303654, 0.5741981129526006, 0.5322740522625738, 0.5444964834523003, 0.527177047263425, 0.5213690032544562, 0.5166088484297529, 0.5217554570504026, 0.5097441765350704, 0.5053784251055619, 0.4725787937641144, 0.48205455017757454, 0.47930989660969214, 0.4772504270352298, 0.4466698595703144, 0.4621058156296341, 0.43793220165194363, 0.45977131982820224, 0.43854961917542384, 0.42481186980852254, 0.43696284689734466, 0.42232971039619494, 0.4294205025092344, 0.43076469510175674, 0.408527617913668, 0.4086579030900977, 0.39924678361930743, 0.4067039984627612, 0.40035854737992616, 0.3783130083991363, 0.36526318707124134, 0.3954241174740515, 0.3782854856139145, 0.3660043180382499, 0.39475928031851854], "accuracy": [0.3156782388687134, 0.4861973226070404, 0.579447865486145, 0.637828528881073, 0.7025492191314697, 0.7025492191314697, 0.7153612375259399, 0.702681303024292, 0.7305507659912109, 0.7360982894897461, 0.7465327978134155, 0.7503632307052612, 0.7493065595626831, 0.7692511081695557, 0.7541936039924622, 0.7709681391716003, 0.7631752490997314, 0.7853652238845825, 0.7833839654922485, 0.7829877138137817, 0.7969884872436523, 0.7967243194580078, 0.8025360107421875, 0.8026680946350098, 0.8047813773155212, 0.8024039268493652, 0.8095363974571228, 0.8094043135643005, 0.824329674243927, 0.8148196935653687, 0.8219521641731262, 0.821820080280304, 0.8388587832450867, 0.8285563588142395, 0.837141752243042, 0.8304054737091064, 0.8388587832450867, 0.8436138033866882, 0.8401796221733093, 0.8428213000297546, 0.8393871188163757, 0.8399154543876648, 0.8502179384231567, 0.8529917001724243, 0.8499537706375122, 0.8490291833877563, 0.8544445633888245, 0.859199583530426, 0.8660678863525391, 0.8562937378883362, 0.8595958352088928, 0.8692378997802734, 0.8549728989601135], "val_loss": [1.802257742200579, 1.0564895357404436, 0.7855694123676845, 0.6752681902476719, 0.5863962684358869, 0.6120566470282418, 0.661658491407122, 0.529085499899728, 0.6294741800853184, 0.5209477288382394, 0.5125442743301392, 0.5197356258119855, 0.4818146228790283, 0.5564836093357631, 0.468002302306039, 0.46181210449763704, 0.46857944556644987, 0.47670577253614155, 0.4661945956093924, 0.4250204222542899, 0.44754609039851595, 0.39729940039770945, 0.4039417164666312, 0.4022975649152483, 0.4024449416569301, 0.40003396783556255, 0.40185593707220896, 0.37873354128428866, 0.36965231384549824, 0.389022810118539, 0.38553913150514874, 0.3647023780005319, 0.38229367562702726, 0.3596993769918169, 0.35825865609305246, 0.3528898443494524, 0.3552478551864624, 0.3532958711896624, 0.3654156838144575, 0.3486290829522269, 0.34167225871767315, 0.337447600705283, 0.3517101747649057, 0.3276499935558864, 0.34480321407318115, 0.35362367970602854, 0.32735384362084524, 0.3233091746057783, 0.34283918142318726, 0.326279810496739, 0.3430709327970232, 0.34340207065854755, 0.32333385944366455], "val_accuracy": [0.32366666197776794, 0.6186666488647461, 0.6536666750907898, 0.6930000185966492, 0.7400000095367432, 0.7126666903495789, 0.675000011920929, 0.75, 0.7096666693687439, 0.7663333415985107, 0.7799999713897705, 0.7563333511352539, 0.7863333225250244, 0.7453333139419556, 0.7893333435058594, 0.7903333306312561, 0.7873333096504211, 0.7716666460037231, 0.7879999876022339, 0.8040000200271606, 0.7956666946411133, 0.8276666402816772, 0.8289999961853027, 0.8216666579246521, 0.8209999799728394, 0.8240000009536743, 0.824999988079071, 0.8339999914169312, 0.8349999785423279, 0.8236666917800903, 0.8373333215713501, 0.8473333120346069, 0.8303333520889282, 0.843999981880188, 0.843999981880188, 0.8456666469573975, 0.8506666421890259, 0.847000002861023, 0.8396666646003723, 0.8493333458900452, 0.8503333330154419, 0.8526666760444641, 0.8493333458900452, 0.8656666874885559, 0.8500000238418579, 0.8456666469573975, 0.862666666507721, 0.8659999966621399, 0.8579999804496765, 0.8586666584014893, 0.8500000238418579, 0.8539999723434448, 0.862666666507721]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 6, 2, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 3, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 0, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.7557142972946167, "mapping_values": [1, 16, 16, 9, 7, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), grad), grad)), tf.math.add(alpha, grad))), tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [1.9841559203293628, 1.2883954844092491, 1.01967082131005, 0.9916835359972167, 0.7794283882281438, 0.737177919340077, 0.7508689426727079, 0.6920477149745083, 0.6667890096022515, 0.642287550797914], "accuracy": [0.33218860626220703, 0.5597675442695618, 0.6300356388092041, 0.6494518518447876, 0.7166820764541626, 0.7195879220962524, 0.707040011882782, 0.7382115721702576, 0.7371549606323242, 0.7471932172775269], "val_loss": [1.178994825908116, 1.0087415490831648, 0.8832424027579171, 0.5963250228336879, 0.5456821748188564, 0.5744566576821464, 0.565446172441755, 0.5377376931054252, 0.5192325115203857, 0.5792440686907087], "val_accuracy": [0.6193333268165588, 0.5333333611488342, 0.5600000023841858, 0.7456666827201843, 0.7540000081062317, 0.737666666507721, 0.7266666889190674, 0.7350000143051147, 0.7490000128746033, 0.7253333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [1, 6, 2, 6, 7, 5, 2, 0, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7], [1, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0, 2, 1, 2, 1], [87, 92, 74, 57, 57], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 3, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.7511428594589233, "mapping_values": [1, 37, 37, 22, 15, 4, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), grad)), grad)), tf.math.square(tf.math.add(tf.math.negative(alpha), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.square(grad), tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.pow(grad, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))))))))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [1.9841437642568958, 1.2881955102355709, 1.0375350971247745, 0.8579119584343421, 0.7763544331216038, 0.7591090194773696, 0.7232536960586565, 0.6912303270680825, 0.6894681829707718, 0.6251096679408238], "accuracy": [0.33245277404785156, 0.5609562993049622, 0.6209219098091125, 0.6819442510604858, 0.7131158113479614, 0.7099458575248718, 0.7207766771316528, 0.7357020378112793, 0.7281733155250549, 0.7609298825263977], "val_loss": [1.179140908377511, 1.0163493156433105, 0.7306441579546247, 0.5864022118704659, 0.5511422668184552, 0.5767523050308228, 0.5302119936261859, 0.5580167770385742, 0.5148534434182304, 0.5676332201276507], "val_accuracy": [0.6206666827201843, 0.5333333611488342, 0.6803333163261414, 0.7413333058357239, 0.7586666941642761, 0.7369999885559082, 0.7483333349227905, 0.7210000157356262, 0.7559999823570251, 0.7293333411216736]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 6, 2, 7, 5, 9, 0, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 5, 2, 4, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [78, 49, 44, 92]], "fitness": -0.47828570008277893, "mapping_values": [1, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), grad)), tf.math.add(alpha, grad))), tf.math.square(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.31134906269855, 2.4776524167255465, 2.3151683881691874, 2.303858044188115, 2.302850227471844, 2.2546622398554326, 2.3471819767153983, 2.304725811040916, 2.303336348468759, 2.303230032708588, 2.303300893254772], "accuracy": [0.22493726015090942, 0.2094835489988327, 0.09787346422672272, 0.10038304328918457, 0.09681680053472519, 0.17236824333667755, 0.16933034360408783, 0.09721305221319199, 0.09642054885625839, 0.09655263274908066, 0.0948355570435524], "val_loss": [1.5578853402818953, 2.0105737958635603, 1.9749260629926408, 1.9737792696271623, 1.9715356145586287, 1.4959662982395716, 1.9756509917122977, 1.9742215701511927, 1.973691122872489, 1.9736592429024833, 1.973590578351702], "val_accuracy": [0.35766667127609253, 0.09233333170413971, 0.10400000214576721, 0.10133333504199982, 0.09866666793823242, 0.4723333418369293, 0.09966666996479034, 0.09966666996479034, 0.1003333330154419, 0.12333333492279053, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 6, 5, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [71, 72, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302635245177693, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 7, 2, 4, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [71, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 2, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2022820.5958854607, 38518008.08770308, 182635945.50151896, 499396728.84850085, 1081506335.8182538, 1944979617.221503], "accuracy": [0.10091137140989304, 0.10513802617788315, 0.09602430462837219, 0.09919429570436478, 0.10038304328918457, 0.09840179979801178], "val_loss": [7721685.142857143, 61612157.71428572, 207762756.57142857, 492264009.14285713, 961211977.1428572, 1660693211.4285715], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 7, 2, 4, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [71, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 8, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 2, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 2, 6, 7, 5, 9, 5, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74, 57, 57], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 7, 2, 4, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [0, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 0, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 1, 4, 2, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad)), grad)), tf.math.square(alpha)), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2022820.5958854607, 38518008.08770308, 182635945.50151896, 499396728.84850085, 1081506335.8182538, 1944979617.221503], "accuracy": [0.10091137140989304, 0.10513802617788315, 0.09602430462837219, 0.09919429570436478, 0.10038304328918457, 0.09840179979801178], "val_loss": [7721685.142857143, 61612157.71428572, 207762756.57142857, 492264009.14285713, 961211977.1428572, 1660693211.4285715], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 2, 6, 5, 5, 9, 0, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 2, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad)), grad)), tf.math.add(alpha, grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 6, 2, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5, 7, 0, 1, 8, 4, 1, 3, 0, 9], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0, 2, 1, 2, 1], [87, 92, 74, 3, 93], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 3, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 2, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 44, 44, 29, 15, 5, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), grad)), tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.pow(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))))))))))))))))), tf.math.add(alpha, tf.math.subtract(grad, alpha)))), tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 2, 6, 7, 4, 3, 0, 2, 2, 2, 0, 0, 6, 4, 5, 5, 3, 9, 5, 4, 7], [2, 2, 2, 0, 1, 3, 3, 0, 3, 2, 0, 2, 1, 0], [87, 92, 74, 57, 57, 42], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 2, 8, 4, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 1, 2, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [87, 57, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 1, 1, 0, 1, 0, 3], [31, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 20, 13, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(grad, grad), tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), grad)))))))), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.square(alpha))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302635245177693, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 5, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [4, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 1, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 2, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 4, 3, 2, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 2, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0], [87, 92, 74], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 7, 2, 4, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 0, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [62, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [6, 2], [76], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [64, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 6, 5, 6, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 0, 1, 2, 3, 3, 0, 3, 0, 0], [87, 92, 74, 57, 57], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 7, 2, 4, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 4, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 2, 6, 7, 5, 9, 0, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7], [2, 2, 2, 2, 1, 3, 3, 0, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 3, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [7, 4, 3, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 1, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 1, 2, 2, 1, 1, 0, 7, 3, 3, 0, 0, 5, 2, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad)), tf.math.add(alpha, grad))), tf.math.square(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 2, 6, 7, 5, 9, 1, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7, 8, 6], [2, 2, 2, 0, 1, 3, 3, 0, 3, 0, 0, 2, 1, 2, 2], [87, 92, 74, 57, 57, 18], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 3, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [4, 2], [76], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 5, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 24, 15, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.square(grad))), grad)), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302635245177693, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 5, 6, 7, 5, 9, 0, 2, 2, 2, 0, 0, 6, 4, 5, 2, 3, 9, 5, 4, 7], [2, 2, 2, 2, 0, 3, 3, 0, 3, 0, 0, 2, 1, 2], [87, 92, 74, 57, 57], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 3, 2, 8, 9, 0, 2, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [52, 45, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [7, 4, 3, 3], [3, 2], [76], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 3, 0, 1, 1, 0, 1, 0, 3], [44, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 11, 11, 7, 4, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, grad))))), grad), tf.math.square(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))", "other_info": {"loss": [2.3023993294425784, 2.3025925237552096, 2.3036595816468015, 2.301423084120221, 2.302315626004589, 2.3010042779056104], "accuracy": [0.09325055778026581, 0.09245806187391281, 0.0886276587843895, 0.09311848133802414, 0.09628847241401672, 0.09391097724437714], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]