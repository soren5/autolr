[{"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [2, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 1, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 6, 8, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [41, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8205714225769043, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.divide_no_nan(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(alpha, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.2480410097643935, 1.9557481456379204, 1.5866173689218324, 1.2341974536819291, 1.0308114139789037, 0.8950203488673264, 0.8078407198682737, 0.8093080747758928, 0.7659768117354326, 0.7019402615114871, 0.6885763666633256, 0.6571298778064971, 0.6528922892312773, 0.616644341089722, 0.6110929637348269, 0.6069875099025681, 0.5643296562417655, 0.5576936052759105, 0.5607387789441075, 0.531995169160042, 0.5540379183151624, 0.5306715113281212, 0.5079949707985554, 0.5149472789946422, 0.5016582781856621, 0.48719359147251085, 0.47570042076552976, 0.47439295178265256, 0.47634971709834617, 0.48868650209398284, 0.45452085680981136, 0.4574346398523124, 0.42898498541879587, 0.428420824578504, 0.42479079756691407, 0.4117513244548226, 0.42564701215229833, 0.4081131879600945, 0.4146603739115194, 0.39974922520404854, 0.3915208296658671, 0.3952809871384622, 0.40642844973664166, 0.38063744374191316, 0.3635621228395688, 0.3678807769044043, 0.3500815997183866, 0.3491997261758116], "accuracy": [0.2599392533302307, 0.34447231888771057, 0.47351735830307007, 0.5452384352684021, 0.604939877986908, 0.6705851554870605, 0.6939638257026672, 0.6894729733467102, 0.7108704447746277, 0.7279091477394104, 0.7363624572753906, 0.7465327978134155, 0.7494386434555054, 0.7672698497772217, 0.7712323069572449, 0.7631752490997314, 0.7891955971717834, 0.7882710099220276, 0.7917051911354065, 0.7981772422790527, 0.7881389260292053, 0.8057059645652771, 0.8129705190658569, 0.8086118102073669, 0.8117818236351013, 0.8182538747787476, 0.8168009519577026, 0.8253863453865051, 0.8244617581367493, 0.8177255392074585, 0.8302733898162842, 0.8294808864593506, 0.841500461101532, 0.8416325449943542, 0.8417646288871765, 0.8482366800308228, 0.8378021121025085, 0.8471800088882446, 0.8445383906364441, 0.8502179384231567, 0.8539162874221802, 0.8558974862098694, 0.8465195894241333, 0.8588033318519592, 0.8651432991027832, 0.8642187118530273, 0.8681812286376953, 0.8726720213890076], "val_loss": [1.703218936920166, 1.3669565405164446, 1.1701569897787911, 0.8097073010035923, 0.688279560634068, 0.6438422884259906, 0.6406060116631644, 0.5483280079705375, 0.5231426783970424, 0.5798104660851615, 0.5165838854653495, 0.4879148176738194, 0.4601341315678188, 0.5342180558613369, 0.5153529644012451, 0.47510647773742676, 0.4633819375719343, 0.43273589440754484, 0.41283211537769865, 0.48182306970868793, 0.4489036798477173, 0.39481083835874287, 0.4240023408617292, 0.4041992000171116, 0.3897900070462908, 0.3622810500008719, 0.3786533900669643, 0.36411653246198383, 0.38769337109157015, 0.37323158979415894, 0.39674629483904156, 0.35632013423102243, 0.35948462997164043, 0.3563843710081918, 0.34607819999967304, 0.3463182364191328, 0.3647663763591221, 0.3482694540705, 0.32465230567114695, 0.3243570157459804, 0.3386305570602417, 0.3775764448302133, 0.3152833325522287, 0.35074337891169954, 0.35125618321555, 0.3233335869652884, 0.33820087569100515, 0.34915630306516376], "val_accuracy": [0.3610000014305115, 0.45100000500679016, 0.5216666460037231, 0.6383333206176758, 0.6913333535194397, 0.7116666436195374, 0.6990000009536743, 0.7540000081062317, 0.7799999713897705, 0.7213333249092102, 0.7566666603088379, 0.7773333191871643, 0.7836666703224182, 0.753000020980835, 0.7693333625793457, 0.7770000100135803, 0.7643333077430725, 0.8050000071525574, 0.8153333067893982, 0.7710000276565552, 0.7903333306312561, 0.8213333487510681, 0.8036666512489319, 0.8230000138282776, 0.824999988079071, 0.8410000205039978, 0.8339999914169312, 0.8443333506584167, 0.8213333487510681, 0.8336666822433472, 0.82833331823349, 0.8413333296775818, 0.847000002861023, 0.8429999947547913, 0.846666693687439, 0.8516666889190674, 0.8379999995231628, 0.8510000109672546, 0.8586666584014893, 0.8603333234786987, 0.8486666679382324, 0.8383333086967468, 0.8633333444595337, 0.8463333249092102, 0.8410000205039978, 0.8600000143051147, 0.8550000190734863, 0.8460000157356262]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 1, 4, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8142856955528259, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.2480376909248676, 1.953881882830791, 1.5731001857438376, 1.157134484385046, 1.0379317878039285, 0.8714013311053941, 0.8194585480725902, 0.7891694634755243, 0.7223426279469315, 0.7132843045069793, 0.6806624279738953, 0.6524825162340259, 0.6467874797816132, 0.6139823763110083, 0.6102043222741774, 0.6015710874618462, 0.5610217955512078, 0.5584517927170429, 0.5562806054585645, 0.5293889156485025, 0.5379762946181624], "accuracy": [0.2599392533302307, 0.3427552580833435, 0.4780081808567047, 0.5729758143424988, 0.6259410977363586, 0.6719059348106384, 0.6840575933456421, 0.7058512568473816, 0.7195879220962524, 0.7236824631690979, 0.743891179561615, 0.7530049085617065, 0.7534011602401733, 0.7709681391716003, 0.7685906887054443, 0.7713643908500671, 0.7890635132789612, 0.7885351777076721, 0.7903843522071838, 0.8001585006713867, 0.7977809906005859], "val_loss": [1.7032970360347204, 1.3326019900185722, 1.0047589029584612, 0.9021175929478237, 0.6228433166231427, 0.5922789403370449, 0.6325783218656268, 0.5564887693950108, 0.5201840230396816, 0.5589861018317086, 0.531436664717538, 0.4759554522378104, 0.45974673543657574, 0.45163205691746305, 0.48541358539036344, 0.4331984094211033, 0.46591758728027344, 0.43185921226228985, 0.412574189049857, 0.42405846289225985, 0.4348352040563311], "val_accuracy": [0.3606666624546051, 0.4569999873638153, 0.5370000004768372, 0.5946666598320007, 0.7093333601951599, 0.7233333587646484, 0.7059999704360962, 0.7446666955947876, 0.7609999775886536, 0.7283333539962769, 0.749666690826416, 0.7833333611488342, 0.7846666574478149, 0.7836666703224182, 0.7793333530426025, 0.8159999847412109, 0.7699999809265137, 0.8113333582878113, 0.8153333067893982, 0.8029999732971191, 0.7960000038146973]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 1, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 1, 0, 8, 4, 2, 8, 8, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 2, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [41, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8134285807609558, "mapping_values": [1, 6, 6, 4, 2, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.sqrt(grad))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.248042142780119, 1.9590002884875515, 1.5926635574119878, 1.1925025016892115, 1.0352241054517781, 0.9065478650129483, 0.8241994882917927, 0.7787546729761233, 0.7445120679514992, 0.7400695420590059, 0.6808148425693887, 0.6560861399900865, 0.6401821969758723, 0.636041704225282, 0.6098595347701755, 0.6143321425309192, 0.5571073790771803, 0.5640552599731453, 0.5717909319557298, 0.5419107120601713, 0.5426709022362628, 0.5122923962963791, 0.5249575868321763, 0.5134965301292164, 0.5118215028848536, 0.4976079060519297, 0.47933980226989087, 0.4749147368459937, 0.4676855058836002, 0.4683765201457755, 0.4602020891382552], "accuracy": [0.2599392533302307, 0.34301942586898804, 0.4725928008556366, 0.5552766919136047, 0.6108836531639099, 0.6609430909156799, 0.6795667409896851, 0.7004358768463135, 0.7071720957756042, 0.7121912837028503, 0.7423061728477478, 0.744419515132904, 0.759609043598175, 0.7552502751350403, 0.7670056819915771, 0.7621186375617981, 0.7930260300636292, 0.7847048044204712, 0.7828556299209595, 0.7940827012062073, 0.793950617313385, 0.8104609847068787, 0.8038568496704102, 0.807158887386322, 0.8119139075279236, 0.8162726163864136, 0.817461371421814, 0.8252542614936829, 0.8247259259223938, 0.8255184292793274, 0.8253863453865051], "val_loss": [1.7032133170536585, 1.3738469736916679, 1.1215543746948242, 0.7338401079177856, 0.6820568697793143, 0.6117779527391706, 0.5972624846867153, 0.5721859761646816, 0.5349384886877877, 0.5248623234885079, 0.5175754002162388, 0.5107496295656476, 0.47281835760389057, 0.4814633641924177, 0.5169354847499302, 0.4447885922023228, 0.48143626962389263, 0.4254201991217477, 0.41761595010757446, 0.46233645507267546, 0.4309987340654646, 0.4036897676331656, 0.39253113099506926, 0.4063952224595206, 0.3935072762625558, 0.36636418104171753, 0.3780532734734671, 0.3796537603650774, 0.37873696429388864, 0.3710781931877136, 0.39258101156779696], "val_accuracy": [0.3606666624546051, 0.4476666748523712, 0.550000011920929, 0.6759999990463257, 0.6883333325386047, 0.7276666760444641, 0.7250000238418579, 0.7256666421890259, 0.7566666603088379, 0.7680000066757202, 0.7563333511352539, 0.7543333172798157, 0.7793333530426025, 0.7696666717529297, 0.7603333592414856, 0.8040000200271606, 0.7726666927337646, 0.8136666417121887, 0.8100000023841858, 0.7766666412353516, 0.7953333258628845, 0.8176666498184204, 0.8333333134651184, 0.8240000009536743, 0.8216666579246521, 0.8356666564941406, 0.8320000171661377, 0.8343333601951599, 0.8276666402816772, 0.8346666693687439, 0.8333333134651184]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8057143092155457, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.negative(grad), tf.math.divide_no_nan(grad, grad))), tf.math.pow(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.2480395139720164, 1.9573384823816138, 1.5341817813385055, 1.1694813578151804, 0.985015040454202, 0.8507381592680513, 0.9267460045844745, 0.7942223285781614, 0.7441635963199098, 0.7385478342339946, 0.6894517626193662, 0.6718122292393155, 0.6465950004570457, 0.6216010882586473, 0.6032139982183328, 0.5987839537793619, 0.5656522295698907, 0.5497744825805545, 0.5717194607197695, 0.54309667862008, 0.5401752357863322, 0.524980592099415, 0.501639193157872, 0.5071045612386661, 0.4971479234749284, 0.4834776037814138, 0.4788521913851666, 0.473423622567278, 0.4568140039063243, 0.47369139718184333, 0.45694610054907686, 0.44853387114284, 0.4319565890684356], "accuracy": [0.260071337223053, 0.34183067083358765, 0.49293357133865356, 0.559899628162384, 0.637432336807251, 0.6741513609886169, 0.6513010263442993, 0.6973979473114014, 0.7187954187393188, 0.7213049530982971, 0.735569953918457, 0.7376832365989685, 0.7573636174201965, 0.7684586048126221, 0.7724210619926453, 0.7741381525993347, 0.7869502305984497, 0.7915731072425842, 0.7837802171707153, 0.7952714562416077, 0.7948752045631409, 0.8078193068504333, 0.8153480291366577, 0.8113855719566345, 0.8107251524925232, 0.8206313848495483, 0.8198388814926147, 0.8255184292793274, 0.8308017253875732, 0.8230088353157043, 0.8257825970649719, 0.8302733898162842, 0.8391229510307312], "val_loss": [1.703176839011056, 1.3875397954668318, 0.9910881859915597, 0.845991713660104, 0.6499736479350499, 0.5861006804874965, 0.6096300397600446, 0.5638113873345512, 0.5194194146565029, 0.5211452756609235, 0.529757925442287, 0.5263582808630807, 0.4552419866834368, 0.4932961974825178, 0.4963427952357701, 0.45537207807813374, 0.4515927519117083, 0.4366301894187927, 0.41845054285866873, 0.40449745314461844, 0.43295226778302875, 0.40245249441691805, 0.3882199951580593, 0.4015454649925232, 0.3914953981127058, 0.3630612577710833, 0.3713302527155195, 0.36494834082467215, 0.3861591560500009, 0.38419198989868164, 0.411975051675524, 0.363767887864794, 0.3664333394595555], "val_accuracy": [0.3606666624546051, 0.4480000138282776, 0.5346666574478149, 0.6430000066757202, 0.6856666803359985, 0.7333333492279053, 0.7023333311080933, 0.7546666860580444, 0.7609999775886536, 0.7639999985694885, 0.7396666407585144, 0.75, 0.7879999876022339, 0.7606666684150696, 0.7760000228881836, 0.7879999876022339, 0.7793333530426025, 0.8063333630561829, 0.8086666464805603, 0.8119999766349792, 0.800000011920929, 0.8363333344459534, 0.8393333554267883, 0.8209999799728394, 0.8173333406448364, 0.8413333296775818, 0.840666651725769, 0.8450000286102295, 0.8226666450500488, 0.8209999799728394, 0.8223333358764648, 0.8366666436195374, 0.8403333425521851]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 0, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 5, 8, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 5, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 86, 91, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [7, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.7877143025398254, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.negative(tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.277331164358409, 2.2037614682378583, 2.0693060130239114, 1.8310599496036772, 1.5523749039299406, 1.3371750660198334, 1.1921343573678707, 1.1000849440459641, 1.0264911215932944, 0.9695593078752723, 0.9259751667719412, 0.8940818310807394, 0.8739353703422758, 0.8408933569411592, 0.8278387962646016, 0.8073503703347381, 0.7988311853375433, 0.7815639367744104, 0.7659752482767072, 0.7553244447664043, 0.7412601364617807, 0.7350464188159811, 0.7188922570618058, 0.7129979228630137, 0.7049705188713054, 0.7001488859060497, 0.7024582595227495, 0.6814346924402521, 0.6817522038951793, 0.6756044396981272, 0.6656731942609757, 0.6599660856045784, 0.6547239356666996, 0.6518867025128476, 0.6478107616082945, 0.6427618259483593, 0.638640745267766, 0.642251181265524, 0.6326354159151227, 0.6294934818883535, 0.6250329604789392, 0.616818006540003, 0.6160321714162921, 0.6088006934548381, 0.613330286145289, 0.5947425287665157, 0.6046732744961493, 0.6045343274091449], "accuracy": [0.1578391194343567, 0.3028661906719208, 0.3885880410671234, 0.45568618178367615, 0.5065380930900574, 0.5563333630561829, 0.5926561951637268, 0.6203936338424683, 0.646149754524231, 0.656980574131012, 0.6737551093101501, 0.6828688383102417, 0.6856426000595093, 0.7021529674530029, 0.7066437602043152, 0.7092854380607605, 0.7149649858474731, 0.7213049530982971, 0.7190595865249634, 0.7255316376686096, 0.7288337349891663, 0.7359662055969238, 0.7390040755271912, 0.7461365461349487, 0.7416457533836365, 0.7396644949913025, 0.7433628439903259, 0.750759482383728, 0.7458723783493042, 0.7552502751350403, 0.76106196641922, 0.7626469135284424, 0.7585523724555969, 0.7618544697761536, 0.7617223858833313, 0.763439416885376, 0.767401933670044, 0.7642319202423096, 0.7741381525993347, 0.7718927264213562, 0.7721568942070007, 0.7749306559562683, 0.7725531458854675, 0.7741381525993347, 0.7757231593132019, 0.7808743715286255, 0.7790252566337585, 0.7825914621353149], "val_loss": [1.9136467661176408, 1.821187973022461, 1.6407687323434013, 1.3586491176060267, 1.096524919782366, 0.9277892112731934, 0.8290437289646694, 0.7621855224881854, 0.7183465617043632, 0.6838788134711129, 0.6582063095910209, 0.6380708387919835, 0.618206330708095, 0.6068216051374163, 0.5998529876981463, 0.5826023817062378, 0.5729691471372332, 0.5637328113828387, 0.5569109065192086, 0.5449178389140538, 0.5422877243586949, 0.532897983278547, 0.5282152720860073, 0.5282298667090279, 0.5222457306725639, 0.5194592646190098, 0.5134626286370414, 0.517061744417463, 0.5000524520874023, 0.5028159107480731, 0.49284400258745464, 0.49722628934042795, 0.501461284501212, 0.4889154945101057, 0.4828006199428013, 0.477213944707598, 0.4817427226475307, 0.47447175639016287, 0.4731900862285069, 0.4755575486591884, 0.46929281098502024, 0.46708050795963835, 0.4639319181442261, 0.46391422407967703, 0.46118317331586567, 0.45781803131103516, 0.4573920283998762, 0.4542332206453596], "val_accuracy": [0.37533333897590637, 0.4676666557788849, 0.5256666541099548, 0.593666672706604, 0.6473333239555359, 0.6746666431427002, 0.6776666641235352, 0.6986666917800903, 0.7120000123977661, 0.7250000238418579, 0.7246666550636292, 0.7366666793823242, 0.7300000190734863, 0.746666669845581, 0.7413333058357239, 0.7480000257492065, 0.7543333172798157, 0.7576666474342346, 0.7633333206176758, 0.7630000114440918, 0.7599999904632568, 0.7673333287239075, 0.7699999809265137, 0.765999972820282, 0.7696666717529297, 0.7620000243186951, 0.7746666669845581, 0.7699999809265137, 0.7823333144187927, 0.7796666622161865, 0.7863333225250244, 0.7789999842643738, 0.7730000019073486, 0.7823333144187927, 0.7816666960716248, 0.7946666479110718, 0.781000018119812, 0.800000011920929, 0.7873333096504211, 0.7919999957084656, 0.7933333516120911, 0.7926666736602783, 0.8059999942779541, 0.8016666769981384, 0.796999990940094, 0.8046666383743286, 0.7979999780654907, 0.7973333597183228]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 8, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 4, 0, 9, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.7868571281433105, "mapping_values": [1, 3, 3, 3, 0, 1, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(grad)), tf.math.divide_no_nan(grad, grad))), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.277331200321164, 2.2037615985792263, 2.0692998914355853, 1.8310108726302694, 1.5523368248047058, 1.3371394290396283, 1.1921189609000302, 1.100068154068608, 1.0264795983802877, 0.9695595349413356, 0.9260228074710162, 0.894095603823898, 0.8739661145534624, 0.8408999295754912, 0.8278455948864291, 0.8074739908167494, 0.7989284037488752, 0.7817376761341359, 0.7661747251834222, 0.755505185967439, 0.7413988750073195, 0.7350540499661372, 0.7186267682589937, 0.7128062459534784, 0.7051241826135658, 0.7001377537407659, 0.7023588243004448, 0.6812358309705858, 0.6818155500205784, 0.6756939405243017, 0.6657800022495453, 0.6599804896405187, 0.6549322049316398, 0.6518360121201972, 0.6478620429773372, 0.642570554737748, 0.6391378236626275, 0.6421385250465036, 0.6326565185888742, 0.6291895348555565, 0.6252369995618524, 0.6170587059277207, 0.616160058893343, 0.608997043648794, 0.6133798206912182, 0.5948284452365548, 0.6039957320842887, 0.6043071851770025], "accuracy": [0.1578391194343567, 0.3028661906719208, 0.3883238732814789, 0.4559503495693207, 0.5065380930900574, 0.5562012791633606, 0.5930524468421936, 0.6203936338424683, 0.6462818384170532, 0.6568484902381897, 0.6737551093101501, 0.6831330060958862, 0.6859067678451538, 0.7020208835601807, 0.7065116763114929, 0.7100779414176941, 0.7145687341690063, 0.7202483415603638, 0.7197200059890747, 0.7259278893470764, 0.7292299270629883, 0.7358341217041016, 0.7387399077415466, 0.7449478507041931, 0.7416457533836365, 0.739928662776947, 0.7434949278831482, 0.7512878179550171, 0.7461365461349487, 0.755118191242218, 0.7606657147407532, 0.7625148296356201, 0.759080708026886, 0.761590301990509, 0.7622507214546204, 0.7635715007781982, 0.7662131786346436, 0.7638356685638428, 0.7740060687065125, 0.7711002230644226, 0.7716285586357117, 0.7749306559562683, 0.7716285586357117, 0.7732135653495789, 0.7765156626701355, 0.7804781198501587, 0.7792893648147583, 0.7843085527420044], "val_loss": [1.913646629878453, 1.8211889266967773, 1.6407347747257777, 1.3585997649601527, 1.0965158258165633, 0.927743639264788, 0.8290278570992606, 0.7622014624731881, 0.7183046681540353, 0.6840073892048427, 0.6581785167966571, 0.6381454638072422, 0.6182060752596173, 0.6072099208831787, 0.599918075970241, 0.5823744194848197, 0.5730232170649937, 0.5636799676077706, 0.5571050473621914, 0.5453872680664062, 0.5423092671803066, 0.5334088802337646, 0.5284069776535034, 0.5284379209790911, 0.5226587057113647, 0.5189637286322457, 0.5137744120189122, 0.5168215887887138, 0.5003494024276733, 0.5031366177967617, 0.493074757712228, 0.4976940155029297, 0.501402599470956, 0.48899478571755545, 0.4828086239950998, 0.4774696486336844, 0.4820127487182617, 0.4746298449380057, 0.47351224081856863, 0.4760758365903582, 0.46925110476357595, 0.46715424742017475, 0.46403305871146067, 0.4633915254047939, 0.4612741640635899, 0.45751404762268066, 0.4567868539265224, 0.4540809052331107], "val_accuracy": [0.37533333897590637, 0.4676666557788849, 0.5256666541099548, 0.593999981880188, 0.6466666460037231, 0.6746666431427002, 0.6783333420753479, 0.6986666917800903, 0.7120000123977661, 0.7253333330154419, 0.7246666550636292, 0.7366666793823242, 0.7310000061988831, 0.746999979019165, 0.7416666746139526, 0.7480000257492065, 0.7546666860580444, 0.7566666603088379, 0.7630000114440918, 0.762333333492279, 0.7590000033378601, 0.7670000195503235, 0.7693333625793457, 0.765999972820282, 0.7710000276565552, 0.762666642665863, 0.7743333578109741, 0.7720000147819519, 0.7826666831970215, 0.7806666493415833, 0.7866666913032532, 0.7789999842643738, 0.7726666927337646, 0.7823333144187927, 0.7829999923706055, 0.7960000038146973, 0.781333327293396, 0.8003333210945129, 0.7870000004768372, 0.7903333306312561, 0.7926666736602783, 0.7923333048820496, 0.8043333292007446, 0.8023333549499512, 0.7973333597183228, 0.8029999732971191, 0.7990000247955322, 0.7990000247955322]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 0, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 5, 0, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 4, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.2014285773038864, "mapping_values": [1, 7, 7, 5, 2, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.add(beta, grad), tf.math.square(grad)), tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3959154272123557, 2.4353575196642177, 2.3945608529841755, 2.2013795806778704, 2.516960675989427, 2.2661579167287047, 2.305882887833343, 2.303311702392955, 2.302170492197938], "accuracy": [0.18491612374782562, 0.23616431653499603, 0.14410249888896942, 0.1698586642742157, 0.11676132678985596, 0.16616034507751465, 0.09945846349000931, 0.09919429570436478, 0.10962884873151779], "val_loss": [1.967961311340332, 1.9705277170453752, 1.9737839017595564, 3.2206292152404785, 1.9731388773236955, 1.978576728275844, 1.9740943227495467, 1.9731075423104423, 1.9714104788643974], "val_accuracy": [0.17366667091846466, 0.09966666996479034, 0.09866666793823242, 0.20100000500679016, 0.11866666376590729, 0.1003333330154419, 0.10100000351667404, 0.1483333259820938, 0.19233334064483643]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 0, 6, 2, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 1, 0, 8, 4, 0, 1, 2, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 2, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 55, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301831065797535, 2.302358305827423, 2.303029596718972, 2.3063906985282774, 2.321073141615735, 2.3924711876384115, 2.7855489312886026, 5.512988908903993], "accuracy": [0.10659094154834747, 0.10130762308835983, 0.10170386731624603, 0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9737960951668876, 1.974130630493164, 1.97564697265625, 1.9821933337620325, 2.011566230228969, 2.160107203892299, 3.0475175040108815, 8.00614411490304], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09966666996479034, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [4, 0, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [47, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 1, 4, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 5, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [52, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07845727354288101, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 3, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [7, 0, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad))))), tf.math.negative(grad))), grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.sqrt(sigma)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [4, 0, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [2, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2715730462.769022, 418121005448.504, 7103451023785.506, 49292248465708.805, 221334653068059.28, 726330691408681.9], "accuracy": [0.10659094154834747, 0.10091137140989304, 0.10011887550354004, 0.09945846349000931, 0.10276053100824356, 0.09549596905708313], "val_loss": [22953570304.0, 1237211339629.7144, 13278999291026.285, 72394137628086.86, 271156298608054.84, 799847694654317.8], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [3, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [6, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 10, 10, 5, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(grad)), tf.math.pow(grad, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 1, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 1, 4, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [17, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 1, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 9, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 0, 0, 1, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 2, 9, 9, 5, 4, 3, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [178.9335713812924, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11306300014257431, 0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3884223488.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 5, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [84, 69, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 6, 1, 0, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [54, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [11.033361347769356, 6.806818584342706e+30, 2.32661985488159, 2.351595472020401, 2.5749409066183757, 3.3064675594380724, 4.6793820462789295, 7.323880513299175], "accuracy": [0.1752740740776062, 0.09774138033390045, 0.09457138925790787, 0.09377889335155487, 0.09879804402589798, 0.09734513610601425, 0.09153348207473755, 0.09509972482919693], "val_loss": [9901.719029017857, 2.0493503298078264, 1.9929823875427246, 2.219712734222412, 2.4607199941362654, 3.6527109146118164, 5.133755820138114, 8.119288853236608], "val_accuracy": [0.060333333909511566, 0.09966666996479034, 0.10100000351667404, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.10100000351667404, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [9, 0, 8, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 6, 5, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 7, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [32, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 11, 11, 6, 5, 1, 3, 2, 1, 1, 0, 18, 10, 8, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.add(tf.math.multiply(sigma, tf.math.pow(beta, tf.math.subtract(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), alpha), alpha))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(tf.math.square(alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [8, 8, 8, 3, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 73, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 5, 0, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 1, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07845727354288101, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 7, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [25, 72, 16, 9, 57, 39, 26, 75], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 1, 0, 5, 5, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [5, 2], [94], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 9, 8, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07845727354288101, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 0, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 5, 0, 6, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [23, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [4, 1, 9, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [2, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 9, 1, 4, 2, 2, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 3, 4, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), grad)), lambda shape,  alpha, beta, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.301812170676394, 2.300903188113161, 2.301588591425851, 2.3012080578331022, 2.302503946797093, 2.3039543747728715], "accuracy": [0.09391097724437714, 0.09642054885625839, 0.08981640636920929, 0.09549596905708313, 0.0886276587843895, 0.08875974267721176], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]