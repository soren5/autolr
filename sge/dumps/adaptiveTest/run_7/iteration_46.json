[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 1, 1, 7, 9, 5, 0, 4, 6, 3, 2, 2, 2, 1, 3, 0, 8, 2, 2, 2, 9, 9, 8, 6, 5, 6, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [78, 15, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 24, 44]], "fitness": -0.7977142930030823, "mapping_values": [1, 2, 2, 1, 1, 0, 35, 35, 22, 13, 5, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(beta, grad), beta)), tf.math.negative(tf.math.add(beta, alpha)))), tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9702683692091192, 1.3981717944444367, 1.0106004263667887, 0.8570950695662498, 0.824588456851081, 0.7373645850507071, 0.7108736417202539, 0.6995291646602935, 0.6580977070175693, 0.6770007229122141, 0.6275050974698382, 0.6182608380923575, 0.604117912308352, 0.6002280804553856, 0.5858413857901023, 0.5704329374475471, 0.5528769465942015, 0.562421871426713, 0.530173660167031, 0.5413391565949044], "accuracy": [0.34605732560157776, 0.5011227130889893, 0.6342623233795166, 0.6758684515953064, 0.6927750706672668, 0.7232862114906311, 0.7358341217041016, 0.7408532500267029, 0.7568352818489075, 0.7428345084190369, 0.7614582180976868, 0.7670056819915771, 0.7734777331352234, 0.7733456492424011, 0.7802139520645142, 0.787082314491272, 0.7932901978492737, 0.7906485199928284, 0.7998943328857422, 0.7979130744934082], "val_loss": [1.278414555958339, 0.7915039232798985, 0.6795226676123483, 0.6551271677017212, 0.5640059198651995, 0.5352597747530256, 0.5274689878736224, 0.5304632016590664, 0.5423859187534877, 0.512352705001831, 0.46968676362718853, 0.4862006562096732, 0.48000759737832205, 0.5004264967782157, 0.45340260437556673, 0.4751763003213065, 0.46945498670850483, 0.4542087997709002, 0.4524490237236023, 0.4453674299376352], "val_accuracy": [0.39633333683013916, 0.6779999732971191, 0.6986666917800903, 0.7006666660308838, 0.75, 0.7603333592414856, 0.7590000033378601, 0.7509999871253967, 0.7403333187103271, 0.7606666684150696, 0.7900000214576721, 0.7763333320617676, 0.7823333144187927, 0.7543333172798157, 0.8013333082199097, 0.7753333449363708, 0.7739999890327454, 0.7856666445732117, 0.7990000247955322, 0.800000011920929]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7900000214576721, "mapping_values": [1, 2, 2, 1, 1, 0, 66, 66, 42, 24, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, alpha))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))))))), tf.math.add(beta, beta))))))))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(beta, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0126953501317795, 1.4496487151236503, 1.0163388427112239, 0.8709576404121463, 0.8245551986559554, 0.7573513785578146, 0.7201963234744477, 0.7118015411334377, 0.674162397523519, 0.6923422789482345, 0.6668228707718512, 0.6283378571551379, 0.62014764684334, 0.619539413839803, 0.5900963972415024, 0.5870875256282936, 0.5967756505844505], "accuracy": [0.33218860626220703, 0.5082551836967468, 0.6089023947715759, 0.6749438643455505, 0.691850483417511, 0.7128516435623169, 0.7309470176696777, 0.7316074371337891, 0.7469290494918823, 0.7353057861328125, 0.7416457533836365, 0.7578919529914856, 0.7621186375617981, 0.7637035846710205, 0.7751948237419128, 0.7771760821342468, 0.7712323069572449], "val_loss": [1.4824230330330985, 0.8232949801853725, 0.6883747407368251, 0.6110987833568028, 0.6031703948974609, 0.548130716596331, 0.5933690071105957, 0.5006745031901768, 0.6542027507509504, 0.5171908480780465, 0.4677787167685373, 0.4616003547395979, 0.47767341136932373, 0.4775902032852173, 0.5031480618885585, 0.49474072456359863, 0.5039170128958566], "val_accuracy": [0.46299999952316284, 0.625333309173584, 0.6909999847412109, 0.737666666507721, 0.7133333086967468, 0.7596666812896729, 0.7113333344459534, 0.7676666378974915, 0.6759999990463257, 0.750333309173584, 0.7913333177566528, 0.7926666736602783, 0.784333348274231, 0.7846666574478149, 0.7526666522026062, 0.7639999985694885, 0.7609999775886536]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 1, 4, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 1, 2, 7, 2, 9, 9, 5, 6, 5, 5, 3, 2, 3, 7, 2, 1, 6, 2, 3, 6, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0, 1, 3], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7874285578727722, "mapping_values": [1, 2, 2, 1, 1, 0, 71, 71, 42, 29, 7, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.pow(grad, tf.math.negative(tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))))), tf.math.add(beta, beta))), tf.math.add(beta, alpha))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(beta, beta)))))), tf.math.multiply(tf.math.add(tf.math.add(tf.math.subtract(alpha, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, beta))), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.square(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))), grad)))))), tf.math.add(beta, tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0127839717284295, 1.4469852059855202, 1.0142170153651744, 0.8822705278527609, 0.8343271117609694, 0.7442629119077961, 0.7556050698345584, 0.7016746382183638, 0.7066031322030816, 0.6682594737136179, 0.6399406491647291, 0.6285423839947236, 0.6273311290364963, 0.6007856067145553, 0.6009569820663665, 0.5751718329070125, 0.5960189584475845], "accuracy": [0.3323206901550293, 0.5091797709465027, 0.6128648519515991, 0.6680755615234375, 0.6865671873092651, 0.7189275026321411, 0.709021270275116, 0.737022876739502, 0.7275128960609436, 0.7485140562057495, 0.752740740776062, 0.7580240368843079, 0.759609043598175, 0.7709681391716003, 0.7696473598480225, 0.7802139520645142, 0.7714964747428894], "val_loss": [1.4828427178519112, 0.8205568449837821, 0.7165400641305106, 0.6528075081961495, 0.6067585945129395, 0.5611908265522548, 0.5349439382553101, 0.5240658521652222, 0.562171459197998, 0.5109570366995675, 0.4758490834917341, 0.4566755635397775, 0.5007838351385934, 0.4729424885341099, 0.4721283231462751, 0.4748198815754482, 0.501020039830889], "val_accuracy": [0.46266666054725647, 0.628000020980835, 0.671999990940094, 0.7076666951179504, 0.7223333120346069, 0.7556666731834412, 0.7706666588783264, 0.7506666779518127, 0.75, 0.7580000162124634, 0.7893333435058594, 0.7990000247955322, 0.7643333077430725, 0.7863333225250244, 0.7793333530426025, 0.7806666493415833, 0.7599999904632568]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 5, 5, 6, 2, 3, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 4, 1, 5, 2, 3, 2, 1, 1, 3, 1, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [26, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7857142686843872, "mapping_values": [1, 2, 2, 1, 1, 0, 41, 41, 25, 16, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.square(tf.math.add(beta, grad)), grad)), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, beta), grad))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), tf.math.add(beta, alpha))))), tf.math.add(beta, alpha)), tf.math.sqrt(tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, alpha))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0127824183861973, 1.4475542867440336, 1.0179062429011034, 0.8697261190323105, 0.8177354437264752, 0.7628909802991071, 0.7318573958129616, 0.7390448758158433, 0.6887794593699683, 0.6761376968133624, 0.6480715008081777, 0.625124944506572, 0.6148565342523608, 0.608141353385103, 0.6025322020849012, 0.5796910469022803, 0.59331850190094], "accuracy": [0.3323206901550293, 0.5094439387321472, 0.609959065914154, 0.6752080321311951, 0.6922467350959778, 0.7099458575248718, 0.7248712182044983, 0.7182670831680298, 0.7364945411682129, 0.7427024245262146, 0.7490423917770386, 0.7577598690986633, 0.7635715007781982, 0.7672698497772217, 0.7726852297782898, 0.780610203742981, 0.7713643908500671], "val_loss": [1.482764550617763, 0.8180276155471802, 0.6800740786961147, 0.606351205280849, 0.6432287863322667, 0.5567727429526192, 0.6261929614203317, 0.528147850717817, 0.5795591388429914, 0.5080339227403913, 0.473169207572937, 0.4563391889844622, 0.4807018382208688, 0.4732614755630493, 0.4693845680781773, 0.47033391680036274, 0.479060241154262], "val_accuracy": [0.46299999952316284, 0.6299999952316284, 0.6980000138282776, 0.7386666536331177, 0.6956666707992554, 0.7516666650772095, 0.6890000104904175, 0.7523333430290222, 0.7283333539962769, 0.7563333511352539, 0.7913333177566528, 0.7929999828338623, 0.7649999856948853, 0.7866666913032532, 0.7793333530426025, 0.7806666493415833, 0.7696666717529297]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 1, 5, 0, 4, 0, 2, 2, 9, 2, 3, 3, 3, 8, 2, 7, 1, 9, 9, 5, 6, 5, 5, 3, 2, 3, 7, 2, 3, 1, 2, 3, 6, 2, 5, 8, 3, 2, 6, 0, 0, 2, 8, 0], [4, 3, 3, 3, 1, 4, 0, 5, 2, 1, 2, 1, 0, 3, 2, 1, 3, 5, 4, 2, 0, 3, 3, 0, 3, 0, 0], [57, 38, 41, 19, 22, 54, 76, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7217142581939697, "mapping_values": [1, 2, 2, 1, 1, 0, 38, 38, 25, 13, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, beta)))))))))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.000819145838, 1.375571994371481, 0.8641386245692395, 0.7400995474276746, 0.699318112485901, 0.662446336959725, 0.6542224489765522, 0.6659928805493345, 153.09049850416505, NaN, NaN], "accuracy": [0.3494914770126343, 0.5021793842315674, 0.6699247360229492, 0.7211728692054749, 0.735569953918457, 0.7436270117759705, 0.748778223991394, 0.7467969655990601, 0.5992603302001953, 0.10870426893234253, 0.09998679161071777], "val_loss": [1.5594217777252197, 0.7082341228212629, 0.5674836124692645, 0.5241443940571376, 0.4797385590417044, 0.4815904753548758, 0.49168384075164795, 0.5040950945445469, 1945.6995675223213, NaN, NaN], "val_accuracy": [0.46433332562446594, 0.6840000152587891, 0.7403333187103271, 0.7663333415985107, 0.7749999761581421, 0.7923333048820496, 0.7736666798591614, 0.7643333077430725, 0.17599999904632568, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 1, 6, 3, 5, 7, 9, 0, 4, 8, 9, 3, 8, 3, 3, 8, 2, 6, 2, 9, 4, 6, 2, 6, 0, 7, 2, 2, 9, 6, 3, 7, 0, 9, 8, 8, 4, 6, 0, 8, 0, 1, 2, 8], [4, 2, 2, 0, 1, 4, 3, 5, 2, 3, 1, 3, 0, 4, 3, 5, 3, 5, 4, 1, 4, 5], [33, 40, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.3951428532600403, "mapping_values": [1, 2, 2, 1, 1, 0, 24, 24, 16, 8, 3, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, grad), beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(alpha, grad)))), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.0011852446989282, 15348529589.550442, NaN, NaN, NaN, NaN], "accuracy": [0.32479196786880493, 0.34064191579818726, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.6242505482264928, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.36766666173934937, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 3, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 0, 9, 5, 5, 4, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 9, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 1, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 3, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.36800000071525574, "mapping_values": [1, 2, 2, 1, 1, 0, 58, 58, 39, 19, 7, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))))))), alpha))))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.square(beta))))))), tf.math.square(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.5596033177749278, 2.29179161027312, 2.30307067947428, 2.304660559960203, 2.2159430763709183, 2.6085730356043357, 2.3047258932954837, 2.303090412162314, 2.302978480827413, 2.302715656071165], "accuracy": [0.16536785662174225, 0.13221503794193268, 0.09893012791872025, 0.15902787446975708, 0.18161405622959137, 0.1538766324520111, 0.09642054885625839, 0.09787346422672272, 0.09866596013307571, 0.09893012791872025], "val_loss": [1.9769836834498815, 1.9738339015415736, 1.9708058493477958, 1.9720571381705148, 1.688664266041347, 1.9759926795959473, 1.973909854888916, 1.9735551561628069, 1.9733503205435616, 1.972998823438372], "val_accuracy": [0.1003333330154419, 0.09866666793823242, 0.09866666793823242, 0.09799999743700027, 0.25033333897590637, 0.10400000214576721, 0.10400000214576721, 0.09266666322946548, 0.13500000536441803, 0.10633333027362823]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 2, 3, 5, 2, 0, 4, 5, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.3402857184410095, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(grad, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)))))))), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.add(beta, beta), alpha)), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.559606883693066, 2.280589834259108, 2.5065598241279248, 2.3038175039602513, 2.3026871931252146, 2.292969933779264, 2.2774470139330782], "accuracy": [0.16549994051456451, 0.1348566859960556, 0.12534672021865845, 0.09813763201236725, 0.10355303436517715, 0.12640337646007538, 0.17976489663124084], "val_loss": [1.9770115443638392, 3.007552078792027, 1.9747971126011439, 1.9737340382167272, 1.9721711703709193, 1.8950841086251395, 1.9767144748142786], "val_accuracy": [0.1003333330154419, 0.34200000762939453, 0.09866666793823242, 0.12800000607967377, 0.1003333330154419, 0.14866666495800018, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 5, 5, 0, 2, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 8, 2, 8, 7, 2, 9, 8, 2, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 5, 1, 3, 4, 0, 5, 2, 1, 2, 3, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 38, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [5, 9, 44]], "fitness": -0.29085713624954224, "mapping_values": [1, 1, 1, 0, 1, 0, 41, 41, 26, 15, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(alpha), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, beta)))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), beta)))))), tf.math.add(beta, grad))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))))))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3014431705469813, 2.3010775916029385, 2.3015031487698314, 2.300526647992248, 2.300807490025718, 2.3016151795848927, 2.3003951080439666, 2.2997363407251905, 2.2981698356205684, 2.2987674981564297, 2.2986868889324574, 2.297990669553558, 2.297691989395329, 2.2977316987953795, 2.298430667246621, 2.2964894309602535, 2.2963283625040796, 2.2969275856093643, 2.296609271802387, 2.296065486637892, 2.296319689811764, 2.2961010966617765, 2.2938680092672143, 2.294061810002587, 2.2932722721558365, 2.293314829510059, 2.2940095405316607, 2.292522032814192, 2.292173445767982, 2.2942302174430247, 2.2935090296776415, 2.289461864377718, 2.289827281426382, 2.2897831239185122, 2.2901583076893237, 2.290900378163622, 2.291225685372313, 2.291058338108851, 2.2870910719102007, 2.2900148168011363, 2.2884105174233804, 2.288056747930051, 2.28898028079718, 2.2879992356122116, 2.287231399241125, 2.288008628252428, 2.2868464450007338, 2.2875710949528063, 2.287329117509557, 2.286096704099094, 2.2858123383454645, 2.2864056971598736, 2.2853056279785675, 2.2841004970098577, 2.285640058106813, 2.2848858259861355, 2.2847259730836735, 2.282351911217545, 2.2834066740352683, 2.2828857474528, 2.28299226396828, 2.2812512600190447, 2.2826588821448923, 2.2817294141950546, 2.2805683052283174, 2.279690549263723, 2.2796157007881237, 2.2799363626291913, 2.28043828730444, 2.2793618737431, 2.2789823161832974, 2.2784814945443146, 2.278688186100839, 2.277625466791268, 2.277289502231153, 2.2786850916978754, 2.2759631769673825, 2.277183136022354, 2.2756035840270417, 2.27638236815982, 2.2753616189912576, 2.273655606991485, 2.2755392364869262, 2.275348536767633, 2.2741585784915133, 2.2759565141584894, 2.2763324104453186, 2.2738627758890235, 2.27399247820981, 2.274110435290092, 2.271118631609805, 2.271553595713841, 2.2731808117430807, 2.271246289438528, 2.2721906702799677, 2.268651685285184, 2.2695170254707966, 2.269387371929614, 2.269227767774788, 2.269632547318329], "accuracy": [0.08809932321310043, 0.0956280529499054, 0.09351472556591034, 0.09496764093637466, 0.09021265059709549, 0.0940430611371994, 0.09747721254825592, 0.09668471664190292, 0.10236428678035736, 0.1018359512090683, 0.09826971590518951, 0.10196803510189056, 0.1002509593963623, 0.10157178342342377, 0.10368511080741882, 0.10751552134752274, 0.10711926966905594, 0.0940430611371994, 0.10276053100824356, 0.1088363528251648, 0.10527011007070541, 0.10751552134752274, 0.11055342853069305, 0.11108175665140152, 0.10540219396352768, 0.11081759631633759, 0.11319508403539658, 0.11438383162021637, 0.11808215826749802, 0.11147800832986832, 0.1146479994058609, 0.12442214041948318, 0.12112006545066833, 0.1220446452498436, 0.12112006545066833, 0.11966715008020401, 0.11517632752656937, 0.12191256135702133, 0.1274600476026535, 0.12296922504901886, 0.12098798155784607, 0.12917712330818176, 0.12481838464736938, 0.1286487877368927, 0.12759213149547577, 0.1282525360584259, 0.1306300312280655, 0.1306300312280655, 0.12653546035289764, 0.1278562992811203, 0.1348566859960556, 0.1336679458618164, 0.13630960881710052, 0.1430458277463913, 0.13578127324581146, 0.13538502156734467, 0.13419628143310547, 0.14436666667461395, 0.1434420794248581, 0.13419628143310547, 0.1394795924425125, 0.14542332291603088, 0.1410645842552185, 0.14317791163921356, 0.14595165848731995, 0.15057456493377686, 0.14476291835308075, 0.14793290197849274, 0.14872540533542633, 0.15334829688072205, 0.1534803807735443, 0.15374454855918884, 0.15651829540729523, 0.15493330359458923, 0.15400871634483337, 0.15691454708576202, 0.1620657742023468, 0.14872540533542633, 0.15995244681835175, 0.1624620258808136, 0.1608770340681076, 0.1640470176935196, 0.15915995836257935, 0.16312244534492493, 0.16338661313056946, 0.1666886806488037, 0.1632545292377472, 0.15889579057693481, 0.16299036145210266, 0.16497160494327545, 0.1666886806488037, 0.1690661758184433, 0.17183992266654968, 0.17593449354171753, 0.16734910011291504, 0.18002906441688538, 0.18161405622959137, 0.1764628142118454, 0.1850482076406479, 0.17870822548866272], "val_loss": [1.9706775120326452, 1.970369747706822, 1.970059939793178, 1.969752379826137, 1.9694461822509766, 1.9691382135663713, 1.9688353538513184, 1.9685286794389998, 1.968226500919887, 1.967918804713658, 1.967611449105399, 1.9673047065734863, 1.966998713357108, 1.9666966029575892, 1.9663912909371513, 1.9660872731889998, 1.9657855033874512, 1.9654838017054967, 1.9651790346418108, 1.9648750850132533, 1.9645706585475378, 1.9642640522548132, 1.963960783822196, 1.9636581965855189, 1.963355200631278, 1.963052409035819, 1.96274995803833, 1.962446689605713, 1.962146282196045, 1.961846147264753, 1.9615447861807687, 1.9612454686846053, 1.9609476498195104, 1.960648741040911, 1.9603464944022042, 1.9600441115243095, 1.9597477231706892, 1.959447247641427, 1.95914397920881, 1.9588443211146764, 1.9585439818246024, 1.9582435062953405, 1.9579430307660783, 1.9576408522469657, 1.95734098979405, 1.9570367676871163, 1.9567367689950126, 1.9564341136387415, 1.9561352048601424, 1.955836227961949, 1.955535616193499, 1.9552367074148995, 1.954939297267369, 1.9546355519975935, 1.9543377331324987, 1.9540344646998815, 1.9537343297685896, 1.9534326962062292, 1.9531290190560477, 1.9528279304504395, 1.9525303159441267, 1.9522260938371931, 1.9519237790788924, 1.9516192163739885, 1.951315471104213, 1.9510126795087541, 1.9507081168038505, 1.950401442391532, 1.9501007625034876, 1.9497989927019392, 1.9494947705950056, 1.9491902078901018, 1.9488876887730189, 1.9485813549586706, 1.9482793807983398, 1.9479754992893763, 1.947671549660819, 1.9473656245640345, 1.9470602444240026, 1.9467532294137138, 1.946446418762207, 1.9461376326424735, 1.9458266666957311, 1.9455184936523438, 1.945213726588658, 1.9449078696114677, 1.9446045330592565, 1.94429349899292, 1.9439879144941057, 1.9436775616237096, 1.9433670725141252, 1.9430524962288993, 1.9427435738699776, 1.9424340384347099, 1.9421259335109167, 1.94180999483381, 1.941497462136405, 1.9411860874720983, 1.9408747128077917, 1.9405614307948522], "val_accuracy": [0.036666665226221085, 0.03866666555404663, 0.03966666758060455, 0.04066666588187218, 0.04233333468437195, 0.04500000178813934, 0.04899999871850014, 0.05133333429694176, 0.0533333346247673, 0.0560000017285347, 0.058666665107011795, 0.05966666713356972, 0.06266666948795319, 0.06499999761581421, 0.0676666647195816, 0.07066666334867477, 0.07133333384990692, 0.07400000095367432, 0.07633333653211594, 0.08033332973718643, 0.08266666531562805, 0.08566666394472122, 0.08866667002439499, 0.09233333170413971, 0.09466666728258133, 0.09799999743700027, 0.10100000351667404, 0.10400000214576721, 0.10833333432674408, 0.11133333295583725, 0.11500000208616257, 0.11833333224058151, 0.12099999934434891, 0.1236666664481163, 0.12566666305065155, 0.1289999932050705, 0.1303333342075348, 0.1340000033378601, 0.13633333146572113, 0.14000000059604645, 0.1420000046491623, 0.14366666972637177, 0.1459999978542328, 0.14800000190734863, 0.15133333206176758, 0.15333333611488342, 0.15700000524520874, 0.15966667234897614, 0.16300000250339508, 0.1653333306312561, 0.16766667366027832, 0.16966666281223297, 0.17366667091846466, 0.17766666412353516, 0.179666668176651, 0.1823333352804184, 0.1860000044107437, 0.18833333253860474, 0.1899999976158142, 0.19466666877269745, 0.19733333587646484, 0.19900000095367432, 0.20266667008399963, 0.20733332633972168, 0.20766666531562805, 0.21033333241939545, 0.2133333384990692, 0.2160000056028366, 0.21799999475479126, 0.22100000083446503, 0.22433333098888397, 0.2266666740179062, 0.22833333909511566, 0.23000000417232513, 0.23333333432674408, 0.23499999940395355, 0.23800000548362732, 0.23999999463558197, 0.24266666173934937, 0.24500000476837158, 0.24699999392032623, 0.25033333897590637, 0.25099998712539673, 0.2526666522026062, 0.2549999952316284, 0.25833332538604736, 0.2606666684150696, 0.26233333349227905, 0.2653333246707916, 0.26866665482521057, 0.2706666588783264, 0.2720000147819519, 0.27399998903274536, 0.27566665410995483, 0.27666667103767395, 0.2796666622161865, 0.28066667914390564, 0.28333333134651184, 0.2849999964237213, 0.2866666615009308]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 4, 9, 0, 4, 0, 3, 2, 3, 2, 2, 3, 3, 8, 2, 1, 2, 9, 9, 5, 6, 5, 5, 1, 5, 1, 7, 2, 9, 3, 2, 3, 1, 5, 5, 5, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 0, 2, 1, 3, 0, 5, 3, 1, 2, 1, 0, 2, 3, 1, 0, 5, 4, 2, 3, 1, 3, 0, 3, 0, 0], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [0, 0, 1, 0, 0], [0, 0, 0, 1], [2, 5, 8], [5], [76], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 9, 3, 1, 5, 5, 0, 7, 5], [2, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06868313252925873, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 5, 5, 0, 2, 6, 3, 2, 3, 1, 3, 3, 3, 8, 2, 7, 2, 1, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 9, 8, 2, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 2, 5, 3, 3, 4, 3, 5, 2, 1, 2, 1, 1, 2, 1, 1, 3, 5, 1, 2, 2, 3, 3, 3, 3, 0, 0, 5], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [9, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 84, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 74, 74, 46, 28, 4, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, grad)))), grad)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), alpha)), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(alpha))))))))))))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, alpha)))))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(beta, grad)), tf.math.negative(grad)), tf.math.add(beta, grad))))), tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30262422331761, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 7, 5, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 5, 1, 2, 3, 7, 2, 1, 8, 2, 3, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 0, 2, 1, 3, 3, 2, 2, 1, 2, 1, 0, 4], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 8, 2, 1, 5, 4, 7, 5], [1, 0, 0, 3, 1, 1], [34, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 6, 4, 1, 1, 0, 0, 0, 0, 10, 6, 4, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, tf.math.square(beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 1, 5, 0, 4, 2, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 2, 9, 3, 5, 6, 5, 5, 3, 2, 3, 7, 2, 1, 6, 2, 3, 6, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 1, 4, 0, 5, 0, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [50, 38, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 2, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [81, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 56, 56, 32, 24, 5, 1, 0, 0, 0, 0, 13, 7, 6, 2], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.square(grad)), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))), tf.math.add(beta, beta)))), tf.math.add(beta, alpha)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), beta)), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), grad)))), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))))), tf.math.add(beta, grad)))))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha))), alpha))", "other_info": {"loss": [2.30262422331761, 2.3025851744418886, 2.3025851429508597, 2.3025851744418886, 2.3025852374239464, 2.3025852824246265, 2.3025852824246265, 2.3025852059329175], "accuracy": [0.09166556596755981, 0.10447761416435242, 0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644529070173, 1.973644460950579, 1.973644460950579, 1.973644529070173, 1.973644529070173, 1.973644529070173, 1.973644529070173], "val_accuracy": [0.09866666793823242, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 5, 0, 0, 2, 0, 3, 1, 1, 2, 3, 3, 3, 8, 2, 7, 2, 9, 9, 5, 6, 1, 5, 1, 2, 3, 7, 3, 9, 8, 2, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 0, 2, 1, 2, 1, 3, 2, 3, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 58, 58, 36, 22, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.negative(tf.math.negative(grad))), tf.math.add(beta, tf.math.add(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, beta)))))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta))))), tf.math.add(grad, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.square(beta), tf.math.add(beta, beta)))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [58314.53987854514, 2.687774668059817, 2.4983332209095206, 2.590944884018954, 2.6281973710700646, 2.4773644004373847, 2.616589579143229, 2.6092870746542514], "accuracy": [0.09602430462837219, 0.09879804402589798, 0.09893012791872025, 0.09589222073554993, 0.10342095047235489, 0.10711926966905594, 0.09721305221319199, 0.10500594228506088], "val_loss": [2.3350140707833424, 2.303056240081787, 2.3167477335248674, 2.1966001646859303, 2.308286121913365, 2.3060644013541087, 2.1508632387433733, 2.2795370646885464], "val_accuracy": [0.09866666793823242, 0.09799999743700027, 0.10133333504199982, 0.1003333330154419, 0.09799999743700027, 0.10133333504199982, 0.10100000351667404, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 3, 1, 7, 9, 5, 0, 4, 6, 1, 5, 2, 2, 3, 3, 2, 8, 2, 2, 2, 9, 5, 8, 6, 5, 5, 1, 2, 3, 1, 2, 1, 8, 5, 3, 1, 3, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 1, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 4, 2, 2, 3, 3, 0, 3, 0, 0], [11, 38, 66, 19, 16, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 4, 9, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 42, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 5, 8, 6, 4, 1, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 1, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 7, 3, 9, 0, 4, 0, 3, 2, 3, 2, 2, 3, 3, 8, 2, 1, 2, 9, 9, 5, 6, 5, 5, 1, 5, 1, 7, 2, 9, 3, 2, 3, 1, 5, 5, 5, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 3, 3, 2, 2, 1, 2, 1, 0, 4], [11, 61, 41, 19, 22, 54, 62, 80, 82, 51], [1, 0, 1], [0], [2, 7, 4], [5], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 4, 5, 2, 9, 7, 5], [0, 0, 0, 3, 1, 1], [34, 13, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 11, 6, 0, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 5, 2, 3, 3], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.negative(tf.math.subtract(grad, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1520.2589908376142, 27547.784848744388, 124078.91254870559, 343800.0610759807, 735576.451525558, 1343823.6760005283], "accuracy": [0.09589222073554993, 0.10672302544116974, 0.09813763201236725, 0.10091137140989304, 0.09813763201236725, 0.10355303436517715], "val_loss": [5604.528180803572, 43095.40290178572, 143777.13392857142, 338941.1785714286, 659879.6964285715, 1137885.5714285714], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 4, 9, 0, 4, 0, 3, 2, 3, 2, 2, 3, 3, 8, 2, 1, 2, 9, 9, 5, 6, 5, 5, 1, 5, 1, 7, 2, 9, 3, 2, 3, 1, 5, 5, 5, 3, 2, 5, 0, 0, 2, 8, 0], [5, 3, 0, 2, 1, 3, 0, 5, 3, 1, 2, 1, 0, 2, 3, 1, 0, 5, 4, 2, 3, 1, 3, 0, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [2, 2, 0, 3, 1, 1], [77, 48, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07079645991325378, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 1, 7, 2, 5, 0, 2, 2, 6, 2, 3, 2, 3, 3, 5, 8, 2, 7, 2, 4, 9, 0, 5, 6, 5, 1, 2, 3, 7, 2, 9, 8, 2, 3, 5, 9, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 4, 3, 5, 2, 1, 2, 1, 1, 2, 1, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 61, 14, 19, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 9, 3, 1, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [2, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 69, 69, 43, 26, 4, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, grad)))), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))))), tf.math.add(beta, beta))), tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), alpha)), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(alpha)))))))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, beta)), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.subtract(grad, tf.math.add(beta, grad)))))))), tf.math.negative(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 1, 5, 0, 4, 0, 3, 2, 3, 2, 3, 3, 3, 8, 2, 7, 0, 9, 8, 5, 6, 5, 6, 3, 2, 3, 7, 2, 1, 6, 2, 3, 6, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 4, 3, 5, 2, 1, 2, 1, 1, 2, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 61, 14, 80, 16, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 4, 3, 1, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 67, 67, 40, 27, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(grad, grad)))), tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.sqrt(beta)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))))))))))), alpha), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, beta)))), tf.math.multiply(alpha, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(alpha, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), grad)), tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.square(tf.math.sqrt(grad))), grad))), tf.math.add(beta, tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301577131399594, 2.301543470512937, 2.3023103265368063, 2.3016603211874123, 2.3022761745790463, 2.303421509815418], "accuracy": [0.08770307898521423, 0.0944393053650856, 0.09219389408826828, 0.09113723784685135, 0.0874389111995697, 0.08889182657003403], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 0, 1, 7, 5, 5, 0, 4, 0, 5, 2, 2, 2, 3, 9, 3, 8, 2, 7, 2, 9, 9, 5, 6, 5, 3, 1, 2, 3, 2, 2, 1, 8, 2, 4, 5, 5, 5, 8, 3, 2, 5, 0, 0, 2, 8, 0], [4, 3, 5, 2, 1, 4, 0, 5, 2, 1, 2, 1, 0, 2, 2, 1, 3, 5, 3, 2, 2, 3, 3, 3, 3, 0, 0], [11, 61, 14, 19, 68, 30, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1], [0], [2], [5], [76], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 9, 3, 1, 5, 5, 0, 7, 5], [3, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 25, 11, 4, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.square(grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, alpha))))), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301577131399594, 2.301543470512937, 2.3023103265368063, 2.3016603211874123, 2.3022761745790463, 2.303421509815418], "accuracy": [0.08770307898521423, 0.0944393053650856, 0.09219389408826828, 0.09113723784685135, 0.0874389111995697, 0.08889182657003403], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]