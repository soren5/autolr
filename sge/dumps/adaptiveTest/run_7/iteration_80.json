[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 1, 7, 6, 1, 6, 6, 3, 8, 2, 3, 3, 8, 3, 3, 0, 8, 9, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 5, 2, 3, 3, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 5, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 4, 0, 3], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7862856984138489, "mapping_values": [1, 2, 2, 1, 1, 0, 33, 33, 19, 14, 3, 8, 5, 4, 1, 0, 3, 1, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(beta, tf.math.add(beta, grad)), grad)))), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))))), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9720363754874066, 1.360787595866174, 1.044522730232844, 0.8845490439771708, 0.8252463633232208, 0.7709792459000055, 0.7031359563508699, 0.7209956230598906, 0.6607964819275298, 0.657943238026084, 0.6461450041418991, 0.6190251380838911, 0.6131031645712615, 0.6144726683655435, 0.5969329025483702, 0.5879154057235703, 0.5667017354957022], "accuracy": [0.3494914770126343, 0.5263505578041077, 0.6164311170578003, 0.6642451286315918, 0.6907938122749329, 0.7094175219535828, 0.7317395210266113, 0.7228899598121643, 0.741909921169281, 0.7432307600975037, 0.7493065595626831, 0.7668735980987549, 0.7563069462776184, 0.7580240368843079, 0.7703077793121338, 0.7775723338127136, 0.7824593782424927], "val_loss": [1.3735812732151575, 0.891235521861485, 0.729936020714896, 0.6496278047561646, 0.5944865090506417, 0.5544888973236084, 0.5620822054999215, 0.5557691369737897, 0.49597058977399555, 0.5479158503668649, 0.47912544863564627, 0.4590941497257778, 0.49943658283778597, 0.49852216243743896, 0.49552413395472933, 0.47664681502750944, 0.46679769243512836], "val_accuracy": [0.4423333406448364, 0.5476666688919067, 0.6470000147819519, 0.6923333406448364, 0.734000027179718, 0.7450000047683716, 0.7266666889190674, 0.7546666860580444, 0.7630000114440918, 0.7516666650772095, 0.7820000052452087, 0.7983333468437195, 0.7630000114440918, 0.7786666750907898, 0.7716666460037231, 0.7723333239555359, 0.7863333225250244]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0], [0, 0, 1, 1], [1, 4], [1, 0], [43], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7799999713897705, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 5, 4, 2, 2, 1, 5, 2, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9716845808437298, 1.3606733502713113, 1.0532698408330137, 0.8880319555973128, 0.787533209450162, 0.7815325619711175, 0.7093038197994044, 0.71419429274409, 0.668387253113458, 0.6679909752895646, 0.6287075532047961, 0.6294776767771777, 0.6339295855476683, 0.6169714187791618, 0.5993445918402888, 0.5779382113405207, 0.5660010127894646], "accuracy": [0.349359393119812, 0.5266147255897522, 0.6133931875228882, 0.6600185036659241, 0.7017567157745361, 0.7080966830253601, 0.7281733155250549, 0.7239466309547424, 0.7376832365989685, 0.7421740889549255, 0.7540615797042847, 0.7592127919197083, 0.7553823590278625, 0.7617223858833313, 0.7726852297782898, 0.7815347909927368, 0.7847048044204712], "val_loss": [1.3726920740945, 0.8967687061854771, 0.7192045109612601, 0.611655558858599, 0.5962409632546561, 0.5702742849077497, 0.588053720338004, 0.5554030452455793, 0.5111972093582153, 0.5212371689932687, 0.4820613520486014, 0.4657581533704485, 0.4639479773385184, 0.49455765315464567, 0.47556442873818533, 0.4714514528002058, 0.45853192465645926], "val_accuracy": [0.44066667556762695, 0.5443333387374878, 0.6526666879653931, 0.7276666760444641, 0.7196666598320007, 0.7279999852180481, 0.7206666469573975, 0.7613333463668823, 0.7673333287239075, 0.7486666440963745, 0.7850000262260437, 0.7956666946411133, 0.793666660785675, 0.781000018119812, 0.7853333353996277, 0.7760000228881836, 0.7850000262260437]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 1, 0], [0, 1, 1, 1], [5, 1], [1, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [16, 9, 44]], "fitness": -0.7457143068313599, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 4, 5, 2, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.300012438194296, 2.285920467422056, 2.2584298547579236, 2.2156051081940955, 2.15721752237036, 2.0577500946312974, 1.907650393580622, 1.7032765050086174, 1.5078181153228019, 1.3894367458136674, 1.3554691391818796, 1.3732669531566875, 1.2436064161156557, 1.1101877353667204, 0.9830247313591153, 0.9194360944998341, 0.9167839238168447, 0.9012405513583425, 0.892655767619476, 0.8593799735986167, 0.8249404380554851, 0.8088446018198588, 0.8020086573288504, 0.8195037577744598, 0.8200549295376541, 0.7870682935673153, 0.7687666078033291, 0.7653660289977662, 0.7367829427254938, 0.7235777830450905, 0.7301320898188041, 0.7335578142502336, 0.7359687742886526, 0.7125564011537387, 0.695796059178103, 0.6924787920306403, 0.6847159739939481, 0.6977570414574643, 0.685498161031554, 0.668047524029159, 0.6635323904288396, 0.6621535608812865, 0.6625332151106745, 0.6430405433372247, 0.632264996902298, 0.6176654948235314, 0.6207803849767086, 0.6133730494744585], "accuracy": [0.09470347315073013, 0.1352529376745224, 0.20644564926624298, 0.29045039415359497, 0.3555673062801361, 0.39241844415664673, 0.42266544699668884, 0.4476291239261627, 0.4954431354999542, 0.518689751625061, 0.5432571768760681, 0.5494650602340698, 0.5934486985206604, 0.6345264911651611, 0.6542068123817444, 0.6546030640602112, 0.6523576974868774, 0.6715096831321716, 0.6812838315963745, 0.6902654767036438, 0.6940959095954895, 0.7003037929534912, 0.700700044631958, 0.6935675740242004, 0.6873596906661987, 0.6993792057037354, 0.7074362635612488, 0.7180029153823853, 0.7273808121681213, 0.726192057132721, 0.7260599732398987, 0.7235503792762756, 0.7168141603469849, 0.7342491149902344, 0.7372870445251465, 0.7346453666687012, 0.7374191284179688, 0.7442874312400818, 0.7497028112411499, 0.7534011602401733, 0.7441553473472595, 0.7412495017051697, 0.7354378700256348, 0.7552502751350403, 0.7640998363494873, 0.7709681391716003, 0.7672698497772217, 0.7685906887054443], "val_loss": [1.963290078299386, 1.942868368966239, 1.9111374446323939, 1.8657876423427038, 1.7939983776637487, 1.6746687548501151, 1.488081625529698, 1.2529429708208357, 1.0456194877624512, 0.8982109001704625, 0.8138445615768433, 0.7689669132232666, 0.7471530096871513, 0.7120375803538731, 0.6519533736365182, 0.6693419558661324, 0.682751042502267, 0.6911769764763969, 0.6746514184134347, 0.6390187570026943, 0.607781205858503, 0.5921775443213326, 0.5832953112465995, 0.587703994342259, 0.5790162937981742, 0.5648882218769619, 0.5660317114421299, 0.5588316236223493, 0.5438072340829032, 0.5410015412739345, 0.5515799862997872, 0.5601302555629185, 0.5570715325219291, 0.5439454657690865, 0.5313916887555804, 0.5277734824589321, 0.5287078789302281, 0.5237285579953875, 0.5095979656491961, 0.4931884322847639, 0.4812873091016497, 0.4749319212777274, 0.4690060445240566, 0.4638902119227818, 0.4611206906182425, 0.46093673365456717, 0.4633977583476475, 0.4656327281679426], "val_accuracy": [0.09600000083446503, 0.2823333442211151, 0.37166666984558105, 0.40433332324028015, 0.43433332443237305, 0.46966665983200073, 0.5090000033378601, 0.5580000281333923, 0.6266666650772095, 0.6643333435058594, 0.6796666383743286, 0.6926666498184204, 0.7009999752044678, 0.7089999914169312, 0.7243333458900452, 0.690666675567627, 0.7066666483879089, 0.7303333282470703, 0.7149999737739563, 0.7103333473205566, 0.7200000286102295, 0.7263333201408386, 0.7363333106040955, 0.7300000190734863, 0.7310000061988831, 0.7403333187103271, 0.7416666746139526, 0.7459999918937683, 0.7486666440963745, 0.7553333044052124, 0.7570000290870667, 0.7590000033378601, 0.7613333463668823, 0.7666666507720947, 0.7676666378974915, 0.762666642665863, 0.7636666893959045, 0.7703333497047424, 0.7676666378974915, 0.7733333110809326, 0.7856666445732117, 0.7910000085830688, 0.79666668176651, 0.7946666479110718, 0.7886666655540466, 0.7860000133514404, 0.7816666960716248, 0.7803333401679993]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 9, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 4, 0, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [85, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 0], [0, 1, 1, 1], [1, 4], [7, 0], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [17, 9, 44]], "fitness": -0.6005714535713196, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 3, 2, 1, 1, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3011815862223584, 2.2989897825903407, 2.2963283545683404, 2.293362542260608, 2.293370137613337, 2.288429441421795, 2.28709826537442, 2.284904918807955, 2.282378552722389, 2.2796266757895554, 2.2768671354203884, 2.2752388611351257, 2.273730171103094, 2.2689697028560536, 2.2693901385424584, 2.2659456839792607, 2.26358293400559, 2.260082047077895, 2.258172764360566, 2.255685699267898, 2.2528095327867823, 2.249534545966962, 2.2470312599398286, 2.2447967489933087, 2.2410185192837737, 2.2378025880311507, 2.2347662128934203, 2.229806001396416, 2.2292442855235373, 2.2257671818174565, 2.2238863525042962, 2.220641823051754, 2.2175020002937744, 2.2132021184484674, 2.2074896450040207, 2.20383370122606, 2.2006949566264336, 2.1961576231655555, 2.1931920753509737, 2.188885995504359, 2.1835468302565384, 2.178868994406107, 2.173382844434926, 2.170620816809831, 2.166863802417457, 2.160412765875028, 2.153157385695234, 2.1487885344659867, 2.141830454696486, 2.138455824939535, 2.1317554217099106, 2.127066932255487, 2.118189263132821, 2.1133145163670477, 2.111849830890958, 2.1008290301350523, 2.0955110563341934, 2.0858070185281785, 2.078721466695533, 2.0705863268399645, 2.068292870040992, 2.0570255774139112, 2.0482557371008774, 2.0421715666353113, 2.0305643447590795, 2.0255155935893363, 2.0147508730930563, 2.0056890493780157, 2.0027945635577296, 1.9860194136264726, 1.9757392189805345, 1.971192278976627, 1.9556364638379315, 1.9482712008933885, 1.9387674663895393, 1.9289324419641098, 1.91225934763941, 1.904947879874648, 1.893885642120851, 1.8810288847996464, 1.874200150746522, 1.8570100859628298, 1.8513947875980594, 1.839051952939606, 1.829658129747124, 1.8142552711487825, 1.8023774670635027, 1.7887876371839153, 1.7807913219546125, 1.7711142627176686, 1.7550003474902767, 1.7454300830392884, 1.7248683576932784, 1.7129795728122175, 1.699939199426722, 1.688726090909373, 1.6848097665356199, 1.669929273958928, 1.6535279086520722, 1.6440664775272984], "accuracy": [0.09166556596755981, 0.09840179979801178, 0.10342095047235489, 0.11002509295940399, 0.11359133571386337, 0.12415797263383865, 0.12798838317394257, 0.13380002975463867, 0.14291374385356903, 0.15321621298789978, 0.15453705191612244, 0.16193369030952454, 0.16417910158634186, 0.17831197381019592, 0.18161405622959137, 0.186104878783226, 0.190859854221344, 0.20433232188224792, 0.20591731369495392, 0.21199312806129456, 0.2156914472579956, 0.22242768108844757, 0.2285034954547882, 0.23893804848194122, 0.24105137586593628, 0.2509576082229614, 0.26443007588386536, 0.26258090138435364, 0.261260062456131, 0.27565711736679077, 0.27301543951034546, 0.2735437750816345, 0.2805441915988922, 0.284110426902771, 0.30379077792167664, 0.308149516582489, 0.30603620409965515, 0.3078853487968445, 0.3063003420829773, 0.31726324558258057, 0.3275656998157501, 0.33086779713630676, 0.3369435966014862, 0.33747193217277527, 0.3399814963340759, 0.3420948386192322, 0.3517369031906128, 0.349359393119812, 0.36560559272766113, 0.36283186078071594, 0.36507725715637207, 0.368511438369751, 0.37604016065597534, 0.37405890226364136, 0.3649451732635498, 0.3809272348880768, 0.3819838762283325, 0.39162594079971313, 0.39664509892463684, 0.39585259556770325, 0.3867388665676117, 0.3928146958351135, 0.39770177006721497, 0.4019284248352051, 0.4065513014793396, 0.4154008626937866, 0.41883501410484314, 0.41830670833587646, 0.4095892310142517, 0.4163254499435425, 0.4270241856575012, 0.41249504685401917, 0.42728832364082336, 0.42649585008621216, 0.4299300014972687, 0.4321753978729248, 0.44591203331947327, 0.4407607913017273, 0.4445911943912506, 0.44406285881996155, 0.4451195299625397, 0.45528993010520935, 0.45330867171287537, 0.45449742674827576, 0.4554220139980316, 0.454629510641098, 0.46625280380249023, 0.4687623679637909, 0.4695548713207245, 0.4605732262134552, 0.46612071990966797, 0.469819039106369, 0.4795931875705719, 0.4859331548213959, 0.4905560612678528, 0.4885748326778412, 0.4827631711959839, 0.48514068126678467, 0.4905560612678528, 0.48910316824913025], "val_loss": [1.9687773159572057, 1.9665406772068568, 1.9643570355006628, 1.962130410330636, 1.9599267414637975, 1.9577635356358118, 1.9556027821132116, 1.9534262929643904, 1.9512303216116769, 1.9490064212254115, 1.9468005044119698, 1.9445667266845703, 1.9423229353768485, 1.9400455611092704, 1.9377643040248327, 1.9354578426906042, 1.9331247465951102, 1.930725370134626, 1.9282967022487096, 1.925844396863665, 1.9233457701546806, 1.9208132880074638, 1.9181757654462541, 1.9155233246939523, 1.9127984728131975, 1.9100235530308314, 1.9071615082877023, 1.9042136328560966, 1.9012201854160853, 1.8981429508754186, 1.8950422831944056, 1.8918584414890833, 1.8885780743190221, 1.885206631251744, 1.8816896166120256, 1.8780956268310547, 1.8744292259216309, 1.8706447737557548, 1.8667242186410087, 1.8627099309648787, 1.858557837350028, 1.8542825835091727, 1.849855559212821, 1.8453688621520996, 1.8407528059823173, 1.8359682219369071, 1.8310421534946986, 1.8259623391287667, 1.820706844329834, 1.815352303641183, 1.809830938066755, 1.8041554859706335, 1.7983028548104423, 1.7922974995204382, 1.7862533841814314, 1.7799420356750488, 1.7734044619968958, 1.7666961124965124, 1.7597975730895996, 1.752751418522426, 1.7455951826913017, 1.7381758008684431, 1.7305586678641183, 1.722762175968715, 1.7147395270211356, 1.70662294115339, 1.698272739137922, 1.689706223351615, 1.6810688972473145, 1.6720799037388392, 1.6628293650490897, 1.6534954820360457, 1.643883296421596, 1.6341361999511719, 1.6242207799639021, 1.6141105038779122, 1.60372679574149, 1.5932666233607702, 1.5825677258627755, 1.571697814123971, 1.5607502460479736, 1.5495477403913225, 1.538367169243949, 1.5270243372235979, 1.5156493527548653, 1.504007135118757, 1.4924044609069824, 1.4805667740958077, 1.468780619757516, 1.4570094517299108, 1.4450364112854004, 1.43315965788705, 1.4210942813328333, 1.4089140551430839, 1.396744898387364, 1.3845079285757882, 1.372574738093785, 1.3605571474347795, 1.3484996386936732, 1.3365315709795271], "val_accuracy": [0.04833333194255829, 0.06733333319425583, 0.08366666734218597, 0.10733333230018616, 0.1289999932050705, 0.14666666090488434, 0.16699999570846558, 0.18766666948795319, 0.20733332633972168, 0.2253333330154419, 0.24199999868869781, 0.25866666436195374, 0.27399998903274536, 0.28733333945274353, 0.29766666889190674, 0.3076666593551636, 0.31933334469795227, 0.32899999618530273, 0.335999995470047, 0.34299999475479126, 0.34966665506362915, 0.35633334517478943, 0.35899999737739563, 0.3643333315849304, 0.36800000071525574, 0.37400001287460327, 0.37833333015441895, 0.3813333213329315, 0.3840000033378601, 0.38866665959358215, 0.39399999380111694, 0.40033334493637085, 0.4046666622161865, 0.4076666533946991, 0.41100001335144043, 0.41233333945274353, 0.4156666696071625, 0.41966667771339417, 0.4230000078678131, 0.4286666810512543, 0.43299999833106995, 0.437333345413208, 0.4390000104904175, 0.44200000166893005, 0.4463333189487457, 0.44999998807907104, 0.4519999921321869, 0.4543333351612091, 0.4580000042915344, 0.4596666693687439, 0.4620000123977661, 0.4650000035762787, 0.4676666557788849, 0.46833333373069763, 0.47099998593330383, 0.4740000069141388, 0.4779999852180481, 0.47999998927116394, 0.48133334517478943, 0.4846666753292084, 0.4883333444595337, 0.4906666576862335, 0.49566665291786194, 0.4986666738986969, 0.5006666779518127, 0.5043333172798157, 0.5059999823570251, 0.5090000033378601, 0.512333333492279, 0.515999972820282, 0.5189999938011169, 0.5206666588783264, 0.5233333110809326, 0.5239999890327454, 0.5286666750907898, 0.531333327293396, 0.5350000262260437, 0.5400000214576721, 0.5423333048820496, 0.5429999828338623, 0.54666668176651, 0.5479999780654907, 0.5496666431427002, 0.5509999990463257, 0.5543333292007446, 0.5556666851043701, 0.5583333373069763, 0.5606666803359985, 0.5649999976158142, 0.5653333067893982, 0.5653333067893982, 0.5669999718666077, 0.5716666579246521, 0.5740000009536743, 0.5793333053588867, 0.5823333263397217, 0.5866666436195374, 0.5886666774749756, 0.5920000076293945, 0.5943333506584167]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [7, 1, 1, 7, 6, 1, 3, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 3, 5, 2, 3, 2, 0, 1, 1, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 1, 0, 1], [3, 2], [1, 4], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 5, 5, 2, 3, 0, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 0], [0, 0, 1, 1, 1], [1, 4], [7, 0, 7], [43], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 2, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 5, 5, 2, 3, 1, 12, 7, 5, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 2, 7, 8, 1, 2, 6, 3, 8, 2, 3, 0, 8, 3, 3, 0, 8, 2, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 5, 3, 3, 3, 0, 3, 2, 3, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 32, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 0, 1, 1], [1, 4], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [6, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 33, 33, 19, 14, 2, 5, 4, 2, 2, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), beta))))), tf.math.negative(grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, alpha), sigma)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [49, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1], [3, 0, 8], [1, 0], [43], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 5, 4, 3, 1, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1241831.147687171, 24493326.63267732, 114240818.25914675, 308652298.5497292, 674817526.2279751, 1231696042.5539558], "accuracy": [0.09602430462837219, 0.09813763201236725, 0.10394927859306335, 0.10011887550354004, 0.09959053993225098, 0.09747721254825592], "val_loss": [4845011.428571428, 38641214.85714286, 130283081.14285715, 308664219.4285714, 602679606.8571428, 1041224850.2857143], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1], [0, 0, 1, 1], [1, 5], [1, 0], [43], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [0, 0, 0, 3, 1, 1], [78, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 4, 3, 2, 1, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302313721773568, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 5, 3, 3, 3, 0, 3, 2, 3, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 32, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0], [0, 1, 1, 1], [5, 1], [1, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 9, 9, 4, 5, 0, 2, 1, 1, 0, 0, 5, 2, 3, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 5, 5, 3, 3, 3, 3, 5, 2, 3, 2, 0, 1, 1, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 0, 1, 1], [6, 1], [1, 0], [76], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 4, 5, 0, 5, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), grad), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), sigma)), tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.996331995126515, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1896711140871048, 0.10342095047235489, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6.288027354649135, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.08733333647251129, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 7, 6, 7, 6, 1, 6, 6, 3, 6, 1, 3, 2, 5, 3, 8, 3, 8, 2, 1, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 94, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 0, 1, 1], [5, 1], [1, 0], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 1, 1, 0, 1, 1, 4, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.subtract(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 1, 1, 1], [5, 1], [1, 0], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [2, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [65, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 2, 2, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301871017206142, 2.3023287377038164, 2.302988475198208, 2.306090039694235, 2.320652262063279, 2.3880699826521314], "accuracy": [0.10474177449941635, 0.10659094154834747, 0.10593052208423615, 0.10447761416435242, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9738714354378837, 1.9742879186357771, 1.9758435658046178, 1.9826391083853585, 2.0122299875531877, 2.1489599091666087], "val_accuracy": [0.09966666996479034, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 32, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 0], [0, 0, 1, 1], [9, 4], [1, 2], [43], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [6, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.347924781184988e+25, 41.28553437512738, 75.2075587181824, 109.15741861545179, 143.17213196477965, 177.1708183847855], "accuracy": [0.09377889335155487, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [23.386787959507533, 52.47146388462612, 81.57717459542411, 110.74377877371651, 139.8983372279576, 169.0254167829241], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 5, 3, 8, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 0, 5, 3, 3, 3, 2, 5, 3, 2, 3, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 1, 0], [0, 1, 1, 1], [6, 1], [1, 0], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 36, 36, 19, 17, 2, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), beta)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))), alpha), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 1, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 0, 5, 3, 3, 3, 3, 5, 2, 0, 2, 3, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 1, 0], [0, 0, 1, 1], [5, 1], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [8, 1, 0, 3, 1, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 5, 3, 3, 3, 0, 3, 2, 3, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [1, 8, 0, 5], [1, 0], [43], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 6, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, alpha))), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.square(sigma)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.925808493644806, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18914277851581573, 0.11174217611551285, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.966435296194894, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 1, 7, 6, 1, 6, 6, 3, 8, 2, 3, 2, 8, 3, 3, 0, 8, 2, 6, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 5, 3, 3, 3, 0, 3, 2, 3, 2, 0, 1, 3, 3, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0], [0, 0, 0, 1], [8, 4], [1, 0], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [47, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3197728903569788, 3.3242641985140864, 2.2366284487065133, 3.903214227285651, 2.6442290969481324, 2.321135602559805, 2.737648457804408, 14.079783823700819], "accuracy": [0.29243165254592896, 0.17197199165821075, 0.19019944965839386, 0.2603355050086975, 0.16721701622009277, 0.11491216719150543, 0.12019548565149307, 0.13881917297840118], "val_loss": [1.9695154598781042, 1.9637552670070104, 1.6109755720411028, 2.862858976636614, 2.0104619434901645, 1.9502452441624232, 2.718353135245187, 594.118181501116], "val_accuracy": [0.1003333330154419, 0.1223333328962326, 0.3880000114440918, 0.3163333237171173, 0.09799999743700027, 0.1316666603088379, 0.25333333015441895, 0.14433333277702332]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 1, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 0, 5, 3, 3, 3, 3, 5, 2, 0, 2, 3, 1, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [11, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 1, 0], [0, 0, 1, 1], [4, 2], [1, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [23, 9, 44]], "fitness": -0.08971428871154785, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.3002773518134667, 2.301202588597183, 2.3023807754637526, 2.3029861246133447, 2.3059964386258915, 2.3589490545172307, 2.937681064692628, 5.146832424179438, 10.58434392445123, 20.803920424893043], "accuracy": [0.09509972482919693, 0.09047681838274002, 0.08294808864593506, 0.09047681838274002, 0.08849557489156723, 0.1026284471154213, 0.10170386731624603, 0.09589222073554993, 0.09919429570436478, 0.09338264167308807], "val_loss": [1.9708808490208216, 1.9732236862182617, 1.9738564491271973, 1.9751315798078264, 1.9856510162353516, 2.1808044569832936, 3.392827102116176, 6.709877559116909, 13.76496968950544, 26.42228807721819], "val_accuracy": [0.08966666460037231, 0.06933332979679108, 0.09833333641290665, 0.09166666865348816, 0.14433333277702332, 0.10300000011920929, 0.09799999743700027, 0.10100000351667404, 0.09799999743700027, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [7, 7, 1, 7, 6, 1, 6, 6, 3, 6, 2, 3, 2, 3, 3, 3, 3, 8, 2, 0, 9, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 3, 5, 3, 3, 3, 3, 5, 2, 3, 2, 0, 1, 1, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [63, 15, 70, 94, 16, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 0, 1, 0], [0, 0, 1, 1], [2, 1], [1, 0], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [5, 1, 0, 3, 1, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [47, 9, 44]], "fitness": -0.07257142663002014, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.30173997434375, 2.3009881279519235, 2.3005126207543403, 2.299735077431079, 2.3015771188031824, 2.299561306533088, 2.299969456529951, 2.2999278329162234, 2.299904615116031, 2.2993204427700724, 2.299296434104183, 2.2999099274321537, 2.300660500011865, 2.299115599201592], "accuracy": [0.09060890227556229, 0.0940430611371994, 0.0952318087220192, 0.09417514503002167, 0.09589222073554993, 0.09642054885625839, 0.10381719470024109, 0.09787346422672272, 0.09760929644107819, 0.09879804402589798, 0.10606260597705841, 0.10447761416435242, 0.09140139818191528, 0.10196803510189056], "val_loss": [1.9702942030770438, 1.9698516981942313, 1.9698343958173479, 1.9698641640799386, 1.9698166166033064, 1.9699803761073522, 1.9698897089276994, 1.9697463171822684, 1.9697142328534807, 1.969829491206578, 1.9700380734034948, 1.9702978134155273, 1.9704750605991908, 1.9707367079598563], "val_accuracy": [0.04333333298563957, 0.05133333429694176, 0.05666666850447655, 0.06133333221077919, 0.0676666647195816, 0.070333331823349, 0.07466666400432587, 0.07766667008399963, 0.08033332973718643, 0.07666666805744171, 0.07800000160932541, 0.07533333450555801, 0.07699999958276749, 0.07500000298023224]}}]