[{"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 2, 4, 6, 4, 0, 1, 9, 0, 5, 2, 0, 1, 1, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.826285719871521, "mapping_values": [1, 1, 1, 0, 1, 1, 35, 35, 23, 12, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.negative(grad)))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.192391341372787, 1.8667410689259343, 1.4238195560391333, 1.0791854424766971, 0.9896169386409482, 0.9028265700994025, 0.7658779043421344, 0.8152413776348831, 0.7073194715545603, 0.6869376653126595, 0.6557324488306908, 0.6320339121822951, 0.6256916468736439, 0.5930758447238341, 0.5870445532774204, 0.5584973757529319, 0.5464134904781212, 0.5463649752653034, 0.5116780565604085, 0.5152303191097957, 0.5105846080687446, 0.48038478546989055, 0.47324033101410234, 0.47571664193617813, 0.46642656634748575, 0.4594616913965523, 0.43946709113743926, 0.4404925148854906, 0.4437956887504853, 0.4377236481529138], "accuracy": [0.2942807972431183, 0.37022849917411804, 0.488971084356308, 0.5812970399856567, 0.6275261044502258, 0.6483951807022095, 0.7102100253105164, 0.6831330060958862, 0.7309470176696777, 0.7401928305625916, 0.7511557340621948, 0.759080708026886, 0.7635715007781982, 0.774798572063446, 0.7862898111343384, 0.7917051911354065, 0.7956677079200745, 0.7931581139564514, 0.811649739742279, 0.8064984679222107, 0.8075551390647888, 0.8197067975997925, 0.8234050869941711, 0.8181217908859253, 0.8313300609588623, 0.830669641494751, 0.8355567455291748, 0.8391229510307312, 0.8383304476737976, 0.8354246616363525], "val_loss": [1.3604216916220528, 1.2651962212153844, 0.9909552165440151, 0.8725367443902152, 0.6951158727918353, 0.6209399700164795, 0.5981094837188721, 0.5829765285764422, 0.5473351648875645, 0.5445865052086967, 0.501325113432748, 0.4647412470408848, 0.4733924865722656, 0.4662856544767107, 0.4733307531901768, 0.4105865614754813, 0.44015094212123324, 0.3991025005068098, 0.4015241094997951, 0.4014560409954616, 0.3942249247006008, 0.4176717826298305, 0.37465781824929373, 0.40516150849206106, 0.35221071754183086, 0.3933772104127066, 0.3962242177554539, 0.3602956788880484, 0.36838928290775846, 0.3473983662469046], "val_accuracy": [0.38199999928474426, 0.4546666741371155, 0.5323333144187927, 0.6196666955947876, 0.6869999766349792, 0.7123333215713501, 0.7289999723434448, 0.7286666631698608, 0.7406666874885559, 0.7436666488647461, 0.7689999938011169, 0.7889999747276306, 0.7929999828338623, 0.7889999747276306, 0.7883333563804626, 0.8259999752044678, 0.7929999828338623, 0.828000009059906, 0.8203333616256714, 0.8203333616256714, 0.8263333439826965, 0.8066666722297668, 0.8403333425521851, 0.8193333148956299, 0.8513333201408386, 0.8246666789054871, 0.8266666531562805, 0.8423333168029785, 0.8416666388511658, 0.8506666421890259]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 6, 8, 6, 4, 0, 1, 9, 8, 5, 2, 0, 1, 2, 8, 8, 8, 9, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 68, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8251428604125977, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(grad, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.subtract(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad)))))), alpha), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.192404680578952, 1.8566954434744638, 1.4068978858299543, 1.189518095401174, 1.0203288301359064, 0.880297043705818, 0.814521849769501, 0.7608675617410239, 0.721826703005841, 0.6628650687216705, 0.6562017278034517, 0.6322083005012695, 0.6146930713443204, 0.5887248106069568, 0.5796341225062033, 0.5633496568187542, 0.5491399762652821, 0.5423927675967581, 0.5108627106110182, 0.5159641082071751, 0.504200416301078, 0.4903028875278397, 0.4792461457025452, 0.476582003106625, 0.4627449816212662, 0.45237857865430675, 0.43802108709617865, 0.42805905237630565, 0.45459058408834174, 0.4300993208706639], "accuracy": [0.29441288113594055, 0.37339848279953003, 0.4966318905353546, 0.5620129704475403, 0.6193369626998901, 0.6700568199157715, 0.6935675740242004, 0.7086250185966492, 0.7205125093460083, 0.7494386434555054, 0.7532690763473511, 0.7602694630622864, 0.7644960880279541, 0.778232753276825, 0.7889314293861389, 0.7872143983840942, 0.7938185334205627, 0.798309326171875, 0.8117818236351013, 0.8068947196006775, 0.8112534880638123, 0.8156121969223022, 0.8216879963874817, 0.8171972036361694, 0.8318583965301514, 0.8319904804229736, 0.8368775844573975, 0.8436138033866882, 0.8343679904937744, 0.8418967127799988], "val_loss": [1.360072476523263, 1.2814111028398787, 0.9746965680803571, 0.6775413581303188, 0.6594135590962001, 0.5941145249775478, 0.5909897089004517, 0.5821676083973476, 0.5121645927429199, 0.5428988252367292, 0.4978989703314645, 0.4659254380634853, 0.48325778756822857, 0.4834475517272949, 0.45154382501329693, 0.40498933621815275, 0.4575179474694388, 0.3970634256090437, 0.4037100757871355, 0.404628506728581, 0.3945544447217669, 0.4294542840548924, 0.3692055940628052, 0.39105163301740375, 0.3487344980239868, 0.380140449319567, 0.3873049872262137, 0.3727012702396938, 0.36165675946644377, 0.3665651593889509], "val_accuracy": [0.38100001215934753, 0.4300000071525574, 0.5266666412353516, 0.6993333101272583, 0.7013333439826965, 0.7353333234786987, 0.7350000143051147, 0.734666645526886, 0.762666642665863, 0.7429999709129333, 0.7766666412353516, 0.7860000133514404, 0.7826666831970215, 0.7850000262260437, 0.7976666688919067, 0.8243333101272583, 0.7979999780654907, 0.831333339214325, 0.8159999847412109, 0.8233333230018616, 0.8306666612625122, 0.8013333082199097, 0.8410000205039978, 0.8303333520889282, 0.856333315372467, 0.8320000171661377, 0.8316666483879089, 0.8356666564941406, 0.8413333296775818, 0.8303333520889282]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 1, 4, 4, 6, 4, 0, 3, 4, 2, 5, 2, 2, 1, 1, 4, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8237142562866211, "mapping_values": [1, 1, 1, 0, 1, 1, 35, 35, 20, 15, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(grad))), tf.math.multiply(tf.math.pow(tf.math.add(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.square(alpha))), tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))), tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), grad), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.192294359632282, 1.8626692776572293, 1.414076338260244, 1.1921574034317373, 0.9885276090577609, 0.8959746962808551, 0.7880191295421859, 0.7560691579127309, 0.7136289817451439, 0.6702270330675463, 0.6564968286598553, 0.634129596668196, 0.6289179066798596, 0.59579479550295, 0.5852905860855406, 0.5559102828082879, 0.5365851769405129, 0.5362704752883765, 0.5046871609187727, 0.5222598888917827, 0.5032990314602742, 0.47877886345389337, 0.47161431745405225, 0.4794594856017711, 0.46476736254601386, 0.4528656855329877, 0.43631532180893456, 0.44357320399426703, 0.4505369208035704, 0.4236179693791341], "accuracy": [0.2942807972431183, 0.372209757566452, 0.48289525508880615, 0.5486725568771362, 0.6223748326301575, 0.6633205413818359, 0.6999075412750244, 0.7086250185966492, 0.7224937081336975, 0.7442874312400818, 0.7523444890975952, 0.7618544697761536, 0.7613261342048645, 0.7729493975639343, 0.7862898111343384, 0.7932901978492737, 0.7976489067077637, 0.800818920135498, 0.8201030492782593, 0.8014793395996094, 0.8076872229576111, 0.8190463781356812, 0.8252542614936829, 0.8185180425643921, 0.8304054737091064, 0.8329150676727295, 0.8360850811004639, 0.8397833704948425, 0.8347642421722412, 0.8421608805656433], "val_loss": [1.3609659671783447, 1.2027460166386195, 0.9731377874101911, 0.8309661831174578, 0.6789472103118896, 0.6254257134028843, 0.625066978590829, 0.5480551038469587, 0.5175057819911412, 0.5233422517776489, 0.5400092942374093, 0.45890934126717703, 0.46448562826429096, 0.4766472748347691, 0.45059479985918316, 0.44216751200812204, 0.4187934568950108, 0.40963534797940937, 0.45386132172175814, 0.4003709554672241, 0.3815263424600874, 0.39489833797727314, 0.3858743224825178, 0.37865012884140015, 0.34629560368401663, 0.3921404310635158, 0.38392049074172974, 0.34650944811957224, 0.3563112275941031, 0.35574112619672504], "val_accuracy": [0.38100001215934753, 0.484333336353302, 0.6103333234786987, 0.6166666746139526, 0.7006666660308838, 0.718999981880188, 0.7023333311080933, 0.7506666779518127, 0.7676666378974915, 0.7586666941642761, 0.7563333511352539, 0.7929999828338623, 0.7986666560173035, 0.7856666445732117, 0.8086666464805603, 0.8059999942779541, 0.8223333358764648, 0.8220000267028809, 0.7823333144187927, 0.828000009059906, 0.8353333473205566, 0.8233333230018616, 0.8333333134651184, 0.8323333263397217, 0.8560000061988831, 0.8289999961853027, 0.8323333263397217, 0.8550000190734863, 0.8460000157356262, 0.8403333425521851]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 6, 8, 4, 4, 0, 1, 9, 8, 5, 2, 0, 1, 3, 8, 8, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 0, 0, 3, 1, 3, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8231428861618042, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), alpha)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1919326945507547, 1.8626542472568532, 1.331762451537297, 1.3291024175129231, 1.0317412177884362, 0.9264408203085195, 0.8055404805472625, 0.7670639825613585, 0.7266616731775813, 0.6733430459703736, 0.6490213433355625, 0.6435219091651714, 0.620106787178353, 0.5976440985960778, 0.5928379923927943, 0.560910468907042, 0.5426112994494581, 0.5479225746439967, 0.4961105185240928, 0.5229476227216779, 0.496599012897503, 0.47945104204605377, 0.47627497859729234, 0.48165953830878466, 0.4752050358912791, 0.450599616820298, 0.44143863491346935, 0.4369999335434427, 0.4444874292627034, 0.43809631229895546], "accuracy": [0.2942807972431183, 0.37128517031669617, 0.5038964748382568, 0.5192180871963501, 0.6164311170578003, 0.6408664584159851, 0.6872276067733765, 0.703209638595581, 0.7165499925613403, 0.7449478507041931, 0.7528728246688843, 0.752212405204773, 0.7630431652069092, 0.7738739848136902, 0.778232753276825, 0.7889314293861389, 0.7901201844215393, 0.7948752045631409, 0.822348415851593, 0.7985734939575195, 0.8140271902084351, 0.8215559124946594, 0.8206313848495483, 0.8191784620285034, 0.8297450542449951, 0.8322546482086182, 0.8327829837799072, 0.8397833704948425, 0.8381983637809753, 0.837537944316864], "val_loss": [1.361647265298026, 1.1926939146859306, 0.9877661636897496, 0.7531216144561768, 0.7867635318211147, 0.6211037295205253, 0.6132771968841553, 0.5513250657490322, 0.5151548726218087, 0.5258260284151349, 0.4911233697618757, 0.46053108147212435, 0.459554876599993, 0.4626039947782244, 0.46604875155857634, 0.4356401562690735, 0.42603895493916105, 0.40554021086011616, 0.4016239983694894, 0.3981915371758597, 0.3810738665716989, 0.4119728037289211, 0.38719098057065693, 0.38058479343141827, 0.3478679997580392, 0.38840796266283306, 0.3658520664487566, 0.3890573297228132, 0.3699371559279306, 0.3587875706808908], "val_accuracy": [0.38199999928474426, 0.5, 0.6003333330154419, 0.6899999976158142, 0.6186666488647461, 0.7350000143051147, 0.7243333458900452, 0.7546666860580444, 0.7649999856948853, 0.7576666474342346, 0.7726666927337646, 0.796999990940094, 0.7929999828338623, 0.7900000214576721, 0.7879999876022339, 0.812666654586792, 0.8130000233650208, 0.8240000009536743, 0.8299999833106995, 0.8363333344459534, 0.8339999914169312, 0.8119999766349792, 0.8346666693687439, 0.831333339214325, 0.8539999723434448, 0.8286666870117188, 0.8450000286102295, 0.8180000185966492, 0.8443333506584167, 0.8460000157356262]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 4, 9, 4, 4, 0, 1, 9, 6, 5, 2, 2, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.8117142915725708, "mapping_values": [1, 1, 1, 0, 1, 1, 28, 28, 18, 10, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad))))), grad))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1922960733268333, 1.8621704909842736, 1.4772718295980485, 1.229213939839193, 1.0135110192814711, 0.8824915035667515, 0.7991436297127348, 0.7659989136352735, 0.7232968362016039, 0.6818255220012516, 0.6545613610575999, 0.6380597042873661, 0.6185900847342792, 0.595900980102986, 0.5781441616926998, 0.5698192256269454, 0.5434390897795571, 0.5493165731681982, 0.49884139342456685, 0.5162719297938106, 0.5004340812687892, 0.4797529027037192, 0.4862233696124337, 0.4858039949611351], "accuracy": [0.2942807972431183, 0.3715493381023407, 0.4653282165527344, 0.5387663245201111, 0.6118082404136658, 0.6645092964172363, 0.7003037929534912, 0.7106062769889832, 0.7251353859901428, 0.7446836829185486, 0.7559106945991516, 0.7593448758125305, 0.7643640041351318, 0.7791573405265808, 0.7872143983840942, 0.7862898111343384, 0.7950072884559631, 0.7940827012062073, 0.8220842480659485, 0.8009510040283203, 0.8131026029586792, 0.8187822103500366, 0.8204993009567261, 0.8197067975997925], "val_loss": [1.3609814984457833, 1.216435159955706, 0.9767043931143624, 0.8451101609638759, 0.6771983078547886, 0.6016191584723336, 0.5799294710159302, 0.5868907655988421, 0.5802501099450248, 0.5495127780096871, 0.5064149413790021, 0.4597335713250296, 0.46328595706394743, 0.45395566735948834, 0.4586993626185826, 0.4331950289862497, 0.44352717058999197, 0.4203272376741682, 0.3843379616737366, 0.3960098113332476, 0.3890498961721148, 0.42853857789720806, 0.3981330990791321, 0.3876241615840367], "val_accuracy": [0.38066667318344116, 0.48133334517478943, 0.597000002861023, 0.6163333058357239, 0.6869999766349792, 0.7286666631698608, 0.7436666488647461, 0.7300000190734863, 0.7229999899864197, 0.7443333268165588, 0.7713333368301392, 0.7990000247955322, 0.7943333387374878, 0.7919999957084656, 0.7996666431427002, 0.809333324432373, 0.8053333163261414, 0.812666654586792, 0.8420000076293945, 0.8336666822433472, 0.8256666660308838, 0.8083333373069763, 0.8293333053588867, 0.8256666660308838]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 6, 4, 4, 6, 4, 5, 1, 8, 2, 5, 2, 0, 1, 1, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 3, 3, 1, 1, 3, 2, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [46, 49, 44, 92]], "fitness": -0.8091428279876709, "mapping_values": [1, 3, 3, 1, 2, 0, 16, 16, 8, 8, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), grad), tf.math.square(tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, alpha), alpha))), tf.math.add(beta, grad)))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.041670102642323, 1.5253107698759494, 1.1254961087231024, 0.9387408317891032, 0.8557884438855694, 0.7548681012926919, 0.6951891090088611, 0.6682009954084699, 0.6845973989258447, 0.6252695606873099, 0.6246841292591647, 0.5932338185014978, 0.5783708323703041, 0.5718339976302669, 0.5463745223847615, 0.546973874744974, 0.5287001957715133, 0.5078084746277517, 0.49837481509488196, 0.496147903736635, 0.4943087953208633, 0.46937506738718016, 0.45923270090475626, 0.48523800851898485, 0.4468170288744037, 0.44543894112558885, 0.42309071042707425, 0.4232835470488547, 0.44181147104382845, 0.4263346388654592, 0.3948917526453084, 0.38858362981561717, 0.40007984180806916, 0.3716631391304768, 0.40703366140821085, 0.37401582256378735, 0.3677381562865437, 0.3750790375500244], "accuracy": [0.31660282611846924, 0.46308282017707825, 0.5744287371635437, 0.6476026773452759, 0.6791704893112183, 0.715889573097229, 0.7378153204917908, 0.7446836829185486, 0.7440232634544373, 0.7582882046699524, 0.7613261342048645, 0.7703077793121338, 0.7781006693840027, 0.7815347909927368, 0.7971205711364746, 0.7895918488502502, 0.8005547523498535, 0.8083476424217224, 0.8133667707443237, 0.817989706993103, 0.8109893202781677, 0.8259146809577942, 0.8294808864593506, 0.8175934553146362, 0.8363492488861084, 0.8300092220306396, 0.8462554216384888, 0.8441421389579773, 0.8354246616363525, 0.8405758738517761, 0.8551049828529358, 0.8549728989601135, 0.8533879518508911, 0.8648791313171387, 0.8491612672805786, 0.8631620407104492, 0.8602562546730042, 0.8618412613868713], "val_loss": [1.3432117530277796, 0.9825750419071743, 0.6878702640533447, 0.6733638729367938, 0.6358387299946376, 0.5232231787272862, 0.5284026520592826, 0.6276213611875262, 0.4668358053479876, 0.5541999169758388, 0.45542878764016287, 0.4357137680053711, 0.4569820165634155, 0.4507815156664167, 0.44003355503082275, 0.4529482807431902, 0.40556477648871286, 0.40555410725729807, 0.40679047788892475, 0.4074330840791975, 0.3735807367733547, 0.38485011884144377, 0.40392489092690603, 0.3920453871999468, 0.3398015413965498, 0.3591055529458182, 0.3433250870023455, 0.33792926583971294, 0.3676103949546814, 0.3442949652671814, 0.3809852600097656, 0.3267665505409241, 0.3201711859021868, 0.3428081103733608, 0.3378176007952009, 0.3498123969350542, 0.3394159844943455, 0.3296100582395281], "val_accuracy": [0.42766666412353516, 0.5559999942779541, 0.722000002861023, 0.6813333630561829, 0.7116666436195374, 0.7590000033378601, 0.7570000290870667, 0.7363333106040955, 0.7879999876022339, 0.7426666617393494, 0.7893333435058594, 0.8096666932106018, 0.7953333258628845, 0.7953333258628845, 0.8106666803359985, 0.7856666445732117, 0.8169999718666077, 0.8216666579246521, 0.8133333325386047, 0.8056666851043701, 0.8363333344459534, 0.8196666836738586, 0.8186666369438171, 0.8263333439826965, 0.8553333282470703, 0.8516666889190674, 0.8560000061988831, 0.8586666584014893, 0.8393333554267883, 0.8489999771118164, 0.8336666822433472, 0.8546666502952576, 0.8663333058357239, 0.8503333330154419, 0.8560000061988831, 0.8410000205039978, 0.8613333106040955, 0.8656666874885559]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [62, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 4, 3, 4, 4, 0, 1, 0, 8, 5, 2, 4, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 2, 3, 1, 3, 1, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [36, 49, 44, 92]], "fitness": -0.7751428484916687, "mapping_values": [1, 1, 1, 0, 1, 1, 33, 33, 20, 13, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.negative(grad), tf.math.sqrt(tf.math.add(beta, grad)))), beta)), tf.math.add(beta, tf.math.square(grad))))), tf.math.add(beta, alpha)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(grad)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.244365315191057, 1.9490589378941658, 1.4052770319017736, 1.1243336997830777, 0.9824659328072723, 0.9409085048140945, 0.8543431617407168, 0.8255255318998015, 0.792343696535791, 0.7737093885199048, 0.7405448765834057, 0.7270268576020152, 0.7202920546983259, 0.6971949300572636, 0.6712148087907382, 0.6665701838831435, 0.6706228317633092, 0.6513637401377127, 0.6425670879218777, 0.6351671184231938, 0.6418727918496898, 0.6281463155468079, 0.6166396475329516, 0.6046053771298119], "accuracy": [0.22137102484703064, 0.4159291982650757, 0.5387663245201111, 0.6082419753074646, 0.6516972780227661, 0.6701889038085938, 0.6952846646308899, 0.7020208835601807, 0.7147008180618286, 0.718399167060852, 0.7322678565979004, 0.7323999404907227, 0.7314753532409668, 0.7475894689559937, 0.7535332441329956, 0.7530049085617065, 0.7485140562057495, 0.7605336308479309, 0.7655527591705322, 0.7644960880279541, 0.7670056819915771, 0.7687227725982666, 0.7761194109916687, 0.7695152759552002], "val_loss": [1.8094346863882882, 1.3070106165749686, 0.8960558346339634, 0.750201804297311, 0.6826532908848354, 0.6508538722991943, 0.6491826091493879, 0.5858934606824603, 0.5884655714035034, 0.5606774262019566, 0.5382580075945173, 0.5406444583620343, 0.5185469048363822, 0.5282148974282401, 0.5054524455751691, 0.5115249156951904, 0.4901731865746634, 0.500036461012704, 0.4842698233468192, 0.5012267487389701, 0.49597947938101633, 0.46626748357500347, 0.465755684035165, 0.47364660671779085], "val_accuracy": [0.45766666531562805, 0.5846666693687439, 0.6650000214576721, 0.7009999752044678, 0.7176666855812073, 0.7276666760444641, 0.7239999771118164, 0.7429999709129333, 0.7366666793823242, 0.7576666474342346, 0.7716666460037231, 0.7596666812896729, 0.7730000019073486, 0.762666642665863, 0.781000018119812, 0.7680000066757202, 0.7796666622161865, 0.7746666669845581, 0.7943333387374878, 0.7599999904632568, 0.784333348274231, 0.7933333516120911, 0.7940000295639038, 0.7860000133514404]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [62, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 4, 9, 4, 4, 0, 1, 9, 8, 4, 2, 2, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 47, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.7454285621643066, "mapping_values": [1, 1, 1, 0, 1, 1, 30, 30, 19, 11, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad))), tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.pow(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2282945076236165, 1.8124594658026685, 1.332587466248117, 1.0645996272020715, 0.9624849350508162, 0.8860817155062074, 0.8008037234073806, 0.7688149730794859, 0.7140070161547376, 0.6877902609529496, 0.6963986216393192, 0.654941631330239, 0.6553107110689723], "accuracy": [0.27763834595680237, 0.4143442213535309, 0.5238409638404846, 0.6144498586654663, 0.6516972780227661, 0.6745476126670837, 0.7000396251678467, 0.7065116763114929, 0.7310791015625, 0.7470611333847046, 0.7371549606323242, 0.7572315335273743, 0.7532690763473511], "val_loss": [1.5595865930829729, 1.2141859872000558, 0.8691498211451939, 1.0195897306714738, 0.6842333929879325, 0.6051253591264997, 0.5877086435045514, 0.5765851395470756, 0.5688373872212001, 0.6107720136642456, 0.5903734309332711, 0.5491383075714111, 0.563252466065543], "val_accuracy": [0.4033333361148834, 0.4959999918937683, 0.640666663646698, 0.5456666946411133, 0.6926666498184204, 0.7310000061988831, 0.7106666564941406, 0.749666690826416, 0.7276666760444641, 0.6949999928474426, 0.7233333587646484, 0.7400000095367432, 0.7379999756813049]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 3, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 2, 4, 5, 4, 4, 0, 3, 9, 8, 5, 2, 0, 3, 2, 8, 0, 5, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 1, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.11342857033014297, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3007933865165384, 2.3025220034381007, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9735680307660783, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10966666787862778, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 5, 4, 6, 4, 0, 1, 9, 2, 2, 2, 0, 1, 5, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 2, 3, 3, 0, 3, 0, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 2, 0, 1, 1, 0, 1, 0, 3], [70, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 36, 36, 24, 12, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 4, 4, 6, 6, 0, 1, 4, 8, 5, 2, 3, 1, 9, 2, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 2, 1, 3, 3, 2, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [83, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [0, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 33, 33, 20, 13, 4, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), tf.math.subtract(tf.math.pow(tf.math.sqrt(grad), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), beta)))))))))))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026502978894627, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 6, 8, 4, 4, 0, 0, 9, 8, 5, 2, 0, 1, 3, 8, 8, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 1, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 91, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 14, 14, 9, 5, 1, 3, 2, 1, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.negative(alpha)))))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [332.281890355459, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.108440101146698, 0.10342095047235489, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [194301998811.42856, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 8, 4, 6, 4, 0, 1, 9, 1, 0, 2, 6, 1, 1, 8, 0, 8, 4, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 3, 3, 1, 2, 3, 3, 0, 3, 0, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 41, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [0, 2], [94], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 2, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 3, 2, 1, 1, 1, 3, 1, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [12, 72, 16, 9, 57, 39, 26, 75], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 2, 4, 6, 4, 0, 6, 9, 0, 5, 2, 0, 1, 1, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [68, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 36, 36, 24, 12, 2, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.negative(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.negative(grad)))), tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.add(beta, grad))))))))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(sigma, tf.math.pow(beta, tf.math.subtract(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 1, 4, 4, 6, 4, 5, 0, 4, 8, 5, 2, 0, 1, 6, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 3, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 1, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [11, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 19, 19, 11, 8, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(sigma, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08677849918603897, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 4, 0, 4, 4, 0, 1, 4, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 3, 0, 0, 0, 1, 3, 2, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [67, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 18, 11, 4, 3, 2, 1, 1, 0, 3, 1, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), tf.math.subtract(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))))), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 2, 4, 6, 4, 0, 1, 6, 0, 5, 2, 0, 1, 1, 8, 0, 8, 6, 8, 8, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 2, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [50, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 5, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [41, 49, 44, 92]], "fitness": -0.0714285746216774, "mapping_values": [1, 4, 4, 2, 2, 1, 36, 36, 23, 13, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(grad))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(sigma), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302397250877222, 2.3023927947391907, 2.3009335150760886, 2.302239828987711, 2.300323637107171, 2.3006806891623617, 2.3004288121992964, 2.300537345400261, 2.300523198968809, 2.3023884001031387, 2.29990552785201, 2.3001619067410624, 2.299121009612269, 2.2998154176901737, 2.3003353369691037, 2.300553375373128, 2.302051230412842, 2.300929615258572, 2.2988531009128397, 2.299961827355857, 2.301220829082817, 2.3001091444670263, 2.300587465608471, 2.3002896032092783, 2.300353912361829, 2.301458572431279, 2.3008693499635036, 2.299636074958492, 2.2987694726439356, 2.2996088431543127, 2.300150837833383, 2.299940470234593, 2.299419528630904, 2.300330350112764, 2.299928389992523, 2.301043554618925, 2.299981768325556, 2.3000243860480807, 2.2987797669352887, 2.3002632773075247, 2.300023587939447, 2.2995655669543753, 2.299199508527928, 2.3001666486916714, 2.2988473042646937, 2.2995030242595944, 2.300405353335279, 2.299819875623194, 2.2992541529577735, 2.300107694462605, 2.299616696639005, 2.2992086131511944, 2.2992981119461975, 2.299561466192604, 2.300203459185065, 2.2999068046242823, 2.298524020354604, 2.3000455152687693, 2.2984367884413093, 2.29910203129183, 2.2989205236148997, 2.2995309414345244, 2.299550280957064, 2.298624382987707], "accuracy": [0.09338264167308807, 0.08809932321310043, 0.09325055778026581, 0.09087307006120682, 0.09338264167308807, 0.09549596905708313, 0.09760929644107819, 0.09140139818191528, 0.09509972482919693, 0.0882314071059227, 0.09760929644107819, 0.09549596905708313, 0.09879804402589798, 0.09708096832036972, 0.10276053100824356, 0.10342095047235489, 0.09826971590518951, 0.09417514503002167, 0.09589222073554993, 0.09747721254825592, 0.09800554811954498, 0.09813763201236725, 0.10117553919553757, 0.09853387624025345, 0.09430722147226334, 0.0940430611371994, 0.09351472556591034, 0.09747721254825592, 0.10236428678035736, 0.09866596013307571, 0.0956280529499054, 0.1002509593963623, 0.10738343745470047, 0.09549596905708313, 0.09272222965955734, 0.10011887550354004, 0.09866596013307571, 0.09787346422672272, 0.09879804402589798, 0.1018359512090683, 0.09008057415485382, 0.10236428678035736, 0.10368511080741882, 0.10117553919553757, 0.09919429570436478, 0.09879804402589798, 0.09377889335155487, 0.10117553919553757, 0.09972262382507324, 0.09536388516426086, 0.09549596905708313, 0.1002509593963623, 0.09985470771789551, 0.10170386731624603, 0.1014397069811821, 0.10117553919553757, 0.1002509593963623, 0.10447761416435242, 0.09945846349000931, 0.1006472036242485, 0.1002509593963623, 0.09642054885625839, 0.09787346422672272, 0.10077928751707077], "val_loss": [1.9708444050380163, 1.9707255363464355, 1.9706014905657088, 1.9704499244689941, 1.9703704970223563, 1.9702790805271693, 1.9702319417681013, 1.970151765005929, 1.9700744492667062, 1.969982283455985, 1.9699102129255022, 1.969862937927246, 1.9698591232299805, 1.9698237010410853, 1.9697572844369071, 1.9697290829249792, 1.969693388257708, 1.9696836471557617, 1.9696919577462333, 1.969702993120466, 1.9696993827819824, 1.9696969304765974, 1.9697013582502092, 1.9697024481637138, 1.969696317400251, 1.9696994509015764, 1.969702856881278, 1.9697072165352958, 1.9697130067007882, 1.9697307859148299, 1.9697468621390206, 1.9697633470807756, 1.9697843960353307, 1.9697881426130022, 1.969794477735247, 1.9697868483407157, 1.9698034014020647, 1.9698051043919154, 1.96981566292899, 1.9698007447378976, 1.9697892325265067, 1.9697816031319755, 1.9697861671447754, 1.9697844641549247, 1.9697895050048828, 1.969794409615653, 1.969792297908238, 1.9697884832109724, 1.9697648457118444, 1.9697464534214564, 1.9697452272687639, 1.9697373935154505, 1.9697276524135046, 1.9697188649858748, 1.9697210448128837, 1.9697059903826033, 1.969705036708287, 1.9696952956063407, 1.9696978160313197, 1.9697042192731584, 1.9697257450648717, 1.9697345324925013, 1.9697465896606445, 1.9697747911725725], "val_accuracy": [0.036666665226221085, 0.03799999877810478, 0.03999999910593033, 0.0416666679084301, 0.04333333298563957, 0.04399999976158142, 0.04399999976158142, 0.04466666653752327, 0.04533333331346512, 0.04633333161473274, 0.04866666719317436, 0.04899999871850014, 0.04866666719317436, 0.05000000074505806, 0.050999999046325684, 0.05133333429694176, 0.0533333346247673, 0.05366666615009308, 0.054999999701976776, 0.05533333495259285, 0.05666666850447655, 0.05700000002980232, 0.05833333358168602, 0.057999998331069946, 0.059333331882953644, 0.05966666713356972, 0.05999999865889549, 0.061666667461395264, 0.06333333253860474, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06266666948795319, 0.06366666406393051, 0.06466666609048843, 0.06533333659172058, 0.0663333311676979, 0.0663333311676979, 0.06700000166893005, 0.06800000369548798, 0.06933332979679108, 0.0689999982714653, 0.07000000029802322, 0.07066666334867477, 0.07100000232458115, 0.0716666653752327, 0.07199999690055847, 0.07233333587646484, 0.07333333045244217, 0.07400000095367432, 0.07466666400432587, 0.07400000095367432, 0.07433333247900009, 0.07533333450555801, 0.07500000298023224, 0.07533333450555801, 0.07566666603088379, 0.07566666603088379, 0.07633333653211594, 0.07599999755620956, 0.07566666603088379, 0.07599999755620956, 0.07633333653211594, 0.07533333450555801]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 4, 4, 6, 4, 0, 3, 1, 8, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 1, 3, 1, 2, 3, 3, 0, 3, 0, 0, 3, 1, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 83, 31, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302471890882211, 2.302653403062358, 2.301349573068615, 2.3029073014975445, 2.3010484231949606, 2.3015427445502503], "accuracy": [0.09325055778026581, 0.08796724677085876, 0.09285431355237961, 0.08928807079792023, 0.09259014576673508, 0.09417514503002167], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 1, 6, 8, 3, 4, 0, 1, 9, 8, 2, 2, 0, 5, 3, 8, 8, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 0, 3, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [94, 86, 31, 93, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 22, 22, 14, 8, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302471890882211, 2.302653403062358, 2.301349573068615, 2.3029073014975445, 2.3010484231949606, 2.3015427445502503], "accuracy": [0.09325055778026581, 0.08796724677085876, 0.09285431355237961, 0.08928807079792023, 0.09259014576673508, 0.09417514503002167], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [1, 2, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [8, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 4, 9, 1, 2, 0, 1, 9, 8, 5, 2, 2, 1, 2, 8, 0, 8, 4, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 0, 3, 0, 0, 1, 3, 2, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [40, 83, 43, 25, 25, 62, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [7, 8, 1, 3], [4, 2], [94], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [8, 0, 9, 3, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 2, 0, 1, 1, 0, 1, 0, 3], [47, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 3, 3, 1, 2, 0, 35, 35, 23, 12, 6, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))))), tf.math.square(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.sqrt(tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.negative(alpha))", "other_info": {"loss": [2.302471890882211, 2.302653403062358, 2.301349573068615, 2.3029073014975445, 2.3010484231949606, 2.3015427445502503], "accuracy": [0.09325055778026581, 0.08796724677085876, 0.09285431355237961, 0.08928807079792023, 0.09259014576673508, 0.09417514503002167], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]