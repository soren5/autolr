[{"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 2, 3, 4, 0, 3, 4, 2, 2, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 5, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [18, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [66], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.8299999833106995, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3520235807479035, 2.1835384350316778, 2.1531231065767003, 1.9179101967147123, 2.103154590116941, 1.2268739074149766, 0.9843534702527886, 0.8488102806652101, 0.816656868935828, 0.7502314440720054, 0.7377792434323308, 0.6911841215254089, 0.6533611670949314, 0.6274580308915823, 0.6076499854474413, 0.5985582885237072, 0.5852506460924316, 0.586603456515961, 0.5762766459756256, 0.5436289041128298, 0.5436842138142776, 0.5456120944758448, 0.5169533519358478, 0.5217565268321422, 0.5085706826741779, 0.4662233078012125, 0.5073732446292136, 0.453896052687632, 0.4954710041511454, 0.4892769617419343, 0.4535033609321986], "accuracy": [0.21978603303432465, 0.2347113937139511, 0.2514859437942505, 0.3661339282989502, 0.3440760672092438, 0.559899628162384, 0.6425835490226746, 0.6906617283821106, 0.700700044631958, 0.7148329019546509, 0.7235503792762756, 0.7376832365989685, 0.7494386434555054, 0.7724210619926453, 0.7725531458854675, 0.7751948237419128, 0.7823272943496704, 0.7808743715286255, 0.7829877138137817, 0.7946110367774963, 0.7997622489929199, 0.7972526550292969, 0.8086118102073669, 0.8021397590637207, 0.8112534880638123, 0.8274996876716614, 0.8070268034934998, 0.8278959393501282, 0.8137630224227905, 0.8127063512802124, 0.8277638554573059], "val_loss": [1.8469905853271484, 1.9054388999938965, 1.8096132278442383, 1.7923062188284737, 1.0640086787087577, 0.7943809713636126, 0.60374345098223, 0.5596570457730975, 0.5215749400002616, 0.5629410743713379, 0.4983170543398176, 0.5200701441083636, 0.4671545369284494, 0.4950805391584124, 0.44768212522779194, 0.4924720525741577, 0.4545572314943586, 0.4459863134792873, 0.47656757490975515, 0.46619016783578054, 0.4235599296433585, 0.4106379747390747, 0.43431815930775236, 0.4280125754220145, 0.3766773172787258, 0.36967045068740845, 0.3809195416314261, 0.37696967806134907, 0.38661336047308786, 0.37733193806239534, 0.3783105867249625], "val_accuracy": [0.3166666626930237, 0.3323333263397217, 0.3543333411216736, 0.3396666646003723, 0.581333339214325, 0.6173333525657654, 0.737333357334137, 0.7453333139419556, 0.7736666798591614, 0.7403333187103271, 0.7636666893959045, 0.7616666555404663, 0.7879999876022339, 0.7706666588783264, 0.7950000166893005, 0.7710000276565552, 0.8006666898727417, 0.7933333516120911, 0.7853333353996277, 0.7893333435058594, 0.8149999976158142, 0.8199999928474426, 0.8056666851043701, 0.8096666932106018, 0.8306666612625122, 0.8453333377838135, 0.8276666402816772, 0.8433333039283752, 0.8389999866485596, 0.8360000252723694, 0.8386666774749756]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 0, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.8165714144706726, "mapping_values": [1, 1, 1, 0, 1, 0, 31, 31, 18, 13, 2, 2, 2, 1, 1, 1, 4, 3, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.negative(alpha), alpha), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), grad))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3520276134260705, 2.181133158974376, 2.168294501956491, 2.1348580617190445, 2.027754299849441, 1.367541205613778, 1.0521882470604167, 0.825253175116171, 0.9249411408124331, 0.7361968046307894, 0.7094548393265762, 0.6734531761128999, 0.6522636615431714, 0.6010555062925717, 0.6092354027098511, 0.5894364941121722, 0.5908367311036535, 0.5689674241982746, 0.56736627478153, 0.5510472950524721, 0.583500696526007, 0.5350227213302671, 0.5259302224166295, 0.517599803526577, 0.5112389275906754, 0.4897713519287399, 0.5052430650868578, 0.4754584709792766, 0.49814313994170717, 0.4980764190487149, 0.4564390960205437, 0.4556190421269192, 0.4517362432992532, 0.43832730589573016, 0.45437544728345747, 0.4447458655275862, 0.4399383756754153], "accuracy": [0.21978603303432465, 0.23484347760677338, 0.23695680499076843, 0.2518821954727173, 0.30207371711730957, 0.5311055183410645, 0.6326773166656494, 0.700700044631958, 0.6645092964172363, 0.7214370369911194, 0.7339849472045898, 0.7424382567405701, 0.7537974119186401, 0.7740060687065125, 0.7648923397064209, 0.77677983045578, 0.7773081660270691, 0.783119797706604, 0.7828556299209595, 0.7917051911354065, 0.7840443849563599, 0.8010830879211426, 0.807158887386322, 0.804649293422699, 0.8025360107421875, 0.816008448600769, 0.8087438941001892, 0.8187822103500366, 0.8120459914207458, 0.8148196935653687, 0.8277638554573059, 0.8323867321014404, 0.8274996876716614, 0.8330471515655518, 0.8363492488861084, 0.8345000743865967, 0.8380662798881531], "val_loss": [1.8467938559395927, 1.9068260192871094, 1.912956714630127, 1.8969474520002092, 1.2679139886583601, 0.8138231209346226, 0.6590549945831299, 0.7597162042345319, 0.5738531861986432, 0.4964235510144915, 0.5991131407873971, 0.5536872829709735, 0.46743418489183697, 0.4888262578419277, 0.46177804470062256, 0.496377774647304, 0.45073393412998747, 0.4616279772349766, 0.47843585695539204, 0.5971663509096418, 0.43937742710113525, 0.4122747778892517, 0.43074306419917513, 0.4287107672010149, 0.37629088333674837, 0.381798471723284, 0.42652225494384766, 0.40278094155447824, 0.3870833090373448, 0.37877975191388813, 0.3836563910756792, 0.37436353308813913, 0.3752151642526899, 0.39218515157699585, 0.3787008013044085, 0.39719133717673166, 0.37493978227887836], "val_accuracy": [0.3179999887943268, 0.3396666646003723, 0.2083333283662796, 0.28200000524520874, 0.41733333468437195, 0.6553333401679993, 0.7229999899864197, 0.628333330154419, 0.7363333106040955, 0.7723333239555359, 0.731333315372467, 0.7419999837875366, 0.7976666688919067, 0.7766666412353516, 0.800000011920929, 0.7559999823570251, 0.8033333420753479, 0.7950000166893005, 0.7613333463668823, 0.7426666617393494, 0.8006666898727417, 0.8169999718666077, 0.8050000071525574, 0.8069999814033508, 0.8363333344459534, 0.8353333473205566, 0.7996666431427002, 0.8176666498184204, 0.8289999961853027, 0.8373333215713501, 0.8349999785423279, 0.8420000076293945, 0.8343333601951599, 0.8303333520889282, 0.831333339214325, 0.8236666917800903, 0.8296666741371155]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 9, 2, 2, 4, 0, 3, 4, 2, 2, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 3, 0, 3, 1, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.805142879486084, "mapping_values": [1, 1, 1, 0, 1, 0, 39, 39, 23, 16, 4, 2, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))), grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, grad), alpha)), tf.math.add(beta, grad)), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad))))), grad)), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.351969022005147, 2.180973296404168, 2.162625693594696, 2.078102689472093, 2.2788281563864787, 2.1069479950698393, 1.78666141087967, 1.4743507453526457, 1.1317688819518446, 0.9429648501635889, 0.824918802529908, 0.7833863789804418, 0.7162179978547898, 0.6894255901812688, 0.6734459918046971, 0.6514884730324438, 0.6363525043121497, 0.5984980593488485, 0.6114188940958687, 0.6065870441103719, 0.5783842869753442, 0.5751098477136599, 0.5705109953549654, 0.5683514926931437, 0.5432646469023753, 0.5176120703608652, 0.5403593949055423, 0.5050673632495171, 0.501384536481694, 0.537159071335026, 0.47675144525960517, 0.5017989750165729, 0.46971919908657084, 0.4786978950983561, 0.4787719587624081, 0.4763663606306093, 0.4537546946120347, 0.4496639955116222, 0.44473230551419995, 0.4182181415454256, 0.4578198522837123, 0.4248976643689163, 0.4212764502910024, 0.44215895899408736, 0.4247586190692658, 0.4179681536268328, 0.40169900617957227, 0.3999468175616357, 0.3941697949833165, 0.4119762004114586, 0.38408213481454645, 0.3956141179744137, 0.38682628921813117, 0.3665262474171033], "accuracy": [0.21965394914150238, 0.23154141008853912, 0.24897634983062744, 0.25980716943740845, 0.16642451286315918, 0.26535463333129883, 0.3821159601211548, 0.5003302097320557, 0.5779950022697449, 0.6365077495574951, 0.6905296444892883, 0.7036058902740479, 0.7228899598121643, 0.7317395210266113, 0.7415136694908142, 0.7553823590278625, 0.7535332441329956, 0.7716285586357117, 0.7680623531341553, 0.7701756954193115, 0.7825914621353149, 0.7819310426712036, 0.7874785661697388, 0.7895918488502502, 0.7903843522071838, 0.8018755912780762, 0.7923656105995178, 0.8108572363853455, 0.8070268034934998, 0.7984414100646973, 0.8232730031013489, 0.8128384351730347, 0.8227446675300598, 0.8173292875289917, 0.8248580098152161, 0.819442629814148, 0.8315942287445068, 0.8317263126373291, 0.832650899887085, 0.8426892161369324, 0.8260467648506165, 0.8441421389579773, 0.8469158411026001, 0.8327829837799072, 0.8432175517082214, 0.8430854678153992, 0.8498216867446899, 0.8515387773513794, 0.8537842035293579, 0.8461233377456665, 0.852331280708313, 0.8540483713150024, 0.8527275323867798, 0.8625016212463379], "val_loss": [1.8456663404192244, 1.9053943497794015, 1.851490088871547, 1.3320297173091344, 1.9549673625401087, 1.507897240774972, 1.2433202947889055, 1.216832229069301, 0.7700598921094622, 0.6965305464608329, 0.6685667889458793, 0.543630838394165, 0.5493476390838623, 0.567364113671439, 0.49779118810381207, 0.4430845890726362, 0.4749281236103603, 0.45896010739462717, 0.5324441535132272, 0.5085596527372088, 0.43027942521231516, 0.42507960966655184, 0.435364374092647, 0.4332831842558725, 0.39880058595112394, 0.4041119132723127, 0.4323564256940569, 0.41642982619149344, 0.4139036791665213, 0.37943526676722933, 0.3879794819014413, 0.3958804947989328, 0.4161965421267918, 0.3825750861849104, 0.3858694008418492, 0.3920526249068124, 0.3907797081129892, 0.38931909629276823, 0.36712781872068134, 0.3776273727416992, 0.3712765233857291, 0.36342897585460116, 0.41500312089920044, 0.3445124796458653, 0.37368522371564594, 0.3703673141343253, 0.3594428982053484, 0.37301628078733173, 0.3530178495815822, 0.3595971550260271, 0.36409500667027067, 0.3369988373347691, 0.3541015556880406, 0.3458083527428763], "val_accuracy": [0.3149999976158142, 0.32499998807907104, 0.2213333398103714, 0.4569999873638153, 0.17000000178813934, 0.453000009059906, 0.46299999952316284, 0.4676666557788849, 0.640666663646698, 0.6819999814033508, 0.7003333568572998, 0.7350000143051147, 0.7509999871253967, 0.7580000162124634, 0.7703333497047424, 0.8046666383743286, 0.781333327293396, 0.8053333163261414, 0.7559999823570251, 0.7639999985694885, 0.8136666417121887, 0.8116666674613953, 0.8046666383743286, 0.79666668176651, 0.8193333148956299, 0.8266666531562805, 0.8003333210945129, 0.8130000233650208, 0.8176666498184204, 0.8316666483879089, 0.8339999914169312, 0.8259999752044678, 0.8006666898727417, 0.8376666903495789, 0.8316666483879089, 0.8246666789054871, 0.8353333473205566, 0.8323333263397217, 0.8403333425521851, 0.8306666612625122, 0.840666651725769, 0.8413333296775818, 0.8270000219345093, 0.8506666421890259, 0.8423333168029785, 0.8399999737739563, 0.8396666646003723, 0.8349999785423279, 0.8539999723434448, 0.8373333215713501, 0.8410000205039978, 0.8533333539962769, 0.8486666679382324, 0.8533333539962769]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 8, 2, 3, 4, 0, 3, 4, 2, 2, 2, 2, 6, 8, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 2, 3, 3, 1, 3, 3, 3, 1, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [35, 22, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [3, 8, 1, 3], [0, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.805142879486084, "mapping_values": [1, 1, 1, 0, 1, 0, 31, 31, 17, 14, 2, 3, 2, 1, 1, 1, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(grad, alpha)), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)), grad)), alpha)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), grad)))), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.352020420024833, 2.183254662411576, 2.1615071639314287, 2.085892982581162, 2.1076659899283205, 2.1804748872299204, 1.854766318275629, 1.9798950268970017, 1.3073257465309644, 1.201798076186245, 1.0503602999784942, 0.9566862614021608, 0.9035653430378559, 0.8311088490700284, 0.7524282532109245, 0.7576238349633146, 0.6926836815051682, 0.6802292617871667, 0.665984197669671, 0.6426110716701231, 0.6062855650216298, 0.6076359907555117, 0.5954116481311915, 0.5520134858404246, 0.572007711127985, 0.5608979109381924, 0.5448941245070853, 0.5268159753547889, 0.5346979493706564, 0.5365125373913202, 0.5194349486822182, 0.4818744663871936, 0.5034524567485281, 0.4821785530866397, 0.48128653148524025, 0.49700516789045474, 0.46971032072634605, 0.4545282426172984, 0.4556241494876172, 0.4563466921938787, 0.47557176269513113, 0.43570017254095916, 0.4455417149401675, 0.4334966062263428, 0.4348951519921219, 0.44777991312401344, 0.4305433024622902, 0.39934688841567584, 0.4052797229755131, 0.4432572746840545, 0.3939023212025493, 0.39560953950160815], "accuracy": [0.21978603303432465, 0.23418307304382324, 0.23986263573169708, 0.2996962070465088, 0.30445119738578796, 0.24607053399085999, 0.36983224749565125, 0.29243165254592896, 0.5362567901611328, 0.5736362338066101, 0.6123365759849548, 0.6494518518447876, 0.672698438167572, 0.6808875799179077, 0.7141724824905396, 0.7166820764541626, 0.7345132827758789, 0.7363624572753906, 0.7469290494918823, 0.7581561207771301, 0.7711002230644226, 0.7696473598480225, 0.7745344042778015, 0.7928939461708069, 0.7795535326004028, 0.7935543656349182, 0.7967243194580078, 0.8047813773155212, 0.800818920135498, 0.8000264167785645, 0.8041210174560547, 0.8187822103500366, 0.8103289008140564, 0.8203672170639038, 0.8165367841720581, 0.8157442808151245, 0.8252542614936829, 0.8329150676727295, 0.8294808864593506, 0.8301413059234619, 0.8140271902084351, 0.8391229510307312, 0.8333113193511963, 0.8370096683502197, 0.8350284099578857, 0.8281601071357727, 0.8400475382804871, 0.8508783578872681, 0.8486329317092896, 0.8339717388153076, 0.8495575189590454, 0.8551049828529358], "val_loss": [1.8475337028503418, 1.9041128158569336, 1.8949296815054757, 1.896021774836949, 1.8532049996512276, 1.9439024925231934, 1.6275532926831926, 1.3065306118556432, 0.8481764452798026, 0.7103203024183001, 0.674650890486581, 0.6106881073543003, 0.6723418065479824, 0.597753473690578, 0.5347876378468105, 0.5301702533449445, 0.505837048803057, 0.47547340393066406, 0.5070955412728446, 0.4531546490533011, 0.4455624648502895, 0.4352692450795855, 0.4621752159936087, 0.4047678368432181, 0.4432710920061384, 0.4456437485558646, 0.42608795847211567, 0.4379868677684239, 0.3939507688794817, 0.44003188610076904, 0.3815284626824515, 0.42496940067836214, 0.3747904215540205, 0.4039135660443987, 0.36465664420809063, 0.3981384890420096, 0.3797345757484436, 0.3963941250528608, 0.3846115129334586, 0.35621555362428936, 0.38549972432000296, 0.36622800145830425, 0.4209761364119394, 0.36350591693605694, 0.3698711565562657, 0.3772445661681039, 0.3437554155077253, 0.36961873940059115, 0.3768400379589626, 0.34918252910886494, 0.37084063461848665, 0.36359626054763794], "val_accuracy": [0.3173333406448364, 0.33399999141693115, 0.257666677236557, 0.20399999618530273, 0.2290000021457672, 0.13466666638851166, 0.4386666715145111, 0.43566668033599854, 0.6240000128746033, 0.6613333225250244, 0.6916666626930237, 0.7133333086967468, 0.6706666946411133, 0.715666651725769, 0.7443333268165588, 0.7676666378974915, 0.7696666717529297, 0.7876666784286499, 0.7733333110809326, 0.7929999828338623, 0.8090000152587891, 0.8026666641235352, 0.7960000038146973, 0.8216666579246521, 0.7953333258628845, 0.7950000166893005, 0.8109999895095825, 0.7996666431427002, 0.8289999961853027, 0.8016666769981384, 0.8366666436195374, 0.8169999718666077, 0.8309999704360962, 0.8086666464805603, 0.8376666903495789, 0.8213333487510681, 0.8370000123977661, 0.8253333568572998, 0.8296666741371155, 0.8443333506584167, 0.8240000009536743, 0.8420000076293945, 0.8320000171661377, 0.8476666808128357, 0.8356666564941406, 0.8346666693687439, 0.8536666631698608, 0.8503333330154419, 0.8363333344459534, 0.8463333249092102, 0.831333339214325, 0.8410000205039978]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 0, 3, 2, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 2, 3, 3, 0, 3, 3, 3, 3, 0, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 79, 6, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.8045714497566223, "mapping_values": [1, 1, 1, 0, 1, 0, 31, 31, 17, 14, 3, 2, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.negative(alpha), alpha), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.multiply(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.351990108838911, 2.1809195473272536, 2.178859447522832, 2.1452912276588836, 2.2883745091009637, 1.994615257093384, 1.2684378596880117, 0.9824240088242392, 0.8938137412685303, 0.7946651891206533, 0.7649543611065839, 0.6989056933211172, 0.7013417540713229, 0.639578545909154, 0.6564890056033695, 0.5993747193862765, 0.6111707415728442, 0.5825553354711864, 0.5745975787235588, 0.5452654416755426, 0.5625122690937696, 0.5631976017169729, 0.5295373133546436, 0.5185035854802392, 0.4985788804255677, 0.5361384637934294, 0.5044070540551795, 0.48469480772563855, 0.5064386829464207, 0.4855723161353191, 0.4681999701644924, 0.4594905296643932, 0.4628408750514974, 0.4481698167149291], "accuracy": [0.21965394914150238, 0.23405098915100098, 0.23299431800842285, 0.23722097277641296, 0.15955619513988495, 0.3377360999584198, 0.564258337020874, 0.64667809009552, 0.6827367544174194, 0.6973979473114014, 0.7121912837028503, 0.7437590956687927, 0.7372870445251465, 0.7627789974212646, 0.7560427784919739, 0.7728173136711121, 0.7675340175628662, 0.7843085527420044, 0.7798177003860474, 0.7955356240272522, 0.7893276810646057, 0.7858935594558716, 0.7988376617431641, 0.8098005652427673, 0.8087438941001892, 0.8005547523498535, 0.807158887386322, 0.8222163319587708, 0.8083476424217224, 0.8166688680648804, 0.8202351331710815, 0.82683926820755, 0.8289526104927063, 0.8321225643157959], "val_loss": [1.8464632715497697, 1.9039466040475028, 1.96846832547869, 1.8041681562151228, 1.857210431780134, 0.979705776487078, 0.8371897424970355, 0.7140189579554966, 0.6325180189950126, 0.5527782610484532, 0.5206275156566075, 0.6106101444789341, 0.4608058588845389, 0.5506756135395595, 0.45648646354675293, 0.4983586754117693, 0.43390651260103497, 0.41879590920039583, 0.47785266808101107, 0.4765904290335519, 0.5026426315307617, 0.39644475494112286, 0.45141193696430754, 0.4256022572517395, 0.3987009014402117, 0.3832847476005554, 0.4091070294380188, 0.44872050625937326, 0.38174696479524883, 0.3772031239100865, 0.3899103232792446, 0.3925162213189261, 0.38693688596997944, 0.3878511105264936], "val_accuracy": [0.3190000057220459, 0.34200000762939453, 0.10133333504199982, 0.3063333332538605, 0.4046666622161865, 0.5799999833106995, 0.6133333444595337, 0.6930000185966492, 0.7129999995231628, 0.7580000162124634, 0.7566666603088379, 0.7366666793823242, 0.7923333048820496, 0.7406666874885559, 0.7883333563804626, 0.765999972820282, 0.8096666932106018, 0.8159999847412109, 0.7996666431427002, 0.7826666831970215, 0.7356666922569275, 0.8226666450500488, 0.8116666674613953, 0.8106666803359985, 0.8236666917800903, 0.8309999704360962, 0.8113333582878113, 0.8100000023841858, 0.8373333215713501, 0.8373333215713501, 0.8336666822433472, 0.8306666612625122, 0.8303333520889282, 0.8293333053588867]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 0, 3, 4, 0, 3, 1, 2, 0, 2, 1, 2, 2, 3, 2, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 1, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0], [6, 8, 1, 3], [0, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.7917143106460571, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 22, 15, 2, 4, 3, 2, 1, 1, 4, 3, 1, 1], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(alpha, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, grad)))), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), grad))))))), tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.sqrt(sigma)), tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.298919043788474, 1.9161138821429171, 1.7770454508989653, 1.3832702928325677, 1.2488624208150774, 0.9461218968059377, 0.8329936609433831, 0.7717589821561673, 0.7412571469869249, 0.6542522570775438, 0.660477352967399, 0.6187191184926515, 0.6232423256448452, 0.5882257282962228, 0.5458512931231573, 0.5756683347877368], "accuracy": [0.27327960729599, 0.3871351182460785, 0.40324923396110535, 0.5160480737686157, 0.5532954931259155, 0.6408664584159851, 0.6897371411323547, 0.7059833407402039, 0.7149649858474731, 0.7486461400985718, 0.7481178045272827, 0.7663452625274658, 0.7630431652069092, 0.7753269076347351, 0.7923656105995178, 0.7837802171707153], "val_loss": [1.9059603554861886, 1.8665974480765206, 1.325852291924613, 0.9311515944344657, 0.7315054450716291, 0.7573117017745972, 0.562869668006897, 0.5445789439337594, 0.526677029473441, 0.5666088036128453, 0.4896771567208426, 0.5466544287545341, 0.47433747564043316, 0.4778043031692505, 0.4643216814313616, 0.4577562468392508], "val_accuracy": [0.24033333361148834, 0.2809999883174896, 0.4326666593551636, 0.6050000190734863, 0.6759999990463257, 0.656333327293396, 0.7450000047683716, 0.7403333187103271, 0.7400000095367432, 0.7316666841506958, 0.7943333387374878, 0.7419999837875366, 0.7776666879653931, 0.7820000052452087, 0.7846666574478149, 0.7940000295639038]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 4, 0, 3, 4, 0, 3, 1, 2, 0, 2, 5, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 2, 3, 3, 1, 3, 1, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [18, 63, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.7319999933242798, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 2, 2, 1, 1, 1, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.pow(tf.math.negative(alpha), alpha), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.4780520494383214, 2.169165528445684, 2.121184982250175, 2.2487586105126494, 2.1592483405565557, 1.9386015309318811, 1.6666585363653341, 2.083967172537403, 1.9762209229512757, 2.1569163958315585, 1.884191871208994, 1.8255555971092976, 1.271884850696125, 1.3006278572301697, 1.0842350834412047, 1.0179191626940012, 0.9670527224464502, 0.8921815404456132, 0.8395069343397221, 1.2290380873054703, 1.021654397615305, 0.8770526236924734, 0.8771834349934577, 0.7969862231803907], "accuracy": [0.2401268035173416, 0.2386738806962967, 0.27922335267066956, 0.14991414546966553, 0.22282393276691437, 0.31264033913612366, 0.3913617730140686, 0.3057720363140106, 0.3471139967441559, 0.21542729437351227, 0.3521331250667572, 0.3703605830669403, 0.5378417372703552, 0.5474838018417358, 0.6107515692710876, 0.6289790272712708, 0.6505085229873657, 0.6742834448814392, 0.678642213344574, 0.604939877986908, 0.6227710843086243, 0.6707172393798828, 0.6741513609886169, 0.700171709060669], "val_loss": [1.9652630261012487, 1.9457904270717077, 1.8082103048052107, 1.942056110927037, 1.9382747922624861, 1.6135894911629813, 1.492849554334368, 1.1228697981153215, 1.9876116343906947, 1.6173855236598425, 1.4034631933484758, 1.0269163336072649, 0.8088063512529645, 0.8157378946031842, 0.7071799039840698, 0.7387321506227765, 0.7481533118656704, 0.5913983072553363, 0.5712008135659354, 0.8507641213280814, 0.683657339641026, 0.6276700156075614, 0.594873445374625, 0.6744157075881958], "val_accuracy": [0.10400000214576721, 0.1120000034570694, 0.22066666185855865, 0.14933332800865173, 0.195333331823349, 0.2876666784286499, 0.48133334517478943, 0.5713333487510681, 0.09799999743700027, 0.40433332324028015, 0.4476666748523712, 0.5926666855812073, 0.5973333120346069, 0.6396666765213013, 0.6793333292007446, 0.6790000200271606, 0.6713333129882812, 0.7146666646003723, 0.7366666793823242, 0.6326666474342346, 0.6853333115577698, 0.7146666646003723, 0.7243333458900452, 0.7129999995231628]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 0, 0, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 7, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.27542856335639954, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.0451878017170584, 2.3071262392747705, 2.303954064554747, 2.302995599508128, 2.302621454657848, 2.2990911961105662, 2.24255043911408, 2.2199465635194127, 2.3048868351892127, 2.303629075310974, 2.3028813146911893, 2.1689297421386984, 2.3073042848909755, 2.3038399589532528, 2.302806989092632, 2.303090759319416], "accuracy": [0.1822744756937027, 0.1010434553027153, 0.09377889335155487, 0.1014397069811821, 0.1026284471154213, 0.12798838317394257, 0.1784440577030182, 0.21212521195411682, 0.09800554811954498, 0.09734513610601425, 0.10130762308835983, 0.20155857503414154, 0.09774138033390045, 0.09694888442754745, 0.10672302544116974, 0.09774138033390045], "val_loss": [1.9794570377894811, 1.9745744977678572, 1.973682267325265, 1.9733737536839075, 1.9726540020533971, 1.960568632398333, 1.9548726081848145, 1.9754939079284668, 1.9739321981157576, 1.97373138155256, 1.9442599160330636, 1.9810103688921248, 1.9749879155840193, 1.97397095816476, 1.9737317902701241, 1.9737503187997], "val_accuracy": [0.10400000214576721, 0.09866666793823242, 0.09866666793823242, 0.10133333504199982, 0.1133333370089531, 0.1899999976158142, 0.1420000046491623, 0.10400000214576721, 0.09866666793823242, 0.10400000214576721, 0.2930000126361847, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 4, 0, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [18, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [6, 8, 1, 3], [0, 2], [94], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [7, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 1, 0, 2, 1, 0, 1, 0, 3], [92, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 3, 3, 1, 2, 1, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(alpha, tf.math.add(beta, tf.math.pow(tf.math.negative(alpha), tf.math.multiply(tf.math.pow(alpha, grad), tf.math.add(beta, tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 8, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 6, 0, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 1, 5, 2, 0, 3, 1, 3, 3, 3, 3, 1, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [4, 8, 1, 3], [0, 2], [94], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 2, 9, 7, 4, 5, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [0, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3017062283368426, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 4, 2, 3, 4, 2, 3, 4, 1, 8, 8, 2, 6, 2, 3, 2, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 1, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [9, 8, 1, 3], [0, 2], [94], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 35, 35, 20, 15, 2, 1, 1, 1, 0, 1, 12, 7, 5, 2], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, grad)))))))), grad))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(alpha, alpha), tf.math.subtract(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), beta), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 6, 0, 3, 4, 5, 3, 1, 8, 0, 2, 1, 2, 2, 3, 2, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 1, 3, 2, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 50, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [7, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 0, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0, 0, 13, 8, 5, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(alpha, tf.math.subtract(tf.math.add(tf.math.negative(alpha), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 0, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 3, 2, 1, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [8, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, beta)))), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 0, 3, 4, 0, 3, 8, 2, 2, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 2, 3, 3, 1, 0, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [0, 8, 1, 3], [3, 2], [80], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [2, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 31, 31, 17, 14, 2, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.negative(alpha), alpha), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), grad), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(beta, alpha), tf.math.subtract(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), beta), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 0, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [7, 2], [94], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 4, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(alpha), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 0, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 2, 0, 2, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 31, 31, 17, 14, 1, 2, 2, 1, 1, 1, 4, 2, 2, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(alpha), alpha)), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(alpha)), grad), tf.math.add(beta, grad)), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [3, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 51, 16, 9, 57, 39, 26, 75], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 3, 5, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [0, 1, 5, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 3, 3, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 2, 5, 5, 2, 3, 1, 1, 1, 0, 1, 1, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.21423853933811188, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 0, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 0, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [8, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [1, 1, 0, 2, 1, 0, 1, 0, 3], [22, 49, 44, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 3, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 0, 3, 4, 0, 3, 9, 2, 0, 2, 2, 6, 2, 3, 6, 4, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [1, 1, 3, 2, 3, 3, 1, 1, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 2, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 1, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 22, 15, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.negative(alpha), alpha), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3025240419153774, 2.3022704826700626, 2.301670870524608, 2.3017298808391966, 2.3027453004660434, 2.302242318448011], "accuracy": [0.08836349099874496, 0.09100515395402908, 0.09100515395402908, 0.08915598690509796, 0.08440100401639938, 0.09034473448991776], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 6, 9, 1, 5, 5, 5, 4, 3, 0, 6, 0, 0, 4, 5, 0, 3, 6, 5, 3, 7, 6, 2, 1, 8, 9, 5, 6, 3, 4, 1, 0, 0], [2, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 0, 2, 3], [75, 72, 16, 9, 57, 39, 26, 75], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 0, 3, 4, 0, 3, 1, 2, 0, 2, 2, 6, 2, 3, 6, 5, 9, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [4, 1, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [31, 86, 70, 57, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 8, 1, 3], [0, 2], [94], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 0, 9, 7, 4, 1, 2, 0, 7, 5, 6, 4, 0, 5, 5, 3, 9, 9, 2, 6, 5], [3, 2, 0, 2, 1, 0, 1, 0, 3], [50, 49, 44, 92]], "fitness": -0.041999999433755875, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [2.3025240419153774, 2.3022704826700626, 2.301670870524608, 2.3017298808391966, 2.3027453004660434, 2.302242318448011], "accuracy": [0.08836349099874496, 0.09100515395402908, 0.09100515395402908, 0.08915598690509796, 0.08440100401639938, 0.09034473448991776], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]