[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 0, 3, 7, 3, 0, 1, 1, 2, 4, 5, 2, 0, 1, 2, 8, 0, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 91, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [6, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8234285712242126, "mapping_values": [1, 2, 2, 1, 1, 0, 28, 28, 17, 11, 2, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9782546048843943, 1.4597190054195779, 1.0571599929418705, 0.9063507099870236, 0.8055917852117936, 0.7864900472031576, 0.7450424363316798, 0.7323759010029884, 0.6796052653980671, 0.6876551440567971, 0.6454818529963666, 0.6420044602734963, 0.612107705249605, 0.5987147739644946, 0.5838433049452886, 0.5875047637313789, 0.57754847739965, 0.5687811535819647, 0.5496297427975286, 0.5815925810551521, 0.539870630173777, 0.5378185871207656, 0.5153157812430166, 0.5105048061842145, 0.4963677795870807, 0.5018440090339292, 0.4919796214009541, 0.476574148397719, 0.48654430305968815, 0.4694712113364183, 0.4658810296913321, 0.46889667564678533, 0.4519533631847582, 0.4616419507244464, 0.4405129118216682, 0.440851194948143, 0.4539149229505421, 0.4204481972395988, 0.41933299861863116], "accuracy": [0.3443402349948883, 0.4983489513397217, 0.6211860775947571, 0.656980574131012, 0.7009642124176025, 0.7028133869171143, 0.7223616242408752, 0.7181349992752075, 0.7376832365989685, 0.7364945411682129, 0.7544577717781067, 0.7534011602401733, 0.7652885913848877, 0.7740060687065125, 0.772288978099823, 0.7733456492424011, 0.7804781198501587, 0.7807422876358032, 0.7862898111343384, 0.774270236492157, 0.7944789528846741, 0.7971205711364746, 0.8033285140991211, 0.8101968169212341, 0.8152159452438354, 0.8148196935653687, 0.8181217908859253, 0.8247259259223938, 0.8186501264572144, 0.8239334225654602, 0.826310932636261, 0.8228767514228821, 0.8286884427070618, 0.826310932636261, 0.8321225643157959, 0.8298771381378174, 0.8319904804229736, 0.8465195894241333, 0.8417646288871765], "val_loss": [1.563345500401088, 1.0213885988507951, 0.6422961439405169, 0.6568321670804705, 0.6035831996372768, 0.5733081953866142, 0.5773276090621948, 0.5295604807989938, 0.5285973719188145, 0.5208348546709333, 0.49669686385563444, 0.467428309576852, 0.4727639981678554, 0.4620751142501831, 0.462780271257673, 0.45327753680092947, 0.45267668792179655, 0.42323797941207886, 0.44761606625148226, 0.4433977093015398, 0.423027115208762, 0.43211082901273457, 0.41020500659942627, 0.39672474350248066, 0.44992884567805697, 0.3992212244442531, 0.3776477405003139, 0.3923031347138541, 0.37003670419965473, 0.3696442757334028, 0.3853498782430376, 0.38685362679617746, 0.3830179912703378, 0.35247781447001864, 0.35993066855839323, 0.3885573148727417, 0.3606806567737034, 0.38216887201581684, 0.36871446881975445], "val_accuracy": [0.36266666650772095, 0.581333339214325, 0.7266666889190674, 0.6959999799728394, 0.7483333349227905, 0.7433333396911621, 0.7333333492279053, 0.7526666522026062, 0.7599999904632568, 0.753000020980835, 0.7673333287239075, 0.7833333611488342, 0.784333348274231, 0.7770000100135803, 0.7916666865348816, 0.784333348274231, 0.7850000262260437, 0.8083333373069763, 0.7879999876022339, 0.7979999780654907, 0.8086666464805603, 0.7963333129882812, 0.8203333616256714, 0.8339999914169312, 0.7973333597183228, 0.8293333053588867, 0.8399999737739563, 0.8289999961853027, 0.8456666469573975, 0.8423333168029785, 0.8336666822433472, 0.8323333263397217, 0.8266666531562805, 0.8516666889190674, 0.8410000205039978, 0.8190000057220459, 0.8463333249092102, 0.8253333568572998, 0.8386666774749756]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 7, 3, 0, 1, 1, 2, 4, 5, 2, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8231428861618042, "mapping_values": [1, 2, 2, 1, 1, 0, 31, 31, 17, 14, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, alpha)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))))), tf.math.add(beta, grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9783593816150056, 1.4560518269494163, 1.0666331433979055, 0.9166206893683456, 0.8095620149366922, 0.7778800838359863, 0.7397969426369985, 0.7158495374028835, 0.7095763709456646, 0.6738741424782496, 0.6534394908102512, 0.6662069599563262, 0.6060615317176882, 0.6057273350166937, 0.5930621818135112, 0.5834731088968206, 0.5726569713524005, 0.5672315204730832, 0.5557545989086567, 0.5748293209447521, 0.5393082873223873, 0.5385468063841343, 0.5139733553405105, 0.5136401676829339, 0.49404456426186916, 0.5020623595612853, 0.4917690383326722, 0.48498564481483303, 0.4823898323428409, 0.47256370620752103, 0.4656073914983757, 0.4684428848279954, 0.4532498282535028, 0.46202934495273157, 0.4409826230127357, 0.441102382411196, 0.4480269286476972, 0.41879901647363055, 0.41913611012490165], "accuracy": [0.34367984533309937, 0.500990629196167, 0.6152423620223999, 0.6565843224525452, 0.698190450668335, 0.7053229212760925, 0.7165499925613403, 0.7273808121681213, 0.7246070504188538, 0.7408532500267029, 0.754589855670929, 0.7465327978134155, 0.7683265209197998, 0.7689869403839111, 0.7691190242767334, 0.7740060687065125, 0.7832518815994263, 0.7812706232070923, 0.7882710099220276, 0.7783648371696472, 0.7926297783851624, 0.7976489067077637, 0.8021397590637207, 0.8087438941001892, 0.8156121969223022, 0.8140271902084351, 0.8145555257797241, 0.8189142942428589, 0.8190463781356812, 0.824329674243927, 0.8293488025665283, 0.8257825970649719, 0.8267071843147278, 0.8278959393501282, 0.833179235458374, 0.828820526599884, 0.8347642421722412, 0.844010055065155, 0.8421608805656433], "val_loss": [1.561711072921753, 1.0183978080749512, 0.647971544946943, 0.6438369750976562, 0.6129065411431449, 0.5719961949757167, 0.5648849521364484, 0.5284807171140399, 0.5232223612921578, 0.5172759975705828, 0.5000045469829014, 0.4844594512666975, 0.4697687455586025, 0.45550612040928434, 0.4694387061255319, 0.46185691016060965, 0.4465361663273403, 0.43116375378199984, 0.4451092651912144, 0.45062914916447233, 0.4202561378479004, 0.4278943283217294, 0.4107055834361485, 0.3963917749268668, 0.4429692711148943, 0.39898641620363506, 0.37544390133449007, 0.3904152342251369, 0.368465040411268, 0.3683671610695975, 0.3878857493400574, 0.3742974741118295, 0.37602063587733675, 0.3537271959441049, 0.36053683928080965, 0.3705996019499643, 0.35890136446271625, 0.3802971584456308, 0.3647001215389797], "val_accuracy": [0.3656666576862335, 0.5910000205039978, 0.7266666889190674, 0.7139999866485596, 0.7239999771118164, 0.7459999918937683, 0.7266666889190674, 0.7573333382606506, 0.7519999742507935, 0.765333354473114, 0.7770000100135803, 0.7913333177566528, 0.7956666946411133, 0.7893333435058594, 0.7876666784286499, 0.7860000133514404, 0.7913333177566528, 0.8116666674613953, 0.7893333435058594, 0.7943333387374878, 0.8073333501815796, 0.8006666898727417, 0.8256666660308838, 0.8330000042915344, 0.8059999942779541, 0.8259999752044678, 0.8413333296775818, 0.8330000042915344, 0.8453333377838135, 0.8416666388511658, 0.831333339214325, 0.8399999737739563, 0.8360000252723694, 0.8516666889190674, 0.8413333296775818, 0.8326666951179504, 0.846666693687439, 0.8333333134651184, 0.8410000205039978]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 9, 3, 0, 1, 1, 2, 4, 5, 2, 4, 0, 6, 8, 1, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 93, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8231428861618042, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9781019908562154, 1.4616634245987, 1.0663716602697033, 0.9119023387977838, 0.8106132739602048, 0.7707013616456709, 0.7431129274855137, 0.7137648938842469, 0.7174055006887935, 0.6739232510765231, 0.6540396897437912, 0.6682961802236345, 0.6047851527056847, 0.6049445200164825, 0.602662205207995, 0.5790748811511316, 0.5805088620238757, 0.5611903439769813, 0.5473530548533051, 0.5762997773644348, 0.5361983092973387, 0.5397974674523136, 0.5116985820744567, 0.5098553630599036, 0.4917265502075399, 0.5006849587853275, 0.49176337940660464, 0.48451477370682866, 0.479553510283498, 0.47316889516224936, 0.4677071363784854, 0.4691000940100297], "accuracy": [0.3435477614402771, 0.5008585453033447, 0.6123365759849548, 0.656980574131012, 0.6975300312042236, 0.7055870890617371, 0.7169462442398071, 0.7310791015625, 0.7206445932388306, 0.7434949278831482, 0.7523444890975952, 0.743891179561615, 0.770439863204956, 0.7714964747428894, 0.7640998363494873, 0.7761194109916687, 0.7783648371696472, 0.7833839654922485, 0.7924976944923401, 0.7781006693840027, 0.7965922355651855, 0.7965922355651855, 0.8029322624206543, 0.8072909712791443, 0.8146876096725464, 0.8171972036361694, 0.8165367841720581, 0.819442629814148, 0.8231409192085266, 0.8210275769233704, 0.8257825970649719, 0.8259146809577942], "val_loss": [1.561201504298619, 0.9838252408163888, 0.64845723765237, 0.6546471459524972, 0.6010168450219291, 0.5785557201930455, 0.572304231779916, 0.5543789863586426, 0.5206574712480817, 0.520024333681379, 0.5069138152258736, 0.48237810816083637, 0.4729710647038051, 0.45996817520686556, 0.46467450686863493, 0.4694032839366368, 0.43789667742592947, 0.42399658475603375, 0.4437093734741211, 0.4495795794895717, 0.42644069875989643, 0.44286705766405376, 0.4090089201927185, 0.39748903683253695, 0.44814893177577425, 0.39904578242983135, 0.3751142535890852, 0.38356657539095196, 0.37438914605549406, 0.3684201581137521, 0.3873415333884103, 0.3808224712099348], "val_accuracy": [0.3646666705608368, 0.6056666374206543, 0.718666672706604, 0.6959999799728394, 0.7360000014305115, 0.7383333444595337, 0.7233333587646484, 0.7323333621025085, 0.7556666731834412, 0.7673333287239075, 0.7633333206176758, 0.7879999876022339, 0.7913333177566528, 0.7893333435058594, 0.7913333177566528, 0.7760000228881836, 0.8050000071525574, 0.8109999895095825, 0.7896666526794434, 0.7976666688919067, 0.8029999732971191, 0.7919999957084656, 0.8226666450500488, 0.8320000171661377, 0.8013333082199097, 0.8276666402816772, 0.8443333506584167, 0.8333333134651184, 0.8403333425521851, 0.8426666855812073, 0.8289999961853027, 0.8346666693687439]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 2, 3, 7, 3, 0, 1, 1, 2, 4, 5, 2, 3, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 99, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7839999794960022, "mapping_values": [1, 2, 2, 1, 1, 0, 31, 31, 17, 14, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, alpha)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, grad)))))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9966083651662203, 1.4590476110799988, 1.0633545382746206, 0.8859534679056238, 0.8364232234856582, 0.7593547697899253, 0.7607790664470175, 0.7572006435442153, 0.7128639694186659, 0.6705653309396954, 0.6624347900339735, 0.6491143864537305, 0.6383757332312574, 0.6106889035723481, 0.5966514853627501], "accuracy": [0.3420948386192322, 0.4962356388568878, 0.609959065914154, 0.6672830581665039, 0.6935675740242004, 0.719852089881897, 0.7199841737747192, 0.7141724824905396, 0.7268524765968323, 0.7433628439903259, 0.7433628439903259, 0.7519482374191284, 0.7544577717781067, 0.7660810947418213, 0.7741381525993347], "val_loss": [1.5091492448534285, 0.7705141135624477, 0.6960687637329102, 0.6625639029911586, 0.6004758902958461, 0.5889263834272113, 0.5188638142177037, 0.5348855767931256, 0.5275968313217163, 0.49537909030914307, 0.4984585387366159, 0.47113687651497976, 0.5098366396767753, 0.47265980924878803, 0.4815163952963693], "val_accuracy": [0.4386666715145111, 0.6819999814033508, 0.6726666688919067, 0.6930000185966492, 0.7336666584014893, 0.7386666536331177, 0.7670000195503235, 0.746666669845581, 0.7540000081062317, 0.781000018119812, 0.7753333449363708, 0.778333306312561, 0.7453333139419556, 0.7693333625793457, 0.7733333110809326]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 5, 3, 1, 3, 0, 5, 4, 4, 3, 6, 2, 4, 1, 3, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 2, 3, 0, 1, 2, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [32, 9, 44]], "fitness": -0.7685714364051819, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.multiply(beta, tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2792608125130136, 2.2075659755733996, 2.0772477275014256, 1.851626219467291, 1.5601751357021743, 1.3330435016450943, 1.2001217910878457, 1.096235907419467, 1.027501898308818, 0.9674937123903399, 0.9269333671600811, 0.8904892836799868, 0.8731004427988075, 0.8531120040901364, 0.8266093976084173, 0.8095466973381334, 0.795981951464342, 0.7815802812875459, 0.7578290666587254, 0.7542312869999183, 0.7383232330287122, 0.728355951635766, 0.7216901490795709, 0.7239472026035156, 0.7131953648194472, 0.7105833846328281], "accuracy": [0.15176330506801605, 0.2946770489215851, 0.38885220885276794, 0.4472328722476959, 0.5060097575187683, 0.5588429570198059, 0.5894861817359924, 0.62660151720047, 0.641791045665741, 0.659490168094635, 0.672698438167572, 0.6896050572395325, 0.683000922203064, 0.6939638257026672, 0.7078325152397156, 0.7108704447746277, 0.7140403985977173, 0.7152291536331177, 0.7213049530982971, 0.7316074371337891, 0.7400607466697693, 0.7353057861328125, 0.737947404384613, 0.7397965788841248, 0.7417778372764587, 0.7442874312400818], "val_loss": [1.9145852497645788, 1.8248015812465124, 1.6480207102639335, 1.3739505495343889, 1.1073075703212194, 0.9314360959189278, 0.8276235546384539, 0.7591986315590995, 0.7224299567086356, 0.6823192664555141, 0.6584622689655849, 0.6349350384303502, 0.6258256094796317, 0.6106849568230766, 0.5967442308153424, 0.581343412399292, 0.5736056566238403, 0.5649930919919696, 0.5541422196796962, 0.5468770095280239, 0.5413636139460972, 0.535358224596296, 0.5319500820977348, 0.5302875723157611, 0.5282250472477504, 0.5150010074887957], "val_accuracy": [0.3630000054836273, 0.45133334398269653, 0.5183333158493042, 0.5786666870117188, 0.6616666913032532, 0.6800000071525574, 0.6949999928474426, 0.6953333616256714, 0.7059999704360962, 0.7200000286102295, 0.7303333282470703, 0.7360000014305115, 0.7336666584014893, 0.7443333268165588, 0.7413333058357239, 0.749666690826416, 0.7516666650772095, 0.7523333430290222, 0.7636666893959045, 0.7666666507720947, 0.7693333625793457, 0.7689999938011169, 0.7649999856948853, 0.7609999775886536, 0.7599999904632568, 0.768666684627533]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 3, 1, 3, 0, 5, 4, 4, 3, 6, 2, 4, 1, 3, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.7674285769462585, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 5, 6, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.9742150765368496, 1.3894999250051225, 1.0094528326410674, 0.8863657549576689, 0.8188019845983561, 0.77713593490655, 0.7378615635402797, 0.699446454559571, 0.7275923716157513, 0.6586795202997052, 0.6421548402651095, 0.6362912828628461], "accuracy": [0.3431515097618103, 0.5068022608757019, 0.6288469433784485, 0.6604147553443909, 0.6826046705245972, 0.7079645991325378, 0.7154933214187622, 0.7404569983482361, 0.7125874757766724, 0.7425703406333923, 0.750759482383728, 0.7532690763473511], "val_loss": [1.3647845132010323, 0.8395343337740216, 0.645317826952253, 0.6342508281980243, 0.5967094217027936, 0.5731221437454224, 0.5257154703140259, 0.5739738600594657, 0.5646623543330601, 0.5032255138669696, 0.5108212743486676, 0.5117355074201312], "val_accuracy": [0.4833333194255829, 0.6740000247955322, 0.7139999866485596, 0.6973333358764648, 0.7419999837875366, 0.7456666827201843, 0.7649999856948853, 0.737666666507721, 0.7303333282470703, 0.7576666474342346, 0.7483333349227905, 0.7526666522026062]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 5, 3, 7, 3, 0, 5, 8, 2, 3, 5, 8, 6, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 2, 3, 0, 1, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.33228570222854614, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.139229987165506, 2.343998274483843, 2.3052293618499107, 2.3031612753222537, 2.3031403246871895, 2.302976302152076], "accuracy": [0.1822744756937027, 0.1328754425048828, 0.09893012791872025, 0.09906221181154251, 0.10381719470024109, 0.09232597798109055], "val_loss": [1.9391730853489466, 1.974465778895787, 1.9736873762948173, 1.9735798835754395, 1.9736170087541853, 1.9736017499651228], "val_accuracy": [0.2796666622161865, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 7, 3, 0, 1, 1, 3, 4, 5, 2, 9, 0, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 84, 0, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 28, 28, 17, 11, 2, 2, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(alpha)))))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 3, 2, 3, 0, 5, 4, 4, 3, 6, 2, 4, 1, 3, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 0, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [33, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 5, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07700435817241669, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [3, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 8, 3, 1, 3, 0, 4, 2, 2, 8, 1, 8, 4, 1, 3, 8, 9, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [33, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [7, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [5, 1, 0, 3, 2, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 2, 7, 3, 0, 0, 1, 2, 2, 9, 2, 6, 1, 2, 8, 9, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 1, 1, 3, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [0, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 18, 18, 11, 7, 2, 1, 1, 0, 1, 1, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(beta, alpha), alpha), tf.math.add(beta, grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3027222863813166, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [9, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 7, 3, 0, 1, 1, 5, 4, 3, 2, 4, 1, 8, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 3, 1, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 26, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 28, 28, 16, 12, 2, 2, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [11171988.01324111, 214827426.97556466, 981566450.5254259, 2694731937.18769, 5819809699.48699, 10612602742.583014], "accuracy": [0.09708096832036972, 0.09417514503002167, 0.09655263274908066, 0.10328886657953262, 0.10210011899471283, 0.09694888442754745], "val_loss": [42054355.428571425, 335942180.5714286, 1133256850.2857144, 2685592283.428571, 5244515181.714286, 9061652187.428572], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 3, 3, 7, 2, 0, 3, 2, 2, 3, 5, 0, 3, 0, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 0, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [33, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 11, 10, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), grad), tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, alpha))), grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 3, 2, 7, 2, 0, 3, 2, 2, 3, 8, 0, 3, 0, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 2, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 18, 18, 9, 9, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), grad), tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta)), tf.math.add(beta, grad))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 7, 3, 3, 1, 1, 2, 4, 5, 2, 4, 0, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 90, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.415248221683906e+22, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05296526104211807, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 7, 3, 0, 1, 1, 2, 4, 5, 2, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 2, 3, 0, 1, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 40, 40, 23, 17, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))), tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(grad, tf.math.square(tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))), grad), tf.math.add(beta, beta))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06221107020974159, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 3, 1, 3, 0, 5, 4, 4, 3, 6, 2, 4, 1, 3, 8, 6, 8, 0, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 1, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.07514286041259766, "mapping_values": [1, 2, 2, 1, 1, 0, 19, 19, 10, 9, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha)))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, alpha))), grad), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.3029474520869084, 2.301229099697677, 2.300978435485622, 2.3007966813599006, 2.2997157677305435, 2.2990661495318583, 2.2995817335353252, 2.2994706051901677, 2.299139554773607, 2.299030156230662, 2.2993829296312596, 2.299447463566774, 2.300105214890488, 2.3005878202919288, 2.2995687979339308, 2.300141668275615], "accuracy": [0.09008057415485382, 0.0948355570435524, 0.08849557489156723, 0.09655263274908066, 0.09602430462837219, 0.09721305221319199, 0.09576013684272766, 0.09708096832036972, 0.1018359512090683, 0.10421344637870789, 0.09985470771789551, 0.09972262382507324, 0.0956280529499054, 0.09470347315073013, 0.09919429570436478, 0.09589222073554993], "val_loss": [1.9701889583042689, 1.96967009135655, 1.9695982933044434, 1.9695138250078474, 1.969644342150007, 1.969839096069336, 1.9698238372802734, 1.9697156633649553, 1.9697681154523576, 1.9698553766523088, 1.9699987002781458, 1.9702951567513602, 1.9704530579703194, 1.9706575529915946, 1.9708243097577776, 1.9709641592843192], "val_accuracy": [0.044333335012197495, 0.05000000074505806, 0.05833333358168602, 0.06233333423733711, 0.0663333311676979, 0.06700000166893005, 0.07000000029802322, 0.07466666400432587, 0.07333333045244217, 0.07466666400432587, 0.07599999755620956, 0.06933332979679108, 0.07066666334867477, 0.0676666647195816, 0.06700000166893005, 0.06733333319425583]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [5, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 7, 3, 0, 5, 2, 1, 3, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [33, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 4, 0, 3, 2, 5, 5, 0, 7, 5], [1, 1, 1, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 27, 27, 16, 11, 2, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.square(grad)), tf.math.sqrt(alpha)), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.pow(grad, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(alpha, alpha))", "other_info": {"loss": [2.303421452879638, 2.302744261136129, 2.3029702889716166, 2.303153199353443, 2.3018949718019353, 2.300744133949154], "accuracy": [0.08796724677085876, 0.09206181764602661, 0.08347642421722412, 0.08717474341392517, 0.09087307006120682, 0.08994849026203156], "val_loss": [1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846, 1.9709816660199846], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 5, 3, 7, 3, 0, 5, 8, 2, 3, 5, 8, 6, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 2, 3, 0, 1, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 3, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 56, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 13, 8, 5, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(tf.math.add(tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.negative(sigma))), alpha)", "other_info": {"loss": [2.303445180865988, 2.3028288891822153, 2.303117904712212, 2.3033557764810895, 2.3021667738317295, 2.3010568534063545], "accuracy": [0.08796724677085876, 0.09153348207473755, 0.08321225643157959, 0.08691058307886124, 0.09047681838274002, 0.08981640636920929], "val_loss": [1.9710365704127721, 1.971090589250837, 1.9711471966334753, 1.9712012154715401, 1.971259253365653, 1.9713072776794434], "val_accuracy": [0.035999998450279236, 0.03500000014901161, 0.03466666489839554, 0.03433333337306976, 0.03433333337306976, 0.03433333337306976]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 3, 7, 3, 0, 1, 1, 2, 4, 5, 2, 4, 1, 2, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.04085714370012283, "mapping_values": [1, 17, 17, 10, 7, 1, 21, 21, 11, 10, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, alpha))), grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3035264851914388, 2.303161439831388, 2.3036810769507, 2.304226538445641, 2.30329616742757, 2.3022297113295385], "accuracy": [0.08770307898521423, 0.08968432247638702, 0.08228767663240433, 0.08598599582910538, 0.08757099509239197, 0.08981640636920929], "val_loss": [1.9711806433541434, 1.971397876739502, 1.9716085025242396, 1.9718736239842005, 1.972128050667899, 1.9723334993634904], "val_accuracy": [0.032999999821186066, 0.03233333304524422, 0.03099999949336052, 0.029999999329447746, 0.02866666577756405, 0.02800000086426735]}}]