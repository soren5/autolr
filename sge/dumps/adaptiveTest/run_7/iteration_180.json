[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 1, 3, 0, 5, 4, 2, 3, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [27, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.8014285564422607, "mapping_values": [1, 2, 2, 1, 1, 0, 18, 18, 10, 8, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, grad)), grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), alpha), tf.math.add(beta, alpha)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.025237202061764, 1.3907044483386861, 0.9996061923796428, 0.9695223004369845, 0.8033095361801926, 0.7737829637108635, 0.745028554905108, 0.7088773350957488, 0.7276611172086952, 0.6505274377116721, 0.6393760387467009, 0.6578029386277023, 0.6256776120936346, 0.6122698182868227, 0.6450153178054548, 0.5894953676376046, 0.5643426130523677, 0.5717355586660222, 0.559461684534657, 0.5543322037428661, 0.5294496176336042, 0.5184649658744771, 0.5475895295384349, 0.5172715210848481, 0.5165480453230213, 0.5125505416117103, 0.4936321536744543, 0.4798036819364983, 0.48738039965642804, 0.4757057608095032, 0.5102956785328746, 0.4764374316549572], "accuracy": [0.3230748772621155, 0.5081230998039246, 0.6332056522369385, 0.635979413986206, 0.6939638257026672, 0.7112666964530945, 0.7160216569900513, 0.7273808121681213, 0.7127195596694946, 0.7540615797042847, 0.7569673657417297, 0.7416457533836365, 0.7555144429206848, 0.7696473598480225, 0.7609298825263977, 0.7740060687065125, 0.7849689722061157, 0.7810064554214478, 0.7839123010635376, 0.7902522683143616, 0.8072909712791443, 0.8013472557067871, 0.7926297783851624, 0.8054417967796326, 0.8037247657775879, 0.8058380484580994, 0.8162726163864136, 0.8182538747787476, 0.8204993009567261, 0.8173292875289917, 0.8098005652427673, 0.8222163319587708], "val_loss": [1.5309268406459264, 0.8595732961382184, 0.6640513454164777, 0.6468110936028617, 0.6153463295527867, 0.592011707169669, 0.5547986200877598, 0.5708622251238141, 0.5004523651940482, 0.5211059876850673, 0.5325335604803902, 0.4761007343019758, 0.459887044770377, 0.5390399694442749, 0.47581796986716135, 0.5131911720548358, 0.44961023330688477, 0.44055233682904926, 0.42887180192129953, 0.42770823410579134, 0.4102205293519156, 0.4796956607273647, 0.3977921094213213, 0.4518892765045166, 0.4169052924428667, 0.3924615553447178, 0.3778826594352722, 0.41711585010801044, 0.39207281385149273, 0.40780091285705566, 0.3764372297695705, 0.3766249247959682], "val_accuracy": [0.30666667222976685, 0.6166666746139526, 0.7023333311080933, 0.7083333134651184, 0.734333336353302, 0.7256666421890259, 0.7356666922569275, 0.7260000109672546, 0.7736666798591614, 0.7459999918937683, 0.7289999723434448, 0.7863333225250244, 0.7923333048820496, 0.7540000081062317, 0.7853333353996277, 0.7516666650772095, 0.7956666946411133, 0.7883333563804626, 0.8109999895095825, 0.8059999942779541, 0.8169999718666077, 0.7960000038146973, 0.8376666903495789, 0.7833333611488342, 0.8193333148956299, 0.82833331823349, 0.8433333039283752, 0.8183333277702332, 0.8216666579246521, 0.8159999847412109, 0.840666651725769, 0.8299999833106995]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 7, 3, 0, 5, 2, 2, 3, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.797428548336029, "mapping_values": [1, 2, 2, 1, 1, 0, 30, 30, 18, 12, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), alpha)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.992042668617444, 1.549754014986381, 1.1102456274348762, 0.9056000157968321, 0.8147079371552599, 0.7585888323829851, 0.7365800373983452, 0.7180738294318273, 0.6820468954941726, 0.6911129278671221, 0.6476330104489542, 0.6347722000985051, 0.6183119673361127, 0.5846575614310463, 0.5910299343912278, 0.5979437131010042, 0.5713281212639043, 0.5542353186562013], "accuracy": [0.3265090584754944, 0.4897635579109192, 0.5921278595924377, 0.665830135345459, 0.6991150379180908, 0.7153612375259399, 0.7160216569900513, 0.7290979027748108, 0.7470611333847046, 0.7339849472045898, 0.7582882046699524, 0.7604015469551086, 0.767401933670044, 0.7791573405265808, 0.7835160493850708, 0.7746664881706238, 0.7880068421363831, 0.7960638999938965], "val_loss": [1.6575536046709334, 1.0406884806496757, 0.7025906188147408, 0.6464029209954398, 0.6027863025665283, 0.5652083158493042, 0.5560189826147897, 0.5404607738767352, 0.5138470785958427, 0.6098747423716954, 0.48283605916159494, 0.5072543621063232, 0.45449975558689665, 0.4827188764299665, 0.5055346318653652, 0.46273774760110037, 0.44865851742880686, 0.4706228290285383], "val_accuracy": [0.39100000262260437, 0.5406666398048401, 0.6723333597183228, 0.7110000252723694, 0.7273333072662354, 0.7400000095367432, 0.7423333525657654, 0.7670000195503235, 0.7620000243186951, 0.7113333344459534, 0.7826666831970215, 0.7559999823570251, 0.7953333258628845, 0.7816666960716248, 0.7649999856948853, 0.7846666574478149, 0.7919999957084656, 0.7770000100135803]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 4, 1, 9, 3, 0, 5, 2, 2, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 3, 0, 0, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [7, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [19, 9, 44]], "fitness": -0.698285698890686, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.subtract(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3003946743180266, 2.295787677221987, 2.2912383357594592, 2.2878424630677143, 2.2827454472671427, 2.276835818159078, 2.275740889982698, 2.268682436526743, 2.2652446254054555, 2.261241387319508, 2.25523518316183, 2.2510402077271907, 2.2456641113438454, 2.238716153861698, 2.2356037747480486, 2.2289714842833988, 2.2238129409013596, 2.217768251872286, 2.2095242774151163, 2.201920486318437, 2.1933257586101673, 2.185013821757685, 2.17903440201114, 2.1707837987868794, 2.163466886270473, 2.1502246540834435, 2.1390115326390275, 2.1280473843384193, 2.117707409705657, 2.1045412042940517, 2.0943137133803273, 2.078901084343897, 2.067899719347114, 2.0497030641865406, 2.0356546510180715, 2.0195598069781626, 2.006429590789665, 1.9853491450911736, 1.9691153354711537, 1.951836651987986, 1.9250499218714126, 1.9076554102274752, 1.8852194825089161, 1.8686523442381109, 1.8462835089437022, 1.8277233169063396, 1.802164508430099, 1.7743105393642638, 1.7607759854356138, 1.7422690157562184, 1.7112425420860873, 1.6902962022249048, 1.6703567610220305, 1.6458389515480614, 1.6267216672136515, 1.6006976422254577, 1.5743349532189228, 1.562562672138655, 1.5424653633065022, 1.5192063109214358, 1.5045623745601475, 1.4785603440244042, 1.4645960321358371, 1.4450849132483676, 1.438599166270528, 1.4168054483286725, 1.4011208871415168, 1.3742186957976412, 1.3637392368330505, 1.3546124200118044, 1.3381273998733618, 1.32153690179357, 1.3101073557658833, 1.2983015060519278, 1.2908354510626128, 1.2721697429482648, 1.2657730842641222, 1.259525838450607, 1.2402487711395649, 1.2278452425773951, 1.2263410390407465, 1.2123030937736723, 1.2009295651374507, 1.190807418170748, 1.176137660897844, 1.1697719760810883, 1.1709676503725748, 1.152938654142175, 1.1558242775681877, 1.1382878133570749, 1.1336628314353188, 1.1248553678769289, 1.1162699415006374, 1.1188563684415131, 1.1136301423202433, 1.1073937403322793, 1.1048136291691593, 1.096411652679, 1.0891305158607807, 1.0715971288427841], "accuracy": [0.09219389408826828, 0.1080438494682312, 0.11649715900421143, 0.12613920867443085, 0.1438383311033249, 0.15757495164871216, 0.16299036145210266, 0.18002906441688538, 0.18993528187274933, 0.20103025436401367, 0.21859727799892426, 0.22057852149009705, 0.23405098915100098, 0.24303261935710907, 0.2522784173488617, 0.26139214634895325, 0.266939640045166, 0.287280410528183, 0.2833179235458374, 0.3066965937614441, 0.3230748772621155, 0.32703739404678345, 0.32465988397598267, 0.3327169418334961, 0.33258485794067383, 0.35543522238731384, 0.35886937379837036, 0.37088891863822937, 0.3731343150138855, 0.3833047151565552, 0.38264429569244385, 0.3943996727466583, 0.3831726312637329, 0.40523049235343933, 0.41104212403297424, 0.40866464376449585, 0.41368380188941956, 0.42226919531822205, 0.41870296001434326, 0.4271562397480011, 0.44208163022994995, 0.4461762011051178, 0.4434024691581726, 0.45344075560569763, 0.4535728394985199, 0.45027077198028564, 0.46070531010627747, 0.4691586196422577, 0.46929070353507996, 0.4655923843383789, 0.48368775844573975, 0.4811781942844391, 0.48606523871421814, 0.48725399374961853, 0.48831066489219666, 0.5013868808746338, 0.5099722743034363, 0.50350022315979, 0.5028398036956787, 0.5173689126968384, 0.5177651643753052, 0.5251618027687073, 0.5271430611610413, 0.5346717834472656, 0.5309734344482422, 0.5361247062683105, 0.5410117506980896, 0.5484083890914917, 0.5542200207710266, 0.5531634092330933, 0.5484083890914917, 0.5624092221260071, 0.559371292591095, 0.5635979175567627, 0.563730001449585, 0.5708624720573425, 0.5709945559501648, 0.5739004015922546, 0.5851274728775024, 0.5802403688430786, 0.5769383311271667, 0.5879011750221252, 0.5880332589149475, 0.5901466012001038, 0.6008453369140625, 0.6041474342346191, 0.6004490852355957, 0.6116761565208435, 0.5963544845581055, 0.6061286330223083, 0.603090763092041, 0.6110157370567322, 0.6089023947715759, 0.6095628142356873, 0.6148461103439331, 0.6166952848434448, 0.6199973821640015, 0.6223748326301575, 0.6213181614875793, 0.62660151720047], "val_loss": [1.9668238503592355, 1.9627009119306291, 1.9586693899972099, 1.9546386173793249, 1.9505126816885812, 1.9463743482317244, 1.9422258649553572, 1.937979016985212, 1.933668885912214, 1.929248537336077, 1.9246704918997628, 1.9199559347970145, 1.9150659016200475, 1.9099417413984026, 1.904629911695208, 1.899057456425258, 1.893237795148577, 1.8871558053152901, 1.8807436398097448, 1.8739100183759416, 1.8667424065726144, 1.8590927805219377, 1.8510888644627161, 1.8426995958600725, 1.833885669708252, 1.8243953159877233, 1.8145067351205009, 1.8039631843566895, 1.7929118701389857, 1.7812837873186385, 1.7691142899649483, 1.756277629307338, 1.7429200581141882, 1.7286790439060755, 1.713907309940883, 1.698542697089059, 1.6824843542916434, 1.6655169555119105, 1.6480977194649833, 1.6300055980682373, 1.610917125429426, 1.591428313936506, 1.5712682179042272, 1.5506860188075475, 1.5296028000967843, 1.5082877704075404, 1.486499888556344, 1.4642526081630163, 1.4421771253858293, 1.419961929321289, 1.397477115903582, 1.3749781336103166, 1.3526424339839391, 1.3302320752825056, 1.3083178315843855, 1.286452293395996, 1.2647369248526437, 1.243788719177246, 1.2235799516950334, 1.2034195831843786, 1.1839767864772253, 1.1649837834494454, 1.1466938427516393, 1.1288515499659948, 1.1119021006992884, 1.095439876828875, 1.079526151929583, 1.0637632778712682, 1.0487974371228899, 1.034637383052281, 1.0209933349064417, 1.0078267369951521, 0.9950164726802281, 0.982689619064331, 0.9710385799407959, 0.9595841339656285, 0.9487325804574149, 0.9384709085736956, 0.9282196930476597, 0.9182956559317452, 0.9089031560080392, 0.8999346664973668, 0.8912844998495919, 0.8828718662261963, 0.8746195180075509, 0.8666560649871826, 0.8591255971363613, 0.8517130953924996, 0.8449102129255023, 0.8380890744073051, 0.8314664193562099, 0.8250873259135655, 0.8190978595188686, 0.8134061779294696, 0.807649953024728, 0.802442193031311, 0.7972138438905988, 0.7921230963298252, 0.7872330631528582, 0.7823467595236642], "val_accuracy": [0.06466666609048843, 0.10400000214576721, 0.14133332669734955, 0.179666668176651, 0.21666666865348816, 0.2486666738986969, 0.27666667103767395, 0.29600000381469727, 0.3153333365917206, 0.3306666612625122, 0.34200000762939453, 0.351666659116745, 0.359333336353302, 0.367333322763443, 0.37566667795181274, 0.38199999928474426, 0.38999998569488525, 0.3996666669845581, 0.4103333353996277, 0.41366666555404663, 0.4193333387374878, 0.42933332920074463, 0.4339999854564667, 0.44433334469795227, 0.4519999921321869, 0.4569999873638153, 0.4620000123977661, 0.4659999907016754, 0.4703333377838135, 0.47433334589004517, 0.4806666672229767, 0.4856666624546051, 0.4936666786670685, 0.4986666738986969, 0.503333330154419, 0.5070000290870667, 0.512333333492279, 0.5170000195503235, 0.5216666460037231, 0.5273333191871643, 0.531333327293396, 0.5396666526794434, 0.5460000038146973, 0.5483333468437195, 0.5529999732971191, 0.5553333163261414, 0.5603333115577698, 0.5633333325386047, 0.5686666369438171, 0.5716666579246521, 0.5766666531562805, 0.5809999704360962, 0.5870000123977661, 0.5913333296775818, 0.5946666598320007, 0.5996666550636292, 0.6019999980926514, 0.609333336353302, 0.6116666793823242, 0.6163333058357239, 0.6206666827201843, 0.6286666393280029, 0.6353333592414856, 0.6423333287239075, 0.6453333497047424, 0.6489999890327454, 0.653333306312561, 0.6556666493415833, 0.6600000262260437, 0.6616666913032532, 0.6636666655540466, 0.6663333177566528, 0.6679999828338623, 0.668666660785675, 0.6696666479110718, 0.67166668176651, 0.6729999780654907, 0.6736666560173035, 0.6756666898727417, 0.6756666898727417, 0.6769999861717224, 0.6786666512489319, 0.6816666722297668, 0.6813333630561829, 0.6830000281333923, 0.6846666932106018, 0.6853333115577698, 0.6836666464805603, 0.6856666803359985, 0.687333345413208, 0.6903333067893982, 0.6919999718666077, 0.6913333535194397, 0.6909999847412109, 0.6926666498184204, 0.6930000185966492, 0.6936666369438171, 0.6933333277702332, 0.6943333148956299, 0.6959999799728394]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 8, 3, 7, 3, 0, 5, 2, 2, 3, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 0, 2, 0, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [3, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [17, 9, 44]], "fitness": -0.6439999938011169, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3010095735314877, 2.297891978590228, 2.2947254281994405, 2.29277893590291, 2.289173730407582, 2.2847977036954923, 2.285160219129271, 2.2796841551047966, 2.2777634939859572, 2.2755773328220084, 2.2714830517469693, 2.2690350320660095, 2.2658385856040417, 2.261165251175741, 2.2603413064828435, 2.256389560165375, 2.25380088193085, 2.2506543255091627, 2.2456517619479524, 2.2419569106260075, 2.2370065403589248, 2.233257102235717, 2.231278568132285, 2.2276434398298925, 2.2248382207157276, 2.2181448494328357, 2.2125239644020995, 2.2085778514517926, 2.20473133502084, 2.1989863130788385, 2.1960122876903556, 2.189340835895521, 2.1856892586321233, 2.178185604724272, 2.1730578968852754, 2.1665369670436117, 2.1630517923128116, 2.1541587468450727, 2.148292095213046, 2.142401206038332, 2.130877186924223, 2.1248933242658787, 2.1166824489898843, 2.1113858550468128, 2.1018825696207797, 2.0957437198647986, 2.084986296312259, 2.0725081418530817, 2.0676751867056744, 2.060681788928599, 2.0463891639024228, 2.0357713890806277, 2.0264368112360276, 2.0160317781846664, 2.0041212793102576, 1.9916177211641053, 1.9774404847469187, 1.9691052850148367, 1.9560948694071922, 1.9428796503034014, 1.932127477533514, 1.9134870418357874, 1.9022821445097273, 1.8882298524180392, 1.8793084149221466, 1.863007350777906, 1.8466920742599988, 1.8285060754903728, 1.814813065506826, 1.803521594083572, 1.7856649338939266, 1.767816432053623, 1.7562341781859825, 1.7395447523460696, 1.72832704032842, 1.7081679371385494, 1.6939320675433351, 1.6848094352185057, 1.6634911078472085, 1.650593353630986, 1.6390888671266592, 1.6227906858601417, 1.6038821565949009, 1.590889733607003, 1.574476582168541, 1.5622308033489831, 1.5535766426850273, 1.5327756913771735, 1.5265566021333896, 1.5052602641917239, 1.493971357791494, 1.4824764716579553, 1.4678917836047056, 1.462972214728645, 1.4575288571764717, 1.4404598292326962, 1.435730286624532, 1.4190229840676043, 1.4123403483283612, 1.3879642500270863], "accuracy": [0.09126931428909302, 0.10196803510189056, 0.10751552134752274, 0.108440101146698, 0.12442214041948318, 0.13274335861206055, 0.1352529376745224, 0.1488574892282486, 0.15797120332717896, 0.16021661460399628, 0.17738740146160126, 0.17910447716712952, 0.18821820616722107, 0.1900673657655716, 0.2032756507396698, 0.20776647329330444, 0.21318188309669495, 0.22705058753490448, 0.22559767961502075, 0.24263638257980347, 0.25584468245506287, 0.26178839802742004, 0.26244881749153137, 0.26997753977775574, 0.2661471366882324, 0.28080835938453674, 0.29203540086746216, 0.301281213760376, 0.29943203926086426, 0.30682867765426636, 0.3028661906719208, 0.31937655806541443, 0.31303659081459045, 0.3335094451904297, 0.3261128067970276, 0.33747193217277527, 0.342491090297699, 0.3494914770126343, 0.34486857056617737, 0.35266146063804626, 0.36705851554870605, 0.36626601219177246, 0.3677189350128174, 0.37168142199516296, 0.3800026476383209, 0.37841764092445374, 0.3819838762283325, 0.3917580246925354, 0.395720511674881, 0.3943996727466583, 0.4039096534252167, 0.40430590510368347, 0.41209879517555237, 0.409721314907074, 0.409721314907074, 0.4157971143722534, 0.4301941692829132, 0.41883501410484314, 0.4209483563899994, 0.4340245723724365, 0.4283449947834015, 0.4415532946586609, 0.44062870740890503, 0.439439982175827, 0.44485536217689514, 0.44828951358795166, 0.4497424364089966, 0.4575353264808655, 0.4644036591053009, 0.45687490701675415, 0.4571390748023987, 0.474970281124115, 0.47430986166000366, 0.4752344489097595, 0.4725928008556366, 0.4827631711959839, 0.48566898703575134, 0.48051777482032776, 0.49372607469558716, 0.4892352521419525, 0.4924052357673645, 0.5025756359100342, 0.50350022315979, 0.5021793842315674, 0.5099722743034363, 0.5144630670547485, 0.5106326937675476, 0.5180293321609497, 0.5151234865188599, 0.5192180871963501, 0.5190860033035278, 0.5223880410194397, 0.5251618027687073, 0.5295205116271973, 0.5259543061256409, 0.5312376022338867, 0.5329546928405762, 0.5420684218406677, 0.5373134613037109, 0.5511821508407593], "val_loss": [1.9682002067565918, 1.9654296466282435, 1.96272189276559, 1.9600255829947335, 1.9572784560067313, 1.9545394352504186, 1.9518109049115862, 1.9490714073181152, 1.9463340895516532, 1.943568161555699, 1.9407708304268974, 1.937953267778669, 1.935070242200579, 1.932131017957415, 1.929135458809989, 1.9260879244123186, 1.922976016998291, 1.9198166983468192, 1.9165825162615096, 1.913215228489467, 1.9097681045532227, 1.9061950274876185, 1.9025473594665527, 1.8987811633518763, 1.8949264117649622, 1.8908745901925224, 1.8867270605904716, 1.8823955399649483, 1.8779267583574568, 1.8732945578438895, 1.8685009820120675, 1.86350188936506, 1.8583770479474748, 1.8529993465968542, 1.8474371092660087, 1.8417068890162878, 1.8357879774911063, 1.8296074867248535, 1.8232296534946986, 1.816669123513358, 1.8097328458513533, 1.8026244980948312, 1.795241015298026, 1.7876339639936174, 1.7797752789088659, 1.7717110770089286, 1.7633072308131628, 1.754540034702846, 1.7456235204424178, 1.736480712890625, 1.7269209453037806, 1.7170695577348982, 1.7069362231663294, 1.6964843954358781, 1.6857555593763078, 1.6746617725917272, 1.663196631840297, 1.6515189920152937, 1.639556782586234, 1.6271757738930839, 1.614654541015625, 1.6017229557037354, 1.588564361844744, 1.5750970159258162, 1.5616024562290736, 1.5478084087371826, 1.5337673255375452, 1.5194063186645508, 1.5048894882202148, 1.4903999056134904, 1.4756487097058977, 1.4607799393790108, 1.4458021777016776, 1.4307422978537423, 1.4157521043504988, 1.4006208351680212, 1.3855921540941512, 1.370645454951695, 1.3556226321629115, 1.34066070829119, 1.325835841042655, 1.3110548087528773, 1.2963932241712297, 1.2818413802555628, 1.2673611640930176, 1.25305209841047, 1.239116566521781, 1.2253610406603133, 1.2119202954428536, 1.198549747467041, 1.185405629021781, 1.1724859305790492, 1.1598409584590368, 1.1476938043321883, 1.1357436520712716, 1.1240933622632707, 1.1127578190394811, 1.1015631811959403, 1.090822424207415, 1.0800931794302804], "val_accuracy": [0.05400000140070915, 0.07433333247900009, 0.10233332961797714, 0.12966667115688324, 0.15199999511241913, 0.17866666615009308, 0.2043333351612091, 0.22599999606609344, 0.24899999797344208, 0.26766666769981384, 0.2826666533946991, 0.29499998688697815, 0.3063333332538605, 0.3190000057220459, 0.3316666781902313, 0.3413333296775818, 0.34833332896232605, 0.35466668009757996, 0.3623333275318146, 0.36666667461395264, 0.3709999918937683, 0.37700000405311584, 0.3803333342075348, 0.38499999046325684, 0.39133334159851074, 0.39800000190734863, 0.4046666622161865, 0.41066667437553406, 0.4129999876022339, 0.4166666567325592, 0.42133334279060364, 0.4269999861717224, 0.4323333203792572, 0.43566668033599854, 0.4399999976158142, 0.4440000057220459, 0.4493333399295807, 0.4533333480358124, 0.4573333263397217, 0.4593333303928375, 0.4623333215713501, 0.46833333373069763, 0.4699999988079071, 0.47333332896232605, 0.4753333330154419, 0.47999998927116394, 0.48266667127609253, 0.4869999885559082, 0.49300000071525574, 0.4959999918937683, 0.5013333559036255, 0.503000020980835, 0.5070000290870667, 0.5086666941642761, 0.5109999775886536, 0.515666663646698, 0.5170000195503235, 0.5199999809265137, 0.5223333239555359, 0.5263333320617676, 0.5293333530426025, 0.5339999794960022, 0.5393333435058594, 0.5423333048820496, 0.5460000038146973, 0.5476666688919067, 0.5513333082199097, 0.5543333292007446, 0.5556666851043701, 0.5586666464805603, 0.5606666803359985, 0.5643333196640015, 0.5659999847412109, 0.5706666707992554, 0.5733333230018616, 0.5770000219345093, 0.5803333520889282, 0.5870000123977661, 0.5899999737739563, 0.593666672706604, 0.5960000157356262, 0.5979999899864197, 0.6000000238418579, 0.6033333539962769, 0.6046666502952576, 0.6069999933242798, 0.6113333106040955, 0.6129999756813049, 0.6159999966621399, 0.6213333606719971, 0.6256666779518127, 0.6316666603088379, 0.6343333125114441, 0.637333333492279, 0.6399999856948853, 0.6443333625793457, 0.6453333497047424, 0.6470000147819519, 0.6503333449363708, 0.6523333191871643]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 4, 1, 7, 3, 2, 5, 2, 2, 5, 5, 8, 4, 0, 3, 8, 6, 1, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 1, 0, 3, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [1, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [19, 9, 44]], "fitness": -0.10057143121957779, "mapping_values": [1, 2, 2, 1, 1, 0, 36, 36, 21, 15, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), tf.math.add(beta, alpha)), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.6168954060015, 2.448694756506236, 2.275942913592531, 2.1574254496978367, 2.1183402255825032, 2.392652395048382, 2.345796794025984, 2.359256643015144, 2.3487555023040185], "accuracy": [0.20763438940048218, 0.14132875204086304, 0.1888786107301712, 0.24963676929473877, 0.25624093413352966, 0.12191256135702133, 0.09932637959718704, 0.10342095047235489, 0.09945846349000931], "val_loss": [2.0169831684657504, 1.9213646480015345, 1.6467139039720808, 1.5929794992719377, 2.0332694053649902, 2.0090713500976562, 1.9951202528817313, 2.009587219783238, 2.025256974356515], "val_accuracy": [0.09866666793823242, 0.20000000298023224, 0.2956666648387909, 0.32499998807907104, 0.12099999934434891, 0.10100000351667404, 0.1003333330154419, 0.09866666793823242, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 0, 4, 7, 3, 0, 3, 2, 2, 8, 3, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [3, 48, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [19, 46, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [9, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [0, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 3, 7, 5, 0, 5, 2, 2, 3, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 0, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [5, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1193680278.8289268, 21893468218.97028, 102456236886.52806, 286189583219.7427, 606616139484.6652, 1130068584872.4238], "accuracy": [0.0948355570435524, 0.10487385839223862, 0.10302469879388809, 0.09787346422672272, 0.09813763201236725, 0.09747721254825592], "val_loss": [4405858304.0, 35236070546.28571, 118909155035.42857, 281844861220.5714, 550463696310.8572, 951186957458.2858], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 9, 6, 4, 3, 0, 5, 2, 2, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 2, 0, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [18, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 6, 1, 8, 8, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 1, 7, 9, 9, 5, 2, 9, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 2, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 8, 0, 7, 5], [0, 0, 0, 0, 1, 1], [84, 77, 44, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 13, 8, 5, 4], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(alpha)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.square(tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.negative(alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [8, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 3, 4, 7, 3, 0, 3, 2, 2, 8, 3, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [2, 3, 0, 0, 1, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [3, 48, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [0, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 5, 5, 2, 1, 1, 0, 1, 0, 3, 1, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.300998405930924, 2.302231986745316, 2.302579726493905, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09681680053472519, 0.10593052208423615, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973043509892055, 1.9736442565917969, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09233333170413971, 0.10000000149011612, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 0, 4, 7, 3, 0, 3, 2, 2, 8, 3, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [5, 3, 0, 0, 1, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [3, 48, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 0, 5, 5, 0, 7, 5], [1, 3, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07396645098924637, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 1, 7, 4, 0, 5, 2, 2, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [2, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 18, 18, 11, 7, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, alpha)), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 1, 7, 9, 9, 5, 2, 9, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [48, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [4.158549559900601e+20, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05138026550412178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 1, 7, 3, 0, 5, 2, 2, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 60, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 12, 7, 5, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05138026550412178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [1, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 5, 7, 3, 0, 5, 2, 2, 3, 5, 8, 9, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 2, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 1, 19, 19, 13, 6, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 1, 7, 3, 0, 5, 2, 2, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [3, 48, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [0, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [20, 9, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 1, 1, 1, 0, 1, 1, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.square(grad)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3090327950264595, 2.3573354485012583, 2.4979511405089276, 3.35963962402767, 567.2372335399446, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07515519857406616, 0.031303659081459045, 0.01109496783465147, 0.011491216719150543, 0.08479725569486618, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9946364675249373, 2.0711649485996793, 2.3050646781921387, 5.740133285522461, 201051.47767857142, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.007333333138376474, 0.00566666666418314, 0.005333333276212215, 0.03099999949336052, 0.09966666996479034, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 1, 7, 3, 0, 6, 2, 2, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 3, 0, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 1, 0, 3, 1, 1], [7, 9, 44]], "fitness": -0.07571428269147873, "mapping_values": [1, 2, 2, 1, 1, 0, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.3017851268106746, 2.3010384642515738, 2.3005680179772297, 2.3011047432939407, 2.3004075364508507, 2.299408029996645, 2.30173282616363, 2.2994618344977704, 2.2998304251808266, 2.300112684751467, 2.2997586817206677, 2.299624220664554, 2.299672100128609, 2.299171197400227, 2.3002607055296753], "accuracy": [0.08981640636920929, 0.0936468094587326, 0.09576013684272766, 0.09126931428909302, 0.09430722147226334, 0.0944393053650856, 0.0940430611371994, 0.09813763201236725, 0.10408136248588562, 0.1006472036242485, 0.10196803510189056, 0.10236428678035736, 0.1026284471154213, 0.09840179979801178, 0.09840179979801178], "val_loss": [1.9702669552394323, 1.9700382777622767, 1.9700115748814173, 1.9699661391122, 1.9699910027640206, 1.9700143677847726, 1.9698634828839983, 1.9697256769452776, 1.9696761540004186, 1.9696589878627233, 1.9699030603681291, 1.9701245171683175, 1.9702772412981306, 1.9705240385872977, 1.9706817354474748], "val_accuracy": [0.0430000014603138, 0.04899999871850014, 0.055666666477918625, 0.06133333221077919, 0.06133333221077919, 0.06666667014360428, 0.07199999690055847, 0.07500000298023224, 0.07833333313465118, 0.0793333351612091, 0.07866666465997696, 0.0729999989271164, 0.07366666942834854, 0.07066666334867477, 0.07266666740179062]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [9, 4, 1, 7, 3, 0, 5, 2, 2, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 2, 3, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 1, 3, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 12, 7, 5, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.negative(alpha), alpha), tf.math.multiply(tf.math.add(sigma, tf.math.square(sigma)), tf.math.square(alpha)))", "other_info": {"loss": [2.302252398222476, 2.302168852869451, 2.3018480657570715, 2.3028490925036746, 2.3022549806128025, 2.3009334484095807], "accuracy": [0.08809932321310043, 0.09192973375320435, 0.09047681838274002, 0.08809932321310043, 0.09047681838274002, 0.09259014576673508], "val_loss": [1.9709810529436385, 1.970980507986886, 1.970980167388916, 1.9709796224321638, 1.9709788731166296, 1.9709785325186593], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 3, 7, 3, 0, 5, 2, 2, 3, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 0, 0, 1, 1, 2, 0, 3, 3, 3, 2, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 59, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 0, 0, 3, 1, 1], [43, 9, 44]], "fitness": -0.041999999433755875, "mapping_values": [1, 2, 2, 1, 1, 0, 19, 19, 10, 9, 3, 2, 1, 1, 0, 0, 12, 7, 5, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.square(grad))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.negative(alpha), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.square(alpha)))", "other_info": {"loss": [2.302252816549303, 2.3021700675099233, 2.3018498066126347, 2.302851597992909, 2.302258907764532, 2.3009374520530192], "accuracy": [0.08809932321310043, 0.09192973375320435, 0.09047681838274002, 0.0878351628780365, 0.09047681838274002, 0.09259014576673508], "val_loss": [1.9709816660199846, 1.9709817341395788, 1.9709817341395788, 1.9709818022591727, 1.9709818022591727, 1.9709820066179549], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 6, 1, 8, 7, 5, 3, 0, 2, 0, 2, 0, 0, 6, 6, 5, 2, 3, 9, 5], [2, 0, 2, 2, 1, 3, 3, 0, 3, 0, 0], [68], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 1, 8, 3, 8, 5, 2, 2, 0, 5, 8, 4, 1, 3, 8, 6, 8, 2, 8, 2, 4, 5, 8, 5, 5, 1, 2, 3, 7, 2, 9, 8, 6, 3, 5, 5, 5, 8, 3, 2, 1, 0, 0, 2, 8, 0], [3, 3, 2, 0, 3, 1, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 0, 0], [24, 16, 27, 94, 25, 77, 46, 37, 45, 26, 35, 4, 28], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0], [8, 4, 0, 3], [4, 2], [76], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 0, 3, 2, 5, 5, 0, 7, 5], [1, 3, 0, 3, 1, 1], [19, 9, 44]], "fitness": -0.0231428574770689, "mapping_values": [1, 2, 2, 1, 1, 0, 18, 18, 12, 6, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3041319814986085, 2.3087112045779348, 2.312925110120248, 2.3188594721563742, 2.3233449139441986, 2.327440547653398], "accuracy": [0.08426892012357712, 0.07858935743570328, 0.06973979622125626, 0.06155065447092056, 0.05045568570494652, 0.04477611929178238], "val_loss": [1.97520535332816, 1.9795123508998327, 1.9838495254516602, 1.988373143332345, 1.993074825831822, 1.9979686055864607], "val_accuracy": [0.022333333268761635, 0.014333332888782024, 0.009333333000540733, 0.008333333767950535, 0.007000000216066837, 0.006666666828095913]}}]