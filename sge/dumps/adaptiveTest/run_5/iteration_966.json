[{"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 3, 8, 3, 3, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7868571281433105, "mapping_values": [1, 4, 4, 2, 2, 1, 45, 45, 26, 19, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad), tf.math.subtract(alpha, grad)), alpha))), tf.math.add(beta, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.negative(grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad))))))))))), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2868436616661527, 2.2428360450159146, 2.1878031973573653, 2.095841507067093, 1.9619289895783105, 1.7910128280140578, 1.5975997553934842, 1.4391417123732582, 1.3147429926614909, 1.2297459413756187, 1.154631775793162, 1.0984920516635732, 1.0527050546635537, 1.0195742133995482, 0.9911306376124039, 0.9552061601227395, 0.9217052677398534, 0.9110408264648141, 0.8859845381985408, 0.8836137143265947, 0.8631798826613682, 0.8385403732487617, 0.8443693098469559, 0.8170957489414238, 0.813954006435219, 0.8011206979717577, 0.7899665923134966, 0.7902439332216202, 0.7815389764968667, 0.7815722517758753, 0.7739019321491533, 0.7555948036095848, 0.7638114919641692, 0.7394247492542828, 0.7375997143288676, 0.7389076914076855, 0.7375475848906737, 0.7300602154976751, 0.7315860091498373, 0.7184043807549452, 0.7162016238503058, 0.7070991507043864, 0.7079349178774104, 0.7018664111046822, 0.6972244384502612, 0.6896457136614196, 0.6889228438184781, 0.6915744051264419, 0.687523915436699, 0.6863049010574825, 0.6749568333982902, 0.6814898755635095, 0.6733298569606705, 0.6644923424975842, 0.6683379221727757, 0.6621740200516097, 0.6577832775345221, 0.6488374568814252, 0.6577525455733458, 0.64338123320494, 0.6382047819927494, 0.6456298277504361, 0.6483082308304419, 0.6443363408591407, 0.6338582173739725, 0.6311579644876842], "accuracy": [0.13089419901371002, 0.24105137586593628, 0.3203011453151703, 0.3773609697818756, 0.4155329465866089, 0.447761207818985, 0.5023114681243896, 0.5226522088050842, 0.5609562993049622, 0.5729758143424988, 0.5964865684509277, 0.6166952848434448, 0.6230352520942688, 0.6409985423088074, 0.6468101739883423, 0.6643772125244141, 0.6719059348106384, 0.672698438167572, 0.6791704893112183, 0.6837934255599976, 0.6893408894538879, 0.700171709060669, 0.6955488324165344, 0.707568347454071, 0.7069079279899597, 0.7077004313468933, 0.7157574892044067, 0.7161537408828735, 0.7166820764541626, 0.7161537408828735, 0.7182670831680298, 0.7219653725624084, 0.7276449799537659, 0.7255316376686096, 0.726192057132721, 0.7281733155250549, 0.7292299270629883, 0.7342491149902344, 0.7294940948486328, 0.7387399077415466, 0.7367587089538574, 0.744419515132904, 0.7375511527061462, 0.7421740889549255, 0.7477215528488159, 0.7519482374191284, 0.7446836829185486, 0.743891179561615, 0.7494386434555054, 0.7541936039924622, 0.754589855670929, 0.7528728246688843, 0.7518161535263062, 0.757099449634552, 0.7557786107063293, 0.7532690763473511, 0.755118191242218, 0.765949010848999, 0.7581561207771301, 0.7614582180976868, 0.7640998363494873, 0.7671377658843994, 0.7633073329925537, 0.7618544697761536, 0.7676661014556885, 0.7696473598480225], "val_loss": [1.9338974271501814, 1.8875413622174944, 1.8180388041904993, 1.706852810723441, 1.5474677085876465, 1.3568947315216064, 1.1723787443978446, 1.0298781735556466, 0.9265824726649693, 0.8547974314008441, 0.7996669667107719, 0.7606700488499233, 0.7281165633882795, 0.7034649167742048, 0.6843901532036918, 0.6632183279309954, 0.6509928022112165, 0.6352337769099644, 0.6276391233716693, 0.6170762266431536, 0.6049700123923165, 0.5967004299163818, 0.5917232717786517, 0.5842444385801043, 0.5768724509647915, 0.5752443586077008, 0.5655202525002616, 0.5634416682379586, 0.5557790313448224, 0.5541863782065255, 0.5469624144690377, 0.549140385219029, 0.5412727424076625, 0.5341086387634277, 0.5306340966905866, 0.5301542622702462, 0.5281618152345929, 0.522294419152396, 0.5215344599315098, 0.5206905773707798, 0.5134026323046003, 0.5106954404285976, 0.5106951338904244, 0.5061636652265277, 0.5025125401360648, 0.5022683824811663, 0.5013104677200317, 0.49620379720415386, 0.49635863304138184, 0.4980923448290144, 0.49001361642565044, 0.49046833174569265, 0.48580609049115864, 0.48778997148786274, 0.48300487654549734, 0.48218534673963276, 0.4805115120751517, 0.4765030826841082, 0.47667855875832693, 0.47644766739436556, 0.4706121172223772, 0.4728142533983503, 0.47024619579315186, 0.4700851781027658, 0.4675449473517282, 0.4640963077545166], "val_accuracy": [0.3333333432674408, 0.4230000078678131, 0.48633334040641785, 0.5316666960716248, 0.5770000219345093, 0.6013333201408386, 0.6206666827201843, 0.6620000004768372, 0.6790000200271606, 0.6866666674613953, 0.6983333230018616, 0.7059999704360962, 0.7193333506584167, 0.7163333296775818, 0.7293333411216736, 0.7310000061988831, 0.7310000061988831, 0.737666666507721, 0.7276666760444641, 0.7390000224113464, 0.7459999918937683, 0.7450000047683716, 0.7423333525657654, 0.7459999918937683, 0.7523333430290222, 0.7583333253860474, 0.7590000033378601, 0.7596666812896729, 0.7613333463668823, 0.7593333125114441, 0.7699999809265137, 0.762333333492279, 0.7670000195503235, 0.7703333497047424, 0.7716666460037231, 0.7753333449363708, 0.7713333368301392, 0.7749999761581421, 0.7773333191871643, 0.7763333320617676, 0.7770000100135803, 0.778333306312561, 0.7739999890327454, 0.7773333191871643, 0.781000018119812, 0.7776666879653931, 0.7776666879653931, 0.7829999923706055, 0.781000018119812, 0.7736666798591614, 0.7860000133514404, 0.7916666865348816, 0.7856666445732117, 0.7919999957084656, 0.7870000004768372, 0.7870000004768372, 0.7896666526794434, 0.7946666479110718, 0.7926666736602783, 0.7879999876022339, 0.8016666769981384, 0.7866666913032532, 0.796999990940094, 0.7996666431427002, 0.800000011920929, 0.79666668176651]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 6, 8, 3, 9, 4, 8, 1, 0, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7808571457862854, "mapping_values": [1, 4, 4, 2, 2, 1, 33, 33, 20, 13, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)))), tf.math.subtract(alpha, grad)), alpha), tf.math.add(beta, grad)), grad))), tf.math.negative(tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad))))))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2868436616661527, 2.2428360450159146, 2.1878032195270496, 2.095837584953928, 1.9619154585130525, 1.790971415169786, 1.5973942710140583, 1.438966898697085, 1.3146191871618125, 1.229666187699917, 1.154594369820159, 1.0984620873040967, 1.0527260128722105, 1.0195837928288018, 0.9911590726100663, 0.9551790214060415, 0.9216625348310177, 0.9110193341131995, 0.8859493589325667, 0.8835554941297916, 0.8631934948396437, 0.8385497922627145, 0.8443808354532808, 0.817104642007959, 0.8138966585399138, 0.801091336208863, 0.7900550015189031, 0.790373960277896, 0.7815432732981651, 0.7814652634460566, 0.7738957966732831, 0.7555107777349512, 0.7638395266006368, 0.7394592363946804, 0.7376112448477931, 0.7389500627995104, 0.7375163006004704, 0.7299545788730314, 0.7314467219597218, 0.718297389653916, 0.7160382850326646, 0.7071080401337079, 0.7079600006393107, 0.7017612683774616, 0.6971227330711807, 0.6895104774378861, 0.6885895400062418, 0.6913645522406451, 0.6875441597122416, 0.6862537458887379, 0.6750029451764255, 0.681381754879277, 0.6733659832642268, 0.6641609225967824, 0.6682775476825645, 0.6621041219578664, 0.6578051504237289], "accuracy": [0.13089419901371002, 0.24105137586593628, 0.3203011453151703, 0.3774930536746979, 0.4157971143722534, 0.447761207818985, 0.5024435520172119, 0.523048460483551, 0.5605600476264954, 0.573107898235321, 0.5967507362365723, 0.6166952848434448, 0.6229031682014465, 0.6407343745231628, 0.6472064256668091, 0.663848876953125, 0.6716417670249939, 0.672170102596283, 0.6794346570968628, 0.6839255094528198, 0.6897371411323547, 0.6997754573822021, 0.6956809163093567, 0.707568347454071, 0.707040011882782, 0.7078325152397156, 0.7150970697402954, 0.7165499925613403, 0.7161537408828735, 0.7165499925613403, 0.7186633348464966, 0.7219653725624084, 0.7276449799537659, 0.7263241410255432, 0.7269845604896545, 0.7276449799537659, 0.7298903465270996, 0.7338528633117676, 0.7285695672035217, 0.7388719916343689, 0.7368907928466797, 0.743891179561615, 0.737947404384613, 0.7427024245262146, 0.7467969655990601, 0.7511557340621948, 0.7445515990257263, 0.7442874312400818, 0.7490423917770386, 0.7536653280258179, 0.7552502751350403, 0.7523444890975952, 0.7520803213119507, 0.7568352818489075, 0.7557786107063293, 0.7541936039924622, 0.755118191242218], "val_loss": [1.9338973590305872, 1.8875393867492676, 1.8180396897452218, 1.7068422521863664, 1.5474632808140345, 1.356733969279698, 1.1721324920654297, 1.029698405947004, 0.9264791693006244, 0.854756338255746, 0.7996411834444318, 0.7606457812445504, 0.728135347366333, 0.7034496068954468, 0.6843616451535907, 0.663284420967102, 0.6510299614497593, 0.6352260283061436, 0.6275835377829415, 0.6171519415719169, 0.6048519781657627, 0.5966440439224243, 0.5917582852499825, 0.5842369965144566, 0.5769091163362775, 0.5750750984464373, 0.5655424083982196, 0.5631287608827863, 0.5555302585874285, 0.5541158063071114, 0.5468226671218872, 0.5493564094815936, 0.5413554055350167, 0.5341209173202515, 0.5305862767355782, 0.52983900478908, 0.527706674167088, 0.5222081967762539, 0.5211883442742484, 0.5207726274217878, 0.5132321289607457, 0.5104643957955497, 0.5105923243931362, 0.505968451499939, 0.5024509940828595, 0.5017326559339251, 0.5009722028459821, 0.496114901133946, 0.4962071180343628, 0.49806816237313406, 0.49005825178963797, 0.49061117853437153, 0.4856109619140625, 0.4878008025033133, 0.48290673324040007, 0.4821603468486241, 0.480507493019104], "val_accuracy": [0.3333333432674408, 0.4230000078678131, 0.48633334040641785, 0.5316666960716248, 0.5766666531562805, 0.6013333201408386, 0.6213333606719971, 0.6620000004768372, 0.6786666512489319, 0.6866666674613953, 0.6983333230018616, 0.706333339214325, 0.7193333506584167, 0.7163333296775818, 0.7296666502952576, 0.7303333282470703, 0.7306666374206543, 0.737666666507721, 0.7273333072662354, 0.7379999756813049, 0.746999979019165, 0.7450000047683716, 0.7416666746139526, 0.746666669845581, 0.7519999742507935, 0.7580000162124634, 0.7586666941642761, 0.7583333253860474, 0.762333333492279, 0.7586666941642761, 0.7706666588783264, 0.762333333492279, 0.7680000066757202, 0.7710000276565552, 0.7720000147819519, 0.7753333449363708, 0.7723333239555359, 0.7746666669845581, 0.7773333191871643, 0.7776666879653931, 0.7763333320617676, 0.777999997138977, 0.7733333110809326, 0.7776666879653931, 0.781333327293396, 0.777999997138977, 0.777999997138977, 0.7823333144187927, 0.7823333144187927, 0.7736666798591614, 0.7846666574478149, 0.7916666865348816, 0.7853333353996277, 0.7916666865348816, 0.7879999876022339, 0.7870000004768372, 0.7910000085830688]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 2, 3, 0, 2, 6, 2, 3, 8, 1, 9, 4, 8, 1, 5, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 1, 1, 1, 3, 3, 0, 0, 2, 3, 2, 3, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7794285416603088, "mapping_values": [1, 5, 5, 3, 2, 1, 20, 20, 12, 8, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), alpha), tf.math.pow(alpha, grad)))), grad)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.113872450498022, 1.3823026510324807, 1.039277030334906, 0.976161518187933, 0.8573425516255889, 0.7769888862564013, 0.7529691062221091, 0.7277754924599962, 0.6945668065379466, 0.7111700370941243, 0.6668247657760007, 0.661762401884762, 0.6418711498759568, 0.6215219648837602, 0.6052290960278384, 0.613290375596292, 0.6259606318183468, 0.6061678679234096], "accuracy": [0.31118741631507874, 0.5235767960548401, 0.632941484451294, 0.6420552134513855, 0.6859067678451538, 0.7177387475967407, 0.717870831489563, 0.72672039270401, 0.7384757399559021, 0.7317395210266113, 0.7506273984909058, 0.7498348951339722, 0.755118191242218, 0.7689869403839111, 0.772288978099823, 0.7726852297782898, 0.7675340175628662, 0.7705719470977783], "val_loss": [1.2642410823277064, 0.8516330378396171, 0.7642692497798375, 0.6265624761581421, 0.6080127273287091, 0.593256950378418, 0.5551190716879708, 0.5423518078667777, 0.6125662156513759, 0.5101835557392665, 0.539900643484933, 0.5130018166133335, 0.4961719683238438, 0.4946124723979405, 0.5082592964172363, 0.5326299497059414, 0.48383050305502756, 0.49207113470349995], "val_accuracy": [0.6140000224113464, 0.6683333516120911, 0.6690000295639038, 0.7223333120346069, 0.7353333234786987, 0.737333357334137, 0.7546666860580444, 0.7633333206176758, 0.7070000171661377, 0.7646666765213013, 0.7519999742507935, 0.7713333368301392, 0.7839999794960022, 0.7599999904632568, 0.7516666650772095, 0.7586666941642761, 0.7770000100135803, 0.7553333044052124]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 1, 9, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 0, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [58, 70, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7734285593032837, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 11, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(grad, grad))), tf.math.add(beta, alpha)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.286840027727392, 2.242753305644281, 2.187413343774203, 2.094531688928258, 1.9587102570412198, 1.7851995537860785, 1.589806163032309, 1.4314788065377386, 1.3081075722562512, 1.224215525772121, 1.1498174713177844, 1.0943732090031608, 1.0488476652542298, 1.0164606088125128, 0.9882826843376347, 0.9528932341841533, 0.9195928698155418, 0.9089523490787481, 0.8841091690203926, 0.8817922757396514, 0.8616582121453533, 0.8372624667801515, 0.843031592971188, 0.815877172185162, 0.8125446839119072, 0.8001935731434094, 0.7890424727133913, 0.7893286600025999, 0.7807751313932442, 0.7810701131112131, 0.7733138283135759, 0.7547067305620052, 0.7632255063962627, 0.7387169657791485, 0.7374093376445481, 0.7380800036123762, 0.7371343465103938, 0.7297066338010956, 0.7306296050099806, 0.7177170354849816, 0.7157628695962609, 0.7067518569711114, 0.7074799160474894, 0.7014541427897991], "accuracy": [0.13089419901371002, 0.24118345975875854, 0.3206973969936371, 0.3781534731388092, 0.416589617729187, 0.448949933052063, 0.5024435520172119, 0.525029718875885, 0.5610883831977844, 0.5748249888420105, 0.5980715751647949, 0.6172236204147339, 0.6234315037727356, 0.6419231295585632, 0.6482630968093872, 0.6654338836669922, 0.672698438167572, 0.6741513609886169, 0.6800950765609741, 0.6844538450241089, 0.6910579800605774, 0.700171709060669, 0.6959450244903564, 0.7077004313468933, 0.7065116763114929, 0.7071720957756042, 0.7160216569900513, 0.7165499925613403, 0.7168141603469849, 0.7156254053115845, 0.7181349992752075, 0.7230220437049866, 0.7281733155250549, 0.726192057132721, 0.7265883088111877, 0.7301545143127441, 0.7294940948486328, 0.7325320243835449, 0.7277770638465881, 0.7383436560630798, 0.7376832365989685, 0.7436270117759705, 0.7374191284179688, 0.7428345084190369], "val_loss": [1.9338709967476981, 1.8873203141348702, 1.8172486850193568, 1.7045747893197196, 1.5424187183380127, 1.3489701407296317, 1.163062504359654, 1.0214974199022566, 0.9201507568359375, 0.8496537378856114, 0.7954897710255214, 0.7573309285300118, 0.7254266398293632, 0.7013822964259556, 0.6823910304478237, 0.661407470703125, 0.6496787071228027, 0.6341091053826469, 0.6266529389790126, 0.6158486093793597, 0.6039066144398281, 0.5956656081335885, 0.5910248415810722, 0.5835353306361607, 0.5761795043945312, 0.5747876507895333, 0.565025772367205, 0.5633070979799543, 0.5551866122654506, 0.5539849315370832, 0.5468318802969796, 0.5488048791885376, 0.5411396707807269, 0.5337646518434797, 0.5304723296846662, 0.5302654845373971, 0.5278670617512294, 0.5223561525344849, 0.5212170226233346, 0.520729626928057, 0.5132358585085187, 0.5105944361005511, 0.5107261964253017, 0.5063519477844238], "val_accuracy": [0.3333333432674408, 0.42366665601730347, 0.4869999885559082, 0.5326666831970215, 0.578000009059906, 0.6013333201408386, 0.621999979019165, 0.6643333435058594, 0.6796666383743286, 0.687333345413208, 0.699999988079071, 0.706333339214325, 0.7206666469573975, 0.7166666388511658, 0.731333315372467, 0.731333315372467, 0.7306666374206543, 0.7386666536331177, 0.7269999980926514, 0.7390000224113464, 0.7456666827201843, 0.7456666827201843, 0.7429999709129333, 0.7459999918937683, 0.753000020980835, 0.7573333382606506, 0.7583333253860474, 0.7593333125114441, 0.7606666684150696, 0.7583333253860474, 0.7683333158493042, 0.7633333206176758, 0.7676666378974915, 0.7673333287239075, 0.7720000147819519, 0.7756666541099548, 0.7723333239555359, 0.7726666927337646, 0.7776666879653931, 0.7756666541099548, 0.7766666412353516, 0.7770000100135803, 0.7730000019073486, 0.7770000100135803]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [5, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [48, 86, 89, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.30142858624458313, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.403992421559969, 2.269620088081728, 2.640225533150474, 3.116908640767668, 2.8490083354921736, 2.819277169792297, 2.9875574770415887], "accuracy": [0.15968827903270721, 0.1838594675064087, 0.15572579205036163, 0.11966715008020401, 0.08875974267721176, 0.09972262382507324, 0.09655263274908066], "val_loss": [1.9254767554146903, 1.7795727593558175, 3.3430260249546597, 2.4472009795052663, 2.4646317618233815, 2.560173375265939, 2.726287637438093], "val_accuracy": [0.3866666555404663, 0.4073333442211151, 0.2096666693687439, 0.054666668176651, 0.10566666722297668, 0.10599999874830246, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 9, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [7, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302719578152839, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 6, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302719578152839, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 5, 5, 3, 2, 6, 2, 2, 8, 3, 9, 4, 2, 1, 3, 1, 1, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [48, 86, 20, 59, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 30, 30, 17, 13, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(grad, alpha))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, grad), beta))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 0, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 0, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07898560166358948, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 9, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 4, 3, 1, 1, 2, 3, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 0, 3, 3, 3, 3, 0, 1, 3, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [63, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 42, 42, 26, 16, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad)), grad)))))), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), grad)), tf.math.add(beta, grad))), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3206404815213304, 2.3761656762366092, 2.496742319264007, 3.6757337990658647, 2.881169370815846e+27, 2.303124494461918, 2.3031430915519624, 2.303158996505445, 2.3031782507502787], "accuracy": [0.06075815483927727, 0.021001188084483147, 0.010302470065653324, 0.03975696861743927, 0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0132850238255093, 2.0825705528259277, 2.269458770751953, 14.865183694022042, 1.9741695267813546, 1.9741849218096053, 1.9742003849574499, 1.9742176873343331, 1.9742345128740584], "val_accuracy": [0.004999999888241291, 0.004333333112299442, 0.0063333334401249886, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 2, 2, 9, 2, 6, 8, 3, 9, 4, 1, 1, 3, 1, 6, 2, 7, 9, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 0, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 37, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9276.840864075204, 170176.61974144762, 786421.7247391362, 2142804.503929468, 4649998.666160349, 8607866.803196408], "accuracy": [0.1014397069811821, 0.09853387624025345, 0.0944393053650856, 0.10513802617788315, 0.09628847241401672, 0.0948355570435524], "val_loss": [34314.197544642855, 269454.58035714284, 904193.6785714285, 2137300.3571428573, 4167541.0, 7193680.571428572], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 4, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [48, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 2, 2, 1, 1, 1, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.pow(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 6, 8, 3, 9, 4, 8, 1, 0, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [58, 70, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302719578152839, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 9, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [37, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302719578152839, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [8, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 0, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [58, 70, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(grad, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 0, 1, 6, 4, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [26], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 1, 2, 1, 22, 22, 13, 9, 2, 1, 1, 0, 1, 1, 3, 2, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(tf.math.square(tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))))), tf.math.add(grad, alpha))), grad), tf.math.add(beta, grad)), alpha), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3030124489720376, 2.301609178528479, 2.3030937139966845, 2.302917735325646, 2.301319647710778, 2.3050050441032512], "accuracy": [0.08968432247638702, 0.08928807079792023, 0.08585391938686371, 0.0874389111995697, 0.09311848133802414, 0.08453308790922165], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 6, 8, 3, 9, 4, 8, 1, 0, 4, 0, 2, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 2, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [55, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 21, 21, 12, 9, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), grad))), grad))), tf.math.pow(tf.math.add(beta, beta), grad)))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3030124489720376, 2.301609178528479, 2.3030937139966845, 2.302917735325646, 2.301319647710778, 2.3050050441032512], "accuracy": [0.08968432247638702, 0.08928807079792023, 0.08585391938686371, 0.0874389111995697, 0.09311848133802414, 0.08453308790922165], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [43, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3030124489720376, 2.301609178528479, 2.3030937139966845, 2.302917735325646, 2.301319647710778, 2.3050050441032512], "accuracy": [0.08968432247638702, 0.08928807079792023, 0.08585391938686371, 0.0874389111995697, 0.09311848133802414, 0.08453308790922165], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 6, 8, 3, 9, 4, 8, 1, 0, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3030126423899366, 2.3016097543104497, 2.3030949555619866, 2.3029191298743656, 2.3013214740959755, 2.3050071629456337], "accuracy": [0.08968432247638702, 0.08928807079792023, 0.08585391938686371, 0.0874389111995697, 0.09311848133802414, 0.08453308790922165], "val_loss": [1.9710071427481515, 1.9710074833461217, 1.9710078920636858, 1.971008028302874, 1.9710084370204382, 1.9710089138575964], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 6, 3, 0, 2, 6, 2, 6, 8, 3, 9, 2, 8, 1, 0, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 2, 1, 3, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.029999999329447746, "mapping_values": [1, 3, 3, 2, 1, 0, 30, 30, 18, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)))), tf.math.sqrt(beta)), alpha)), grad))), tf.math.add(beta, grad)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(grad, grad)))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3034769188474433, 2.303532550048677, 2.3073156600174194, 2.308888057723352, 2.3101335070341364, 2.3180157731096145], "accuracy": [0.08902391046285629, 0.08651433140039444, 0.08268392831087112, 0.08215559273958206, 0.0816272646188736, 0.07145687192678452], "val_loss": [1.9720499174935477, 1.973503249032157, 1.9752937044416154, 1.977194036756243, 1.9795992715018136, 1.9824819564819336], "val_accuracy": [0.03400000184774399, 0.028999999165534973, 0.024000000208616257, 0.02033333294093609, 0.019333332777023315, 0.02199999988079071]}}]