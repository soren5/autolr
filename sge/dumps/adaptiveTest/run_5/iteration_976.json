[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7991428375244141, "mapping_values": [1, 4, 4, 2, 2, 1, 58, 58, 36, 22, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, alpha), alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), beta))))), tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), beta)), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2597766508279524, 1.8438198493535036, 1.3187339713529054, 0.9507723713846978, 0.8547728332183963, 0.783148292151456, 0.7289894431132713, 0.6868699136159486, 0.6499368922349217, 0.6237055336117445, 0.5950114688837391, 0.5700545309242114, 0.5440838226332342, 0.5242769985607728, 0.5102330534103257, 0.48203198166728695, 0.47447498290923923, 0.45829578709010327, 0.4450664119933968, 0.4283288817923098, 0.4221691626756734, 0.4119312169529491, 0.39100651721897034, 0.3891359672861612, 0.3788065646444534, 0.3767268354386355, 0.37157509775996883, 0.3629166998009498, 0.34829258095271803, 0.3412830033054788, 0.3308563460220105, 0.32533541847654635, 0.31374786649917363, 0.312544326850877, 0.29684862957189995, 0.29835015621561306, 0.28888947755716354, 0.2884022968910657, 0.27626066526889864], "accuracy": [0.20076608657836914, 0.4325716495513916, 0.5495971441268921, 0.6514331102371216, 0.6921146512031555, 0.7091533541679382, 0.7235503792762756, 0.7520803213119507, 0.7557786107063293, 0.7691190242767334, 0.7779685854911804, 0.7887993454933167, 0.7977809906005859, 0.809140145778656, 0.8084797263145447, 0.8252542614936829, 0.8304054737091064, 0.8337075710296631, 0.8379341959953308, 0.8428213000297546, 0.848368763923645, 0.8510104417800903, 0.8603883385658264, 0.8593316674232483, 0.8617091774940491, 0.86553955078125, 0.8668603897094727, 0.8672566413879395, 0.8753136992454529, 0.8730682730674744, 0.8821820020675659, 0.883238673210144, 0.8897107243537903, 0.8858803510665894, 0.8877294659614563, 0.8865407705307007, 0.8960506916046143, 0.8927486538887024, 0.8961827754974365], "val_loss": [1.8140373229980469, 0.9973536900111607, 0.7125001464571271, 0.6825897353036063, 0.5977264472416469, 0.5587109327316284, 0.5371688944952828, 0.49592416627066477, 0.4798732655388968, 0.4579942226409912, 0.43929663726261686, 0.41935512849262785, 0.4100852353232248, 0.3993660807609558, 0.3868960908481053, 0.3797571999686105, 0.3663630315235683, 0.35785634177071707, 0.3542106236730303, 0.3463555489267622, 0.34291495595659527, 0.33982090439115253, 0.3388698697090149, 0.3295027358191354, 0.32855941568102154, 0.3269260696002415, 0.3245652658598764, 0.3201339840888977, 0.3160593169076102, 0.32046503680092947, 0.3162921156202044, 0.3124267544065203, 0.31220464195523945, 0.3123631647654942, 0.3170847977910723, 0.315989545413426, 0.31336339030947, 0.311524110180991, 0.3134190355028425], "val_accuracy": [0.468666672706604, 0.6480000019073486, 0.7046666741371155, 0.7133333086967468, 0.722000002861023, 0.753333330154419, 0.768666684627533, 0.7713333368301392, 0.7860000133514404, 0.7919999957084656, 0.8043333292007446, 0.8153333067893982, 0.8293333053588867, 0.8276666402816772, 0.8373333215713501, 0.8343333601951599, 0.8460000157356262, 0.8496666550636292, 0.8510000109672546, 0.8543333411216736, 0.8603333234786987, 0.8603333234786987, 0.862333357334137, 0.8666666746139526, 0.8673333525657654, 0.8709999918937683, 0.862666666507721, 0.8696666955947876, 0.8703333139419556, 0.8673333525657654, 0.8740000128746033, 0.8726666569709778, 0.8676666617393494, 0.875333309173584, 0.8726666569709778, 0.8743333220481873, 0.8733333349227905, 0.8740000128746033, 0.874666690826416]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 2, 3, 5, 3, 3, 8, 9, 1, 0, 9, 3, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7928571701049805, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2852193150364757, 2.2461860551495265, 2.192372647290374, 2.1007694957782532, 1.970039728153588, 1.7987214867559485, 1.6216851091498254, 1.45661918625084, 1.3241640511064199, 1.2467245325168614, 1.172332381024384, 1.1078386419500579, 1.0693512374635827, 1.0160817779396913, 0.9927421232350608, 0.964073633150953, 0.9478263317271152, 0.9148998836862602, 0.9039982645471634, 0.8856413435816308, 0.8758147753083301, 0.858585041252031, 0.8389952258741883, 0.8262808499177527, 0.8206928053142813, 0.8169933250787755, 0.8067657204745641, 0.7974393183229905, 0.7861171686622556, 0.7700952486181933, 0.7642397514077351, 0.7560891528737984, 0.7637259412388114, 0.7481141665970346, 0.7567227626316079, 0.7478215105860162, 0.7303663722402179, 0.7317909944122021, 0.7287608533487533, 0.7186884087987816, 0.7106689154007463, 0.7089814499872803, 0.7134804573545304, 0.6956660887426972, 0.6988080698721728, 0.6960628670141477, 0.6842854321593417, 0.6927916172662069, 0.6858204830560418, 0.6861862955532999, 0.6782010035381939, 0.6775519316773673, 0.6739452228396875, 0.675315325349282, 0.6554666520298716, 0.661706083706735, 0.6540652326604772, 0.6678776519094807, 0.6541519590404135, 0.655158218777238, 0.6463477653503544, 0.645481436551129, 0.6515772697507052, 0.6408804748052336, 0.6383317146460614, 0.6334278664773466, 0.6324678868067153, 0.6425113526349212, 0.6271486046323372, 0.6286859895102557, 0.6252881766955898, 0.6185602029993896, 0.6208633083582964, 0.6217531926675071], "accuracy": [0.136045441031456, 0.23035265505313873, 0.30880993604660034, 0.38502180576324463, 0.42068418860435486, 0.4519878625869751, 0.4827631711959839, 0.5227842926979065, 0.5494650602340698, 0.5663716793060303, 0.5893540978431702, 0.6090344786643982, 0.617751955986023, 0.6431118845939636, 0.648659348487854, 0.6642451286315918, 0.6581693291664124, 0.6707172393798828, 0.6734909415245056, 0.685510516166687, 0.6818121671676636, 0.6900013089179993, 0.7025492191314697, 0.6977941989898682, 0.7041342258453369, 0.7046625018119812, 0.702681303024292, 0.7125874757766724, 0.7112666964530945, 0.7224937081336975, 0.7195879220962524, 0.7288337349891663, 0.720380425453186, 0.7202483415603638, 0.7238145470619202, 0.7265883088111877, 0.7343811988830566, 0.7312111854553223, 0.7338528633117676, 0.7376832365989685, 0.7391361594200134, 0.7428345084190369, 0.7391361594200134, 0.7416457533836365, 0.7440232634544373, 0.7448157668113708, 0.7504953145980835, 0.7452120184898376, 0.7515519857406616, 0.7475894689559937, 0.7467969655990601, 0.7508915662765503, 0.7534011602401733, 0.7582882046699524, 0.7605336308479309, 0.754589855670929, 0.7578919529914856, 0.7535332441329956, 0.7578919529914856, 0.7623828053474426, 0.7626469135284424, 0.7631752490997314, 0.7594769597053528, 0.7651565074920654, 0.7642319202423096, 0.7711002230644226, 0.7642319202423096, 0.7684586048126221, 0.7663452625274658, 0.7712323069572449, 0.7672698497772217, 0.7758552432060242, 0.7730814814567566, 0.7689869403839111], "val_loss": [1.9340216772896903, 1.889587470463344, 1.8234371457781111, 1.7166827746800013, 1.561964477811541, 1.373612540108817, 1.1923870018550329, 1.0461417266300745, 0.9381437982831683, 0.8667189223425729, 0.8081434965133667, 0.765542881829398, 0.7340740987232753, 0.7058598824909755, 0.6855355160576957, 0.6681613922119141, 0.6555019957678658, 0.6398862770625523, 0.629958953176226, 0.6197838612965175, 0.6105364050183978, 0.6026739392961774, 0.5937975645065308, 0.5877870150974819, 0.5798242773328509, 0.5742742844990322, 0.5665618181228638, 0.5618363618850708, 0.5593711818967547, 0.5542494399206979, 0.5519395555768695, 0.546958293233599, 0.5417439426694598, 0.5366617441177368, 0.537635258265904, 0.5315660067967006, 0.5289786202566964, 0.5260565962110247, 0.5230718851089478, 0.5204142502376011, 0.516508970941816, 0.5146374021257673, 0.5120244537081037, 0.507873364857265, 0.5049286740166801, 0.5041561807904925, 0.4985149587903704, 0.4982221637453352, 0.4986130510057722, 0.4934190682002476, 0.4938885825020926, 0.4938364028930664, 0.48733343396868023, 0.4886603355407715, 0.4846666710717337, 0.4811678613935198, 0.48379973002842497, 0.48133017335619244, 0.4770547832761492, 0.4760893242699759, 0.473723258290972, 0.47384616306849886, 0.47188213893345426, 0.47225286279405865, 0.46867660113743376, 0.46652185916900635, 0.46962996891566683, 0.46730715887887136, 0.4633022035871233, 0.4633693184171404, 0.4608738592692784, 0.4592886141368321, 0.4572479213987078, 0.45657440594264437], "val_accuracy": [0.32899999618530273, 0.41100001335144043, 0.4690000116825104, 0.5220000147819519, 0.5590000152587891, 0.5920000076293945, 0.612666666507721, 0.656000018119812, 0.6880000233650208, 0.6886666417121887, 0.7016666531562805, 0.7016666531562805, 0.7146666646003723, 0.7213333249092102, 0.7129999995231628, 0.7293333411216736, 0.7286666631698608, 0.7329999804496765, 0.7333333492279053, 0.7390000224113464, 0.7429999709129333, 0.7463333606719971, 0.7456666827201843, 0.7473333477973938, 0.746999979019165, 0.7613333463668823, 0.7590000033378601, 0.7583333253860474, 0.7480000257492065, 0.7586666941642761, 0.7683333158493042, 0.7583333253860474, 0.7670000195503235, 0.7713333368301392, 0.7646666765213013, 0.7716666460037231, 0.7680000066757202, 0.7699999809265137, 0.7766666412353516, 0.7739999890327454, 0.7746666669845581, 0.7753333449363708, 0.7720000147819519, 0.777999997138977, 0.7823333144187927, 0.7753333449363708, 0.7833333611488342, 0.781000018119812, 0.781333327293396, 0.7863333225250244, 0.7793333530426025, 0.7846666574478149, 0.7826666831970215, 0.7893333435058594, 0.7879999876022339, 0.7950000166893005, 0.7886666655540466, 0.7879999876022339, 0.7889999747276306, 0.7956666946411133, 0.7919999957084656, 0.7889999747276306, 0.7916666865348816, 0.7873333096504211, 0.7960000038146973, 0.7986666560173035, 0.7900000214576721, 0.800000011920929, 0.8050000071525574, 0.7979999780654907, 0.7973333597183228, 0.8016666769981384, 0.8013333082199097, 0.800000011920929]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 0, 2, 9, 0, 3, 5, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 5, 0, 2, 3, 2, 2, 9, 8, 8, 2, 7, 7, 9, 9], [3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 3, 3, 3, 2, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3], [33, 60, 78, 21, 12, 47, 35, 65, 86], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7825714349746704, "mapping_values": [1, 4, 4, 2, 2, 1, 62, 62, 40, 22, 6, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), alpha)))), tf.math.negative(tf.math.multiply(tf.math.square(tf.math.square(grad)), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, grad))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), beta))), tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))))), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))))))))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, beta), grad)))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2852151596377697, 2.246107408666907, 2.1920398763929456, 2.0996047973380882, 1.967027836692426, 1.7931176251298195, 1.6141986079802366, 1.4490913042003737, 1.3173377132371684, 1.2411883914979254, 1.167533960009862, 1.1036995016840454, 1.0658330746834477, 1.0129926647681444, 0.9898402383928648, 0.9617541926002553, 0.9453105892109723, 0.9128149687936828, 0.9021047631023016, 0.8837556665867327, 0.874128808812726, 0.8570105857963118, 0.8377503608558251, 0.8248651002644075, 0.8195625164442374, 0.8160843007112019, 0.8058973422785477, 0.7964736273134105, 0.7852264770569031, 0.7692609776311846, 0.7636701759094134, 0.7553845070073192, 0.76304997999938, 0.7476111664795337, 0.7563049375672366, 0.747537139510403, 0.7300945129833516, 0.7316610113252754, 0.7282691870021026, 0.7183954564808004, 0.7102906149470685, 0.708659501965996, 0.7133291146113117, 0.695545448122905, 0.698505196006401, 0.6959240519926454, 0.6838944163840162, 0.6925826895632181, 0.6856330499484035, 0.6860249654854041, 0.6781226691474154, 0.677532436927674, 0.6735504819118368, 0.6753461236856743, 0.6554850282418399, 0.6613762823975774, 0.6541380402733542, 0.6679384805475638, 0.6539800395472427, 0.6549908754580277, 0.6464042818667536], "accuracy": [0.136045441031456, 0.23022057116031647, 0.3086778521537781, 0.38502180576324463, 0.4205521047115326, 0.4519878625869751, 0.483819842338562, 0.5241051316261292, 0.5517104864120483, 0.5667679309844971, 0.5889578461647034, 0.6110157370567322, 0.6199973821640015, 0.6436402201652527, 0.6489235162734985, 0.6646413803100586, 0.6592260003089905, 0.6709813475608826, 0.6740192770957947, 0.6863030195236206, 0.6828688383102417, 0.6911900639533997, 0.7017567157745361, 0.6976621150970459, 0.7041342258453369, 0.7041342258453369, 0.7041342258453369, 0.7125874757766724, 0.7112666964530945, 0.722757875919342, 0.7187954187393188, 0.7284374833106995, 0.7206445932388306, 0.7201162576675415, 0.7238145470619202, 0.726192057132721, 0.7341170310974121, 0.7292299270629883, 0.7354378700256348, 0.737022876739502, 0.7384757399559021, 0.7430986762046814, 0.7395324110984802, 0.7427024245262146, 0.7442874312400818, 0.7442874312400818, 0.7500990629196167, 0.7454761862754822, 0.7512878179550171, 0.7478536367416382, 0.7479857206344604, 0.7500990629196167, 0.7535332441329956, 0.7588165402412415, 0.7604015469551086, 0.7559106945991516, 0.7573636174201965, 0.7532690763473511, 0.7572315335273743, 0.7633073329925537, 0.763439416885376], "val_loss": [1.933990206037249, 1.8894164221627372, 1.8227670533316476, 1.7146809101104736, 1.557314464024135, 1.3659857681819372, 1.1834331580570765, 1.0379035472869873, 0.9313127994537354, 0.8615088633128575, 0.803968071937561, 0.7622415849140712, 0.7313104016440255, 0.7035570825849261, 0.6836272989000592, 0.6664483717509678, 0.6537682839802333, 0.6383242096219744, 0.628820674760001, 0.6188784156526838, 0.6095907177243914, 0.6018850122179303, 0.5930009058543614, 0.5871492283684867, 0.5791004725864956, 0.5739833968026298, 0.5658626556396484, 0.5613468033926827, 0.5589817081178937, 0.5539117710930961, 0.55155839238848, 0.5464179175240653, 0.5413515738078526, 0.5361773797443935, 0.5371938092367989, 0.5310899530138288, 0.5285557849066598, 0.5260542120252337, 0.5230077505111694, 0.5201059239251273, 0.5161862543651036, 0.5142136131014142, 0.5123427595411029, 0.5078689200537545, 0.5048583235059466, 0.5039399521691459, 0.4986675807407924, 0.4982037033353533, 0.49878314563206266, 0.493532623563494, 0.49374748979296, 0.493478672845023, 0.4872803177152361, 0.4885761908122471, 0.4847367491040911, 0.4809826782771519, 0.4836480787822178, 0.48146372182028635, 0.47703119686671663, 0.47613050256456646, 0.4738130399159023], "val_accuracy": [0.32899999618530273, 0.41066667437553406, 0.46933332085609436, 0.5220000147819519, 0.5600000023841858, 0.5916666388511658, 0.6143333315849304, 0.6553333401679993, 0.6883333325386047, 0.6893333196640015, 0.7016666531562805, 0.7013333439826965, 0.715666651725769, 0.7223333120346069, 0.7126666903495789, 0.7289999723434448, 0.7279999852180481, 0.7329999804496765, 0.7326666712760925, 0.7396666407585144, 0.7433333396911621, 0.746666669845581, 0.7473333477973938, 0.746999979019165, 0.7490000128746033, 0.7606666684150696, 0.7586666941642761, 0.7583333253860474, 0.7480000257492065, 0.7590000033378601, 0.768666684627533, 0.7590000033378601, 0.7670000195503235, 0.7716666460037231, 0.7639999985694885, 0.7720000147819519, 0.765666663646698, 0.7683333158493042, 0.7749999761581421, 0.7736666798591614, 0.7739999890327454, 0.7766666412353516, 0.7716666460037231, 0.7786666750907898, 0.7803333401679993, 0.7753333449363708, 0.7850000262260437, 0.781000018119812, 0.781333327293396, 0.7866666913032532, 0.7786666750907898, 0.7833333611488342, 0.7826666831970215, 0.7893333435058594, 0.7879999876022339, 0.7953333258628845, 0.7866666913032532, 0.7873333096504211, 0.7900000214576721, 0.7953333258628845, 0.7929999828338623]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 6, 1, 0, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 3, 3, 1, 1, 3, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5, 4, 4], [21, 2, 78, 38, 23, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7580000162124634, "mapping_values": [1, 4, 4, 2, 2, 1, 58, 58, 34, 24, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, grad)), grad)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.square(alpha))), tf.math.multiply(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, alpha)), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), beta)))), tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(alpha))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta)))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2977673384208313, 2.2773365224309963, 2.2351728728292737, 2.1605927468353903, 2.0356871674262678, 1.823706833788149, 1.581638571734536, 1.4183470271818075, 1.3581602496871574, 1.3450907801970862, 1.1626619498774737, 0.9831163982169786, 0.9197586692713192, 0.9106160613681504, 0.9092078507300838, 0.8630556392002068, 0.832569143295351, 0.8017624082298893, 0.8080924444934868, 0.8275414167960811, 0.8037281199894121, 0.7755395197723488, 0.7521107084463616, 0.7384550019089006, 0.7336026548142636, 0.7436282790458245, 0.7272900243665816, 0.7093033966544502, 0.6903873725794625, 0.6873137127879179, 0.6775168436172853, 0.6705514223127474, 0.6673812339759664, 0.6670586527173293, 0.6497015262465703, 0.6327536987228605, 0.6245319121517856, 0.6235272239275171, 0.6224391524030579], "accuracy": [0.10077928751707077, 0.16180160641670227, 0.2635054886341095, 0.35464271903038025, 0.3983621597290039, 0.4212125241756439, 0.46070531010627747, 0.5045568346977234, 0.5345396995544434, 0.5575221180915833, 0.6160348653793335, 0.6384889483451843, 0.6472064256668091, 0.6633205413818359, 0.6758684515953064, 0.6900013089179993, 0.6877558827400208, 0.698718786239624, 0.6946242451667786, 0.6930392384529114, 0.7010962963104248, 0.7156254053115845, 0.7153612375259399, 0.7164179086685181, 0.7191916704177856, 0.7119271159172058, 0.7238145470619202, 0.7371549606323242, 0.7411174178123474, 0.7475894689559937, 0.7460044622421265, 0.7448157668113708, 0.7489103078842163, 0.7432307600975037, 0.7499669790267944, 0.7611940503120422, 0.7633073329925537, 0.7638356685638428, 0.7670056819915771], "val_loss": [1.9587553569248743, 1.9266905103410994, 1.8752941404070174, 1.7856526374816895, 1.6175054141453333, 1.345315626689366, 1.0590764454432897, 0.8671303646905082, 0.7890924385615757, 0.7408212423324585, 0.7111425229481289, 0.6610453810010638, 0.6813224724360875, 0.6945843185697284, 0.6617956331798008, 0.6210462536130633, 0.6031976597649711, 0.5951954126358032, 0.6018503563744682, 0.5907043729509626, 0.5761974539075579, 0.5643647398267474, 0.5562577588217599, 0.5537879977907453, 0.5554535048348563, 0.5487227950777326, 0.5318332740238735, 0.5193399361201695, 0.5153953688485282, 0.5112404142107282, 0.49996169975825716, 0.4895057337624686, 0.48615905216761995, 0.4804681880133493, 0.46808598722730366, 0.4601656198501587, 0.45962679386138916, 0.45895014490400043, 0.4541257790156773], "val_accuracy": [0.12999999523162842, 0.3566666543483734, 0.41499999165534973, 0.4646666646003723, 0.5109999775886536, 0.5696666836738586, 0.6343333125114441, 0.6683333516120911, 0.6726666688919067, 0.6963333487510681, 0.7059999704360962, 0.7250000238418579, 0.6963333487510681, 0.7269999980926514, 0.7239999771118164, 0.7196666598320007, 0.7303333282470703, 0.7356666922569275, 0.7350000143051147, 0.7326666712760925, 0.746999979019165, 0.7549999952316284, 0.7526666522026062, 0.7523333430290222, 0.7576666474342346, 0.7649999856948853, 0.765666663646698, 0.7636666893959045, 0.7670000195503235, 0.7726666927337646, 0.7736666798591614, 0.7853333353996277, 0.7916666865348816, 0.7973333597183228, 0.7919999957084656, 0.793666660785675, 0.7963333129882812, 0.793666660785675, 0.79666668176651]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 1, 8, 4, 3, 8, 3, 3, 2, 2, 1, 3, 2, 0, 1, 7, 1, 2, 2, 2, 8, 2, 2, 9, 6, 9, 1, 3, 0, 2, 9], [3, 3, 3, 1, 1, 1, 3, 3, 1, 2, 3, 1, 3, 0, 3, 2, 3, 1, 2, 2, 4, 1, 4], [15, 2, 78, 38, 8, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7011428475379944, "mapping_values": [1, 4, 4, 2, 2, 1, 35, 35, 19, 16, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))), alpha), tf.math.add(beta, tf.math.multiply(alpha, tf.math.sqrt(tf.math.multiply(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, beta), grad)))), tf.math.add(beta, alpha))), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3008559840057097, 2.2998797132386004, 2.2955160852688463, 2.2863884854861505, 2.276366991972202, 2.2659568132867336, 2.252842455681179, 2.2358832852463477, 2.2169312994950294, 2.197788354632814, 2.172154520229027, 2.140731462319419, 2.106271534138635, 2.059561700805807, 2.009604955897308, 1.9439512437061626, 1.8743252111007163, 1.7914917948790483, 1.7139366088589312, 1.6411941825532643, 1.5821309222552786, 1.5144462416499849, 1.463658511426077, 1.4051499242528145, 1.3607449073833071, 1.3495511894826924, 1.3153897093082731, 1.2859588762898535, 1.2558684867087482, 1.1964656896972858, 1.1742058793520018, 1.1466030213874108, 1.1437476256016208, 1.1093560207505755, 1.1174782849479235, 1.0990605926186165, 1.0360741674183633, 1.0289473115272054, 1.0133606425334338, 0.9826931890290663, 0.9605021967297107, 0.9509714291222012, 0.9441984005104108, 0.9269137188286404, 0.9169608661448557, 0.9075349154268919, 0.8938152250943167], "accuracy": [0.09232597798109055, 0.09853387624025345, 0.10910051316022873, 0.12930920720100403, 0.16391493380069733, 0.19033153355121613, 0.22718267142772675, 0.2694492042064667, 0.301281213760376, 0.3209615647792816, 0.3465856611728668, 0.3653414249420166, 0.38343679904937744, 0.39690926671028137, 0.4029850661754608, 0.40826839208602905, 0.4115704596042633, 0.41764628887176514, 0.4266279339790344, 0.43626996874809265, 0.4581957459449768, 0.46730947494506836, 0.5007264614105225, 0.5083872675895691, 0.5243692994117737, 0.5324263572692871, 0.5361247062683105, 0.5581825375556946, 0.5589750409126282, 0.5709945559501648, 0.5845991373062134, 0.5919957756996155, 0.5840708017349243, 0.6102232336997986, 0.6015057563781738, 0.6103553175926208, 0.6320168972015381, 0.644300639629364, 0.6431118845939636, 0.6544709801673889, 0.6730946898460388, 0.6680755615234375, 0.6708492636680603, 0.6738871932029724, 0.6618676781654358, 0.6653017997741699, 0.6631884574890137], "val_loss": [1.9696549688066756, 1.9659349577767509, 1.9598943846566337, 1.9516660145350866, 1.9413932391575404, 1.9292637961251395, 1.9154304095676966, 1.8998280252729143, 1.8819940430777413, 1.860950129372733, 1.8355483327593123, 1.8046036447797502, 1.7668119839259557, 1.7204405920846122, 1.6633169651031494, 1.5940135206495012, 1.5129485130310059, 1.4247347627367293, 1.3373607226780482, 1.25618314743042, 1.1796879427773612, 1.1054166044507707, 1.0342791080474854, 0.9693478175571987, 0.915623392377581, 0.8752044779913766, 0.841556021145412, 0.8075278656823295, 0.7734824929918561, 0.7459996598107475, 0.7273241281509399, 0.7173026970454625, 0.7145360537937709, 0.7160839353288923, 0.7132153170449393, 0.6933796235493251, 0.6949648516518729, 0.7008025135312762, 0.6950250523430961, 0.686595252582005, 0.679569925580706, 0.6749979598181588, 0.6723391669137138, 0.6702242238180978, 0.6670910460608346, 0.661658491407122, 0.6542826209749494], "val_accuracy": [0.04699999839067459, 0.06966666877269745, 0.11966666579246521, 0.21166667342185974, 0.29600000381469727, 0.3463333249092102, 0.37433332204818726, 0.39366665482521057, 0.4116666615009308, 0.42766666412353516, 0.44466665387153625, 0.4596666693687439, 0.4713333249092102, 0.4860000014305115, 0.5013333559036255, 0.5136666893959045, 0.5236666798591614, 0.5303333401679993, 0.5320000052452087, 0.54666668176651, 0.5586666464805603, 0.57833331823349, 0.6100000143051147, 0.6456666588783264, 0.6600000262260437, 0.6779999732971191, 0.6796666383743286, 0.6786666512489319, 0.6823333501815796, 0.6850000023841858, 0.6803333163261414, 0.6830000281333923, 0.6866666674613953, 0.6766666769981384, 0.6790000200271606, 0.7083333134651184, 0.706333339214325, 0.7153333425521851, 0.7196666598320007, 0.7213333249092102, 0.7226666808128357, 0.7233333587646484, 0.722000002861023, 0.7193333506584167, 0.7173333168029785, 0.7183333039283752, 0.721666693687439]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [15, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 0, 6, 5, 3, 3, 3, 3, 2, 4, 6, 1, 2, 2, 3, 6, 8, 4, 6, 2, 4, 2, 3, 9, 6, 0, 2, 3, 2, 5, 0, 8, 8, 2, 5, 7, 0, 9], [3, 2, 3, 1, 1, 2, 3, 1, 0, 2, 3, 1, 3, 1, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3, 1, 4, 2], [21, 2, 78, 38, 8, 47, 96, 65], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.6462857127189636, "mapping_values": [1, 4, 4, 2, 2, 1, 64, 64, 37, 27, 4, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(beta, grad)), alpha)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad)))))), alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(alpha, tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))))))))))))), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), beta)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), grad)), tf.math.sqrt(alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2989069790399905, 2.285508895043164, 2.257191907554932, 2.21097322222642, 2.145898638148239, 2.043657480103701, 1.8903480122322736, 1.686708638602244, 1.508533270462015, 1.4237644495886583, 1.3546525833865262, 1.3221956790477656, 1.297435423402329, 1.1423798822030855, 1.0403770713081228, 0.9536606301138383, 0.9269556210592454, 0.9283959423593479, 0.9237202690844648, 0.8964425772015193, 0.8481467553275278, 0.8276178248018998, 0.8129015440843864, 0.8168481351393656, 0.7890544857142419, 0.7943121744279202, 0.7909697927677274, 0.775169150405131, 0.74234012148368, 0.7182679363151094, 0.7092131298798549, 0.7193051555594118, 0.7168658912110999, 0.7137217383736775, 0.7141509658121051, 0.691782863888648, 0.6909909868489136, 0.6907701980184334, 0.670495376587229, 0.6586436881617217, 0.6476701916153751, 0.647740748540805, 0.6494742451153727, 0.6415498171106478, 0.6402420535803691, 0.630826666425673, 0.6154299976803356, 0.6079183910438145, 0.609360174165347, 0.5981961696013453, 0.5937244308985236, 0.6028446112137587, 0.5994184371298016, 0.5916006130753979, 0.5809495741302909, 0.5774234843339116, 0.5759264509659937, 0.5751104917996721, 0.5709839212014265, 0.56562546940685, 0.5565683518686094, 0.5610051659182975, 0.549557243111804, 0.5423643384091905, 0.5407305596692293, 0.547912080085446, 0.5353282551330236, 0.5350764999615124, 0.5239968002118045, 0.5271725861891748], "accuracy": [0.09787346422672272, 0.13670584559440613, 0.21476687490940094, 0.30947035551071167, 0.3630960285663605, 0.3863426148891449, 0.4151366949081421, 0.44062870740890503, 0.4760269522666931, 0.5061418414115906, 0.5400871634483337, 0.55791836977005, 0.5703341960906982, 0.6164311170578003, 0.6454893946647644, 0.6572447419166565, 0.6536785364151001, 0.6651697158813477, 0.67666095495224, 0.6827367544174194, 0.6968696117401123, 0.6968696117401123, 0.700700044631958, 0.7014925479888916, 0.707568347454071, 0.7009642124176025, 0.6966054439544678, 0.7009642124176025, 0.7111346125602722, 0.726192057132721, 0.7272487282752991, 0.7264562249183655, 0.7317395210266113, 0.7316074371337891, 0.72672039270401, 0.7367587089538574, 0.7331924438476562, 0.7366266250610352, 0.7360982894897461, 0.7448157668113708, 0.7540615797042847, 0.7532690763473511, 0.7475894689559937, 0.757099449634552, 0.7560427784919739, 0.7594769597053528, 0.7647602558135986, 0.7651565074920654, 0.7644960880279541, 0.7687227725982666, 0.7714964747428894, 0.7693831920623779, 0.767401933670044, 0.7695152759552002, 0.7794214487075806, 0.778232753276825, 0.7796856164932251, 0.7825914621353149, 0.7866860628128052, 0.7858935594558716, 0.7882710099220276, 0.7873464822769165, 0.7893276810646057, 0.7891955971717834, 0.7984414100646973, 0.7960638999938965, 0.7991018295288086, 0.7980451583862305, 0.802271842956543, 0.7987055778503418], "val_loss": [1.9627511160714286, 1.9408086368015833, 1.9067774500165666, 1.8579729625156947, 1.779632908957345, 1.6519735881260462, 1.4594201019832067, 1.2338521139962333, 1.0462166581835066, 0.9032602310180664, 0.8052699054990496, 0.7639687742505755, 0.7157357590539115, 0.7112258502415248, 0.6838565213339669, 0.6664962598255703, 0.6894229139600482, 0.7016593047550747, 0.6814068726130894, 0.6402498653956822, 0.6058467967169625, 0.5921990871429443, 0.5906591074807304, 0.5812212909970965, 0.5701449598584857, 0.5722001109804425, 0.5705534219741821, 0.5583953005926949, 0.5482946123395648, 0.5453233207975116, 0.5453295878001622, 0.5428833961486816, 0.5374573298863002, 0.5292291981833321, 0.5187926292419434, 0.5090819597244263, 0.502610581261771, 0.49796863964625765, 0.4933056320462908, 0.4879286289215088, 0.48396498816353933, 0.4832881348473685, 0.482955915587289, 0.4800180877958025, 0.4728513104575021, 0.4633962767464774, 0.45645383426121305, 0.4533522469656808, 0.4521500383104597, 0.4516986097608294, 0.45007688658578054, 0.44704973697662354, 0.444162198475429, 0.44286324296678814, 0.441603422164917, 0.4389696717262268, 0.43567992959703716, 0.43345993757247925, 0.43140383277620586, 0.4284727913992746, 0.4251472864832197, 0.42289278336933683, 0.4220051680292402, 0.4216051697731018, 0.420122001852308, 0.417618317263467, 0.4150425025394985, 0.4137900045939854, 0.41397672040121897, 0.41414003712790354], "val_accuracy": [0.09566666930913925, 0.3009999990463257, 0.38333332538604736, 0.42933332920074463, 0.4659999907016754, 0.5070000290870667, 0.5460000038146973, 0.5796666741371155, 0.624666690826416, 0.671999990940094, 0.6826666593551636, 0.6886666417121887, 0.6973333358764648, 0.7059999704360962, 0.7133333086967468, 0.7269999980926514, 0.7163333296775818, 0.7283333539962769, 0.7350000143051147, 0.7286666631698608, 0.7310000061988831, 0.734666645526886, 0.7393333315849304, 0.7440000176429749, 0.7413333058357239, 0.7486666440963745, 0.7480000257492065, 0.749666690826416, 0.7526666522026062, 0.7526666522026062, 0.7596666812896729, 0.765333354473114, 0.7633333206176758, 0.7603333592414856, 0.765999972820282, 0.7746666669845581, 0.7836666703224182, 0.7829999923706055, 0.7850000262260437, 0.7836666703224182, 0.784333348274231, 0.7839999794960022, 0.784333348274231, 0.7860000133514404, 0.7860000133514404, 0.7923333048820496, 0.7986666560173035, 0.7973333597183228, 0.7993333339691162, 0.8003333210945129, 0.8006666898727417, 0.7990000247955322, 0.7953333258628845, 0.793666660785675, 0.7963333129882812, 0.8023333549499512, 0.8033333420753479, 0.8043333292007446, 0.8083333373069763, 0.8116666674613953, 0.812666654586792, 0.8153333067893982, 0.8216666579246521, 0.8230000138282776, 0.8270000219345093, 0.8240000009536743, 0.8243333101272583, 0.8173333406448364, 0.8206666707992554, 0.8180000185966492]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [70, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 0, 6, 9, 0, 4, 3, 3, 2, 5, 6, 3, 9, 2, 3, 7, 8, 4, 6, 2, 4, 2, 2, 9, 6, 0, 1, 3, 2, 2, 2, 8, 8, 2, 9, 7, 9, 8], [3, 3, 3, 1, 1, 2, 3, 3, 0, 2, 3, 1, 0, 2, 3, 2, 0, 1, 1, 2, 3, 2, 0, 3], [91, 2, 11, 38, 68, 47, 51, 68], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.3005714416503906, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 21, 13, 4, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, grad))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), beta)), grad)), alpha)), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.328552567711627, 2.5151845116452174, 2.5151476790451213, 2.446667484020938, 2.477881886561974, 2.515225639369714], "accuracy": [0.17593449354171753, 0.20591731369495392, 0.11094967275857925, 0.1732928305864334, 0.17923656105995178, 0.22255976498126984], "val_loss": [1.8537092208862305, 2.4330297878810336, 2.0880122865949358, 2.0278404780796597, 2.015447344098772, 2.166384424482073], "val_accuracy": [0.41066667437553406, 0.007333333138376474, 0.22333332896232605, 0.265666663646698, 0.32633334398269653, 0.29233333468437195]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [76, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 8, 3, 3, 2, 2, 9, 9, 2, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 1, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.2774285674095154, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 8, 6, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, alpha)), alpha), tf.math.add(beta, tf.math.sqrt(alpha)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.466442241487313, 2.3510955256745643, 2.2881710278658804, 2.303678143183474, 2.3028221724606808, 2.302998205296289, 2.3028051575429056], "accuracy": [0.20103025436401367, 0.15876370668411255, 0.16734910011291504, 0.10011887550354004, 0.09642054885625839, 0.09668471664190292, 0.09985470771789551], "val_loss": [1.8028387342180525, 1.8787721225193568, 1.9750749043055944, 1.9739542688642229, 1.9737651007516044, 1.9737578800746374, 1.9736992972237724], "val_accuracy": [0.2693333327770233, 0.2773333191871643, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 4, 4, 3, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [35, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 2, 2, 9, 1, 3, 9, 5, 3, 9, 8, 2, 6, 2, 4, 4, 0, 9, 6, 8, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 3, 2, 3, 1, 3, 0, 2, 2, 3, 1, 1, 2, 4, 2], [56, 2, 78, 38, 8, 47], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, alpha))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1410645842552185, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 0, 6, 4, 3, 4, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2, 5, 9], [1, 3, 0, 3, 1, 1, 1, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5, 1, 3, 5], [58, 0, 78, 38, 23, 47, 96, 85], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 64, 64, 39, 25, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), grad), tf.math.subtract(tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, alpha), alpha))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), beta))), grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), alpha))), tf.math.add(beta, tf.math.sqrt(beta)))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07792893797159195, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 8, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [9, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 2, 1, 3, 9, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 1, 2, 3, 3, 0, 2, 3, 1, 3, 2, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3], [55, 2, 24, 38, 37, 47, 96, 68], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 20, 13, 5, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(grad, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 5, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 3, 6, 0, 6, 9, 3, 2, 1, 3, 5, 4, 6, 3, 5, 2, 3, 7, 1, 4, 6, 2, 4, 2, 2, 9, 6, 0, 1, 2, 2, 2, 0, 8, 8, 5, 9, 7, 9, 9], [3, 3, 3, 1, 1, 2, 3, 3, 0, 2, 3, 1, 3, 2, 3, 2, 2, 1, 1, 2, 4, 2, 3, 3], [21, 2, 24, 38, 37, 47, 96, 61], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 61, 61, 38, 23, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.square(tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(beta, grad)), grad), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))), alpha))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, grad), beta))), tf.math.add(beta, beta)))))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, alpha))))), beta)))))), tf.math.square(tf.math.add(beta, grad)))), beta)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))))), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [9, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 9, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 6, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 0, 1, 3, 3, 3, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 3, 4, 0], [21, 3, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07885351777076721, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [54, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 6, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 9, 0, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 3, 1, 2, 3, 3, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07872143387794495, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 4, 1, 2, 8, 2, 2, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 8, 6, 2, 0, 2, 3, 3, 4, 3, 2, 2, 8, 2, 9, 0, 3, 7, 8, 9, 6, 2, 8, 2, 2, 3, 6, 0, 0, 3, 0, 2, 9, 6, 8], [3, 3, 3, 0, 1, 1, 3, 3, 0, 2, 0, 3, 3, 2, 0, 2, 3, 1, 1, 2, 4, 2], [68, 86, 89, 95, 8, 95], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 1, 33, 33, 20, 13, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.sqrt(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.negative(tf.math.add(beta, grad))))), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), beta)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), grad))))))), tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1], [8, 2, 3, 6, 2, 2, 5, 3, 3, 3, 8, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 8, 2, 2, 9, 8, 8, 2, 7, 5, 2, 9, 7], [3, 3, 3, 1, 1, 2, 1, 3, 0, 2, 3, 1, 3, 2, 3, 2, 0, 3, 1, 2, 4, 2, 0, 0, 5, 3], [80, 2, 78, 38, 37, 47, 96, 22], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 32, 32, 20, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), alpha)))))))), tf.math.square(tf.math.add(beta, alpha)))), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(grad))))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), beta)))), grad), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3185440537920403, 2.3738392785933544, 2.484665841316865, 3.4157723462214764, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06089023873209953, 0.022057851776480675, 0.01228371448814869, 0.030246995389461517, 0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0125021934509277, 2.0784657342093333, 2.2490036146981374, 14.819685799734932, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.005333333276212215, 0.004333333112299442, 0.00566666666418314, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 0, 3, 6, 2, 6, 5, 3, 2, 3, 3, 2, 9, 1, 0, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 3, 3, 1, 1, 3, 3, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.0665714293718338, "mapping_values": [1, 4, 4, 2, 2, 0, 25, 25, 16, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(grad))))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), alpha), tf.math.subtract(tf.math.negative(grad), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.300930863783391, 2.3016220648149224, 2.3015068293153145, 2.299748121141175, 2.2993581945618082, 2.3002875460893124, 2.3004641149022307, 2.300140948044295, 2.298936066579006, 2.3004815950999564, 2.2992989127315693, 2.2992299196978663, 2.2996496925925882, 2.2994450637299417, 2.3004471156354973, 2.300091581762805], "accuracy": [0.09272222965955734, 0.0936468094587326, 0.09206181764602661, 0.09470347315073013, 0.09985470771789551, 0.09919429570436478, 0.09747721254825592, 0.09906221181154251, 0.10236428678035736, 0.10315678268671036, 0.10077928751707077, 0.10606260597705841, 0.09959053993225098, 0.09959053993225098, 0.09576013684272766, 0.09694888442754745], "val_loss": [1.9704324858529227, 1.9698236329214913, 1.969480242047991, 1.9693918909345354, 1.9693967274257116, 1.9692978858947754, 1.969203267778669, 1.9692049026489258, 1.9691684586661202, 1.96914918082101, 1.9691908018929618, 1.9693395750863212, 1.9695331709725517, 1.9699304444449288, 1.9701371874128069, 1.9703384808131628], "val_accuracy": [0.044333335012197495, 0.052666667848825455, 0.05700000002980232, 0.06066666543483734, 0.06300000101327896, 0.06800000369548798, 0.07633333653211594, 0.07999999821186066, 0.08166666328907013, 0.08299999684095383, 0.0846666693687439, 0.0846666693687439, 0.08399999886751175, 0.07900000363588333, 0.07566666603088379, 0.07666666805744171]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 3, 6, 2, 6, 5, 3, 3, 3, 4, 2, 1, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 3, 3, 1, 1, 1, 3, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 94, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 2, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3012355951947336, 2.3027326001971073, 2.3033238561980682, 2.301807861444012, 2.301552533316118, 2.3029629285419624], "accuracy": [0.09100515395402908, 0.09259014576673508, 0.08994849026203156, 0.08809932321310043, 0.09259014576673508, 0.09153348207473755], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [21, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 2, 2, 9, 1, 3, 9, 5, 3, 9, 8, 2, 6, 2, 4, 4, 0, 9, 6, 8, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 3, 2, 3, 1, 3, 0, 2, 2, 3, 1, 1, 2, 4, 2], [21, 2, 98, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3012355951947336, 2.3027326001971073, 2.3033238561980682, 2.301807861444012, 2.301552533316118, 2.3029629285419624], "accuracy": [0.09100515395402908, 0.09259014576673508, 0.08994849026203156, 0.08809932321310043, 0.09259014576673508, 0.09153348207473755], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]