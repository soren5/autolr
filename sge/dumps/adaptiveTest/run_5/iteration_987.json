[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 0, 4, 9, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8451428413391113, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 7, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.932819467399571, 1.0954634574945687, 0.8099578543739737, 0.7025843614269761, 0.6293434647285014, 0.6029866059867854, 0.5505836275842259, 0.5202272143133754, 0.49820765340805306, 0.4811468126200383, 0.4492539648469004, 0.43027875937050075, 0.4359989796237797, 0.424369903977332, 0.4141390238849321, 0.3980275380683849, 0.3793611197014369, 0.3706781678802191, 0.36301937365513026, 0.3552628881730392, 0.33640460970930497, 0.33792532162659394, 0.3306479391412744, 0.3074518346263748, 0.3101962516808853, 0.2957000287611093, 0.2958003858911552, 0.2882863871645949, 0.28127371476011787, 0.2743269012722562, 0.2714691551358173, 0.2650115572308757, 0.2540348397821027], "accuracy": [0.33984941244125366, 0.6196011304855347, 0.6956809163093567, 0.7320036888122559, 0.7600052952766418, 0.7755910754203796, 0.7889314293861389, 0.8026680946350098, 0.8068947196006775, 0.8165367841720581, 0.8296129703521729, 0.8387266993522644, 0.8338396549224854, 0.8374059200286865, 0.8422929644584656, 0.8487650156021118, 0.8605204224586487, 0.8598600029945374, 0.8607845902442932, 0.8648791313171387, 0.8672566413879395, 0.8692378997802734, 0.8720116019248962, 0.8808611631393433, 0.8792761564254761, 0.8849557638168335, 0.8849557638168335, 0.887201189994812, 0.891559898853302, 0.8972394466400146, 0.8923524022102356, 0.9008057117462158, 0.900409460067749], "val_loss": [0.8854470252990723, 0.6371276548930577, 0.5575940268380302, 0.5145246641976493, 0.4675767081124442, 0.44935005051749094, 0.4160171406609671, 0.4074275919369289, 0.38153948954173494, 0.36893240894590107, 0.36837293420519146, 0.35635786397116526, 0.35494489329201834, 0.35869315692356657, 0.3624995946884155, 0.3419528007507324, 0.33755819286618916, 0.33497993435178486, 0.3317637954439436, 0.3321859325681414, 0.32461468662534443, 0.321816086769104, 0.32427009514399935, 0.3226717284747532, 0.3190274919782366, 0.3203544616699219, 0.30323142664773123, 0.30810859373637606, 0.3268028667994908, 0.3120265943663461, 0.31239079577582224, 0.3075173922947475, 0.314308089869363], "val_accuracy": [0.6549999713897705, 0.7129999995231628, 0.7456666827201843, 0.7616666555404663, 0.7793333530426025, 0.7919999957084656, 0.8130000233650208, 0.8209999799728394, 0.8316666483879089, 0.846666693687439, 0.8386666774749756, 0.8503333330154419, 0.8413333296775818, 0.8510000109672546, 0.8423333168029785, 0.8560000061988831, 0.8566666841506958, 0.8586666584014893, 0.8613333106040955, 0.8613333106040955, 0.8640000224113464, 0.8656666874885559, 0.8663333058357239, 0.8643333315849304, 0.8666666746139526, 0.8690000176429749, 0.8736666440963745, 0.8740000128746033, 0.8700000047683716, 0.871999979019165, 0.8736666440963745, 0.8679999709129333, 0.8736666440963745]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8385714292526245, "mapping_values": [1, 4, 4, 2, 2, 1, 30, 30, 18, 12, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, grad))))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9328198135647052, 1.0954895046692263, 0.8104011587195346, 0.7029329064562808, 0.6291172783907929, 0.6026403386248668, 0.551753474051816, 0.5230817533502993, 0.4950002305669209, 0.4799275073424432, 0.447952012340422, 0.4322946127206422, 0.4360948392326459, 0.415251376220752, 0.41321031244801587, 0.39380511363200416, 0.37597501574726533, 0.3656569444515985, 0.35825635998823135, 0.3528442873206546, 0.3374224561607959, 0.33627697112947297, 0.335704105495698, 0.3098514721401773, 0.3092846714541771, 0.29624430646891325, 0.2981736219522897, 0.2897867944085162, 0.2778103674927156, 0.2719895742738157, 0.26979101436359537, 0.27266159778840476, 0.2611481348450441, 0.2508814821563235, 0.23478868160863767, 0.2441057576802208, 0.23814848909926312, 0.22371154370726437, 0.2167411971231572, 0.21375135801070244], "accuracy": [0.33984941244125366, 0.6194690465927124, 0.6955488324165344, 0.7339849472045898, 0.7569673657417297, 0.7749306559562683, 0.7877426743507385, 0.800818920135498, 0.8112534880638123, 0.8152159452438354, 0.8341038227081299, 0.8384625315666199, 0.8348963260650635, 0.841500461101532, 0.842028796672821, 0.8507462739944458, 0.8581429123878479, 0.8647470474243164, 0.8636903762817383, 0.8638224601745605, 0.8683133125305176, 0.8676528930664062, 0.8704266548156738, 0.8816536664962769, 0.8800686597824097, 0.8882578015327454, 0.8819178342819214, 0.8901069760322571, 0.8949940800666809, 0.8990886211395264, 0.891559898853302, 0.8968431949615479, 0.898428201675415, 0.902390718460083, 0.910711944103241, 0.9058248400688171, 0.9103156924247742, 0.9133535623550415, 0.9159952402114868, 0.9187690019607544], "val_loss": [0.8854623522077288, 0.6372073718479702, 0.5576359033584595, 0.5143810340336391, 0.4674978256225586, 0.4513380697795323, 0.41908834661756245, 0.40660503932407926, 0.38419696262904574, 0.37170699664524626, 0.3644150069781712, 0.35682406595775057, 0.35090746198381695, 0.35036180700574604, 0.3539685181209019, 0.3366152218409947, 0.33498971802847727, 0.3330007791519165, 0.33104575531823294, 0.3289575236184256, 0.32079499108450754, 0.3231541769845145, 0.32573028973170687, 0.3171128375189645, 0.3188542638506208, 0.32083397252219065, 0.30643138715199064, 0.3061853902680533, 0.32342234679630827, 0.31204681737082346, 0.3162660428455898, 0.30980707917894634, 0.3136517490659441, 0.29791189091546194, 0.30077463388442993, 0.29717081785202026, 0.3081800511905125, 0.3136505143983023, 0.3114759496280125, 0.31987214939934866], "val_accuracy": [0.6549999713897705, 0.7136666774749756, 0.7450000047683716, 0.7620000243186951, 0.7789999842643738, 0.7886666655540466, 0.815666675567627, 0.8206666707992554, 0.8303333520889282, 0.8433333039283752, 0.843666672706604, 0.8483333587646484, 0.8523333072662354, 0.8543333411216736, 0.8486666679382324, 0.8600000143051147, 0.859333336353302, 0.8610000014305115, 0.859666645526886, 0.8566666841506958, 0.8659999966621399, 0.8636666536331177, 0.8636666536331177, 0.862333357334137, 0.8663333058357239, 0.8633333444595337, 0.871666669845581, 0.8713333606719971, 0.8676666617393494, 0.8723333477973938, 0.8723333477973938, 0.8706666827201843, 0.8730000257492065, 0.8769999742507935, 0.8793333172798157, 0.8756666779518127, 0.8793333172798157, 0.874666690826416, 0.8766666650772095, 0.8763333559036255]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 5, 2, 6, 5, 2, 3, 3, 3, 2, 2, 1, 2, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8248571157455444, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9328218395085524, 1.0953906319318052, 0.8101522408818461, 0.7031783802697309, 0.6294227334974685, 0.60202124255476, 0.5497613154886075, 0.5198710954003504, 0.49385917237122706, 0.47862236825088705, 0.44934589357235016, 0.43154753299200965, 0.4368724983011837, 0.417132961688623, 0.4090181228357488, 0.3970589108825155, 0.37765445471943615, 0.36760256880026576, 0.3590490143761391, 0.3512429991819918, 0.33672983906429993, 0.3367103137564996, 0.3309052262788341, 0.30904316872637805, 0.3071874082167198, 0.29791769025159187, 0.29700359372635404, 0.2855555967151875, 0.27802468916806466, 0.2725665533090737, 0.26295982755690106, 0.2673217808140614, 0.2576335573657755, 0.24856977163761237, 0.23477742710464336, 0.2498965778481203, 0.23879319971436916, 0.22687030135758596, 0.2127577673273316], "accuracy": [0.33984941244125366, 0.6196011304855347, 0.6956809163093567, 0.7334566116333008, 0.7597411274909973, 0.774270236492157, 0.7895918488502502, 0.8034605979919434, 0.8090080618858337, 0.8158763647079468, 0.8309338092803955, 0.8350284099578857, 0.8339717388153076, 0.8413683772087097, 0.8438779711723328, 0.8491612672805786, 0.8595958352088928, 0.8599920868873596, 0.8648791313171387, 0.8644828796386719, 0.8697662353515625, 0.8706908226013184, 0.8709549307823181, 0.8774270415306091, 0.8825782537460327, 0.8865407705307007, 0.8879936337471008, 0.8898428082466125, 0.8953903317451477, 0.895918607711792, 0.9000132083892822, 0.8971073627471924, 0.9014661312103271, 0.9015982151031494, 0.9096552729606628, 0.9033153057098389, 0.9097873568534851, 0.9122969508171082, 0.9178444147109985], "val_loss": [0.8854776791163853, 0.6369961159569877, 0.5574686697551182, 0.5153045994894845, 0.4667222499847412, 0.4510753835950579, 0.417395327772413, 0.4039648600987026, 0.38092354365757536, 0.37341482298714773, 0.3643477133342198, 0.3542321154049465, 0.3528709922518049, 0.3550603134291513, 0.3629950966153826, 0.33777603081294466, 0.33594649178641184, 0.33233984879084993, 0.3313604082380022, 0.3334036384310041, 0.3244127205439976, 0.3220553057534354, 0.32159626483917236, 0.31963046959468294, 0.3187176840645926, 0.3312472871371678, 0.3019726872444153, 0.3104589751788548, 0.3188257472855704, 0.31424652678625925, 0.3169476219585964, 0.3089847224099295, 0.3151697942188808, 0.29770428793770926, 0.29936449016843525, 0.3060180800301688, 0.3042247635977609, 0.3111926317214966, 0.31231736285345896], "val_accuracy": [0.6549999713897705, 0.7136666774749756, 0.7450000047683716, 0.762333333492279, 0.7789999842643738, 0.7906666398048401, 0.8146666884422302, 0.8213333487510681, 0.8309999704360962, 0.8416666388511658, 0.843666672706604, 0.8513333201408386, 0.847000002861023, 0.8510000109672546, 0.8383333086967468, 0.8539999723434448, 0.8560000061988831, 0.8606666922569275, 0.8619999885559082, 0.8606666922569275, 0.8619999885559082, 0.8669999837875366, 0.8663333058357239, 0.8673333525657654, 0.8679999709129333, 0.8566666841506958, 0.8730000257492065, 0.8693333268165588, 0.8683333396911621, 0.8723333477973938, 0.8700000047683716, 0.8759999871253967, 0.874666690826416, 0.8803333044052124, 0.8796666860580444, 0.8763333559036255, 0.8786666393280029, 0.8776666522026062, 0.8776666522026062]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 4, 3, 2, 2, 6, 5, 2, 1, 3, 3, 8, 9, 1, 4, 9, 5, 3, 7, 8, 0, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 0, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 85, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7037143111228943, "mapping_values": [1, 4, 4, 2, 2, 1, 35, 35, 22, 13, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(beta), grad)), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3015872126226458, 2.3001438338191926, 2.2948770662576545, 2.287914261857611, 2.277587322369385, 2.2660011399329187, 2.252652632105289, 2.234705106252535, 2.2166315085222505, 2.1957280334149685, 2.168507232138226, 2.1356169852472298, 2.094809601666228, 2.0465802566612465, 1.988215005456055, 1.915831321360586, 1.8356125194005144, 1.7519659743317209, 1.6636612044034491, 1.584444707458077, 1.5033856389418947, 1.4555425756501326, 1.414735751129365, 1.3933542993295116, 1.3936489344335992, 1.3959844158688053, 1.4046021208645345, 1.379298349570573, 1.3535740562103145, 1.2814341536004072, 1.2405583877227153, 1.171126846624104, 1.1277741886573995, 1.0674813845453324, 0.9941976793516801, 0.9545771586361216, 0.931642023398498, 0.9189504532136339, 0.9175191150050452, 0.917087019710115, 0.9276196126137364], "accuracy": [0.09074098616838455, 0.09655263274908066, 0.11081759631633759, 0.12891295552253723, 0.15598995983600616, 0.19336943328380585, 0.2277110069990158, 0.2727513015270233, 0.29163914918899536, 0.32439571619033813, 0.3420948386192322, 0.3603222966194153, 0.383700966835022, 0.3910976052284241, 0.4031171500682831, 0.4181746244430542, 0.4220050275325775, 0.43970412015914917, 0.4496103525161743, 0.45925241708755493, 0.4802536070346832, 0.4943864643573761, 0.5103685259819031, 0.5202747583389282, 0.5235767960548401, 0.5262184739112854, 0.5321621894836426, 0.5494650602340698, 0.5551446080207825, 0.5781270861625671, 0.5919957756996155, 0.6111478209495544, 0.62660151720047, 0.6365077495574951, 0.653150200843811, 0.6491876840591431, 0.651168942451477, 0.653150200843811, 0.6523576974868774, 0.6553955674171448, 0.6581693291664124], "val_loss": [1.9696742466517858, 1.9659432002476283, 1.9598851885114397, 1.9516716684613908, 1.9414456231253487, 1.92927885055542, 1.915196146283831, 1.8990071841648646, 1.8802063805716378, 1.8577969414847237, 1.8303824152265276, 1.7965033394949776, 1.7545839037214006, 1.7028250013078963, 1.6395294666290283, 1.5637242453438895, 1.4759134905678886, 1.3786638464246477, 1.277022429874965, 1.177474021911621, 1.0857906000954765, 1.0051812444414412, 0.9369184970855713, 0.8807010310036796, 0.8361911773681641, 0.8076135090419224, 0.7952664409364972, 0.7811141865594047, 0.7552561249051776, 0.7395257268633161, 0.7415305035454887, 0.7426463535853794, 0.7280698333467756, 0.6973731517791748, 0.6692477975572858, 0.659934401512146, 0.6649832044328962, 0.6733754702976772, 0.6807499953678676, 0.6878460305077689, 0.6943134920937675], "val_accuracy": [0.04633333161473274, 0.06966666877269745, 0.11800000071525574, 0.21066667139530182, 0.3009999990463257, 0.36033332347869873, 0.38366666436195374, 0.4026666581630707, 0.4203333258628845, 0.4326666593551636, 0.4466666579246521, 0.4596666693687439, 0.4713333249092102, 0.4873333275318146, 0.5056666731834412, 0.5223333239555359, 0.5393333435058594, 0.5619999766349792, 0.578000009059906, 0.5923333168029785, 0.6136666536331177, 0.6359999775886536, 0.6570000052452087, 0.6700000166893005, 0.6779999732971191, 0.6816666722297668, 0.6683333516120911, 0.6706666946411133, 0.6880000233650208, 0.6970000267028809, 0.6996666789054871, 0.7043333053588867, 0.7036666870117188, 0.7080000042915344, 0.715666651725769, 0.7236666679382324, 0.7200000286102295, 0.7080000042915344, 0.703000009059906, 0.7056666612625122, 0.7223333120346069]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 8, 8, 4, 9, 5, 4, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 2, 0, 1, 3, 3, 3, 3, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 61, 99, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7037143111228943, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 12, 12, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.multiply(tf.math.multiply(alpha, grad), tf.math.add(beta, grad)), grad))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3015872126226458, 2.3001438338191926, 2.2948770662576545, 2.287914261857611, 2.277587322369385, 2.2660011084418903, 2.252652632105289, 2.234705106252535, 2.2166315085222505, 2.1957280019239396, 2.168507232138226, 2.1356169852472298, 2.0948096331572565, 2.0465802566612465, 1.9882150999291415, 1.9158312741240426, 1.8356123327374412, 1.7519656751669472, 1.663661235894478, 1.5844448265728934, 1.5033858660866855, 1.4555430817424566, 1.4147355397300887, 1.393352434840169, 1.393645731481059, 1.395980439291906, 1.404595870037026, 1.3792960640934118, 1.3535690315804856, 1.2814271655836598, 1.2405528728877864, 1.1711235198960754, 1.1277735522237073, 1.0674820100122737, 0.9941964707259945, 0.954575773290655, 0.9316389706266743, 0.9189447873713491, 0.9175146516476955, 0.9170827594541555, 0.9276199845857687], "accuracy": [0.09074098616838455, 0.09655263274908066, 0.11081759631633759, 0.12891295552253723, 0.15598995983600616, 0.19336943328380585, 0.2277110069990158, 0.2727513015270233, 0.29163914918899536, 0.32439571619033813, 0.3420948386192322, 0.3603222966194153, 0.383700966835022, 0.3910976052284241, 0.4031171500682831, 0.4181746244430542, 0.4220050275325775, 0.43970412015914917, 0.4496103525161743, 0.45925241708755493, 0.4802536070346832, 0.4943864643573761, 0.5103685259819031, 0.5202747583389282, 0.5235767960548401, 0.5262184739112854, 0.5322942733764648, 0.5494650602340698, 0.5551446080207825, 0.5781270861625671, 0.5919957756996155, 0.6111478209495544, 0.62660151720047, 0.6365077495574951, 0.6530181169509888, 0.6491876840591431, 0.651168942451477, 0.653150200843811, 0.6523576974868774, 0.6553955674171448, 0.6581693291664124], "val_loss": [1.9696742466517858, 1.9659432683672224, 1.9598851885114397, 1.9516716684613908, 1.9414456231253487, 1.92927885055542, 1.915196146283831, 1.8990071841648646, 1.8802063805716378, 1.8577969414847237, 1.8303824152265276, 1.7965032713753837, 1.7545839718409948, 1.7028250694274902, 1.6395294666290283, 1.5637241091047014, 1.4759131159101213, 1.3786635398864746, 1.2770226682935442, 1.1774748052869524, 1.0857916559491838, 1.0051824365343367, 0.9369191442217145, 0.8807003838675362, 0.8361897468566895, 0.8076120274407523, 0.795265827860151, 0.7811135223933628, 0.7552547284535, 0.7395241260528564, 0.7415302480970111, 0.742647613797869, 0.7280710765293666, 0.6973739692143032, 0.6692463670458112, 0.6599298885890416, 0.6649779592241559, 0.6733710595539638, 0.6807466404778617, 0.6878432886941093, 0.6943150247846331], "val_accuracy": [0.04633333161473274, 0.06966666877269745, 0.11800000071525574, 0.21066667139530182, 0.3009999990463257, 0.36033332347869873, 0.38366666436195374, 0.4026666581630707, 0.4203333258628845, 0.4326666593551636, 0.4466666579246521, 0.4596666693687439, 0.4713333249092102, 0.4873333275318146, 0.5056666731834412, 0.5223333239555359, 0.5393333435058594, 0.5619999766349792, 0.578000009059906, 0.5923333168029785, 0.6136666536331177, 0.6359999775886536, 0.6570000052452087, 0.6700000166893005, 0.6779999732971191, 0.6813333630561829, 0.6683333516120911, 0.6706666946411133, 0.6880000233650208, 0.6970000267028809, 0.6996666789054871, 0.7043333053588867, 0.7036666870117188, 0.7080000042915344, 0.715666651725769, 0.7236666679382324, 0.7200000286102295, 0.7076666951179504, 0.703000009059906, 0.7056666612625122, 0.7223333120346069]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [47, 61, 78, 83, 37, 47, 96, 39], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.28685712814331055, "mapping_values": [1, 4, 4, 2, 2, 1, 27, 27, 16, 11, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.math.add(beta, grad)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), beta))))), grad), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301829987670673, 2.302552698436682, 2.301912965933251, 2.302040411449458, 2.300995026502658, 2.3011274535217305, 2.301652191715344, 2.2995991345960953, 2.3005228849717607, 2.300743542894034, 2.299623158283206, 2.2988409721116034, 2.2975148543737127, 2.299399669632353, 2.2991682702461174, 2.297298117053035, 2.2960762886276114, 2.2971060100311553, 2.2971129529212586, 2.2964647122031554, 2.296481188309427, 2.296364492381868, 2.293881294072627, 2.2966450639074, 2.2937651603544045, 2.2952447049039275, 2.294686331929721, 2.294776354420533, 2.295372027164248, 2.292564619801473, 2.293682576044597, 2.291916130587661, 2.2932529917419577, 2.2931227025858494, 2.291392765245449, 2.2904235752991493, 2.2898772719230447, 2.2902455949323555, 2.2897365141097565, 2.2898169175083645, 2.289724113100067, 2.289582359099574, 2.289293431996386, 2.289113350390695, 2.2873345621509826, 2.289008222409149, 2.2876982890131483, 2.288678446434524, 2.288628895206222, 2.2881934197823512, 2.2875632034899334, 2.2866624647426947, 2.2856453243515604, 2.286809349104146, 2.2868550630246234, 2.285472951781213, 2.282665843362774, 2.285306720717267, 2.2836760140964305, 2.2826120429554826, 2.282601394138127, 2.2839475415559445, 2.2847567530135593, 2.282348771341536, 2.2825081867391344, 2.2808467604622407, 2.2835431440615652, 2.282412484683822, 2.281905386630869, 2.2811405276420835, 2.2794279925591123, 2.2800775784480023, 2.2803675553046356, 2.2798005495372466, 2.2794891993729602, 2.2788917227601333, 2.278609860606276, 2.2782242399527335, 2.277853615579037, 2.2789939646203803, 2.277232201407063, 2.2760276947794904, 2.276603738409165, 2.2752248108142936, 2.2764213551241785, 2.2749342156313097, 2.2746306243841565, 2.2761037278846112, 2.2743269737764136, 2.2745536916118336, 2.2737671509552406, 2.274225032246108, 2.272819742030944, 2.2738924602775086, 2.2729247466621305, 2.27309999716611, 2.2722271893553807, 2.2721035433577637, 2.272082492077371, 2.27018344318862], "accuracy": [0.08981640636920929, 0.09206181764602661, 0.09338264167308807, 0.09153348207473755, 0.09166556596755981, 0.09589222073554993, 0.09325055778026581, 0.09959053993225098, 0.09245806187391281, 0.09311848133802414, 0.09153348207473755, 0.09668471664190292, 0.10619468986988068, 0.09615638852119446, 0.09826971590518951, 0.10328886657953262, 0.10619468986988068, 0.10619468986988068, 0.10791176557540894, 0.107647605240345, 0.10289261490106583, 0.10051512718200684, 0.11147800832986832, 0.10698718577623367, 0.11213842034339905, 0.11042134463787079, 0.11068551242351532, 0.11240258812904358, 0.10421344637870789, 0.11438383162021637, 0.10857218503952026, 0.11821424216032028, 0.12032756209373474, 0.11451591551303864, 0.11821424216032028, 0.11808215826749802, 0.12415797263383865, 0.11887465417385101, 0.1216483935713768, 0.11821424216032028, 0.12534672021865845, 0.1262712925672531, 0.11834631860256195, 0.13115836679935455, 0.1294412910938263, 0.1200634017586708, 0.13181878626346588, 0.13076211512088776, 0.12429005652666092, 0.1298375427722931, 0.1320829540491104, 0.12759213149547577, 0.136045441031456, 0.13089419901371002, 0.1332716941833496, 0.1328754425048828, 0.1414608359336853, 0.13670584559440613, 0.13776251673698425, 0.14238542318344116, 0.14740456640720367, 0.13736626505851746, 0.13829085230827332, 0.1460837423801422, 0.13749834895133972, 0.14740456640720367, 0.13776251673698425, 0.14410249888896942, 0.14621582627296448, 0.1488574892282486, 0.1516312211751938, 0.146479994058609, 0.1504424810409546, 0.15189538896083832, 0.15031039714813232, 0.15281997621059418, 0.15215955674648285, 0.15519747138023376, 0.15400871634483337, 0.15400871634483337, 0.16034869849681854, 0.15876370668411255, 0.1554616242647171, 0.15876370668411255, 0.16417910158634186, 0.16100911796092987, 0.1608770340681076, 0.15915995836257935, 0.16219785809516907, 0.1620657742023468, 0.1640470176935196, 0.1620657742023468, 0.16774533689022064, 0.16140536963939667, 0.16351869702339172, 0.17117950320243835, 0.16999074816703796, 0.17395325005054474, 0.16853784024715424, 0.17461365461349487], "val_loss": [1.9707072802952357, 1.9704036031450545, 1.9701038088117326, 1.9698070117405482, 1.9695092609950475, 1.969210147857666, 1.968910081045968, 1.968611580984933, 1.9683124678475517, 1.9680137634277344, 1.9677159445626395, 1.9674199649265833, 1.9671244621276855, 1.9668258258274622, 1.9665277344839913, 1.9662305968148368, 1.965935366494315, 1.965639591217041, 1.9653423173086983, 1.9650462014334542, 1.964752197265625, 1.964456490107945, 1.964160374232701, 1.9638667106628418, 1.9635723658970423, 1.963278021131243, 1.9629852431161063, 1.962691307067871, 1.9623985290527344, 1.9621069090706962, 1.9618120874677385, 1.9615159034729004, 1.9612244197300501, 1.960927895137242, 1.9606360026768275, 1.960343633379255, 1.9600520133972168, 1.9597574642726354, 1.9594648906162806, 1.9591694559369768, 1.9588751111711775, 1.9585817881992884, 1.9582891464233398, 1.9579979351588659, 1.9577032497950964, 1.9574078832353865, 1.9571138790675573, 1.9568219866071428, 1.9565283230372839, 1.9562366349356515, 1.9559426307678223, 1.9556503295898438, 1.955357210976737, 1.9550621850149972, 1.9547692026410783, 1.9544743810381209, 1.9541770390101842, 1.9538819449288505, 1.9535881451198034, 1.9532912799290247, 1.9529948234558105, 1.9527006149291992, 1.9524079731532507, 1.9521124022347587, 1.951815128326416, 1.951517173222133, 1.9512247358049666, 1.9509293011256628, 1.9506312779017858, 1.9503351620265417, 1.9500378199986048, 1.949741976601737, 1.9494453157697404, 1.9491490636553084, 1.9488541058131628, 1.9485588073730469, 1.9482608522687639, 1.9479646682739258, 1.9476642608642578, 1.9473682812282018, 1.947068759373256, 1.9467671939304896, 1.9464711461748396, 1.9461723736354284, 1.945875576564244, 1.9455714225769043, 1.9452711514064245, 1.9449711527143205, 1.9446746962411063, 1.9443746975490026, 1.9440748350960868, 1.9437715666634696, 1.9434693200247628, 1.943171160561698, 1.9428706850324358, 1.9425657817295618, 1.9422668729509627, 1.941964966910226, 1.9416610854012626, 1.941352367401123], "val_accuracy": [0.03933333232998848, 0.041333332657814026, 0.04466666653752327, 0.04600000008940697, 0.04766666516661644, 0.05066666752099991, 0.05166666582226753, 0.05299999937415123, 0.05433333292603493, 0.05533333495259285, 0.05766666680574417, 0.05966666713356972, 0.06133333221077919, 0.06333333253860474, 0.0663333311676979, 0.06800000369548798, 0.07100000232458115, 0.0716666653752327, 0.0729999989271164, 0.07599999755620956, 0.07766667008399963, 0.0806666687130928, 0.0833333358168602, 0.08733333647251129, 0.08900000154972076, 0.09133332967758179, 0.09399999678134918, 0.09566666930913925, 0.09799999743700027, 0.09966666996479034, 0.10266666859388351, 0.10366666316986084, 0.10499999672174454, 0.10866666585206985, 0.11299999803304672, 0.11400000005960464, 0.11633333563804626, 0.11900000274181366, 0.12200000137090683, 0.12399999797344208, 0.12733332812786102, 0.1303333342075348, 0.13366666436195374, 0.13699999451637268, 0.13866665959358215, 0.14233332872390747, 0.14533333480358124, 0.14866666495800018, 0.1536666601896286, 0.15833333134651184, 0.16099999845027924, 0.16433332860469818, 0.16766667366027832, 0.16966666281223297, 0.17233332991600037, 0.17633333802223206, 0.17900000512599945, 0.1836666613817215, 0.18666666746139526, 0.19033333659172058, 0.1940000057220459, 0.19699999690055847, 0.1993333399295807, 0.20233333110809326, 0.20533333718776703, 0.2083333283662796, 0.21066667139530182, 0.2133333384990692, 0.21566666662693024, 0.21833333373069763, 0.21966665983200073, 0.2213333398103714, 0.2240000069141388, 0.2280000001192093, 0.23100000619888306, 0.23466666042804718, 0.23533333837985992, 0.23800000548362732, 0.24033333361148834, 0.24266666173934937, 0.2473333328962326, 0.24833333492279053, 0.2486666738986969, 0.25099998712539673, 0.2540000081062317, 0.25566667318344116, 0.257999986410141, 0.2603333294391632, 0.2653333246707916, 0.2683333456516266, 0.2706666588783264, 0.27433332800865173, 0.27666667103767395, 0.2783333361148834, 0.28033334016799927, 0.28200000524520874, 0.2853333353996277, 0.28600001335144043, 0.28733333945274353, 0.289000004529953]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 8, 0, 2, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [63, 11, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 2, 3, 2, 2, 4, 5, 2, 9, 3, 5, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 3, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 10, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.pow(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [7, 2, 8, 7, 1, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 2, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [0, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 2, 2, 6, 5, 3, 3, 0, 3, 2, 3, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 3, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 1, 3, 3, 3, 3, 3, 0, 3, 2, 3, 1, 1, 2, 3, 2, 3, 0], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 9, 8, 1, 37, 37, 21, 16, 2, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.square(grad), grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.multiply(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 6, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 5, 4, 2, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 0, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 20, 14, 5, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027550055602477, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 1, 2, 2, 6, 1, 3, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [19, 61, 78, 36, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [91, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 6, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 2, 1, 3, 3, 3, 1, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 49, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 9, 4, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [61, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 1, 6, 6, 5, 2, 3, 3, 2, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 13, 26, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 33, 33, 20, 13, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(alpha, grad))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), grad)))))))), tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1562541276216507, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [61, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 0, 2, 2, 1, 5, 4, 3, 4, 3, 2, 9, 1, 2, 6, 5, 1, 7, 8, 2, 6, 2, 4, 2, 2, 6, 8, 0, 2, 6, 2, 2, 0, 8, 8, 2, 7, 0, 5, 7, 5, 9, 6], [3, 3, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.negative(tf.math.add(tf.math.add(beta, grad), alpha)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027550055602477, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [9, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027550055602477, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 3, 5, 2, 6, 3, 3, 2, 9, 1, 0, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [2, 0, 3, 3, 0, 1, 3, 3, 3, 3, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [84, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 2, 38, 38, 23, 15, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), grad)))), tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), grad)), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 9, 2, 1, 8, 5, 2, 3, 3, 3, 2, 9, 3, 4, 9, 2, 3, 3, 8, 2, 3, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [19, 58, 78, 36, 37, 33, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 24, 24, 16, 8, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.add(beta, alpha), tf.math.pow(alpha, tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3024767955154744, 2.3050830823996313, 2.3062983632103453, 2.3089713324424754, 2.310450402674123, 2.3143585838929552, 2.320017859070072, 2.3228461617381737, 2.331553534242093, 2.344456911024054, 2.3700407479716614, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0886276587843895, 0.08889182657003403, 0.08545766770839691, 0.07977809756994247, 0.08241976052522659, 0.07977809756994247, 0.07660810649394989, 0.07938185334205627, 0.06987188011407852, 0.07290978729724884, 0.07872143387794495, 0.09285431355237961, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9720933096749442, 1.9735168048313685, 1.9749464307512556, 1.9767197200230189, 1.9788194383893694, 1.9813846860613142, 1.984626633780343, 1.988638128553118, 1.9946696417672294, 2.006944383893694, 2.0501344544546947, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.033666666597127914, 0.030666666105389595, 0.02500000037252903, 0.02866666577756405, 0.03566666692495346, 0.04399999976158142, 0.05999999865889549, 0.07466666400432587, 0.08833333104848862, 0.0989999994635582, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 2, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 0, 1, 3, 3, 3, 0, 3, 3, 3, 0, 3, 2, 0, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 17, 78, 38, 37, 22, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027550055602477, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 2, 9, 1, 6, 5, 2, 3, 5, 3, 2, 2, 3, 8, 9, 6, 3, 7, 8, 2, 3, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 2, 3, 1, 1, 3, 3, 3, 0, 3, 3, 3, 0, 3, 3, 0, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [14, 61, 78, 36, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 13, 13, 8, 5, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.sqrt(alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301959138678018, 2.303007534356118, 2.3026869686886524, 2.3031249199372086, 2.3023931123262162, 2.3028582461269824], "accuracy": [0.08928807079792023, 0.09087307006120682, 0.09206181764602661, 0.0886276587843895, 0.08994849026203156, 0.09192973375320435], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 5, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 1, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 2, 2, 2, 5, 3, 3, 3, 3, 2, 3, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 13, 13, 8, 5, 2, 21, 21, 11, 10, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), alpha), tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(alpha, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301959952784095, 2.303012752451082, 2.302700279505655, 2.3031494687687153, 2.3024375703529736, 2.3029323224740463], "accuracy": [0.08942015469074249, 0.09087307006120682, 0.09192973375320435, 0.0886276587843895, 0.08955223858356476, 0.09166556596755981], "val_loss": [1.9710090500967843, 1.9710161345345634, 1.971027033669608, 1.9710405894688197, 1.9710578237261092, 1.9710853440420968], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.036666665226221085, 0.036666665226221085, 0.03700000047683716]}}]