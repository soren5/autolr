[{"genotype": [[0], [1], [1], [], [1, 0], [51], [1], [1], [], [5], [], [1], [], [], [], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [4, 5, 5, 1, 1, 5, 1], [3, 2, 2, 3, 0, 0, 0], [73]], "fitness": -0.2231428623199463, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 7, 5, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.subtract(sigma, beta)), beta), sigma))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3013711644516426, 2.296515895674462, 2.2890866068234264, 2.2781923953426544, 2.2704558635447647, 2.281256350165959, 2.2921603306992147, 2.2946328160123834, 2.291444461894561], "accuracy": [0.09681680053472519, 0.11715757846832275, 0.14132875204086304, 0.1624620258808136, 0.14780081808567047, 0.12996962666511536, 0.1224408894777298, 0.10976093262434006, 0.11834631860256195], "val_loss": [1.9693918228149414, 1.9609343664986747, 1.9532384872436523, 1.9394308498927526, 1.9341327122279577, 1.9578278405325753, 1.96616302217756, 1.9627532277788435, 1.969193935394287], "val_accuracy": [0.0533333346247673, 0.14433333277702332, 0.2473333328962326, 0.25466665625572205, 0.21299999952316284, 0.16766667366027832, 0.10000000149011612, 0.14366666972637177, 0.12733332812786102]}}, {"genotype": [[0], [0], [1, 1, 1, 1, 1, 0, 1], [1, 2, 6], [1, 0], [6, 61], [1], [1], [0, 7], [5], [], [0], [1], [], [6], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 3, 9, 7, 1, 1, 8], [3, 2, 2, 3, 0, 0, 0], [4]], "fitness": -0.2014285773038864, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3014114923040077, 2.3025628848397703, 2.302313020027482, 2.301753946125956, 2.3005607643021633, 2.302987320201744, 2.3011572341153084, 2.3007717622253856, 2.3025062413594157, 2.2989912273357604, 2.2999241688405485, 2.3012395696144976, 2.3003370246363195, 2.2992738337485923, 2.2979487564742933, 2.298372837278774, 2.2983638136504334, 2.2993340568771736, 2.298398107317823, 2.2983524472470043, 2.298588684757451, 2.2982166946808174, 2.297975888388929, 2.2972775084735253, 2.2974343715862213, 2.296679565698999, 2.296904272706265, 2.29659128374884, 2.29639972646585, 2.29536523533661, 2.295591752290757, 2.295776347442625, 2.2954718230218147, 2.295882605101848, 2.294617812143199, 2.2944036808626103, 2.2952055391020165, 2.2940571929139075, 2.293132854663716, 2.293724285093486, 2.2934052947332453, 2.2930318377415078, 2.293637705233434, 2.2938141643316077, 2.2919132435216314, 2.2925002835351465, 2.2923105090537708, 2.291693628739687, 2.292954227534173, 2.2922316463852384, 2.291421845541528, 2.291734867029186, 2.2919305027468075, 2.2911072854022025, 2.2907090738165756, 2.290073281565142, 2.290809036009757, 2.290738851670434, 2.2907502996356275, 2.2895335843770606, 2.2905258458477236, 2.2895441680709685, 2.289156583321959, 2.2890714928930964, 2.2886042442808, 2.2879616525808992, 2.28759598376146, 2.28900535404879, 2.2893219220876033, 2.2883367728657964, 2.288136776774362, 2.2875052276871317, 2.287635681604303, 2.2878501532084403, 2.2868508051541094, 2.286213109301475, 2.286874721897686, 2.2864879611429365, 2.286200661212698, 2.2858186644207863, 2.286755693114712, 2.2848812740523945, 2.2845722495635674, 2.28438491733744, 2.2851501604537954, 2.2837808190744946, 2.2839123322868926, 2.2857359012419347, 2.282332726252975, 2.282801414131252, 2.283943861703264, 2.2823940470328563, 2.283381985698504, 2.282901520427381, 2.28194612786597, 2.282242173799639, 2.2820090383759672, 2.2815476378996484, 2.2819865990025163, 2.2824697240689145], "accuracy": [0.09602430462837219, 0.0956280529499054, 0.09179764986038208, 0.09417514503002167, 0.09206181764602661, 0.09351472556591034, 0.09509972482919693, 0.09774138033390045, 0.0874389111995697, 0.09536388516426086, 0.09681680053472519, 0.09589222073554993, 0.0952318087220192, 0.10051512718200684, 0.09787346422672272, 0.10236428678035736, 0.09734513610601425, 0.09932637959718704, 0.1026284471154213, 0.1010434553027153, 0.1010434553027153, 0.09972262382507324, 0.09985470771789551, 0.10355303436517715, 0.1002509593963623, 0.09985470771789551, 0.1006472036242485, 0.10315678268671036, 0.10989301651716232, 0.10896842926740646, 0.10896842926740646, 0.11094967275857925, 0.10751552134752274, 0.10632677376270294, 0.11002509295940399, 0.11557257920503616, 0.10791176557540894, 0.11213842034339905, 0.11517632752656937, 0.11253467202186584, 0.10936468094587326, 0.11359133571386337, 0.11610091477632523, 0.11187426000833511, 0.11345925182104111, 0.11108175665140152, 0.11887465417385101, 0.11913882195949554, 0.11094967275857925, 0.1150442510843277, 0.11808215826749802, 0.12349755316972733, 0.1158367469906807, 0.11821424216032028, 0.12191256135702133, 0.11662924289703369, 0.11689341068267822, 0.11847840249538422, 0.11861048638820648, 0.11979923397302628, 0.12112006545066833, 0.12640337646007538, 0.11913882195949554, 0.12613920867443085, 0.12402588874101639, 0.12270505726337433, 0.1254788041114807, 0.12059172987937927, 0.12059172987937927, 0.12521463632583618, 0.12653546035289764, 0.13115836679935455, 0.12759213149547577, 0.13168670237064362, 0.12917712330818176, 0.13340377807617188, 0.12468630075454712, 0.13076211512088776, 0.13142253458499908, 0.13617752492427826, 0.13247919082641602, 0.1348566859960556, 0.1364416927099228, 0.1336679458618164, 0.13498876988887787, 0.1372341811656952, 0.14449875056743622, 0.1352529376745224, 0.13934750854969025, 0.1414608359336853, 0.14410249888896942, 0.13512085378170013, 0.14436666667461395, 0.14080041646957397, 0.14198917150497437, 0.14463083446025848, 0.14132875204086304, 0.1426495909690857, 0.14410249888896942, 0.1398758441209793], "val_loss": [1.9708053725106376, 1.9706031935555595, 1.9704029900687081, 1.9702016966683524, 1.9700031280517578, 1.9698031289236886, 1.9696038109915597, 1.9694031306675501, 1.9692014966692244, 1.9689999307904924, 1.968799114227295, 1.9685969352722168, 1.968395709991455, 1.9681972776140486, 1.967996052333287, 1.9677976199558802, 1.967599323817662, 1.9673999377659388, 1.9671989849635534, 1.9669993264334542, 1.9667979649135046, 1.9666006905691964, 1.9664023944309779, 1.9662058012826102, 1.9660073689052038, 1.9658088684082031, 1.965611117226737, 1.965414183480399, 1.9652156148638045, 1.9650165012904577, 1.96482024874006, 1.9646220888410295, 1.964425700051444, 1.9642276082720076, 1.9640289034162248, 1.963832174028669, 1.9636348996843611, 1.963437489100865, 1.9632417133876257, 1.9630438940865653, 1.9628451211111886, 1.9626476424080985, 1.9624522754124232, 1.9622541155133928, 1.9620586122785295, 1.9618651526314872, 1.96167026247297, 1.96147278376988, 1.9612782342093331, 1.961083275931222, 1.9608872277396066, 1.960688931601388, 1.9604926790509904, 1.960294451032366, 1.9600964273725237, 1.9599013328552246, 1.9597043309892928, 1.9595093045915877, 1.959313256399972, 1.9591193880353654, 1.9589245659964425, 1.9587291990007674, 1.9585352625165666, 1.9583373069763184, 1.9581406457083566, 1.9579452787126814, 1.9577492305210658, 1.957554817199707, 1.9573563848223006, 1.9571575437273299, 1.9569611549377441, 1.9567667416163854, 1.9565705571855818, 1.9563741002764021, 1.9561784608023507, 1.955982003893171, 1.9557865006583077, 1.9555882726396834, 1.9553912026541573, 1.9551952225821358, 1.955000877380371, 1.9548057147434779, 1.9546106883457728, 1.9544140951974052, 1.9542194775172643, 1.9540210451398576, 1.9538262231009347, 1.9536304473876953, 1.953434876033238, 1.9532369204929896, 1.953040667942592, 1.9528416224888392, 1.9526451655796595, 1.9524487086704798, 1.9522506850106376, 1.9520559992109026, 1.9518611090523856, 1.9516638347080775, 1.9514663560049874, 1.9512713296072823], "val_accuracy": [0.038333334028720856, 0.04066666588187218, 0.041999999433755875, 0.043666668236255646, 0.045666664838790894, 0.04633333161473274, 0.04699999839067459, 0.04800000041723251, 0.05000000074505806, 0.05133333429694176, 0.05233333259820938, 0.052666667848825455, 0.05366666615009308, 0.054666668176651, 0.055666666477918625, 0.0560000017285347, 0.05833333358168602, 0.059333331882953644, 0.061000000685453415, 0.06233333423733711, 0.06333333253860474, 0.06400000303983688, 0.06733333319425583, 0.06833333522081375, 0.06966666877269745, 0.07066666334867477, 0.0716666653752327, 0.07233333587646484, 0.07466666400432587, 0.07599999755620956, 0.07766667008399963, 0.07966666668653488, 0.08166666328907013, 0.08266666531562805, 0.08533333241939545, 0.08733333647251129, 0.08900000154972076, 0.09066666662693024, 0.09333333373069763, 0.09399999678134918, 0.09433333575725555, 0.0963333323597908, 0.09700000286102295, 0.09866666793823242, 0.10133333504199982, 0.10233332961797714, 0.10300000011920929, 0.10400000214576721, 0.10533333569765091, 0.10633333027362823, 0.10966666787862778, 0.11166666448116302, 0.1133333370089531, 0.11433333158493042, 0.11566666513681412, 0.11666666716337204, 0.11933333426713943, 0.12066666781902313, 0.1223333328962326, 0.12466666847467422, 0.12733332812786102, 0.1289999932050705, 0.1303333342075348, 0.13199999928474426, 0.13433332741260529, 0.1366666704416275, 0.1393333375453949, 0.140666663646698, 0.1420000046491623, 0.14366666972637177, 0.14633333683013916, 0.14900000393390656, 0.15333333611488342, 0.15533334016799927, 0.15800000727176666, 0.1599999964237213, 0.16300000250339508, 0.16433332860469818, 0.16733333468437195, 0.1679999977350235, 0.16899999976158142, 0.17233332991600037, 0.17466667294502258, 0.17666666209697723, 0.17900000512599945, 0.179666668176651, 0.18299999833106995, 0.1860000044107437, 0.18766666948795319, 0.1899999976158142, 0.19233334064483643, 0.1940000057220459, 0.19733333587646484, 0.1979999989271164, 0.20033332705497742, 0.20366667211055756, 0.20399999618530273, 0.20533333718776703, 0.2083333283662796, 0.2096666693687439]}}, {"genotype": [[0], [1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1], [1, 2, 6], [1, 0, 2, 1], [51, 76], [0, 0, 1, 1], [1], [], [3, 2, 3], [], [0, 0], [0, 1], [0], [7], [], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 7, 5], [0, 2, 0, 3], [4]], "fitness": -0.10285714268684387, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3015527458805622, 2.302581049117115, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736363547188895, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10566666722297668, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1], [7, 4, 6], [0, 2, 0, 3], [51, 1], [0, 0, 1, 1], [1], [0, 7], [3, 2, 3, 2], [], [0], [1], [], [5], [13], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 7, 5], [0, 2, 0, 3], [4]], "fitness": -0.10285714268684387, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3015527458805622, 2.302581049117115, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736363547188895, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10566666722297668, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [7, 2, 2, 2, 7, 4, 9, 1, 9], [0, 1, 0, 3, 0, 0], [6, 61, 40, 91, 91, 54], [1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 1], [3, 2, 1], [0, 2, 3, 2], [88], [0, 0, 0, 0], [1, 0, 1], [8, 2], [5], [19], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 7, 5], [0, 2, 0, 3], [4]], "fitness": -0.10285714268684387, "mapping_values": [1, 15, 15, 9, 6, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3015527458805622, 2.302581049117115, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736363547188895, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10566666722297668, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1], [1], [], [1, 0], [51], [1], [1], [], [5], [], [0, 0, 0], [0, 1, 1], [4], [2, 7], [], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [4, 5, 5, 1, 1, 5, 5], [3, 2, 0, 3, 1, 0, 0], [58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1], [7, 2, 6], [1, 2, 0, 1], [3, 65], [1, 1, 1, 1, 0, 1, 1], [0, 1, 1], [3, 2, 1], [3, 2, 3, 2], [], [0], [1], [], [5], [], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 7, 5], [0, 2, 0, 3], [59, 84]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 9, 5, 4, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09417514503002167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1], [1], [6, 2, 6, 0], [3, 0, 0, 3], [51], [1, 0, 1, 1, 0, 1, 1], [1], [3, 2, 1], [3, 2, 5], [], [1], [0], [], [], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [6, 1, 1, 7, 5, 3, 5], [3, 3, 2, 3, 0, 0, 0], [4, 22]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 7, 6, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.square(tf.math.multiply(tf.math.square(sigma), sigma)), beta), sigma), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0], [1], [], [1, 0, 3, 2, 3, 2], [2], [1, 0, 1, 1], [0, 1], [0, 2], [3, 2, 3], [], [1], [1], [], [], [], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 7, 5], [3, 1, 3, 2, 0], [73, 33]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, tf.math.subtract(alpha, tf.math.add(sigma, tf.math.square(beta)))))", "other_info": {"loss": [Infinity, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [1], [], [2, 0, 3, 2, 3, 2], [51], [1], [1], [], [5], [], [1], [], [], [], [], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [4, 5, 5, 1, 1, 5, 1], [3, 1, 3, 2, 0], [73]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 6, 4, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(tf.math.square(sigma)), tf.math.subtract(tf.math.subtract(tf.math.square(alpha), sigma), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [1], [], [2, 0, 3, 2, 3, 2], [2], [1, 0, 1, 1, 1], [1], [0, 2], [3, 1, 1, 1], [], [1], [0], [], [], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [4, 9, 9, 2, 1, 2, 1], [3, 1, 3, 3, 0], [73, 33]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 2], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3027265376702055, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0], [1], [6, 2, 6, 0], [0, 0, 0, 3], [6, 61], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 2, 1, 2, 1, 4, 8, 2], [5, 4, 2, 1, 4, 0, 5, 5], [4], [1], [], [], [], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [5, 5, 5, 1, 1, 5, 1], [3, 2, 2, 3, 0, 0, 0], [4]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 8, 8, 1, 1, 0, 0, 0, 0, 11, 7, 4, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(grad, grad), tf.math.subtract(tf.math.add(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.square(tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.subtract(sigma, beta)), beta), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1], [3, 2, 6, 0], [3, 0, 0, 2], [6, 61], [1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1], [2, 2, 1], [3, 2, 5, 3], [], [1], [0], [], [], [], [1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 7, 5], [1, 0], [4]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 7, 7, 3, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(beta, beta)), grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09325055778026581, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [1], [6, 2, 6, 0], [2, 0, 3, 2, 3, 2], [2], [1, 0, 1, 1, 0, 1, 1], [0, 1], [0, 2], [3, 2, 5], [], [1], [0], [], [], [], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 1, 1, 7, 5, 0, 1], [1, 0, 0, 2, 1], [4, 81]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 10, 5, 5, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.square(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), beta), alpha))", "other_info": {"loss": [2.4168738879547806, 2.2247918508053494e+25, 38692.256431304486, 9882055.125346718, 2571761186.33734, 649437296073.8312], "accuracy": [0.09760929644107819, 0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.300109727042062, 1254.9840611049108, 323036.27678571426, 82700612.57142857, 21171360914.285713, 5419868394057.143], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1], [1], [], [1, 0], [6, 61], [0, 0, 1, 1], [1], [], [1, 2], [], [1], [1], [], [0], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 5, 5, 1, 1, 0, 1], [0, 2, 0, 0, 2], [73, 47, 73]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 7, 4, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.negative(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), beta)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [37382651654771.336, 713002471520659.4, 3356737184269439.5, 9143680411359880.0, 1.9527457417306744e+16, 3.61673712881274e+16], "accuracy": [0.09972262382507324, 0.1010434553027153, 0.09589222073554993, 0.10117553919553757, 0.09906221181154251, 0.10210011899471283], "val_loss": [141569494464219.44, 1132584294828324.5, 3822022447146130.5, 9059990231693020.0, 1.7691710253732426e+16, 3.0576193689204444e+16], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 0, 1, 0, 1], [8, 2, 0], [2, 0, 3, 2, 3, 2], [51], [1, 0, 1, 1, 1], [1], [], [3, 1, 1, 1], [], [0, 0], [0, 1], [8], [2], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [4, 5, 5, 1, 1, 5, 1], [3, 2, 1, 3, 0, 0, 0], [73]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 12, 7, 5, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.subtract(sigma, beta)), alpha), sigma))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1], [1, 2, 6], [2, 0, 0, 3], [6, 61], [1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 7, 7, 1, 5], [1, 2, 3, 0], [88], [1], [], [], [0], [], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 1, 7, 5, 9, 3], [3, 2, 0, 3], [80, 81, 10]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 8, 4, 4, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.add(sigma, beta), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [3.3855170777054597e+18, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0], [1], [], [2, 0, 3, 2, 3, 2], [6, 61], [1, 0, 1, 1, 1], [1], [0, 7], [1, 2], [], [1], [1], [], [0], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [5, 1, 1, 7, 5, 0, 6], [3, 1, 3, 2, 0], [4]], "fitness": -0.09428571164608002, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 7, 5, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.square(tf.math.negative(tf.math.divide_no_nan(sigma, alpha))), sigma), beta), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2997683213765137, 2.3013231781070353, 2.3027108144199593, 2.3026910624594152, 2.305078207556881, 2.3466296977276313, 2.8573804562669056], "accuracy": [0.1006472036242485, 0.09325055778026581, 0.08308017253875732, 0.09866596013307571, 0.09866596013307571, 0.10289261490106583, 0.10170386731624603], "val_loss": [1.9697698184422083, 1.9734025682721819, 1.9737632615225655, 1.9745371682303292, 1.9817606381007604, 2.136107853480748, 3.171499252319336], "val_accuracy": [0.09133332967758179, 0.11733333021402359, 0.10466666519641876, 0.11166666448116302, 0.09966666996479034, 0.09799999743700027, 0.10433333367109299]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 2, 5, 5], [3, 0, 1, 3], [6, 61], [1, 0, 1, 0], [0, 0, 1, 1], [0, 7], [1, 2], [], [0, 0, 1, 0], [0, 0, 1], [4, 5], [0], [19], [1], [0, 1, 1, 7, 5], [3, 2, 0, 3], [4]], "fitness": -0.034857142716646194, "mapping_values": [1, 8, 8, 4, 4, 1, 4, 4, 2, 2, 0, 4, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.square(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301499282994117, 2.302867937931972, 2.302830103350322, 2.302488643668662, 2.3015035881326655, 2.3041431484063697], "accuracy": [0.09576013684272766, 0.0956280529499054, 0.09021265059709549, 0.09192973375320435, 0.08968432247638702, 0.09087307006120682], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0], [1, 1, 1, 1, 1, 0, 1], [1, 2, 6], [3, 0, 0, 3], [51], [1], [1], [0, 7], [1, 2], [], [0, 0, 1], [0, 1], [3], [7], [13], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], [0, 6, 1, 7, 5, 5, 8], [3, 2, 2, 3, 0, 0, 0], [4]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 11, 7, 4, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.square(tf.math.square(sigma)), beta), tf.math.sqrt(beta)), sigma))", "other_info": {"loss": [2.301499282994117, 2.302867937931972, 2.302830103350322, 2.302488643668662, 2.3015035881326655, 2.3041431484063697], "accuracy": [0.09576013684272766, 0.0956280529499054, 0.09021265059709549, 0.09192973375320435, 0.08968432247638702, 0.09087307006120682], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]