[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 1, 0, 2, 9, 6, 3, 2, 3, 9, 4, 3, 1, 0, 0, 0, 2, 7, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8, 47], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7868571281433105, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.287055856405925, 2.2439231819338756, 2.187696718442174, 2.0973763533272147, 1.9652536237685436, 1.779425864411131, 1.593515614760377, 1.4470545774469161, 1.3061766594691662, 1.2151009756355804, 1.1588289504667804, 1.0943239197172367, 1.0454805881560456, 1.0024884277724666, 0.9895516922287796, 0.9541714143491676, 0.9269106081526876, 0.9049261722503604, 0.8827097451272752, 0.88894724379819, 0.8680602625030112, 0.8446316170638909, 0.8368282604447413, 0.8207426170206278, 0.8176822015763967, 0.8094839621623116, 0.7936189192050893, 0.79872689706428, 0.7804296192413056, 0.7749534440298815, 0.7628262063862075, 0.76381413341592, 0.7485657064528308, 0.7494036056236143, 0.7361899804697376, 0.7368721713825791, 0.7404570131568924, 0.7286556627394233, 0.7317928523592835, 0.7125776221077944, 0.7143111411275928, 0.7079037931522499, 0.707636514257651, 0.6973823037885671, 0.6995586993876638, 0.6916421824174865, 0.6797840798834862, 0.683969240257249, 0.68574930937094, 0.6805092311963555, 0.6785508525558923, 0.6678208286310972, 0.664001449247818, 0.6679268855271385, 0.6677732571729217, 0.6629300145440964, 0.6534275084501716, 0.653452820750181, 0.6517223778685496, 0.648884844573702, 0.6476579513831334, 0.6459641175782754, 0.6489329000962267, 0.6361951844535719, 0.6366855851521566], "accuracy": [0.1266675442457199, 0.2374851405620575, 0.3259807229042053, 0.37168142199516296, 0.4139479696750641, 0.45489367842674255, 0.4916127324104309, 0.5194822549819946, 0.5565975308418274, 0.5777308344841003, 0.5993924140930176, 0.6166952848434448, 0.6293752193450928, 0.6433760523796082, 0.6482630968093872, 0.6601505875587463, 0.6679434776306152, 0.6798309087753296, 0.681547999382019, 0.6827367544174194, 0.6909258961677551, 0.6948884129524231, 0.6964733600616455, 0.7013604640960693, 0.7029454708099365, 0.7053229212760925, 0.7103421092033386, 0.7079645991325378, 0.7206445932388306, 0.7234182953834534, 0.7217012047767639, 0.7199841737747192, 0.724739134311676, 0.7255316376686096, 0.733060359954834, 0.7316074371337891, 0.7304186820983887, 0.7338528633117676, 0.7296261787414551, 0.7357020378112793, 0.7407211661338806, 0.7430986762046814, 0.7395324110984802, 0.7452120184898376, 0.7441553473472595, 0.7445515990257263, 0.750231146812439, 0.7499669790267944, 0.7478536367416382, 0.7526086568832397, 0.7498348951339722, 0.7568352818489075, 0.7514199018478394, 0.7549861073493958, 0.7585523724555969, 0.7585523724555969, 0.76106196641922, 0.7580240368843079, 0.7635715007781982, 0.7586844563484192, 0.761590301990509, 0.7563069462776184, 0.7643640041351318, 0.7688548564910889, 0.7638356685638428], "val_loss": [1.9337502888270788, 1.8883839334760393, 1.8188768114362444, 1.7074649333953857, 1.5480235644749232, 1.351794958114624, 1.1671665736607142, 1.0279219831739153, 0.9216986383710589, 0.8474603039877755, 0.7957472801208496, 0.7552846159253802, 0.7236543723515102, 0.7001140117645264, 0.6797667060579572, 0.665323291506086, 0.6480533565793719, 0.6374548843928746, 0.6262365409306118, 0.6151737826211112, 0.608155505997794, 0.596266508102417, 0.5907778058733258, 0.5831485305513654, 0.5764802183423724, 0.5718661206109183, 0.5654484714780535, 0.5621140003204346, 0.5552259853907994, 0.5531256539481026, 0.5496959175382342, 0.5436427082334246, 0.5385780675070626, 0.5361618995666504, 0.5334889037268502, 0.5291615554264614, 0.5260225875037057, 0.523546610559736, 0.5180294513702393, 0.516885689326695, 0.5129010847636631, 0.5111617020198277, 0.50688294001988, 0.5138507229941232, 0.5045830011367798, 0.5016976765223912, 0.4978148937225342, 0.4997399364198957, 0.4939108405794416, 0.49556119101388113, 0.49344968795776367, 0.4869612285069057, 0.49185167040143696, 0.48400938510894775, 0.4819587128502982, 0.4821957179478237, 0.47904101439884733, 0.4798928328922817, 0.47974816390446257, 0.47327607018607004, 0.47478088310786654, 0.472237161227635, 0.4705697808946882, 0.4667339495250157, 0.4660578284944807], "val_accuracy": [0.32866665720939636, 0.41466665267944336, 0.476666659116745, 0.5403333306312561, 0.5816666483879089, 0.5973333120346069, 0.625333309173584, 0.6726666688919067, 0.6859999895095825, 0.6953333616256714, 0.70333331823349, 0.7066666483879089, 0.7173333168029785, 0.7223333120346069, 0.7293333411216736, 0.7283333539962769, 0.734000027179718, 0.7363333106040955, 0.7413333058357239, 0.7440000176429749, 0.7446666955947876, 0.7483333349227905, 0.7506666779518127, 0.7570000290870667, 0.7616666555404663, 0.7566666603088379, 0.7486666440963745, 0.7599999904632568, 0.765333354473114, 0.7603333592414856, 0.7549999952316284, 0.7680000066757202, 0.7673333287239075, 0.7689999938011169, 0.7643333077430725, 0.7683333158493042, 0.7736666798591614, 0.7736666798591614, 0.7770000100135803, 0.7713333368301392, 0.7726666927337646, 0.7753333449363708, 0.7786666750907898, 0.7799999713897705, 0.7799999713897705, 0.7789999842643738, 0.7803333401679993, 0.778333306312561, 0.7856666445732117, 0.7749999761581421, 0.7853333353996277, 0.7816666960716248, 0.7786666750907898, 0.7873333096504211, 0.7820000052452087, 0.7963333129882812, 0.7893333435058594, 0.7839999794960022, 0.7893333435058594, 0.8019999861717224, 0.7956666946411133, 0.7893333435058594, 0.7919999957084656, 0.7983333468437195, 0.793666660785675]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 1, 9, 2, 9, 5, 3, 2, 3, 9, 4, 3, 1, 0, 0, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [1, 3, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8, 47], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7860000133514404, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 22, 12, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.287055824914896, 2.243923244915933, 2.1876968938786954, 2.0973775090794633, 1.9652587744097243, 1.7794224359828248, 1.593520383557088, 1.4470548732736406, 1.3061796574151086, 1.2151262276302697, 1.158853376766694, 1.0943805906262773, 1.04548980627298, 1.0025180617123233, 0.9896230300451235, 0.9542576595068198, 0.9269591725859833, 0.9049331412465266, 0.882840917693342, 0.8889703437274615, 0.8680790499563246, 0.8445970044238708, 0.8369370793244464, 0.820713572151956, 0.8176536446454707, 0.8095307739151625, 0.7937018685667758, 0.7987762995840709, 0.7804345324637474, 0.7750330889276966, 0.7629064250426947, 0.7638663791977198, 0.748767197053383, 0.7495087676233446, 0.7363207060836325, 0.736847681762079, 0.7405009542662848, 0.7289695122915567, 0.7317461626184237, 0.7126640127303814, 0.7142131716473511, 0.7079124783779951, 0.7074784180979766, 0.6974068925506985, 0.6996624315529767, 0.69163743105106, 0.6799576840915889, 0.6841308916044935, 0.6857698286576372, 0.6805807182959215, 0.678469050451749, 0.6675238840379388, 0.6640743543569202, 0.6678144415970161, 0.6678982772658356, 0.6628991004466822, 0.6533603647428812, 0.653511789260429, 0.6517160010769256, 0.6490661425912353, 0.6474693839292737, 0.6460731632721155, 0.6490365234127984, 0.6363547717449515, 0.6367354547862505], "accuracy": [0.1266675442457199, 0.2374851405620575, 0.3259807229042053, 0.37181350588798523, 0.41408005356788635, 0.4551578462123871, 0.4916127324104309, 0.5192180871963501, 0.5563333630561829, 0.5777308344841003, 0.5992603302001953, 0.6164311170578003, 0.6292431354522705, 0.6433760523796082, 0.6481310129165649, 0.6598864197731018, 0.6675472259521484, 0.6794346570968628, 0.6811517477035522, 0.6823405027389526, 0.6910579800605774, 0.6951525807380676, 0.6960771083831787, 0.700700044631958, 0.7037379741668701, 0.7041342258453369, 0.7103421092033386, 0.7083608508110046, 0.7205125093460083, 0.7230220437049866, 0.7219653725624084, 0.7205125093460083, 0.7255316376686096, 0.7248712182044983, 0.7341170310974121, 0.7316074371337891, 0.7300224304199219, 0.733588695526123, 0.7298903465270996, 0.7346453666687012, 0.7405890822410583, 0.7425703406333923, 0.739400327205658, 0.7453441023826599, 0.7453441023826599, 0.744419515132904, 0.7503632307052612, 0.7504953145980835, 0.7475894689559937, 0.7516840696334839, 0.7495707273483276, 0.7564390301704407, 0.7510236501693726, 0.7543256878852844, 0.759080708026886, 0.7589486241340637, 0.7598732113838196, 0.7584202885627747, 0.7627789974212646, 0.7582882046699524, 0.76106196641922, 0.757099449634552, 0.7650244235992432, 0.7675340175628662, 0.7635715007781982], "val_loss": [1.9337504250662667, 1.8883842740740096, 1.8188769476754325, 1.7074683393750871, 1.5480265957968575, 1.351790291922433, 1.1671666417803084, 1.027949026652745, 0.9217133522033691, 0.8474534239087786, 0.7957461561475482, 0.7553056819098336, 0.7236757278442383, 0.7001253536769322, 0.6798635040010724, 0.665359616279602, 0.6481203181403024, 0.6375579833984375, 0.6263864721570697, 0.6152618953159877, 0.6081385101590838, 0.5962910652160645, 0.5908753531319755, 0.5830903393881661, 0.5764157090868268, 0.5717924152101789, 0.5653759581702096, 0.5622035264968872, 0.5553371054785592, 0.5531386647905622, 0.5495441811425346, 0.543764591217041, 0.5386386598859515, 0.5361724240439278, 0.533522197178432, 0.5293627807072231, 0.5261931930269513, 0.5236608130591256, 0.5181582655225482, 0.5170644181115287, 0.512966479573931, 0.5111140183040074, 0.5068087918417794, 0.5142016410827637, 0.5045416695731026, 0.5017075708934239, 0.4977615901402065, 0.4994105441229684, 0.4936995506286621, 0.4956015348434448, 0.493520838873727, 0.48682871886662077, 0.49153334753853933, 0.483979480607169, 0.48195135593414307, 0.4822565657751901, 0.4790455102920532, 0.47981955323900494, 0.48001791749681744, 0.4735248599733625, 0.47458207607269287, 0.4722729580742972, 0.4705560547964914, 0.4665857383183071, 0.46576883111681255], "val_accuracy": [0.32866665720939636, 0.41466665267944336, 0.476666659116745, 0.5403333306312561, 0.5816666483879089, 0.5976666808128357, 0.624666690826416, 0.6729999780654907, 0.6863333582878113, 0.6949999928474426, 0.7036666870117188, 0.7066666483879089, 0.7173333168029785, 0.7223333120346069, 0.7293333411216736, 0.7283333539962769, 0.7336666584014893, 0.7366666793823242, 0.7413333058357239, 0.7440000176429749, 0.7450000047683716, 0.7480000257492065, 0.7509999871253967, 0.7563333511352539, 0.7616666555404663, 0.7563333511352539, 0.7486666440963745, 0.7593333125114441, 0.765666663646698, 0.7596666812896729, 0.7549999952316284, 0.7680000066757202, 0.7680000066757202, 0.7696666717529297, 0.765999972820282, 0.768666684627533, 0.7739999890327454, 0.7730000019073486, 0.7763333320617676, 0.7706666588783264, 0.7720000147819519, 0.7753333449363708, 0.7789999842643738, 0.7793333530426025, 0.7806666493415833, 0.7786666750907898, 0.7816666960716248, 0.7770000100135803, 0.7850000262260437, 0.7753333449363708, 0.7860000133514404, 0.7823333144187927, 0.7796666622161865, 0.7879999876022339, 0.7826666831970215, 0.7973333597183228, 0.7889999747276306, 0.784333348274231, 0.7893333435058594, 0.8026666641235352, 0.7963333129882812, 0.7903333306312561, 0.7926666736602783, 0.7996666431427002, 0.7943333387374878]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 0, 2, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7857142686843872, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.287055856405925, 2.2439230694794117, 2.187696678007693, 2.0973754445591055, 1.9652561719281216, 1.7794264282107652, 1.5935259338824064, 1.4470632871411906, 1.3061894993535783, 1.2151197230795419, 1.158845425092974, 1.0943336619393638, 1.0454627175640359, 1.0024996078907145, 0.9895605746119832, 0.9541721939961861, 0.926895966060315, 0.9049384338177742, 0.8827715471058222, 0.8888920889853675, 0.8680730759192137, 0.8446183762199544, 0.8369484898310611, 0.8207613481601089, 0.8176044613898407, 0.8095084400838943, 0.793617801974242, 0.798711853658109, 0.7804888803504477, 0.7750042455386271, 0.7629083479164047, 0.7638143464684755, 0.7485972334601387, 0.7495063619055626, 0.7361536781943123, 0.7368445251958246, 0.7403761607355777, 0.728948994154282, 0.7318459480760782, 0.7126928024744833, 0.7142882857182873, 0.7079578909844361, 0.7076125221009331, 0.6972824879499427, 0.6998400149517339, 0.6915590282538941, 0.6799766278348783, 0.6841997783481012, 0.6857831047479077, 0.68025841681933, 0.6787233172689903, 0.6677005825702776, 0.6639259996163516, 0.667981370179377, 0.667925875176843, 0.6630086313070576, 0.6533839237956071, 0.6534790368584625, 0.6516791232872035, 0.6489604382608797, 0.647481193860225, 0.6458934791068265, 0.6488628637726124, 0.636449391910224, 0.6367383470640459], "accuracy": [0.1266675442457199, 0.2374851405620575, 0.3259807229042053, 0.3719455897808075, 0.4139479696750641, 0.4550257623195648, 0.49187690019607544, 0.5192180871963501, 0.5563333630561829, 0.5773345828056335, 0.5993924140930176, 0.6165632009506226, 0.6296393871307373, 0.6432439684867859, 0.6479989290237427, 0.6597543358802795, 0.667811393737793, 0.6794346570968628, 0.681547999382019, 0.6832650899887085, 0.6910579800605774, 0.6944921612739563, 0.6963412761688232, 0.7013604640960693, 0.7028133869171143, 0.7042662501335144, 0.7106062769889832, 0.7079645991325378, 0.7205125093460083, 0.7232862114906311, 0.7214370369911194, 0.7206445932388306, 0.7246070504188538, 0.7255316376686096, 0.7337207794189453, 0.7310791015625, 0.7296261787414551, 0.733588695526123, 0.7300224304199219, 0.7363624572753906, 0.739928662776947, 0.7429665923118591, 0.7395324110984802, 0.7453441023826599, 0.7440232634544373, 0.7445515990257263, 0.7500990629196167, 0.7497028112411499, 0.7469290494918823, 0.7524765729904175, 0.7498348951339722, 0.7576277852058411, 0.7515519857406616, 0.7543256878852844, 0.7588165402412415, 0.7589486241340637, 0.7598732113838196, 0.7576277852058411, 0.7629110813140869, 0.7589486241340637, 0.7617223858833313, 0.7574957013130188, 0.7651565074920654, 0.7683265209197998, 0.7642319202423096], "val_loss": [1.9337504250662667, 1.8883843421936035, 1.81887572152274, 1.7074651718139648, 1.5480258124215263, 1.3518144743783134, 1.1671663693019323, 1.0279334953853063, 0.9217336177825928, 0.8474813870021275, 0.79576689856393, 0.7552977800369263, 0.7236760003226144, 0.7000733443668911, 0.6797050748552594, 0.665317143712725, 0.6480416400091988, 0.6375048330851963, 0.6264900820595878, 0.6153233902794975, 0.6082089287894112, 0.5962433985301426, 0.5908933196749006, 0.5830810070037842, 0.5763625076838902, 0.5717782974243164, 0.5653858525412423, 0.5621234689440046, 0.5553221021379743, 0.5530270678656442, 0.5494809150695801, 0.543533205986023, 0.538691622870309, 0.5362711463655744, 0.5335057633263725, 0.5293437242507935, 0.5259642260415214, 0.5235961845942906, 0.518267001424517, 0.5167796782084874, 0.5130139589309692, 0.5111357654844012, 0.5067837749208722, 0.5139638526099068, 0.5045409372874669, 0.5017025641032627, 0.49792654173714773, 0.4993929862976074, 0.4937752996172224, 0.49513701030186247, 0.49373740809304373, 0.4869288206100464, 0.49192518847329275, 0.48399342809404644, 0.4820986304964338, 0.4822873728615897, 0.47907607895987375, 0.4799595560346331, 0.4798069851739066, 0.47351995536259245, 0.4744452238082886, 0.4719222273145403, 0.4706441504614694, 0.4666050502232143, 0.4658846514565604], "val_accuracy": [0.32866665720939636, 0.41466665267944336, 0.476666659116745, 0.5403333306312561, 0.5816666483879089, 0.5973333120346069, 0.625, 0.6726666688919067, 0.6859999895095825, 0.6953333616256714, 0.7036666870117188, 0.7066666483879089, 0.7176666855812073, 0.721666693687439, 0.7293333411216736, 0.7286666631698608, 0.7336666584014893, 0.7363333106040955, 0.7413333058357239, 0.7443333268165588, 0.7446666955947876, 0.7473333477973938, 0.7523333430290222, 0.7563333511352539, 0.7620000243186951, 0.7563333511352539, 0.7486666440963745, 0.7586666941642761, 0.765666663646698, 0.7609999775886536, 0.7556666731834412, 0.7683333158493042, 0.7680000066757202, 0.7683333158493042, 0.7643333077430725, 0.7693333625793457, 0.7733333110809326, 0.7739999890327454, 0.7760000228881836, 0.7706666588783264, 0.7720000147819519, 0.7746666669845581, 0.777999997138977, 0.7793333530426025, 0.781000018119812, 0.7796666622161865, 0.781000018119812, 0.7773333191871643, 0.7850000262260437, 0.7756666541099548, 0.7850000262260437, 0.7820000052452087, 0.7776666879653931, 0.7886666655540466, 0.7816666960716248, 0.79666668176651, 0.7896666526794434, 0.7833333611488342, 0.7900000214576721, 0.8009999990463257, 0.7953333258628845, 0.7913333177566528, 0.7929999828338623, 0.7996666431427002, 0.7953333258628845]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 5, 3, 3, 3, 3, 2, 2, 1, 3, 9, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 2, 3, 1, 1, 2, 4], [68, 86, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10857142508029938, "mapping_values": [1, 4, 4, 2, 2, 0, 30, 30, 17, 13, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(grad), grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, alpha)), alpha), tf.math.add(beta, alpha))), tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(beta))), tf.math.add(beta, grad)))), grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302278496884966, 2.2989496371655056, 2.300117576567882, 2.30195927434137, 2.30226176629969, 2.3024297069171165, 2.302785768673924, 2.302978670655335], "accuracy": [0.08981640636920929, 0.10460969805717468, 0.10936468094587326, 0.10989301651716232, 0.11451591551303864, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9692182540893555, 1.9698798315865653, 1.9721717834472656, 1.9732025691441126, 1.97349180494036, 1.9737769535609655, 1.9739231382097517, 1.9740475245884486], "val_accuracy": [0.08366666734218597, 0.12066666781902313, 0.1313333362340927, 0.12099999934434891, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 3, 3, 0, 2, 6, 5, 3, 4, 3, 3, 2, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 89, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 29, 29, 16, 13, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, alpha)), tf.math.multiply(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(grad, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, beta)))))))))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303935208041607, 2.303674886444257, 2.3063353524153274, 2.3083320165968466, 2.3135415485207242, 2.3142994992280475, 2.3198068664688334, 2.326816055233358, 2.3319037474220488, 2.3415044690513684, 2.3739186067937657, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08479725569486618, 0.0886276587843895, 0.08453308790922165, 0.08189142495393753, 0.07396645098924637, 0.07845727354288101, 0.07555144280195236, 0.07198520749807358, 0.08083476126194, 0.07475894689559937, 0.08070268481969833, 0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9722025053841727, 1.9735168729509627, 1.9752415929521834, 1.9769855226789201, 1.9796085357666016, 1.9819894518171037, 1.9851290839059013, 1.9894960948399134, 1.995466709136963, 2.007551601954869, 2.0558276857648576, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03233333304524422, 0.0273333340883255, 0.02266666665673256, 0.021666666492819786, 0.025333333760499954, 0.03466666489839554, 0.05166666582226753, 0.07000000029802322, 0.08733333647251129, 0.0989999994635582, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 8, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 3, 2, 2, 8, 3, 4, 4, 8, 1, 3, 6, 2, 0, 7, 8, 2, 4, 2, 8, 2, 1, 9, 6, 6, 0, 5, 2, 2, 9, 0], [3, 3, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 1, 2], [21, 2, 73, 88, 36, 45, 97], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 1, 9, 2, 9, 2, 3, 2, 3, 9, 4, 3, 1, 0, 0, 0, 3, 4, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [1, 3, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8, 47, 43], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 35, 35, 22, 13, 7, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, beta)))))))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08268392831087112, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(grad, alpha), tf.math.sqrt(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 4, 6, 2, 2, 8, 3, 4, 4, 8, 1, 3, 6, 2, 0, 7, 2, 2, 9, 8, 2, 2, 8, 9, 6, 0, 0, 5, 0, 2, 9], [2, 3, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 4, 4, 5, 3, 3, 3, 1, 3, 4, 0], [21, 2, 73, 68, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 50, 50, 31, 19, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(grad, alpha)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.pow(grad, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(grad))))))))))))), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 1, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 2, 1, 3, 3, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, grad), grad)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08268392831087112, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [7, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 1, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 6, 3, 3, 1, 1, 0, 1, 1, 3, 2, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.subtract(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.30872228866429, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08360850811004639, 0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9988882882254464, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 1, 9, 2, 9, 5, 4, 2, 3, 9, 4, 3, 1, 0, 0, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [1, 2, 1, 3, 3, 0, 3, 0, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 1, 2], [21, 2, 92, 38, 8, 47], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 10, 10, 7, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), beta), tf.math.add(beta, tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1574428677558899, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [85, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 0, 0, 2, 2, 3, 3, 8, 2, 5, 4, 8, 1, 0, 6, 6, 3, 7, 1, 2, 6, 5, 8, 2, 9, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 0, 0, 3, 3, 0, 3, 3, 3, 2, 4, 3, 5, 3, 1, 1, 1, 2], [68, 9, 8, 15, 8, 84, 51], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 2, 43, 43, 27, 16, 7, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.pow(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), grad)), grad), tf.math.add(beta, beta)))), tf.math.add(beta, grad))))))))))), grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.sqrt(tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 1, 8, 2, 6, 2, 3, 8, 3, 4, 4, 8, 1, 0, 6, 0, 0, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 3, 4, 0, 0, 3, 0, 3, 3, 3, 2, 4, 4, 5, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08268392831087112, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 9, 1, 8, 2, 6, 2, 3, 8, 3, 4, 4, 8, 1, 0, 6, 0, 0, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.0674285739660263, "mapping_values": [1, 4, 4, 2, 2, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(alpha)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3028922681527573, 2.3004179290571956, 2.3004268489540873, 2.300731897637545, 2.3012895204009727, 2.300191859779514, 2.3004572902924316, 2.3006065062811474, 2.2994437900437905, 2.2999806671787515, 2.300190959104599, 2.299918478159715, 2.298823387458135, 2.2998391059348453, 2.300114898570792, 2.300638457110466], "accuracy": [0.08717474341392517, 0.09602430462837219, 0.09826971590518951, 0.09536388516426086, 0.09325055778026581, 0.09906221181154251, 0.1014397069811821, 0.09932637959718704, 0.10051512718200684, 0.09813763201236725, 0.09787346422672272, 0.10249637067317963, 0.10527011007070541, 0.09721305221319199, 0.09721305221319199, 0.10011887550354004], "val_loss": [1.9701856885637556, 1.9697873932974679, 1.9695361682346888, 1.969522339957101, 1.969419002532959, 1.9694836480276925, 1.9694382803780692, 1.9692253385271346, 1.9691094670976912, 1.9691476821899414, 1.969247817993164, 1.9694555146353585, 1.9697160720825195, 1.9699974741254533, 1.9701711790902274, 1.9703495161873954], "val_accuracy": [0.04866666719317436, 0.054999999701976776, 0.05966666713356972, 0.06400000303983688, 0.06599999964237213, 0.0676666647195816, 0.07066666334867477, 0.0729999989271164, 0.07800000160932541, 0.0820000022649765, 0.08566666394472122, 0.08500000089406967, 0.08266666531562805, 0.07866666465997696, 0.07999999821186066, 0.07966666668653488]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 9, 3, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303346845089972, 2.301665400816323, 2.3022712043499696, 2.302536970651728, 2.303939404473124, 2.302308389051259], "accuracy": [0.08651433140039444, 0.09192973375320435, 0.09470347315073013, 0.08889182657003403, 0.08281600475311279, 0.09219389408826828], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 6, 9, 2, 9, 5, 3, 4, 3, 9, 4, 3, 1, 0, 0, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 2, 1, 3, 3, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [21, 2, 78, 38, 8, 47], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 16, 16, 11, 5, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), grad)), grad), tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), alpha)), beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303346845089972, 2.301665400816323, 2.3022712043499696, 2.302536970651728, 2.303939404473124, 2.302308389051259], "accuracy": [0.08651433140039444, 0.09192973375320435, 0.09470347315073013, 0.08889182657003403, 0.08281600475311279, 0.09219389408826828], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 4, 1, 5, 3, 3, 3, 3, 2, 8, 1, 3, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 2, 1, 3, 3, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 24, 24, 13, 11, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), grad), tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, beta)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303346845089972, 2.301665400816323, 2.3022712043499696, 2.302536970651728, 2.303939404473124, 2.302308389051259], "accuracy": [0.08651433140039444, 0.09192973375320435, 0.09470347315073013, 0.08889182657003403, 0.08281600475311279, 0.09219389408826828], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 1, 9, 4, 9, 5, 3, 2, 3, 9, 4, 3, 1, 0, 0, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [1, 3, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8, 47], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 11, 5, 4, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha)), grad), tf.math.add(beta, tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), alpha), grad)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.303346957544436, 2.3016658326528012, 2.3022720455698225, 2.3025380143274043, 2.303940974458365, 2.3023101884171537], "accuracy": [0.08651433140039444, 0.09192973375320435, 0.09470347315073013, 0.08875974267721176, 0.08268392831087112, 0.09219389408826828], "val_loss": [1.9710071427481515, 1.9710074152265276, 1.9710077558244978, 1.9710078239440918, 1.9710081645420618, 1.9710084370204382], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 5, 2, 4, 3, 3, 2, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [2, 1, 3, 3, 0, 0, 3, 0, 3, 3, 3, 3, 4, 4, 5, 3, 3, 1, 1, 3, 4, 0], [21, 2, 73, 68, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [65, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 2, 55, 55, 34, 21, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(alpha, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.negative(grad), tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, grad)))))), tf.math.add(tf.math.sqrt(grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(grad)))))), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303346845089972, 2.301665400816323, 2.3022712043499696, 2.302536970651728, 2.303939404473124, 2.302308389051259], "accuracy": [0.08651433140039444, 0.09192973375320435, 0.09470347315073013, 0.08889182657003403, 0.08281600475311279, 0.09219389408826828], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]