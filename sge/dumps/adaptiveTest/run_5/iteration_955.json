[{"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 1, 3, 1, 3, 3, 2, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8268571496009827, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.11127895308114, 1.597492392729806, 1.0399376724012273, 0.8931161121464897, 0.7434688187577643, 0.6831947381328582, 0.6449555948803752, 0.5945688078054238, 0.581550490760123, 0.5424502158146084, 0.5244148688041743, 0.5236250017580811, 0.5264485136408611, 0.4801868659047686, 0.4701119202506887, 0.46423408110789527, 0.4465620683452252, 0.4325476911451838, 0.44913709153431186, 0.43016419094142, 0.3969473149900533, 0.39838571847469234, 0.38069310077759944, 0.3750689790201949], "accuracy": [0.2950733006000519, 0.48725399374961853, 0.6268656849861145, 0.6691322326660156, 0.719852089881897, 0.7362303733825684, 0.7543256878852844, 0.772288978099823, 0.7781006693840027, 0.7931581139564514, 0.8045172095298767, 0.806630551815033, 0.7955356240272522, 0.816008448600769, 0.8222163319587708, 0.8255184292793274, 0.8313300609588623, 0.8399154543876648, 0.826310932636261, 0.8442742228507996, 0.8492933511734009, 0.847840428352356, 0.8535200357437134, 0.856689989566803], "val_loss": [1.3301498208727156, 0.9492186478206089, 0.7342567103249686, 0.594143305506025, 0.5618777615683419, 0.4815042189189366, 0.4995003938674927, 0.5015120165688651, 0.45731353759765625, 0.41683351142065866, 0.4230616348130362, 0.42420978205544607, 0.4041229912212917, 0.3803873998778207, 0.38762507268360685, 0.3811621836253575, 0.36267517294202534, 0.3768330557005746, 0.35802228110177176, 0.34854347365243094, 0.3535606861114502, 0.35644350733075825, 0.346071081502097, 0.34276264905929565], "val_accuracy": [0.3973333239555359, 0.5763333439826965, 0.6673333048820496, 0.7379999756813049, 0.7433333396911621, 0.777999997138977, 0.7770000100135803, 0.7580000162124634, 0.7943333387374878, 0.8166666626930237, 0.812333345413208, 0.8116666674613953, 0.8146666884422302, 0.8379999995231628, 0.8286666870117188, 0.8320000171661377, 0.843999981880188, 0.8309999704360962, 0.8579999804496765, 0.8523333072662354, 0.8533333539962769, 0.8473333120346069, 0.8533333539962769, 0.8556666374206543]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 1, 3, 1, 3, 3, 2, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.817714273929596, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1113359214072025, 1.595585604416869, 1.143372722746532, 0.8322078748669497, 0.7646020965537753, 0.686240825513256, 0.6358992806861524, 0.6230260043442761, 0.5788351924837289, 0.5697524679288132, 0.5296965173372203, 0.5194128730813227, 0.5165823553893639, 0.4921197239764693, 0.47294039195476034, 0.466462489833071, 0.4378582725018212, 0.4387786673863393, 0.44524584359276204, 0.4267310266481525, 0.40290390029244527, 0.4005631993648603, 0.3823062577944831, 0.37705015480762394, 0.3677196606448487, 0.36296230558123427, 0.354595946263423, 0.36239578777914583, 0.34459692515307855], "accuracy": [0.2949412167072296, 0.4904239773750305, 0.6003170013427734, 0.6922467350959778, 0.7059833407402039, 0.7347774505615234, 0.7519482374191284, 0.761590301990509, 0.7844406366348267, 0.7725531458854675, 0.7971205711364746, 0.807158887386322, 0.8014793395996094, 0.8140271902084351, 0.8211596608161926, 0.82683926820755, 0.833179235458374, 0.8379341959953308, 0.8309338092803955, 0.8462554216384888, 0.8451988101005554, 0.8470479249954224, 0.8569541573524475, 0.8584070801734924, 0.8625016212463379, 0.8602562546730042, 0.869502067565918, 0.8628978729248047, 0.867520809173584], "val_loss": [1.330432959965297, 0.9802001885005406, 0.7219100168773106, 0.5857746771403721, 0.5548239265169416, 0.4939988170351301, 0.4885918583188738, 0.45326926027025494, 0.502394574029105, 0.43454121691840036, 0.41627512659345356, 0.4256067020552499, 0.410216007913862, 0.38778159448078703, 0.4028915507452829, 0.37965138469423565, 0.35997667482921053, 0.38387092522212435, 0.3585645982197353, 0.34552749565669466, 0.3509440507207598, 0.34531722749982563, 0.34884752546037945, 0.3376837798527309, 0.3650984082903181, 0.3666669470923288, 0.3803667000361851, 0.33740743568965365, 0.33464120967047556], "val_accuracy": [0.3973333239555359, 0.57833331823349, 0.687666654586792, 0.7120000123977661, 0.7456666827201843, 0.7736666798591614, 0.7826666831970215, 0.7933333516120911, 0.7536666393280029, 0.79666668176651, 0.8176666498184204, 0.8040000200271606, 0.812666654586792, 0.8353333473205566, 0.8243333101272583, 0.8320000171661377, 0.8456666469573975, 0.8263333439826965, 0.8550000190734863, 0.8513333201408386, 0.8516666889190674, 0.8543333411216736, 0.8529999852180481, 0.8583333492279053, 0.8453333377838135, 0.8496666550636292, 0.8353333473205566, 0.8566666841506958, 0.8556666374206543]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 6, 2, 0, 2, 2, 5, 6, 2, 0, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 0, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 84, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7662857174873352, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 14, 10, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), grad))))), tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), grad)), alpha), tf.math.subtract(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2888748346302785, 2.256323959628715, 2.2131236884666707, 2.156373342455591, 2.07077236056501, 1.9518326282690166, 1.805590777585472, 1.646251084467266, 1.4917461705198378, 1.3874947577104781, 1.301335498232017, 1.2237957713468877, 1.162141849367673, 1.118736147109024, 1.0811453935980655, 1.0373448451528018, 1.002992971304653, 0.9752145426982839, 0.9574819190422494, 0.9402914361128041, 0.9200208250793878, 0.9010317795359464, 0.8859236835646135, 0.8761043923799593, 0.8610219186354685, 0.8440084717513359, 0.8432716067834631, 0.8285911740675389, 0.8271807378797389, 0.8183686431561794, 0.8065650812182302, 0.7964191311118373, 0.7875903785000419, 0.7886705104433361, 0.7781024440530584, 0.7642960048874434, 0.7795976865970227, 0.7629284580952739, 0.7457201921110062, 0.7498608494966951, 0.7442758239302826, 0.7390644671406492, 0.7386083981348712, 0.7353417709156853, 0.7127015797012691], "accuracy": [0.12349755316972733, 0.2102760523557663, 0.2883370816707611, 0.34420815110206604, 0.39149385690689087, 0.41883501410484314, 0.4539690911769867, 0.4876502454280853, 0.5194822549819946, 0.5348038673400879, 0.5568616986274719, 0.579051673412323, 0.5962224006652832, 0.6070532202720642, 0.6215823292732239, 0.6305639743804932, 0.6416589617729187, 0.6553955674171448, 0.6577730774879456, 0.6634526252746582, 0.6708492636680603, 0.6802271604537964, 0.6802271604537964, 0.6877558827400208, 0.6921146512031555, 0.6951525807380676, 0.7005679607391357, 0.6989829540252686, 0.7057191729545593, 0.7058512568473816, 0.7098137736320496, 0.7102100253105164, 0.7137762308120728, 0.7127195596694946, 0.7145687341690063, 0.7219653725624084, 0.713379979133606, 0.7207766771316528, 0.7317395210266113, 0.7234182953834534, 0.7263241410255432, 0.7321357727050781, 0.7349095344543457, 0.7317395210266113, 0.7432307600975037], "val_loss": [1.9406718526567732, 1.9057586533682687, 1.8581727572849818, 1.7889182226998466, 1.6882384845188685, 1.5532738140651159, 1.3943993023463659, 1.2357239042009627, 1.0975682735443115, 0.9930239064352853, 0.9157724721091134, 0.8565130744661603, 0.8101847852979388, 0.7735663311822074, 0.7436566182545253, 0.7195199046816144, 0.6986336537769863, 0.6817480836595807, 0.6673487595149449, 0.6539710419518607, 0.642969012260437, 0.6317211048943656, 0.6230702570506504, 0.6147362674985614, 0.606351477759225, 0.600023695400783, 0.5916772059031895, 0.5867305483136859, 0.5802398749760219, 0.5772935833249774, 0.5716491426740374, 0.5672926221575055, 0.5619254112243652, 0.5571426493780953, 0.5540956088474819, 0.5486527170453753, 0.5521751642227173, 0.54490898336683, 0.5415394135883876, 0.5372728620256696, 0.5355883325849261, 0.5313850130353656, 0.5290857383183071, 0.5278956549508231, 0.5221333844321114], "val_accuracy": [0.2966666519641876, 0.39533331990242004, 0.44699999690055847, 0.4959999918937683, 0.5353333353996277, 0.5683333277702332, 0.5926666855812073, 0.6129999756813049, 0.6473333239555359, 0.6669999957084656, 0.6863333582878113, 0.6936666369438171, 0.6990000009536743, 0.7056666612625122, 0.7080000042915344, 0.7200000286102295, 0.7173333168029785, 0.7213333249092102, 0.7296666502952576, 0.7310000061988831, 0.7363333106040955, 0.734666645526886, 0.7386666536331177, 0.7409999966621399, 0.7409999966621399, 0.7446666955947876, 0.7433333396911621, 0.7446666955947876, 0.7553333044052124, 0.7563333511352539, 0.7523333430290222, 0.7576666474342346, 0.7606666684150696, 0.7596666812896729, 0.7573333382606506, 0.7613333463668823, 0.7646666765213013, 0.765999972820282, 0.7663333415985107, 0.7746666669845581, 0.7699999809265137, 0.7713333368301392, 0.7710000276565552, 0.7736666798591614, 0.7723333239555359]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 5, 6, 3, 2, 2, 6, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 0, 1, 2, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [78, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.728857159614563, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.189091734961118, 1.7696067323112816, 1.4415333694738404, 1.1988926791338606, 1.0725916546286374, 1.0165588638297853, 0.9039516134457959, 0.8374826817259954, 0.7502879062270161, 0.7735923840904815, 0.7137491195319335], "accuracy": [0.2525425851345062, 0.42728832364082336, 0.4897635579109192, 0.5762779116630554, 0.6061286330223083, 0.6145819425582886, 0.6483951807022095, 0.6753401160240173, 0.7149649858474731, 0.7080966830253601, 0.7275128960609436], "val_loss": [1.4657046794891357, 1.1897429398127966, 1.0150667939867293, 0.716136063848223, 0.7411356142589024, 0.6756696019853864, 0.6505030904497419, 0.631461501121521, 0.6274664572307042, 0.6125332457678658, 0.5592804806573051], "val_accuracy": [0.4309999942779541, 0.5476666688919067, 0.5886666774749756, 0.7016666531562805, 0.6603333353996277, 0.7300000190734863, 0.6970000267028809, 0.7059999704360962, 0.7076666951179504, 0.7273333072662354, 0.7276666760444641]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 2, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.49485713243484497, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 0, 3, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4980130217346486, 2.1082545704514737, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2681283950805664, 0.29560163617134094, 0.21965394914150238, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.85167019707816, 1.5744592121669225, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.22366666793823242, 0.4726666808128357, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [12, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 8, 5, 3, 2, 9, 2, 6, 0, 3, 4, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.4762857258319855, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 12, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad)))))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, grad)), alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3016132054122966, 2.3018035856865935, 2.2988300112496436, 2.2992660919310883, 2.298305154523798, 2.2975682735821006, 2.2965822822272015, 2.294609155353853, 2.2930703644959713, 2.2926571756510796, 2.2926827913986427, 2.2908953906459706, 2.2894752315636624, 2.289148162967257, 2.287620746983891, 2.2862381984875455, 2.284353299777679, 2.2849391312284903, 2.2826458370806817, 2.282668410039077, 2.280478326195125, 2.2791476139791134, 2.2782359074418888, 2.2778611796611745, 2.2766093586445675, 2.2755639963398173, 2.2743185500206806, 2.2726105942056636, 2.2741083503635475, 2.2710835194275947, 2.2690597651830173, 2.269139335675404, 2.267702487890888, 2.2679971883388603, 2.2656475010958674, 2.2643033809760116, 2.2641497464495535, 2.262942750109752, 2.2619202870104558, 2.2603112995317503, 2.258569711612877, 2.2568930564633987, 2.2543293307753696, 2.255869925124471, 2.2548050021356865, 2.25242655463994, 2.252287937334862, 2.249871667979841, 2.2496981947980363, 2.2496225833263, 2.246709934393838, 2.2460936457646947, 2.243169212290923, 2.2415044688750188, 2.24281208424788, 2.242279530327318, 2.240214421496872, 2.2394044683625465, 2.237542093642525, 2.2361963406183527, 2.234721691821623, 2.2333268616665873, 2.2308060469455437, 2.2322941426005203, 2.2279270047981505, 2.226750810117045, 2.2254947941489993, 2.224859966373305, 2.221718787107769, 2.2216028875568368, 2.2178845264813716, 2.218135965593172, 2.216153481727452, 2.2149115433514694, 2.2118806037542575, 2.2134253624140263, 2.209861263922098, 2.2079931863342153, 2.206270855336913, 2.2054112001322577, 2.2018398801805854, 2.202052728831571, 2.20036917245462, 2.1981502321213306, 2.1955634679115366, 2.1923532122870353, 2.192210131160115, 2.1907526398725388, 2.188312968085423, 2.1855331052012525, 2.185979737676193, 2.1818016255300248, 2.1822524171825948, 2.177207027743159, 2.176068796442012, 2.1760911894291777, 2.1708070006526112, 2.171324777061504, 2.1683366789935588, 2.164724799289585], "accuracy": [0.09602430462837219, 0.09126931428909302, 0.09813763201236725, 0.09932637959718704, 0.10051512718200684, 0.10328886657953262, 0.1026284471154213, 0.10989301651716232, 0.11517632752656937, 0.11108175665140152, 0.1216483935713768, 0.1162329912185669, 0.1282525360584259, 0.12508255243301392, 0.1302337795495987, 0.13617752492427826, 0.13921542465686798, 0.13498876988887787, 0.14291374385356903, 0.14555540680885315, 0.1476687341928482, 0.14872540533542633, 0.15031039714813232, 0.1530841439962387, 0.16259410977363586, 0.1632545292377472, 0.1640470176935196, 0.16470743715763092, 0.16919825971126556, 0.1728965789079666, 0.18121780455112457, 0.18319904804229736, 0.18280279636383057, 0.18293488025665283, 0.186104878783226, 0.19284109771251678, 0.19376568496227264, 0.19270901381969452, 0.20221899449825287, 0.20644564926624298, 0.20340773463249207, 0.20935148000717163, 0.2230881005525589, 0.20737022161483765, 0.21384228765964508, 0.22797517478466034, 0.22097477316856384, 0.228899747133255, 0.2296922504901886, 0.2316734939813614, 0.23035265505313873, 0.23339056968688965, 0.23986263573169708, 0.24924051761627197, 0.24078720808029175, 0.2382776439189911, 0.2491084337234497, 0.25003302097320557, 0.2533350884914398, 0.2576938271522522, 0.2561088502407074, 0.2619204819202423, 0.2661471366882324, 0.2572975754737854, 0.2642979919910431, 0.27063795924186707, 0.27420419454574585, 0.26878878474235535, 0.2797516882419586, 0.27539294958114624, 0.2810725271701813, 0.28424251079559326, 0.2875445783138275, 0.2843745946884155, 0.29665830731391907, 0.2847708463668823, 0.2895258367061615, 0.2911108136177063, 0.30101704597473145, 0.30801743268966675, 0.30880993604660034, 0.30405494570732117, 0.31145158410072327, 0.30880993604660034, 0.31105533242225647, 0.3156782388687134, 0.3159424066543579, 0.3160744905471802, 0.31845200061798096, 0.3191123902797699, 0.3195086419582367, 0.3267732262611389, 0.31898030638694763, 0.34064191579818726, 0.3339056968688965, 0.3276977837085724, 0.3420948386192322, 0.3366794288158417, 0.3419627547264099, 0.3439439833164215], "val_loss": [1.9700044223240443, 1.9689929144723075, 1.967996597290039, 1.9669955798557825, 1.9660006250653947, 1.965010166168213, 1.964017731802804, 1.9630313600812639, 1.9620386532374792, 1.9610448564801897, 1.9600580079214913, 1.9590623038155692, 1.9580704825265067, 1.957087448665074, 1.9561044148036413, 1.9551177706037248, 1.9541305133274622, 1.953134196145194, 1.9521495274135046, 1.9511468069893974, 1.9501609802246094, 1.9491658210754395, 1.9481729779924666, 1.947179181235177, 1.9461656979152135, 1.9451594352722168, 1.9441510609218053, 1.943129403250558, 1.9421116965157645, 1.9410912649972099, 1.9400601387023926, 1.9390217236110143, 1.9379797663007463, 1.9369450977870397, 1.9358961922781808, 1.93483339037214, 1.933774403163365, 1.9326868738446916, 1.9316047940935408, 1.9305196489606584, 1.92943389075143, 1.9283247675214494, 1.9272161892482214, 1.9260869026184082, 1.9249567304338728, 1.9238221304757255, 1.9226840564182825, 1.9215230260576521, 1.9203602245875768, 1.9191868645804269, 1.9180001531328474, 1.916797501700265, 1.915586267198835, 1.9143602507455009, 1.9131297383989607, 1.9118879181998116, 1.910640103476388, 1.9093751907348633, 1.908104419708252, 1.9068190710885184, 1.9055158751351493, 1.9042102268763952, 1.902881349836077, 1.901550224849156, 1.9001823152814592, 1.898801394871303, 1.8974083491734095, 1.896003110068185, 1.8945777756827218, 1.8931471279689245, 1.891679286956787, 1.8902160780770438, 1.888735362461635, 1.8872312137058802, 1.8857019969395228, 1.8841598374503, 1.8826118877955846, 1.8810317856924874, 1.8794196673801966, 1.8777940613882882, 1.87614073072161, 1.8744782039097376, 1.872807502746582, 1.8710943630763464, 1.8693633079528809, 1.8675973755972726, 1.8658328737531389, 1.8640326772417342, 1.8622170175824846, 1.8603719983782088, 1.8585244587489538, 1.8566223553248815, 1.8547062192644392, 1.8527423994881767, 1.8507658413478307, 1.8487735475812639, 1.8467348643711634, 1.8446884836469377, 1.8426081112452917, 1.84049654006958], "val_accuracy": [0.045666664838790894, 0.05133333429694176, 0.05533333495259285, 0.06199999898672104, 0.07066666334867477, 0.07666666805744171, 0.08533333241939545, 0.09466666728258133, 0.1003333330154419, 0.109333336353302, 0.11766666918992996, 0.1263333261013031, 0.13600000739097595, 0.14666666090488434, 0.1589999943971634, 0.16899999976158142, 0.18033333122730255, 0.19233334064483643, 0.20266667008399963, 0.210999995470047, 0.218666672706604, 0.22633333504199982, 0.2356666624546051, 0.24433332681655884, 0.25066667795181274, 0.25866666436195374, 0.26899999380111694, 0.2773333191871643, 0.28433331847190857, 0.28966665267944336, 0.29633334279060364, 0.30433332920074463, 0.3140000104904175, 0.320333331823349, 0.32466667890548706, 0.32866665720939636, 0.33133333921432495, 0.3356666564941406, 0.3423333466053009, 0.34599998593330383, 0.3490000069141388, 0.35199999809265137, 0.3556666672229767, 0.3610000014305115, 0.36500000953674316, 0.367333322763443, 0.3686666786670685, 0.3713333308696747, 0.37466666102409363, 0.3763333261013031, 0.3779999911785126, 0.3816666603088379, 0.3840000033378601, 0.38499999046325684, 0.3876666724681854, 0.3893333375453949, 0.3919999897480011, 0.39399999380111694, 0.3970000147819519, 0.398333340883255, 0.3996666669845581, 0.4020000100135803, 0.40400001406669617, 0.40566667914390564, 0.4076666533946991, 0.40966665744781494, 0.4126666784286499, 0.41466665267944336, 0.4169999957084656, 0.41866666078567505, 0.42133334279060364, 0.4230000078678131, 0.42533332109451294, 0.4256666600704193, 0.4283333420753479, 0.4309999942779541, 0.4313333332538605, 0.4336666762828827, 0.4346666634082794, 0.43700000643730164, 0.44066667556762695, 0.44200000166893005, 0.4436666667461395, 0.4436666667461395, 0.44433334469795227, 0.4449999928474426, 0.445333331823349, 0.4463333189487457, 0.44733333587646484, 0.4490000009536743, 0.45133334398269653, 0.4516666531562805, 0.4533333480358124, 0.4543333351612091, 0.4546666741371155, 0.4573333263397217, 0.4583333432674408, 0.45899999141693115, 0.46166667342185974, 0.46266666054725647]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [5, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 2, 1, 9, 3, 5, 6, 9, 8, 9, 1, 2, 0, 3, 0, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 2, 0, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.23600000143051147, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 14, 5, 4, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), beta)))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3019421252088303, 2.3029559480515704, 2.3007736451999623, 2.3020161505719186, 2.3018489479467523, 2.301905474973282, 2.3017249667586244, 2.300545472006646, 2.2998466093337706, 2.3002362365594173, 2.3009810145693903, 2.3000945934073456, 2.299427939349351, 2.2999015392297926, 2.2990826936587525, 2.2985461986989173, 2.2974639799868535, 2.298897520929925, 2.2972843201720026, 2.2982519590906607, 2.296612029692217, 2.296216850157317, 2.2961244742474487, 2.296430225464268, 2.296243284608647, 2.295796205370481, 2.295425520345063, 2.294508421882395, 2.2967159995596877, 2.294607747326973, 2.293401394002489, 2.29436810188888, 2.2937622992999644, 2.294869437272507, 2.2933374156946864, 2.293122846625815, 2.2934378198644567, 2.2934419565260007, 2.2932738783872515, 2.292488363676886, 2.2912865075232443, 2.291010922255722, 2.2891150801299256, 2.2920297142568438, 2.2915049083260275, 2.2899154231469896, 2.290649152749943, 2.2895600533425577, 2.290104440898943, 2.290982838115357, 2.2892448503138794, 2.289473021554752, 2.287829826001273, 2.2870671517341017, 2.289390881299941, 2.2898484772505965, 2.28871134300242, 2.2890445286681893, 2.288171423582148, 2.2877659499763325, 2.2876928638331786, 2.286813512753502, 2.286128472941757, 2.288244909126021, 2.28551983864804, 2.2856158091328824, 2.285798393047213, 2.2858159089557657, 2.284218804018451, 2.2849113534643446, 2.28358786280255, 2.284006691879647, 2.283526448053439, 2.283795710552197, 2.282552483185423, 2.2849259732374505, 2.282297263575614, 2.2822882848534807, 2.2824428187007397, 2.282591566732767, 2.2810227545009014, 2.2822508495780753, 2.2817613405558443, 2.2815194627817013, 2.2806863187090314, 2.2791648641663644, 2.2801788955426976, 2.2803687202522642, 2.2796821106442247, 2.2787338118149445, 2.280067911206015, 2.278563787530615, 2.279977829228649, 2.277794181899057, 2.2778513721896356, 2.279221633547852, 2.2772529575535336, 2.2786190962007318, 2.277925774689285, 2.2766737631204625], "accuracy": [0.0956280529499054, 0.08836349099874496, 0.09338264167308807, 0.09311848133802414, 0.09272222965955734, 0.09140139818191528, 0.0886276587843895, 0.09589222073554993, 0.09628847241401672, 0.09496764093637466, 0.09787346422672272, 0.09721305221319199, 0.1014397069811821, 0.09655263274908066, 0.10011887550354004, 0.10527011007070541, 0.10527011007070541, 0.0952318087220192, 0.10342095047235489, 0.10342095047235489, 0.10394927859306335, 0.10276053100824356, 0.10315678268671036, 0.10817593336105347, 0.10962884873151779, 0.11121384054422379, 0.10685510188341141, 0.10474177449941635, 0.10685510188341141, 0.10698718577623367, 0.11081759631633759, 0.11451591551303864, 0.11227050423622131, 0.10949676483869553, 0.11649715900421143, 0.10976093262434006, 0.1150442510843277, 0.11213842034339905, 0.11808215826749802, 0.11728965491056442, 0.11649715900421143, 0.12257297337055206, 0.12957337498664856, 0.11755382269620895, 0.11728965491056442, 0.12415797263383865, 0.11636507511138916, 0.12455421686172485, 0.12389380484819412, 0.1258750557899475, 0.12415797263383865, 0.12362963706254959, 0.13300752639770508, 0.1266675442457199, 0.1212521493434906, 0.12534672021865845, 0.12561088800430298, 0.12812046706676483, 0.13115836679935455, 0.13181878626346588, 0.1282525360584259, 0.12996962666511536, 0.13961167633533478, 0.1328754425048828, 0.12534672021865845, 0.1402720957994461, 0.13300752639770508, 0.13459251821041107, 0.14159291982650757, 0.13749834895133972, 0.13710209727287292, 0.13974376022815704, 0.13789460062980652, 0.14238542318344116, 0.146479994058609, 0.1332716941833496, 0.14278165996074677, 0.14014001190662384, 0.13934750854969025, 0.1450270712375641, 0.13908334076404572, 0.1422533392906189, 0.14489498734474182, 0.14991414546966553, 0.14661207795143127, 0.1504424810409546, 0.14740456640720367, 0.14753665030002594, 0.1418570876121521, 0.1554616242647171, 0.151234969496727, 0.14832915365695953, 0.15110288560390472, 0.1534803807735443, 0.15110288560390472, 0.14938580989837646, 0.15942411124706268, 0.15493330359458923, 0.15717871487140656, 0.15982036292552948], "val_loss": [1.9707630021231515, 1.9705164091927665, 1.9702727454049247, 1.9700273786272322, 1.9697833061218262, 1.9695391654968262, 1.969294820513044, 1.969050748007638, 1.9688056537083216, 1.9685593332563127, 1.9683148520333427, 1.9680686678205217, 1.9678237778799874, 1.9675788879394531, 1.9673357009887695, 1.9670915603637695, 1.9668480328151159, 1.9666032791137695, 1.9663612501961845, 1.9661156109401159, 1.965874263218471, 1.9656313487461634, 1.9653897285461426, 1.9651493344988142, 1.9649052619934082, 1.9646647998264857, 1.9644222259521484, 1.9641805376325334, 1.9639406204223633, 1.9636991364615304, 1.9634579249790736, 1.9632166453770228, 1.962975365774972, 1.962735721043178, 1.9624951907566615, 1.9622535024370467, 1.962014879499163, 1.9617721693856376, 1.9615304810660226, 1.9612904276166643, 1.9610531670706612, 1.9608112743922643, 1.9605712890625, 1.960329532623291, 1.960087844303676, 1.9598485401698522, 1.9596105303083147, 1.9593706130981445, 1.9591311727251326, 1.9588910511561803, 1.958650725228446, 1.9584109442574638, 1.958169664655413, 1.9579288618905204, 1.9576892171587263, 1.95744902747018, 1.9572101320539201, 1.9569717134748186, 1.9567320687430245, 1.956493650163923, 1.9562537329537528, 1.9560176985604423, 1.95577791758946, 1.9555390902927943, 1.9552995818001884, 1.955058983394078, 1.9548177037920271, 1.9545770372663225, 1.9543376650129045, 1.9540990420750208, 1.9538561957223075, 1.9536173003060477, 1.953378745487758, 1.9531378746032715, 1.9528962544032507, 1.9526570865086146, 1.9524193491254533, 1.952178955078125, 1.9519374029976981, 1.9516985075814384, 1.9514571598597936, 1.951218741280692, 1.950979505266462, 1.9507392474583216, 1.950498444693429, 1.9502574375697546, 1.9500168391636439, 1.9497765132359095, 1.9495348930358887, 1.94929381779262, 1.949052333831787, 1.9488089425223214, 1.948568412235805, 1.9483234541756767, 1.9480799266270228, 1.9478380339486259, 1.9475936208452498, 1.9473507744925362, 1.9471072469438826, 1.9468627657209123], "val_accuracy": [0.039000000804662704, 0.04066666588187218, 0.04266666620969772, 0.04533333331346512, 0.04633333161473274, 0.04699999839067459, 0.049666665494441986, 0.050999999046325684, 0.05233333259820938, 0.05366666615009308, 0.0533333346247673, 0.054999999701976776, 0.0573333315551281, 0.058666665107011795, 0.060333333909511566, 0.06133333221077919, 0.06333333253860474, 0.06499999761581421, 0.06733333319425583, 0.06933332979679108, 0.07066666334867477, 0.0716666653752327, 0.07266666740179062, 0.07566666603088379, 0.07699999958276749, 0.07866666465997696, 0.0820000022649765, 0.0833333358168602, 0.08733333647251129, 0.08833333104848862, 0.09033333510160446, 0.09233333170413971, 0.09433333575725555, 0.09566666930913925, 0.09733333438634872, 0.09866666793823242, 0.10100000351667404, 0.10333333164453506, 0.10366666316986084, 0.10499999672174454, 0.10733333230018616, 0.11166666448116302, 0.1133333370089531, 0.11433333158493042, 0.11599999666213989, 0.11766666918992996, 0.11966666579246521, 0.1223333328962326, 0.125, 0.1276666671037674, 0.12966667115688324, 0.1326666623353958, 0.13466666638851166, 0.1366666704416275, 0.13866665959358215, 0.14166666567325592, 0.14433333277702332, 0.14633333683013916, 0.15066666901111603, 0.15399999916553497, 0.15833333134651184, 0.1599999964237213, 0.16333332657814026, 0.1653333306312561, 0.1679999977350235, 0.1693333387374878, 0.17233332991600037, 0.17466667294502258, 0.17800000309944153, 0.18000000715255737, 0.18299999833106995, 0.18700000643730164, 0.1886666715145111, 0.1913333386182785, 0.19499999284744263, 0.19699999690055847, 0.19900000095367432, 0.2016666680574417, 0.20399999618530273, 0.20600000023841858, 0.20766666531562805, 0.21066667139530182, 0.21299999952316284, 0.2150000035762787, 0.2173333317041397, 0.21799999475479126, 0.21933333575725555, 0.22066666185855865, 0.22233332693576813, 0.22466666996479034, 0.22733333706855774, 0.2303333282470703, 0.23399999737739563, 0.23466666042804718, 0.2370000034570694, 0.23933333158493042, 0.2409999966621399, 0.24266666173934937, 0.24400000274181366, 0.24633333086967468]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 6, 2, 0, 9, 2, 5, 6, 2, 0, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 84, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, grad))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3023011883441025, 2.3025851429508597, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 88, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 2, 1, 9, 3, 5, 6, 9, 8, 9, 1, 2, 0, 3, 0, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 0, 2, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 3, 2, 6, 2, 6, 8, 9, 3, 4, 8, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 2, 0, 3, 2, 1, 0, 2, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [36, 86, 54, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 24, 24, 14, 10, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), grad))), tf.math.add(beta, beta))), tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.subtract(tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.449465171992582, 2.3503821649729, 2.3120202988272, 2.303239345707992, 2.3031310212925487, 2.303075649608884, 2.3029162403835266], "accuracy": [0.2145027071237564, 0.2024831622838974, 0.10011887550354004, 0.09232597798109055, 0.09589222073554993, 0.09932637959718704, 0.09879804402589798], "val_loss": [1.9787828581673759, 1.9844025884355818, 1.9740991592407227, 1.9736739567347936, 1.9736523628234863, 1.9736928258623396, 1.9736931664603097], "val_accuracy": [0.10100000351667404, 0.10433333367109299, 0.10433333367109299, 0.0989999994635582, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [98, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 6, 2, 0, 9, 2, 5, 6, 2, 0, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 24, 24, 15, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(beta, alpha)))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha))), grad)))))), grad), tf.math.multiply(tf.math.add(beta, alpha), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 5, 2, 3, 8, 6, 4, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 2, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 0, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3026935089029705, 2.3359268630232717, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0944393053650856, 0.0742306187748909, 0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9752202715192522, 2.0982822009495328, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.01666666753590107, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 2, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [4, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 2, 0, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 21, 21, 12, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(grad), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad)))))))), tf.math.add(beta, grad))), alpha)))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.906686114343935e+32, 4360.518813210204, 4850.019668847153, 4968.688598713429, 3956.721540316772, 4114.3107494494825, 4395.085917442482], "accuracy": [0.09655263274908066, 0.10302469879388809, 0.09879804402589798, 0.08915598690509796, 0.10011887550354004, 0.0948355570435524, 0.09589222073554993], "val_loss": [5191.119419642857, 3826.8602120535716, 2464.063895089286, 2373.247000558036, 4953.441545758928, 5153.467075892857, 3743.337332589286], "val_accuracy": [0.09833333641290665, 0.10166666656732559, 0.0989999994635582, 0.0989999994635582, 0.09966666996479034, 0.10066666454076767, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 2, 5, 9, 6, 4, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 2, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 1, 3, 1, 3, 3, 2, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.0705714300274849, "mapping_values": [1, 4, 4, 2, 2, 0, 8, 8, 5, 3, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3018257907667903, 2.30223049772351, 2.3000151095782697, 2.301283762738721, 2.3012984107277883, 2.3011937457903295, 2.301149120294281, 2.299737567647164, 2.299524333703441, 2.3003362658599804, 2.300479681705046, 2.299348701055827, 2.2995574372618695, 2.300281197529396, 2.300061210240072, 2.299612442452941, 2.3000396163062713, 2.3007036476339318, 2.300495328117182, 2.301385322440302], "accuracy": [0.09457138925790787, 0.09206181764602661, 0.09430722147226334, 0.09655263274908066, 0.0940430611371994, 0.09351472556591034, 0.09060890227556229, 0.09787346422672272, 0.10474177449941635, 0.09681680053472519, 0.09906221181154251, 0.09893012791872025, 0.10276053100824356, 0.09681680053472519, 0.09866596013307571, 0.10579843819141388, 0.10381719470024109, 0.10157178342342377, 0.09391097724437714, 0.09272222965955734], "val_loss": [1.9705559185573034, 1.9699006080627441, 1.9697490419660295, 1.969773837498256, 1.9698036738804408, 1.9697425024850028, 1.9696683202471053, 1.9695685250418526, 1.9694277899605888, 1.9693903241838728, 1.9694556508745467, 1.9694816044398717, 1.9696715218680245, 1.9699383463178362, 1.9701343945094518, 1.9703248568943568, 1.9705890246800013, 1.9707506724766322, 1.9708751950945174, 1.9710353442600794], "val_accuracy": [0.043666668236255646, 0.04933333396911621, 0.05366666615009308, 0.05700000002980232, 0.059333331882953644, 0.06199999898672104, 0.06800000369548798, 0.07000000029802322, 0.07400000095367432, 0.07433333247900009, 0.07433333247900009, 0.07500000298023224, 0.07666666805744171, 0.07766667008399963, 0.07866666465997696, 0.07599999755620956, 0.07566666603088379, 0.07566666603088379, 0.07599999755620956, 0.07633333653211594]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [12, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 9, 3, 2, 6, 2, 6, 6, 3, 9, 9, 2, 1, 3, 1, 6, 2, 7, 0, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 0, 3, 3, 1, 0, 3, 3, 3, 4, 4, 3, 2, 3, 3, 2, 2], [8, 84, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 16, 10, 5, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), grad)), alpha))), grad), tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3020476702890535, 2.3033267236136963, 2.3014005275056695, 2.3029037949714866, 2.3029953869751747, 2.303313187824784], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09113723784685135, 0.09087307006120682, 0.09034473448991776, 0.0882314071059227], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [12, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 2, 6, 2, 6, 6, 3, 9, 4, 8, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 1, 3, 0, 2, 3, 1, 0, 3, 1, 2, 4, 4, 1, 2, 3, 1, 3, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 15, 11, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), grad)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, grad)))))), tf.math.sqrt(tf.math.add(beta, alpha))))))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302047701780082, 2.3033267236136963, 2.301400558996698, 2.3029037949714866, 2.302995355484146, 2.303313156333755], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09113723784685135, 0.09087307006120682, 0.09034473448991776, 0.0882314071059227], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 2, 0, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.03400000184774399, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 14, 11, 3, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.pow(tf.math.add(tf.math.add(beta, beta), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), grad)))), tf.math.add(beta, alpha))))), tf.math.subtract(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.302099683611951, 2.3036337631599952, 2.301926576891249, 2.303669347140799, 2.304014397807456, 2.304645012335424], "accuracy": [0.09536388516426086, 0.0874389111995697, 0.09060890227556229, 0.08809932321310043, 0.08770307898521423, 0.0882314071059227], "val_loss": [1.9711394991193498, 1.971386092049735, 1.9715869767325265, 1.9717809132167272, 1.9719946725027901, 1.9722424915858678], "val_accuracy": [0.03633333370089531, 0.035999998450279236, 0.03500000014901161, 0.03466666489839554, 0.03400000184774399, 0.03133333474397659]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 5, 5, 3, 0, 6, 4, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 2, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.031142856925725937, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))), tf.math.multiply(tf.math.negative(grad), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.302368912604255, 2.30512011647933, 2.304905293309347, 2.30861828453458, 2.3111686791568746, 2.31476536692724], "accuracy": [0.09457138925790787, 0.08466517180204391, 0.08374059200286865, 0.08241976052522659, 0.080042265355587, 0.07634394615888596], "val_loss": [1.9717710358755929, 1.973306519644601, 1.9749231338500977, 1.9768449238368444, 1.9790118081229073, 1.981304373059954], "val_accuracy": [0.03466666489839554, 0.026000000536441803, 0.020666666328907013, 0.01666666753590107, 0.018333332613110542, 0.02266666665673256]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 1, 3, 1, 3, 3, 2, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.031142856925725937, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.302368912604255, 2.305120215424142, 2.3049044655991455, 2.3086176098077966, 2.3111628855633586, 2.3147553446868847], "accuracy": [0.09457138925790787, 0.08466517180204391, 0.08374059200286865, 0.08241976052522659, 0.07977809756994247, 0.07647603005170822], "val_loss": [1.9717710358755929, 1.9733072008405412, 1.974921703338623, 1.976842267172677, 1.9790052686418806, 1.9812935420445033], "val_accuracy": [0.03466666489839554, 0.026000000536441803, 0.020666666328907013, 0.01666666753590107, 0.018333332613110542, 0.022333333268761635]}}]