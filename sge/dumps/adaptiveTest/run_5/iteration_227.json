[{"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8005714416503906, "mapping_values": [1, 29, 29, 20, 9, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(grad)))))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2630710441832216, 2.0872330463101063, 1.880882981493961, 1.9944612697729298, 1.765143308279269, 1.2777988638750015, 1.1213293008957999, 0.9858096252815394, 0.8618611503648814, 0.7957600168327787, 0.7539885067243807, 0.689986581957304, 0.7244103078309335, 0.676734783370434, 0.6944342563574608, 0.6367988502580917, 0.6424807446224342, 0.5937611255836588, 0.5759282215648339, 0.597492897814417, 0.5738840900344808, 0.5585099630635475, 0.5401289242291101, 0.5532579231712529, 0.5571519714446667, 0.5090132562349879, 0.523173227561794, 0.5147819450786164, 0.5030487241714764, 0.5025571062895191, 0.5048060106043928, 0.49604462301096564, 0.49556443871067435, 0.4689112082015506, 0.46367030966598377, 0.47274897357082607, 0.46566135918601254, 0.45221599875471424, 0.4547128200751443, 0.4842834518869335], "accuracy": [0.23920221626758575, 0.32941487431526184, 0.3261128067970276, 0.3292827904224396, 0.4060229957103729, 0.5144630670547485, 0.5960903167724609, 0.6292431354522705, 0.6785101294517517, 0.6925109028816223, 0.7091533541679382, 0.7272487282752991, 0.7214370369911194, 0.7333245277404785, 0.7449478507041931, 0.7581561207771301, 0.7514199018478394, 0.7676661014556885, 0.7738739848136902, 0.7693831920623779, 0.7814027070999146, 0.7847048044204712, 0.7895918488502502, 0.7872143983840942, 0.7807422876358032, 0.800290584564209, 0.7951393723487854, 0.7994980812072754, 0.8031964302062988, 0.8129705190658569, 0.8058380484580994, 0.8100647330284119, 0.8026680946350098, 0.8161405324935913, 0.8177255392074585, 0.8170651197433472, 0.8195747137069702, 0.819442629814148, 0.8219521641731262, 0.8162726163864136], "val_loss": [1.7457848276410783, 1.4350144863128662, 1.901932852608817, 2.006685325077602, 1.0432583945138114, 1.1071532453809465, 0.9436925819941929, 0.7243193217686245, 0.614991579736982, 0.6456458227975028, 0.541069643838065, 0.5595098052706037, 0.5489108392170498, 0.5621871096747262, 0.5379201684679303, 0.5479331527437482, 0.48390911306653706, 0.4844014474323818, 0.45405825546809603, 0.47603590147835867, 0.45346959999629427, 0.45487681456974577, 0.45754715374537874, 0.4610221896852766, 0.43700631175722393, 0.4070805736950466, 0.42107108661106657, 0.4212394101279123, 0.41470279012407574, 0.4086271609578814, 0.42303129604884554, 0.45343341146196636, 0.3921108160700117, 0.41186781440462383, 0.38134809902736116, 0.42211711406707764, 0.4372406005859375, 0.41221338510513306, 0.4148198195866176, 0.43078545161655973], "val_accuracy": [0.5213333368301392, 0.34833332896232605, 0.3283333480358124, 0.38366666436195374, 0.578000009059906, 0.5363333225250244, 0.5920000076293945, 0.6663333177566528, 0.7210000157356262, 0.6919999718666077, 0.750333309173584, 0.7433333396911621, 0.7176666855812073, 0.7436666488647461, 0.7666666507720947, 0.7536666393280029, 0.7749999761581421, 0.7720000147819519, 0.7973333597183228, 0.781000018119812, 0.781000018119812, 0.8019999861717224, 0.7943333387374878, 0.7749999761581421, 0.8006666898727417, 0.812666654586792, 0.796999990940094, 0.8106666803359985, 0.8166666626930237, 0.824999988079071, 0.8119999766349792, 0.781333327293396, 0.8276666402816772, 0.8029999732971191, 0.8396666646003723, 0.7996666431427002, 0.7993333339691162, 0.809333324432373, 0.8213333487510681, 0.7986666560173035]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 2, 1, 1, 2, 5, 5, 2, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [85, 44, 89, 16, 90, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 4, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [3, 4, 4], [2, 7, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.558571457862854, "mapping_values": [1, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3.118030199206595, 2.30370957752843, 2.2901624760308428, 2.2981132446987407, 2.3045657492584604, 2.0721578800667233, 2.3650415348354787, 1.9791447409328893, 1.8799484809943006, 1.7838127561107429, 2.2433850367181667, 2.1215376746558463, 1.692913166504526], "accuracy": [0.17817988991737366, 0.10566636174917221, 0.16153743863105774, 0.20816272497177124, 0.11940298229455948, 0.2880729138851166, 0.2118610441684723, 0.3555673062801361, 0.4085325598716736, 0.43006208539009094, 0.19416193664073944, 0.25320300459861755, 0.4193633496761322], "val_loss": [1.9764622279575892, 1.9709695407322474, 1.8634453501020158, 2.002008778708322, 1.9408928326198034, 1.755321434565953, 1.8852343559265137, 1.2133113997323173, 1.1840143544333321, 1.8789292063031877, 1.911088262285505, 1.7173524243491036, 1.4917262281690324], "val_accuracy": [0.10066666454076767, 0.1146666631102562, 0.28866666555404663, 0.09799999743700027, 0.10066666454076767, 0.3863333463668823, 0.2693333327770233, 0.5486666560173035, 0.534333348274231, 0.19900000095367432, 0.20200000703334808, 0.34033334255218506, 0.4740000069141388]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 0, 3, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 0, 3, 1, 3, 3, 1, 2, 3, 2, 1, 1, 1, 0, 1], [97, 44, 89, 16, 78, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 0, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [15], [1, 1, 1, 0, 1, 0, 1, 0, 1], [6, 5, 6, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.31142857670783997, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3.1179810767286504, 2.3037527721351116, 2.292701289040018, 2.4654855400012896, 2.305695672218495, 2.303559233814482, 2.302984664878195, 2.3021754482875427], "accuracy": [0.17831197381019592, 0.10302469879388809, 0.1592920422554016, 0.17012283205986023, 0.09866596013307571, 0.10302469879388809, 0.09932637959718704, 0.10302469879388809], "val_loss": [1.976437704903739, 1.9711119106837682, 1.8625486237662179, 1.9768369538443429, 1.9738570622035436, 1.97358615057809, 1.9733472551618303, 1.9684141704014368], "val_accuracy": [0.10066666454076767, 0.1263333261013031, 0.2446666657924652, 0.09799999743700027, 0.0989999994635582, 0.10433333367109299, 0.09966666996479034, 0.2070000022649765]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 2, 8, 1, 2, 5, 5, 2, 4, 2, 4, 6, 4, 8, 8, 0, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [66, 44, 89, 16, 90, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 4, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [2, 4, 4], [2, 7, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.12314286082983017, "mapping_values": [1, 31, 31, 18, 13, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))))), tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(alpha)))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303530142937417, 2.3032763142863506, 2.3036131192790426, 2.305550280437336, 101714.65330535099, 464439937798317.94, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08994849026203156, 0.09140139818191528, 0.08770307898521423, 0.09272222965955734, 0.09708096832036972, 0.09602430462837219, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9710068021501814, 1.9710066659109933, 1.9709667478288924, 1.9833698953901018, 3023598.3571428573, 1.45386790453248e+16, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03733333200216293, 0.10433333367109299, 0.0676666647195816, 0.13366666436195374, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 1, 8, 2, 4, 1, 0, 8, 5, 6, 4, 1, 9, 8, 5, 8, 8, 0, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [44, 44, 53, 16, 76, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 6, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 3, 3, 5, 2, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10057143121957779, "mapping_values": [1, 26, 26, 16, 10, 4, 9, 9, 4, 5, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad))))))))), tf.math.add(alpha, alpha))))), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.subtract(grad, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3960644894.533543, 65175350297.83331, 281597822851.8378, 780818035449.2035, 1664510920015.0215, 3020730121242.3745], "accuracy": [0.09972262382507324, 0.09760929644107819, 0.09826971590518951, 0.10527011007070541, 0.09985470771789551, 0.10077928751707077], "val_loss": [11021639680.0, 89247809536.0, 302749600036.5714, 719466135552.0, 1407489858413.7144, 2434611843657.143], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 2, 1, 8, 0, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [64, 44, 89, 16, 90, 43, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 3, 3, 5, 2, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4, 4], [2, 2, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 18, 6, 6, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))), tf.math.sqrt(tf.math.add(alpha, grad))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30296382257227, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [6, 5, 6, 1, 5, 2, 0, 0, 2, 8, 5, 0, 2, 3, 9, 8, 2, 8, 8, 9, 0, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 0, 3, 1, 3, 3, 1, 2, 3, 2, 1, 1, 1, 0, 1], [97, 44, 89, 16, 78, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [0, 0, 1, 5, 3, 4], [15, 56], [0, 1, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 11, 6, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 2, 3, 1, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.subtract(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 2, 1, 1, 2, 5, 5, 2, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 1, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0], [3, 4, 4, 1, 5, 9], [7, 7, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 0, 1, 0, 7, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(sigma, sigma)))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07528728246688843, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 7, 0, 1, 8, 2, 1, 1, 2, 5, 5, 2, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [3, 4, 4], [2, 7, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07528728246688843, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [64, 28, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 4, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [3, 4, 4], [6, 2, 1, 5, 3, 4], [15], [1, 0, 1, 1, 0, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 6, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, grad)))), tf.math.pow(grad, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07528728246688843, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 2, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 0, 3, 9, 6, 2, 2, 5, 0, 4, 5, 4, 1, 4], [2, 3, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 87, 89, 29, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1], [5, 4, 4], [4, 0, 1, 5, 3, 4], [94], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), grad)))), grad), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30296382257227, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 2, 6, 1, 8, 2, 9, 1, 2, 8, 2, 6, 4, 3, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [15, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, beta))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 3, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [64, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 3, 3, 5, 2, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4, 4], [2, 2, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30296382257227, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 3, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [64, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 3, 3, 5, 2, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4, 4], [2, 2, 1, 5, 3, 4], [15], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [76, 18, 10, 42]], "fitness": -0.09914285689592361, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 10, 7, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(tf.math.square(sigma)), tf.math.subtract(tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.square(beta)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303513626680083, 2.303208914194849, 2.30350227117255, 2.3029947791353367, 2.302297918126725, 2.3020721553827177, 2.3020298718744816, 2.301329558693328, 2.30377737365111, 2.3045500526181333, 2.3032426375597064, 2.302791174234983, 2.3016381178707133, 2.3017182312369457, 2.3024619749240776, 2.300134463506116, 2.3011940582128263, 2.301759118842348, 2.301735729542013, 2.3018377904862994, 2.300307236201476, 2.301369434491975, 2.302906327196604, 2.3024404207319553, 2.3015085583617423, 2.3022500875997287, 2.3017601685643023, 2.3017553483899778, 2.30041584683888, 2.300919810904645, 2.3011321405834764, 2.300637987925628, 2.3011056242239802, 2.301691813286915, 2.3017626370200865, 2.2997373511148496, 2.3018431217600215, 2.3020773978202476, 2.3006776174644297, 2.300859796372639, 2.3005890524414125, 2.300917487591013, 2.300266695060372, 2.301858644003031, 2.30128677129714, 2.301912877569424, 2.3010600406763624, 2.3015577923494197, 2.3007842588103475, 2.300533348055028, 2.3002760646806464, 2.3003707233751927, 2.3020481024404416, 2.3005234289163012, 2.300995285138478, 2.300537058202078, 2.3005737272692617, 2.301675872780061, 2.300593428497758, 2.300612060007497, 2.3022259780050915, 2.301779671241862, 2.300913201441555, 2.3008709731370924, 2.3009574251435674, 2.3013554751487253, 2.30006862955795, 2.30107274069337, 2.300065208687491, 2.3010558795147977, 2.3006264128941334, 2.3011294374250544, 2.301454369386646, 2.3000311869766263, 2.3000488078762684, 2.2993785683442067, 2.3009278808586697, 2.3004304311530874, 2.300990054447102, 2.3011102046256116, 2.300797005686006, 2.299791245050497, 2.3007740049534755, 2.300484077128374, 2.300544171931013, 2.300802188416545, 2.300911285873764, 2.3001795793174833, 2.2997870146716513, 2.3005762647848718, 2.3008460621272633, 2.2995242549128867, 2.3002351241073336, 2.3012192699934717, 2.301024920495431, 2.300249689810343, 2.300267155805615, 2.3002187706271275, 2.3012891959174118, 2.300273199311935], "accuracy": [0.08981640636920929, 0.09087307006120682, 0.08796724677085876, 0.09087307006120682, 0.0940430611371994, 0.09047681838274002, 0.09008057415485382, 0.09272222965955734, 0.09034473448991776, 0.08532558381557465, 0.09298639744520187, 0.08387266844511032, 0.0940430611371994, 0.09232597798109055, 0.09351472556591034, 0.09985470771789551, 0.09206181764602661, 0.0940430611371994, 0.09232597798109055, 0.09153348207473755, 0.09853387624025345, 0.09311848133802414, 0.09140139818191528, 0.09628847241401672, 0.0944393053650856, 0.09021265059709549, 0.09140139818191528, 0.0940430611371994, 0.09747721254825592, 0.09272222965955734, 0.09166556596755981, 0.09893012791872025, 0.09021265059709549, 0.09100515395402908, 0.09879804402589798, 0.09153348207473755, 0.09153348207473755, 0.09787346422672272, 0.08942015469074249, 0.09325055778026581, 0.09694888442754745, 0.09192973375320435, 0.09945846349000931, 0.09285431355237961, 0.09576013684272766, 0.09166556596755981, 0.10236428678035736, 0.09470347315073013, 0.09694888442754745, 0.09668471664190292, 0.1002509593963623, 0.09655263274908066, 0.09219389408826828, 0.09470347315073013, 0.09192973375320435, 0.09113723784685135, 0.09259014576673508, 0.09087307006120682, 0.09959053993225098, 0.09377889335155487, 0.09074098616838455, 0.09140139818191528, 0.09232597798109055, 0.09998679161071777, 0.09787346422672272, 0.09245806187391281, 0.10315678268671036, 0.0944393053650856, 0.09642054885625839, 0.09259014576673508, 0.09549596905708313, 0.09589222073554993, 0.09853387624025345, 0.09853387624025345, 0.09457138925790787, 0.09602430462837219, 0.09430722147226334, 0.09642054885625839, 0.09272222965955734, 0.09589222073554993, 0.09377889335155487, 0.09602430462837219, 0.09919429570436478, 0.09615638852119446, 0.09747721254825592, 0.09021265059709549, 0.09338264167308807, 0.1006472036242485, 0.0948355570435524, 0.10249637067317963, 0.09708096832036972, 0.10328886657953262, 0.09774138033390045, 0.09734513610601425, 0.09721305221319199, 0.09694888442754745, 0.09972262382507324, 0.10513802617788315, 0.09760929644107819, 0.10368511080741882], "val_loss": [1.9709854807172502, 1.970963750566755, 1.9709431103297643, 1.9709226744515556, 1.9709020342145647, 1.9708818708147322, 1.9708615030561174, 1.9708420889718192, 1.9708223342895508, 1.9708019665309362, 1.9707826205662318, 1.97076450075422, 1.9707472664969308, 1.9707303047180176, 1.9707140922546387, 1.9706974710736955, 1.970681599208287, 1.9706672259739466, 1.9706542151314872, 1.9706419536045618, 1.9706298964364188, 1.9706177711486816, 1.9706062589372908, 1.97059508732387, 1.9705836432320731, 1.9705728122166224, 1.9705627986363001, 1.970552921295166, 1.9705440657479423, 1.9705356189182825, 1.9705277851649694, 1.9705207688467843, 1.9705142293657576, 1.9705073492867606, 1.970501218523298, 1.9704952921186174, 1.970489774431501, 1.9704842567443848, 1.9704790796552385, 1.9704747200012207, 1.9704714502607072, 1.9704692704336983, 1.9704676355634416, 1.970466477530343, 1.9704668862479073, 1.9704674993242537, 1.9704674993242537, 1.9704678399222237, 1.9704689979553223, 1.970470632825579, 1.9704726082938058, 1.9704745156424386, 1.97047792162214, 1.9704816681998116, 1.970485074179513, 1.9704878670828683, 1.9704914774213518, 1.9704950877598353, 1.9704997198922294, 1.9705055781773158, 1.9705118451799666, 1.9705181803022112, 1.9705252647399902, 1.9705322129385812, 1.9705390248979842, 1.9705463136945451, 1.9705542836870467, 1.9705628667558943, 1.9705713135855538, 1.9705801010131836, 1.9705890927995955, 1.9705988339015417, 1.9706089837210519, 1.9706196784973145, 1.9706312588282995, 1.9706432478768485, 1.97065646307809, 1.9706698145185197, 1.9706836427961076, 1.970698629106794, 1.9707127979823522, 1.9707277842930384, 1.9707439286368233, 1.9707610947745187, 1.9707786015101842, 1.970796857561384, 1.9708150454929896, 1.9708336421421595, 1.9708521025521415, 1.9708706310817175, 1.9708896364484514, 1.9709087780543737, 1.9709281921386719, 1.9709471293858118, 1.9709655897957938, 1.9709844589233398, 1.9710040773664201, 1.9710239001682825, 1.9710430417742049, 1.971062183380127], "val_accuracy": [0.03866666555404663, 0.03933333232998848, 0.03933333232998848, 0.03999999910593033, 0.0403333343565464, 0.04100000113248825, 0.04266666620969772, 0.04266666620969772, 0.04266666620969772, 0.044333335012197495, 0.04466666653752327, 0.04466666653752327, 0.04533333331346512, 0.04466666653752327, 0.04466666653752327, 0.04533333331346512, 0.04633333161473274, 0.04699999839067459, 0.04766666516661644, 0.04699999839067459, 0.047333333641290665, 0.04766666516661644, 0.04833333194255829, 0.04866666719317436, 0.049666665494441986, 0.050333332270383835, 0.05066666752099991, 0.050999999046325684, 0.05233333259820938, 0.0533333346247673, 0.05400000140070915, 0.055666666477918625, 0.055666666477918625, 0.055666666477918625, 0.0560000017285347, 0.05700000002980232, 0.058666665107011795, 0.05999999865889549, 0.05999999865889549, 0.05966666713356972, 0.06066666543483734, 0.061000000685453415, 0.061000000685453415, 0.06133333221077919, 0.06133333221077919, 0.06199999898672104, 0.06300000101327896, 0.06333333253860474, 0.06400000303983688, 0.06333333253860474, 0.06433333456516266, 0.06599999964237213, 0.06599999964237213, 0.06666667014360428, 0.06700000166893005, 0.06833333522081375, 0.06933332979679108, 0.070333331823349, 0.070333331823349, 0.07199999690055847, 0.07199999690055847, 0.07233333587646484, 0.07233333587646484, 0.07333333045244217, 0.07400000095367432, 0.07500000298023224, 0.07566666603088379, 0.07566666603088379, 0.07699999958276749, 0.07800000160932541, 0.07900000363588333, 0.07900000363588333, 0.07966666668653488, 0.0806666687130928, 0.08100000023841858, 0.08100000023841858, 0.08166666328907013, 0.08266666531562805, 0.08266666531562805, 0.0820000022649765, 0.08266666531562805, 0.08299999684095383, 0.08233333379030228, 0.08266666531562805, 0.08266666531562805, 0.08299999684095383, 0.08366666734218597, 0.08433333039283752, 0.08433333039283752, 0.08433333039283752, 0.08433333039283752, 0.08500000089406967, 0.08533333241939545, 0.08566666394472122, 0.08633333444595337, 0.08666666597127914, 0.08666666597127914, 0.08866667002439499, 0.08933333307504654, 0.09033333510160446]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 2, 1, 1, 2, 5, 5, 2, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 4, 4, 2, 4, 1, 6], [2, 2, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 0, 1, 1, 15, 10, 7, 3, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, beta), sigma)), sigma)), tf.math.add(sigma, alpha))), sigma)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3035302059194747, 2.3032762827953217, 2.3036128545969454, 2.303151944058053, 2.302511195528068, 2.3023297877091897], "accuracy": [0.08994849026203156, 0.09140139818191528, 0.08757099509239197, 0.09100515395402908, 0.0936468094587326, 0.09113723784685135], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [6, 2, 6, 4, 8, 2, 9, 1, 2, 8, 5, 6, 2, 3, 9, 1, 2, 2, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 1, 0, 2, 2, 0, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 35, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [6, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 37, 37, 23, 14, 8, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 10, 6, 4, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(sigma), tf.math.square(tf.math.subtract(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.square(beta)), sigma)))", "other_info": {"loss": [2.3035302059194747, 2.3032762827953217, 2.3036128545969454, 2.303151944058053, 2.302511195528068, 2.3023297877091897], "accuracy": [0.08994849026203156, 0.09140139818191528, 0.08757099509239197, 0.09100515395402908, 0.0936468094587326, 0.09113723784685135], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 2, 2, 2, 1, 0, 6, 3, 3, 2, 5, 3, 2, 2, 2, 8, 2, 6, 6, 2, 2, 5, 3, 1, 1, 4, 1, 4, 4, 0, 8, 2, 1, 1, 7, 5, 4, 8, 5, 7, 0, 8, 8, 2, 3], [0, 0, 2, 2, 2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 2, 2, 2, 2, 1, 1, 0, 1, 3, 2, 3, 1], [97, 44, 89, 16, 81, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 1, 0, 1], [0, 1, 1, 0], [4, 4, 4], [4, 0, 1, 5, 3, 4], [49], [1, 1, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [11, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 81, 81, 46, 35, 6, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 70, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), alpha), tf.math.add(alpha, grad)))), alpha))), tf.math.pow(grad, tf.math.negative(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.square(tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(grad)))))))), alpha), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [7045955.708214166, 7053854.472039333, 6785769.145865625, 7082475.453196566, 7097301.905338083, 7177091.787142844], "accuracy": [0.09536388516426086, 0.09219389408826828, 0.09179764986038208, 0.09747721254825592, 0.09972262382507324, 0.09549596905708313], "val_loss": [1.9710068702697754, 1.9710068702697754, 1.9710068702697754, 1.9710068702697754, 1.9710068702697754, 1.9710068702697754], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [6, 2, 3, 2, 2, 5, 1, 1, 6, 0, 3, 2, 5, 3, 1, 2, 2, 8, 1, 6, 2, 2, 2, 5, 3, 1, 5, 4, 1, 4, 4, 0, 8, 2, 1, 1, 7, 9, 9, 8, 5, 7, 6, 3, 8, 9, 3], [1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 3, 1, 3, 3, 1, 2, 2, 2, 1, 1, 1, 0, 1], [97, 44, 89, 16, 78, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4, 4], [4, 0, 1, 5, 3, 4], [42], [0, 1, 1, 0, 1, 0, 1, 0, 1], [4, 5, 6, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3035302059194747, 2.3032762827953217, 2.3036128545969454, 2.303151944058053, 2.302511195528068, 2.3023297877091897], "accuracy": [0.08994849026203156, 0.09140139818191528, 0.08757099509239197, 0.09100515395402908, 0.0936468094587326, 0.09113723784685135], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 9, 9, 8, 2, 1, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 21, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 3, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 1, 3, 2, 3, 1, 2, 5], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 22, 22, 15, 7, 6, 25, 25, 14, 11, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.pow(tf.math.negative(beta), tf.math.pow(grad, tf.math.pow(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))), tf.math.add(beta, beta)))))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.square(beta)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3035302059194747, 2.3032762827953217, 2.3036128545969454, 2.303151944058053, 2.302511195528068, 2.3023297877091897], "accuracy": [0.08994849026203156, 0.09140139818191528, 0.08757099509239197, 0.09100515395402908, 0.0936468094587326, 0.09113723784685135], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 3, 8, 2, 1, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [64, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 3, 3, 5, 2, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [5, 4, 4], [2, 0, 1, 5, 3, 4], [49], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 27, 27, 16, 11, 5, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 10, 7, 3, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.math.subtract(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.square(beta)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.303530026011227, 2.3032754100844404, 2.303611658032324, 2.303150090748025, 2.3025084784506116, 2.3023272055393007], "accuracy": [0.08994849026203156, 0.09140139818191528, 0.08757099509239197, 0.09100515395402908, 0.0936468094587326, 0.09113723784685135], "val_loss": [1.9710063934326172, 1.971005916595459, 1.9710053035191126, 1.9710048266819544, 1.9710042136056083, 1.97100373676845], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]