[{"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 4, 9, 5, 6, 1, 3, 0, 9, 1, 2, 8, 2, 3, 5, 3, 1, 2, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 94, 73, 43, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8197143077850342, "mapping_values": [1, 15, 15, 10, 5, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.034356547667917, 1.549331848521542, 1.1805152709001343, 1.0369387258706768, 0.8885907990002535, 0.8306756932044845, 0.7523931036173722, 0.8048203438028384, 0.7295301960223481, 0.6971638340440487, 0.6969984587015745, 0.6932400193795111, 0.663566409029965, 0.63382688834289, 0.611473196359941, 0.6325966986556804, 0.6146536196825951, 0.5911756600796382, 0.5847607666491014, 0.5864727257611556, 0.5612753024505602, 0.5565588143224242, 0.5563267457124627, 0.5553840725901514, 0.5406595295084277, 0.5296257315507387, 0.5261656981039796, 0.5101707600615106, 0.5215419256345487, 0.4911439534837166, 0.4829161349320377, 0.47352815530933423, 0.4909063438225447, 0.47885669648781143, 0.46227667476081924, 0.4597960843338927, 0.4626365883546247, 0.44025334698523133, 0.48063838230762124, 0.44258409285069833, 0.4554143307066046, 0.4148207768244813, 0.4381700617455221, 0.4299978718797308, 0.42820232651174156, 0.4080130073805653, 0.4181670247484995, 0.4249438383733245, 0.4213110340931129, 0.39030584492593345], "accuracy": [0.33007529377937317, 0.4469687044620514, 0.5567296147346497, 0.6104874014854431, 0.6654338836669922, 0.6814159154891968, 0.7136441469192505, 0.6853784322738647, 0.7232862114906311, 0.7316074371337891, 0.7253995537757874, 0.7458723783493042, 0.7477215528488159, 0.7555144429206848, 0.7671377658843994, 0.7569673657417297, 0.7625148296356201, 0.774270236492157, 0.7765156626701355, 0.7800818681716919, 0.7918372750282288, 0.7817989587783813, 0.7895918488502502, 0.7922335267066956, 0.7893276810646057, 0.7965922355651855, 0.8061022162437439, 0.8039889335632324, 0.8037247657775879, 0.8157442808151245, 0.8189142942428589, 0.8244617581367493, 0.813498854637146, 0.8177255392074585, 0.8269713521003723, 0.8253863453865051, 0.8289526104927063, 0.8327829837799072, 0.8190463781356812, 0.8378021121025085, 0.8272355198860168, 0.8446704745292664, 0.8350284099578857, 0.8376700282096863, 0.8392550349235535, 0.8459912538528442, 0.8417646288871765, 0.8380662798881531, 0.8429533839225769, 0.8540483713150024], "val_loss": [1.6098517690386092, 1.0742699078151159, 0.812038779258728, 0.709220460483006, 0.6540942702974591, 0.5918021202087402, 0.6802869864872524, 0.5896820511136737, 0.5458950144904, 0.535623584474836, 0.5826600619724819, 0.5627104384558541, 0.5332000596182687, 0.49856626987457275, 0.4720895630972726, 0.4924123287200928, 0.48340892791748047, 0.4676833152770996, 0.46658272402627127, 0.4429935131754194, 0.4537989752633231, 0.4467417172023228, 0.4457743763923645, 0.4594136135918753, 0.44395353964396883, 0.4276159235409328, 0.41877762760434833, 0.4080630455698286, 0.4146713784762791, 0.40251874923706055, 0.3985616053853716, 0.40964146171297344, 0.3871735419545855, 0.3838499273572649, 0.40014307839529856, 0.3769714491707938, 0.4012910212789263, 0.3906285762786865, 0.3839482069015503, 0.38576814958027433, 0.3638944285256522, 0.40606660502297537, 0.37432599919182913, 0.37390609298433575, 0.35785833426884245, 0.37860057183674406, 0.3877541252544948, 0.4088194625718253, 0.35617637634277344, 0.3590159501348223], "val_accuracy": [0.30533334612846375, 0.503333330154419, 0.6426666378974915, 0.6983333230018616, 0.6886666417121887, 0.7386666536331177, 0.6589999794960022, 0.7386666536331177, 0.7519999742507935, 0.7396666407585144, 0.7276666760444641, 0.7393333315849304, 0.749666690826416, 0.768666684627533, 0.7850000262260437, 0.7756666541099548, 0.7736666798591614, 0.781333327293396, 0.7873333096504211, 0.7943333387374878, 0.7879999876022339, 0.8006666898727417, 0.7996666431427002, 0.7876666784286499, 0.79666668176651, 0.809333324432373, 0.8109999895095825, 0.8193333148956299, 0.8113333582878113, 0.8256666660308838, 0.8240000009536743, 0.8209999799728394, 0.8346666693687439, 0.8303333520889282, 0.8176666498184204, 0.8389999866485596, 0.8199999928474426, 0.8306666612625122, 0.8330000042915344, 0.8333333134651184, 0.8479999899864197, 0.8220000267028809, 0.8396666646003723, 0.8446666598320007, 0.8513333201408386, 0.840666651725769, 0.8346666693687439, 0.8230000138282776, 0.8503333330154419, 0.8513333201408386]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 2, 1, 8, 6, 2, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1], [82, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8154285550117493, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.034410954120058, 1.5496214466828082, 1.1801621389111916, 1.017313203862346, 0.8896573969102601, 0.8124780805827982, 0.7527734695912478, 0.8032974254784252, 0.7228926490909152, 0.7327227424621078, 0.6809008826653341, 0.6741374040308126, 0.6642866897435, 0.6269417867652964, 0.6223283327329648, 0.6333567955947083, 0.6177908639630086, 0.5878323388216187, 0.5951537668838823, 0.583190567386999, 0.5732141916132433, 0.5556774342915071, 0.5515592545487421, 0.552499094667247, 0.5318415222182454, 0.5268436712737506, 0.5221627945236132, 0.5170323457290877, 0.5196519110259789, 0.4905568683907939, 0.4828824860355905, 0.4675721490049343, 0.48660565627139274, 0.48000502187609595, 0.46103150679088617, 0.45832128008563583, 0.45746070233160996, 0.43802370172150934, 0.4651983211053408, 0.4549432973213924, 0.4397449252541197, 0.4300100018894353, 0.4249966436798515, 0.42448614380851224, 0.43051800336883117, 0.4019552314357042, 0.40995448802550705, 0.4233726391962664, 0.4293010931256866, 0.39215952813381283, 0.42343733893598406, 0.41570908984157307, 0.3880476804457289, 0.3785334914556631], "accuracy": [0.33007529377937317, 0.44670453667640686, 0.5581825375556946, 0.6188086271286011, 0.6627922058105469, 0.689869225025177, 0.7143045663833618, 0.6946242451667786, 0.7256637215614319, 0.7187954187393188, 0.7384757399559021, 0.7346453666687012, 0.7429665923118591, 0.7601373791694641, 0.7631752490997314, 0.7552502751350403, 0.7614582180976868, 0.774270236492157, 0.7717606425285339, 0.7847048044204712, 0.7804781198501587, 0.7819310426712036, 0.7887993454933167, 0.7906485199928284, 0.7993659973144531, 0.7972526550292969, 0.8035926818847656, 0.8012151718139648, 0.8079513907432556, 0.8144234418869019, 0.8182538747787476, 0.8278959393501282, 0.8181217908859253, 0.8157442808151245, 0.8274996876716614, 0.8273676037788391, 0.8297450542449951, 0.8348963260650635, 0.8226125836372375, 0.829216718673706, 0.8330471515655518, 0.8348963260650635, 0.8424250483512878, 0.8411042094230652, 0.8383304476737976, 0.852331280708313, 0.8430854678153992, 0.8422929644584656, 0.8378021121025085, 0.852859616279602, 0.8404437899589539, 0.8354246616363525, 0.8540483713150024, 0.8609166741371155], "val_loss": [1.610124145235334, 1.0855328014918737, 0.8731202398027692, 0.6816436733518328, 0.6346242768423898, 0.5966207129614693, 0.6669575316565377, 0.6192600045885358, 0.6127225160598755, 0.5424976689474923, 0.5408275127410889, 0.5437796626772199, 0.5156773328781128, 0.4949545179094587, 0.4772242137363979, 0.49468675681522917, 0.4856440339769636, 0.4709634780883789, 0.46865199293409077, 0.44248237780162264, 0.46674002919878277, 0.4583346332822527, 0.454008834702628, 0.41744024412972586, 0.4513326031821115, 0.4265802502632141, 0.4229825053896223, 0.4107781308037894, 0.41912356444767546, 0.41036512170519146, 0.39137010063443867, 0.39028636046818327, 0.38891059160232544, 0.3839432512010847, 0.4008862291063581, 0.3745048557009016, 0.4010786754744394, 0.38084490810121807, 0.38178584405354093, 0.3872295618057251, 0.3745646732194083, 0.3905349373817444, 0.3688438705035618, 0.38348369938986643, 0.3559933049338205, 0.37223670312336515, 0.3769815819604056, 0.42614000184195383, 0.3584073781967163, 0.36881137745721, 0.4120271972247532, 0.36100361176899504, 0.36299337659563335, 0.36928672449929373], "val_accuracy": [0.304666668176651, 0.4946666657924652, 0.5926666855812073, 0.7016666531562805, 0.6986666917800903, 0.7413333058357239, 0.6943333148956299, 0.7096666693687439, 0.7276666760444641, 0.7450000047683716, 0.731333315372467, 0.7456666827201843, 0.7549999952316284, 0.7716666460037231, 0.7853333353996277, 0.781333327293396, 0.7746666669845581, 0.7850000262260437, 0.7863333225250244, 0.8006666898727417, 0.7630000114440918, 0.7906666398048401, 0.7836666703224182, 0.8080000281333923, 0.7916666865348816, 0.8090000152587891, 0.8073333501815796, 0.8243333101272583, 0.812666654586792, 0.8190000057220459, 0.8263333439826965, 0.8346666693687439, 0.8323333263397217, 0.8303333520889282, 0.8166666626930237, 0.8379999995231628, 0.8233333230018616, 0.8403333425521851, 0.8363333344459534, 0.8326666951179504, 0.8370000123977661, 0.831333339214325, 0.843999981880188, 0.8366666436195374, 0.8500000238418579, 0.8386666774749756, 0.8370000123977661, 0.8096666932106018, 0.8506666421890259, 0.840666651725769, 0.8256666660308838, 0.8463333249092102, 0.8443333506584167, 0.8376666903495789]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 1, 0, 0, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 6, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 2, 2, 1, 0, 0, 1, 1, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1], [30, 96, 30, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8091428279876709, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.034260900312521, 1.5474392057110715, 1.1821255049748334, 1.013975256446047, 0.8953113417426404, 0.8134390929229917, 0.7610461830919634, 0.7951726314099142, 0.7211071200232858, 0.7338456780745793, 0.6780800820656614, 0.6786546947587325, 0.6622099781537084, 0.6437896892552394, 0.6328754856633378, 0.6077687209859548, 0.5895984077245773, 0.5811275595986313, 0.620937693435534, 0.5631067105618766, 0.5836302713396181, 0.5581992775331698, 0.5529926890521364, 0.5513441314109643, 0.5265701531088505, 0.5331599764961844, 0.5151165618148258, 0.517775639669219, 0.5245602834084566, 0.49220789965621514, 0.48114407699436573, 0.47857127974077757, 0.49134108432059465, 0.4810931588743404, 0.46149063858263495, 0.4557550549664596, 0.4580539727074013, 0.4386355257454707, 0.4751488969523153, 0.44944638377954743, 0.44477399787677985], "accuracy": [0.33007529377937317, 0.4500066041946411, 0.5559371113777161, 0.6210539937019348, 0.6621318459510803, 0.6884163022041321, 0.7136441469192505, 0.6913221478462219, 0.7260599732398987, 0.7224937081336975, 0.7390040755271912, 0.7343811988830566, 0.7486461400985718, 0.752212405204773, 0.7541936039924622, 0.7695152759552002, 0.7798177003860474, 0.7771760821342468, 0.7573636174201965, 0.789459764957428, 0.7775723338127136, 0.7799497842788696, 0.7889314293861389, 0.7911768555641174, 0.8034605979919434, 0.7950072884559631, 0.804649293422699, 0.8000264167785645, 0.8055738806724548, 0.8149517774581909, 0.8186501264572144, 0.8212917447090149, 0.8133667707443237, 0.8128384351730347, 0.828820526599884, 0.8272355198860168, 0.8304054737091064, 0.835160493850708, 0.8210275769233704, 0.8337075710296631, 0.8301413059234619], "val_loss": [1.6090963908604212, 1.0863960811070033, 0.8751130104064941, 0.6857477937425885, 0.6393601213182721, 0.6010048389434814, 0.6487562826701573, 0.6103263752801078, 0.6469945226396833, 0.5337849174227033, 0.5473028251102993, 0.5257090670721871, 0.5625804662704468, 0.5053458384105137, 0.49290343693324495, 0.46576431819370817, 0.49517427171979633, 0.4763572556631906, 0.4619092770985195, 0.4337568623679025, 0.46800317083086285, 0.4603631155831473, 0.44706521715436665, 0.41565057209559847, 0.45852625370025635, 0.4309136526925223, 0.42998163189206806, 0.41108707019260954, 0.42083276169640677, 0.40530677352632793, 0.401539215019771, 0.41718149185180664, 0.38738670519420076, 0.38470085178102764, 0.39892264774867464, 0.3731990967478071, 0.3972559486116682, 0.38516151905059814, 0.3909353188105992, 0.39091492550713675, 0.3691866823605129], "val_accuracy": [0.30566665530204773, 0.4986666738986969, 0.5950000286102295, 0.6996666789054871, 0.7016666531562805, 0.7350000143051147, 0.6966666579246521, 0.7160000205039978, 0.7126666903495789, 0.75, 0.7296666502952576, 0.7566666603088379, 0.7153333425521851, 0.7576666474342346, 0.7576666474342346, 0.7839999794960022, 0.7706666588783264, 0.7739999890327454, 0.7863333225250244, 0.8016666769981384, 0.762666642665863, 0.7923333048820496, 0.7919999957084656, 0.8106666803359985, 0.7903333306312561, 0.8063333630561829, 0.8026666641235352, 0.8190000057220459, 0.8136666417121887, 0.8196666836738586, 0.8180000185966492, 0.8173333406448364, 0.8346666693687439, 0.8323333263397217, 0.8169999718666077, 0.8413333296775818, 0.8240000009536743, 0.8373333215713501, 0.8309999704360962, 0.8303333520889282, 0.8413333296775818]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 4, 2, 2, 8, 9, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 4, 3, 6, 2, 2, 6, 9, 9, 5, 4, 1, 4], [0, 2, 2, 1, 0, 0, 1, 1, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 37, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7717142701148987, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0312263536069057, 1.591319392637853, 1.2373115586141759, 1.0443872101255585, 0.8690354079145876, 0.8428799356640826, 0.7861561823624976, 0.7608050768952628, 0.7003819777776285, 0.7108725883847041, 0.6812265632946446, 0.6433260831551356, 0.6473680210072587, 0.6168587392489073, 0.6218735642673128, 0.6034787429117523], "accuracy": [0.33760401606559753, 0.46585655212402344, 0.5543521046638489, 0.6073173880577087, 0.6756042838096619, 0.6791704893112183, 0.707568347454071, 0.709021270275116, 0.7346453666687012, 0.7231541275978088, 0.7441553473472595, 0.7631752490997314, 0.748249888420105, 0.7633073329925537, 0.7572315335273743, 0.7683265209197998], "val_loss": [1.6985081263950892, 1.069779941013881, 0.8935517413275582, 0.7788671595709664, 0.6658342054912022, 0.6378573179244995, 0.620698196547372, 0.5871484449931553, 0.5445307833807809, 0.5459104265485492, 0.5145156724112374, 0.586566686630249, 0.5212735448564801, 0.5440496376582554, 0.4998981612069266, 0.5055569069726127], "val_accuracy": [0.4143333435058594, 0.5673333406448364, 0.5876666903495789, 0.6613333225250244, 0.6890000104904175, 0.7229999899864197, 0.7129999995231628, 0.7356666922569275, 0.7406666874885559, 0.7506666779518127, 0.7749999761581421, 0.7193333506584167, 0.7556666731834412, 0.7429999709129333, 0.7620000243186951, 0.7426666617393494]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 3, 5, 2, 2, 3, 1, 1, 0, 8, 5, 2, 8, 0, 3, 5, 5, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1], [61, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [11], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.4494285583496094, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3027580061199453, 2.3018039821901373, 2.300293660702376, 2.298967114371583, 2.2992077680579457, 2.2983423029474217, 2.295569391266986, 2.296632827942193, 2.2943326514300386, 2.2945649026486032, 2.2937957713034303, 2.2921987463848197, 2.2918807702876354, 2.2910377564541715, 2.289714846360984, 2.290762371595557, 2.288964880141033, 2.2889517934456824, 2.2876476422119545, 2.286165735299923, 2.2860836866525154, 2.2842311843385343, 2.28326173254433, 2.2833635077390215, 2.2821379562867175, 2.27961155005009, 2.2806482938900756, 2.2787265465196884, 2.2782164546461185, 2.2756096609138527, 2.274528768100066, 2.2764044916467614, 2.2756205854981473, 2.274641485356573, 2.2703203476021683, 2.272630574192747, 2.270732166177923, 2.269110059914509, 2.2687310914888736, 2.2692134200526803, 2.2679444838823533, 2.266142666316256, 2.2654554080560048, 2.2649913483827406, 2.263563932318808, 2.262721003794541, 2.2614828929641635, 2.262326578847673, 2.2607429172731015, 2.2582500483523336, 2.2584932152432318, 2.257237600344929, 2.2568142193340908, 2.2540928050590274, 2.2540615011184224, 2.25288552476462, 2.2539581712746206, 2.250766955629993, 2.251446930361682, 2.2490486422266547, 2.249691154537672, 2.24757353413327, 2.246171518386772, 2.2465762832869847, 2.2433239926814466, 2.2432360525664055, 2.2446136331955016, 2.240339138472888, 2.241271123532149, 2.2381358814907113, 2.2362944850548776, 2.2372302009193037, 2.235715207485491, 2.2329707045234537, 2.232886911021122, 2.2325828279155893, 2.2305976920013872, 2.2276799795319295, 2.2264107402604507, 2.2277962341127204, 2.2265955162338056, 2.2241360571532125, 2.2244977242186748, 2.2209120130557833, 2.2246370565590525, 2.220485879225171, 2.219655651851589, 2.220532796323386, 2.2155910185409686, 2.215751719339381, 2.2139844462352265, 2.212501448788868, 2.212353640260194, 2.2093639480848797, 2.20958826586303, 2.208893247740915, 2.204865457201993, 2.2027695192526737, 2.2040411392144397, 2.2014199349669545], "accuracy": [0.09047681838274002, 0.0948355570435524, 0.09311848133802414, 0.09879804402589798, 0.09985470771789551, 0.10606260597705841, 0.1072513535618782, 0.108440101146698, 0.11161009222269058, 0.10751552134752274, 0.11240258812904358, 0.1220446452498436, 0.11359133571386337, 0.12310130894184113, 0.1200634017586708, 0.11940298229455948, 0.12719587981700897, 0.12455421686172485, 0.12362963706254959, 0.13036586344242096, 0.1332716941833496, 0.13802668452262878, 0.13934750854969025, 0.1332716941833496, 0.1430458277463913, 0.1534803807735443, 0.1504424810409546, 0.15440496802330017, 0.1500462293624878, 0.1636507660150528, 0.16589617729187012, 0.16153743863105774, 0.1620657742023468, 0.1632545292377472, 0.1748778223991394, 0.1698586642742157, 0.1694624274969101, 0.177255317568779, 0.18253862857818604, 0.177255317568779, 0.17633073031902313, 0.19138818979263306, 0.19574692845344543, 0.18240654468536377, 0.19270901381969452, 0.19257694482803345, 0.20301149785518646, 0.20393607020378113, 0.19918107986450195, 0.21014396846294403, 0.20816272497177124, 0.20604939758777618, 0.2160876989364624, 0.21899352967739105, 0.2078985571861267, 0.2250693440437317, 0.2160876989364624, 0.22216351330280304, 0.22916391491889954, 0.22995641827583313, 0.22031435370445251, 0.23114515841007233, 0.23774930834770203, 0.2277110069990158, 0.24712719023227692, 0.24184387922286987, 0.2316734939813614, 0.2452780306339264, 0.24224013090133667, 0.2509576082229614, 0.2599392533302307, 0.2537313401699066, 0.25822216272354126, 0.2666754722595215, 0.2537313401699066, 0.2646942138671875, 0.26878878474235535, 0.27301543951034546, 0.2715625464916229, 0.2744683623313904, 0.2744683623313904, 0.27684587240219116, 0.27143046259880066, 0.28239333629608154, 0.2654867172241211, 0.2810725271701813, 0.2731475234031677, 0.2802800238132477, 0.28582748770713806, 0.2899220585823059, 0.28622373938560486, 0.29084664583206177, 0.28463876247406006, 0.2934883236885071, 0.2922995686531067, 0.2921674847602844, 0.30920618772506714, 0.3051116168498993, 0.29599788784980774, 0.3023378551006317], "val_loss": [1.970177377973284, 1.9693501336233956, 1.968528883797782, 1.96771274294172, 1.96689088003976, 1.9660698345729284, 1.9652538299560547, 1.9644358498709542, 1.9636147362845284, 1.9628090177263533, 1.9620050702776228, 1.961202893938337, 1.9603986058916365, 1.959587778363909, 1.958785125187465, 1.957979679107666, 1.957183769771031, 1.9563860893249512, 1.9555843898228236, 1.9547831671578544, 1.953972271510533, 1.9531713213239397, 1.9523604937962122, 1.9515567507062639, 1.9507643835885184, 1.949948515210833, 1.9491362571716309, 1.9483259746006556, 1.947511809212821, 1.9466859953744071, 1.945859772818429, 1.9450413158961706, 1.9442294665745325, 1.94340147290911, 1.942563465663365, 1.9417300905500139, 1.9408965110778809, 1.9400495801653181, 1.9392059871128626, 1.9383603504725866, 1.9375051770891463, 1.936652592250279, 1.9357919011797224, 1.9349352291652135, 1.9340622765677316, 1.9331878934587752, 1.9323041098458427, 1.9314280237470354, 1.9305494172232491, 1.9296508516584123, 1.9287451335362025, 1.9278379849025182, 1.9269334929330009, 1.9260179655892509, 1.9251001221793038, 1.9241717883518763, 1.9232373237609863, 1.922300066266741, 1.9213592665536063, 1.9204000064304896, 1.919454642704555, 1.9184839384896415, 1.9175126893179757, 1.9165430068969727, 1.9155587468828474, 1.9145539147513253, 1.9135641370500838, 1.9125472477504186, 1.911529813494001, 1.9105003220694405, 1.9094514165605818, 1.908404963357108, 1.9073527199881417, 1.906277792794364, 1.9051968710763114, 1.9041250092642648, 1.9030443600245885, 1.901930264064244, 1.900815691266741, 1.899688720703125, 1.8985732623508997, 1.8974365506853377, 1.896286964416504, 1.895115579877581, 1.8939835003444128, 1.8928109577723913, 1.8916278566632951, 1.8904345376150948, 1.889223575592041, 1.8880078451974052, 1.8867734500340052, 1.8855266571044922, 1.884272507258824, 1.882998262132917, 1.8817275592258997, 1.8804325376238142, 1.879122189113072, 1.8777803693498885, 1.87644590650286, 1.8750863756452287], "val_accuracy": [0.043666668236255646, 0.04866666719317436, 0.05400000140070915, 0.057999998331069946, 0.06300000101327896, 0.06966666877269745, 0.07433333247900009, 0.08166666328907013, 0.08866667002439499, 0.0949999988079071, 0.10233332961797714, 0.10499999672174454, 0.11433333158493042, 0.12033333629369736, 0.1289999932050705, 0.1353333294391632, 0.14433333277702332, 0.15666666626930237, 0.16599999368190765, 0.17466667294502258, 0.18400000035762787, 0.19233334064483643, 0.20000000298023224, 0.20800000429153442, 0.2136666625738144, 0.21899999678134918, 0.22699999809265137, 0.23499999940395355, 0.24033333361148834, 0.24766667187213898, 0.2536666691303253, 0.25966668128967285, 0.2683333456516266, 0.2763333320617676, 0.2823333442211151, 0.28566667437553406, 0.29233333468437195, 0.29733332991600037, 0.3036666810512543, 0.3100000023841858, 0.31700000166893005, 0.3199999928474426, 0.3243333399295807, 0.328000009059906, 0.3310000002384186, 0.3346666693687439, 0.33799999952316284, 0.34166666865348816, 0.34599998593330383, 0.34833332896232605, 0.35199999809265137, 0.35466668009757996, 0.3580000102519989, 0.3619999885559082, 0.36500000953674316, 0.36633333563804626, 0.367000013589859, 0.3696666657924652, 0.37166666984558105, 0.3736666738986969, 0.375, 0.37566667795181274, 0.37833333015441895, 0.38066667318344116, 0.382999986410141, 0.38499999046325684, 0.3853333294391632, 0.3876666724681854, 0.38866665959358215, 0.3893333375453949, 0.39266666769981384, 0.39399999380111694, 0.39666667580604553, 0.39766666293144226, 0.398333340883255, 0.4009999930858612, 0.40166667103767395, 0.4036666750907898, 0.4050000011920929, 0.4059999883174896, 0.40700000524520874, 0.40933331847190857, 0.4103333353996277, 0.4129999876022339, 0.4163333475589752, 0.4176666736602783, 0.4189999997615814, 0.4203333258628845, 0.42133334279060364, 0.42266666889190674, 0.4246666729450226, 0.4273333251476288, 0.4286666810512543, 0.43066665530204773, 0.4326666593551636, 0.4339999854564667, 0.4350000023841858, 0.43666666746139526, 0.43933331966400146, 0.43933331966400146]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 0, 2, 6, 1, 4, 0, 5, 5, 2, 2, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [82, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [64], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.1314285695552826, "mapping_values": [1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [4.021701070311646, 2.3082061711398127, 2.305471735103901, 2.3034263966247597, 2.303814399354194, 2.3032027046678247, 2.3032409135518437, 2.302534091678892], "accuracy": [0.17210407555103302, 0.09998679161071777, 0.09113723784685135, 0.09972262382507324, 0.0944393053650856, 0.1026284471154213, 0.09932637959718704, 0.10394927859306335], "val_loss": [1.982264723096575, 1.9747836930411202, 1.9742305619376046, 1.973778452192034, 1.9737653732299805, 1.9736199378967285, 1.9732763426644462, 1.972275733947754], "val_accuracy": [0.10100000351667404, 0.0989999994635582, 0.10433333367109299, 0.0989999994635582, 0.09833333641290665, 0.0989999994635582, 0.10433333367109299, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 8, 0, 0, 6, 1, 3, 0, 2, 1, 2, 8, 2, 3, 1, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 0, 2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 0, 2, 1, 2, 1], [30, 58, 73, 58, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 2, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 3, 5, 2, 2, 3, 1, 1, 0, 8, 5, 2, 8, 0, 3, 5, 5, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 1, 2, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1], [30, 94, 73, 82, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [5, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 8, 8, 1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.multiply(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), alpha)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [8.697517551748522e+22, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06221107020974159, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 2, 1, 8, 6, 2, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1], [82, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [7, 4, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 8, 8, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3037326907469153, 2.3053153072916963, 2.3064274443705886, 2.307729264984766, 2.312276498217388, 2.3154152132784294, 2.316645654090848, 2.324123754886793, 2.329722951825552, 2.34099385930783, 2.367674660704722, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08849557489156723, 0.08611807972192764, 0.08030643314123154, 0.08360850811004639, 0.07594769448041916, 0.07991018146276474, 0.07687227427959442, 0.07779685407876968, 0.07555144280195236, 0.07726852595806122, 0.07991018146276474, 0.09245806187391281, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9722417422703333, 1.9736009325299944, 1.9751451356070382, 1.9769527571541923, 1.9794113976614816, 1.9820324352809362, 1.9847660064697266, 1.9885412624904089, 1.9939279556274414, 2.0054145540509904, 2.04320798601423, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03033333271741867, 0.02866666577756405, 0.027000000700354576, 0.03099999949336052, 0.03500000014901161, 0.041333332657814026, 0.056333333253860474, 0.07500000298023224, 0.08799999952316284, 0.0989999994635582, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 5, 2, 2, 3, 1, 1, 0, 4, 5, 2, 8, 0, 3, 5, 5, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 1, 1, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1], [11, 94, 73, 43, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 19, 10, 2, 1, 1, 0, 1, 0, 7, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.multiply(alpha, tf.math.add(alpha, grad)), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)))))))), tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 0, 2, 6, 1, 4, 2, 5, 5, 2, 6, 8, 3, 5, 4, 1, 8, 9, 9, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [26, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07977809756994247, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 2, 1, 8, 6, 0, 3, 0, 2, 5, 2, 8, 2, 8, 5, 3, 1, 4, 9, 6, 2, 2, 2, 8, 4, 5, 4, 1, 4], [1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 1, 0, 1, 0, 2, 2, 2, 1, 2, 1], [82, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, beta))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 8, 0, 0, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 6, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 2, 2, 1, 0, 0, 1, 1, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 30, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 3, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 2, 15, 15, 8, 7, 1, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 0, 1, 8, 6, 2, 3, 0, 2, 5, 2, 8, 2, 3, 1, 3, 2, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 2, 0, 0, 2, 1, 2, 1, 2, 1], [82, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [4, 0, 1, 5, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 11, 9, 6, 3, 1, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, alpha))))))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030390231490623, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 1, 2, 1, 8, 5, 2, 3, 5, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 1, 1, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1], [82, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 43, 43, 26, 17, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad)))))))))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030390231490623, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 3, 8, 0, 0, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 6, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 2, 2, 1, 2, 0, 1, 1, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1], [30, 6, 30, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [90], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303123747620679, 2.303054167279289, 2.302422377663581, 2.3019653736183026, 2.3030976228836173, 2.3030909830001933], "accuracy": [0.08968432247638702, 0.09153348207473755, 0.08809932321310043, 0.09179764986038208, 0.09126931428909302, 0.0948355570435524], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 5, 1, 0, 0, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 6, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 0, 0, 1, 1, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 30, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [48], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303123747620679, 2.303054167279289, 2.302422377663581, 2.3019653736183026, 2.3030976228836173, 2.3030909830001933], "accuracy": [0.08968432247638702, 0.09153348207473755, 0.08809932321310043, 0.09179764986038208, 0.09126931428909302, 0.0948355570435524], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [5, 1, 2, 1, 8, 6, 2, 3, 9, 2, 5, 3, 8, 2, 3, 5, 3, 1, 8, 9, 6, 5, 2, 6, 8, 4, 3, 4, 1, 4], [1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1], [18, 9, 58, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [1, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303123747620679, 2.303054167279289, 2.302422377663581, 2.3019653736183026, 2.3030976228836173, 2.3030909830001933], "accuracy": [0.08968432247638702, 0.09153348207473755, 0.08809932321310043, 0.09179764986038208, 0.09126931428909302, 0.0948355570435524], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 4, 5, 5, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 3, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 2, 1], [61, 94, 45, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 44, 44, 26, 18, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))))))))))), grad))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303123747620679, 2.303054167279289, 2.302422377663581, 2.3019653736183026, 2.3030976228836173, 2.3030909830001933], "accuracy": [0.08968432247638702, 0.09153348207473755, 0.08809932321310043, 0.09179764986038208, 0.09126931428909302, 0.0948355570435524], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 4, 5, 5, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1], [61, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [4, 0, 1, 5, 3, 4], [21], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.01342857163399458, "mapping_values": [1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))))))), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3058936942632977, 2.3126524508416675, 2.3192056408175357, 2.3261614876211656, 2.3355748742216567, 2.344117338001421], "accuracy": [0.08413683623075485, 0.07211729139089584, 0.058512747287750244, 0.051512349396944046, 0.041870296001434326, 0.03619072958827019], "val_loss": [1.9773189680916923, 1.9838062013898576, 1.9906135967799596, 1.9977436746869768, 2.005453109741211, 2.013772623879569], "val_accuracy": [0.015333333052694798, 0.009666666388511658, 0.007666666526347399, 0.00566666666418314, 0.004999999888241291, 0.004333333112299442]}}]