[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 5, 5, 4, 2, 0, 8, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 0, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [55, 18, 10, 42]], "fitness": -0.845714271068573, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, grad)), tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9826631172221996, 1.0346415922972725, 0.7653351306852301, 0.6916158920612318, 0.6413689589755505, 0.593152638195591, 0.5614436728024386, 0.5359692649913108, 0.5164502929852324, 0.48875852056529623, 0.47658969179482713, 0.4611695432006376, 0.44746170748871994, 0.4426094053908267, 0.4189705158056222, 0.4059759716095784, 0.39595494590667196, 0.38644189025511466, 0.37697967892042034, 0.36370220474122367, 0.356484344102892, 0.3406550875389974, 0.33781409336433843, 0.3271299589067607, 0.32457337374653183, 0.31619851323261144, 0.3068455713906261, 0.304481204608491, 0.2937519701559152, 0.28377333526298937, 0.2864599305609387, 0.2691613318480521, 0.26895589289049887, 0.2582612192437098, 0.25450990702049087, 0.2413428025754404, 0.24386162188909372, 0.2375709921723863, 0.2390644622123032, 0.22089529183121595], "accuracy": [0.32333904504776, 0.6367719173431396, 0.7057191729545593, 0.7280412316322327, 0.7548540234565735, 0.7730814814567566, 0.7874785661697388, 0.7981772422790527, 0.8026680946350098, 0.8131026029586792, 0.8165367841720581, 0.8271034359931946, 0.8298771381378174, 0.8317263126373291, 0.8422929644584656, 0.8469158411026001, 0.8514066934585571, 0.8531237840652466, 0.8561616539955139, 0.8619733452796936, 0.8684453964233398, 0.8693699836730957, 0.8765024542808533, 0.8771628737449646, 0.8767666220664978, 0.8755778670310974, 0.8800686597824097, 0.8828424215316772, 0.8894465565681458, 0.8911636471748352, 0.8870691061019897, 0.891559898853302, 0.8992207050323486, 0.8990886211395264, 0.8985602855682373, 0.9031832218170166, 0.906749427318573, 0.9060890078544617, 0.9082023501396179, 0.9166556596755981], "val_loss": [0.8364860670907157, 0.6010878426688058, 0.55282005241939, 0.5097997188568115, 0.47721881525857107, 0.45914338316236225, 0.44450160435267855, 0.41522230420793804, 0.4006489174706595, 0.39543862853731426, 0.37184154987335205, 0.37410212414605276, 0.3728233405521938, 0.35771641560963224, 0.3562471185411726, 0.35397800377437044, 0.340952924319676, 0.3417712705475943, 0.336386433669499, 0.32816984823771883, 0.32829289776938303, 0.3288153409957886, 0.3313772337777274, 0.3178782718522208, 0.3193204828671047, 0.3123196448598589, 0.31731205327170237, 0.3099971754210336, 0.3129831211907523, 0.31715904814856394, 0.31342187949589323, 0.31603013617651804, 0.30905977317265104, 0.3193449633462088, 0.30492607184818815, 0.3038133553096226, 0.30811073950358797, 0.2999277285167149, 0.31099216427121845, 0.31139146430151804], "val_accuracy": [0.6539999842643738, 0.7356666922569275, 0.7473333477973938, 0.7723333239555359, 0.7816666960716248, 0.7913333177566528, 0.7940000295639038, 0.8169999718666077, 0.8233333230018616, 0.8296666741371155, 0.8423333168029785, 0.8360000252723694, 0.8370000123977661, 0.8493333458900452, 0.8489999771118164, 0.8460000157356262, 0.8583333492279053, 0.8529999852180481, 0.8600000143051147, 0.8603333234786987, 0.8603333234786987, 0.8650000095367432, 0.8636666536331177, 0.8676666617393494, 0.8659999966621399, 0.8696666955947876, 0.8650000095367432, 0.8703333139419556, 0.8723333477973938, 0.8736666440963745, 0.8733333349227905, 0.8759999871253967, 0.874666690826416, 0.8709999918937683, 0.8799999952316284, 0.8776666522026062, 0.8756666779518127, 0.878333330154419, 0.878333330154419, 0.8786666393280029]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 5, 5, 4, 2, 0, 8, 8, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [55, 18, 10, 42]], "fitness": -0.8451428413391113, "mapping_values": [1, 4, 4, 2, 2, 1, 22, 22, 13, 9, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(grad)))), tf.math.sqrt(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9826476959709194, 1.0345331392645947, 0.7657034260454179, 0.6908281191213177, 0.6403565816418874, 0.5960059336084873, 0.5625145970838197, 0.5352831016741314, 0.5155407280269128, 0.49063109023822, 0.4770423770777506, 0.45850543434735475, 0.44557932827765867, 0.43919160630268084, 0.419322798379172, 0.4059917023074531, 0.3924550665265707, 0.38293630187427363, 0.3715041867848385, 0.36078578588386584, 0.34800238860297467, 0.3387491117536494, 0.33896985564643145, 0.33087296064157273, 0.318470545917092, 0.31433505245392523, 0.30921684943012606, 0.30743393766062843, 0.29249894648117236, 0.2871850826138471, 0.2878947318340289, 0.26665047923524415, 0.26243039225590403, 0.25610071279747204, 0.2502753663832218, 0.2420510494450001, 0.24479957266986613, 0.23875330854022758, 0.23948892921292, 0.2193076172308474, 0.2144949158082596], "accuracy": [0.3234711289405823, 0.6373002529144287, 0.7077004313468933, 0.7290979027748108, 0.7560427784919739, 0.774270236492157, 0.7828556299209595, 0.7989697456359863, 0.8034605979919434, 0.8140271902084351, 0.8161405324935913, 0.8294808864593506, 0.8335754871368408, 0.8367455005645752, 0.8401796221733093, 0.8496896028518677, 0.8495575189590454, 0.8540483713150024, 0.8610487580299377, 0.867520809173584, 0.8706908226013184, 0.8684453964233398, 0.8737286925315857, 0.8753136992454529, 0.8780874609947205, 0.8782195448875427, 0.8802007436752319, 0.8824461698532104, 0.8891823887825012, 0.8891823887825012, 0.8889182209968567, 0.8957865834236145, 0.9029190540313721, 0.8994848728179932, 0.9029190540313721, 0.9062210917472839, 0.9041078090667725, 0.9079381823539734, 0.908730685710907, 0.9141460657119751, 0.915070652961731], "val_loss": [0.8365638256072998, 0.6011619056974139, 0.5548395429338727, 0.5090554782322475, 0.4785893304007394, 0.461178047316415, 0.4406336801392691, 0.4147105983325413, 0.4057149035590036, 0.3941647836140224, 0.3733958261353629, 0.3709539345332554, 0.3646617531776428, 0.35864146266664776, 0.36357137135096956, 0.3557819809232439, 0.3380195328167507, 0.33992394379207064, 0.334648711340768, 0.32849161114011494, 0.32502291032246183, 0.32219200474875315, 0.3262433920587812, 0.3128765480858939, 0.3185992922101702, 0.3156763400350298, 0.3233772771699088, 0.3046428646360125, 0.3094371557235718, 0.3171132036617824, 0.3095491869109018, 0.31395818505968365, 0.30202741282326834, 0.3139156017984663, 0.3040144784109933, 0.30286326578685213, 0.3142704963684082, 0.2975295867238726, 0.3103560379573277, 0.3119667172431946, 0.3210164563996451], "val_accuracy": [0.653333306312561, 0.7353333234786987, 0.7453333139419556, 0.7743333578109741, 0.7749999761581421, 0.7873333096504211, 0.796999990940094, 0.815666675567627, 0.8193333148956299, 0.8293333053588867, 0.840666651725769, 0.8356666564941406, 0.8456666469573975, 0.8446666598320007, 0.8443333506584167, 0.8473333120346069, 0.8576666712760925, 0.8583333492279053, 0.8610000014305115, 0.8629999756813049, 0.8640000224113464, 0.8656666874885559, 0.8613333106040955, 0.8683333396911621, 0.8666666746139526, 0.8679999709129333, 0.8656666874885559, 0.8776666522026062, 0.8736666440963745, 0.8743333220481873, 0.8766666650772095, 0.8806666731834412, 0.8786666393280029, 0.871666669845581, 0.8799999952316284, 0.8813333511352539, 0.874666690826416, 0.878333330154419, 0.8776666522026062, 0.8763333559036255, 0.874666690826416]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 6, 6, 8, 5, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 92, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 1, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [33, 18, 10, 42]], "fitness": -0.7948571443557739, "mapping_values": [1, 4, 4, 2, 2, 1, 79, 79, 45, 34, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.multiply(beta, tf.math.negative(grad))))))), tf.math.add(tf.math.add(grad, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(beta))))), tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))))))), grad))), grad)), tf.math.add(beta, tf.math.pow(beta, tf.math.divide_no_nan(tf.math.negative(beta), grad)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(grad, alpha), tf.math.add(beta, tf.math.divide_no_nan(grad, beta))))))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad)))), tf.math.add(beta, beta))))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2933161975118415, 2.2484003075708126, 2.1750158493340277, 2.0373706386357315, 1.8210736963302074, 1.5425606311320188, 1.332222370014309, 1.1801379148151738, 1.0739661261956956, 0.9930675809944878, 0.9378322511616164, 0.8963269179035187, 0.8697020443139878, 0.8280945623224878, 0.8166542520313341, 0.7980593970234148, 0.7776285491016768, 0.765327168084123, 0.7488260777666427, 0.7413267150310682, 0.7328241822222331, 0.7194745594547284, 0.7092345059508456, 0.7031410130228207, 0.6945604319900586, 0.6818985812825581, 0.6864126179716166, 0.6629397559789477, 0.6638026557515373, 0.6633656746628515, 0.6636976730144886, 0.6479650775769982, 0.633762911223874, 0.6473388821457386, 0.6298863354013927, 0.6200173543885462, 0.6312131644428965, 0.6161744935857999, 0.6167537249735932, 0.6093439067501228, 0.6048336449143059, 0.6089833078367394, 0.6074235746101885, 0.5970455988475974], "accuracy": [0.11636507511138916, 0.22678641974925995, 0.33126401901245117, 0.4031171500682831, 0.4434024691581726, 0.5001981258392334, 0.5379738211631775, 0.5827499628067017, 0.6147140264511108, 0.6432439684867859, 0.6639809608459473, 0.6785101294517517, 0.6880200505256653, 0.7047945857048035, 0.7079645991325378, 0.7102100253105164, 0.7180029153823853, 0.7226257920265198, 0.7260599732398987, 0.7280412316322327, 0.7359662055969238, 0.7372870445251465, 0.7378153204917908, 0.7452120184898376, 0.7454761862754822, 0.7495707273483276, 0.7452120184898376, 0.7586844563484192, 0.7552502751350403, 0.7614582180976868, 0.7592127919197083, 0.7605336308479309, 0.76542067527771, 0.7611940503120422, 0.763439416885376, 0.7744023203849792, 0.7693831920623779, 0.7759873270988464, 0.7707040309906006, 0.7786290049552917, 0.7804781198501587, 0.7795535326004028, 0.7728173136711121, 0.783119797706604], "val_loss": [1.9427576746259416, 1.887964861733573, 1.7926910945347376, 1.6186042172568185, 1.3510364123753138, 1.0756891454969133, 0.8874373435974121, 0.787603497505188, 0.7312991789409092, 0.691700918333871, 0.662304333278111, 0.6363207953316825, 0.617693475314549, 0.6025849751063755, 0.5878911869866508, 0.5807886975152152, 0.5699897493634906, 0.5614355972834996, 0.5561547109058925, 0.5520610639027187, 0.5441631419318063, 0.5356476647513253, 0.5313522304807391, 0.5238369362694877, 0.5210032633372715, 0.5151875359671456, 0.5118952648980277, 0.5089089018957955, 0.5059273072651455, 0.5002301761082241, 0.4968590225492205, 0.4936246020453317, 0.4896572657993862, 0.4876045840127127, 0.4855444261005947, 0.4814162254333496, 0.4794372831072126, 0.476621219090053, 0.4752063921519688, 0.4718175785882132, 0.4686481101172311, 0.467800498008728, 0.4681477035794939, 0.4631868600845337], "val_accuracy": [0.2849999964237213, 0.39933332800865173, 0.4586666524410248, 0.5350000262260437, 0.5866666436195374, 0.6476666927337646, 0.6776666641235352, 0.7013333439826965, 0.7070000171661377, 0.7250000238418579, 0.721666693687439, 0.7356666922569275, 0.7416666746139526, 0.7443333268165588, 0.7450000047683716, 0.7506666779518127, 0.7456666827201843, 0.7546666860580444, 0.7580000162124634, 0.7546666860580444, 0.7670000195503235, 0.7603333592414856, 0.7706666588783264, 0.768666684627533, 0.768666684627533, 0.7710000276565552, 0.7749999761581421, 0.7710000276565552, 0.7739999890327454, 0.7789999842643738, 0.7796666622161865, 0.784333348274231, 0.7776666879653931, 0.7839999794960022, 0.784333348274231, 0.7879999876022339, 0.7886666655540466, 0.7889999747276306, 0.79666668176651, 0.7910000085830688, 0.7933333516120911, 0.7940000295639038, 0.7956666946411133, 0.7929999828338623]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 2, 2, 2, 1, 5, 5, 4, 2, 0, 8, 3, 5, 6, 0, 5, 3, 2, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [2, 0, 0, 2, 0, 2, 1, 3, 3, 2, 1, 1, 2, 3, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 4, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [57, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [30, 18, 10, 42]], "fitness": -0.7822856903076172, "mapping_values": [1, 4, 4, 2, 2, 1, 36, 36, 21, 15, 3, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.negative(beta)))))))), tf.math.sqrt(alpha))), tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, grad)))), beta)))), tf.math.multiply(alpha, tf.math.add(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2992691229111197, 2.274610185383837, 2.24186648882895, 2.1967409005679666, 2.13361988179735, 2.0397857460190263, 1.9131582742511415, 1.7593598891054052, 1.5842005541736832, 1.4415395349134243, 1.3221568638197325, 1.2350028756744653, 1.1572234216792598, 1.1132566500428078, 1.0628819474769606, 1.0075647662879768, 0.9857247676658529, 0.9606046273156935, 0.9321374181648681, 0.9122424146612921, 0.8952075779760802, 0.8741232338141866, 0.8605906920205679, 0.8561327355397045, 0.8495241591423699, 0.8304779573658974, 0.8196036715816749, 0.811703654635206, 0.7822545594102152, 0.7828798306585066, 0.7767254086989989, 0.770489860464317, 0.7681727683492199, 0.754932619325237, 0.7583374589299796, 0.7497508331470013, 0.7355874369346297, 0.7290519244950193, 0.7388065905146485, 0.7319400307288527, 0.730303231459945, 0.7226369936925041, 0.7129291785848202, 0.7102568688614336, 0.6996874235813502, 0.7054228268405308, 0.6952867329695347, 0.6895640915363787, 0.6882199269826811, 0.683768566085237, 0.6727313408447279, 0.6867881918769109, 0.6697097886051122, 0.6813223612165218, 0.6701002513743537, 0.6660591520181091, 0.6673225749044402, 0.6620801057734935, 0.6522622005247626, 0.6623682339256624, 0.6475173077641886, 0.6473935384004659, 0.6472720965308095], "accuracy": [0.09879804402589798, 0.16140536963939667, 0.2401268035173416, 0.31158366799354553, 0.3637564480304718, 0.3933430314064026, 0.4255712628364563, 0.44802534580230713, 0.4873860776424408, 0.518689751625061, 0.5404834151268005, 0.5740324854850769, 0.5935807824134827, 0.6061286330223083, 0.6247523427009583, 0.6456214785575867, 0.6498481035232544, 0.657508909702301, 0.6641130447387695, 0.6744155287742615, 0.6812838315963745, 0.6831330060958862, 0.6865671873092651, 0.6901333928108215, 0.6936996579170227, 0.7040021419525146, 0.7012283802032471, 0.7111346125602722, 0.718399167060852, 0.7165499925613403, 0.7154933214187622, 0.7213049530982971, 0.7240787148475647, 0.722229540348053, 0.7207766771316528, 0.7281733155250549, 0.7281733155250549, 0.7296261787414551, 0.724739134311676, 0.7351737022399902, 0.7304186820983887, 0.7372870445251465, 0.7378153204917908, 0.7326641082763672, 0.7446836829185486, 0.7413815855979919, 0.7453441023826599, 0.7460044622421265, 0.7524765729904175, 0.7540615797042847, 0.7559106945991516, 0.7524765729904175, 0.7494386434555054, 0.750759482383728, 0.7555144429206848, 0.7560427784919739, 0.7576277852058411, 0.7585523724555969, 0.7561748623847961, 0.7611940503120422, 0.7614582180976868, 0.76106196641922, 0.7585523724555969], "val_loss": [1.9552358899797713, 1.9268003872462682, 1.8905839920043945, 1.8402678625924247, 1.765688487461635, 1.6576778888702393, 1.5095889227730888, 1.3346476214272636, 1.1629762308938163, 1.0206889084407262, 0.9188402720860073, 0.8486707210540771, 0.7976794753755841, 0.7612964255469186, 0.7311652387891497, 0.706105283328465, 0.6831287486212594, 0.6648475442613874, 0.650131208556039, 0.6379606383187431, 0.6262115921292987, 0.6157687732151577, 0.6077941145215716, 0.5987487690789359, 0.5914213316781181, 0.5852577856608799, 0.5788189853940692, 0.5729574135371617, 0.5656845229012626, 0.5608755350112915, 0.556313054902213, 0.5515055315835136, 0.5477277210780552, 0.5442629371370588, 0.5392710481371198, 0.5362159354346139, 0.5317275694438389, 0.5291234425136021, 0.5259227071489606, 0.5231082439422607, 0.5192083120346069, 0.518459507397243, 0.5151332957404, 0.5113160269601005, 0.5084021942956107, 0.5065701348440987, 0.5050708055496216, 0.5023930753980365, 0.4977090358734131, 0.4958491836275373, 0.4931717259543283, 0.491124016898019, 0.48943463393620085, 0.4885399511882237, 0.4858377831322806, 0.4841674395969936, 0.48160082953316824, 0.4811373608452933, 0.4799889496394566, 0.47760679040636334, 0.4759749344417027, 0.47566451345171246, 0.4727722576686314], "val_accuracy": [0.1706666648387909, 0.35066667199134827, 0.4050000011920929, 0.4580000042915344, 0.5019999742507935, 0.5400000214576721, 0.5653333067893982, 0.5923333168029785, 0.6226666569709778, 0.6553333401679993, 0.671999990940094, 0.6896666884422302, 0.6980000138282776, 0.70333331823349, 0.7089999914169312, 0.718666672706604, 0.7226666808128357, 0.7279999852180481, 0.7336666584014893, 0.734000027179718, 0.7366666793823242, 0.7409999966621399, 0.7443333268165588, 0.7476666569709778, 0.7493333220481873, 0.7506666779518127, 0.7513333559036255, 0.753000020980835, 0.7583333253860474, 0.7573333382606506, 0.7609999775886536, 0.765333354473114, 0.765999972820282, 0.7636666893959045, 0.7699999809265137, 0.7710000276565552, 0.7720000147819519, 0.7713333368301392, 0.7733333110809326, 0.7726666927337646, 0.7760000228881836, 0.7736666798591614, 0.7753333449363708, 0.7749999761581421, 0.7786666750907898, 0.7803333401679993, 0.7763333320617676, 0.7823333144187927, 0.7803333401679993, 0.7829999923706055, 0.7839999794960022, 0.7870000004768372, 0.7836666703224182, 0.7870000004768372, 0.7879999876022339, 0.7870000004768372, 0.7919999957084656, 0.7926666736602783, 0.7866666913032532, 0.7876666784286499, 0.7893333435058594, 0.7900000214576721, 0.7919999957084656]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 1, 4, 3, 0, 2, 2, 5, 6, 0, 5, 5, 4, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 9, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 2, 0, 2, 0, 2, 1, 3, 3, 2, 1, 3, 2, 3, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 4, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [20, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [6, 5, 8, 1, 1, 5, 2, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [51, 18, 10, 42]], "fitness": -0.7722856998443604, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1615372048141053, 1.5029598197538965, 1.1753480120924533, 0.9946174905394929, 0.9038004298661095, 0.8505562398774104, 0.786987419991902, 0.7571198493183218, 0.7361457672148742, 0.7204046398578398, 0.7039782536059732, 0.687211806417346, 0.6666713254074804, 0.6548538574091023, 0.6369368482054878, 0.6419401308013589], "accuracy": [0.2833179235458374, 0.4861973226070404, 0.5827499628067017, 0.6431118845939636, 0.667811393737793, 0.6872276067733765, 0.7116629481315613, 0.720380425453186, 0.7298903465270996, 0.7265883088111877, 0.7313432693481445, 0.7411174178123474, 0.7549861073493958, 0.7535332441329956, 0.7581561207771301, 0.7578919529914856], "val_loss": [1.449317387172154, 0.9078732218061175, 0.779107792036874, 0.6830410787037441, 0.6664013862609863, 0.6205932242529733, 0.6104604857308524, 0.573114173752921, 0.5779972076416016, 0.5809369768415179, 0.5328779901776995, 0.5249396903174264, 0.5289423295429775, 0.517533676964896, 0.5091814143317086, 0.5456760781151908], "val_accuracy": [0.5506666898727417, 0.596666693687439, 0.684333324432373, 0.7023333311080933, 0.706333339214325, 0.7226666808128357, 0.718666672706604, 0.7356666922569275, 0.7383333444595337, 0.7293333411216736, 0.7643333077430725, 0.7633333206176758, 0.7596666812896729, 0.7446666955947876, 0.7603333592414856, 0.7396666407585144]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 1, 4, 3, 0, 2, 2, 5, 6, 0, 5, 5, 4, 2, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 2, 2, 9, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 1, 3, 3, 0, 1, 3, 2, 3, 0, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 4, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [5, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [51, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 36, 36, 21, 15, 4, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, grad)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.square(alpha)))))))), tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302776419459837, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 5, 4, 3, 0, 2, 6, 5, 3, 0, 5, 3, 0, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 2, 3, 3, 2, 1, 0, 2, 0, 3, 3, 1, 3, 1, 3, 3, 2, 2, 0, 3, 4, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 16, 16, 9, 7, 2, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))))), beta)), tf.math.add(beta, tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 2, 2, 0, 1, 5, 5, 4, 2, 0, 8, 8, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 3, 0, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [55, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [12.7845581537382, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03619072958827019, 0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3544454.785714286, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [98, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 4, 5, 1, 4, 3, 0, 8, 2, 5, 2, 2, 5, 5, 4, 6, 2, 6, 4, 2, 3, 3, 8, 2, 5, 2, 2, 6, 2, 9, 9, 8, 5, 4, 6, 0, 6, 0, 6, 1, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 5, 3, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [41, 38, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [51, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 9, 9, 4, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta)))))), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302776419459837, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 1, 4, 3, 1, 2, 2, 5, 6, 0, 1, 5, 4, 9, 0, 6, 4, 2, 0, 5, 0, 2, 5, 2, 2, 1, 2, 9, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 1, 3, 3, 2, 1, 3, 2, 3, 2, 3, 1, 2, 1, 3, 3, 2, 2, 3, 3, 4, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [8, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [51, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 4, 5, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 2, 7, 5, 6, 5, 5, 4, 3, 0, 5, 2, 5, 6, 0, 5, 3, 4, 6, 2, 5, 4, 2, 0, 3, 0, 5, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 3, 0, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 5, 8, 1, 1, 5, 2, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [51, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 6, 5, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0676264688372612, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 7, 5, 0, 8, 5, 4, 9, 6, 5, 2, 5, 2, 0, 5, 3, 4, 8, 2, 6, 4, 2, 0, 3, 0, 2, 4, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 3, 0, 2, 0, 2, 2, 3, 3, 2, 1, 3, 2, 0, 2, 3, 2, 1, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 2, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 2, 2, 3, 0, 0, 0], [51, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 10, 5, 4, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(beta, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08572183549404144, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 6, 5, 6, 5, 5, 4, 3, 0, 2, 2, 8, 6, 0, 5, 3, 5, 6, 6, 6, 4, 8, 0, 3, 0, 2, 5, 4, 2, 1, 1, 1, 8, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 2, 3, 3, 2, 1, 3, 3, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 4, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [39, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [51, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [9, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 3, 7, 5, 6, 5, 5, 4, 3, 5, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 2, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 1, 2, 3, 0, 0, 0], [55, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 5, 1, 5, 5, 4, 6, 0, 1, 8, 5, 4, 0, 5, 3, 2, 6, 2, 6, 4, 2, 0, 1, 0, 2, 6, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 5, 0, 2, 1, 3, 2, 3, 3, 2, 1, 3, 2, 0, 3, 3, 1, 1, 3, 3, 1, 2, 2, 3, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [55, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 68, 68, 40, 28, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))))))))), tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.square(tf.math.pow(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), alpha)))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.square(tf.math.add(beta, alpha))), tf.math.add(beta, grad))), grad))))), alpha))), tf.math.add(beta, tf.math.pow(beta, beta))), grad)))), grad))), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [68, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 0, 2, 0, 1, 5, 5, 4, 2, 0, 8, 8, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 0, 0, 1, 0, 1], [4, 0, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [55, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07832518965005875, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 2, 2, 2, 1, 5, 5, 4, 2, 0, 8, 8, 5, 6, 0, 5, 3, 4, 2, 2, 6, 4, 9, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 3, 0, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 3, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [28, 21, 20, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [55, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028669969170497, 2.3027730058008227, 2.302776101715356, 2.302768738073617, 2.302812789267773, 2.302807411828203], "accuracy": [0.09430722147226334, 0.09219389408826828, 0.09470347315073013, 0.09866596013307571, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736056327819824, 1.9737162590026855, 1.9736524309430803, 1.9737423488071986, 1.9737497057233537, 1.9737327439444405], "val_accuracy": [0.10433333367109299, 0.09799999743700027, 0.0989999994635582, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 7, 5, 6, 5, 5, 4, 3, 0, 5, 2, 5, 6, 0, 5, 3, 4, 6, 2, 5, 4, 2, 0, 3, 0, 5, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 2, 2, 0, 2, 2, 3, 3, 2, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 4, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [73, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [0, 18, 10, 42]], "fitness": -0.09428571164608002, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 5, 5, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.math.sqrt(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3041562542797567, 2.302933496113199, 2.3035778749289846, 2.3021699365387347, 2.302188710671343, 2.301293299702322, 2.3012634765643645, 2.3020620143896933, 2.3010399593826394, 2.3025596224006772, 2.302533605205479, 2.303343244374247, 2.3015504832501423, 2.3025950066968672, 2.3019154456313324, 2.3017316519576387, 2.3009253438469157, 2.3013004584634276, 2.300956825082013, 2.3010753375695696, 2.302078184056764, 2.3004291984367646, 2.2990568154964466, 2.302471888835294, 2.3008017328673223, 2.300612567422444, 2.299042247840993, 2.299922870780341, 2.298961123549754, 2.298917721070791, 2.2989683125107563, 2.2982509741142616, 2.300384283002814, 2.300963521082451, 2.299464039121715, 2.2993025547950148, 2.299559940231821, 2.2983862826254517, 2.299850978430598, 2.300320445837803, 2.3002760568078893, 2.2994223835760845, 2.2992336277979994, 2.2991503981110473, 2.2987172681075108, 2.297286129929937, 2.299226274831719, 2.2986369679994776, 2.2979749300539405, 2.2983378327643913, 2.2958729420166764, 2.299422032419622, 2.296967040530411, 2.2981581052438287, 2.2972723999673414, 2.2963980899715564, 2.296418726357644, 2.2970692062453506, 2.2977860642776924, 2.2986017827895715, 2.296566020259925, 2.297267016135092, 2.2966633741141718, 2.297014534575765, 2.2958851496399575, 2.2956246457095504, 2.2957207350100446, 2.2963613088592925, 2.297535514441054, 2.296703649596956, 2.296031216525792, 2.296452071011389, 2.2955805183700866, 2.295125705596557, 2.295848169032026, 2.2935106422702445, 2.2942662469903947, 2.295764732511997, 2.295045800574971, 2.2937572937379533, 2.2957664789729635, 2.294556134318033, 2.293836629181301, 2.2946117795327745, 2.2953541086428926, 2.2950103258680374, 2.2958150300776814, 2.2944055592080055, 2.294716923228344, 2.294333831115469, 2.293073426116774, 2.2948744340485208, 2.2955349841059287, 2.2946887165248953, 2.293702846536421, 2.2936584226774297, 2.2946423881829547, 2.2932802883861654, 2.292672466057135, 2.293479276922133], "accuracy": [0.0878351628780365, 0.08836349099874496, 0.08717474341392517, 0.09206181764602661, 0.09008057415485382, 0.09192973375320435, 0.09338264167308807, 0.0956280529499054, 0.09470347315073013, 0.09166556596755981, 0.09351472556591034, 0.09417514503002167, 0.09140139818191528, 0.09391097724437714, 0.09668471664190292, 0.09074098616838455, 0.09192973375320435, 0.09325055778026581, 0.09470347315073013, 0.09681680053472519, 0.0952318087220192, 0.09826971590518951, 0.09813763201236725, 0.09087307006120682, 0.09576013684272766, 0.09100515395402908, 0.09589222073554993, 0.09774138033390045, 0.10170386731624603, 0.09694888442754745, 0.09853387624025345, 0.09893012791872025, 0.09457138925790787, 0.09747721254825592, 0.09774138033390045, 0.09879804402589798, 0.09879804402589798, 0.0956280529499054, 0.09496764093637466, 0.09496764093637466, 0.09893012791872025, 0.1014397069811821, 0.10011887550354004, 0.10170386731624603, 0.09893012791872025, 0.10817593336105347, 0.10038304328918457, 0.09998679161071777, 0.10157178342342377, 0.10540219396352768, 0.10698718577623367, 0.10342095047235489, 0.09893012791872025, 0.1002509593963623, 0.10381719470024109, 0.09893012791872025, 0.108440101146698, 0.10857218503952026, 0.09853387624025345, 0.10170386731624603, 0.11042134463787079, 0.10579843819141388, 0.11068551242351532, 0.10196803510189056, 0.1014397069811821, 0.10513802617788315, 0.10830801725387573, 0.09813763201236725, 0.109232597053051, 0.10342095047235489, 0.1014397069811821, 0.1018359512090683, 0.10659094154834747, 0.10698718577623367, 0.10738343745470047, 0.1142517477273941, 0.11398758739233017, 0.1088363528251648, 0.11002509295940399, 0.11161009222269058, 0.1080438494682312, 0.10672302544116974, 0.11491216719150543, 0.11134592443704605, 0.10566636174917221, 0.10698718577623367, 0.10421344637870789, 0.11094967275857925, 0.11015717685222626, 0.11081759631633759, 0.1138555034995079, 0.10579843819141388, 0.11121384054422379, 0.11121384054422379, 0.1142517477273941, 0.11411966383457184, 0.108440101146698, 0.1158367469906807, 0.11240258812904358, 0.108440101146698], "val_loss": [1.970968450818743, 1.9708966527666365, 1.970813478742327, 1.9707270349775041, 1.9706391607012068, 1.970550468989781, 1.9704607554844447, 1.9703717231750488, 1.970282690865653, 1.970193317958287, 1.9701036725725447, 1.9700134141104562, 1.969923768724714, 1.9698343958173479, 1.9697452272687639, 1.9696556500026159, 1.969566822052002, 1.969477585383824, 1.9693888936723982, 1.9692999294825964, 1.96921021597726, 1.9691215923854284, 1.9690328325544084, 1.968944753919329, 1.968855721609933, 1.9687666211809431, 1.9686775207519531, 1.9685893739972795, 1.9685006822858537, 1.968411649976458, 1.9683226176670618, 1.9682328360421317, 1.9681434631347656, 1.9680534771510534, 1.9679643767220634, 1.9678758893694197, 1.9677868570600237, 1.9676976203918457, 1.9676085880824499, 1.96751982825143, 1.9674310684204102, 1.9673424448285783, 1.9672538212367467, 1.9671649251665388, 1.967076233455113, 1.9669878823416573, 1.9668994631086076, 1.9668104307992118, 1.96672180720738, 1.9666333879743303, 1.9665453093392509, 1.9664571625845773, 1.9663685389927454, 1.9662795066833496, 1.966191291809082, 1.9661027363368444, 1.9660145895821708, 1.9659271240234375, 1.96583890914917, 1.9657510348728724, 1.9656626837594169, 1.9655744007655553, 1.965486798967634, 1.9653991971697127, 1.965310914175851, 1.9652230398995536, 1.9651350293840681, 1.9650470869881767, 1.9649592808314733, 1.9648712703159876, 1.9647838728768485, 1.964695998600551, 1.9646074431283134, 1.9645188876560755, 1.964430672781808, 1.9643421173095703, 1.9642539024353027, 1.9641656875610352, 1.9640767914908273, 1.9639885084969657, 1.9639004979814803, 1.9638126237051827, 1.963724204472133, 1.9636363301958357, 1.9635490008762904, 1.963461194719587, 1.9633738654000419, 1.9632865360804967, 1.9631985936846053, 1.9631100382123674, 1.9630218233380998, 1.9629337447030204, 1.962846279144287, 1.9627588135855538, 1.9626708030700684, 1.9625828606741769, 1.9624949863978796, 1.9624073164803642, 1.9623192378452845, 1.9622313635689872], "val_accuracy": [0.03733333200216293, 0.03799999877810478, 0.038333334028720856, 0.03933333232998848, 0.0403333343565464, 0.04066666588187218, 0.04100000113248825, 0.04233333468437195, 0.04266666620969772, 0.04333333298563957, 0.04466666653752327, 0.045666664838790894, 0.04533333331346512, 0.04600000008940697, 0.04633333161473274, 0.046666666865348816, 0.04699999839067459, 0.04766666516661644, 0.04833333194255829, 0.04899999871850014, 0.05066666752099991, 0.050999999046325684, 0.05133333429694176, 0.052000001072883606, 0.052000001072883606, 0.05233333259820938, 0.052666667848825455, 0.05299999937415123, 0.0533333346247673, 0.05400000140070915, 0.05433333292603493, 0.054666668176651, 0.054666668176651, 0.055666666477918625, 0.055666666477918625, 0.0560000017285347, 0.05700000002980232, 0.05833333358168602, 0.05833333358168602, 0.058666665107011795, 0.05966666713356972, 0.05999999865889549, 0.06066666543483734, 0.061000000685453415, 0.061666667461395264, 0.06199999898672104, 0.06333333253860474, 0.06333333253860474, 0.06366666406393051, 0.06433333456516266, 0.06499999761581421, 0.06700000166893005, 0.06700000166893005, 0.06800000369548798, 0.06800000369548798, 0.06933332979679108, 0.07000000029802322, 0.07000000029802322, 0.07000000029802322, 0.07133333384990692, 0.0716666653752327, 0.07199999690055847, 0.07266666740179062, 0.07233333587646484, 0.07400000095367432, 0.07433333247900009, 0.07566666603088379, 0.07566666603088379, 0.07733333110809326, 0.07766667008399963, 0.07766667008399963, 0.07866666465997696, 0.08033332973718643, 0.0806666687130928, 0.08133333176374435, 0.08166666328907013, 0.08299999684095383, 0.08366666734218597, 0.08500000089406967, 0.0860000029206276, 0.08666666597127914, 0.08799999952316284, 0.08833333104848862, 0.08866667002439499, 0.09000000357627869, 0.09066666662693024, 0.09099999815225601, 0.09200000017881393, 0.09333333373069763, 0.09399999678134918, 0.09433333575725555, 0.09433333575725555, 0.0949999988079071, 0.09566666930913925, 0.0963333323597908, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09833333641290665, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 1, 9, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 5, 5, 4, 2, 0, 8, 8, 5, 5, 0, 5, 3, 4, 6, 2, 6, 5, 5, 0, 0, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 6, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [2, 5, 3, 3, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 1, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [30, 17, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 3, 1, 1, 38, 38, 24, 14, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), beta)))))), beta)))), tf.math.negative(grad))), tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))))), tf.math.square(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3041680931115995, 2.3030037330425395, 2.3037310147313805, 2.30241181591892, 2.3025253775128913, 2.3017230650153944], "accuracy": [0.0878351628780365, 0.08836349099874496, 0.0866464152932167, 0.09166556596755981, 0.09008057415485382, 0.09126931428909302], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 2, 2, 0, 1, 5, 5, 4, 2, 0, 8, 8, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 0, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 5, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 3, 0, 2, 0, 2, 2, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [77, 21, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 5, 8, 1, 1, 5, 2, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [51, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3041680931115995, 2.3030037330425395, 2.3037310147313805, 2.30241181591892, 2.3025253775128913, 2.3017230650153944], "accuracy": [0.0878351628780365, 0.08836349099874496, 0.0866464152932167, 0.09166556596755981, 0.09008057415485382, 0.09126931428909302], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]