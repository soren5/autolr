[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 2, 3, 3, 8, 9, 1, 3, 9, 5, 9, 7, 8, 2, 6, 0, 0, 2, 2, 9, 6, 8, 5, 3, 2, 2, 9, 8, 8, 2, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 2, 52, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8114285469055176, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 22, 12, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(alpha)))))), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))))))), grad)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256768289731557, 1.8403268810811848, 1.3108067920478486, 0.9726101973777623, 0.8487813696963927, 0.8071726882588421, 0.7512250451631612, 0.7143590108530475, 0.6783989445801976, 0.6501625773377974, 0.6111288759466239, 0.5847737569031761, 0.571381067012547, 0.5421904022147894, 0.5241755571946051, 0.5141172600129434, 0.4949153218294856, 0.4921498001881437, 0.47974538358289803, 0.45553581312096053, 0.4439318997512609, 0.42424799641834166, 0.415841904932466, 0.40776853550143327, 0.3910670104461056, 0.3920258147337685, 0.3795555488835898, 0.37049315195703364, 0.37047470169784746, 0.35647532988643255, 0.3504597840410229, 0.335659855978915, 0.3265207246026626, 0.3242044578398759, 0.31376651605327194, 0.3089887934621645, 0.3059616499588931, 0.3000320389939652, 0.2910555611275852, 0.2859405108084532, 0.29034547995677035], "accuracy": [0.19297318160533905, 0.4315149784088135, 0.5521067380905151, 0.6433760523796082, 0.6868313550949097, 0.6956809163093567, 0.7108704447746277, 0.7302865982055664, 0.7404569983482361, 0.7467969655990601, 0.7708360552787781, 0.7771760821342468, 0.7795535326004028, 0.793950617313385, 0.7973847389221191, 0.8016114234924316, 0.8119139075279236, 0.8191784620285034, 0.8219521641731262, 0.8284242749214172, 0.8318583965301514, 0.8424250483512878, 0.846387505531311, 0.8442742228507996, 0.8506141901016235, 0.8506141901016235, 0.8562937378883362, 0.860652506351471, 0.8589354157447815, 0.8646149635314941, 0.8683133125305176, 0.8681812286376953, 0.8708229064941406, 0.8767666220664978, 0.8791441321372986, 0.8782195448875427, 0.8790120482444763, 0.8820499181747437, 0.8879936337471008, 0.8883898854255676, 0.8865407705307007], "val_loss": [1.8091556004115514, 0.9814733096531459, 0.758737598146711, 0.6845299175807408, 0.6135327134813581, 0.5763932636805943, 0.5618858507701329, 0.5215899433408465, 0.5048161234174456, 0.4837070533207485, 0.46097540855407715, 0.44690511907849995, 0.4350708212171282, 0.42190476826259066, 0.4100578171866281, 0.4089830773217337, 0.3915994167327881, 0.38740875891276766, 0.3814667122704642, 0.3668084144592285, 0.36021373101643156, 0.36599451303482056, 0.3585630740438189, 0.34637478419712614, 0.34632693869727, 0.3452580826623099, 0.3364828995295933, 0.34192981890269686, 0.3396540199007307, 0.3348444529942104, 0.3311733603477478, 0.33271606479372295, 0.3300383857318333, 0.32097948448998587, 0.31866465296064106, 0.32477336270468576, 0.3224459375653948, 0.32110053300857544, 0.32167621169771465, 0.32304489612579346, 0.32319613865443636], "val_accuracy": [0.4300000071525574, 0.656000018119812, 0.684333324432373, 0.7013333439826965, 0.7253333330154419, 0.7423333525657654, 0.7543333172798157, 0.7593333125114441, 0.7689999938011169, 0.7839999794960022, 0.7876666784286499, 0.8019999861717224, 0.8053333163261414, 0.8143333196640015, 0.8133333325386047, 0.8196666836738586, 0.8316666483879089, 0.831333339214325, 0.8413333296775818, 0.8450000286102295, 0.8510000109672546, 0.8510000109672546, 0.8543333411216736, 0.8576666712760925, 0.8619999885559082, 0.859666645526886, 0.862333357334137, 0.8613333106040955, 0.862666666507721, 0.8640000224113464, 0.8613333106040955, 0.8650000095367432, 0.8706666827201843, 0.8709999918937683, 0.8700000047683716, 0.874666690826416, 0.871666669845581, 0.8740000128746033, 0.871999979019165, 0.8743333220481873, 0.874666690826416]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 0, 1, 3, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8037142753601074, "mapping_values": [1, 4, 4, 2, 2, 1, 27, 27, 16, 11, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), alpha), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(beta, beta))))), tf.math.add(beta, beta)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2567682267494993, 1.8403215160805708, 1.3107484768977207, 0.9729400638182402, 0.8483840954491113, 0.8075634437686874, 0.7506264149394758, 0.7144407025968803, 0.6795887555412848, 0.6520731753094353, 0.613298310603385, 0.5861108085467059, 0.5710920501441814, 0.5431716924865626, 0.5255670230291964, 0.5142072293705172, 0.49412176162968885, 0.49035760998458217, 0.47952333684720855, 0.45556700161545427, 0.44465297725867947, 0.4259759338304209, 0.41550192542363307, 0.4099165817584659, 0.39422516299040405, 0.39334577758550615, 0.3807233283272855, 0.37338132616818903, 0.37118922500105866, 0.35649904742563376, 0.34967046321863354, 0.33877676302620513, 0.3305552865748455, 0.3274594324257994, 0.31520129869548225, 0.3122664790159172, 0.30669598591766967, 0.2958409822714595, 0.29245798945379703, 0.2846958296504617, 0.28887878522314275, 0.2802115360255475, 0.2798388177818547, 0.2723601971674337, 0.26941629609317197, 0.26084404383526344, 0.2601238869090264], "accuracy": [0.19297318160533905, 0.4315149784088135, 0.5519746541976929, 0.6429798007011414, 0.6876237988471985, 0.6963412761688232, 0.7117950320243835, 0.7302865982055664, 0.7392682433128357, 0.7461365461349487, 0.7700436115264893, 0.7781006693840027, 0.7798177003860474, 0.7940827012062073, 0.8010830879211426, 0.8029322624206543, 0.8148196935653687, 0.819970965385437, 0.8235371708869934, 0.8294808864593506, 0.8313300609588623, 0.8403117060661316, 0.8442742228507996, 0.8436138033866882, 0.8514066934585571, 0.8495575189590454, 0.8548408150672913, 0.8581429123878479, 0.8578787446022034, 0.8661999702453613, 0.8660678863525391, 0.8692378997802734, 0.8720116019248962, 0.8765024542808533, 0.8791441321372986, 0.878351628780365, 0.880729079246521, 0.8828424215316772, 0.887597382068634, 0.8889182209968567, 0.887597382068634, 0.8923524022102356, 0.8918240666389465, 0.8936732411384583, 0.8956544995307922, 0.8977677822113037, 0.8956544995307922], "val_loss": [1.8091556004115514, 0.9814520222800118, 0.7586784703390939, 0.6843195131846836, 0.6133448226111275, 0.5754382610321045, 0.5632329157420567, 0.523202623639788, 0.5042214734213692, 0.48421335220336914, 0.4621471847806658, 0.4474586248397827, 0.43504966156823294, 0.42008984088897705, 0.4079841119902475, 0.406483667237418, 0.3894472122192383, 0.3885573319026402, 0.38112019641058786, 0.3666233420372009, 0.35967832803726196, 0.3645562359264919, 0.3635608128138951, 0.34934609276907785, 0.34382843119757517, 0.3446520481790815, 0.33678057364055086, 0.3409904497010367, 0.3367274914469038, 0.333412093775613, 0.3287939855030605, 0.3281083617891584, 0.3272586975778852, 0.3192352226802281, 0.31762510538101196, 0.32400794540132793, 0.31968201058251516, 0.3193111164229257, 0.31830391713551115, 0.31846658672605244, 0.3222485865865435, 0.31669531549726215, 0.31672882182257517, 0.310712925025395, 0.310884382043566, 0.3203862224306379, 0.31879418236868723], "val_accuracy": [0.4300000071525574, 0.656000018119812, 0.684333324432373, 0.7020000219345093, 0.7266666889190674, 0.7433333396911621, 0.753333330154419, 0.7593333125114441, 0.7689999938011169, 0.781333327293396, 0.7856666445732117, 0.8050000071525574, 0.8040000200271606, 0.8180000185966492, 0.815666675567627, 0.8199999928474426, 0.8343333601951599, 0.8306666612625122, 0.8396666646003723, 0.8489999771118164, 0.8489999771118164, 0.8543333411216736, 0.8516666889190674, 0.8546666502952576, 0.859666645526886, 0.859333336353302, 0.8629999756813049, 0.8610000014305115, 0.8629999756813049, 0.8679999709129333, 0.8629999756813049, 0.8686666488647461, 0.8693333268165588, 0.8706666827201843, 0.8726666569709778, 0.8723333477973938, 0.8663333058357239, 0.8696666955947876, 0.8740000128746033, 0.874666690826416, 0.875, 0.8763333559036255, 0.8743333220481873, 0.875, 0.874666690826416, 0.8723333477973938, 0.875333309173584]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 1, 3, 2, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7977142930030823, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 16, 12, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(grad, alpha), grad), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(beta, beta)))))), tf.math.add(beta, beta))))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.259865439815166, 1.8373709196868653, 1.277167660771832, 0.934855553027173, 0.8303646667679744, 0.764330685996833, 0.7190178572745796, 0.6849974842827947, 0.6594490828594086, 0.6342038274708834, 0.6016521210353042, 0.5818791788063029, 0.5571549637300968, 0.5296142629313667, 0.5088073449946665, 0.4949239705413828, 0.4775408197938805, 0.4635886095258554, 0.46178852216741745, 0.44371056367755485, 0.431817554507226, 0.408474528971381, 0.396020032871889, 0.39460725528279694, 0.3831429027287621, 0.3725085478448723, 0.36771877767970107, 0.3517963232743411, 0.3386562122660637, 0.3433818682357069, 0.32263652780162755], "accuracy": [0.1938977688550949, 0.4282129108905792, 0.5620129704475403, 0.6579051613807678, 0.6939638257026672, 0.7132478952407837, 0.7239466309547424, 0.7429665923118591, 0.7494386434555054, 0.763967752456665, 0.7737419009208679, 0.7825914621353149, 0.7885351777076721, 0.7993659973144531, 0.8058380484580994, 0.8099326491355896, 0.8190463781356812, 0.8253863453865051, 0.8264430165290833, 0.8327829837799072, 0.835160493850708, 0.8491612672805786, 0.8494254350662231, 0.852331280708313, 0.8549728989601135, 0.857218325138092, 0.8584070801734924, 0.8679170608520508, 0.8679170608520508, 0.8659358024597168, 0.8790120482444763], "val_loss": [1.8123653956821986, 0.9882688862936837, 0.7130587611879621, 0.6632274900163923, 0.5845557621547154, 0.5627216100692749, 0.5487192869186401, 0.5088929448808942, 0.49711620807647705, 0.4737143686839512, 0.4538526364735195, 0.44379866123199463, 0.4277265412466867, 0.41977453231811523, 0.40689983538218905, 0.39596822432109285, 0.38905597584588186, 0.38726653371538433, 0.37782751662390573, 0.36724822010312763, 0.36261002506528583, 0.3612897651536124, 0.3518826961517334, 0.34824472665786743, 0.34594534976141794, 0.33935244594301495, 0.3328684909003122, 0.3346507889883859, 0.3356286713055202, 0.3327242646898542, 0.3334148611341204], "val_accuracy": [0.4436666667461395, 0.6636666655540466, 0.715666651725769, 0.7276666760444641, 0.7396666407585144, 0.7463333606719971, 0.7556666731834412, 0.7683333158493042, 0.7766666412353516, 0.7860000133514404, 0.7976666688919067, 0.8003333210945129, 0.8113333582878113, 0.8169999718666077, 0.815666675567627, 0.8206666707992554, 0.82833331823349, 0.8346666693687439, 0.8316666483879089, 0.8453333377838135, 0.8413333296775818, 0.8489999771118164, 0.8543333411216736, 0.8543333411216736, 0.8546666502952576, 0.8600000143051147, 0.8576666712760925, 0.8579999804496765, 0.859333336353302, 0.8600000143051147, 0.859666645526886]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [6, 2, 3, 6, 2, 4, 5, 5, 3, 3, 3, 2, 9, 1, 3, 9, 5, 1, 7, 8, 2, 6, 2, 4, 2, 2, 6, 8, 0, 2, 6, 2, 2, 0, 8, 8, 2, 7, 0, 5, 7, 5, 9, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 2, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 2, 14, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7960000038146973, "mapping_values": [1, 4, 4, 2, 2, 1, 68, 68, 41, 27, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), tf.math.add(beta, grad))))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(beta, grad)))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))))))), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))), tf.math.add(beta, grad))), tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad)))), beta)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256216323323742, 1.8256864265254964, 1.2965488915178265, 0.9512634085327202, 0.8481314314937453, 0.7935289920297486, 0.7387915672548632, 0.7068601599726553, 0.6643960599051554, 0.648202307149325, 0.6061011053914045, 0.5845724358345775, 0.5541912549286155, 0.5333488024598997, 0.5107608506582227, 0.49591887870311674, 0.4846789865934019, 0.46879462144551515, 0.46331700165399925, 0.43973286940185163, 0.43240080909438655, 0.42056452728076743, 0.4063841453546137, 0.393240229332562, 0.3928071016436161, 0.3752454479475063, 0.3683295976909365, 0.3674226142805581, 0.3516249504772396, 0.34405754154872553, 0.33434003152237624, 0.32209001693900674, 0.3259144596703348, 0.3122938777264855, 0.3046973140413546, 0.3048280057079205, 0.2955906378114386, 0.2885354983257092, 0.28196017113674776, 0.27398900942575066, 0.27152100568552373, 0.2598019588648635, 0.2579722228287674, 0.2595099211250865, 0.24575123419780237, 0.24516811356757373], "accuracy": [0.19852067530155182, 0.43666622042655945, 0.5577862858772278, 0.6509047746658325, 0.6939638257026672, 0.7053229212760925, 0.7211728692054749, 0.739928662776947, 0.7503632307052612, 0.754589855670929, 0.7677981853485107, 0.7827235460281372, 0.7954035401344299, 0.8029322624206543, 0.809140145778656, 0.8177255392074585, 0.8207634687423706, 0.8309338092803955, 0.8330471515655518, 0.839519202709198, 0.8454629778862, 0.8487650156021118, 0.8536521196365356, 0.8553691506385803, 0.8544445633888245, 0.8642187118530273, 0.8667283058166504, 0.8642187118530273, 0.8754457831382751, 0.8737286925315857, 0.8784837126731873, 0.8812574148178101, 0.8778232932090759, 0.8860124349594116, 0.8887861371040344, 0.8923524022102356, 0.8928807377815247, 0.8956544995307922, 0.8968431949615479, 0.9034473896026611, 0.8972394466400146, 0.90423983335495, 0.9038436412811279, 0.9052965044975281, 0.9132214784622192, 0.9105798602104187], "val_loss": [1.809044701712472, 0.9699532304491315, 0.6843875135694232, 0.6844826596123832, 0.6181825910295758, 0.5622144596917289, 0.5499894448689052, 0.504284109388079, 0.48900394780295237, 0.46142401014055523, 0.443314790725708, 0.42759415081569124, 0.4211771488189697, 0.40784531831741333, 0.39663039786475046, 0.37947810547692434, 0.37552885498319355, 0.3656672409602574, 0.3596831389835903, 0.3552764654159546, 0.3486998847552708, 0.34150259835379465, 0.34128072432109285, 0.338438766343253, 0.3310957636151995, 0.3318389824458531, 0.3239340441567557, 0.32297418798719135, 0.3226707748004368, 0.3201036538396563, 0.3194877505302429, 0.3155395473752703, 0.31584315640585764, 0.3106026308877127, 0.31024201427187237, 0.3110194802284241, 0.30708034549440655, 0.30875350747789654, 0.3040516972541809, 0.30426338740757536, 0.30601318393434795, 0.30629817077091764, 0.31424496855054584, 0.3089531830378941, 0.3127665604863848, 0.3050611104284014], "val_accuracy": [0.45233333110809326, 0.6583333611488342, 0.7163333296775818, 0.7289999723434448, 0.7170000076293945, 0.7456666827201843, 0.7580000162124634, 0.768666684627533, 0.7723333239555359, 0.7910000085830688, 0.8023333549499512, 0.8109999895095825, 0.815666675567627, 0.8240000009536743, 0.82833331823349, 0.8403333425521851, 0.8356666564941406, 0.8493333458900452, 0.8513333201408386, 0.8576666712760925, 0.8543333411216736, 0.8583333492279053, 0.8629999756813049, 0.8603333234786987, 0.8679999709129333, 0.859000027179718, 0.8633333444595337, 0.8653333187103271, 0.8679999709129333, 0.8706666827201843, 0.871666669845581, 0.8733333349227905, 0.875, 0.8769999742507935, 0.8786666393280029, 0.8726666569709778, 0.8806666731834412, 0.8809999823570251, 0.8790000081062317, 0.8823333382606506, 0.8840000033378601, 0.8836666941642761, 0.8796666860580444, 0.8813333511352539, 0.8806666731834412, 0.8813333511352539]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 2, 3, 2, 2, 6, 2, 8, 3, 2, 3, 2, 6, 1, 3, 8, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 5, 3, 0, 5], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7948571443557739, "mapping_values": [1, 4, 4, 2, 2, 1, 61, 61, 35, 26, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(alpha, tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(grad)))))), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, beta))))), alpha)), tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(alpha)))))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256216291832713, 1.8256844631385778, 1.2965314649020865, 0.9512153949168821, 0.8483961171651041, 0.7939697339739137, 0.7387438127157191, 0.7076767919290619, 0.6658206102697211, 0.6487234756852406, 0.6061827896246269, 0.5845068643090275, 0.5544753531423369, 0.5335608344619079, 0.5118021855123165, 0.4957296799525388, 0.48447755915991714, 0.4676203697254598, 0.46215889289662226, 0.43795490659317715, 0.43351667624234114, 0.4211857398235566, 0.4082495443667592, 0.3951850150436411, 0.3929425267700222, 0.37477719416912475, 0.36611201755752687, 0.3674778683531034, 0.35299956735177773, 0.3455431540534166, 0.334370111855439, 0.32411770187018174, 0.3231788466099845, 0.31508991382440416, 0.30872885513031695, 0.30424087614966516, 0.29300953400779034, 0.28795105403503485, 0.28333171209749247, 0.2759235067815356, 0.27331064582036363, 0.26171996010182763, 0.258362110178185, 0.2592269923740201, 0.24709128569838645, 0.24543849063618717, 0.23471621426026332], "accuracy": [0.19852067530155182, 0.43666622042655945, 0.5576542019844055, 0.6505085229873657, 0.6942279934883118, 0.7059833407402039, 0.7202483415603638, 0.7404569983482361, 0.750231146812439, 0.7526086568832397, 0.7692511081695557, 0.7817989587783813, 0.7932901978492737, 0.8021397590637207, 0.8095363974571228, 0.8181217908859253, 0.8231409192085266, 0.8293488025665283, 0.8348963260650635, 0.8381983637809753, 0.8422929644584656, 0.850350022315979, 0.8537842035293579, 0.856689989566803, 0.8533879518508911, 0.8646149635314941, 0.8669924736022949, 0.8640866279602051, 0.8753136992454529, 0.8701624870300293, 0.8802007436752319, 0.8825782537460327, 0.8803328275680542, 0.885219931602478, 0.8889182209968567, 0.8920882344245911, 0.8926165699958801, 0.8931449055671692, 0.8934090733528137, 0.9025228023529053, 0.9010698795318604, 0.9029190540313721, 0.901862382888794, 0.9076740145683289, 0.9121648669242859, 0.9111081957817078, 0.91559898853302], "val_loss": [1.8090449060712541, 0.9699450560978481, 0.6844366107668195, 0.6844444104603359, 0.6183201926095145, 0.5624721901757377, 0.5504738092422485, 0.5054310389927456, 0.4899886165346418, 0.4615170955657959, 0.44386744499206543, 0.4293762190001352, 0.42142525741032194, 0.4078367352485657, 0.39612259183611187, 0.3790838973862784, 0.37551764079502653, 0.36490941047668457, 0.361456675188882, 0.3550894430705479, 0.34843852690287996, 0.34107641662870136, 0.34252227204186575, 0.3374162997518267, 0.33175248759133474, 0.3309675029345921, 0.3244078925677708, 0.3234738792691912, 0.32104818310056416, 0.31798956223896574, 0.31743989671979633, 0.3132922053337097, 0.312926709651947, 0.30973747798374723, 0.3070615359715053, 0.3085332087108067, 0.3103742684636797, 0.3111596703529358, 0.30440116780144827, 0.3028169104031154, 0.3045598013060434, 0.3045355592455183, 0.3123879262379238, 0.3083078009741647, 0.3122625861849104, 0.3033138854163034, 0.3146447624479021], "val_accuracy": [0.45233333110809326, 0.6583333611488342, 0.7160000205039978, 0.7279999852180481, 0.7183333039283752, 0.7453333139419556, 0.7570000290870667, 0.7683333158493042, 0.7743333578109741, 0.7896666526794434, 0.8019999861717224, 0.8083333373069763, 0.8149999976158142, 0.8256666660308838, 0.8303333520889282, 0.8393333554267883, 0.8339999914169312, 0.8496666550636292, 0.8483333587646484, 0.856333315372467, 0.8519999980926514, 0.856333315372467, 0.8579999804496765, 0.8600000143051147, 0.8633333444595337, 0.8586666584014893, 0.8659999966621399, 0.8640000224113464, 0.8679999709129333, 0.871666669845581, 0.8733333349227905, 0.875, 0.875333309173584, 0.8759999871253967, 0.8773333430290222, 0.871999979019165, 0.875333309173584, 0.878000020980835, 0.8836666941642761, 0.8826666474342346, 0.8813333511352539, 0.8840000033378601, 0.8809999823570251, 0.8790000081062317, 0.8786666393280029, 0.8803333044052124, 0.8776666522026062]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 0, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7865714430809021, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256216260341684, 1.825682769566794, 1.2965297228026273, 0.9512359537563115, 0.8483353882591093, 0.7940878627511567, 0.7389028821213843, 0.7068424896793343, 0.6649370638292227, 0.6481708272604689, 0.6057864542193874, 0.5843819829262227, 0.5527537779218532, 0.5329441864571441, 0.5096623282296515, 0.4960233640866021, 0.4848217746805537, 0.4676949378718569, 0.4640637711684434, 0.4395404229854092, 0.4327221003348376, 0.41862331330579394, 0.4069923447296683, 0.39203037814598957, 0.39190838314822135, 0.3756861276063527, 0.36762390476349494, 0.3669073296701746, 0.3525142407239373, 0.34499641813622206, 0.33594489844326236, 0.3247342047288575, 0.32579818012109446, 0.3147068859138635, 0.3080285555296696, 0.3056719223340709, 0.2960212802835003, 0.2890965875034965, 0.28381852969171, 0.27537115943068136, 0.2734170648652045, 0.26074285382655127, 0.257235948069693, 0.2593090046177986, 0.24781390320174587], "accuracy": [0.19852067530155182, 0.43666622042655945, 0.5576542019844055, 0.650640606880188, 0.693831741809845, 0.7049266695976257, 0.7205125093460083, 0.7404569983482361, 0.7493065595626831, 0.7512878179550171, 0.7700436115264893, 0.7833839654922485, 0.7961959838867188, 0.8031964302062988, 0.8084797263145447, 0.8190463781356812, 0.8215559124946594, 0.8325188159942627, 0.8367455005645752, 0.8381983637809753, 0.8428213000297546, 0.8486329317092896, 0.8531237840652466, 0.8532558679580688, 0.8524633646011353, 0.8640866279602051, 0.8672566413879395, 0.8665962219238281, 0.874389111995697, 0.8701624870300293, 0.8779553771018982, 0.8815215826034546, 0.8792761564254761, 0.8840311765670776, 0.886672854423523, 0.8910315632820129, 0.8936732411384583, 0.8931449055671692, 0.8951261639595032, 0.9027869701385498, 0.9000132083892822, 0.9029190540313721, 0.9006736278533936, 0.906749427318573, 0.9091269373893738], "val_loss": [1.809044701712472, 0.9699405602046421, 0.68441413130079, 0.6845021077564785, 0.6180822849273682, 0.5624548537390572, 0.5506198917116437, 0.5048118659428188, 0.489639367376055, 0.4608495235443115, 0.44324447427477154, 0.42791288239615305, 0.4207189083099365, 0.4075760671070644, 0.3949050647871835, 0.3789204955101013, 0.37510410376957487, 0.3649570345878601, 0.35996657609939575, 0.3554054839270456, 0.3487453375543867, 0.3430401938302176, 0.3420987469809396, 0.33996341058186125, 0.33224655049187796, 0.3336209569658552, 0.326025698866163, 0.3227747082710266, 0.32154962846211027, 0.31833334480013165, 0.3201338904244559, 0.315722576209477, 0.3134007624217442, 0.31100417034966604, 0.3082265002386911, 0.3099055971418108, 0.3077982749257769, 0.31415934222085135, 0.30474869694028583, 0.3021907721246992, 0.30168172291346956, 0.30280556849070955, 0.31169986724853516, 0.307052024773189, 0.30925783940723967], "val_accuracy": [0.45233333110809326, 0.6583333611488342, 0.7163333296775818, 0.7279999852180481, 0.7176666855812073, 0.7450000047683716, 0.7586666941642761, 0.7673333287239075, 0.7746666669845581, 0.7916666865348816, 0.8026666641235352, 0.8086666464805603, 0.8169999718666077, 0.8240000009536743, 0.8293333053588867, 0.8383333086967468, 0.8343333601951599, 0.8493333458900452, 0.8533333539962769, 0.8566666841506958, 0.8560000061988831, 0.8539999723434448, 0.8586666584014893, 0.8569999933242798, 0.8646666407585144, 0.8573333621025085, 0.8673333525657654, 0.8686666488647461, 0.8703333139419556, 0.871999979019165, 0.8709999918937683, 0.8743333220481873, 0.8730000257492065, 0.8759999871253967, 0.8790000081062317, 0.8726666569709778, 0.8766666650772095, 0.8790000081062317, 0.8813333511352539, 0.8859999775886536, 0.8830000162124634, 0.8830000162124634, 0.8833333253860474, 0.8843333125114441, 0.8820000290870667]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [74, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 2, 8, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 0, 1, 1, 3, 3, 0, 0, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.3019999861717224, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4891623296222476, 2.364744626740423, 2.307107461867095, 2.3035919429162837, 2.30325701513531, 2.3032097751595764], "accuracy": [0.1842557191848755, 0.1686699241399765, 0.09893012791872025, 0.09774138033390045, 0.10130762308835983, 0.09470347315073013], "val_loss": [1.963524409702846, 1.9797547885349818, 1.9744138036455428, 1.973724705832345, 1.9738093784877233, 1.973550251552037], "val_accuracy": [0.3336666524410248, 0.10166666656732559, 0.09833333641290665, 0.09833333641290665, 0.09966666996479034, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [6, 1, 3, 6, 2, 4, 5, 5, 3, 3, 3, 0, 9, 1, 3, 9, 5, 1, 7, 8, 3, 6, 2, 4, 3, 2, 6, 8, 0, 2, 6, 0, 2, 0, 8, 8, 2, 7, 0, 5, 7, 5, 9, 6], [3, 3, 3, 1, 1, 1, 1, 3, 0, 3, 2, 1, 0, 0, 3, 2, 3, 1, 1, 2, 4, 2, 4, 2, 3, 2, 1], [21, 74, 30, 28, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 26, 26, 16, 10, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.multiply(alpha, alpha))), tf.math.negative(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))))), grad)), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 2, 2, 2, 6, 1, 3, 3, 3, 3, 2, 3, 1, 3, 6, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 2, 2, 3, 0, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 3, 0, 2, 0, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 5], [21, 2, 78, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 37, 37, 19, 18, 3, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(grad, alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, beta), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), alpha), grad))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15651829540729523, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 6, 2, 6, 2, 3, 0, 3, 3, 4, 9, 1, 3, 3, 0, 2, 7, 5, 2, 5, 2, 4, 9, 8, 9, 6, 2, 5, 3, 4, 2, 9, 8, 5, 2, 4, 2, 3, 2, 9], [3, 3, 3, 1, 1, 1, 3, 3, 2, 2, 3, 3, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 4], [21, 72, 78, 38, 37, 47, 4, 28, 91], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 35, 35, 20, 15, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, alpha), alpha), tf.math.add(beta, grad)))), tf.math.multiply(tf.math.negative(grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), beta)), grad))))))), grad))), tf.math.square(grad))), tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07832518965005875, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 4, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 90, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 29, 29, 17, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(grad, alpha), grad), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), beta))))), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15651829540729523, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 2, 2, 6, 5, 3, 3, 3, 1, 2, 9, 1, 0, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 0, 3, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 35, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 28, 28, 17, 11, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(grad, tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), grad), alpha)), tf.math.add(beta, grad))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), beta)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15651829540729523, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 3, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 3, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 4, 4, 2, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1670849323272705, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 6, 2, 6, 5, 3, 0, 3, 3, 4, 6, 1, 3, 3, 0, 2, 7, 5, 2, 5, 2, 4, 9, 8, 9, 6, 2, 5, 3, 4, 2, 9, 8, 5, 2, 4, 2, 3, 2, 9], [0, 2, 1, 1, 3, 3, 0, 0, 3, 3, 0, 3, 3, 2, 3, 2, 0, 2, 1, 2, 3, 1, 0, 3, 1, 0, 2], [72, 72, 78, 38, 37, 47, 4, 28, 91], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 59, 59, 37, 22, 8, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(beta, alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), grad)))), grad)), tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.square(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3020366637021197, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 2, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 4, 6, 5, 3, 2, 3, 3, 2, 9, 1, 3, 9, 5, 9, 7, 8, 2, 6, 2, 8, 2, 2, 2, 6, 0, 5, 3, 2, 2, 9, 8, 8, 2, 6], [0, 3, 3, 3, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 2, 2, 3, 3, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96, 37], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.3025225319520373, 2.3017383548861026, 2.3038268093388266, 2.302559245295607, 2.3028379418452842, 2.3033648101235773], "accuracy": [0.08994849026203156, 0.09126931428909302, 0.08453308790922165, 0.09034473448991776, 0.08915598690509796, 0.0886276587843895], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [21, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 6, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 2, 3, 6, 9, 5, 7, 8, 2, 6, 8, 2, 2, 2, 9, 6, 0, 2, 3, 9, 2, 0, 0, 2, 2, 7, 0, 6, 2, 2, 1, 7], [3, 3, 3, 1, 2, 1, 2, 3, 3, 1, 3, 3, 3, 3, 3, 2, 3, 3, 1, 3, 4, 2, 3, 4, 2, 4, 3, 0, 2, 3, 3], [21, 2, 79, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 64, 64, 40, 24, 4, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), beta)), tf.math.add(beta, grad))))))), grad), tf.math.add(beta, tf.math.sqrt(alpha))), tf.math.add(beta, grad))))), grad))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))), tf.math.add(beta, tf.math.negative(tf.math.negative(alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, beta)))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3025225679147923, 2.301738998121857, 2.303829679305228, 2.302567926931375, 2.3028536999246088, 2.303394013455106], "accuracy": [0.08994849026203156, 0.09126931428909302, 0.08453308790922165, 0.09060890227556229, 0.08902391046285629, 0.08836349099874496], "val_loss": [1.9710071427481515, 1.9710080964224679, 1.9710114342825753, 1.9710172244480677, 1.971026829310826, 1.9710400445120675], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [94, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 6, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 0, 1, 1, 3, 0, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 14, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 13, 13, 8, 5, 2, 34, 34, 20, 14, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(alpha)))), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, beta))), alpha)), tf.math.sqrt(grad))))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3025225319520373, 2.3017383548861026, 2.3038268093388266, 2.302559245295607, 2.3028379418452842, 2.3033648101235773], "accuracy": [0.08994849026203156, 0.09126931428909302, 0.08453308790922165, 0.09034473448991776, 0.08915598690509796, 0.0886276587843895], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [24, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 2, 3, 6, 1, 3, 7, 8, 4, 6, 2, 4, 2, 2, 9, 6, 0, 1, 3, 9, 2, 0, 0, 8, 2, 7, 0, 4, 2, 2, 1, 7], [3, 3, 3, 1, 1, 1, 2, 3, 3, 1, 3, 3, 3, 3, 3, 2, 3, 1, 1, 3, 4, 2, 0, 4, 2, 4, 3, 0, 2, 3, 3], [45, 2, 78, 38, 37, 47, 96, 55], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 59, 59, 35, 24, 4, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), beta)), grad)))), grad))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(grad, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, grad))))), tf.math.negative(alpha))))))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(alpha, grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), beta), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3025225814244434, 2.3017383863771315, 2.3038268723208843, 2.302559245295607, 2.3028380228087193, 2.3033649675787213], "accuracy": [0.08994849026203156, 0.09126931428909302, 0.08453308790922165, 0.09034473448991776, 0.08915598690509796, 0.0886276587843895], "val_loss": [1.9710068702697754, 1.9710068021501814, 1.9710070065089635, 1.9710070065089635, 1.9710070065089635, 1.9710070065089635], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 0, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 2, 3, 0, 2, 3, 3, 3, 0, 3, 2, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [5, 2, 74, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 35, 35, 20, 15, 4, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha)), tf.math.negative(beta)), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, grad))))), grad)), tf.math.sqrt(grad))))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.30252389016011, 2.3017569098726414, 2.3039100613844092, 2.302811674044479, 2.3032879784059657, 2.3041774458841737], "accuracy": [0.08994849026203156, 0.09140139818191528, 0.08453308790922165, 0.09047681838274002, 0.08809932321310043, 0.08651433140039444], "val_loss": [1.971013137272426, 1.971048082624163, 1.9711366380964006, 1.9713070052010673, 1.9715632711138045, 1.9719038690839494], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.036666665226221085, 0.03566666692495346, 0.03466666489839554, 0.032999999821186066]}}]