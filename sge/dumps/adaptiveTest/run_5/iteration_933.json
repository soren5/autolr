[{"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 3, 0, 2, 6, 5, 2, 8, 9, 8, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 2, 0, 3, 2, 3, 0, 0, 3, 3, 0, 4, 5, 1, 3, 1, 1, 2, 5], [22, 86, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7868571281433105, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 10, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(beta)), tf.math.add(beta, grad))), tf.math.add(beta, beta)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.288668256252512, 2.2565060428671786, 2.2169599962618687, 2.1564592032809817, 2.0786062889819634, 1.96083831086434, 1.813339480587268, 1.6579158261247111, 1.5227530771762372, 1.4043693294803528, 1.3110690311181972, 1.2255485893287805, 1.17549940596923, 1.1272226583058602, 1.0761551475323359, 1.043201340896547, 1.0114600734310129, 0.9934921342746189, 0.9691771861663222, 0.9376368685295207, 0.9303996721278911, 0.8978993541938345, 0.8896393784914884, 0.8769083377345364, 0.8663724788175897, 0.8582367065906713, 0.8444989523977698, 0.8366172376750971, 0.824834976379252, 0.815423960187227, 0.8106950439356259, 0.8175756566402635, 0.7955505751647087, 0.7784899496493669, 0.7819631297622044, 0.7781252453371581, 0.7702997843697401, 0.7600375453966988, 0.7590107801032655, 0.7483533536123483, 0.7521836009984161, 0.7450825360551596, 0.7389545776604378, 0.7308298108946488, 0.7336603668245893, 0.7229592116706328, 0.7268648522168796, 0.7110481191745854, 0.7105295628667461, 0.7059687476242538, 0.7051071706480747, 0.7069231397707889, 0.6987983942220807, 0.6934291941221159, 0.698406031606944, 0.6843758004216501, 0.6862841377231849, 0.6874417125777231, 0.6768481054121492, 0.6837818872234243, 0.6742437427164526, 0.6701361031391208, 0.6758366053555667, 0.6759153387691713, 0.6677179324345078, 0.662527400008786, 0.6713535562246199, 0.6561592434769246, 0.6573211206594368, 0.6559584915141986, 0.6455723920581427, 0.6397487169574233], "accuracy": [0.12349755316972733, 0.21040813624858856, 0.284110426902771, 0.35147273540496826, 0.37287017703056335, 0.42689210176467896, 0.4632149040699005, 0.4823669195175171, 0.5086514353752136, 0.528992235660553, 0.5577862858772278, 0.5802403688430786, 0.5926561951637268, 0.6009774208068848, 0.6304318904876709, 0.6283186078071594, 0.6472064256668091, 0.6505085229873657, 0.6534143686294556, 0.6687359809875488, 0.6627922058105469, 0.6757363677024841, 0.6864351034164429, 0.6882842183113098, 0.6956809163093567, 0.6948884129524231, 0.6992471218109131, 0.6956809163093567, 0.7047945857048035, 0.7024171352386475, 0.7086250185966492, 0.7047945857048035, 0.7088891863822937, 0.7185312509536743, 0.7181349992752075, 0.7170783281326294, 0.7194558382034302, 0.7232862114906311, 0.7250033020973206, 0.7268524765968323, 0.7210407853126526, 0.72672039270401, 0.7305507659912109, 0.7260599732398987, 0.7294940948486328, 0.7343811988830566, 0.7392682433128357, 0.7409853339195251, 0.739400327205658, 0.739400327205658, 0.7445515990257263, 0.7407211661338806, 0.7425703406333923, 0.7442874312400818, 0.7417778372764587, 0.752212405204773, 0.7489103078842163, 0.7508915662765503, 0.7485140562057495, 0.7506273984909058, 0.7508915662765503, 0.7567031979560852, 0.7541936039924622, 0.7510236501693726, 0.7553823590278625, 0.7592127919197083, 0.7535332441329956, 0.7588165402412415, 0.7619865536689758, 0.7586844563484192, 0.7609298825263977, 0.7617223858833313], "val_loss": [1.9406142915998186, 1.9061425072806222, 1.8607208388192313, 1.79294034412929, 1.6971039090837752, 1.5668866974966866, 1.4099194322313582, 1.2510572842189245, 1.1167058944702148, 1.0088194097791399, 0.9285126073019845, 0.8645841734749931, 0.8195472615105766, 0.7803534269332886, 0.749278153691973, 0.724808965410505, 0.7030164684568133, 0.6867962905338832, 0.6717111383165631, 0.6598303318023682, 0.6500910350254604, 0.6375107594898769, 0.6261062451771328, 0.6177761895315987, 0.6104364565440586, 0.6031701735087803, 0.5985466241836548, 0.5894920315061297, 0.5844862971987043, 0.5792880398886544, 0.5758849382400513, 0.5692589453288487, 0.5651949984686715, 0.562084436416626, 0.5577214956283569, 0.5532360076904297, 0.5510838883263725, 0.5489716189248222, 0.5447746344975063, 0.5384096077510289, 0.537147079195295, 0.5365744318280902, 0.5323196138654437, 0.5272878919328962, 0.5257390056337629, 0.5225238289151873, 0.5204825571605137, 0.5183875901358468, 0.5157597575868879, 0.516994731766837, 0.5101814610617501, 0.509710431098938, 0.5070127589362008, 0.5069384063993182, 0.5036937338965279, 0.5009793894631522, 0.5001728704997471, 0.49710055759974886, 0.49750353608812603, 0.4970561606543405, 0.49136148180280415, 0.4909639699118478, 0.48852527141571045, 0.48705932072230745, 0.4858395372118269, 0.485196590423584, 0.48166498116084505, 0.4810234648840768, 0.479737537247794, 0.4768078327178955, 0.476866568837847, 0.4766487053462437], "val_accuracy": [0.29866665601730347, 0.39266666769981384, 0.4423333406448364, 0.48233333230018616, 0.5370000004768372, 0.5730000138282776, 0.5920000076293945, 0.609666645526886, 0.6386666893959045, 0.6613333225250244, 0.6706666946411133, 0.6936666369438171, 0.687666654586792, 0.7009999752044678, 0.7053333520889282, 0.7089999914169312, 0.7146666646003723, 0.7263333201408386, 0.7233333587646484, 0.7276666760444641, 0.7360000014305115, 0.7329999804496765, 0.7406666874885559, 0.7440000176429749, 0.746666669845581, 0.75, 0.7536666393280029, 0.7483333349227905, 0.7526666522026062, 0.7573333382606506, 0.7590000033378601, 0.7576666474342346, 0.7590000033378601, 0.7586666941642761, 0.7603333592414856, 0.7636666893959045, 0.7646666765213013, 0.7699999809265137, 0.7636666893959045, 0.7703333497047424, 0.7696666717529297, 0.765333354473114, 0.7720000147819519, 0.7716666460037231, 0.7703333497047424, 0.7746666669845581, 0.768666684627533, 0.7773333191871643, 0.7716666460037231, 0.7723333239555359, 0.777999997138977, 0.7789999842643738, 0.7756666541099548, 0.7763333320617676, 0.781000018119812, 0.7770000100135803, 0.7773333191871643, 0.7820000052452087, 0.778333306312561, 0.7823333144187927, 0.7833333611488342, 0.7850000262260437, 0.7896666526794434, 0.7870000004768372, 0.7816666960716248, 0.7879999876022339, 0.7946666479110718, 0.7913333177566528, 0.7916666865348816, 0.7943333387374878, 0.7860000133514404, 0.7943333387374878]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 2, 2, 6, 6, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 31, 33, 38, 8, 35], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7860000133514404, "mapping_values": [1, 4, 4, 2, 2, 1, 21, 21, 13, 8, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1719036050019813, 1.431422905789044, 1.0974652728762342, 0.8997285764498592, 0.8898225899511687, 0.7785704849324033, 0.7580924162838233, 0.7244844924756454, 0.7035304083012949, 0.6868008948304571, 0.6586425906285129, 0.662618329464846, 0.668306080892873, 0.6227226902181762, 0.6164734593204236, 0.6247125844819403, 0.6038861646077196, 0.5870452039056938], "accuracy": [0.2759212851524353, 0.5204068422317505, 0.6166952848434448, 0.6773213744163513, 0.6803592443466187, 0.7082287669181824, 0.7186633348464966, 0.7272487282752991, 0.7366266250610352, 0.7412495017051697, 0.7535332441329956, 0.7537974119186401, 0.7567031979560852, 0.7658169269561768, 0.7755910754203796, 0.7703077793121338, 0.7688548564910889, 0.7843085527420044], "val_loss": [1.4644065925053187, 0.8568993636540004, 0.6991388116564069, 0.6478412832532611, 0.6135571684156146, 0.5668714727674212, 0.55992933682033, 0.5600285870688302, 0.5435972894941058, 0.5183487789971488, 0.5087190355573382, 0.5309644426618304, 0.4922215257372175, 0.5082539319992065, 0.503927298954555, 0.47812490803854807, 0.4683994395392282, 0.47305076462881906], "val_accuracy": [0.574999988079071, 0.6653333306312561, 0.7160000205039978, 0.7206666469573975, 0.7183333039283752, 0.7453333139419556, 0.7419999837875366, 0.7506666779518127, 0.7476666569709778, 0.7506666779518127, 0.7536666393280029, 0.7633333206176758, 0.7929999828338623, 0.7676666378974915, 0.7680000066757202, 0.7900000214576721, 0.7833333611488342, 0.7846666574478149]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 1, 2, 8, 5, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 86, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.6725714206695557, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 11, 4, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9736393188614618, 1.4370234490952487, 1.300402008610127, NaN, NaN, NaN, NaN], "accuracy": [0.33443403244018555, 0.5756174921989441, 0.5654470920562744, 0.3531897962093353, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.1661154542650496, 0.815092921257019, 0.8394161973680768, NaN, NaN, NaN, NaN], "val_accuracy": [0.5490000247955322, 0.6863333582878113, 0.5753333568572998, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [11, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 2, 5, 1, 2, 8, 5, 9, 1, 2, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [21, 86, 25, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.4474285840988159, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 9, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3016991883598976, 2.3021220759063143, 2.3013556547735536, 2.2985306914141463, 2.300403365401103, 2.2979775825747883, 2.2960300073332682, 2.2959006339362773, 2.295054044957804, 2.2952682390629953, 2.293154871238615, 2.2927798602275877, 2.2921935578599313, 2.2910084479111155, 2.289395885539329, 2.2883978780580945, 2.2869981899394998, 2.288620006894832, 2.286596025473973, 2.2843714228332663, 2.284424019653437, 2.283947615307934, 2.2832561673552463, 2.28319676746514, 2.2817970574602806, 2.279691574832058, 2.2795122695117187, 2.2805681236195543, 2.2775870123716975, 2.2765259608270125, 2.2762033206250423, 2.2759419994394556, 2.273960194740754, 2.2727311584912018, 2.2725152152483066, 2.2717923406659652, 2.2693485431132014, 2.270269816782433, 2.271126542030277, 2.2682452083751903, 2.2672071737494246, 2.266660431860744, 2.2661905010315593, 2.264608012592284, 2.2629511003654237, 2.2639913572816015, 2.262894863308287, 2.261072644814524, 2.258289481198169, 2.2582004720886637, 2.2581516096006533, 2.257060230904094, 2.255118814615006, 2.2551801365915463, 2.2545486359690097, 2.252515413033381, 2.251870727306029, 2.249990243827347, 2.249214478141171, 2.2486667344283906, 2.248137091884933, 2.247023689559485, 2.246822810428112, 2.245022066611624, 2.244830769224095, 2.2439991536314903, 2.2422676479748733, 2.2398367038949005, 2.238339436288838, 2.2384811590817217, 2.2363971833775875, 2.235861842343521, 2.2348221552890006, 2.233478449968976, 2.2322310619130032, 2.2316340787645976, 2.2319768446941324, 2.231655334579222, 2.2287250735016233, 2.2268451071686166, 2.2252357219897085, 2.2239560512204637, 2.224115671246768, 2.2236526351264123, 2.220731760012932, 2.219120512706508, 2.2181470377129364, 2.2179116564120727, 2.2156171961829583, 2.2145984261310834, 2.215257660493308, 2.209627463250443, 2.211866426083705, 2.209793328735035, 2.2074527499887053, 2.205227653001829, 2.204860618070069, 2.202487820222346, 2.202309786194839, 2.1998946538863953], "accuracy": [0.09232597798109055, 0.09457138925790787, 0.09245806187391281, 0.09628847241401672, 0.0952318087220192, 0.10368511080741882, 0.10553427785634995, 0.1006472036242485, 0.10527011007070541, 0.10751552134752274, 0.11530841141939163, 0.11240258812904358, 0.11821424216032028, 0.11861048638820648, 0.1150442510843277, 0.11953506618738174, 0.1298375427722931, 0.12970545887947083, 0.13195087015628815, 0.13538502156734467, 0.13829085230827332, 0.13815876841545105, 0.13670584559440613, 0.1398758441209793, 0.14661207795143127, 0.15374454855918884, 0.15189538896083832, 0.14568749070167542, 0.15902787446975708, 0.1530841439962387, 0.1592920422554016, 0.1640470176935196, 0.17210407555103302, 0.17434948682785034, 0.16510368883609772, 0.17144367098808289, 0.17870822548866272, 0.1802932173013687, 0.17355699837207794, 0.18293488025665283, 0.18557654321193695, 0.18835029006004333, 0.18993528187274933, 0.18940694630146027, 0.19984149932861328, 0.19535067677497864, 0.190859854221344, 0.1966715157032013, 0.2145027071237564, 0.20631356537342072, 0.20737022161483765, 0.21278563141822815, 0.2090873122215271, 0.20433232188224792, 0.21476687490940094, 0.22005018591880798, 0.22018226981163025, 0.22744683921337128, 0.22612600028514862, 0.23299431800842285, 0.2359001487493515, 0.23484347760677338, 0.22956016659736633, 0.23840972781181335, 0.23563598096370697, 0.23814556002616882, 0.24144762754440308, 0.24514594674110413, 0.2550521790981293, 0.2467309534549713, 0.2533350884914398, 0.25016510486602783, 0.2538634240627289, 0.2608638107776642, 0.260071337223053, 0.2666754722595215, 0.25941091775894165, 0.26376965641975403, 0.26482629776000977, 0.26878878474235535, 0.2604675590991974, 0.2735437750816345, 0.27261921763420105, 0.27077004313468933, 0.2833179235458374, 0.27499669790267944, 0.28543123602867126, 0.2786950170993805, 0.28463876247406006, 0.2805441915988922, 0.28701624274253845, 0.29718664288520813, 0.2969224750995636, 0.2949412167072296, 0.2985074520111084, 0.2981112003326416, 0.30339452624320984, 0.30339452624320984, 0.30339452624320984, 0.3028661906719208], "val_loss": [1.970177377973284, 1.9693480219159807, 1.9685322216578893, 1.9677044323512487, 1.966885771070208, 1.9660694939749581, 1.9652496065412248, 1.9644323076520647, 1.9636232512337821, 1.9628137860979353, 1.9619945798601424, 1.9611823218209403, 1.9603794642857142, 1.959571361541748, 1.9587672778538294, 1.9579621723720007, 1.9571479388645716, 1.9563418115888322, 1.955538068498884, 1.9547296932765417, 1.9539209774562292, 1.9531070845467704, 1.9522990499223982, 1.9514946256365096, 1.950679165976388, 1.949871267591204, 1.949064118521554, 1.9482489313398088, 1.9474304744175501, 1.9466116768973214, 1.9457893371582031, 1.9449660437447684, 1.9441425459725517, 1.943305219922747, 1.942467280796596, 1.9416327476501465, 1.940791198185512, 1.9399467876979284, 1.939112322671073, 1.9382566724504744, 1.9374046325683594, 1.9365442139761788, 1.93568788255964, 1.934826374053955, 1.9339592116219657, 1.9330809456961495, 1.932201726096017, 1.9313203266688757, 1.9304281643458776, 1.9295210157121931, 1.928624085017613, 1.9277213641575404, 1.9267969812665666, 1.9258779798235213, 1.9249578884669714, 1.9240213802882604, 1.9230826922825404, 1.922131061553955, 1.9211722101484026, 1.9202109745570592, 1.9192500795636858, 1.9182757650102888, 1.917306695665632, 1.916325637272426, 1.9153238705226354, 1.9143248966761999, 1.9133176122392928, 1.9123047419956751, 1.9112763404846191, 1.9102396283830916, 1.909184455871582, 1.9081367765154158, 1.907064642224993, 1.905982494354248, 1.9049025944301061, 1.9038111822945731, 1.9027152742658342, 1.9016152109418596, 1.9005039078848702, 1.899369512285505, 1.8982337542942591, 1.8970784459795271, 1.895921298435756, 1.8947622435433524, 1.8935812541416712, 1.8923915454319544, 1.8911918912615096, 1.8899876049586706, 1.8887619972229004, 1.8875236511230469, 1.886282239641462, 1.8850089481898717, 1.8837512561253138, 1.8824649538312639, 1.8811605317252023, 1.8798435756138392, 1.878509862082345, 1.8771724019731795, 1.8758162089756556, 1.8744335855756487], "val_accuracy": [0.04266666620969772, 0.04866666719317436, 0.05366666615009308, 0.05833333358168602, 0.06333333253860474, 0.06966666877269745, 0.07400000095367432, 0.08166666328907013, 0.08966666460037231, 0.09399999678134918, 0.10199999809265137, 0.10633333027362823, 0.11433333158493042, 0.12066666781902313, 0.12700000405311584, 0.13566666841506958, 0.1433333307504654, 0.156333327293396, 0.16599999368190765, 0.17399999499320984, 0.18199999630451202, 0.19200000166893005, 0.20133332908153534, 0.20900000631809235, 0.21433334052562714, 0.21899999678134918, 0.2266666740179062, 0.23733332753181458, 0.24266666173934937, 0.24833333492279053, 0.25333333015441895, 0.2603333294391632, 0.26866665482521057, 0.2750000059604645, 0.27933332324028015, 0.2876666784286499, 0.2933333218097687, 0.29899999499320984, 0.3059999942779541, 0.3109999895095825, 0.3176666796207428, 0.32066667079925537, 0.32466667890548706, 0.3283333480358124, 0.33399999141693115, 0.33533334732055664, 0.3370000123977661, 0.34166666865348816, 0.34599998593330383, 0.34833332896232605, 0.3513333201408386, 0.35466668009757996, 0.35733333230018616, 0.3606666624546051, 0.3646666705608368, 0.3646666705608368, 0.3656666576862335, 0.367000013589859, 0.3686666786670685, 0.37033334374427795, 0.37299999594688416, 0.37433332204818726, 0.37566667795181274, 0.3790000081062317, 0.38066667318344116, 0.38199999928474426, 0.38366666436195374, 0.3853333294391632, 0.38733333349227905, 0.3880000114440918, 0.38966667652130127, 0.3919999897480011, 0.39399999380111694, 0.3959999978542328, 0.39766666293144226, 0.39899998903274536, 0.4009999930858612, 0.4023333191871643, 0.4046666622161865, 0.40700000524520874, 0.4073333442211151, 0.40799999237060547, 0.40933331847190857, 0.4113333225250244, 0.41366666555404663, 0.41499999165534973, 0.4169999957084656, 0.41999998688697815, 0.42100000381469727, 0.42233332991600037, 0.4233333468437195, 0.4246666729450226, 0.42633333802223206, 0.4269999861717224, 0.42899999022483826, 0.43033334612846375, 0.4333333373069763, 0.4350000023841858, 0.4363333284854889, 0.43833333253860474]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [91, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 9, 2, 6, 6, 0, 3, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 12, 59, 38, 8, 53], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.22342857718467712, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 11, 5, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2118962142036387, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.20235107839107513, 0.14198917150497437, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.6292219502585275, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.22699999809265137, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [2, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 8, 1, 3, 3, 2, 8, 9, 1, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 3, 0, 2, 3, 3, 1, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2, 5], [22, 86, 59, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.1362857073545456, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 11, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.subtract(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), beta))), tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302005338599543, 2.3031740256619253, 2.303133040465825, 2.3010686119045833, 2.303664126652516, 2.301963094864476, 2.3007619330880194, 2.301359358748362, 2.3011936997819364, 2.302154485496941, 2.3008229590173976, 2.301173124834846, 2.301198862295235, 2.300807398953663, 2.2997826162881667, 2.2995670211785946, 2.2990242396331877, 2.3013182884635013, 2.299919378960594, 2.2984029061097386, 2.2991986094905466, 2.299565555617605, 2.2994670095759897, 2.3000566807279434, 2.2996063913887737, 2.297999943031721, 2.2985516221153897, 2.3004791728100207, 2.298252793539942, 2.297745562437393, 2.298243380462048, 2.298719043634697, 2.2972366598540166, 2.2972254795625684, 2.2975572355356295, 2.297421594762594, 2.295901470936332, 2.2975469346626514, 2.298869295489314, 2.297089720824139, 2.2966033670455395, 2.2968643691640223, 2.29701877594498, 2.296284154327145, 2.2953563288863874, 2.2974219771896482, 2.2969996693300896, 2.295975177106352, 2.2940784887536294, 2.294827764343828, 2.2954418155668654, 2.295006552990858, 2.294379260420028, 2.294981591784329, 2.2950949708248065, 2.294092933090214, 2.294375900138308, 2.2933914719665873, 2.293289014802176, 2.2935608166115333, 2.293703671790322, 2.2937759123993526, 2.293986577966257, 2.293500625036963, 2.2943950279781515, 2.293984344528021, 2.2932781294871947, 2.2915809858649903, 2.291459090296209, 2.292488869832192, 2.291519639671849, 2.2915411754417194, 2.2921529887862855, 2.2918554314091977, 2.291218505543709, 2.2915959088022304, 2.29251361091643, 2.293171010863244, 2.291425150965876, 2.291385001447207, 2.2904063987064323, 2.290482291613493, 2.2914990093950203, 2.2916799809056942, 2.290663493512534, 2.2899131406457305, 2.2895588176975696, 2.2901421210485884, 2.2895914289252537, 2.2899381845162106, 2.2911530611395694, 2.2877544148754625, 2.289496892069498, 2.2896170425314266, 2.2890579759043286, 2.2877998125630286, 2.2886031584071445, 2.2873398888899965, 2.2886356470402536, 2.288217498452798], "accuracy": [0.09179764986038208, 0.09153348207473755, 0.08968432247638702, 0.08915598690509796, 0.0878351628780365, 0.09325055778026581, 0.09245806187391281, 0.08796724677085876, 0.09153348207473755, 0.08836349099874496, 0.09906221181154251, 0.09536388516426086, 0.09734513610601425, 0.0936468094587326, 0.09417514503002167, 0.09232597798109055, 0.09945846349000931, 0.0952318087220192, 0.09760929644107819, 0.09549596905708313, 0.09919429570436478, 0.10051512718200684, 0.09681680053472519, 0.0948355570435524, 0.09589222073554993, 0.10474177449941635, 0.1006472036242485, 0.09338264167308807, 0.10487385839223862, 0.09681680053472519, 0.1022322028875351, 0.10606260597705841, 0.10408136248588562, 0.10527011007070541, 0.09945846349000931, 0.10368511080741882, 0.10593052208423615, 0.10632677376270294, 0.09840179979801178, 0.10857218503952026, 0.10579843819141388, 0.10302469879388809, 0.10830801725387573, 0.10487385839223862, 0.11491216719150543, 0.10342095047235489, 0.10500594228506088, 0.10408136248588562, 0.1150442510843277, 0.109232597053051, 0.10936468094587326, 0.1080438494682312, 0.10302469879388809, 0.10566636174917221, 0.10487385839223862, 0.11055342853069305, 0.11161009222269058, 0.11121384054422379, 0.1142517477273941, 0.11610091477632523, 0.11715757846832275, 0.11147800832986832, 0.11042134463787079, 0.1146479994058609, 0.11319508403539658, 0.11306300014257431, 0.11240258812904358, 0.11927089840173721, 0.11979923397302628, 0.11028926074504852, 0.11332716792821884, 0.11808215826749802, 0.11768590658903122, 0.11649715900421143, 0.11596883088350296, 0.11927089840173721, 0.11345925182104111, 0.11649715900421143, 0.11900673806667328, 0.12059172987937927, 0.10976093262434006, 0.120459645986557, 0.12191256135702133, 0.11927089840173721, 0.1290450394153595, 0.12468630075454712, 0.1208558976650238, 0.12798838317394257, 0.12468630075454712, 0.12230881303548813, 0.11847840249538422, 0.12679962813854218, 0.13089419901371002, 0.12402588874101639, 0.11979923397302628, 0.12878087162971497, 0.12481838464736938, 0.13129045069217682, 0.12402588874101639, 0.12508255243301392], "val_loss": [1.970872129712786, 1.9707371166774206, 1.970604079110282, 1.970468521118164, 1.970334461757115, 1.97020047051566, 1.9700656618390764, 1.969930921282087, 1.9697978837149483, 1.9696638243538993, 1.9695285388401575, 1.9693936620439803, 1.9692606244768416, 1.9691264288766044, 1.968994072505406, 1.9688606262207031, 1.9687253407069616, 1.9685914857046944, 1.968458652496338, 1.968325138092041, 1.9681923730032784, 1.968057496207101, 1.9679247311183385, 1.9677918297903878, 1.967658315386091, 1.9675255502973283, 1.967393262045724, 1.9672598838806152, 1.9671261651175362, 1.966994081224714, 1.9668609755379813, 1.9667279379708427, 1.9665963990347726, 1.9664623396737235, 1.9663284846714564, 1.966196128300258, 1.9660632269723075, 1.965930461883545, 1.9657988548278809, 1.9656654766627721, 1.9655338014875139, 1.9654017175946916, 1.96527099609375, 1.965139320918492, 1.965008054460798, 1.9648744038173132, 1.9647423880440849, 1.9646103722708566, 1.9644781521388464, 1.9643455232892717, 1.9642139843532018, 1.9640827178955078, 1.963949475969587, 1.9638174601963587, 1.9636859212602888, 1.9635538373674666, 1.9634222303118025, 1.96328946522304, 1.963158198765346, 1.9630269323076521, 1.9628967557634627, 1.9627655574253626, 1.962634835924421, 1.9625028201511927, 1.9623710087367467, 1.9622394016810827, 1.962108816419329, 1.9619793210710799, 1.9618470328194755, 1.9617159026009696, 1.96158538545881, 1.9614552770342146, 1.9613241468157088, 1.9611931528363908, 1.961062022617885, 1.9609309605189733, 1.9608002390180315, 1.9606687000819616, 1.9605376379830497, 1.9604051453726632, 1.9602738107953752, 1.960141931261335, 1.960010596684047, 1.9598799433026994, 1.959747586931501, 1.9596165248325892, 1.959484645298549, 1.9593548774719238, 1.959223747253418, 1.9590917314801897, 1.9589618274143763, 1.9588303565979004, 1.958700520651681, 1.958569117954799, 1.9584382602146693, 1.9583072662353516, 1.9581759997776575, 1.9580449376787459, 1.95791380746024, 1.9577810423714774], "val_accuracy": [0.03799999877810478, 0.03933333232998848, 0.04066666588187218, 0.041333332657814026, 0.04233333468437195, 0.04333333298563957, 0.04533333331346512, 0.04533333331346512, 0.04633333161473274, 0.046666666865348816, 0.04766666516661644, 0.04800000041723251, 0.04933333396911621, 0.05066666752099991, 0.05133333429694176, 0.052000001072883606, 0.05233333259820938, 0.052666667848825455, 0.05366666615009308, 0.05366666615009308, 0.054666668176651, 0.055666666477918625, 0.055666666477918625, 0.05700000002980232, 0.05833333358168602, 0.058666665107011795, 0.05999999865889549, 0.060333333909511566, 0.06133333221077919, 0.06233333423733711, 0.06333333253860474, 0.06366666406393051, 0.06433333456516266, 0.06666667014360428, 0.06733333319425583, 0.06800000369548798, 0.0689999982714653, 0.07000000029802322, 0.070333331823349, 0.07133333384990692, 0.07233333587646484, 0.07233333587646484, 0.07400000095367432, 0.07500000298023224, 0.07666666805744171, 0.07766667008399963, 0.07800000160932541, 0.08033332973718643, 0.08133333176374435, 0.08166666328907013, 0.0833333358168602, 0.0846666693687439, 0.08633333444595337, 0.08699999749660492, 0.08900000154972076, 0.08966666460037231, 0.09099999815225601, 0.09266666322946548, 0.09366666525602341, 0.09399999678134918, 0.09466666728258133, 0.09533333033323288, 0.09700000286102295, 0.09700000286102295, 0.09733333438634872, 0.0989999994635582, 0.10100000351667404, 0.10166666656732559, 0.10266666859388351, 0.10266666859388351, 0.10333333164453506, 0.10366666316986084, 0.10499999672174454, 0.10566666722297668, 0.10700000077486038, 0.10899999737739563, 0.11100000143051147, 0.1120000034570694, 0.11299999803304672, 0.11433333158493042, 0.11533333361148834, 0.11599999666213989, 0.11633333563804626, 0.11733333021402359, 0.11866666376590729, 0.11966666579246521, 0.12133333086967468, 0.12200000137090683, 0.12300000339746475, 0.12399999797344208, 0.12666666507720947, 0.12833333015441895, 0.12833333015441895, 0.13099999725818634, 0.1316666603088379, 0.13300000131130219, 0.13433332741260529, 0.13566666841506958, 0.13733333349227905, 0.13899999856948853]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 1, 2, 8, 5, 9, 2, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 5, 3, 3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 4, 5, 1, 2, 1, 1, 2, 5], [40, 55, 33, 67, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10599999874830246, "mapping_values": [1, 13, 13, 8, 5, 2, 7, 7, 3, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [Infinity, 2.964296866229635e+29, 4.2421595546706586e+26, 99585155433.89655, 1546876184387.367, 15.967759656521938], "accuracy": [0.07938185334205627, 0.10038304328918457, 0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.013491766793387, 2.084663527352469, 2.566671712057931, 5.951274190630231, 11.326819011143275, 17.164526803152903], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [1, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 1, 2, 3, 5, 2, 8, 5, 2, 2, 5, 6, 1, 3, 1, 8, 2, 7, 3, 0, 6, 2, 8, 2, 3, 9, 6, 0, 0, 2, 0, 2, 9, 8], [2, 3, 0, 3, 0, 3, 3, 3, 1, 3, 1, 2, 4, 4, 5, 2, 3, 1, 1, 2, 4, 0], [22, 86, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 56, 56, 35, 21, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad)))))), tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(alpha)))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(tf.math.add(beta, alpha), beta))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.sqrt(tf.math.add(beta, alpha)))))), alpha), tf.math.add(beta, beta)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 0, 1, 2, 8, 8, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 0, 3, 3, 3, 1, 3, 3, 3, 0, 4, 5, 1, 2, 1, 1, 2, 5], [22, 86, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 3, 14, 14, 9, 5, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 4, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 8, 2, 1, 5, 0, 8, 5, 1, 1, 4, 0, 1, 3, 1, 1, 2, 0, 1, 5, 6, 0, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 0, 3, 3, 3, 2, 3, 3, 2, 4, 3, 5, 2, 3, 1, 1, 2], [22, 31, 33, 38, 8, 35], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 21, 21, 13, 8, 3, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, grad))))), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad)))))), grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [37, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 9, 6, 2, 8, 5, 1, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 3, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 86, 33, 91, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 10, 10, 6, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09377889335155487, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 1, 1, 2, 3, 5, 2, 8, 5, 2, 2, 5, 6, 1, 3, 1, 8, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 0, 3, 3, 1, 3, 3, 0, 0, 3, 3, 2, 1, 4, 5, 2, 1, 1, 1, 2, 4, 3], [22, 86, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 30, 30, 17, 13, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(beta, tf.math.sqrt(alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07700435817241669, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 6, 9, 1, 2, 8, 5, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 10, 33, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [89, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 9, 4, 3, 3, 2, 1, 1, 0, 9, 6, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.sqrt(tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 1, 6, 9, 0, 2, 6, 6, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 3, 3, 0, 3, 3, 2, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 31, 33, 38, 8, 35], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 16, 10, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))))), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [126734.65976308829, 139267.6493796229, 137182.749797748, 136715.44961138722, 136264.99244134693, 136028.79574403976], "accuracy": [0.09470347315073013, 0.10276053100824356, 0.10421344637870789, 0.10408136248588562, 0.10157178342342377, 0.09826971590518951], "val_loss": [118789.8125, 116193.11160714286, 115608.47991071429, 115707.52455357143, 115145.9375, 114826.01785714286], "val_accuracy": [0.10166666656732559, 0.09966666996479034, 0.09966666996479034, 0.10066666454076767, 0.10066666454076767, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 3, 1, 2, 3, 5, 1, 8, 5, 1, 9, 0, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 24, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 18, 18, 10, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.subtract(grad, tf.math.sqrt(tf.math.square(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))))), tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [585046.7475592538, 18825266.450402852, 88654323.4066834, 250721834.56769252, 393174207.1741516, 465893327.3919351, 200196527.83805922], "accuracy": [0.10038304328918457, 0.09391097724437714, 0.08928807079792023, 0.10830801725387573, 0.10910051316022873, 0.09496764093637466, 0.10500594228506088], "val_loss": [2066429.2142857143, 20619648.0, 29115829.714285713, 2.620295592716762, 2.8845901489257812, 3.135338510785784, 3.393613202231271], "val_accuracy": [0.10100000351667404, 0.10433333367109299, 0.10433333367109299, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 4, 4, 8, 2, 8, 5, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 86, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 16, 16, 11, 5, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 1, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 3, 1, 2, 3, 5, 2, 8, 9, 1, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 0, 0, 3, 3, 3, 1, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2, 5], [22, 86, 33, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 15, 15, 9, 6, 3, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(grad, tf.math.square(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 1, 2, 8, 5, 4, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [31, 86, 33, 91, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302064566044775, 2.3033783185467853, 2.3034787623637607, 2.301562609909989, 2.304299771431462, 2.3027413082538484], "accuracy": [0.09179764986038208, 0.09113723784685135, 0.08836349099874496, 0.08809932321310043, 0.08532558381557465, 0.09153348207473755], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [34, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 1, 2, 3, 5, 2, 8, 5, 2, 2, 5, 6, 1, 1, 1, 8, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 2, 2, 1, 3, 3, 3, 0, 3, 3, 2, 3, 4, 5, 2, 1, 1, 1, 2, 4, 0], [22, 86, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 50, 50, 30, 20, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)))))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, grad), grad))))), tf.math.add(beta, grad))), tf.math.add(beta, beta))))), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.negative(tf.math.negative(beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302064566044775, 2.3033783185467853, 2.3034787623637607, 2.301562609909989, 2.304299771431462, 2.3027413082538484], "accuracy": [0.09179764986038208, 0.09113723784685135, 0.08836349099874496, 0.08809932321310043, 0.08532558381557465, 0.09153348207473755], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 1, 2, 3, 5, 2, 8, 5, 2, 2, 5, 6, 1, 3, 1, 8, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 2, 1, 3, 3, 3, 0, 3, 3, 2, 1, 4, 5, 2, 1, 1, 1, 2, 4, 0], [22, 86, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.029999999329447746, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3024337931300325, 2.305146508953118, 2.307266077266598, 2.306817637206604, 2.313231094811555, 2.314145716851209], "accuracy": [0.09034473448991776, 0.08796724677085876, 0.0804385170340538, 0.08149518072605133, 0.07555144280195236, 0.07991018146276474], "val_loss": [1.9719136101858956, 1.9732676914760046, 1.9748539243425642, 1.9765622956412179, 1.9789988654000419, 1.9814061437334334], "val_accuracy": [0.032999999821186066, 0.027000000700354576, 0.02033333294093609, 0.02133333310484886, 0.024000000208616257, 0.028333334252238274]}}]