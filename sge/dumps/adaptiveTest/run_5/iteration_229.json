[{"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7917143106460571, "mapping_values": [1, 29, 29, 20, 9, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(grad)))))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.204450653623108, 2.133176091041358, 1.8268805489390834, 1.4240823571928551, 1.534580480405258, 1.2722145637359286, 0.9995089580574685, 0.8882347447540562, 0.8035597871276036, 0.8291565529690159, 0.7383476857968356, 0.7333444802122755, 0.6755847102064325, 0.6585352273586325, 0.6610988742403618, 0.6706141109605743, 0.6283160439807945, 0.602288977219019, 0.5601808823032024, 0.564443790877988, 0.5480508617264578, 0.5445025643857085, 0.5523593462673964, 0.5689870616338194, 0.5487207436385235], "accuracy": [0.28358209133148193, 0.3179236650466919, 0.37022849917411804, 0.46387532353401184, 0.49848103523254395, 0.5266147255897522, 0.59661865234375, 0.6449610590934753, 0.685510516166687, 0.6900013089179993, 0.7087571024894714, 0.7164179086685181, 0.7411174178123474, 0.748249888420105, 0.7491744756698608, 0.741909921169281, 0.7613261342048645, 0.7640998363494873, 0.778761088848114, 0.7837802171707153, 0.7866860628128052, 0.7980451583862305, 0.7926297783851624, 0.7796856164932251, 0.7898560166358948], "val_loss": [1.9488364628383092, 1.7717321940830775, 1.1646454674857003, 1.1651503699166434, 1.0068143095288957, 0.680088826588222, 0.670934626034328, 0.6649373769760132, 0.7124395029885429, 0.5888282401221139, 0.6199917282376971, 0.5900524684361049, 0.5674809898648944, 0.5079373291560582, 0.5900441919054303, 0.5150778123310634, 0.4820136683327811, 0.4697996548243931, 0.4720314230237688, 0.443717428616115, 0.44383929456983295, 0.4827953577041626, 0.4772692918777466, 0.4946870803833008, 0.455669675554548], "val_accuracy": [0.18333333730697632, 0.2290000021457672, 0.4896666705608368, 0.5043333172798157, 0.621999979019165, 0.687666654586792, 0.6733333468437195, 0.6803333163261414, 0.7236666679382324, 0.7213333249092102, 0.7076666951179504, 0.718999981880188, 0.7413333058357239, 0.7596666812896729, 0.6953333616256714, 0.7663333415985107, 0.7913333177566528, 0.765999972820282, 0.7853333353996277, 0.8019999861717224, 0.8009999990463257, 0.7566666603088379, 0.7680000066757202, 0.7630000114440918, 0.7873333096504211]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 0, 1, 1, 2, 5, 8, 2, 4, 3, 4, 8, 2, 8, 8, 9, 4, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 2, 1, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.571142852306366, "mapping_values": [1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(alpha, alpha))), tf.math.subtract(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302440291807683, 2.2994339515850797, 2.296959824014759, 2.2964569282821454, 2.294961831195243, 2.292395930768256, 2.2904117182654917, 2.288021952012243, 2.2873804219693965, 2.2833371651470227, 2.2824087386684897, 2.2801535692921626, 2.2785220205382335, 2.275439464845961, 2.2752997571325193, 2.272272300883968, 2.270830729004257, 2.2679814073025764, 2.265663558875313, 2.2639987056187003, 2.261558534257904, 2.2593037691948954, 2.2575911693978603, 2.256566228804855, 2.2539128073769286, 2.2523022194926483, 2.250115125343989, 2.247887722772929, 2.2453797630047547, 2.2442106496168246, 2.241135483798318, 2.2392935776486924, 2.235927273962303, 2.232273066347742, 2.22957020252451, 2.2294620771008775, 2.224590286429469, 2.2230496580070747, 2.219748955644621, 2.2154842196454334, 2.2153672226951295, 2.2122089729616436, 2.2083909395049357, 2.2028958215815533, 2.2002379316396214, 2.199402677416093, 2.1950417194132164, 2.1935413265114905, 2.18898945940547, 2.1843878187444847, 2.1814515576496762, 2.17647849724608, 2.174998971685647, 2.171200027618237, 2.1632102637668216, 2.16240709619342, 2.155804403296488, 2.155501095689031, 2.1470023928191195, 2.1431498518709367, 2.1386335377270567, 2.133361537616172, 2.1286822732696917, 2.124203792479312, 2.1189655537114653, 2.1137197813762887, 2.1070504773326, 2.102979364018509, 2.099662328802473, 2.092042236784115, 2.0890940675142184, 2.0818816535051834, 2.0769421940608157, 2.0686285704228666, 2.0634331383552094, 2.0546236406967955, 2.053048534038092, 2.0432923438447954, 2.035750503002172, 2.0272893010034787, 2.0243025732676525, 2.016342242254384, 2.0097306151793792, 2.000997452609307, 1.9911412479319766, 1.986345555473391, 1.9763611529276843, 1.9711911737674799, 1.9592702331449756, 1.9532099446411446, 1.9408857959876553, 1.9337562635637404, 1.9301245097612676, 1.921314451562541, 1.9100999741459157, 1.9040964992212315, 1.8946457117177933, 1.8850197726236972, 1.8746472298744694, 1.8698705966997582], "accuracy": [0.09126931428909302, 0.09457138925790787, 0.10645885765552521, 0.10659094154834747, 0.10962884873151779, 0.11993131786584854, 0.11993131786584854, 0.12838461995124817, 0.1306300312280655, 0.13934750854969025, 0.14014001190662384, 0.14714039862155914, 0.15031039714813232, 0.15995244681835175, 0.16259410977363586, 0.17157575488090515, 0.17474573850631714, 0.17738740146160126, 0.18914277851581573, 0.19402985274791718, 0.19719983637332916, 0.20116232335567474, 0.20763438940048218, 0.21384228765964508, 0.2207106053829193, 0.22335226833820343, 0.2277110069990158, 0.2308809906244278, 0.22744683921337128, 0.2421080470085144, 0.24501386284828186, 0.24739135801792145, 0.25399550795555115, 0.2635054886341095, 0.26839256286621094, 0.2662792205810547, 0.26839256286621094, 0.27024170756340027, 0.28239333629608154, 0.29282790422439575, 0.29282790422439575, 0.2883370816707611, 0.2950733006000519, 0.302469938993454, 0.3059041202068329, 0.3074890971183777, 0.3117157518863678, 0.3136970102787018, 0.3156782388687134, 0.32360321283340454, 0.32584863901138306, 0.33126401901245117, 0.32862237095832825, 0.32941487431526184, 0.340509831905365, 0.34367984533309937, 0.34486857056617737, 0.33866068720817566, 0.3563597798347473, 0.3537181317806244, 0.3641526997089386, 0.351340651512146, 0.361378937959671, 0.3673226833343506, 0.363360196352005, 0.3719455897808075, 0.37564390897750854, 0.3751155734062195, 0.37683266401290894, 0.3835688829421997, 0.3745872378349304, 0.38449347019195557, 0.38541802763938904, 0.3897767663002014, 0.3870030343532562, 0.39941883087158203, 0.3913617730140686, 0.39849424362182617, 0.40047550201416016, 0.41262713074684143, 0.40641921758651733, 0.40866464376449585, 0.40641921758651733, 0.41209879517555237, 0.409721314907074, 0.4161933660507202, 0.4130233824253082, 0.41645753383636475, 0.4262316823005676, 0.4241183400154114, 0.4243825078010559, 0.4329679012298584, 0.42847707867622375, 0.4294016659259796, 0.43811914324760437, 0.4315149784088135, 0.43085458874702454, 0.44406285881996155, 0.4377228915691376, 0.43811914324760437], "val_loss": [1.9691668237958635, 1.9673152651105608, 1.9654725619724818, 1.9636642592293876, 1.9618562970842635, 1.9600558280944824, 1.9582714353288924, 1.9564620426722936, 1.9546585764203752, 1.952850409916469, 1.9510368619646346, 1.949211801801409, 1.9473726408822196, 1.9455320494515556, 1.9436917304992676, 1.9417991638183594, 1.9399299621582031, 1.9380104882376534, 1.9360903331211634, 1.9341575077601842, 1.9321861267089844, 1.9301932198660714, 1.9281766755240304, 1.9261400359017509, 1.9240757397242956, 1.921978541782924, 1.919846739087786, 1.9176998819623674, 1.9154821123395647, 1.9132275581359863, 1.91094970703125, 1.9086268969944544, 1.906273705618722, 1.9038275991167342, 1.9013423919677734, 1.898867470877511, 1.8962936401367188, 1.8936896324157715, 1.891019548688616, 1.88827269417899, 1.8854942321777344, 1.8826616150992257, 1.879769938332694, 1.8767638887677873, 1.8736918313162667, 1.870598452431815, 1.8674033709934779, 1.8641809054783411, 1.8608322143554688, 1.8574070930480957, 1.8538962772914342, 1.8502827371869768, 1.8466427666800362, 1.8428735733032227, 1.8389857155936105, 1.8350715637207031, 1.8310209683009557, 1.8269089290073939, 1.8226549965994698, 1.8183032444545202, 1.8138835089547294, 1.8093508992876326, 1.8046885217939104, 1.7999356814793177, 1.7950240543910436, 1.7900362014770508, 1.7849275044032507, 1.7797277995518275, 1.7744535037449427, 1.7690050942557198, 1.7635230336870467, 1.7578977857317244, 1.7521328926086426, 1.7462399346487862, 1.740210805620466, 1.7340025901794434, 1.7277629716055733, 1.7213384083339147, 1.7147385733468192, 1.7080243996211462, 1.7012932641165597, 1.6943671022142683, 1.6873448576245988, 1.6801860673086983, 1.6728112016405379, 1.6653854506356376, 1.657761607851301, 1.6500867434910365, 1.642223290034703, 1.6342976774488176, 1.6261302403041296, 1.617858648300171, 1.6096264975411552, 1.6011973449162074, 1.5926652976444788, 1.5840751443590437, 1.575357300894601, 1.5665215764726912, 1.5576025417872839, 1.548650094441005], "val_accuracy": [0.05000000074505806, 0.059333331882953644, 0.07199999690055847, 0.08866667002439499, 0.10266666859388351, 0.11633333563804626, 0.13300000131130219, 0.15533334016799927, 0.17533333599567413, 0.19233334064483643, 0.21133333444595337, 0.2266666740179062, 0.2409999966621399, 0.2549999952316284, 0.27033331990242004, 0.28566667437553406, 0.2980000078678131, 0.31333333253860474, 0.32199999690055847, 0.3310000002384186, 0.33799999952316284, 0.34466665983200073, 0.351666659116745, 0.3606666624546051, 0.36633333563804626, 0.37033334374427795, 0.37400001287460327, 0.37700000405311584, 0.3816666603088379, 0.3863333463668823, 0.3893333375453949, 0.39500001072883606, 0.39766666293144226, 0.4020000100135803, 0.4050000011920929, 0.4090000092983246, 0.4116666615009308, 0.4176666736602783, 0.4189999997615814, 0.4230000078678131, 0.4266666769981384, 0.4300000071525574, 0.4326666593551636, 0.43533334136009216, 0.4390000104904175, 0.4410000145435333, 0.4429999887943268, 0.4449999928474426, 0.44600000977516174, 0.4476666748523712, 0.45100000500679016, 0.4546666741371155, 0.45633333921432495, 0.4596666693687439, 0.4606666564941406, 0.46433332562446594, 0.4659999907016754, 0.4690000116825104, 0.4703333377838135, 0.4749999940395355, 0.47833332419395447, 0.48233333230018616, 0.48399999737739563, 0.48766666650772095, 0.49033331871032715, 0.4933333396911621, 0.49566665291786194, 0.49966666102409363, 0.5023333430290222, 0.5066666603088379, 0.5096666812896729, 0.512333333492279, 0.5173333287239075, 0.5193333625793457, 0.5210000276565552, 0.5243333578109741, 0.5273333191871643, 0.5273333191871643, 0.531333327293396, 0.5326666831970215, 0.534333348274231, 0.5363333225250244, 0.5386666655540466, 0.5400000214576721, 0.5406666398048401, 0.5446666479110718, 0.546999990940094, 0.5486666560173035, 0.5506666898727417, 0.5529999732971191, 0.5543333292007446, 0.5550000071525574, 0.5556666851043701, 0.5566666722297668, 0.5596666932106018, 0.5600000023841858, 0.562666654586792, 0.5643333196640015, 0.5666666626930237, 0.5690000057220459]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 3, 1, 1, 2, 5, 8, 2, 4, 3, 4, 8, 2, 8, 8, 9, 4, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [54, 80, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [3, 4, 4], [0, 7, 1, 5, 3, 4], [15], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.1022857129573822, "mapping_values": [1, 11, 11, 6, 5, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), grad), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303187954332913, 2.3019898414863746, 2.30140777119808, 2.3025047702245143, 2.3028077415077837, 2.302234954806272, 2.301920446784599, 2.301322306435358, 2.302340484046508, 2.3004989618669964, 2.3012572778387628, 2.300877494834685, 2.3013151893683745, 2.3002596541072053, 2.3013243152165943, 2.3010464466290466, 2.301176949735205, 2.300632654290079, 2.299663396228684, 2.3004619087982077, 2.299445909925377, 2.3000524328715763, 2.3003564150168705, 2.3010198978337915, 2.3004504131241057, 2.300701836521883, 2.301194807415893, 2.3004578223648546, 2.3008657656231137, 2.3015905653780098, 2.301613788594659, 2.3011912440485283, 2.3006851380574562, 2.3006388010239918, 2.3007809560942283, 2.3013722839577166, 2.3011284312551927, 2.300865351547576, 2.300946430176823, 2.3007472817294112, 2.301521134681989, 2.30135495586166, 2.301097134368578, 2.300768419673115, 2.300955460607226, 2.3016215196422314, 2.300898423331556, 2.3014281816045448, 2.301236233864289], "accuracy": [0.08981640636920929, 0.08875974267721176, 0.09536388516426086, 0.09232597798109055, 0.08928807079792023, 0.09536388516426086, 0.09192973375320435, 0.09549596905708313, 0.09325055778026581, 0.09906221181154251, 0.09008057415485382, 0.09602430462837219, 0.0956280529499054, 0.09893012791872025, 0.09457138925790787, 0.09272222965955734, 0.09642054885625839, 0.09509972482919693, 0.09708096832036972, 0.09972262382507324, 0.09959053993225098, 0.09879804402589798, 0.09787346422672272, 0.09470347315073013, 0.10870426893234253, 0.09813763201236725, 0.09087307006120682, 0.09721305221319199, 0.09536388516426086, 0.09972262382507324, 0.09747721254825592, 0.1010434553027153, 0.09549596905708313, 0.10117553919553757, 0.09959053993225098, 0.09998679161071777, 0.10091137140989304, 0.1014397069811821, 0.09694888442754745, 0.10170386731624603, 0.09192973375320435, 0.09972262382507324, 0.09998679161071777, 0.10394927859306335, 0.09945846349000931, 0.09932637959718704, 0.10011887550354004, 0.09813763201236725, 0.10553427785634995], "val_loss": [1.9709304400852747, 1.9708567346845354, 1.970785277230399, 1.9707224028451102, 1.9706658635820662, 1.970621040889195, 1.9705798285348075, 1.9705443382263184, 1.9705166816711426, 1.970493997846331, 1.9704752649579729, 1.9704670906066895, 1.9704676355634416, 1.9704719952174596, 1.9704830987112862, 1.9704950877598353, 1.9705156598772322, 1.9705403872898646, 1.9705698149544852, 1.9706033297947474, 1.9706440653119768, 1.9706940650939941, 1.9707491057259696, 1.9708137512207031, 1.9708810533796037, 1.9709502628871374, 1.971020017351423, 1.971090453011649, 1.9711663382393974, 1.9712471961975098, 1.9713260105678014, 1.9714018276759557, 1.9714775085449219, 1.9715511458260673, 1.9716273716517858, 1.9717035974775041, 1.9717769622802734, 1.9718499183654785, 1.9719198090689523, 1.9719903809683663, 1.972059726715088, 1.9721275057111467, 1.9721931729997908, 1.9722555024283273, 1.9723196710859026, 1.9723852702549525, 1.9724464416503906, 1.9725042751857214, 1.9725606100899833], "val_accuracy": [0.03933333232998848, 0.04233333468437195, 0.04466666653752327, 0.04466666653752327, 0.047333333641290665, 0.04766666516661644, 0.049666665494441986, 0.05233333259820938, 0.055666666477918625, 0.0573333315551281, 0.05966666713356972, 0.06133333221077919, 0.06300000101327896, 0.06400000303983688, 0.06700000166893005, 0.07000000029802322, 0.07199999690055847, 0.07433333247900009, 0.07733333110809326, 0.0793333351612091, 0.08100000023841858, 0.0820000022649765, 0.08233333379030228, 0.08399999886751175, 0.08433333039283752, 0.0860000029206276, 0.08766666799783707, 0.09266666322946548, 0.09566666930913925, 0.09666666388511658, 0.09799999743700027, 0.0989999994635582, 0.09833333641290665, 0.10000000149011612, 0.1003333330154419, 0.10066666454076767, 0.10133333504199982, 0.10166666656732559, 0.10133333504199982, 0.10100000351667404, 0.10133333504199982, 0.10166666656732559, 0.10266666859388351, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10433333367109299, 0.10266666859388351, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 3, 0, 1, 8, 2, 1, 1, 2, 5, 8, 2, 4, 3, 4, 8, 2, 8, 8, 9, 4, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 0, 2, 0, 2, 1, 2, 2, 1, 0, 1, 1, 1, 2, 1, 2, 1, 2, 1], [54, 80, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [3, 4, 4], [2, 7, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 16, 12, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, alpha)))))), tf.math.add(tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 2, 1, 1, 2, 5, 8, 2, 4, 3, 4, 8, 2, 8, 8, 9, 4, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [54, 80, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [3, 4, 4], [1, 7, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), grad)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [9, 2, 4, 0, 8, 2, 0, 1, 0, 8, 5, 6, 4, 1, 9, 8, 5, 8, 8, 0, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [50, 57, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 2, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [0, 0, 1, 5, 3, 4], [70, 36], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 14, 14, 7, 7, 1, 3, 3, 1, 2, 2, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(beta, beta)), tf.math.pow(grad, grad)), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030878027526853, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 2, 8, 1, 2, 5, 5, 2, 4, 2, 4, 2, 4, 8, 2, 0, 6, 3, 2, 5, 4, 4, 5, 4, 1, 4], [1, 2, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 0, 3, 1, 3, 3, 1, 2, 3, 2, 1, 1, 1, 0, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4, 4], [2, 7, 1, 5, 3, 4], [49], [0, 1, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 20, 14, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))))), tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 2, 1, 1, 2, 5, 8, 2, 4, 3, 4, 8, 2, 8, 8, 9, 4, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [54, 80, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [3, 4, 4], [2, 7, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad)), grad))))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 7, 0, 1, 8, 2, 1, 1, 5, 5, 8, 2, 4, 3, 4, 8, 2, 8, 8, 9, 4, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [54, 80, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 20, 11, 5, 1, 1, 0, 1, 0, 7, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad)), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))))))))), tf.math.add(alpha, alpha))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12613920867443085, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 6, 0, 8, 2, 0, 1, 0, 8, 5, 6, 4, 1, 9, 8, 5, 8, 8, 0, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 2, 0, 1, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [85, 57, 89, 16, 90, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 3, 3, 5, 2, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0], [3, 4, 4, 6], [1, 7, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 0, 1, 1, 0, 1, 1, 9, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(grad, tf.math.negative(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 6, 1, 8, 2, 1, 1, 0, 3, 5, 4, 4, 1, 9, 8, 3, 5, 8, 0, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 2, 3, 5, 0, 3, 1, 3], [18, 89], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 10, 10, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), beta)), tf.math.pow(tf.math.add(beta, grad), grad))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 5, 1, 8, 2, 9, 2, 2, 6, 5, 6, 2, 2, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [64, 44, 89, 24, 84, 47, 89, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 19, 10, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030878027526853, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 1, 8, 2, 6, 1, 2, 8, 5, 6, 4, 3, 9, 9, 2, 8, 8, 6, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 1, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 42, 26, 16, 6, 1, 1, 0, 1, 0, 7, 5, 3, 2, 1, 1, 0, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))))))))), tf.math.add(alpha, tf.math.sqrt(alpha)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha)))))))), tf.math.add(alpha, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(alpha))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030878027526853, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 6, 0, 8, 2, 0, 1, 0, 8, 5, 6, 4, 1, 9, 8, 5, 8, 8, 0, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 1, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [85, 57, 89, 16, 90, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 3, 3, 5, 2, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [2, 4, 4], [2, 0, 1, 5, 3, 4], [51], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 0, 1, 8, 2, 1, 1, 2, 5, 2, 2, 1, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [66, 44, 89, 16, 90, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 4, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [9, 4, 4], [6, 7, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 0, 1, 8, 2, 1, 1, 2, 5, 5, 2, 4, 3, 1, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 44, 84, 16, 90, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 7, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.06314285844564438, "mapping_values": [1, 31, 31, 19, 12, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302737927912343, 2.3008266241637676, 2.299854612810233, 2.300687903221714, 2.301014897247363, 2.3001745908236098, 2.3001857328219675, 2.2998316133688346, 2.30013534364888, 2.2988618232035254, 2.299450727958311, 2.2992738230416427, 2.2994997910441755, 2.2991274594158435], "accuracy": [0.09060890227556229, 0.09391097724437714, 0.10276053100824356, 0.09774138033390045, 0.09628847241401672, 0.10315678268671036, 0.09853387624025345, 0.09972262382507324, 0.1010434553027153, 0.10328886657953262, 0.09787346422672272, 0.10091137140989304, 0.10368511080741882, 0.10289261490106583], "val_loss": [1.9701579638889857, 1.9696745872497559, 1.9693296977451868, 1.9692459787641252, 1.9692927769252233, 1.9692363739013672, 1.969186850956508, 1.969090393611363, 1.9689734322684151, 1.9690908704485213, 1.9691863741193498, 1.9693817411150252, 1.9697269712175642, 1.9700089863368444], "val_accuracy": [0.04833333194255829, 0.055666666477918625, 0.05999999865889549, 0.061666667461395264, 0.06533333659172058, 0.0716666653752327, 0.07766667008399963, 0.08266666531562805, 0.09033333510160446, 0.08699999749660492, 0.08933333307504654, 0.0860000029206276, 0.07966666668653488, 0.07999999821186066]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 6, 1, 8, 2, 4, 1, 0, 8, 5, 6, 4, 1, 9, 8, 5, 5, 8, 0, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 1, 1, 1, 2, 1, 2, 1, 2, 1], [66, 44, 89, 16, 90, 47, 89, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0], [3, 4, 4, 1], [2, 7, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 9, 6, 4, 2, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, grad))))), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3032476530099006, 2.302235029597466, 2.30175103163124, 2.303099835002427, 2.3036094865684325, 2.302937378169775], "accuracy": [0.08968432247638702, 0.0886276587843895, 0.09628847241401672, 0.09100515395402908, 0.0874389111995697, 0.09325055778026581], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 7, 0, 1, 8, 2, 1, 1, 2, 5, 5, 2, 6, 3, 4, 8, 2, 4, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [44, 44, 43, 16, 76, 47, 89, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4, 4], [2, 7, 1, 5, 3, 4], [22], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 34, 34, 21, 13, 5, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, grad)))))), alpha))), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3032476530099006, 2.302235029597466, 2.30175103163124, 2.303099835002427, 2.3036094865684325, 2.302937378169775], "accuracy": [0.08968432247638702, 0.0886276587843895, 0.09628847241401672, 0.09100515395402908, 0.0874389111995697, 0.09325055778026581], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 6, 1, 8, 2, 9, 1, 2, 8, 0, 6, 4, 3, 9, 2, 9, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 2, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [44, 12, 89, 16, 90, 21, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3032476530099006, 2.302235029597466, 2.30175103163124, 2.303099835002427, 2.3036094865684325, 2.302937378169775], "accuracy": [0.08968432247638702, 0.0886276587843895, 0.09628847241401672, 0.09100515395402908, 0.0874389111995697, 0.09325055778026581], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 0, 1, 8, 2, 1, 1, 2, 5, 2, 2, 1, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [66, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 5, 0, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 4, 0, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 0, 1, 0], [2, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 2, 1, 2, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(grad), tf.math.add(beta, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3032807372643287, 2.302350224127245, 2.3019528690661106, 2.3033695624662256, 2.3039722549066632, 2.303377786946728], "accuracy": [0.08955223858356476, 0.0882314071059227, 0.0952318087220192, 0.09074098616838455, 0.08717474341392517, 0.09113723784685135], "val_loss": [1.971083096095494, 1.9711638178144182, 1.9712506702968053, 1.9713282585144043, 1.971405029296875, 1.971482276916504], "val_accuracy": [0.036666665226221085, 0.036666665226221085, 0.03633333370089531, 0.035999998450279236, 0.03533333167433739, 0.03533333167433739]}}]