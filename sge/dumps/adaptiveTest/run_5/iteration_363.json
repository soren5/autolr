[{"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7885714173316956, "mapping_values": [1, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2799270811837977, 2.2143843161699213, 2.090586091013727, 1.8795632448777106, 1.615294109749961, 1.4013400715355702, 1.2521038076676367, 1.1518350811902762, 1.0777644466147713, 1.0117919259870591, 0.9672376005530845, 0.9328806685135428, 0.9046950231784402, 0.8806399787657958, 0.8565317741584753, 0.8411193926100403, 0.825643539751494, 0.8131493655619069, 0.7975001823176262, 0.7880668221227308, 0.7737943183996296, 0.7675564902774441, 0.7610051976281891, 0.7522069710498599, 0.747432986081725, 0.7269998528953903, 0.7250493052077882, 0.7218475943984073, 0.7111032125799017, 0.7075470479771351, 0.7034873213073314, 0.6927186621572238, 0.6900505232552747, 0.6930404293491478, 0.6806502546837081, 0.6782919397175887, 0.671599935476003, 0.6681316851735067, 0.6667479395614466, 0.6607548024408444, 0.6500434593171208, 0.6601228694622275, 0.6428333340209504, 0.6475638233281681, 0.6526070132530786, 0.634113297147868, 0.6358986204058786, 0.6334787138606485], "accuracy": [0.15202747285366058, 0.28860124945640564, 0.3801347315311432, 0.42847707867622375, 0.48989564180374146, 0.5311055183410645, 0.5703341960906982, 0.600581169128418, 0.6199973821640015, 0.6478668451309204, 0.6559239029884338, 0.6667547225952148, 0.6716417670249939, 0.6818121671676636, 0.6902654767036438, 0.6923788189888, 0.6983225345611572, 0.707040011882782, 0.7103421092033386, 0.7157574892044067, 0.7182670831680298, 0.7202483415603638, 0.7244749665260315, 0.724210798740387, 0.7276449799537659, 0.7353057861328125, 0.7333245277404785, 0.7317395210266113, 0.7405890822410583, 0.7405890822410583, 0.7391361594200134, 0.7429665923118591, 0.7485140562057495, 0.7448157668113708, 0.7497028112411499, 0.7504953145980835, 0.7532690763473511, 0.752212405204773, 0.759080708026886, 0.7544577717781067, 0.7572315335273743, 0.7567031979560852, 0.7601373791694641, 0.7640998363494873, 0.7555144429206848, 0.7647602558135986, 0.7627789974212646, 0.7693831920623779], "val_loss": [1.9162718909127372, 1.8320048877171107, 1.6682295458657401, 1.4103509017399378, 1.148311001913888, 0.9676059314182827, 0.8547336714608329, 0.7848414523260934, 0.73428818157741, 0.6983603749956403, 0.6711911814553397, 0.6457584926060268, 0.6302663598741803, 0.6205112593514579, 0.6059583595820835, 0.5922202723366874, 0.5853260925837925, 0.5739795310156686, 0.5691866704395839, 0.5668536935533796, 0.5565217563084194, 0.5482190847396851, 0.5408629689897809, 0.5359446150915963, 0.5382477045059204, 0.5273463215146746, 0.5229272501809257, 0.5216198308127267, 0.5164966072354998, 0.519574693271092, 0.5111368383680072, 0.5055372374398368, 0.4999645267214094, 0.5000910418374198, 0.4974379369190761, 0.4892627511705671, 0.4897292341504778, 0.4885824918746948, 0.48510825634002686, 0.47946361133030485, 0.4804208619253976, 0.47626193932124544, 0.4722391026360648, 0.48034775257110596, 0.4746755531855992, 0.4738163266863142, 0.46923935413360596, 0.46940536158425467], "val_accuracy": [0.3683333396911621, 0.4663333296775818, 0.54666668176651, 0.5863333344459534, 0.609666645526886, 0.6759999990463257, 0.7023333311080933, 0.7023333311080933, 0.7179999947547913, 0.7226666808128357, 0.7273333072662354, 0.734333336353302, 0.7356666922569275, 0.7400000095367432, 0.734666645526886, 0.7506666779518127, 0.7513333559036255, 0.7609999775886536, 0.7513333559036255, 0.7413333058357239, 0.7509999871253967, 0.7673333287239075, 0.7696666717529297, 0.7706666588783264, 0.762666642665863, 0.7749999761581421, 0.7746666669845581, 0.7749999761581421, 0.7663333415985107, 0.7816666960716248, 0.784333348274231, 0.7839999794960022, 0.7850000262260437, 0.7770000100135803, 0.7863333225250244, 0.7860000133514404, 0.7850000262260437, 0.7836666703224182, 0.7820000052452087, 0.7913333177566528, 0.7943333387374878, 0.7929999828338623, 0.7973333597183228, 0.7799999713897705, 0.784333348274231, 0.793666660785675, 0.7863333225250244, 0.7953333258628845]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 2, 1, 1, 0, 2, 5, 2, 8, 4, 3, 8, 3, 8, 9, 8, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7874285578727722, "mapping_values": [1, 42, 42, 27, 15, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(grad))))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.add(grad, grad))))))))), tf.math.add(alpha, tf.math.add(grad, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.sqrt(alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.279927099165175, 2.2143831961914815, 2.0905828609946475, 1.8795548518099852, 1.61527692583558, 1.4013122462042256, 1.2520856197405297, 1.1518392187335693, 1.0777803485923518, 1.0118166594347224, 0.9672589492819895, 0.9329241349429125, 0.9047612982293193, 0.8805115397076297, 0.8564575290824791, 0.8410572294845021, 0.825734029687265, 0.8131339952473658, 0.7973530863128429, 0.7882529016278597, 0.7735862649820736, 0.767661913314185, 0.7610138939387763, 0.7523382688714938, 0.7472697361475126, 0.7268970241919485, 0.7250466092214483, 0.7218195689258291, 0.7109043910802237, 0.7076959640925288, 0.7032776891657736, 0.6927126404112042, 0.6900845602943976, 0.6930923311701855, 0.680702552472942, 0.6782132730413469, 0.6717707064204984, 0.6680133554834999, 0.6667605767302336, 0.6607773289972088, 0.6497473320736152, 0.6600537267123011, 0.6425248757801855, 0.6474390395518071, 0.6526672716909758, 0.6343070313348242, 0.635444712716008, 0.6333518964566291], "accuracy": [0.15202747285366058, 0.2884691655635834, 0.3803988993167877, 0.42847707867622375, 0.4897635579109192, 0.5311055183410645, 0.5699379444122314, 0.6007132530212402, 0.6194690465927124, 0.6477347612380981, 0.6561880707740784, 0.6664905548095703, 0.6719059348106384, 0.681547999382019, 0.6900013089179993, 0.6921146512031555, 0.6985867023468018, 0.707568347454071, 0.7107383608818054, 0.7160216569900513, 0.7181349992752075, 0.7202483415603638, 0.724739134311676, 0.7248712182044983, 0.7276449799537659, 0.7353057861328125, 0.7341170310974121, 0.7318716049194336, 0.7409853339195251, 0.7403249144554138, 0.7405890822410583, 0.7428345084190369, 0.7490423917770386, 0.7458723783493042, 0.7494386434555054, 0.7516840696334839, 0.7534011602401733, 0.7531369924545288, 0.759080708026886, 0.7543256878852844, 0.7574957013130188, 0.7577598690986633, 0.7611940503120422, 0.7637035846710205, 0.7549861073493958, 0.7635715007781982, 0.763439416885376, 0.7691190242767334], "val_loss": [1.9162718909127372, 1.831998416355678, 1.6682151385716029, 1.41033935546875, 1.1483126027243478, 0.9675897189549038, 0.8548158407211304, 0.7849368538175311, 0.7343393564224243, 0.6983533246176583, 0.6711954729897636, 0.6457117285047259, 0.6303698675973075, 0.6203563043049404, 0.6060606411525181, 0.5922635453087943, 0.5853520972388131, 0.5739845037460327, 0.5692403486796788, 0.5667999812534877, 0.5567340510232108, 0.5480812788009644, 0.5407099723815918, 0.5357280629021781, 0.5379222631454468, 0.5271222421101162, 0.5228339603969029, 0.5216185024806431, 0.5160835981369019, 0.5191118717193604, 0.5111943994249616, 0.5056371007646833, 0.4999301774161203, 0.5002364601407733, 0.4970747573035104, 0.4891414982931955, 0.4903777667454311, 0.48871452467782156, 0.48561605385371615, 0.4791305235454014, 0.48001582281930105, 0.4761514833995274, 0.47237794739859446, 0.4817207029887608, 0.4752269983291626, 0.47396845476967947, 0.4690335307802473, 0.4690279620034354], "val_accuracy": [0.3683333396911621, 0.4663333296775818, 0.546999990940094, 0.5863333344459534, 0.6100000143051147, 0.6759999990463257, 0.7026666402816772, 0.7023333311080933, 0.7179999947547913, 0.7223333120346069, 0.7276666760444641, 0.734666645526886, 0.7353333234786987, 0.7396666407585144, 0.734666645526886, 0.7509999871253967, 0.7513333559036255, 0.7609999775886536, 0.7509999871253967, 0.7419999837875366, 0.7513333559036255, 0.7673333287239075, 0.7699999809265137, 0.7706666588783264, 0.762666642665863, 0.7760000228881836, 0.7739999890327454, 0.7753333449363708, 0.7676666378974915, 0.7806666493415833, 0.7846666574478149, 0.7856666445732117, 0.7833333611488342, 0.7773333191871643, 0.7853333353996277, 0.7860000133514404, 0.7846666574478149, 0.7836666703224182, 0.781333327293396, 0.7910000085830688, 0.7940000295639038, 0.7919999957084656, 0.7956666946411133, 0.7799999713897705, 0.7833333611488342, 0.7943333387374878, 0.7863333225250244, 0.7940000295639038]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 6, 1, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7785714268684387, "mapping_values": [1, 22, 22, 13, 9, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))))))))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.279927130656204, 2.214389012238101, 2.090611466516231, 1.87960495073026, 1.615306152501961, 1.4013231789604421, 1.2520670412301922, 1.151851418436857, 1.077816056065225, 1.0117539041597514, 0.9671510266369644, 0.9328669659481419, 0.9046609352891786, 0.8805216168762119, 0.8564978566120612, 0.8409860443839025, 0.8255579415927742, 0.8129777623016474, 0.7973234016803026, 0.7881285554272167, 0.7735501739169786, 0.7675560822481838, 0.7607384086710162, 0.7522017668975485, 0.7473343465117541, 0.7267157025561435, 0.7247715362893465, 0.7217312369364254, 0.7109418536662236, 0.7078773737851229, 0.7032015472040389, 0.6927673264879356, 0.6900081006039277, 0.6935551783679861, 0.6806199092670375, 0.6781745181422523, 0.6719102631423294], "accuracy": [0.15202747285366058, 0.28860124945640564, 0.3801347315311432, 0.42847707867622375, 0.48949941992759705, 0.531369686126709, 0.5700700283050537, 0.600581169128418, 0.6185444593429565, 0.648659348487854, 0.655527651309967, 0.666358470916748, 0.6723021864891052, 0.6823405027389526, 0.6903975605964661, 0.6922467350959778, 0.6989829540252686, 0.7078325152397156, 0.7111346125602722, 0.7165499925613403, 0.7185312509536743, 0.7201162576675415, 0.7240787148475647, 0.7256637215614319, 0.7283053994178772, 0.7347774505615234, 0.7341170310974121, 0.7318716049194336, 0.7409853339195251, 0.7401928305625916, 0.7395324110984802, 0.7427024245262146, 0.7479857206344604, 0.7450799345970154, 0.7497028112411499, 0.7514199018478394, 0.7536653280258179], "val_loss": [1.9162742750985282, 1.8320097923278809, 1.668260131563459, 1.410377127783639, 1.1483468328203474, 0.9676158428192139, 0.8547677993774414, 0.7848925079618182, 0.7341423886162894, 0.6983060666493007, 0.6710729258401054, 0.6456875801086426, 0.6304581846509661, 0.6204848970685687, 0.6060406310217721, 0.5925992556980678, 0.5856359856469291, 0.5741880450929914, 0.5690625565392631, 0.566657441002982, 0.5564978122711182, 0.5478447675704956, 0.5408716201782227, 0.5359253202165876, 0.53806129523686, 0.5271890844617572, 0.5229065588542393, 0.5213490383965629, 0.5163609300340924, 0.5198794603347778, 0.5114226341247559, 0.5059692859649658, 0.500193578856332, 0.5001711334500994, 0.4972870349884033, 0.4893047639301845, 0.4900169372558594], "val_accuracy": [0.3683333396911621, 0.46666666865348816, 0.54666668176651, 0.5863333344459534, 0.609666645526886, 0.6759999990463257, 0.7026666402816772, 0.7023333311080933, 0.7183333039283752, 0.7226666808128357, 0.7266666889190674, 0.7350000143051147, 0.7350000143051147, 0.7396666407585144, 0.734333336353302, 0.7506666779518127, 0.75, 0.7609999775886536, 0.7516666650772095, 0.7419999837875366, 0.7509999871253967, 0.7673333287239075, 0.7696666717529297, 0.7703333497047424, 0.762333333492279, 0.7770000100135803, 0.7733333110809326, 0.7756666541099548, 0.7666666507720947, 0.7799999713897705, 0.7839999794960022, 0.7866666913032532, 0.784333348274231, 0.7766666412353516, 0.7850000262260437, 0.7860000133514404, 0.7856666445732117]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.777999997138977, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.square(tf.math.sqrt(tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2799271171465527, 2.214391450084605, 2.0906293872104675, 1.8796302472690094, 1.6153894742844268, 1.4014021434709616, 1.2521125469319871, 1.1519041796401979, 1.0778031303047773, 1.0118274694861453, 0.9672432256223598, 0.9329001752691908, 0.9048122716633368, 0.880643259044557, 0.8567950585499069, 0.8409727026112186, 0.8257929567474463, 0.8131403987118911, 0.797492227825459, 0.7882507797308476, 0.7735043752856338, 0.7676110863606881, 0.7607758902461065, 0.7525397572912922, 0.7474004150680846, 0.7268306965982878, 0.725055370364191, 0.7219968614734442, 0.710905483732323, 0.7076480727248645, 0.7032258055622961, 0.6929174963162953, 0.6900732275155148, 0.6933015087859788, 0.6808359697825244, 0.6781081877537628, 0.6717963842211335], "accuracy": [0.15202747285366058, 0.28860124945640564, 0.3800026476383209, 0.428609162569046, 0.4897635579109192, 0.5309734344482422, 0.570202112197876, 0.6009774208068848, 0.6196011304855347, 0.6482630968093872, 0.655527651309967, 0.6660943031311035, 0.672170102596283, 0.6824725866317749, 0.6902654767036438, 0.6926429867744446, 0.6988508701324463, 0.7073041796684265, 0.7104741930961609, 0.7161537408828735, 0.7180029153823853, 0.7206445932388306, 0.7240787148475647, 0.7250033020973206, 0.7285695672035217, 0.7358341217041016, 0.7339849472045898, 0.7320036888122559, 0.7413815855979919, 0.739928662776947, 0.739400327205658, 0.7430986762046814, 0.7483819723129272, 0.7449478507041931, 0.750759482383728, 0.7516840696334839, 0.7544577717781067], "val_loss": [1.9162743432181222, 1.8320230075291224, 1.6682890483311243, 1.4104382310594832, 1.1484106268201555, 0.9676003456115723, 0.8547588416508266, 0.7847457272665841, 0.7341121775763375, 0.6983622482844761, 0.6712806565420968, 0.6458578280040196, 0.6303733927862984, 0.6207377570016044, 0.6057801587241036, 0.5924554722649711, 0.5857492685317993, 0.5741886070796421, 0.5692310673849923, 0.5669993162155151, 0.5566843748092651, 0.5480035543441772, 0.5405796595982143, 0.5358281476157052, 0.5379653147288731, 0.5273958614894322, 0.5230162995202201, 0.5215872696467808, 0.5161340066364833, 0.5192494222096035, 0.5113983154296875, 0.505747880254473, 0.5001067093440464, 0.5005105052675519, 0.4970898117337908, 0.48915752342769075, 0.4902479478291103], "val_accuracy": [0.3683333396911621, 0.4659999907016754, 0.5463333129882812, 0.5860000252723694, 0.6100000143051147, 0.6759999990463257, 0.7026666402816772, 0.7026666402816772, 0.7183333039283752, 0.7226666808128357, 0.7266666889190674, 0.734000027179718, 0.7356666922569275, 0.7379999756813049, 0.734333336353302, 0.7509999871253967, 0.75, 0.7609999775886536, 0.7509999871253967, 0.7419999837875366, 0.7513333559036255, 0.7670000195503235, 0.7699999809265137, 0.7703333497047424, 0.762333333492279, 0.7756666541099548, 0.7743333578109741, 0.7746666669845581, 0.7666666507720947, 0.7793333530426025, 0.7836666703224182, 0.7866666913032532, 0.784333348274231, 0.7776666879653931, 0.7839999794960022, 0.7856666445732117, 0.7846666574478149]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 5, 6, 2, 9, 1, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 0, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [57, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.777999997138977, "mapping_values": [1, 25, 25, 15, 10, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(grad, tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.negative(alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2799271171465527, 2.214386866659835, 2.0906023573740016, 1.8795860744722452, 1.615332432537031, 1.401367564573579, 1.2521104258379963, 1.1518625467208714, 1.0776817177296503, 1.011711166834299, 0.9671766930221015, 0.9328373978875175, 0.9046425733269009, 0.8804360514760348, 0.8564361454772597, 0.8409461816619054, 0.8256024100666804, 0.8131001475637993, 0.7973560295746138, 0.7880704356789227, 0.7734514097842432, 0.7674282671138989, 0.7605564802424499, 0.7521407933141325, 0.7474380205761189, 0.7266691061546932, 0.7249553616430151, 0.7219126525886967, 0.7108938874365112, 0.7074734417202765, 0.7029400602024403, 0.6926223552379752, 0.6895271602670168, 0.6929130583800786, 0.6806016858495411, 0.6781179815030857, 0.6715236331934407], "accuracy": [0.15202747285366058, 0.2887333333492279, 0.3801347315311432, 0.42847707867622375, 0.4897635579109192, 0.531369686126709, 0.5703341960906982, 0.6007132530212402, 0.6196011304855347, 0.6477347612380981, 0.6557918190956116, 0.6666226387023926, 0.672170102596283, 0.681547999382019, 0.6906617283821106, 0.6927750706672668, 0.6988508701324463, 0.7083608508110046, 0.7108704447746277, 0.7156254053115845, 0.7189275026321411, 0.7206445932388306, 0.7248712182044983, 0.7246070504188538, 0.7275128960609436, 0.7359662055969238, 0.7338528633117676, 0.7321357727050781, 0.7417778372764587, 0.7400607466697693, 0.7388719916343689, 0.7432307600975037, 0.7481178045272827, 0.7449478507041931, 0.7479857206344604, 0.7520803213119507, 0.7547219395637512], "val_loss": [1.916273593902588, 1.8320091792515345, 1.6682466438838415, 1.410397699901036, 1.14839996610369, 0.9676131180354527, 0.8546617201396397, 0.7847943646567208, 0.734020505632673, 0.6983003446034023, 0.6712011269160679, 0.6456284352711269, 0.6303851774760655, 0.6205123833247593, 0.605805686541966, 0.5923454080309186, 0.5854979583195278, 0.5738977364131382, 0.5690139702388218, 0.5668585981641497, 0.5566225733075824, 0.5482271909713745, 0.5405128853661674, 0.5357399497713361, 0.5380914722170148, 0.5271625859396798, 0.5231499331338065, 0.5220147371292114, 0.5158006463732038, 0.5198905638286045, 0.5109637124197823, 0.5056794030325753, 0.4997870240892683, 0.49996282373155865, 0.4970745359148298, 0.48895978927612305, 0.49049648216792513], "val_accuracy": [0.3683333396911621, 0.4663333296775818, 0.546999990940094, 0.5863333344459534, 0.609666645526886, 0.6759999990463257, 0.7023333311080933, 0.7026666402816772, 0.7179999947547913, 0.7226666808128357, 0.7276666760444641, 0.734333336353302, 0.7356666922569275, 0.7400000095367432, 0.734666645526886, 0.7513333559036255, 0.7506666779518127, 0.7609999775886536, 0.7519999742507935, 0.7416666746139526, 0.7513333559036255, 0.7663333415985107, 0.7676666378974915, 0.7706666588783264, 0.7620000243186951, 0.7760000228881836, 0.7749999761581421, 0.7756666541099548, 0.7683333158493042, 0.7803333401679993, 0.7839999794960022, 0.7870000004768372, 0.7846666574478149, 0.7793333530426025, 0.7850000262260437, 0.7863333225250244, 0.7856666445732117]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 9, 4, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.30399999022483826, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.square(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2433307223457937, 2.8134172452108626, 2.3368077061164017, 2.303929957447901, 2.303481748941442, 2.3033081881830864], "accuracy": [0.187689870595932, 0.20631356537342072, 0.12917712330818176, 0.09826971590518951, 0.09509972482919693, 0.09153348207473755], "val_loss": [1.9419424193246024, 1.9663895879473006, 1.9744418689182825, 1.9736373765128, 1.9736584254673548, 1.9736886024475098], "val_accuracy": [0.29233333468437195, 0.09833333641290665, 0.10166666656732559, 0.10066666454076767, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 1, 9, 1, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.3019999861717224, "mapping_values": [1, 22, 22, 14, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.square(tf.math.sqrt(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.negative(alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.24333273723629, 3.4331258909026188, 2.301080582715328, 2.336337541088436, 2.30355330046378, 2.302978654752365], "accuracy": [0.18874652683734894, 0.2188614457845688, 0.10460969805717468, 0.12851670384407043, 0.09932637959718704, 0.09509972482919693], "val_loss": [1.9419730050223214, 1.9788639886038644, 1.8854564258030482, 1.9742528370448522, 1.9737468447004045, 1.9733630589076452], "val_accuracy": [0.2919999957084656, 0.09799999743700027, 0.20399999618530273, 0.09799999743700027, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 9, 1, 2, 3, 2, 5, 4, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [97, 12, 88, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 4, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 42, 28, 14, 7, 1, 1, 0, 1, 0, 7, 6, 3, 3, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), grad))))), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad)))))))))), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, grad))))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 1, 1, 1, 0, 2, 5, 6, 8, 2, 3, 8, 3, 9, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 1, 2, 2, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [0, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 15, 11, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.square(grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(grad, alpha))))))))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024246961590857, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [3, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 2, 15, 15, 8, 7, 2, 3, 3, 1, 2, 1, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.square(tf.math.sqrt(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024246961590857, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 9, 2, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 2, 0, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [18, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [1, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 14, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))), tf.math.negative(alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 6, 8, 2, 2, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 2, 1, 5, 3, 4], [32], [0, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 14, 11, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, alpha)))), tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))))))), tf.math.add(alpha, grad))), tf.math.multiply(grad, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024246961590857, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 2, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [2, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [73118714738.43082, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10817593336105347, 0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.0718501656859191e+35, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 1, 2, 2, 1, 1, 0, 2, 5, 2, 8, 3, 5, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [4, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [1, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 25, 13, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(grad))))))))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))), grad))), grad), tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0796460211277008, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [70], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 11, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, alpha))))), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12362963706254959, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 2, 1, 3, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 8, 9, 9, 2, 2, 5, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [4, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0796460211277008, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 2, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 2, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 30, 30, 19, 11, 3, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(alpha, grad)))))))), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))), grad)))), tf.math.add(alpha, grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3031818475926067, 2.3036877368939095, 2.3016648864733495, 2.3014226729733487, 2.3021403272878445, 2.303250783344128], "accuracy": [0.08955223858356476, 0.09087307006120682, 0.09615638852119446, 0.09166556596755981, 0.08757099509239197, 0.09166556596755981], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 5, 2, 9, 1, 2, 0, 3, 8, 2, 8, 2, 4, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 0, 1, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 28, 28, 19, 9, 4, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.square(tf.math.square(tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(grad)))))), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(grad)))))))), tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3031818475926067, 2.3036877368939095, 2.3016648864733495, 2.3014226729733487, 2.3021403272878445, 2.303250783344128], "accuracy": [0.08955223858356476, 0.09087307006120682, 0.09615638852119446, 0.09166556596755981, 0.08757099509239197, 0.09166556596755981], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 0, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [3, 94, 75, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 28, 28, 20, 8, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.square(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.multiply(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3031818475926067, 2.3036877368939095, 2.3016648864733495, 2.3014226729733487, 2.3021403272878445, 2.303250783344128], "accuracy": [0.08955223858356476, 0.09087307006120682, 0.09615638852119446, 0.09166556596755981, 0.08757099509239197, 0.09166556596755981], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 2, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [1, 0, 1, 5, 3, 4], [26], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3031818475926067, 2.3036877368939095, 2.3016648864733495, 2.3014226729733487, 2.3021403272878445, 2.303250783344128], "accuracy": [0.08955223858356476, 0.09087307006120682, 0.09615638852119446, 0.09166556596755981, 0.08757099509239197, 0.09166556596755981], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]