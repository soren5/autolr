[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [6, 2, 3, 6, 2, 4, 5, 5, 3, 3, 3, 2, 9, 1, 3, 9, 5, 1, 7, 8, 2, 6, 2, 4, 2, 2, 6, 8, 0, 2, 6, 2, 2, 0, 8, 8, 2, 7, 0, 5, 7, 5, 9, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 2, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 2, 14, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8065714240074158, "mapping_values": [1, 4, 4, 2, 2, 1, 68, 68, 41, 27, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), tf.math.add(beta, grad))))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(beta, grad)))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))))))), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))), tf.math.add(beta, grad))), tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad)))), beta)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2581639592169833, 1.8313386606392277, 1.2911049838646165, 0.939955844926072, 0.8346582222309221, 0.7855690505368882, 0.7175666878031639, 0.6864718022426484, 0.6670481362882591, 0.6408071218700835, 0.616996494573672, 0.578936770442234, 0.561968161831159, 0.5423912018864241, 0.5278259664321258, 0.49720941765622345, 0.4960205938365434, 0.4824218679381368, 0.4665999464457455, 0.4452525294767064, 0.44606695275076186, 0.4205813146168136, 0.41405858212631486, 0.3981416913905967, 0.397998157505346, 0.3848001318419724, 0.3781269378059686, 0.3697796741874699, 0.36378054197406756, 0.3624684863189082, 0.34937529364880504, 0.3460511435701579, 0.32799423326669414, 0.3362502920912588, 0.3158939153983404, 0.3176349127383957, 0.30704169044436685, 0.3033053562932751, 0.29577488926234513, 0.29545110492831633, 0.2889768983024758, 0.291529696837723, 0.28033122620672646, 0.26678024340441137, 0.26149347666594425, 0.2638485805036653, 0.25421044745339444], "accuracy": [0.19152027368545532, 0.4267600178718567, 0.5546162724494934, 0.6576409935951233, 0.687491774559021, 0.6973979473114014, 0.7209087014198303, 0.7378153204917908, 0.7453441023826599, 0.7547219395637512, 0.7668735980987549, 0.7819310426712036, 0.7906485199928284, 0.7921014428138733, 0.796328067779541, 0.8083476424217224, 0.8079513907432556, 0.817461371421814, 0.8197067975997925, 0.833179235458374, 0.8314621448516846, 0.8417646288871765, 0.8450667262077332, 0.8525954484939575, 0.8506141901016235, 0.8557654023170471, 0.8576145768165588, 0.856689989566803, 0.863029956817627, 0.8618412613868713, 0.8627657890319824, 0.8652753829956055, 0.8755778670310974, 0.871879518032074, 0.8776912093162537, 0.8753136992454529, 0.8795403242111206, 0.8841632604598999, 0.8825782537460327, 0.8840311765670776, 0.8905032277107239, 0.8819178342819214, 0.8912957310676575, 0.8969752788543701, 0.9001452922821045, 0.8957865834236145, 0.9038436412811279], "val_loss": [1.8087994711739677, 0.9872980458395821, 0.7024551800319127, 0.6643780980791364, 0.6063917023794991, 0.5737464768545968, 0.541113121168954, 0.5173334734780448, 0.4937859092439924, 0.4799618550709316, 0.4555765560695103, 0.43835887738636564, 0.43150523730686735, 0.4156652092933655, 0.41586813756397795, 0.39684375694819857, 0.39524499007633757, 0.38717481919697355, 0.37814381292888094, 0.371296763420105, 0.36101982423237394, 0.35838712964739117, 0.35547504254749845, 0.3569542169570923, 0.34245399066380094, 0.3433248656136649, 0.3395486814635141, 0.3405102150780814, 0.3355173979486738, 0.3311612776347569, 0.3345649072102138, 0.3318297863006592, 0.33019029242651804, 0.3244097914014544, 0.32474493980407715, 0.31662711075374056, 0.31781532934733797, 0.32264596223831177, 0.32284328767231535, 0.3148113318852016, 0.31674437863486155, 0.3187274932861328, 0.31412545272282194, 0.32330175808497835, 0.31960541009902954, 0.3269058210509164, 0.3198532887867519], "val_accuracy": [0.43566668033599854, 0.6439999938011169, 0.706333339214325, 0.7149999737739563, 0.7390000224113464, 0.7386666536331177, 0.7566666603088379, 0.7606666684150696, 0.7736666798591614, 0.7829999923706055, 0.7903333306312561, 0.8076666593551636, 0.8056666851043701, 0.8230000138282776, 0.8109999895095825, 0.8243333101272583, 0.8246666789054871, 0.82833331823349, 0.8330000042915344, 0.840666651725769, 0.8473333120346069, 0.8479999899864197, 0.8566666841506958, 0.8523333072662354, 0.862666666507721, 0.8579999804496765, 0.859333336353302, 0.8576666712760925, 0.8656666874885559, 0.8659999966621399, 0.8616666793823242, 0.862666666507721, 0.8666666746139526, 0.8629999756813049, 0.8650000095367432, 0.8713333606719971, 0.8693333268165588, 0.8726666569709778, 0.8723333477973938, 0.8686666488647461, 0.8766666650772095, 0.878333330154419, 0.8763333559036255, 0.8726666569709778, 0.8683333396911621, 0.8736666440963745, 0.878333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7988571524620056, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 17, 11, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), grad), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), beta))))), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2581639592169833, 1.8313374146494363, 1.2910942897789073, 0.9399722311805662, 0.8346519551225515, 0.7852025828923941, 0.7169967517168169, 0.6867848408929172, 0.6661013230167722, 0.6398936337042856, 0.6173592381520814, 0.5786900327442156, 0.5614355614298386, 0.5433989703978026, 0.5282381625144615, 0.4984190341204763, 0.4943160079513102, 0.48224920329243326, 0.46681714577917977, 0.4446379946144486, 0.4449377263014295, 0.4191096689620463, 0.4143445000727541, 0.39848513695164256, 0.39925555969273424, 0.3842112262644835, 0.3774285386141186, 0.36801069038434825, 0.3632218128205794, 0.361048998778853, 0.3513876657365666, 0.3478639247694256, 0.32706353769420776, 0.3345855459198897], "accuracy": [0.19152027368545532, 0.4267600178718567, 0.5546162724494934, 0.6576409935951233, 0.6876237988471985, 0.6976621150970459, 0.7214370369911194, 0.737947404384613, 0.7454761862754822, 0.7556465268135071, 0.767401933670044, 0.78113853931427, 0.7881389260292053, 0.7923656105995178, 0.7956677079200745, 0.8098005652427673, 0.8104609847068787, 0.8183859586715698, 0.8191784620285034, 0.8345000743865967, 0.8333113193511963, 0.842028796672821, 0.8433496356010437, 0.8496896028518677, 0.8511425256729126, 0.8568220734596252, 0.856689989566803, 0.8578787446022034, 0.8621054291725159, 0.8661999702453613, 0.8652753829956055, 0.8626337051391602, 0.8772949576377869, 0.8714832663536072], "val_loss": [1.8087995392935616, 0.9872934818267822, 0.702403017452785, 0.6643857274736676, 0.6059931857245309, 0.5729498182024274, 0.5406566347394671, 0.5171483584812709, 0.49281842367989676, 0.4790874549320766, 0.4544259139469692, 0.4379398226737976, 0.4313232898712158, 0.41543151651109966, 0.415841281414032, 0.39585550342287334, 0.3938741087913513, 0.38690416301999775, 0.3771878055163792, 0.3704586369650705, 0.36237560851233347, 0.3576882907322475, 0.35435920102255686, 0.35417801993233816, 0.3419703926358904, 0.3416678309440613, 0.33856918130602154, 0.33948397636413574, 0.3351301891463144, 0.33113475356783184, 0.33343530552727835, 0.32901510170527865, 0.3262003915650504, 0.32206899779183523], "val_accuracy": [0.43566668033599854, 0.6439999938011169, 0.706333339214325, 0.7149999737739563, 0.7393333315849304, 0.7390000224113464, 0.7593333125114441, 0.7606666684150696, 0.7763333320617676, 0.7833333611488342, 0.7913333177566528, 0.8100000023841858, 0.8033333420753479, 0.8226666450500488, 0.8133333325386047, 0.8259999752044678, 0.8240000009536743, 0.8316666483879089, 0.8360000252723694, 0.8426666855812073, 0.8463333249092102, 0.8483333587646484, 0.8543333411216736, 0.8550000190734863, 0.8646666407585144, 0.8603333234786987, 0.859000027179718, 0.8613333106040955, 0.8683333396911621, 0.8633333444595337, 0.8613333106040955, 0.862333357334137, 0.8640000224113464, 0.8659999966621399]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 1, 5, 3, 7, 0, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 8, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 2, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 4], [21, 2, 78, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.797428548336029, "mapping_values": [1, 4, 4, 2, 2, 1, 57, 57, 34, 23, 4, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.math.subtract(tf.math.square(alpha), tf.math.add(beta, alpha)), tf.math.multiply(tf.math.add(beta, alpha), grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), beta)))), beta)), grad))))), tf.math.add(alpha, tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, beta)), grad))), alpha)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta))))))), tf.math.add(beta, tf.math.add(grad, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2581639277259544, 1.8313355168110943, 1.2911504346145661, 0.9399060162303156, 0.8347490422792754, 0.7856742510186556, 0.7171824240665615, 0.6864623513440289, 0.6663774017802067, 0.639339816190815, 0.6163996775876797, 0.5787538323246839, 0.5611325118834899, 0.5418997882867707, 0.5285499999473092, 0.4981211452058372, 0.4940115367188477, 0.4827671034571328, 0.46791271280618846, 0.4495451863785745, 0.44635081945818494, 0.42298503787116665, 0.4150928448196321, 0.39860177717944495, 0.40287551083868334, 0.38561018840464556, 0.3791012061609017, 0.36748770151738525, 0.3635987687765914, 0.36264499978240705, 0.35095517921284003, 0.3489626570424037, 0.3283584903984211, 0.3343864510032904], "accuracy": [0.19152027368545532, 0.4267600178718567, 0.5542200207710266, 0.6573768258094788, 0.6872276067733765, 0.6980583667755127, 0.7209087014198303, 0.7384757399559021, 0.7454761862754822, 0.7553823590278625, 0.7680623531341553, 0.7820631265640259, 0.7906485199928284, 0.7947431206703186, 0.7944789528846741, 0.8090080618858337, 0.81112140417099, 0.8182538747787476, 0.817989706993103, 0.83119797706604, 0.8317263126373291, 0.839519202709198, 0.8407079577445984, 0.8465195894241333, 0.8490291833877563, 0.8535200357437134, 0.8551049828529358, 0.8584070801734924, 0.8626337051391602, 0.8663320541381836, 0.8652753829956055, 0.863558292388916, 0.8739928603172302, 0.8706908226013184], "val_loss": [1.8087996074131556, 0.9872983864375523, 0.7024543625967843, 0.664297069822039, 0.6061689342771258, 0.5732326677867344, 0.5402543715068272, 0.5170108590807233, 0.4929100104740688, 0.47838267258235384, 0.45522221497126986, 0.43852560009275166, 0.4308445283344814, 0.4154669386999948, 0.4159667577062334, 0.3966937746320452, 0.39485212734767366, 0.38689405577523367, 0.37635945422308786, 0.36978682449885775, 0.36163034609385897, 0.3596476061003549, 0.35740670136043, 0.3572768909590585, 0.3459042225565229, 0.3425664561135428, 0.33955711126327515, 0.34105180842535837, 0.33868664503097534, 0.3321291634014675, 0.33520348582948956, 0.32923087903431486, 0.3309069446155003, 0.3254652959959848], "val_accuracy": [0.43566668033599854, 0.6439999938011169, 0.7053333520889282, 0.7143333554267883, 0.7400000095367432, 0.7383333444595337, 0.7583333253860474, 0.7609999775886536, 0.7739999890327454, 0.7826666831970215, 0.7923333048820496, 0.8080000281333923, 0.8036666512489319, 0.8230000138282776, 0.8140000104904175, 0.8259999752044678, 0.8253333568572998, 0.8309999704360962, 0.8349999785423279, 0.8426666855812073, 0.8503333330154419, 0.8483333587646484, 0.8543333411216736, 0.8519999980926514, 0.8610000014305115, 0.859666645526886, 0.8606666922569275, 0.8613333106040955, 0.8663333058357239, 0.8659999966621399, 0.8659999966621399, 0.8646666407585144, 0.8629999756813049, 0.8616666793823242]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.795714259147644, "mapping_values": [1, 4, 4, 2, 2, 1, 27, 27, 16, 11, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), grad), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(beta, beta)))))), tf.math.add(beta, beta)))))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2581639277259544, 1.8313349569163475, 1.2911550318324068, 0.9400303212092017, 0.834779180429867, 0.7854857392566803, 0.7184247540885966, 0.6872239950043004, 0.6676984264661355, 0.6405768114278786, 0.6169680728652238, 0.5797075958709202, 0.5626336817633695, 0.5424656437656048, 0.527906470428825, 0.49796550802314726, 0.4959961936190742, 0.48386806612159, 0.46721785668967153, 0.4479124198586886, 0.4481694730808864, 0.42253415752017753, 0.41466286492668925, 0.39697820088331487, 0.40018130459600926, 0.38422413688168283, 0.3788095185856195, 0.36942942703656706, 0.36538858407240626, 0.36399370272083054, 0.3513633781152709, 0.34893470738054094, 0.32540955348746053, 0.3328473751082979], "accuracy": [0.19152027368545532, 0.4267600178718567, 0.5543521046638489, 0.6572447419166565, 0.6884163022041321, 0.6991150379180908, 0.7219653725624084, 0.7378153204917908, 0.7458723783493042, 0.7555144429206848, 0.7667415142059326, 0.7807422876358032, 0.7881389260292053, 0.7942147850990295, 0.7980451583862305, 0.8103289008140564, 0.8107251524925232, 0.8191784620285034, 0.8203672170639038, 0.8348963260650635, 0.8301413059234619, 0.8429533839225769, 0.842028796672821, 0.8506141901016235, 0.8532558679580688, 0.8560295701026917, 0.8556333184242249, 0.8527275323867798, 0.8603883385658264, 0.8632941246032715, 0.8679170608520508, 0.863558292388916, 0.8754457831382751, 0.873860776424408], "val_loss": [1.8087994711739677, 0.9873015880584717, 0.7024608509881156, 0.6643986020769391, 0.605942862374442, 0.5735189403806414, 0.5408083030155727, 0.5174553224018642, 0.4939570256641933, 0.47887771470206125, 0.45602216039385113, 0.43924592222486225, 0.4325120619365147, 0.41672836031232563, 0.4157723273549761, 0.3969159296580723, 0.3946834121431623, 0.38580356325422016, 0.3762633204460144, 0.3693773235593523, 0.36209490469523836, 0.35942412274224417, 0.35829131092344013, 0.3561989409582956, 0.3438083018575396, 0.3433924487658909, 0.3382666451590402, 0.34160293851579937, 0.3392182077680315, 0.3318859849657331, 0.33417184012276785, 0.33168788467134747, 0.3331229771886553, 0.3260314464569092], "val_accuracy": [0.43566668033599854, 0.6439999938011169, 0.7053333520889282, 0.7160000205039978, 0.7379999756813049, 0.7390000224113464, 0.7570000290870667, 0.7593333125114441, 0.7733333110809326, 0.7826666831970215, 0.7929999828338623, 0.8083333373069763, 0.8046666383743286, 0.824999988079071, 0.812666654586792, 0.8246666789054871, 0.8256666660308838, 0.8293333053588867, 0.8336666822433472, 0.8433333039283752, 0.8460000157356262, 0.8493333458900452, 0.8550000190734863, 0.8560000061988831, 0.8613333106040955, 0.8556666374206543, 0.8619999885559082, 0.8640000224113464, 0.8666666746139526, 0.8640000224113464, 0.8633333444595337, 0.8606666922569275, 0.8659999966621399, 0.8610000014305115]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 2, 3, 3, 2, 9, 1, 3, 9, 5, 9, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 5, 3, 2, 2, 9, 8, 8, 2, 6], [3, 3, 3, 0, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [45, 2, 78, 38, 37, 47, 96, 55], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7928571701049805, "mapping_values": [1, 4, 4, 2, 2, 1, 59, 59, 38, 21, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), grad)))))))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))))))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2869929666800064, 2.2463187454335993, 2.191549915348487, 2.1073014998810717, 1.9784293166241074, 1.8029832872716491, 1.6146661178421082, 1.447204452164972, 1.3287593675343083, 1.2391842511887123, 1.1664880569884017, 1.1091849666938585, 1.066108570059828, 1.019470144965157, 0.9854769571787015, 0.9641512043802667, 0.9350149753291798, 0.9190316232849562, 0.8947038111386282, 0.8772251737462594, 0.8727192552712268, 0.8557262993476111, 0.8351335908679788, 0.8397643454574623, 0.8273158079723498, 0.8127905621488947, 0.7989243628830407, 0.7930743452296863, 0.7742133381549062, 0.77109994283363, 0.760020194516883, 0.7670426288726165, 0.7505585957181263, 0.7516891339813729, 0.7452150563427864, 0.7390105109472379, 0.742291319379717, 0.7259771835062372, 0.7286407738046214, 0.7297544933155843, 0.7142621936295499, 0.7099452601479281, 0.6925035955143517, 0.7115282649219847, 0.6964512620824376, 0.6952543347314238, 0.6870654238811841, 0.683580722980149, 0.6807600736397604, 0.6830525968950564, 0.6799355485199654, 0.6760871400450199, 0.6751337085008274, 0.6724880298666274, 0.667523579692891, 0.6603418753966207, 0.6596891545049581, 0.6504807444359444, 0.6601558058662752, 0.6494408780163967, 0.6494469315289916, 0.6450533542446, 0.6518348460703824, 0.642198413283739, 0.6426446516641993, 0.6406094126492884, 0.6293587505683577, 0.6306143691038743, 0.6356098499626862, 0.6282730835099121, 0.6269656455260163, 0.6162338743214878, 0.6240020913061228, 0.607853972507175], "accuracy": [0.1310262829065323, 0.23180557787418365, 0.31382909417152405, 0.3737947344779968, 0.416589617729187, 0.45528993010520935, 0.4963677227497101, 0.5309734344482422, 0.5527671575546265, 0.5711266398429871, 0.5996565818786621, 0.6115440726280212, 0.6214502453804016, 0.6411306262016296, 0.6515651941299438, 0.6542068123817444, 0.6626601219177246, 0.6758684515953064, 0.6841896772384644, 0.681547999382019, 0.6857746839523315, 0.6902654767036438, 0.6975300312042236, 0.6968696117401123, 0.69673752784729, 0.7098137736320496, 0.709549605846405, 0.7106062769889832, 0.7153612375259399, 0.7205125093460083, 0.7265883088111877, 0.7251353859901428, 0.7263241410255432, 0.7231541275978088, 0.7293620109558105, 0.728701651096344, 0.7277770638465881, 0.7345132827758789, 0.7304186820983887, 0.7320036888122559, 0.7392682433128357, 0.7362303733825684, 0.7486461400985718, 0.7448157668113708, 0.7409853339195251, 0.7407211661338806, 0.7458723783493042, 0.7497028112411499, 0.7503632307052612, 0.7471932172775269, 0.750231146812439, 0.7535332441329956, 0.7531369924545288, 0.7511557340621948, 0.7553823590278625, 0.7598732113838196, 0.7547219395637512, 0.755118191242218, 0.7573636174201965, 0.765949010848999, 0.7560427784919739, 0.7697794437408447, 0.7578919529914856, 0.7619865536689758, 0.7581561207771301, 0.7663452625274658, 0.7718927264213562, 0.7675340175628662, 0.7736098170280457, 0.7700436115264893, 0.770439863204956, 0.7725531458854675, 0.7769119143486023, 0.7770439982414246], "val_loss": [1.9346859795706612, 1.8904003415788924, 1.824209553854806, 1.7199177060808455, 1.5667666367122106, 1.3756490094321114, 1.1884650162288122, 1.0395560264587402, 0.9347575732639858, 0.8607162237167358, 0.8036831276757377, 0.7659434420721871, 0.7333097968782697, 0.7037414312362671, 0.6859237807137626, 0.6682829175676618, 0.6515837226595197, 0.6383620841162545, 0.6276733875274658, 0.6170551947184971, 0.6086245775222778, 0.6015829018184117, 0.5932157039642334, 0.5892201321465629, 0.5797699349267142, 0.5777117013931274, 0.5680195944649833, 0.5631706203733172, 0.559678486415318, 0.5525911365236554, 0.5506084987095424, 0.5469120400292533, 0.5417116710117885, 0.5390768391745431, 0.5358283519744873, 0.5314932891300747, 0.5275133337293353, 0.523698261805943, 0.520823563848223, 0.5204786062240601, 0.5162428787776402, 0.5136752639498029, 0.5116547005517142, 0.5126748936516898, 0.5067786829812186, 0.5066568681171962, 0.501598426273891, 0.4978752817426409, 0.4980717556817191, 0.5003455366407122, 0.495309693472726, 0.4939917666571481, 0.49519472462790354, 0.4870123863220215, 0.48385288034166607, 0.48343707833971294, 0.48008339745657785, 0.47928307737622944, 0.47812795639038086, 0.4783449172973633, 0.47582757472991943, 0.47372657912118094, 0.47587828976767405, 0.47393083572387695, 0.46946753774370464, 0.4683403287615095, 0.46681857109069824, 0.4654980216707502, 0.4631390060697283, 0.4602374519620623, 0.46082140718187603, 0.46197663034711567, 0.45907046113695416, 0.4568061317716326], "val_accuracy": [0.32233333587646484, 0.414000004529953, 0.4713333249092102, 0.5353333353996277, 0.5673333406448364, 0.5773333311080933, 0.6169999837875366, 0.6496666669845581, 0.6790000200271606, 0.687666654586792, 0.7023333311080933, 0.6980000138282776, 0.7099999785423279, 0.718666672706604, 0.7250000238418579, 0.7269999980926514, 0.7326666712760925, 0.7353333234786987, 0.734333336353302, 0.7386666536331177, 0.7390000224113464, 0.7450000047683716, 0.7450000047683716, 0.7506666779518127, 0.753000020980835, 0.7536666393280029, 0.749666690826416, 0.753333330154419, 0.762333333492279, 0.7559999823570251, 0.7699999809265137, 0.7710000276565552, 0.765333354473114, 0.765666663646698, 0.7716666460037231, 0.7723333239555359, 0.7743333578109741, 0.7753333449363708, 0.7723333239555359, 0.7693333625793457, 0.7733333110809326, 0.7766666412353516, 0.7743333578109741, 0.7739999890327454, 0.7806666493415833, 0.7773333191871643, 0.7820000052452087, 0.7796666622161865, 0.7793333530426025, 0.7770000100135803, 0.7836666703224182, 0.7846666574478149, 0.7776666879653931, 0.7910000085830688, 0.7910000085830688, 0.7846666574478149, 0.7923333048820496, 0.7916666865348816, 0.7896666526794434, 0.7866666913032532, 0.7973333597183228, 0.7983333468437195, 0.7926666736602783, 0.7913333177566528, 0.7960000038146973, 0.7996666431427002, 0.8016666769981384, 0.7913333177566528, 0.8056666851043701, 0.8023333549499512, 0.8006666898727417, 0.8040000200271606, 0.8033333420753479, 0.8056666851043701]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 2, 2, 2, 6, 1, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 2, 2, 3, 0, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 5], [21, 2, 47, 38, 89, 8, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7685714364051819, "mapping_values": [1, 4, 4, 2, 2, 1, 59, 59, 36, 23, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), grad))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, beta)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2869929666800064, 2.2463180393102604, 2.191545173807261, 2.1072935118037224, 1.9784065979252308, 1.8029512431816481, 1.6146217610904994, 1.4471736919484701, 1.328751741225898, 1.2391640449228414, 1.1664726887207777, 1.1092015525778571, 1.0662155456987623, 1.0195705225643716, 0.9855477025621934, 0.964169503517942, 0.9350442717481897, 0.9189442271695649, 0.8947395315149504, 0.8771817271011286, 0.8727353843384887, 0.8556777822846955, 0.8351545814100494, 0.8396766875492756, 0.8272823174993958, 0.812765159327923, 0.7988724737135238, 0.7930819311036158, 0.7741916009526699, 0.771185526656059, 0.7600057600763543, 0.7669931947437055, 0.7505492274755846, 0.7515426056102565, 0.7453278234023554, 0.7391002623711469, 0.742448133334917, 0.7259819157891002, 0.7285927871923406, 0.7297450530688052, 0.7142690053673909, 0.7100159643883908, 0.6924397057514495], "accuracy": [0.1310262829065323, 0.23180557787418365, 0.3139611780643463, 0.3739268183708191, 0.41685378551483154, 0.4554220139980316, 0.4963677227497101, 0.5308413505554199, 0.5526350736618042, 0.5712587237358093, 0.5993924140930176, 0.611411988735199, 0.6213181614875793, 0.6415268778800964, 0.6510368585586548, 0.6535464525222778, 0.6625280380249023, 0.6756042838096619, 0.6839255094528198, 0.6811517477035522, 0.685510516166687, 0.6902654767036438, 0.698190450668335, 0.6964733600616455, 0.6977941989898682, 0.7100779414176941, 0.7099458575248718, 0.7106062769889832, 0.7160216569900513, 0.720380425453186, 0.7259278893470764, 0.7250033020973206, 0.7260599732398987, 0.7235503792762756, 0.7289658188819885, 0.7283053994178772, 0.7277770638465881, 0.7347774505615234, 0.7310791015625, 0.7318716049194336, 0.7392682433128357, 0.7368907928466797, 0.748249888420105], "val_loss": [1.9346860476902552, 1.8903931209019251, 1.8242062841142928, 1.7199061257498605, 1.56673230443682, 1.3755991118294852, 1.1884349754878454, 1.0395329339163644, 0.9347332886287144, 0.8607042176382882, 0.8036953551428658, 0.7659567764827183, 0.7333433628082275, 0.703790545463562, 0.6858823469706944, 0.6682884182248797, 0.6515063558306012, 0.6383606025150844, 0.6276252780641828, 0.6170973096575055, 0.6086956432887486, 0.6016143390110561, 0.5931227207183838, 0.5893525225775582, 0.5796823160988944, 0.5775766032082694, 0.5678787742342267, 0.5631254400525775, 0.5596932002476284, 0.5525520018168858, 0.5505679675510952, 0.546842098236084, 0.5417729275567191, 0.5391151223863874, 0.535851069859096, 0.5311872788837978, 0.5274932043892997, 0.5237447534288678, 0.5207676717213222, 0.5206901005336216, 0.5161668062210083, 0.5137872866221836, 0.5117063692637852], "val_accuracy": [0.32233333587646484, 0.414000004529953, 0.4716666638851166, 0.5353333353996277, 0.5680000185966492, 0.5770000219345093, 0.6169999837875366, 0.6499999761581421, 0.6790000200271606, 0.6869999766349792, 0.7020000219345093, 0.6980000138282776, 0.7099999785423279, 0.7183333039283752, 0.7243333458900452, 0.7269999980926514, 0.7333333492279053, 0.7353333234786987, 0.734000027179718, 0.7393333315849304, 0.7393333315849304, 0.7443333268165588, 0.7450000047683716, 0.750333309173584, 0.7516666650772095, 0.7540000081062317, 0.75, 0.753333330154419, 0.762666642665863, 0.7559999823570251, 0.7699999809265137, 0.7703333497047424, 0.765666663646698, 0.7649999856948853, 0.7710000276565552, 0.7723333239555359, 0.7753333449363708, 0.7760000228881836, 0.7720000147819519, 0.7680000066757202, 0.7733333110809326, 0.7756666541099548, 0.7739999890327454]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [12, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 0, 3, 3, 4, 9, 1, 3, 3, 0, 2, 7, 5, 2, 5, 2, 4, 9, 8, 9, 6, 2, 5, 3, 4, 2, 9, 8, 5, 2, 4, 2, 3, 2, 9], [0, 2, 3, 1, 3, 3, 0, 0, 3, 3, 0, 3, 3, 1, 3, 2, 0, 1, 1, 2, 3, 1, 0, 3, 1, 0, 2], [21, 72, 78, 38, 37, 47, 4, 28, 91], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7385714054107666, "mapping_values": [1, 4, 4, 2, 2, 1, 54, 54, 35, 19, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad))))), grad)), tf.math.square(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.multiply(tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3016287191842193, 2.2928643248037437, 2.277429729641043, 2.253363127154823, 2.222163920924648, 2.1813257533829082, 2.1220727707212, 2.0338419453972727, 1.9144231254052115, 1.7654921767608034, 1.6050166055558144, 1.484752929961724, 1.4183679455858038, 1.3624210366640959, 1.373677256431373, 1.3641110394435898, 1.2433702330846892, 1.1604427025223987, 1.029019859756351, 0.9435927096359199, 0.9312199996352558, 0.9146292573818993, 0.9111294860868816, 0.9183994783717155, 0.9018838458514059, 0.8702360841859805, 0.8446201309630617, 0.8317345708525964, 0.8089083833008583, 0.8136777105647591, 0.7952670074567315, 0.8124308709722894, 0.8097428981543942, 0.8018779105923478, 0.7895407472477456], "accuracy": [0.09087307006120682, 0.11015717685222626, 0.1554616242647171, 0.22480517625808716, 0.2867520749568939, 0.33284902572631836, 0.37604016065597534, 0.40589091181755066, 0.41645753383636475, 0.4387795627117157, 0.46730947494506836, 0.4900277256965637, 0.5054814219474792, 0.5295205116271973, 0.5410117506980896, 0.5506538152694702, 0.5799762010574341, 0.6141856908798218, 0.6458855867385864, 0.650640606880188, 0.6425835490226746, 0.654999315738678, 0.6629242897033691, 0.6806234121322632, 0.6791704893112183, 0.6840575933456421, 0.6917183995246887, 0.6880200505256653, 0.6934354901313782, 0.6946242451667786, 0.6934354901313782, 0.6900013089179993, 0.693831741809845, 0.6966054439544678, 0.7082287669181824], "val_loss": [1.9664850234985352, 1.9543298993791853, 1.935173715863909, 1.9096111570085799, 1.8764278548104423, 1.8299311229160853, 1.7614802633013045, 1.6610495703560966, 1.5202392169407435, 1.3441566399165563, 1.162644931248256, 1.0094716548919678, 0.8930344581604004, 0.8141133955546788, 0.7879622663770404, 0.7495595727648053, 0.7444835730961391, 0.7233602830341884, 0.6695547274180821, 0.6622276817049298, 0.6719515493937901, 0.6785540410450527, 0.6871483155659267, 0.6808559724262783, 0.6579876116343907, 0.6325234174728394, 0.6151096991130284, 0.6044808115277972, 0.5958256040300641, 0.593300427709307, 0.5980293580463955, 0.5994692019053868, 0.5939581564494542, 0.5878784826823643, 0.582309433392116], "val_accuracy": [0.06733333319425583, 0.18333333730697632, 0.3253333270549774, 0.3776666522026062, 0.41366666555404663, 0.4410000145435333, 0.4713333249092102, 0.5083333253860474, 0.5346666574478149, 0.5720000267028809, 0.6033333539962769, 0.643666684627533, 0.6703333258628845, 0.6816666722297668, 0.6683333516120911, 0.6923333406448364, 0.7006666660308838, 0.7036666870117188, 0.7110000252723694, 0.7163333296775818, 0.7046666741371155, 0.7179999947547913, 0.7239999771118164, 0.7210000157356262, 0.7276666760444641, 0.7223333120346069, 0.7243333458900452, 0.7213333249092102, 0.7319999933242798, 0.7390000224113464, 0.7379999756813049, 0.7363333106040955, 0.737333357334137, 0.737333357334137, 0.7379999756813049]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [74, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 0, 6, 5, 3, 3, 9, 3, 2, 2, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 0, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.30085715651512146, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 6, 5, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.549307563821039, 2.4351519001252964, 2.3039738205146514, 2.2672299473371647, 2.412290423096856, 2.304453754406154, 2.303244655851234, 2.303061104343552, 2.302931099897835], "accuracy": [0.1904636174440384, 0.2254655957221985, 0.09998679161071777, 0.14581957459449768, 0.11847840249538422, 0.09998679161071777, 0.09774138033390045, 0.09615638852119446, 0.0944393053650856], "val_loss": [1.958289555140904, 1.97566134589059, 1.9716860226222448, 2.2534099987574985, 1.9755409785679408, 1.9739488192967005, 1.9737484795706612, 1.9736781120300293, 1.9737474577767509], "val_accuracy": [0.15199999511241913, 0.10100000351667404, 0.125, 0.3050000071525574, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.10066666454076767, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [21, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 2, 3, 6, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 9, 2, 0, 0, 8, 2, 7, 0, 6, 2, 2, 1, 7], [3, 3, 3, 1, 1, 1, 2, 3, 3, 1, 3, 3, 3, 3, 3, 2, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 0, 2, 3, 3], [21, 2, 11, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.2777142822742462, "mapping_values": [1, 4, 4, 2, 2, 1, 68, 68, 41, 27, 3, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 70, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), alpha)), tf.math.add(beta, beta)))))))), grad)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, alpha)))))), grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), beta))), tf.math.add(beta, tf.math.sqrt(grad))))), alpha), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))))), tf.math.negative(tf.math.add(beta, beta)))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad))), tf.math.add(beta, beta)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.2979621385554942, 2.281860398862025, 2.2625029706495186, 2.23514913555307, 2.2106130622901055, 2.2059093631096425, 113546871.43501353, NaN, NaN], "accuracy": [0.1006472036242485, 0.12574297189712524, 0.1570466309785843, 0.17250032722949982, 0.1904636174440384, 0.1880861222743988, 0.1418570876121521, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9574952806745256, 1.9372677121843611, 1.911428724016462, 1.8809319223676408, 1.849677903311593, 1.8439709118434362, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.1860000044107437, 0.2446666657924652, 0.28333333134651184, 0.26899999380111694, 0.1743333339691162, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 1, 2, 6, 5, 3, 3, 3, 3, 2, 9, 2, 3, 8, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [35, 32, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.16742856800556183, "mapping_values": [1, 17, 17, 10, 7, 2, 33, 33, 19, 14, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), alpha)), alpha)), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.square(tf.math.add(beta, grad))), grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), beta)), grad)))), alpha)), grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3013513775045658, 2.2951859532881405, 2.29704869251682, 2.300297575509622, 2.301534215771936, 2.302194570081109, 2.3023363520456357], "accuracy": [0.08968432247638702, 0.11913882195949554, 0.11755382269620895, 0.10051512718200684, 0.08413683623075485, 0.06194690242409706, 0.06617355346679688], "val_loss": [1.966458797454834, 1.9665402003696986, 1.9704509462629045, 1.972463880266462, 1.973299503326416, 1.973560401371547, 1.973703384399414], "val_accuracy": [0.12066666781902313, 0.1653333306312561, 0.1313333362340927, 0.08933333307504654, 0.06199999898672104, 0.07999999821186066, 0.054666668176651]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 8, 2, 2, 6, 1, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 47, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10999999940395355, "mapping_values": [1, 4, 4, 2, 2, 0, 4, 4, 2, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3018256782178534, 2.298955872011317, 2.2998798161197915, 2.3015038602466453, 2.302265145413045, 2.302591306343527, 2.3026708228287993], "accuracy": [0.08836349099874496, 0.10434553027153015, 0.10302469879388809, 0.0948355570435524, 0.0746268630027771, 0.07013604789972305, 0.09298639744520187], "val_loss": [1.9689323561532157, 1.9699640955243791, 1.971895967211042, 1.973114286150251, 1.9736698695591517, 1.973834787096296, 1.9739300182887487], "val_accuracy": [0.08433333039283752, 0.13766667246818542, 0.12399999797344208, 0.08166666328907013, 0.05400000140070915, 0.0989999994635582, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 2, 3, 6, 8, 6, 5, 3, 3, 3, 3, 5, 9, 1, 3, 9, 5, 1, 7, 8, 2, 6, 2, 5, 2, 2, 6, 6, 0, 2, 8, 2, 3, 0, 8, 8, 2, 7, 0, 5, 7, 5, 3, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 2, 3, 1, 2, 3, 4, 2, 3, 4, 2, 4, 0, 2, 2, 3, 3], [21, 2, 78, 80, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 67, 67, 42, 25, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, alpha)), tf.math.add(beta, grad)))))))), grad)))))), tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(alpha, tf.math.negative(tf.math.add(beta, beta))))), grad)), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, beta), grad)), grad)), tf.math.square(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08440100401639938, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 8, 2, 2, 6, 1, 3, 3, 9, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 0, 3, 0, 3, 1, 3, 3, 0, 1, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 53, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.357564600089349, 6936.332551413271, 6.5074447156696785e+28, 2.495295135021651, 2.9959188490779316, 4.211077502500962, 6.351818620757089], "accuracy": [0.04385153949260712, 0.05177651718258858, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.2125913075038364, 121400950784.0, 2.0542801448277066, 2.322156156812395, 3.053992543901716, 4.56919492994036, 6.821639197213309], "val_accuracy": [0.004999999888241291, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 9, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 3, 5, 3, 7, 8, 2, 5, 2, 4, 9, 2, 9, 6, 2, 5, 3, 4, 2, 9, 8, 8, 2], [0, 2, 3, 1, 3, 2, 3, 0, 3, 3, 3, 3, 3, 1, 3, 2, 0, 1, 1, 2, 3, 3, 0, 3, 1, 0, 2], [21, 72, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08440100401639938, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [8, 5, 3, 2, 2, 6, 3, 5, 4, 3, 3, 2, 9, 1, 3, 9, 0, 2, 7, 8, 2, 6, 2, 4, 2, 2, 9, 1, 0, 0, 4, 2, 2, 9, 0, 8, 2, 3, 1, 0, 6, 5], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 2, 0, 3, 5], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08440100401639938, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 5, 6, 2, 8, 4, 3, 2, 2, 9, 9, 2, 2, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 0, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 53, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.357564600089349, 6935.789788110492, 6.502897371777628e+28, 2.4952977484936225, 2.9959280481742847, 4.211099049796549, 6.35185224196505], "accuracy": [0.04385153949260712, 0.05177651718258858, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.2125918524605885, 121372672000.0, 2.054281234741211, 2.3221607889447893, 3.05400596346174, 4.569219589233398, 6.821673393249512], "val_accuracy": [0.004999999888241291, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 2, 6, 5, 6, 8, 5, 4, 0, 2, 2, 0, 9, 2, 2, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [0, 0, 3, 1, 1, 1, 1, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [95, 86, 10, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 18, 18, 11, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(tf.math.add(beta, alpha), alpha)), alpha))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17210407555103302, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 9, 3, 1, 2, 6, 5, 9, 3, 0, 5, 2, 9, 1, 3, 8, 5, 3, 7, 8, 2, 6, 2, 2, 5, 9, 9, 6, 0, 0, 9, 8, 3, 9, 4, 8, 2, 9], [3, 3, 3, 1, 1, 1, 3, 3, 3, 2, 3, 1, 0, 0, 3, 2, 3, 1, 1, 3, 4, 2, 3], [93, 20, 78, 38, 2, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.30289497808175, 2.3024039212754532, 2.3033421440147186, 2.3023586542126746, 2.302098982779105, 2.3030391214010724], "accuracy": [0.0870426595211029, 0.08770307898521423, 0.08638224750757217, 0.0886276587843895, 0.09219389408826828, 0.08466517180204391], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 8, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.30289497808175, 2.3024039212754532, 2.3033421440147186, 2.3023586542126746, 2.302098982779105, 2.3030391214010724], "accuracy": [0.0870426595211029, 0.08770307898521423, 0.08638224750757217, 0.0886276587843895, 0.09219389408826828, 0.08466517180204391], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 9, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [7, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 3, 5, 3, 7, 8, 2, 5, 2, 4, 9, 2, 9, 6, 2, 5, 3, 4, 2, 9, 8, 8, 2], [0, 2, 3, 1, 3, 2, 3, 0, 3, 3, 3, 3, 3, 1, 3, 2, 0, 1, 1, 2, 3, 3, 0, 3, 1, 0, 2], [21, 72, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.026571428403258324, "mapping_values": [1, 3, 3, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3033579585574575, 2.3059427726223105, 2.3132358586169377, 2.3216664675220193, 2.3346283845519817, 2.3528298769235265], "accuracy": [0.08611807972192764, 0.08057060092687607, 0.06775855273008347, 0.05573900416493416, 0.04371945559978485, 0.02786950208246708], "val_loss": [1.9726661954607283, 1.9772717612130302, 1.9849238395690918, 1.9957172530038017, 2.009850433894566, 2.027552672794887], "val_accuracy": [0.029333332553505898, 0.014666666276752949, 0.008999999612569809, 0.006000000052154064, 0.004999999888241291, 0.004333333112299442]}}]