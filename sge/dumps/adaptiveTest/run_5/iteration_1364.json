[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.8514285683631897, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.8796560802416888, 1.0557648088827802, 0.7618440631956646, 0.6729798239093998, 0.6103797465141628, 0.5690086373579327, 0.5402396086452345, 0.49834298949751166, 0.4845978296538386, 0.46878843055330705, 0.44368354465038456, 0.43197308655317984, 0.42474926572985355, 0.408221222658073, 0.39286766997291866, 0.37208590595997115, 0.3695118663105053, 0.35714755757310684, 0.34893637443294206, 0.3343759426398599, 0.3292907533109023, 0.32124896874013376, 0.30805298052270574, 0.3063136148666898, 0.3001874033462543, 0.2957226160951594, 0.28550572949803, 0.2841078817623954, 0.27987387733074653, 0.26631025606063946, 0.25380070778742886, 0.24356070651732195, 0.2352688529680843, 0.23070667439038647, 0.24159886343462467, 0.22033592282135442, 0.2147342660947168, 0.20867311685643633, 0.21493774305489305, 0.21328098105795396], "accuracy": [0.36203935742378235, 0.6299035549163818, 0.7087571024894714, 0.7407211661338806, 0.7589486241340637, 0.7812706232070923, 0.7968564033508301, 0.8103289008140564, 0.8152159452438354, 0.8249900937080383, 0.8342359066009521, 0.8378021121025085, 0.8399154543876648, 0.8416325449943542, 0.8498216867446899, 0.8555012345314026, 0.8598600029945374, 0.863558292388916, 0.8671245574951172, 0.8721436858177185, 0.8754457831382751, 0.876370370388031, 0.8815215826034546, 0.8800686597824097, 0.8862766027450562, 0.8842953443527222, 0.889578640460968, 0.8893144726753235, 0.8886540532112122, 0.8973715305328369, 0.9009377956390381, 0.9064852595329285, 0.9068815112113953, 0.9091269373893738, 0.9068815112113953, 0.9133535623550415, 0.9163914918899536, 0.9189010858535767, 0.9152027368545532, 0.9129573106765747], "val_loss": [1.0170816693987166, 0.6253440039498466, 0.5566462278366089, 0.5184038707188198, 0.46179304804120747, 0.4501199211393084, 0.41340942893709454, 0.4058679597718375, 0.3830923693520682, 0.3780431491988046, 0.3687763384410313, 0.3593528951917376, 0.3788377898080008, 0.34362097297395977, 0.34358341353280203, 0.33909625666482107, 0.32817260708127705, 0.32904617275510517, 0.3190153922353472, 0.33404246398380827, 0.32485388006482807, 0.3139707275799343, 0.3213308538709368, 0.317562929221562, 0.30983677932194303, 0.3071725623948233, 0.3166135975292751, 0.3250485488346645, 0.31237036841256277, 0.31102012736456736, 0.3156428933143616, 0.3044383100100926, 0.31172605071749004, 0.31477183955056326, 0.29730469839913504, 0.3194985049111502, 0.3106262172971453, 0.32314272437776836, 0.3086825694356646, 0.3159958975655692], "val_accuracy": [0.597000002861023, 0.7226666808128357, 0.7353333234786987, 0.7609999775886536, 0.7889999747276306, 0.7943333387374878, 0.8173333406448364, 0.8206666707992554, 0.8403333425521851, 0.8383333086967468, 0.8386666774749756, 0.8460000157356262, 0.8276666402816772, 0.8586666584014893, 0.8483333587646484, 0.8556666374206543, 0.8679999709129333, 0.8600000143051147, 0.8656666874885559, 0.8616666793823242, 0.8653333187103271, 0.8706666827201843, 0.8700000047683716, 0.8686666488647461, 0.8730000257492065, 0.8703333139419556, 0.8740000128746033, 0.8666666746139526, 0.8730000257492065, 0.8763333559036255, 0.8766666650772095, 0.8736666440963745, 0.8766666650772095, 0.874666690826416, 0.8836666941642761, 0.8740000128746033, 0.878000020980835, 0.8769999742507935, 0.8806666731834412, 0.8790000081062317]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [84, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.8465714454650879, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.879655904946877, 1.0570239537207207, 0.7629184736362805, 0.6723489424319803, 0.6111385834262734, 0.5703160887018974, 0.5412569512560099, 0.4989036560893106, 0.4859906384705899, 0.4671610329389226, 0.4410065684643215, 0.4321819164843969, 0.4250907519545144, 0.4084330307116299, 0.3917364961734742, 0.3706729946875254, 0.37694341771716944, 0.357111179329511, 0.34875885166228804, 0.3365168640752431, 0.3286424823771567, 0.32342194202805646, 0.31519240501880835, 0.30482105633066536, 0.29853097865562933, 0.29548834793918155, 0.2880334275163412, 0.2777251252534761, 0.26734828880087985, 0.26246273737652204, 0.24978856502656593, 0.24329230735299137, 0.24026045535439278, 0.2321933760910364, 0.23355001653418517, 0.2200811926549562], "accuracy": [0.36203935742378235, 0.628582775592804, 0.7079645991325378, 0.741909921169281, 0.7581561207771301, 0.7815347909927368, 0.7959318161010742, 0.8080834746360779, 0.8170651197433472, 0.8249900937080383, 0.8352925777435303, 0.8389908671379089, 0.8391229510307312, 0.8430854678153992, 0.852331280708313, 0.8548408150672913, 0.8565579056739807, 0.8658037185668945, 0.8676528930664062, 0.8717474341392517, 0.8729361891746521, 0.874389111995697, 0.8786157965660095, 0.878879964351654, 0.8882578015327454, 0.8856161832809448, 0.8898428082466125, 0.8927486538887024, 0.8948619961738586, 0.8968431949615479, 0.8992207050323486, 0.906749427318573, 0.9076740145683289, 0.9064852595329285, 0.9099194407463074, 0.9122969508171082], "val_loss": [1.0184381348746163, 0.6250196525028774, 0.5543831416538784, 0.5218889713287354, 0.4627713646207537, 0.44588169881275724, 0.41352672236306326, 0.4028671213558742, 0.3882299065589905, 0.37605977058410645, 0.3708426867212568, 0.35679566860198975, 0.37833290440695627, 0.3379226497241429, 0.3373872637748718, 0.3348850607872009, 0.3263475980077471, 0.32905570098332, 0.32233554124832153, 0.33161916051592144, 0.32310608455113005, 0.3120142476899283, 0.32093712261744906, 0.3106938259942191, 0.3159306389944894, 0.3018796614238194, 0.3167062997817993, 0.31694637877600534, 0.31805052927562166, 0.309570848941803, 0.3141488177435739, 0.314880439213344, 0.31212492500032696, 0.31270178726741243, 0.3193950482777187, 0.3280102951186044], "val_accuracy": [0.5960000157356262, 0.7200000286102295, 0.737333357334137, 0.7593333125114441, 0.7903333306312561, 0.7986666560173035, 0.8169999718666077, 0.8220000267028809, 0.8306666612625122, 0.8413333296775818, 0.8386666774749756, 0.8473333120346069, 0.8243333101272583, 0.8633333444595337, 0.8516666889190674, 0.8643333315849304, 0.8653333187103271, 0.8653333187103271, 0.8656666874885559, 0.8610000014305115, 0.8669999837875366, 0.8700000047683716, 0.8736666440963745, 0.8740000128746033, 0.871999979019165, 0.8759999871253967, 0.8773333430290222, 0.8740000128746033, 0.8703333139419556, 0.875333309173584, 0.8806666731834412, 0.8713333606719971, 0.8773333430290222, 0.8786666393280029, 0.8759999871253967, 0.8740000128746033]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.8322857022285461, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.8796207396235558, 1.0562651335539646, 0.7625409600174485, 0.6730016070334289, 0.611087294948131, 0.5718716628374189, 0.5407033793646914, 0.4997472473186603, 0.4896577876383492, 0.46951108130135194, 0.4416538069292602, 0.43279697345610324, 0.43182989208217404, 0.4139680861521391, 0.3981050774405866, 0.3772513508174744, 0.368616342631156, 0.35196463536387973, 0.34862356825732066, 0.33435894932886706, 0.3298348918795318, 0.3224590603843294, 0.31276434352920357, 0.30360162285309206, 0.29416505196279996, 0.28988685372987083, 0.2882734885139866, 0.28073596308385973, 0.2666472567129979], "accuracy": [0.36203935742378235, 0.6288469433784485, 0.7077004313468933, 0.7424382567405701, 0.7597411274909973, 0.7812706232070923, 0.7981772422790527, 0.806630551815033, 0.8128384351730347, 0.826310932636261, 0.8352925777435303, 0.8383304476737976, 0.8338396549224854, 0.8400475382804871, 0.8494254350662231, 0.8555012345314026, 0.8609166741371155, 0.8650112152099609, 0.8673887252807617, 0.8714832663536072, 0.8742570281028748, 0.8758420348167419, 0.8776912093162537, 0.8821820020675659, 0.8864086866378784, 0.8861445188522339, 0.8914278149604797, 0.8926165699958801, 0.8945978283882141], "val_loss": [1.0177975041525704, 0.6254504237856183, 0.5567862646920341, 0.5178457157952445, 0.4637857164655413, 0.44513786690575735, 0.4117389832224165, 0.4020620584487915, 0.38890765394483295, 0.37786729846681866, 0.3713967629841396, 0.3591279217175075, 0.3816145232745579, 0.34316457169396536, 0.3403114250728062, 0.3344357524599348, 0.32762140887124197, 0.32819989749363493, 0.32279219797679354, 0.3370893342154367, 0.31981247663497925, 0.3149735076086862, 0.32118983779634747, 0.3084666303225926, 0.31318860394614084, 0.30944108963012695, 0.31684533187321257, 0.32191566058567594, 0.31518101692199707], "val_accuracy": [0.5960000157356262, 0.7203333377838135, 0.7360000014305115, 0.7616666555404663, 0.7893333435058594, 0.7946666479110718, 0.8159999847412109, 0.8199999928474426, 0.831333339214325, 0.8410000205039978, 0.8356666564941406, 0.8500000238418579, 0.8220000267028809, 0.8573333621025085, 0.8539999723434448, 0.8600000143051147, 0.8646666407585144, 0.8619999885559082, 0.8653333187103271, 0.8583333492279053, 0.8673333525657654, 0.8679999709129333, 0.8706666827201843, 0.8790000081062317, 0.8726666569709778, 0.875333309173584, 0.8700000047683716, 0.8706666827201843, 0.8743333220481873]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [9, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 5, 8, 2, 5, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.7474285960197449, "mapping_values": [1, 4, 4, 2, 2, 1, 79, 79, 47, 32, 6, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))))))), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.math.negative(grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.divide_no_nan(grad, grad), beta))))))))), tf.math.pow(grad, alpha))))), tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), beta), grad), grad))))), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(grad, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3009518205592063, 2.296718999237637, 2.287799771813637, 2.2754863411947848, 2.25767860042893, 2.236939718033329, 2.2108867039628204, 2.177918582528794, 2.13623021408205, 2.0824641983947734, 2.0072504031801457, 1.9157719010800387, 1.8122053407737844, 1.6783986931479509, 1.5786404210846297, 1.486216525989926, 1.4157529630681165, 1.3833596685763756, 1.3954477789316668, 1.3949479516691552, 1.3825463707956263, 1.3147258754765998, 1.249954200171996, 1.1644690181947324, 1.0818077122861243, 0.9876450297618665, 0.9419937530418571, 0.9185065968697018, 0.911762494003894, 0.9252014306589534, 0.9206857527047101, 0.917098061370182, 0.9064947037318316, 0.889255513163637, 0.8626240383695382, 0.8468737564287196, 0.8391926463301219, 0.8177817329486852, 0.8240061980811061, 0.8200982369845649, 0.8171106726344487, 0.8127314931192827, 0.8216532499342074, 0.8404828628150935, 0.8078042016588639, 0.802357255963759, 0.7845141435453621, 0.7623353041536253, 0.7667662765466148, 0.7564842183324466, 0.7409047819856073, 0.7297681113669365, 0.7295655218396976, 0.7276053343073031, 0.734546230225405, 0.7331693005788564, 0.7248015539395165, 0.7206951270580858, 0.7224416812696571, 0.7159183569918723, 0.7083107356334863, 0.7066408078337642, 0.6999391232892869, 0.697560876785032, 0.6902723944875243, 0.6877080525043161, 0.6847372506949975, 0.6765504867928832, 0.6812471719764999, 0.6763488089545465, 0.6742252866038715, 0.6639322693778413, 0.6574209857500303, 0.6564234624276182, 0.6531963314614544, 0.6428808705949387, 0.641060645625009, 0.6515757870743414, 0.6431457008652289, 0.6260947604551607, 0.6236602291140054, 0.6201962160160356, 0.6259823698472228, 0.6149109015139166, 0.6155989794699019, 0.6159749728199545, 0.6127797660338267, 0.6138099570552104, 0.6175298960122922, 0.6141159759772656, 0.5913361099024238, 0.5884676411671173, 0.5823677175348272, 0.5882167313722745, 0.5766849615050818, 0.5800033869476933, 0.5747064877227155, 0.5701253868175961, 0.577448703664531, 0.5715347086638507], "accuracy": [0.0952318087220192, 0.10698718577623367, 0.12455421686172485, 0.16483952105045319, 0.21820102632045746, 0.2639017403125763, 0.30682867765426636, 0.3346982002258301, 0.3579447865486145, 0.3761722445487976, 0.3955884277820587, 0.4169858694076538, 0.4315149784088135, 0.45410117506980896, 0.4651961326599121, 0.48408401012420654, 0.5069343447685242, 0.5231805443763733, 0.5279355645179749, 0.5365209579467773, 0.5515784025192261, 0.5650508403778076, 0.5923920273780823, 0.6148461103439331, 0.6339981555938721, 0.6427156329154968, 0.6522256135940552, 0.6477347612380981, 0.6564522385597229, 0.6468101739883423, 0.6633205413818359, 0.6733588576316833, 0.6756042838096619, 0.683000922203064, 0.689869225025177, 0.6893408894538879, 0.6882842183113098, 0.700700044631958, 0.6929071545600891, 0.6923788189888, 0.6934354901313782, 0.6927750706672668, 0.6859067678451538, 0.6848500967025757, 0.698718786239624, 0.698718786239624, 0.7061154246330261, 0.713908314704895, 0.7117950320243835, 0.7160216569900513, 0.7154933214187622, 0.7223616242408752, 0.7220974564552307, 0.7239466309547424, 0.7190595865249634, 0.7263241410255432, 0.7209087014198303, 0.7251353859901428, 0.7275128960609436, 0.7312111854553223, 0.7272487282752991, 0.7390040755271912, 0.743891179561615, 0.7347774505615234, 0.7392682433128357, 0.7407211661338806, 0.7384757399559021, 0.7485140562057495, 0.7457403540611267, 0.7485140562057495, 0.7445515990257263, 0.7453441023826599, 0.7540615797042847, 0.7461365461349487, 0.7479857206344604, 0.7467969655990601, 0.7556465268135071, 0.7606657147407532, 0.7557786107063293, 0.763967752456665, 0.7614582180976868, 0.7655527591705322, 0.7643640041351318, 0.7716285586357117, 0.7640998363494873, 0.7683265209197998, 0.7709681391716003, 0.7709681391716003, 0.7696473598480225, 0.7709681391716003, 0.7799497842788696, 0.7778365015983582, 0.7778365015983582, 0.7754589915275574, 0.7812706232070923, 0.778761088848114, 0.7823272943496704, 0.7828556299209595, 0.7820631265640259, 0.7866860628128052], "val_loss": [1.96855742590768, 1.961784499032157, 1.9508962631225586, 1.9363174438476562, 1.9183051926749093, 1.8967466354370117, 1.8702130317687988, 1.8357725143432617, 1.7898825917925154, 1.7285664422171456, 1.6476178850446428, 1.544381754738944, 1.420259748186384, 1.2840376581464494, 1.151416199547904, 1.0358514785766602, 0.941652945109776, 0.8676407337188721, 0.8163786445345197, 0.7952544859477452, 0.7712052379335675, 0.7423865965434483, 0.7421540021896362, 0.7335760593414307, 0.6965527875082833, 0.6615476608276367, 0.6587531396320888, 0.6707084008625576, 0.6797396796090263, 0.6872784921101162, 0.6928081171853202, 0.6877389975956508, 0.6719574076788766, 0.6504783460072109, 0.6304446118218558, 0.6164091655186245, 0.6083336217062814, 0.6022825581686837, 0.5964816978999546, 0.593758395739964, 0.5966412510190692, 0.6010106972285679, 0.5993608406611851, 0.5906588350023542, 0.5815478563308716, 0.5755048479352679, 0.5719753674098423, 0.5686551332473755, 0.5644298110689435, 0.5598998069763184, 0.5561136518205915, 0.553388203893389, 0.5515000820159912, 0.5500218527657645, 0.5484428065163749, 0.5457421370915004, 0.5419131687709263, 0.5369020700454712, 0.5310478210449219, 0.5248256410871234, 0.518679176058088, 0.513264536857605, 0.5091073683329991, 0.5060517106737409, 0.5033331939152309, 0.5003681523459298, 0.49669063091278076, 0.4924675226211548, 0.48868235519954134, 0.48565677234104704, 0.483278751373291, 0.48100876808166504, 0.47823941707611084, 0.4750501258032663, 0.47165703773498535, 0.46889887537275043, 0.467282806124006, 0.466590336390904, 0.46582700525011334, 0.4642496279307774, 0.4621222700391497, 0.45977021966661724, 0.45787082399640766, 0.4568016699382237, 0.45611466680254253, 0.4551190137863159, 0.4533764634813581, 0.4506240742547171, 0.447412303515843, 0.4441509757723127, 0.44137377398354666, 0.43930745124816895, 0.4378800562449864, 0.43693252972194124, 0.4361447947365897, 0.43537804058619906, 0.4344619001661028, 0.43336030415126253, 0.43205306359699797, 0.43046424218586515], "val_accuracy": [0.052666667848825455, 0.10266666859388351, 0.21433334052562714, 0.32366666197776794, 0.36766666173934937, 0.3986666798591614, 0.42100000381469727, 0.4413333237171173, 0.46133333444595337, 0.4776666760444641, 0.5073333382606506, 0.528333306312561, 0.5576666593551636, 0.5833333134651184, 0.6076666712760925, 0.6389999985694885, 0.6620000004768372, 0.6726666688919067, 0.6836666464805603, 0.6736666560173035, 0.6840000152587891, 0.6949999928474426, 0.6986666917800903, 0.7053333520889282, 0.7070000171661377, 0.7160000205039978, 0.721666693687439, 0.7016666531562805, 0.6946666836738586, 0.7106666564941406, 0.7239999771118164, 0.7296666502952576, 0.7263333201408386, 0.7276666760444641, 0.731333315372467, 0.7310000061988831, 0.7276666760444641, 0.7260000109672546, 0.7306666374206543, 0.7363333106040955, 0.734000027179718, 0.7296666502952576, 0.7266666889190674, 0.7360000014305115, 0.7369999885559082, 0.7429999709129333, 0.7480000257492065, 0.750333309173584, 0.7486666440963745, 0.75, 0.7490000128746033, 0.7506666779518127, 0.7523333430290222, 0.7543333172798157, 0.7556666731834412, 0.762333333492279, 0.7643333077430725, 0.7643333077430725, 0.765333354473114, 0.768666684627533, 0.7699999809265137, 0.7703333497047424, 0.7720000147819519, 0.7749999761581421, 0.7773333191871643, 0.7776666879653931, 0.7816666960716248, 0.781000018119812, 0.781333327293396, 0.7823333144187927, 0.7833333611488342, 0.7820000052452087, 0.7846666574478149, 0.7873333096504211, 0.7893333435058594, 0.7933333516120911, 0.7910000085830688, 0.7903333306312561, 0.7940000295639038, 0.7923333048820496, 0.793666660785675, 0.7960000038146973, 0.7960000038146973, 0.796999990940094, 0.7986666560173035, 0.7990000247955322, 0.8006666898727417, 0.8019999861717224, 0.8040000200271606, 0.8059999942779541, 0.8053333163261414, 0.8056666851043701, 0.8059999942779541, 0.8073333501815796, 0.8069999814033508, 0.8073333501815796, 0.8083333373069763, 0.8100000023841858, 0.8119999766349792, 0.8136666417121887]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 3, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 69, 75, 62, 37, 47, 1, 29, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.5202857255935669, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9407959096325607, 1.3321331121886584, 0.9240674957182303, 0.7976141225990917, 0.7361507704308036, 0.677475983180768, 0.6509123422041104, 0.6515688434284534, 0.6798204016912222, 0.6741001480495799, 0.688435157992978, 0.7307728786809239, 0.7328083117278087, 0.7424951765389569], "accuracy": [0.35041606426239014, 0.5416721701622009, 0.6561880707740784, 0.7213049530982971, 0.7304186820983887, 0.748778223991394, 0.7585523724555969, 0.7552502751350403, 0.7540615797042847, 0.7514199018478394, 0.7436270117759705, 0.7448157668113708, 0.7386078238487244, 0.7427024245262146], "val_loss": [1.2022909436907088, 0.770923376083374, 0.5770572253635952, 0.5509699242455619, 0.5153554167066302, 0.4961121082305908, 0.5019336768559047, 0.4599207980292184, 0.47587031977517263, 0.4613736016409738, 0.4935703618185861, 0.5325176886149815, 0.4922701631273542, 0.5390055179595947], "val_accuracy": [0.44966667890548706, 0.6320000290870667, 0.7446666955947876, 0.7689999938011169, 0.7853333353996277, 0.7760000228881836, 0.7756666541099548, 0.7983333468437195, 0.8026666641235352, 0.8009999990463257, 0.7963333129882812, 0.7940000295639038, 0.7979999780654907, 0.7846666574478149]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 1, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.3791428506374359, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.940645716036347, 1.3334982209926143, 0.9224599259341508, 0.7987377122251224, 0.7344637877984275, 0.6800437564343478, 0.6533459407180103, 0.6485979371633921, 0.6828429775467292, 0.6454992011443357, 0.6726222292165462, 0.6786085855707343, 0.7183489601342213, 0.7657525619227952, 0.8859351896465005, 0.9878435586941414], "accuracy": [0.3505481481552124, 0.54220050573349, 0.656980574131012, 0.7185312509536743, 0.7313432693481445, 0.7430986762046814, 0.7580240368843079, 0.7534011602401733, 0.7504953145980835, 0.7642319202423096, 0.7586844563484192, 0.7519482374191284, 0.7383436560630798, 0.7238145470619202, 0.6979262828826904, 0.6693964004516602], "val_loss": [1.2047481196267265, 0.7700928790228707, 0.5739482641220093, 0.5485321623938424, 0.5234659739903041, 0.507088473864964, 0.471515280859811, 0.4614371231624058, 0.48872036593300955, 0.49132442474365234, 0.4808962174824306, 0.5345110041754586, 0.5114748988832746, 0.5487051180430821, 0.6134408031191144, 1.5076657022748674], "val_accuracy": [0.4490000009536743, 0.6356666684150696, 0.746666669845581, 0.7693333625793457, 0.7723333239555359, 0.7723333239555359, 0.8069999814033508, 0.8033333420753479, 0.8006666898727417, 0.8029999732971191, 0.8086666464805603, 0.8006666898727417, 0.7940000295639038, 0.7616666555404663, 0.75, 0.3773333430290222]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 1, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 10, 6, 4, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.subtract(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.square(beta)))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 10, 6, 4, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.subtract(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.square(beta)))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [8, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 2, 1, 0, 0, 0, 0, 10, 6, 4, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.subtract(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.square(beta)))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [88, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 96, 96, 57, 39, 10, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), grad))))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.square(grad), beta), tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))), alpha)))), tf.math.add(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), grad)))))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [88, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 1, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [35, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 96, 96, 57, 39, 9, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), grad))))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.square(grad), beta), tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), grad)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))), alpha)))), tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), grad)))))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 1, 3, 3, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 5, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 0, 96, 96, 57, 39, 9, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), grad))))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.square(grad), beta), tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), grad)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))), alpha)))), tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), grad)))))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 8, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 1, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 1, 96, 96, 57, 39, 9, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.pow(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), grad))))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.square(grad), beta), tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), grad)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))), alpha)))), tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), grad)))))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.0786673359199193e+24, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05732399970293045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [316827451.82686114, 45386667390.089554, 780895328283.862, 5531488367028.597, 24491472561003.355, 80098804552740.92], "accuracy": [0.0952318087220192, 0.09972262382507324, 0.1010434553027153, 0.10394927859306335, 0.10091137140989304, 0.09853387624025345], "val_loss": [2540559725.714286, 136899877741.71428, 1469281543314.2856, 8009768276553.143, 30001919426560.0, 88497547079094.86], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [16, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 96, 96, 57, 39, 10, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), grad))))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.square(grad), beta), tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))), alpha)))), tf.math.add(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), grad)))))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3018947860993384, 2.3037253525184367, 2.307676323778704, 2.3161650261055793, 2.3308926270134367, 2.3929689299901242, 7.033416589135501e+19, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09206181764602661, 0.09113723784685135, 0.08334434032440186, 0.08889182657003403, 0.08809932321310043, 0.08691058307886124, 0.0936468094587326, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9717384747096471, 1.9736755234854562, 1.9773857252938407, 1.9830033438546317, 1.9953058787754603, 2.087482452392578, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03500000014901161, 0.02199999988079071, 0.01899999938905239, 0.04533333331346512, 0.08166666328907013, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [56, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 96, 96, 57, 39, 10, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), grad))))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.square(grad), beta), tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad))))), alpha)))), tf.math.add(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), grad)))))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301631784867365, 2.301997278722648, 2.3021775577770893, 2.3028584060699178, 2.3024216027638347, 2.3028663253708603], "accuracy": [0.09298639744520187, 0.09351472556591034, 0.08968432247638702, 0.09417514503002167, 0.09272222965955734, 0.0936468094587326], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 3, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 4, 0, 8, 2, 9, 3, 6, 2, 4, 0, 0, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 2, 5, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 5, 1, 1], [26, 99, 75, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [7, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [64, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301631784867365, 2.301997278722648, 2.3021775577770893, 2.3028584060699178, 2.3024216027638347, 2.3028663253708603], "accuracy": [0.09298639744520187, 0.09351472556591034, 0.08968432247638702, 0.09417514503002167, 0.09272222965955734, 0.0936468094587326], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]