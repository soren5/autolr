[{"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 7, 1, 4, 8, 4, 2, 7, 4, 3, 2, 7, 0, 6, 1, 2, 3, 9, 7, 5, 5, 4, 5, 8, 5, 5], [2, 0, 2, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 3, 2, 0, 2], [40, 28, 79, 39, 41, 36], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7674285769462585, "mapping_values": [1, 44, 44, 27, 17, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.square(grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2931516756234847, 2.2722109225384863, 2.24872661222635, 2.222810520991642, 2.18951896244367, 2.144525098699888, 2.0907486143554315, 2.0177018468909966, 1.9260594807186335, 1.8333392602861076, 1.732835032416845, 1.6303574777062007, 1.534900259001695, 1.443157457908572, 1.369905478572329, 1.3156475078601406, 1.2591687227835382, 1.2138766790220468, 1.1772162733360163, 1.1416955839578329, 1.105315402907907, 1.0857645572845758, 1.061301703371817, 1.0310878379706143, 1.012465896505359, 1.0027676785957418, 0.9832571943312305, 0.9644533323574028, 0.9553409228786549, 0.9318313638311508, 0.9266805531578356, 0.9114962863868584, 0.9075743495166231, 0.8975970784529184, 0.889050104079261, 0.8738162880717897, 0.8753485666951326, 0.861048411691603, 0.8528174331568928, 0.843363975568486, 0.8388158986990746, 0.8285661851410318, 0.8207506770156142, 0.8286902279334849, 0.8180471957477801, 0.8107306582107993, 0.8096427889768364, 0.7982887811176435, 0.7883979783806393, 0.8000282047919436, 0.7934096337876315, 0.784908184348915, 0.7775157153519815, 0.7725115306404808, 0.7711362881258006, 0.7612956390955885, 0.76019093888295, 0.7595912072841502, 0.754748416008368, 0.7469343925747401, 0.7541649181451371, 0.7469528161570884, 0.7367314188597839, 0.7364225347737091, 0.7394988036914635, 0.7357286234510384, 0.7393737898810098, 0.7291662231680109, 0.7217949281956274], "accuracy": [0.11821424216032028, 0.1670849323272705, 0.227314755320549, 0.28001585602760315, 0.32122573256492615, 0.3481706380844116, 0.3809272348880768, 0.4010038375854492, 0.42742040753364563, 0.44749704003334045, 0.46413949131965637, 0.4908202290534973, 0.505877673625946, 0.5259543061256409, 0.5425967574119568, 0.5515784025192261, 0.570202112197876, 0.5793157815933228, 0.5856558084487915, 0.59661865234375, 0.6104874014854431, 0.6145819425582886, 0.6248844265937805, 0.6369040012359619, 0.6399418711662292, 0.6435081362724304, 0.6516972780227661, 0.6563201546669006, 0.6567164063453674, 0.6670188903808594, 0.6634526252746582, 0.6795667409896851, 0.6732267737388611, 0.6795667409896851, 0.6826046705245972, 0.6863030195236206, 0.687491774559021, 0.6930392384529114, 0.6934354901313782, 0.6991150379180908, 0.6960771083831787, 0.7065116763114929, 0.705058753490448, 0.6995112895965576, 0.7065116763114929, 0.707568347454071, 0.7053229212760925, 0.713908314704895, 0.7148329019546509, 0.7082287669181824, 0.7125874757766724, 0.7160216569900513, 0.7124554514884949, 0.7199841737747192, 0.7215691208839417, 0.719852089881897, 0.7256637215614319, 0.7180029153823853, 0.7217012047767639, 0.7298903465270996, 0.7253995537757874, 0.7218332886695862, 0.7312111854553223, 0.7321357727050781, 0.733588695526123, 0.7310791015625, 0.7272487282752991, 0.7321357727050781, 0.7316074371337891], "val_loss": [1.9508637700762068, 1.9301204681396484, 1.9062418256487166, 1.876976421901158, 1.8399357795715332, 1.7914772714887346, 1.7302945000784737, 1.6533686092921667, 1.5605196612221854, 1.4577452795846122, 1.3515443801879883, 1.2490475518362862, 1.156503779547555, 1.0749355724879675, 1.006556851523263, 0.9503133637564523, 0.9038166999816895, 0.8646307161876133, 0.8325965404510498, 0.8023280586515155, 0.7784468957356044, 0.7585177251270839, 0.7408076013837542, 0.7239407982145037, 0.7102446385792324, 0.6967319931302752, 0.6855289595467704, 0.6760681867599487, 0.6677682059151786, 0.6571642330714634, 0.6508541788373675, 0.6434009756360736, 0.6363760232925415, 0.6294047151293073, 0.6223155600684029, 0.6167364461081368, 0.6120927163532802, 0.6065020390919277, 0.6026636021477836, 0.598260930606297, 0.595489365713937, 0.5897124665124076, 0.5848243917737689, 0.5819141524178642, 0.5801020520074027, 0.5737097944532122, 0.5716786725180489, 0.5703894751412528, 0.5660920654024396, 0.5635803427015033, 0.5601843084607806, 0.5585361548832485, 0.5551822185516357, 0.5529321943010602, 0.5500206095831734, 0.547872509275164, 0.5470617498670306, 0.5453566483088902, 0.5415076357977731, 0.5397380420139858, 0.5360348735536847, 0.5332291296550206, 0.5323116949626377, 0.5294256721224103, 0.5277606419154576, 0.5258898224149432, 0.5246760334287371, 0.5228299924305507, 0.5223592519760132], "val_accuracy": [0.2163333296775818, 0.33899998664855957, 0.39399999380111694, 0.4426666796207428, 0.4699999988079071, 0.500333309173584, 0.5256666541099548, 0.5513333082199097, 0.5640000104904175, 0.5816666483879089, 0.5889999866485596, 0.606333315372467, 0.6240000128746033, 0.6460000276565552, 0.6703333258628845, 0.6726666688919067, 0.6836666464805603, 0.6919999718666077, 0.6993333101272583, 0.70333331823349, 0.7036666870117188, 0.7110000252723694, 0.7066666483879089, 0.7176666855812073, 0.7133333086967468, 0.7226666808128357, 0.7253333330154419, 0.7239999771118164, 0.7306666374206543, 0.731333315372467, 0.7286666631698608, 0.7350000143051147, 0.7350000143051147, 0.7369999885559082, 0.7379999756813049, 0.7363333106040955, 0.7443333268165588, 0.7383333444595337, 0.7480000257492065, 0.7436666488647461, 0.7473333477973938, 0.7483333349227905, 0.7536666393280029, 0.750333309173584, 0.7543333172798157, 0.7559999823570251, 0.7556666731834412, 0.7573333382606506, 0.7563333511352539, 0.7536666393280029, 0.762666642665863, 0.7576666474342346, 0.762666642665863, 0.7606666684150696, 0.7643333077430725, 0.765333354473114, 0.7643333077430725, 0.7716666460037231, 0.7693333625793457, 0.7693333625793457, 0.768666684627533, 0.7706666588783264, 0.7726666927337646, 0.7749999761581421, 0.7726666927337646, 0.7746666669845581, 0.7736666798591614, 0.7746666669845581, 0.7739999890327454]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 7, 1, 4, 8, 5, 2, 7, 4, 3, 2, 7, 0, 6, 1, 2, 3, 9, 7, 8, 9, 4, 5, 8, 5, 5], [2, 0, 2, 2, 0, 2, 1, 3, 1, 1, 0, 2, 0, 3, 2, 2, 2], [40, 28, 79, 39, 41, 36], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [22], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7440000176429749, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2987008218547342, 2.29120503261089, 2.283014727684296, 2.2766294806247, 2.268194590923635, 2.2595383244545832, 2.2516877757969187, 2.241062342892265, 2.2291795981637303, 2.220104449271778, 2.2104001891390994, 2.1962285601089753, 2.182600690578158, 2.1639016438563425, 2.1450761726204557, 2.129684820623603, 2.1059486568092183, 2.0844943185508242, 2.060301241227869, 2.0321060518121925, 2.0020737870336918, 1.9703395164653752, 1.9361352212613898, 1.8999895718371345, 1.8652080084433282, 1.8294071205193576, 1.7937491757916013, 1.7487045730094017, 1.7120622762552327, 1.670592713538666, 1.6388092491494792, 1.6023391456557396, 1.562280414520458, 1.5338488201722809, 1.5005764660818262, 1.4661331988911446, 1.4385812137388614, 1.4123609105688217, 1.3828798735130732, 1.3570346071294679, 1.3329912247422853, 1.3167323558841635, 1.2989497293397467, 1.2853686772695292, 1.2573196104473174, 1.2344447946850776, 1.2254558564995919, 1.2045370829402968, 1.186984927269131, 1.1924887383539977, 1.1749377061567758, 1.1556871805869986, 1.139308557408345, 1.1261686327718488, 1.1212207383137054, 1.1012116234615226, 1.094723340385169, 1.0885601175018762, 1.0781428931395864, 1.06198303069043, 1.065339449768006, 1.0465394976809512, 1.0332195434776894, 1.029569101812282, 1.0264526838324781, 1.0254869162996982, 1.0169876886632827, 1.0078537158442684, 1.0007752806613506, 0.9863305492502524, 0.9866160471221129, 0.9753465182383487, 0.9558159169141784, 0.9653171562106145, 0.9613028226621777, 0.9596271902547143, 0.9552192293012053, 0.9442483259623533, 0.9536429990819574, 0.9472598056625681, 0.9237961577087456, 0.9342528879996761, 0.9301341506610095, 0.91730406594204, 0.913394228783203, 0.9072725914803479, 0.9058418920357875, 0.9001453663647497, 0.9000597364945639, 0.8966121141464325, 0.8957249592670344, 0.8921663347031887, 0.8799366927842863, 0.880640309138179, 0.8779394560643726, 0.8721465461872289, 0.8628192788275115, 0.8844813345178023, 0.876300610996524, 0.8702295696132328], "accuracy": [0.1014397069811821, 0.1146479994058609, 0.13829085230827332, 0.1612732857465744, 0.18134988844394684, 0.20763438940048218, 0.23061682283878326, 0.2417117953300476, 0.26918503642082214, 0.28318583965301514, 0.2975828945636749, 0.3135649263858795, 0.3237352967262268, 0.33958524465560913, 0.35305771231651306, 0.35886937379837036, 0.3809272348880768, 0.3809272348880768, 0.3910976052284241, 0.39704135060310364, 0.4069475531578064, 0.4235900044441223, 0.4247787594795227, 0.4445911943912506, 0.4411570429801941, 0.4539690911769867, 0.4515916109085083, 0.46664905548095703, 0.47087571024894714, 0.48144233226776123, 0.47549861669540405, 0.49425438046455383, 0.5106326937675476, 0.5012547969818115, 0.5120856165885925, 0.5263505578041077, 0.5279355645179749, 0.5354642868041992, 0.5344076156616211, 0.54220050573349, 0.5539559125900269, 0.5597675442695618, 0.5562012791633606, 0.5600317120552063, 0.5712587237358093, 0.5779950022697449, 0.5795799493789673, 0.5885615944862366, 0.5875049233436584, 0.5824857950210571, 0.591731607913971, 0.5954299569129944, 0.5927882790565491, 0.6071853041648865, 0.605468213558197, 0.6103553175926208, 0.6169594526290894, 0.616299033164978, 0.6189407110214233, 0.620261549949646, 0.6262052655220032, 0.6287148594856262, 0.6404702067375183, 0.6396777033805847, 0.6402060389518738, 0.6330735683441162, 0.6427156329154968, 0.6415268778800964, 0.646149754524231, 0.6536785364151001, 0.6534143686294556, 0.6534143686294556, 0.6626601219177246, 0.6561880707740784, 0.6573768258094788, 0.6581693291664124, 0.6586976647377014, 0.6660943031311035, 0.6573768258094788, 0.6629242897033691, 0.6711134314537048, 0.6688680648803711, 0.672170102596283, 0.6705851554870605, 0.6753401160240173, 0.6756042838096619, 0.6754721999168396, 0.6770572066307068, 0.6789063811302185, 0.6831330060958862, 0.6773213744163513, 0.6800950765609741, 0.6807554960250854, 0.683529257774353, 0.6872276067733765, 0.6848500967025757, 0.6911900639533997, 0.6800950765609741, 0.6822084188461304, 0.6902654767036438], "val_loss": [1.963505404336112, 1.956103937966483, 1.9487571716308594, 1.9412191935947962, 1.9335370063781738, 1.925370352608817, 1.916847092764718, 1.9075871876307897, 1.8974801472255163, 1.886673859187535, 1.8748472758701868, 1.8619002614702498, 1.8475708280290877, 1.8316501889910017, 1.814080102103097, 1.7949158804757255, 1.773794719151088, 1.7507899829319544, 1.72584901537214, 1.6988322053636824, 1.6693482398986816, 1.6378986154283797, 1.604421547480992, 1.5689623015267509, 1.5318663120269775, 1.4939230850764684, 1.4550211770193917, 1.4153189318520683, 1.3755224772862025, 1.3360637937273299, 1.2976393699645996, 1.259845495223999, 1.2230326448168074, 1.1883974415915353, 1.1551049436841692, 1.1233440126691545, 1.0940773146493095, 1.0661286626543318, 1.03999662399292, 1.0156131471906389, 0.9925367832183838, 0.9712244101933071, 0.9515978949410575, 0.9338218484606061, 0.9165576866694859, 0.8998815332140241, 0.8850864682878766, 0.8703512975147792, 0.8569213322230748, 0.8449509484427316, 0.8335019179752895, 0.8227008921759469, 0.812235815184457, 0.8021095480237689, 0.7927095379148211, 0.7832896539143154, 0.775262679372515, 0.767481974193028, 0.7599262169429234, 0.7524541616439819, 0.7454275063105992, 0.7386144059044975, 0.7324470451899937, 0.7260147503444127, 0.72062577520098, 0.7156532321657453, 0.7108516693115234, 0.7060721261160714, 0.7017723151615688, 0.6969602448599679, 0.6924693754741124, 0.6881758144923619, 0.6836420467921666, 0.679847138268607, 0.6759770086833409, 0.6725207396915981, 0.6690644536699567, 0.6657258783067975, 0.6627768448420933, 0.6593632698059082, 0.6560342652457101, 0.6540113687515259, 0.6508149419512067, 0.6479431731360299, 0.6449726138796125, 0.6427574668611798, 0.6401080404009137, 0.6375373261315482, 0.6348265409469604, 0.6323818990162441, 0.6301939487457275, 0.6282728740147182, 0.6254003388541085, 0.6231341361999512, 0.6212525367736816, 0.6190555095672607, 0.6174762419291905, 0.6156329086848668, 0.6136748961039952, 0.6117151124136788], "val_accuracy": [0.09133332967758179, 0.15800000727176666, 0.22966666519641876, 0.28999999165534973, 0.3330000042915344, 0.36500000953674316, 0.3816666603088379, 0.39933332800865173, 0.4099999964237213, 0.4266666769981384, 0.4403333365917206, 0.44733333587646484, 0.45633333921432495, 0.46700000762939453, 0.4793333411216736, 0.49000000953674316, 0.5053333044052124, 0.515999972820282, 0.527999997138977, 0.5373333096504211, 0.5490000247955322, 0.5529999732971191, 0.5576666593551636, 0.5616666674613953, 0.5723333358764648, 0.5789999961853027, 0.581333339214325, 0.5853333473205566, 0.5903333425521851, 0.593999981880188, 0.5986666679382324, 0.6066666841506958, 0.6116666793823242, 0.6143333315849304, 0.6226666569709778, 0.6389999985694885, 0.6489999890327454, 0.6536666750907898, 0.659333348274231, 0.6636666655540466, 0.671999990940094, 0.6726666688919067, 0.6759999990463257, 0.6783333420753479, 0.6823333501815796, 0.6830000281333923, 0.687333345413208, 0.6919999718666077, 0.6926666498184204, 0.6940000057220459, 0.6959999799728394, 0.6980000138282776, 0.6996666789054871, 0.7006666660308838, 0.7003333568572998, 0.7039999961853027, 0.7056666612625122, 0.7089999914169312, 0.7106666564941406, 0.7103333473205566, 0.7113333344459534, 0.7120000123977661, 0.7133333086967468, 0.7139999866485596, 0.7160000205039978, 0.7170000076293945, 0.7163333296775818, 0.7193333506584167, 0.7193333506584167, 0.7239999771118164, 0.7236666679382324, 0.7223333120346069, 0.7256666421890259, 0.7250000238418579, 0.7279999852180481, 0.7269999980926514, 0.7289999723434448, 0.7296666502952576, 0.7286666631698608, 0.7303333282470703, 0.7300000190734863, 0.7323333621025085, 0.7316666841506958, 0.7323333621025085, 0.7323333621025085, 0.7323333621025085, 0.7329999804496765, 0.7353333234786987, 0.7350000143051147, 0.7379999756813049, 0.7379999756813049, 0.7396666407585144, 0.7386666536331177, 0.7390000224113464, 0.7396666407585144, 0.7396666407585144, 0.7409999966621399, 0.7413333058357239, 0.7413333058357239, 0.7443333268165588]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 7, 1, 4, 8, 4, 2, 7, 4, 3, 2, 7, 0, 6, 1, 2, 3, 9, 7, 5, 5, 4, 5, 8, 5, 5], [2, 0, 2, 2, 0, 2, 1, 3, 1, 1, 0, 2, 0, 3, 2, 2, 2], [40, 28, 79, 39, 41, 36], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.6554285883903503, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.277026048158185, 2.0905514485517025, 1.563431158230809, 1.3345617167371187, 1.0669564131055416, 1.0376645344957904, 0.904136778553794, 0.9052419609649385, 0.8090258358240033, 0.8267528992035543, 0.7645165071023249, 0.7174516382659542, 0.6976443586521428, 0.6625050084072255, 0.6431580040952738, 0.6203033041251791, 0.6204364195302682, 0.5986867439335899, 0.5993598937484425, 0.5670926334788345, 0.5609459315450389, 0.5614985989903919, 0.5542709773809619, 0.5356093325934248, 0.5292818776652042, 0.5157569172816616, 0.5008326358743835, 0.4920864652026961, 0.495867602167947, 0.48739125861341864, 0.4645446476100568, 0.4592717374045032, 0.46912949908883456, 0.4507629274101683, 0.4415869000896156, 0.4388961217792641, 0.42717408892217484, 0.4271526763412726, 0.42005443466322184, 0.4158765819519581, 0.4259430273822144, 0.40405073641880457, 0.4017811157542481, 0.4022963059663363], "accuracy": [0.15797120332717896, 0.3607185184955597, 0.47285696864128113, 0.5588429570198059, 0.6376964449882507, 0.640338122844696, 0.6782459616661072, 0.6861709356307983, 0.6921146512031555, 0.7022850513458252, 0.709549605846405, 0.7248712182044983, 0.7382115721702576, 0.743891179561615, 0.7569673657417297, 0.76542067527771, 0.7667415142059326, 0.772288978099823, 0.7755910754203796, 0.7843085527420044, 0.7849689722061157, 0.7880068421363831, 0.7924976944923401, 0.8000264167785645, 0.7975168228149414, 0.8057059645652771, 0.8112534880638123, 0.816008448600769, 0.8101968169212341, 0.8144234418869019, 0.8236692547798157, 0.828820526599884, 0.8222163319587708, 0.830669641494751, 0.833179235458374, 0.8400475382804871, 0.8380662798881531, 0.8396512866020203, 0.8448025584220886, 0.8381983637809753, 0.8257825970649719, 0.8404437899589539, 0.8457271456718445, 0.8445383906364441], "val_loss": [1.886328901563372, 1.4957974638257707, 0.8672631638390678, 0.8018837485994611, 0.8370562280927386, 0.6655153547014508, 0.6416297640119281, 0.6166159425462995, 0.6240367719105312, 0.5719488348279681, 0.530446972165789, 0.5174825361796788, 0.4980778523853847, 0.4943130186625889, 0.4742331845419748, 0.46935384614127024, 0.46494315351758686, 0.45998196942465647, 0.4489649874823434, 0.44055975334984915, 0.43208842618124826, 0.4349424072674343, 0.4189045514379229, 0.41202794654028757, 0.4203566142490932, 0.40545232806886944, 0.41103834765298025, 0.41703321252550396, 0.39680348123822895, 0.39810919761657715, 0.40368614877973286, 0.3897124784333365, 0.39215161970683504, 0.39720046520233154, 0.3896976794515337, 0.38483100278036936, 0.3855737958635603, 0.3918167437825884, 0.39736318588256836, 0.3855757713317871, 0.38026675156184603, 0.38317774874823435, 0.37885190759386334, 0.3913122756140573], "val_accuracy": [0.38733333349227905, 0.5256666541099548, 0.6669999957084656, 0.6899999976158142, 0.6683333516120911, 0.7096666693687439, 0.7393333315849304, 0.7170000076293945, 0.7273333072662354, 0.7526666522026062, 0.75, 0.7743333578109741, 0.781333327293396, 0.7723333239555359, 0.7886666655540466, 0.7883333563804626, 0.7893333435058594, 0.8066666722297668, 0.800000011920929, 0.796999990940094, 0.8063333630561829, 0.8133333325386047, 0.812666654586792, 0.8146666884422302, 0.8173333406448364, 0.8199999928474426, 0.8230000138282776, 0.8256666660308838, 0.8343333601951599, 0.8343333601951599, 0.8336666822433472, 0.8426666855812073, 0.8386666774749756, 0.8410000205039978, 0.8456666469573975, 0.8453333377838135, 0.847000002861023, 0.8479999899864197, 0.8486666679382324, 0.8426666855812073, 0.8450000286102295, 0.8446666598320007, 0.8473333120346069, 0.8473333120346069]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 7, 4, 1, 5, 6, 5, 8, 5, 4, 1, 7, 5, 0, 5, 9], [2, 0, 2, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 3, 2, 0, 2], [70, 28, 79, 39, 41, 36], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.6299999952316284, "mapping_values": [1, 25, 25, 17, 8, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))))))))))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.277026079649214, 2.09055137210723, 1.5634343363526726, 1.3345329099721157, 1.0669365449116104, 1.037644299037736, 0.9041152108520203, 0.905044383242807, 0.8091048747005873, 0.8267628624769581, 0.7643124767975359, 0.7171400423378064, 0.6978058027884176, 0.6615814960250104, 0.6425469191539493, 0.6200889662949322, 0.6199045750868397, 0.5986077110796652, 0.5998978481285167, 0.5671625314623594, 0.5607333534964638, 0.5625206288282409, 0.5558455802619323, 0.5352425683191849, 0.5300192416635376, 0.5170536037087204, 0.50369989385836, 0.4936337837248966, 0.5002386169332192, 0.4925063501110072, 0.4636609858966475, 0.46118028192094385, 0.47155530401791534, 0.4537628410538316, 0.4430832784165796, 0.4422873319880113, 0.42725199439333195, 0.424304690374879, 0.41846485490875157, 0.4151758297189446, 0.41324523018886855, 0.40583603115381583, 0.3934717730146279, 0.39918644841021833, 0.3963588717008673, 0.38587952133308956, 0.38838084502431774, 0.3794247958291996, 0.3666185901275542, 0.37179234646739995, 0.3605374036259135, 0.3610895591767205, 0.36315832428881173, 0.35013994919767216], "accuracy": [0.15797120332717896, 0.3607185184955597, 0.47285696864128113, 0.5587108731269836, 0.6375643610954285, 0.640338122844696, 0.6782459616661072, 0.6865671873092651, 0.6914542317390442, 0.7022850513458252, 0.709549605846405, 0.7251353859901428, 0.7397965788841248, 0.7452120184898376, 0.7572315335273743, 0.7666094303131104, 0.7684586048126221, 0.7720248103141785, 0.7774402499198914, 0.7821952104568481, 0.7848368883132935, 0.7873464822769165, 0.7927618622779846, 0.800818920135498, 0.7994980812072754, 0.8055738806724548, 0.8112534880638123, 0.8121780753135681, 0.8107251524925232, 0.8128384351730347, 0.8230088353157043, 0.8276317715644836, 0.8208954930305481, 0.8293488025665283, 0.8323867321014404, 0.839519202709198, 0.8384625315666199, 0.8442742228507996, 0.8405758738517761, 0.8364813327789307, 0.8327829837799072, 0.844010055065155, 0.8454629778862, 0.8445383906364441, 0.8479725122451782, 0.8527275323867798, 0.8511425256729126, 0.8491612672805786, 0.8531237840652466, 0.8557654023170471, 0.8601241707801819, 0.8598600029945374, 0.8580108284950256, 0.8643507957458496], "val_loss": [1.886328901563372, 1.4957967826298304, 0.8672740970339093, 0.8018491438456944, 0.8369968959263393, 0.6654374429157802, 0.6415540831429618, 0.6167812177113124, 0.62393776008061, 0.571960312979562, 0.5301343372889927, 0.5177652324948993, 0.497489265033177, 0.49417923177991596, 0.47474091393607004, 0.4691181012562343, 0.4645500183105469, 0.4611309255872454, 0.44969350951058523, 0.4397412879126413, 0.4323140467916216, 0.43602671793528963, 0.41758313349315096, 0.4136110714503697, 0.4211753266198294, 0.40832440342221943, 0.41447877883911133, 0.4228573100907462, 0.4021685889789036, 0.39896235295704435, 0.40597186769757954, 0.3978060143334525, 0.39971487862723215, 0.39733804975237164, 0.3885660597256252, 0.3841276594570705, 0.3812642863818577, 0.3879352978297642, 0.3880294987133571, 0.3866321189062936, 0.38147532088415964, 0.3728092908859253, 0.36950390679495676, 0.38703915902546476, 0.3961612156459263, 0.3846259457724435, 0.3743891886302403, 0.36427933829171316, 0.36495344979422434, 0.383003899029323, 0.3934932436261858, 0.4025595017841884, 0.4017138310841152, 0.4073320712362017], "val_accuracy": [0.38733333349227905, 0.5256666541099548, 0.6669999957084656, 0.6899999976158142, 0.6679999828338623, 0.7103333473205566, 0.7390000224113464, 0.7170000076293945, 0.7279999852180481, 0.7526666522026062, 0.749666690826416, 0.7743333578109741, 0.7816666960716248, 0.7713333368301392, 0.7866666913032532, 0.7876666784286499, 0.7910000085830688, 0.8069999814033508, 0.7986666560173035, 0.7976666688919067, 0.8096666932106018, 0.8096666932106018, 0.812333345413208, 0.8116666674613953, 0.8169999718666077, 0.8159999847412109, 0.8199999928474426, 0.8233333230018616, 0.8326666951179504, 0.8330000042915344, 0.8303333520889282, 0.8383333086967468, 0.8383333086967468, 0.8450000286102295, 0.8413333296775818, 0.843999981880188, 0.8429999947547913, 0.8456666469573975, 0.8476666808128357, 0.8463333249092102, 0.8456666469573975, 0.8483333587646484, 0.8456666469573975, 0.846666693687439, 0.847000002861023, 0.8539999723434448, 0.8543333411216736, 0.8539999723434448, 0.8553333282470703, 0.8546666502952576, 0.8543333411216736, 0.8533333539962769, 0.8483333587646484, 0.8539999723434448]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [3, 5, 5, 1, 4, 0, 3, 9, 7, 4, 3, 0, 7, 0, 6, 1, 2, 3, 2, 7, 2, 5, 4, 6, 8, 5, 5, 9], [2, 0, 2, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 3, 1, 0, 2], [40, 28, 79, 39, 47, 36, 32], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 5, 0, 5, 4], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 4, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 17, 17, 9, 8, 1, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.negative(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(grad, tf.math.negative(beta)), tf.math.add(beta, tf.math.pow(grad, tf.math.pow(tf.math.multiply(grad, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [4, 5, 4, 4, 4, 6, 8, 2, 6, 5, 7, 4, 6, 4, 4, 0, 8, 7, 7, 9, 5], [2, 0, 0, 2, 2, 0, 1, 3, 2, 1, 0, 0, 0, 3, 2, 0, 2], [40, 91, 79, 22, 69, 98], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [1, 4, 4, 6, 2, 2, 6, 1], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 15, 13, 6, 1, 1, 0, 1, 0, 17, 12, 8, 4, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), sigma)))), tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 8, 4, 2, 5, 6, 5, 8, 5, 4, 1, 7, 5, 0, 5, 9], [2, 2, 0, 1, 0, 3, 1, 3, 2, 1, 0, 0, 0, 3, 2, 0, 2], [40, 91, 79, 22, 69, 98], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1, 1], [0, 1, 0, 0], [3, 4, 5], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 6, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.square(alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.square(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11636507511138916, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 7, 1, 0, 2, 4, 2, 7, 1, 3, 2, 7, 0, 6, 1, 2, 3, 9, 7, 5, 5, 4, 5, 8, 2, 5], [2, 0, 2, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 1, 2, 0, 2], [24, 28, 79, 39, 41, 36], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1], [3, 4, 3, 6, 2], [3, 0, 1, 5, 3, 4], [2], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 11, 7, 5, 2, 1, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [7, 7, 7, 1, 4, 8, 4, 2, 7, 4, 3, 2, 7, 0, 6, 1, 2, 3, 9, 7, 5, 5, 4, 5, 8, 5, 5], [0, 0, 2, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 3, 2, 0, 2, 3], [40, 28, 79, 39, 41, 36, 44], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0], [3, 4, 2, 3], [7, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 45, 45, 27, 18, 7, 1, 1, 0, 1, 0, 9, 6, 4, 2, 1, 1, 0, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), grad))), tf.math.square(grad)), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.square(grad))))))))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302713248456049, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 5, 7, 1, 4, 8, 4, 2, 7, 4, 3, 2, 7, 0, 6, 4, 2, 5, 9, 7, 5, 5, 4, 5, 8, 5, 5, 1], [2, 0, 2, 1, 0, 3, 1, 0, 1, 1, 0, 0, 0, 3, 2, 0, 2], [40, 91, 87, 22, 69, 98, 73, 99], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 45, 45, 28, 17, 8, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.math.add(alpha, alpha)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [7, 5, 7, 1, 4, 8, 5, 5, 7, 4, 3, 2, 7, 6, 6, 8, 2, 3, 1, 7, 8, 9, 4, 5, 8, 5, 5, 2, 9, 2, 5], [2, 0, 2, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 3, 2, 0, 1], [40, 28, 79, 30, 41, 36, 19], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [64], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 31, 17, 7, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(alpha)), tf.math.add(alpha, grad))), alpha), tf.math.add(tf.math.add(alpha, alpha), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad)))))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07726852595806122, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 7, 1, 4, 8, 5, 2, 7, 4, 3, 2, 7, 0, 6, 1, 2, 3, 9, 7, 8, 9, 4, 5, 8, 5, 5], [2, 0, 2, 2, 0, 2, 1, 3, 1, 1, 0, 2, 0, 3, 2, 2, 2], [40, 28, 79, 39, 41, 36], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0], [4, 4, 7, 3], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 9, 4, 4, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(sigma, sigma)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [7, 5, 4, 4, 4, 6, 8, 2, 6, 5, 7, 4, 6, 4, 4, 0, 8, 7, 7, 9, 5], [2, 0, 2, 1, 2, 3, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 2], [40, 91, 79, 22, 69, 98], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4], [4, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 26, 26, 14, 12, 4, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))))))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), alpha)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301994296648184, 2.302390576133229, 2.3019828162787217, 2.3034593151104117, 2.3026576319611256, 2.3029134103477498], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09034473448991776, 0.08625016361474991, 0.09034473448991776, 0.09047681838274002], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 4, 4, 4, 6, 8, 2, 6, 5, 7, 4, 6, 4, 4, 0, 8, 7, 7, 9, 5], [2, 0, 0, 1, 0, 3, 1, 3, 2, 1, 0, 0, 0, 3, 2, 0, 2], [40, 91, 79, 22, 69, 98], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301994296648184, 2.302390576133229, 2.3019828162787217, 2.3034593151104117, 2.3026576319611256, 2.3029134103477498], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09034473448991776, 0.08625016361474991, 0.09034473448991776, 0.09047681838274002], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 5, 7, 1, 4, 0, 3, 2, 7, 4, 3, 9, 7, 0, 6, 1, 2, 3, 2, 7, 1, 5, 4, 5, 8, 9, 5, 9], [2, 0, 2, 1, 0, 0, 2, 3, 1, 2, 0, 2, 0, 3, 2, 0, 1, 1], [31, 28, 88, 39, 41, 21, 47, 44], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 5, 0, 0, 3], [42, 28], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [3, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 44, 44, 27, 17, 8, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(alpha, tf.math.add(alpha, grad)))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.subtract(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.square(tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(grad, tf.math.negative(beta)), tf.math.add(beta, tf.math.pow(grad, tf.math.pow(tf.math.multiply(grad, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301994296648184, 2.302390576133229, 2.3019828162787217, 2.3034593151104117, 2.3026576319611256, 2.3029134103477498], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09034473448991776, 0.08625016361474991, 0.09034473448991776, 0.09047681838274002], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 7, 1, 4, 8, 9, 2, 1, 2, 3, 2, 7, 0, 6, 2, 2, 3, 9, 7, 5, 5, 4, 5, 8, 5, 5], [2, 0, 2, 0, 0, 3, 2, 3, 1, 1, 0, 2, 0, 3, 2, 0, 2], [21, 28, 79, 39, 41, 36], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), grad))), tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301994296648184, 2.302390576133229, 2.3019828162787217, 2.3034593151104117, 2.3026576319611256, 2.3029134103477498], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09034473448991776, 0.08625016361474991, 0.09034473448991776, 0.09047681838274002], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 3, 1, 4, 8, 5, 9, 7, 4, 3, 2, 7, 0, 6, 1, 2, 3, 9, 7, 8, 9, 4, 5, 8, 5, 5], [2, 0, 2, 0, 0, 2, 1, 3, 1, 1, 0, 2, 0, 3, 2, 2, 2], [40, 28, 79, 39, 41, 36], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [3, 0, 1, 5, 3, 4], [27], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 11, 11, 6, 5, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(grad, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301994296648184, 2.302390576133229, 2.3019828162787217, 2.3034593151104117, 2.3026576319611256, 2.3029134103477498], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09034473448991776, 0.08625016361474991, 0.09034473448991776, 0.09047681838274002], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 5, 7, 1, 4, 8, 4, 2, 7, 4, 3, 2, 7, 0, 6, 1, 2, 3, 9, 7, 5, 5, 4, 5, 8, 5, 5], [2, 0, 2, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 3, 2, 0, 2], [40, 28, 79, 39, 41, 36], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301994296648184, 2.302390576133229, 2.3019828162787217, 2.3034593151104117, 2.3026576319611256, 2.3029134103477498], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09034473448991776, 0.08625016361474991, 0.09034473448991776, 0.09047681838274002], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [7, 5, 7, 2, 4, 8, 4, 2, 7, 8, 3, 2, 7, 0, 6, 1, 2, 3, 9, 4, 5, 0, 4, 5, 8, 5, 5, 7], [2, 0, 0, 1, 0, 2, 1, 3, 2, 1, 0, 1, 0, 3, 2, 0, 2], [40, 91, 79, 94, 52, 98, 45, 85], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3], [42], [1, 0, 0, 0, 1], [0, 1, 0, 0], [3, 4], [2, 4, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 45, 45, 28, 17, 7, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha)))), grad))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301994296648184, 2.302390576133229, 2.3019828162787217, 2.3034593151104117, 2.3026576319611256, 2.3029134103477498], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09034473448991776, 0.08625016361474991, 0.09034473448991776, 0.09047681838274002], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [7, 9, 7, 4, 1, 5, 6, 5, 8, 5, 4, 1, 7, 5, 2, 5, 9], [2, 0, 2, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 3, 2, 0, 2], [40, 91, 79, 22, 69, 98], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3], [42], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.301994296648184, 2.302390576133229, 2.3019828162787217, 2.3034593151104117, 2.3026576319611256, 2.3029134103477498], "accuracy": [0.09536388516426086, 0.08757099509239197, 0.09034473448991776, 0.08625016361474991, 0.09034473448991776, 0.09047681838274002], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]