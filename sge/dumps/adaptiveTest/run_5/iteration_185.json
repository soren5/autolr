[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 6, 4, 2, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7742857336997986, "mapping_values": [1, 33, 33, 20, 13, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2836411265397287, 2.230907746467293, 2.150359564044173, 2.016820766040599, 1.8155767101857956, 1.5975918343920261, 1.4148702138859945, 1.28229658621933, 1.1857941375038863, 1.112129007159223, 1.0606191477456255, 1.0133989857896728, 0.9795360635804179, 0.9555095201863778, 0.9168257186158049, 0.8891063611174556, 0.8840793999997679, 0.8566865172872391, 0.8413696440613077, 0.8316055291663575, 0.8159199274841191, 0.8162680176570037, 0.8070428329782557, 0.7958519295804678, 0.7717290397616835, 0.7840008446175456, 0.7630713586053985, 0.7612432942823758, 0.7449610110649327, 0.7388137671232948, 0.7304437517442754, 0.726893654266101, 0.72339255397094, 0.7169292750548787, 0.7151023318439726, 0.7086365513671832, 0.701360011711695, 0.6997655393850251, 0.6956455732270507, 0.6910032508096454, 0.6873682738216467, 0.68293676386105, 0.6706928146309021, 0.6645440941457782], "accuracy": [0.14053626358509064, 0.2607317268848419, 0.35622772574424744, 0.40549466013908386, 0.44670453667640686, 0.4928014874458313, 0.5274072289466858, 0.5659754276275635, 0.5827499628067017, 0.6118082404136658, 0.6203936338424683, 0.6407343745231628, 0.6479989290237427, 0.6584334969520569, 0.6750759482383728, 0.6856426000595093, 0.6742834448814392, 0.6903975605964661, 0.700700044631958, 0.7021529674530029, 0.7063795924186707, 0.707040011882782, 0.7112666964530945, 0.7091533541679382, 0.7161537408828735, 0.7129837274551392, 0.7239466309547424, 0.7147008180618286, 0.7313432693481445, 0.7334566116333008, 0.7316074371337891, 0.7312111854553223, 0.7342491149902344, 0.7375511527061462, 0.7375511527061462, 0.7404569983482361, 0.7404569983482361, 0.7454761862754822, 0.7458723783493042, 0.7456082701683044, 0.7436270117759705, 0.7510236501693726, 0.7532690763473511, 0.7555144429206848], "val_loss": [1.9261956214904785, 1.865546703338623, 1.7617979049682617, 1.5925748007638114, 1.3696170875004359, 1.1519592148917062, 0.995847225189209, 0.8904667241232735, 0.8146616901670184, 0.7684621470315116, 0.7290032761437553, 0.6948130811963763, 0.6808388403483799, 0.6539291824613299, 0.6388282264981952, 0.6242316790989467, 0.6166620424815586, 0.6024776356560844, 0.5908443757465908, 0.58830007484981, 0.5797039270401001, 0.5761012520108905, 0.5673553262438092, 0.5630390984671456, 0.5527365718569074, 0.5547075271606445, 0.5475824390138898, 0.5377529859542847, 0.5379969562802996, 0.5288510322570801, 0.5271178824560983, 0.5205497401101249, 0.5190149375370571, 0.5134326560156686, 0.5134446280343192, 0.5114385059901646, 0.5066253628049578, 0.5061792135238647, 0.5024550301688058, 0.49978632586342947, 0.49626212460654123, 0.49049844060625347, 0.4901785339627947, 0.4922400031770979], "val_accuracy": [0.36666667461395264, 0.47066667675971985, 0.527999997138977, 0.5596666932106018, 0.5903333425521851, 0.621999979019165, 0.6679999828338623, 0.6819999814033508, 0.7043333053588867, 0.6919999718666077, 0.7073333263397217, 0.7146666646003723, 0.7260000109672546, 0.7360000014305115, 0.734333336353302, 0.7409999966621399, 0.7369999885559082, 0.7443333268165588, 0.7553333044052124, 0.746999979019165, 0.746999979019165, 0.7516666650772095, 0.7559999823570251, 0.7566666603088379, 0.7630000114440918, 0.7563333511352539, 0.746999979019165, 0.7639999985694885, 0.7663333415985107, 0.7703333497047424, 0.7753333449363708, 0.7773333191871643, 0.7726666927337646, 0.7746666669845581, 0.778333306312561, 0.7703333497047424, 0.7733333110809326, 0.7710000276565552, 0.7873333096504211, 0.7839999794960022, 0.7796666622161865, 0.7853333353996277, 0.7853333353996277, 0.7799999713897705]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 1, 2, 8, 5, 8, 2, 5, 3, 5, 7, 8, 1, 6, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 1, 0, 1, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 4, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7737143039703369, "mapping_values": [1, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.square(tf.math.sqrt(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, alpha)), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2836411939935126, 2.2309083942692465, 2.1503673546097897, 2.0168506785500964, 1.8156487699575932, 1.5976725788857125, 1.4149283422628303, 1.282338269036192, 1.1858020474834843, 1.1121783481691618, 1.0607065367361714, 1.013447730973601, 0.9796451387104971, 0.9554792339570959, 0.9168998185024128, 0.8892862112089753, 0.8842761358249898, 0.8567351789097225, 0.8416330881280009, 0.8317132893964017, 0.8159443634911425, 0.8163890935221778, 0.8073334406474326, 0.7960323984155944, 0.7719766619954647, 0.7841766920182305, 0.7630317466464639, 0.7616043826450746, 0.7450952969521989, 0.7389752759578883, 0.7308084891850466, 0.7270877417509094, 0.7235186019310342, 0.7170267283026852, 0.7154040388254174, 0.7086637560812049, 0.7014425852988075], "accuracy": [0.14053626358509064, 0.2607317268848419, 0.35609564185142517, 0.40549466013908386, 0.44670453667640686, 0.49266940355300903, 0.5274072289466858, 0.5661075115203857, 0.5827499628067017, 0.6115440726280212, 0.6203936338424683, 0.6407343745231628, 0.6485272645950317, 0.6588297486305237, 0.6753401160240173, 0.6853784322738647, 0.6750759482383728, 0.6903975605964661, 0.7005679607391357, 0.7028133869171143, 0.7063795924186707, 0.7062475085258484, 0.7116629481315613, 0.7087571024894714, 0.7160216569900513, 0.7132478952407837, 0.7236824631690979, 0.7150970697402954, 0.7314753532409668, 0.7321357727050781, 0.7301545143127441, 0.7309470176696777, 0.7339849472045898, 0.7363624572753906, 0.7368907928466797, 0.7400607466697693, 0.739928662776947], "val_loss": [1.926194395337786, 1.8655497687203544, 1.7618190220424108, 1.5926531042371477, 1.3696794509887695, 1.1520017555781774, 0.9959127221788678, 0.890549727848598, 0.8147667646408081, 0.768580709184919, 0.7291335037776402, 0.6949873992374965, 0.6809627839497158, 0.6540243625640869, 0.6390751940863473, 0.6244251217160907, 0.6168053150177002, 0.602622219494411, 0.5909554447446551, 0.588302663394383, 0.5796411548342023, 0.5761943544660296, 0.5673033169337681, 0.5630234820502145, 0.5526569400514875, 0.5545358487537929, 0.5477340391704014, 0.5379155193056379, 0.5380016565322876, 0.5288081850324359, 0.5269099473953247, 0.5202969823564801, 0.5190662826810565, 0.5134281601224627, 0.5135252135140556, 0.5115956578935895, 0.5065618412835258], "val_accuracy": [0.367000013589859, 0.47066667675971985, 0.5276666879653931, 0.5596666932106018, 0.590666651725769, 0.6223333477973938, 0.6679999828338623, 0.6816666722297668, 0.7039999961853027, 0.6923333406448364, 0.7073333263397217, 0.7143333554267883, 0.7260000109672546, 0.7360000014305115, 0.7333333492279053, 0.7406666874885559, 0.7366666793823242, 0.7433333396911621, 0.7549999952316284, 0.7476666569709778, 0.7463333606719971, 0.7526666522026062, 0.7559999823570251, 0.7570000290870667, 0.7630000114440918, 0.7559999823570251, 0.746999979019165, 0.7636666893959045, 0.765666663646698, 0.7703333497047424, 0.7760000228881836, 0.7773333191871643, 0.7726666927337646, 0.7743333578109741, 0.7770000100135803, 0.7693333625793457, 0.7723333239555359]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7734285593032837, "mapping_values": [1, 38, 38, 23, 15, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad))))))))), grad))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2836411760121353, 2.2309073777073456, 2.150363693084888, 2.0168309175831185, 1.815579721389461, 1.5976051733620085, 1.4148913098836478, 1.282327044688794, 1.18578697642819, 1.112126789151591, 1.0606238729272615, 1.0133133372846705, 0.9795688270672264, 0.9554310747897227, 0.9168345276564025, 0.8891258379093896, 0.8840629873085551, 0.856669194528912, 0.8414748580448537, 0.8315381436630751, 0.8159790401917879, 0.816280695315381, 0.807270899007601, 0.7959442991921301, 0.7720097723480828, 0.783857138015811, 0.7629428730822195, 0.7614244954964866, 0.7448729291772799, 0.7388639977154337, 0.7303533117532761, 0.7269974667886465, 0.7232640326739522, 0.7170735606270506, 0.7153988716750648, 0.7086186082670796, 0.7015693957748005, 0.6998249215693002, 0.6957510400441943, 0.6910047999478256, 0.6872411180229046, 0.6831044676423215, 0.6707031577490954, 0.664683472636259], "accuracy": [0.14053626358509064, 0.2607317268848419, 0.35622772574424744, 0.40549466013908386, 0.44644036889076233, 0.49253731966018677, 0.5275393128395081, 0.5661075115203857, 0.5830141305923462, 0.6118082404136658, 0.6206578016281128, 0.6402060389518738, 0.6485272645950317, 0.6586976647377014, 0.6757363677024841, 0.685510516166687, 0.6744155287742615, 0.6897371411323547, 0.6999075412750244, 0.7024171352386475, 0.7063795924186707, 0.7059833407402039, 0.711530864238739, 0.7084929347038269, 0.7160216569900513, 0.7128516435623169, 0.7236824631690979, 0.7143045663833618, 0.7306828498840332, 0.7323999404907227, 0.7309470176696777, 0.7300224304199219, 0.7341170310974121, 0.7376832365989685, 0.7376832365989685, 0.7397965788841248, 0.7409853339195251, 0.7466648817062378, 0.7450799345970154, 0.7456082701683044, 0.7429665923118591, 0.750759482383728, 0.7532690763473511, 0.7552502751350403], "val_loss": [1.926194327218192, 1.865548542567662, 1.7618098258972168, 1.5925962924957275, 1.369626215526036, 1.151966163090297, 0.9958745752062116, 0.8905043601989746, 0.8146944897515433, 0.7685250554765973, 0.7290548597063337, 0.6948666402271816, 0.6808208908353534, 0.6538858924593244, 0.6388987302780151, 0.6241473640714373, 0.6166919810431344, 0.6023927075522286, 0.5907547473907471, 0.5882695402417865, 0.5795144012996128, 0.5759495326450893, 0.5671708754130772, 0.5629937478474208, 0.5526079961231777, 0.5545851503099714, 0.547540409224374, 0.5377942493983677, 0.537817290851048, 0.528740644454956, 0.5268042598451886, 0.5205845492226737, 0.5188518762588501, 0.5132338660103934, 0.5134052549089704, 0.511744771684919, 0.5066354274749756, 0.5062693016869682, 0.502136400767735, 0.49942013195582796, 0.49609827995300293, 0.4905538388660976, 0.49023282527923584, 0.49237608909606934], "val_accuracy": [0.367000013589859, 0.47066667675971985, 0.5276666879653931, 0.5603333115577698, 0.5903333425521851, 0.621666669845581, 0.6679999828338623, 0.6819999814033508, 0.7039999961853027, 0.6916666626930237, 0.7076666951179504, 0.7143333554267883, 0.7263333201408386, 0.7360000014305115, 0.7333333492279053, 0.7413333058357239, 0.7360000014305115, 0.7433333396911621, 0.7556666731834412, 0.7476666569709778, 0.7473333477973938, 0.7523333430290222, 0.7563333511352539, 0.7566666603088379, 0.762333333492279, 0.7559999823570251, 0.746999979019165, 0.7630000114440918, 0.7663333415985107, 0.7713333368301392, 0.7753333449363708, 0.7763333320617676, 0.7723333239555359, 0.7753333449363708, 0.7770000100135803, 0.7696666717529297, 0.7726666927337646, 0.7716666460037231, 0.7866666913032532, 0.7836666703224182, 0.7793333530426025, 0.7860000133514404, 0.7853333353996277, 0.7799999713897705]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7734285593032837, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2836411265397287, 2.230908569611295, 2.1503694597535743, 2.0168572444296027, 1.8156640933032648, 1.5976913253377063, 1.4149438966109438, 1.2823431257243643, 1.185774042857967, 1.112076357040486, 1.060519011092145, 1.0133324583775616, 0.9795120165505823, 0.9554717956894913, 0.9167803455620961, 0.8890769968116603, 0.8841201550436845, 0.856665413566411, 0.8414973513781827, 0.8315825536581409, 0.8159657114878811, 0.8162870898679452, 0.807218285237384, 0.795848247444688, 0.7720444829803117, 0.7840528964382263, 0.763000735847973, 0.7615106975665387, 0.7451256890149558, 0.7389265011645201, 0.7305294177346714, 0.7271704189749977, 0.7235067883786146, 0.7170004776723633, 0.7153016215601397, 0.7088089876517549, 0.7013240271098956, 0.6999048256146642, 0.695655211938166, 0.6910858841431123, 0.6872112284703671, 0.683166190972024, 0.6707765198953715, 0.6645812411365603], "accuracy": [0.14053626358509064, 0.2607317268848419, 0.35622772574424744, 0.40549466013908386, 0.44670453667640686, 0.49266940355300903, 0.5274072289466858, 0.5658433437347412, 0.5830141305923462, 0.6116761565208435, 0.6205257177352905, 0.6409985423088074, 0.6485272645950317, 0.6580372452735901, 0.6753401160240173, 0.6852463483810425, 0.674679696559906, 0.6902654767036438, 0.700700044631958, 0.702681303024292, 0.7061154246330261, 0.7058512568473816, 0.7111346125602722, 0.7091533541679382, 0.715889573097229, 0.711530864238739, 0.7238145470619202, 0.7143045663833618, 0.7310791015625, 0.7314753532409668, 0.7310791015625, 0.7309470176696777, 0.7345132827758789, 0.737022876739502, 0.7378153204917908, 0.7401928305625916, 0.7403249144554138, 0.7458723783493042, 0.7457403540611267, 0.7464007139205933, 0.7434949278831482, 0.7503632307052612, 0.7531369924545288, 0.7552502751350403], "val_loss": [1.926194327218192, 1.865548883165632, 1.761824131011963, 1.5926642077309745, 1.3697046892983573, 1.1520110198429652, 0.9959020614624023, 0.890530892780849, 0.8147091014044625, 0.7685274907520839, 0.7289108889443534, 0.6948414359773908, 0.680878894669669, 0.6539358241217477, 0.6389536346708026, 0.6243163006646293, 0.6166898693357196, 0.602508578981672, 0.590874195098877, 0.5881574153900146, 0.5796232904706683, 0.5759911026273455, 0.5672134331294468, 0.5628869192940849, 0.5526774610791888, 0.5545095545904977, 0.5479323012488229, 0.5376700503485543, 0.5377359901155744, 0.5289222002029419, 0.5270672355379377, 0.5205497401101249, 0.5190212385995048, 0.5132927213396344, 0.5136526141847882, 0.5116564546312604, 0.5064849172319684, 0.5060943194798061, 0.5024635451180595, 0.4997048207691738, 0.496233446257455, 0.4905673435756138, 0.49022904464176725, 0.4926350287028721], "val_accuracy": [0.367000013589859, 0.47066667675971985, 0.5273333191871643, 0.5596666932106018, 0.590666651725769, 0.621999979019165, 0.6679999828338623, 0.6819999814033508, 0.7039999961853027, 0.6919999718666077, 0.7083333134651184, 0.7143333554267883, 0.7256666421890259, 0.7360000014305115, 0.7333333492279053, 0.7406666874885559, 0.7363333106040955, 0.7436666488647461, 0.7549999952316284, 0.7459999918937683, 0.7463333606719971, 0.7523333430290222, 0.7556666731834412, 0.7573333382606506, 0.7639999985694885, 0.7549999952316284, 0.7463333606719971, 0.7633333206176758, 0.765666663646698, 0.7706666588783264, 0.7756666541099548, 0.7770000100135803, 0.7723333239555359, 0.7749999761581421, 0.777999997138977, 0.7693333625793457, 0.7733333110809326, 0.7723333239555359, 0.7876666784286499, 0.7836666703224182, 0.7799999713897705, 0.7856666445732117, 0.7856666445732117, 0.7803333401679993]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 3, 0, 1, 2, 6, 4, 9, 2, 1, 5, 2, 1, 2, 2, 1, 2, 3, 5, 9, 6, 2, 9, 5, 0, 4, 5, 4, 1, 4], [1, 2, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7734285593032837, "mapping_values": [1, 39, 39, 24, 15, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.square(alpha)))), alpha)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2836411265397287, 2.230907822864529, 2.1503596446297157, 2.0168163046908023, 1.8155900929755444, 1.5976017279915287, 1.4148605746867682, 1.282278555747367, 1.1857613525244506, 1.1120973197208688, 1.0605783886236206, 1.0133976336672417, 0.9795594495505767, 0.9554974936286393, 0.9168573728547419, 0.8890069295481101, 0.8840563568488214, 0.8567097508959278, 0.8414087307498818, 0.8315158922359566, 0.815972732664682, 0.8161851037227246, 0.8071253591241334, 0.7958447773143867, 0.7718393065516566, 0.7839200389840268, 0.7629999196949794, 0.7612435558940976, 0.7449363479131186, 0.7387281944329445, 0.730410597469545, 0.727028939206256, 0.7232410720295013, 0.7169255192694552, 0.7152943786313867, 0.7087555222853914, 0.701460769384009, 0.6999322656217803, 0.6956125989235498, 0.6910773659300385, 0.6872953967789239, 0.6829012293841435, 0.6707918664735495, 0.6647066071505529], "accuracy": [0.14053626358509064, 0.2607317268848419, 0.3564918637275696, 0.40549466013908386, 0.44644036889076233, 0.49266940355300903, 0.5274072289466858, 0.566239595413208, 0.5830141305923462, 0.611940324306488, 0.6206578016281128, 0.6404702067375183, 0.6485272645950317, 0.6585655808448792, 0.6749438643455505, 0.6853784322738647, 0.6744155287742615, 0.6897371411323547, 0.7003037929534912, 0.7029454708099365, 0.7066437602043152, 0.7067758440971375, 0.7116629481315613, 0.7091533541679382, 0.7166820764541626, 0.7123233675956726, 0.7240787148475647, 0.7144366502761841, 0.7317395210266113, 0.7322678565979004, 0.7320036888122559, 0.7312111854553223, 0.7343811988830566, 0.7378153204917908, 0.7378153204917908, 0.7396644949913025, 0.7404569983482361, 0.7454761862754822, 0.7448157668113708, 0.7457403540611267, 0.7434949278831482, 0.7503632307052612, 0.7526086568832397, 0.7564390301704407], "val_loss": [1.9261954852512904, 1.8655484063284737, 1.7617957251412528, 1.592580727168492, 1.3696277822766985, 1.151932716369629, 0.9958521297999791, 0.8904733657836914, 0.8146530049187797, 0.768551230430603, 0.7289514711924961, 0.694856081690107, 0.6808187620980399, 0.6539572136742728, 0.6389310359954834, 0.6242285626275199, 0.616793053490775, 0.6025018692016602, 0.5907717772892543, 0.5883927515574864, 0.5795339005334037, 0.5762022733688354, 0.5672132968902588, 0.563086884362357, 0.5526299817221505, 0.554629990032741, 0.5477075576782227, 0.5377492564065116, 0.5380241189684186, 0.5290904215403965, 0.5270092146737235, 0.5206462144851685, 0.5189800603049142, 0.5133712462016514, 0.5134614876338414, 0.5112798895154681, 0.5066384417670113, 0.5063169854027885, 0.5023220096315656, 0.49964347907475065, 0.4961701120649065, 0.4906586068017142, 0.490193247795105, 0.4923506464276995], "val_accuracy": [0.36666667461395264, 0.47066667675971985, 0.528333306312561, 0.5596666932106018, 0.5903333425521851, 0.621666669845581, 0.6679999828338623, 0.6819999814033508, 0.7039999961853027, 0.6919999718666077, 0.7076666951179504, 0.7139999866485596, 0.7253333330154419, 0.7363333106040955, 0.734000027179718, 0.7413333058357239, 0.7363333106040955, 0.7440000176429749, 0.7553333044052124, 0.746666669845581, 0.746999979019165, 0.7519999742507935, 0.7563333511352539, 0.7576666474342346, 0.7630000114440918, 0.7559999823570251, 0.7463333606719971, 0.7639999985694885, 0.765333354473114, 0.7696666717529297, 0.7753333449363708, 0.7776666879653931, 0.7723333239555359, 0.7753333449363708, 0.777999997138977, 0.7710000276565552, 0.7723333239555359, 0.7710000276565552, 0.7879999876022339, 0.7833333611488342, 0.7793333530426025, 0.7829999923706055, 0.7853333353996277, 0.7799999713897705]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 8, 5, 8, 1, 5, 3, 5, 5, 8, 2, 6, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [1, 2, 2, 0, 0, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 86, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [22], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7434285879135132, "mapping_values": [1, 29, 29, 20, 9, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))))))))))), grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.299651153902289, 2.2913908606995177, 2.2829405981803754, 2.276306366829147, 2.267510939708806, 2.259652540274678, 2.2509093089992374, 2.241343968800424, 2.23246854615328, 2.220706075268525, 2.2101510614373225, 2.1955183040448594, 2.1797027063564993, 2.1665783669765615, 2.1490306417152567, 2.1292851653317606, 2.1084727104770478, 2.0870561997463137, 2.060608408249853, 2.0380145749553256, 2.0068898516686335, 1.9769452328159824, 1.9430318627422354, 1.9084344611207587, 1.8698211086896968, 1.837853908097944, 1.7923771630440721, 1.74826418844905, 1.71139210984534, 1.676582988148368, 1.6436087454409254, 1.6053078500680669, 1.5715186871935616, 1.5275045614106513, 1.4984118809962648, 1.466797413543829, 1.443379365379123, 1.4124222391427328, 1.3835730533936177, 1.3647704720733314, 1.3433857175888497, 1.3139892508246407, 1.2928918857993923, 1.2695149788373434, 1.2575959506335275, 1.243000361189126, 1.228128445162639, 1.2109640314436985, 1.1935735484470764, 1.1716781609314402, 1.1777369951165788, 1.1543324756238125, 1.143940516828845, 1.1334261874701637, 1.1168294726361563, 1.106326869135252, 1.1034453144288885, 1.0894417671117453, 1.0764052480707205, 1.0676766314983306, 1.0493038384008402, 1.0433593571477358, 1.0425689162642429, 1.0339343655835274, 1.0266552085590526, 1.0230739175242014, 1.0103564970623375, 1.018510483440517, 1.001826482386936, 0.9944643774336166, 0.9872261378129302, 0.9734659662115701, 0.9672129178138504, 0.9603626843157571, 0.9600870358063764, 0.9599244115595427, 0.9485396551985105, 0.9412173367116619, 0.9508358869869412, 0.9450775742404859, 0.9175817983151426, 0.932349998197378, 0.9273477502550038, 0.9254907025023065, 0.917861849876553, 0.9099338162986121, 0.9090614543536146, 0.9040686240710791, 0.9045558368068535, 0.8975096266062788, 0.9005586737103828, 0.8815546990810778, 0.885714781109557, 0.8852202960166634, 0.88406074839088, 0.8770043355299734, 0.8775435252716166, 0.8753598267927208, 0.8608655963733196, 0.8628433157329813], "accuracy": [0.09959053993225098, 0.11913882195949554, 0.14397041499614716, 0.1504424810409546, 0.18372738361358643, 0.20274733006954193, 0.23101307451725006, 0.24844802916049957, 0.2641659080982208, 0.2822612524032593, 0.2934883236885071, 0.3152819871902466, 0.3303394615650177, 0.3401135802268982, 0.3571522831916809, 0.3587372899055481, 0.3757759928703308, 0.38304054737091064, 0.3933430314064026, 0.3945317566394806, 0.4119667112827301, 0.414608359336853, 0.4227975308895111, 0.431779146194458, 0.44089287519454956, 0.447761207818985, 0.46427157521247864, 0.4703473746776581, 0.4748381972312927, 0.4795931875705719, 0.48131024837493896, 0.49953770637512207, 0.49927353858947754, 0.5041606426239014, 0.518161416053772, 0.5178972482681274, 0.5291243195533752, 0.5332188606262207, 0.5370492935180664, 0.5400871634483337, 0.5484083890914917, 0.5514463186264038, 0.5626733303070068, 0.5683529376983643, 0.570202112197876, 0.5694096088409424, 0.5783912539482117, 0.5778629183769226, 0.5849953889846802, 0.5896182656288147, 0.5904107689857483, 0.5945053696632385, 0.6008453369140625, 0.6061286330223083, 0.607449471950531, 0.6082419753074646, 0.6096948981285095, 0.6180161237716675, 0.6189407110214233, 0.6236956715583801, 0.6273940205574036, 0.6402060389518738, 0.625148594379425, 0.6375643610954285, 0.6362435817718506, 0.6406022906303406, 0.6452252268791199, 0.6436402201652527, 0.648659348487854, 0.653150200843811, 0.6523576974868774, 0.6542068123817444, 0.654999315738678, 0.6592260003089905, 0.6623960137367249, 0.6634526252746582, 0.6625280380249023, 0.6649055480957031, 0.658961832523346, 0.6659622192382812, 0.6729626059532166, 0.6627922058105469, 0.6716417670249939, 0.6696605682373047, 0.6701889038085938, 0.6728305220603943, 0.6761326193809509, 0.6713775992393494, 0.6760005354881287, 0.6807554960250854, 0.6770572066307068, 0.6839255094528198, 0.6837934255599976, 0.683529257774353, 0.6837934255599976, 0.6848500967025757, 0.6902654767036438, 0.6837934255599976, 0.6909258961677551, 0.6886804699897766], "val_loss": [1.9634841510227747, 1.9561360222952706, 1.9487779481070382, 1.9412057740347726, 1.933509077344622, 1.9254020282200404, 1.916804381779262, 1.9076005390712194, 1.8976706777300154, 1.8868351663861955, 1.8750668934413366, 1.8620296205793108, 1.8476251193455286, 1.8318736212594169, 1.8144489015851701, 1.7952807290213448, 1.7743117468697684, 1.751579897744315, 1.7266295978001185, 1.6997271946498327, 1.670682328087943, 1.6396324293954032, 1.6063901356288366, 1.5713114397866386, 1.5344701835087367, 1.496896743774414, 1.4578311102730888, 1.4178213051387243, 1.3781821387154716, 1.3390093871525355, 1.3003458976745605, 1.2622068950108118, 1.225721767970494, 1.190772260938372, 1.1570068427494593, 1.1255385535103934, 1.0961430413382394, 1.0678440843309676, 1.0415362630571638, 1.017319815499442, 0.9941208021981376, 0.9730127879551479, 0.9527138301304409, 0.9339464732578823, 0.9166834013802665, 0.9003140585763114, 0.8856414045606341, 0.8719848394393921, 0.8586626393454415, 0.846151624407087, 0.8351156200681414, 0.8237389666693551, 0.8130642856870379, 0.8029859576906476, 0.79323981489454, 0.7841613803591047, 0.7760252952575684, 0.7680617570877075, 0.760035685130528, 0.7524124724524361, 0.7455060482025146, 0.7381569147109985, 0.7322579111371722, 0.726548433303833, 0.7214408942631313, 0.7164155074528286, 0.7110490117754255, 0.7064798900059291, 0.702032242502485, 0.6970956836427961, 0.6923628364290509, 0.6886196477072579, 0.6840343305042812, 0.6798781837735858, 0.6762836660657611, 0.6728002173560006, 0.6692602634429932, 0.665645922933306, 0.6625995295388358, 0.6599077156611851, 0.6561439888817924, 0.6536457538604736, 0.6506612300872803, 0.6476312705448696, 0.645105378968375, 0.6424953767231533, 0.6400906017848423, 0.6377573013305664, 0.6349729810442243, 0.6325788157326835, 0.6305962460381644, 0.6279634748186383, 0.6257417542593819, 0.6234637669154576, 0.6216002873011998, 0.6194458689008441, 0.6174212864467076, 0.6152547257287162, 0.6132110357284546, 0.6111334732600621], "val_accuracy": [0.09000000357627869, 0.15600000321865082, 0.23066666722297668, 0.2930000126361847, 0.33633333444595337, 0.36500000953674316, 0.38100001215934753, 0.39500001072883606, 0.41100001335144043, 0.42899999022483826, 0.4429999887943268, 0.4493333399295807, 0.4596666693687439, 0.46700000762939453, 0.48233333230018616, 0.492000013589859, 0.5023333430290222, 0.5163333415985107, 0.5253333449363708, 0.5366666913032532, 0.5456666946411133, 0.5529999732971191, 0.5576666593551636, 0.5653333067893982, 0.5686666369438171, 0.5789999961853027, 0.5839999914169312, 0.590666651725769, 0.5920000076293945, 0.5963333249092102, 0.6003333330154419, 0.606333315372467, 0.6086666584014893, 0.6150000095367432, 0.6290000081062317, 0.6389999985694885, 0.6480000019073486, 0.656000018119812, 0.6629999876022339, 0.668666660785675, 0.6696666479110718, 0.6743333339691162, 0.6756666898727417, 0.6783333420753479, 0.6833333373069763, 0.6833333373069763, 0.6899999976158142, 0.6919999718666077, 0.6930000185966492, 0.6943333148956299, 0.6956666707992554, 0.6983333230018616, 0.7006666660308838, 0.7013333439826965, 0.7013333439826965, 0.7026666402816772, 0.7036666870117188, 0.7043333053588867, 0.7076666951179504, 0.7106666564941406, 0.7116666436195374, 0.7139999866485596, 0.7149999737739563, 0.7173333168029785, 0.7149999737739563, 0.7146666646003723, 0.718999981880188, 0.718999981880188, 0.7193333506584167, 0.7223333120346069, 0.7226666808128357, 0.7256666421890259, 0.722000002861023, 0.7250000238418579, 0.7266666889190674, 0.7276666760444641, 0.7289999723434448, 0.7289999723434448, 0.7269999980926514, 0.7296666502952576, 0.7323333621025085, 0.734000027179718, 0.7336666584014893, 0.7333333492279053, 0.734666645526886, 0.7360000014305115, 0.7350000143051147, 0.7363333106040955, 0.7369999885559082, 0.737333357334137, 0.7390000224113464, 0.7386666536331177, 0.7386666536331177, 0.7390000224113464, 0.7379999756813049, 0.7396666407585144, 0.7433333396911621, 0.7416666746139526, 0.7440000176429749, 0.7446666955947876]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 1, 1, 2, 9, 5, 3, 2, 9, 9, 9, 7, 2, 1, 3, 5, 3, 9, 5, 3, 2, 3, 5, 8, 4, 6, 4, 2, 4, 1, 2], [2, 1, 2, 1, 0, 0, 1, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 63, 4, 92, 41, 68, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 0, 0], [3, 4], [2, 0, 1, 5, 3, 4], [53], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 11, 4, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad)), alpha)), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(grad, alpha), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08070268481969833, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 3, 9, 1, 2, 6, 4, 9, 2, 1, 5, 2, 1, 2, 2, 2, 2, 1, 6, 9, 6, 2, 9, 5, 0, 4, 5, 4, 1, 4], [1, 2, 2, 0, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1], [70, 47, 18, 27, 41, 71, 84, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [16663.347253815056, 308378.6547351737, 1422445.1728965791, 3908644.5278034606, 8396972.720512481, 15471417.462950733], "accuracy": [0.09734513610601425, 0.10038304328918457, 0.10249637067317963, 0.09496764093637466, 0.1002509593963623, 0.10130762308835983], "val_loss": [61677.39955357143, 486162.78571428574, 1633209.392857143, 3862564.4285714286, 7533974.571428572, 13007166.857142856], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 0, 9, 2, 6, 5, 4, 2, 5, 5, 2, 7, 8, 2, 1, 2, 3, 4, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [6, 83, 42, 75, 51, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 0, 0], [3, 4, 9], [2, 2, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 2, 1, 1, 0, 1, 0, 5, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1578391194343567, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 8, 6, 5, 2, 6, 5, 8, 2, 5, 3, 5, 7, 8, 9, 5, 2, 3, 9, 9, 3, 2, 3, 5, 8, 4, 2, 4, 1, 4], [2, 0, 2, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 2, 2, 1], [70, 83, 4, 92, 41, 36, 4, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 15, 7, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08070268481969833, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 5, 4, 2, 5, 0, 5, 7, 8, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [1, 1, 2, 0, 0, 0, 2, 2, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 78, 24, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [3, 4, 1], [2, 0, 1, 5, 3, 4], [68], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 47, 47, 29, 18, 5, 1, 1, 0, 1, 0, 7, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad))))))))))))))), grad))))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.square(tf.math.pow(alpha, tf.math.subtract(grad, alpha)))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12376172095537186, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 8, 5, 8, 2, 5, 9, 5, 5, 8, 2, 6, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 1, 1, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [1, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [22], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 12, 5, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 3, 2, 6, 4, 8, 0, 5, 6, 5, 7, 8, 1, 6, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 98, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 0, 0], [3, 4, 9], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 5, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))))), alpha), tf.math.add(alpha, alpha))), grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.14991414546966553, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 3, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 4, 92, 41, 36, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 4, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.09200000017881393, "mapping_values": [1, 22, 22, 13, 9, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), grad)))), alpha)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3019005405809962, 2.2982964198571376, 2.2973449492514364, 2.299301943900547, 2.299574380852464, 2.300810130296555, 2.3007578253037484], "accuracy": [0.0944393053650856, 0.11081759631633759, 0.107647605240345, 0.09879804402589798, 0.09866596013307571, 0.08889182657003403, 0.08994849026203156], "val_loss": [1.9680686678205217, 1.9671385628836495, 1.969615868159703, 1.9706788744245256, 1.971449511391776, 1.9717825480869837, 1.972189153943743], "val_accuracy": [0.07699999958276749, 0.1236666664481163, 0.10599999874830246, 0.09933333098888397, 0.10100000351667404, 0.09733333438634872, 0.09233333170413971]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 5, 6, 5, 3, 2, 5, 5, 5, 7, 8, 4, 6, 2, 3, 6, 9, 2, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 4, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 4, 1, 5, 3, 4], [38], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.06885714083909988, "mapping_values": [1, 26, 26, 16, 10, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))))))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302566466597896, 2.301607027376301, 2.300524714285624, 2.301254791307128, 2.300145688388861, 2.3006247392719166, 2.300313639240872, 2.3001613437444495, 2.3007120998260637, 2.300039154773753, 2.3003699417363666, 2.2997220326817787, 2.299144577750157, 2.2999464084349133, 2.300514312956264, 2.2997442321250814, 2.300842636060784], "accuracy": [0.09377889335155487, 0.09615638852119446, 0.09840179979801178, 0.08770307898521423, 0.09391097724437714, 0.0956280529499054, 0.09919429570436478, 0.09866596013307571, 0.1014397069811821, 0.09615638852119446, 0.09628847241401672, 0.10328886657953262, 0.10236428678035736, 0.10315678268671036, 0.09681680053472519, 0.10540219396352768, 0.09655263274908066], "val_loss": [1.970250129699707, 1.9699198177882604, 1.9696961811610632, 1.9695002010890417, 1.9693974767412459, 1.9694774491446358, 1.969438076019287, 1.969318117414202, 1.9691848073686873, 1.9692144393920898, 1.9691997255597795, 1.969447408403669, 1.9697019032069616, 1.9699855531964983, 1.9702233586992537, 1.9703924996512276, 1.9705381393432617], "val_accuracy": [0.046666666865348816, 0.05166666582226753, 0.05533333495259285, 0.059333331882953644, 0.06300000101327896, 0.06599999964237213, 0.07133333384990692, 0.07666666805744171, 0.07999999821186066, 0.07999999821186066, 0.07999999821186066, 0.08033332973718643, 0.07833333313465118, 0.07900000363588333, 0.07833333313465118, 0.07833333313465118, 0.07966666668653488]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 1, 1, 2, 9, 5, 3, 2, 9, 9, 6, 7, 8, 1, 3, 5, 3, 9, 5, 3, 2, 3, 5, 8, 4, 6, 4, 2, 4, 1, 2], [2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 36, 14, 42, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 15, 15, 11, 4, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))))), grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3029520180026664, 2.302625440288418, 2.3018803245371613, 2.3033323679082445, 2.302353583464234, 2.302678670172741], "accuracy": [0.09219389408826828, 0.09325055778026581, 0.0948355570435524, 0.08255184441804886, 0.08981640636920929, 0.09166556596755981], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 3, 4, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 6, 9, 0, 2, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 0, 2, 0, 2, 1, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1], [70, 28, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [56], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 32, 32, 20, 12, 8, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3029520180026664, 2.302625440288418, 2.3018803245371613, 2.3033323679082445, 2.302353583464234, 2.302678670172741], "accuracy": [0.09219389408826828, 0.09325055778026581, 0.0948355570435524, 0.08255184441804886, 0.08981640636920929, 0.09166556596755981], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 2, 2, 3, 0, 8, 6, 1, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 1, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 0, 1, 0], [3, 4], [2, 2, 1, 5, 3, 4], [31], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 41, 41, 25, 16, 4, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 3, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.negative(grad), tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), grad)))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3029520180026664, 2.302625440288418, 2.3018803245371613, 2.3033323679082445, 2.302353583464234, 2.302678670172741], "accuracy": [0.09219389408826828, 0.09325055778026581, 0.0948355570435524, 0.08255184441804886, 0.08981640636920929, 0.09166556596755981], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 1, 2, 8, 5, 8, 2, 5, 3, 5, 7, 8, 2, 6, 2, 3, 9, 1, 6, 0, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 4, 92, 75, 36, 9, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [0, 0, 1, 5, 3, 4], [31, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.03142857179045677, "mapping_values": [1, 12, 12, 6, 6, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 2, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3030533021892365, 2.302956107900033, 2.302491476381176, 2.3042478731138014, 2.303346186770015, 2.3040847309103984], "accuracy": [0.09206181764602661, 0.09232597798109055, 0.09311848133802414, 0.08440100401639938, 0.09074098616838455, 0.0870426595211029], "val_loss": [1.9711253302437919, 1.9712507384163993, 1.9713843209402901, 1.971524442945208, 1.971679959978376, 1.9718401091439384], "val_accuracy": [0.03533333167433739, 0.033666666597127914, 0.03200000151991844, 0.029333332553505898, 0.0273333340883255, 0.0273333340883255]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 5, 4, 2, 5, 6, 5, 7, 8, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [17, 83, 4, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 2, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.028285713866353035, "mapping_values": [1, 41, 41, 25, 16, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), grad)))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3034720226537755, 2.304665168955688, 2.305745078556573, 2.3099671593589113, 2.3119219330717247, 2.315399644239751], "accuracy": [0.09100515395402908, 0.0878351628780365, 0.08757099509239197, 0.0742306187748909, 0.08149518072605133, 0.07858935743570328], "val_loss": [1.9722087723868233, 1.9737108775547572, 1.975449902670724, 1.9777073178972517, 1.9802284921918596, 1.9830177852085658], "val_accuracy": [0.03133333474397659, 0.0273333340883255, 0.019999999552965164, 0.017666665837168694, 0.019333332777023315, 0.025333333760499954]}}]