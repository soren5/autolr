[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8105714321136475, "mapping_values": [1, 4, 4, 2, 2, 1, 58, 58, 36, 22, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, alpha), alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), beta))))), tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), beta)), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256583580802602, 1.8315916541639556, 1.2970536608879262, 0.937884316830477, 0.8394332287050493, 0.7809394529199304, 0.7297280185478647, 0.6996272418241082, 0.6641893270087831, 0.6352364213364928, 0.6032638137193482, 0.5748325426423271, 0.5582585377408812, 0.5347082150484734, 0.5303279286000266, 0.5177962953750531, 0.5013985809412583, 0.4851387929347969, 0.4757602583140178, 0.45207166403685545, 0.4429380753099832, 0.4366836018566096, 0.42861927648372244, 0.40941550360143525, 0.3964066380491472, 0.3880970707076368, 0.3766982362428125, 0.3798009291490024, 0.37174656757305735, 0.3623788446176164, 0.3496915844051735, 0.3418225464433837, 0.34430852538291346, 0.33097245511031187, 0.32892596687796316, 0.30931811128955683, 0.30011162892812593, 0.30370825040593924, 0.29978497892622114, 0.29529522008049397, 0.2838009626653452], "accuracy": [0.19442610442638397, 0.4278166592121124, 0.5559371113777161, 0.6510368585586548, 0.6812838315963745, 0.6970016956329346, 0.7251353859901428, 0.7391361594200134, 0.7437590956687927, 0.7572315335273743, 0.7724210619926453, 0.7808743715286255, 0.7844406366348267, 0.7979130744934082, 0.796328067779541, 0.8014793395996094, 0.8080834746360779, 0.8138951063156128, 0.8189142942428589, 0.8298771381378174, 0.828292191028595, 0.8374059200286865, 0.8385946154594421, 0.845859169960022, 0.8540483713150024, 0.8529917001724243, 0.858671247959137, 0.8529917001724243, 0.8582749962806702, 0.8613129258155823, 0.8654074668884277, 0.8706908226013184, 0.870030403137207, 0.8702945709228516, 0.873860776424408, 0.8808611631393433, 0.8840311765670776, 0.8889182209968567, 0.8858803510665894, 0.886672854423523, 0.8930128216743469], "val_loss": [1.8099542345319475, 0.9794467517307827, 0.7092568363462176, 0.6751823595591954, 0.6022208247865949, 0.5666400534766061, 0.5511087860379901, 0.5179225887571063, 0.4981546572276524, 0.4763425588607788, 0.4521545171737671, 0.4389708382742746, 0.4309286049434117, 0.4150252938270569, 0.4119638630322048, 0.39960114445005146, 0.39300723586763653, 0.38529699189322336, 0.37347748449870516, 0.37359465871538433, 0.36814676012311665, 0.36774706840515137, 0.35833458389554707, 0.35535638672964914, 0.34602590118135723, 0.3441610336303711, 0.34075712306158884, 0.3320138624736241, 0.3331913096564157, 0.3293660708836147, 0.3290714280945914, 0.3207190377371652, 0.31883701256343294, 0.3194858857563564, 0.3196555631501334, 0.3167643291609628, 0.31940856150218416, 0.3144286700657436, 0.3166544096810477, 0.3118630732808794, 0.3031362295150757], "val_accuracy": [0.4429999887943268, 0.6470000147819519, 0.6983333230018616, 0.706333339214325, 0.7203333377838135, 0.7486666440963745, 0.7573333382606506, 0.7630000114440918, 0.7706666588783264, 0.777999997138977, 0.7960000038146973, 0.8080000281333923, 0.8076666593551636, 0.8230000138282776, 0.812666654586792, 0.8240000009536743, 0.8240000009536743, 0.831333339214325, 0.840666651725769, 0.8429999947547913, 0.8446666598320007, 0.8353333473205566, 0.8506666421890259, 0.8493333458900452, 0.8560000061988831, 0.859000027179718, 0.8586666584014893, 0.8643333315849304, 0.8606666922569275, 0.859333336353302, 0.8643333315849304, 0.8700000047683716, 0.8663333058357239, 0.8706666827201843, 0.8709999918937683, 0.8743333220481873, 0.8700000047683716, 0.8700000047683716, 0.871666669845581, 0.8703333139419556, 0.8723333477973938]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 8, 3, 5, 3, 3, 8, 2, 1, 0, 2, 3, 3, 9, 5, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 18, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7874285578727722, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(grad)))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.285819453239567, 2.2456701166200568, 2.1896540999900647, 2.1027725935769577, 1.9729180614536685, 1.803688089372995, 1.6144242043728843, 1.4574197319599111, 1.3291193669136128, 1.2356420179415435, 1.171606106560354, 1.104043192489351, 1.0605857620905608, 1.0278461500795653, 0.9904760022708816, 0.965881172463784, 0.9356494990983549, 0.9234318039153057, 0.9036192110642592, 0.879486873629795, 0.8683420096988675, 0.8578491498056955, 0.84701242148207, 0.821962998417532, 0.8187412141242032, 0.8019701855498502, 0.79940587816741, 0.8016115507240608, 0.7902964023299237, 0.7754233280397788, 0.7651589586041654, 0.7666980046653445, 0.7519818307732736, 0.754768924666843, 0.7571263422646055, 0.7407116547252492, 0.7308719649039019, 0.7322833429568826, 0.7244656684297565, 0.7139720391241504, 0.7181894750705942, 0.7083676203587398, 0.7118247055799545, 0.7003319638752588, 0.7023064366673056, 0.6978095570622718, 0.688784479630417, 0.6897333799226015, 0.6847873181399888, 0.6806431197298202, 0.6693137396343979, 0.6790566303868256, 0.6766254521001993, 0.6715413452911024, 0.6610493553061102, 0.6596516643170715, 0.6582149767352921, 0.65611950885256, 0.6555429166491635, 0.6509392540122004, 0.644476882746317, 0.6470434217877502, 0.6401359850405198, 0.6492865483963322, 0.6406420941098396, 0.6336480230545686, 0.6390732944586399, 0.6280900750177852], "accuracy": [0.13736626505851746, 0.228899747133255, 0.32399946451187134, 0.3819838762283325, 0.42847707867622375, 0.45344075560569763, 0.4861973226070404, 0.5226522088050842, 0.5558050274848938, 0.5773345828056335, 0.5912032723426819, 0.6159027814865112, 0.6235635876655579, 0.6332056522369385, 0.6502443552017212, 0.6565843224525452, 0.6646413803100586, 0.6738871932029724, 0.6806234121322632, 0.6841896772384644, 0.6884163022041321, 0.6955488324165344, 0.6929071545600891, 0.7061154246330261, 0.7000396251678467, 0.7078325152397156, 0.7088891863822937, 0.713379979133606, 0.7137762308120728, 0.7201162576675415, 0.7186633348464966, 0.7182670831680298, 0.7281733155250549, 0.7304186820983887, 0.717870831489563, 0.7329282760620117, 0.7276449799537659, 0.7341170310974121, 0.7341170310974121, 0.7372870445251465, 0.7372870445251465, 0.7368907928466797, 0.7395324110984802, 0.7408532500267029, 0.7384757399559021, 0.7457403540611267, 0.7471932172775269, 0.7483819723129272, 0.7534011602401733, 0.7491744756698608, 0.7552502751350403, 0.7516840696334839, 0.7524765729904175, 0.7539294958114624, 0.7555144429206848, 0.7584202885627747, 0.7553823590278625, 0.7572315335273743, 0.7578919529914856, 0.763967752456665, 0.7618544697761536, 0.7642319202423096, 0.7631752490997314, 0.7633073329925537, 0.7650244235992432, 0.7625148296356201, 0.7633073329925537, 0.7647602558135986], "val_loss": [1.9342901366097587, 1.8898908070155553, 1.8226433481488908, 1.7165187426975794, 1.562950542994908, 1.377490724836077, 1.1925837312425887, 1.0471130779811315, 0.942730018070766, 0.8653059005737305, 0.8095194782529559, 0.7655851330075946, 0.7364835568836757, 0.709008949143546, 0.6875347750527518, 0.6689575229372297, 0.6553323609488351, 0.6436088255473545, 0.6337199551718575, 0.618282573563712, 0.6103381599698748, 0.6024127176829747, 0.5961872509547642, 0.5881087779998779, 0.582933919770377, 0.5742104394095284, 0.5694903816495623, 0.5638564654758998, 0.5586210829871041, 0.5561497211456299, 0.5500308275222778, 0.5471056870051793, 0.5393517187663487, 0.5355429479054042, 0.5364453622273037, 0.5311810970306396, 0.5275764635631016, 0.5249194758278983, 0.5206221001488822, 0.5177861622401646, 0.5167802231652396, 0.512357337134225, 0.5120251859937396, 0.5103682960782733, 0.5056892122541156, 0.5007673842566354, 0.4998183080128261, 0.4982440641948155, 0.5012243815830776, 0.4953054700578962, 0.49496797152927946, 0.49215127740587505, 0.4880409240722656, 0.48892983368464876, 0.4836679186139788, 0.48195649896349224, 0.48095818928309847, 0.4776613712310791, 0.47888309614998953, 0.4783940144947597, 0.47453250203813824, 0.47298511437007357, 0.47005716391972135, 0.4699206692831857, 0.46709930896759033, 0.4684251035962786, 0.46436965465545654, 0.46578608240400043], "val_accuracy": [0.33766666054725647, 0.4206666648387909, 0.46266666054725647, 0.5433333516120911, 0.5646666884422302, 0.5899999737739563, 0.6066666841506958, 0.6473333239555359, 0.6806666851043701, 0.6946666836738586, 0.703000009059906, 0.7073333263397217, 0.7160000205039978, 0.7246666550636292, 0.722000002861023, 0.7300000190734863, 0.7246666550636292, 0.7306666374206543, 0.734333336353302, 0.7363333106040955, 0.7360000014305115, 0.7456666827201843, 0.7513333559036255, 0.7493333220481873, 0.7480000257492065, 0.7559999823570251, 0.7476666569709778, 0.7563333511352539, 0.7639999985694885, 0.765333354473114, 0.7646666765213013, 0.7673333287239075, 0.7699999809265137, 0.7680000066757202, 0.7699999809265137, 0.7716666460037231, 0.7720000147819519, 0.7733333110809326, 0.7756666541099548, 0.7723333239555359, 0.7753333449363708, 0.781333327293396, 0.7699999809265137, 0.7766666412353516, 0.7799999713897705, 0.7833333611488342, 0.7773333191871643, 0.781000018119812, 0.7853333353996277, 0.7833333611488342, 0.7853333353996277, 0.777999997138977, 0.7856666445732117, 0.7870000004768372, 0.7866666913032532, 0.7870000004768372, 0.7910000085830688, 0.7926666736602783, 0.7943333387374878, 0.7960000038146973, 0.7973333597183228, 0.7926666736602783, 0.8009999990463257, 0.7906666398048401, 0.7976666688919067, 0.7906666398048401, 0.7973333597183228, 0.7950000166893005]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 2, 3, 5, 3, 3, 8, 9, 1, 0, 9, 3, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7871428728103638, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.285594726455934, 2.2445018299031236, 2.1864629603332895, 2.095086978269433, 1.9576217988069267, 1.7803135487885602, 1.5870820881904408, 1.431749759081285, 1.3071748501337153, 1.2172785855838573, 1.1554940015160255, 1.089900093433832, 1.0479516831245468, 1.0167549313996305, 0.9799772665768629, 0.9567151254965818, 0.9269051283672738, 0.9152269774912339, 0.8960572383375751, 0.872635479860491, 0.861949112940899, 0.851531492964687, 0.8411317829206525, 0.816098772389872, 0.8132466952310435, 0.7968557873705611, 0.7943434406107821, 0.7967488846333587, 0.7855281378410086, 0.7707948257280395, 0.7604985750031714, 0.7617484916864117, 0.7476369192130718, 0.7508772448337058, 0.7529050871649156, 0.7366191589947249, 0.726819526202895, 0.7282513967043436, 0.7208914220718865, 0.7101770833168111, 0.7142516616124204, 0.7049793734715489, 0.7084231078585361, 0.6970273705206496, 0.6988033332199295, 0.6940731733324915, 0.6852120677981757, 0.6867051718808468, 0.681651800607158, 0.6773163667523141, 0.6663994490037489, 0.6757477144791292, 0.6737708710975431, 0.6686991889006615, 0.658158075359157, 0.6564541555839744, 0.6556055316001103, 0.6532154138518709, 0.6526546253268084, 0.648049380060956, 0.6414837866584623, 0.644275977508881, 0.6376568377608431, 0.6463486046256359, 0.6379917883885582, 0.6311240885566648, 0.636463196577413, 0.6255073737018002], "accuracy": [0.13776251673698425, 0.2308809906244278, 0.32624489068984985, 0.3831726312637329, 0.43270373344421387, 0.4567428231239319, 0.4908202290534973, 0.5271430611610413, 0.561880886554718, 0.5812970399856567, 0.5967507362365723, 0.620261549949646, 0.6267336010932922, 0.6350548267364502, 0.6527539491653442, 0.6600185036659241, 0.6676793098449707, 0.6763967871665955, 0.6831330060958862, 0.6870955228805542, 0.6901333928108215, 0.6977941989898682, 0.6946242451667786, 0.7079645991325378, 0.7013604640960693, 0.7100779414176941, 0.7111346125602722, 0.7154933214187622, 0.7150970697402954, 0.7215691208839417, 0.7206445932388306, 0.7195879220962524, 0.7304186820983887, 0.7322678565979004, 0.7201162576675415, 0.7334566116333008, 0.7288337349891663, 0.7354378700256348, 0.7349095344543457, 0.7384757399559021, 0.7372870445251465, 0.7391361594200134, 0.7404569983482361, 0.7423061728477478, 0.7400607466697693, 0.7473253011703491, 0.7479857206344604, 0.7500990629196167, 0.7537974119186401, 0.7515519857406616, 0.7580240368843079, 0.7515519857406616, 0.7526086568832397, 0.7559106945991516, 0.7573636174201965, 0.7589486241340637, 0.7569673657417297, 0.7584202885627747, 0.7584202885627747, 0.7640998363494873, 0.7622507214546204, 0.7642319202423096, 0.763439416885376, 0.7638356685638428, 0.7660810947418213, 0.7640998363494873, 0.7640998363494873, 0.7650244235992432], "val_loss": [1.933645452771868, 1.8878970827375139, 1.8175873075212752, 1.7051690305982317, 1.5423611913408553, 1.3493619646344865, 1.1633814402988978, 1.0219513007572718, 0.922421898160662, 0.8490092413766044, 0.796414886202131, 0.7548695462090629, 0.7280056135995048, 0.7014284985406058, 0.6805710451943534, 0.6627076864242554, 0.6498562778745379, 0.6381971836090088, 0.6291097232273647, 0.6137544597898211, 0.6062133823122297, 0.5988038437707084, 0.5926559312002999, 0.5848330770220075, 0.5797951902662005, 0.5711358615330288, 0.5666284050260272, 0.5608529193060738, 0.5557695797511509, 0.5535915749413627, 0.5470016854149955, 0.5443473884037563, 0.536831430026463, 0.5329806293760028, 0.5341541596821376, 0.528702974319458, 0.5248988355909076, 0.5226445198059082, 0.5183142934526715, 0.5155505112239293, 0.5146022694451469, 0.5098369462149483, 0.5096053225653512, 0.5087487357003349, 0.503605808530535, 0.4988257203783308, 0.4981088127408709, 0.4964397634778704, 0.49886001859392437, 0.4935469116483416, 0.49288192817143034, 0.4904047931943621, 0.4864929233278547, 0.48743629455566406, 0.48194714954921175, 0.4804446356637137, 0.47968717983790804, 0.476081235068185, 0.47726738452911377, 0.476802008492606, 0.47289141586848665, 0.471273456301008, 0.46842634677886963, 0.4685870919908796, 0.4655129909515381, 0.46688434055873324, 0.46273158277784077, 0.46425231865474154], "val_accuracy": [0.34200000762939453, 0.421999990940094, 0.46533334255218506, 0.5440000295639038, 0.5659999847412109, 0.5929999947547913, 0.6119999885559082, 0.6526666879653931, 0.684333324432373, 0.6980000138282776, 0.7056666612625122, 0.7099999785423279, 0.7179999947547913, 0.7260000109672546, 0.7223333120346069, 0.7306666374206543, 0.7256666421890259, 0.7319999933242798, 0.7366666793823242, 0.7379999756813049, 0.7369999885559082, 0.7450000047683716, 0.753333330154419, 0.7513333559036255, 0.75, 0.7573333382606506, 0.7480000257492065, 0.7580000162124634, 0.765666663646698, 0.7666666507720947, 0.7646666765213013, 0.7680000066757202, 0.7726666927337646, 0.7693333625793457, 0.7689999938011169, 0.7720000147819519, 0.7736666798591614, 0.7730000019073486, 0.7773333191871643, 0.7726666927337646, 0.7773333191871643, 0.7816666960716248, 0.7716666460037231, 0.7770000100135803, 0.7806666493415833, 0.7836666703224182, 0.7776666879653931, 0.781000018119812, 0.7863333225250244, 0.7836666703224182, 0.7883333563804626, 0.7793333530426025, 0.7856666445732117, 0.7893333435058594, 0.7866666913032532, 0.7863333225250244, 0.7913333177566528, 0.793666660785675, 0.7946666479110718, 0.7976666688919067, 0.7956666946411133, 0.7946666479110718, 0.8013333082199097, 0.7913333177566528, 0.7973333597183228, 0.7906666398048401, 0.7973333597183228, 0.79666668176651]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 0, 2, 9, 0, 3, 5, 5, 3, 7, 3, 2, 6, 2, 4, 2, 2, 9, 5, 0, 2, 3, 6, 2, 9, 8, 8, 2, 7, 7, 9, 9], [3, 2, 3, 1, 1, 2, 3, 1, 0, 2, 3, 0, 3, 1, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3, 1, 4, 2], [33, 60, 85, 21, 12, 47, 35, 65, 86], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7425714135169983, "mapping_values": [1, 4, 4, 2, 2, 1, 47, 47, 29, 18, 5, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.negative(beta)), tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(grad, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), grad)))))))))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), beta), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.negative(alpha))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256504495146095, 1.8247579331915094, 1.338637892611983, 0.9613918187658879, 0.8621142754670006, 0.8344111325261836, 0.7568642752691109, 0.729842075117827, 0.699745029655855, 0.6515976286221017, 0.6338144907027409, 0.6140154141240415, 0.589569020202021, 0.569462963862741, 0.5566058711935705, 0.5649517866771896, 0.5288256796879177, 0.5344848066210164, 0.5135361143524274, 0.5056520914751162, 0.4922387590104122, 0.48179388387155037, 0.4693373696497954, 0.4640369408827542, 0.4612623641259792, 0.43582013901261574, 0.43171727261318427, 0.42709058542466355, 0.42269950471360845, 0.408371602397758, 0.39999120449739567, 0.3878476197543854, 0.3965091066605474, 0.38841638292193714, 0.3918796393219758, 0.3730647708635604, 0.36588849649846894, 0.365236875041286, 0.3553018422371455, 0.36344956066456957, 0.3623731823889272, 0.3524811517930916], "accuracy": [0.20274733006954193, 0.4299300014972687, 0.5522388219833374, 0.6563201546669006, 0.6820763349533081, 0.6884163022041321, 0.7150970697402954, 0.7269845604896545, 0.7368907928466797, 0.7450799345970154, 0.7601373791694641, 0.7693831920623779, 0.7773081660270691, 0.7862898111343384, 0.789988100528717, 0.791441023349762, 0.7976489067077637, 0.8031964302062988, 0.7992339134216309, 0.8112534880638123, 0.817461371421814, 0.8177255392074585, 0.8235371708869934, 0.8244617581367493, 0.8313300609588623, 0.829216718673706, 0.8322546482086182, 0.834632158279419, 0.8404437899589539, 0.8422929644584656, 0.8474441766738892, 0.8532558679580688, 0.8524633646011353, 0.8507462739944458, 0.8533879518508911, 0.859199583530426, 0.8584070801734924, 0.8595958352088928, 0.8631620407104492, 0.8543124794960022, 0.8555012345314026, 0.8625016212463379], "val_loss": [1.8031790597098214, 0.9590552193777901, 0.7356020552771432, 0.6863022702080863, 0.6069761684962681, 0.5702889135905674, 0.5635027885437012, 0.508032066481454, 0.4943706478391375, 0.4720205068588257, 0.4536629915237427, 0.44591404710497173, 0.44191774300166536, 0.42903696639197214, 0.42679392439978464, 0.4143856338092259, 0.4108019896915981, 0.41856662716184345, 0.4049231495176043, 0.4105948380061558, 0.3915910805974688, 0.3851211837359837, 0.3792006714003427, 0.37677012171064106, 0.3702534352030073, 0.35921994277409147, 0.35945344822747366, 0.3601246646472386, 0.35446505887167795, 0.35280979531151907, 0.35337761470249723, 0.3437087706157139, 0.35177648067474365, 0.3596269828932626, 0.3480968815939767, 0.3514916811670576, 0.3548152276447841, 0.3688444750649588, 0.3858652540615627, 0.39491679838725496, 0.4136152522904532, 0.39819840022495817], "val_accuracy": [0.492333322763443, 0.6499999761581421, 0.7009999752044678, 0.7356666922569275, 0.7316666841506958, 0.7459999918937683, 0.7573333382606506, 0.7670000195503235, 0.7699999809265137, 0.79666668176651, 0.796999990940094, 0.8100000023841858, 0.8136666417121887, 0.8100000023841858, 0.8149999976158142, 0.8259999752044678, 0.8259999752044678, 0.8233333230018616, 0.828000009059906, 0.8309999704360962, 0.8326666951179504, 0.8360000252723694, 0.843666672706604, 0.8533333539962769, 0.8500000238418579, 0.8523333072662354, 0.8483333587646484, 0.8550000190734863, 0.862666666507721, 0.862666666507721, 0.8629999756813049, 0.8610000014305115, 0.8606666922569275, 0.8603333234786987, 0.8659999966621399, 0.8629999756813049, 0.8683333396911621, 0.8610000014305115, 0.862333357334137, 0.8576666712760925, 0.8553333282470703, 0.8619999885559082]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 1, 8, 4, 3, 8, 3, 8, 2, 2, 1, 3, 2, 0, 9, 7, 1, 2, 2, 2, 8, 2, 2, 9, 6, 9, 1, 3, 0, 2, 9], [3, 3, 3, 3, 1, 1, 2, 3, 1, 2, 3, 1, 3, 1, 3, 3, 3, 1, 2, 2, 4, 1, 4], [15, 2, 78, 38, 8, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.6994285583496094, "mapping_values": [1, 4, 4, 2, 2, 1, 27, 27, 15, 12, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))), alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.multiply(tf.math.sqrt(beta), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), beta)), tf.math.multiply(tf.math.add(beta, grad), alpha))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3013617068454337, 2.2992895426074385, 2.294034457902678, 2.286723881664687, 2.2770511382574954, 2.2661593636155146, 2.251369657360284, 2.2374304366259765, 2.217447616357719, 2.195992707355919, 2.173134594577068, 2.1413985304214607, 2.105199751112644, 2.0641975163815123, 2.0128616974606035, 1.9455832660064374, 1.870305077778649, 1.7850462188967593, 1.70719177027609, 1.6355828060024937, 1.5800028740060705, 1.5276652167675093, 1.4661249642075487, 1.4122720404449722, 1.3607864262736185, 1.3213345943078578, 1.31156873292045, 1.2850748027997514, 1.249604797933269, 1.1901364001332178, 1.1700406236545269, 1.1657252026240368, 1.1346189557380209, 1.1254818705897747, 1.120066405066945], "accuracy": [0.0948355570435524, 0.09787346422672272, 0.1138555034995079, 0.12679962813854218, 0.15717871487140656, 0.19614318013191223, 0.2281072586774826, 0.26482629776000977, 0.29837536811828613, 0.32941487431526184, 0.34262317419052124, 0.3673226833343506, 0.3757759928703308, 0.38845595717430115, 0.39624884724617004, 0.4105137884616852, 0.4270241856575012, 0.4266279339790344, 0.43309998512268066, 0.4391758143901825, 0.4500066041946411, 0.47312110662460327, 0.4913485646247864, 0.5027077198028564, 0.5288601517677307, 0.5412759184837341, 0.5480121374130249, 0.555408775806427, 0.564258337020874, 0.585391640663147, 0.5811649560928345, 0.5884295105934143, 0.5982036590576172, 0.6048077940940857, 0.602562427520752], "val_loss": [1.9696579660688127, 1.9659251485552107, 1.9598677498953683, 1.9516421045575822, 1.9414456912449427, 1.929464885166713, 1.9158030237470354, 1.9003755705697196, 1.8827263968331474, 1.8619328907557897, 1.836836678641183, 1.8062015260968889, 1.7686149052211217, 1.7221845899309431, 1.6649839196886336, 1.5954576219831194, 1.5139852591923304, 1.4252772331237793, 1.3374360970088415, 1.2558706487928117, 1.1791212899344308, 1.1037647042955672, 1.0318769386836462, 0.9681735719953265, 0.9160753999437604, 0.8766781943184989, 0.8418342896870205, 0.8059767654963902, 0.7710262366703579, 0.7443304913384574, 0.7272293227059501, 0.71888986655644, 0.7174528326307025, 0.7183312007359096, 0.7134996822902134], "val_accuracy": [0.046666666865348816, 0.07000000029802322, 0.11833333224058151, 0.20999999344348907, 0.2993333339691162, 0.3479999899864197, 0.37533333897590637, 0.39266666769981384, 0.41066667437553406, 0.4266666769981384, 0.43700000643730164, 0.4546666741371155, 0.46833333373069763, 0.48366665840148926, 0.49933332204818726, 0.5116666555404663, 0.5236666798591614, 0.5320000052452087, 0.5373333096504211, 0.5493333339691162, 0.5619999766349792, 0.5856666564941406, 0.6146666407585144, 0.6499999761581421, 0.6603333353996277, 0.6766666769981384, 0.6800000071525574, 0.6823333501815796, 0.6856666803359985, 0.687666654586792, 0.6853333115577698, 0.6863333582878113, 0.6866666674613953, 0.6740000247955322, 0.6766666769981384]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [15, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 1, 6, 0, 6, 5, 3, 1, 3, 3, 2, 4, 6, 1, 2, 3, 3, 2, 8, 4, 6, 2, 4, 2, 3, 9, 6, 0, 8, 3, 2, 5, 0, 4, 8, 2, 5, 7, 0, 9], [3, 2, 3, 1, 3, 2, 3, 0, 3, 3, 3, 1, 3, 1, 3, 2, 0, 1, 1, 2, 3, 2, 0, 3, 1, 0, 2], [21, 8, 78, 38, 8, 47, 96, 65], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.5722857117652893, "mapping_values": [1, 4, 4, 2, 2, 1, 58, 58, 33, 25, 4, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.add(beta, grad), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), grad)), grad))), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, alpha)), grad)), tf.math.add(beta, alpha)), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.multiply(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.300935254797975, 2.2993991434487526, 2.2971951501433403, 2.295397737038496, 2.293482071278574, 2.2923196507734693, 2.289275813647517, 2.2891509669599532, 2.285926929916515, 2.283907933808935, 2.2826835362509086, 2.2798984959581823, 2.2785012793814925, 2.276779101084189, 2.2761125607402994, 2.2727027413646983, 2.269903727526269, 2.2683002889242943, 2.265953600257064, 2.2634871227708806, 2.262446002654112, 2.261928700972479, 2.257531225815142, 2.2567694772897444, 2.253598714060614, 2.2531613984269834, 2.2501988311752967, 2.246840544884404, 2.245728642035784, 2.244489816673963, 2.2387482975105866, 2.238265270286815, 2.236065146063675, 2.2337596808221787, 2.232712826629939, 2.228156712990175, 2.2238523076475256, 2.2215706416880687, 2.2202275794778346, 2.215312988089533, 2.211953480198651, 2.2112089643829833, 2.2073941329970665, 2.2030016394055765, 2.2021929730261793, 2.1989507223904456, 2.1944034369456973, 2.192031076949239, 2.188406065171342, 2.186196423351584, 2.179716169967974, 2.178242805060489, 2.173166167577024, 2.1690660762182237, 2.164621248000869, 2.163918416009776, 2.154735666082803, 2.1525167288986164, 2.1474530831335588, 2.142229007613374, 2.1378695685802716, 2.132719593907171, 2.1292369612266895, 2.121504332143491, 2.116860067776685, 2.112784087083217, 2.1074180911324514, 2.1007865440450275, 2.095585658077582, 2.091761672186609, 2.0846731649209103, 2.0795115734277196, 2.073698308599812, 2.068229388126277, 2.062172451385843, 2.0559724231579395, 2.0466997176585906, 2.041535595577816, 2.0362079782792053, 2.027162349864933, 2.0229257952818984, 2.010074747992765, 2.008053317250766, 1.9998051285696476, 1.990372914742674, 1.9825256681870538, 1.9723741015769456, 1.9641987999054609, 1.9571164763913793, 1.9493378359706819, 1.9394036675519821, 1.9322351224512835, 1.9307137841262585, 1.91588383272985, 1.9085090658085584, 1.903951177035246, 1.8887796473777085, 1.8783639870803464, 1.8685475112330314, 1.861111536096541], "accuracy": [0.09615638852119446, 0.09800554811954498, 0.10738343745470047, 0.1072513535618782, 0.11293092370033264, 0.11900673806667328, 0.12402588874101639, 0.1254788041114807, 0.1336679458618164, 0.137630432844162, 0.14093250036239624, 0.15176330506801605, 0.1566503793001175, 0.14819706976413727, 0.1592920422554016, 0.16774533689022064, 0.17474573850631714, 0.18795403838157654, 0.1842557191848755, 0.19244486093521118, 0.19521859288215637, 0.2005019187927246, 0.20618148148059845, 0.2102760523557663, 0.2164839506149292, 0.21503104269504547, 0.2238806039094925, 0.23074890673160553, 0.23339056968688965, 0.23484347760677338, 0.2506934404373169, 0.25161802768707275, 0.24937260150909424, 0.2619204819202423, 0.2591467499732971, 0.2715625464916229, 0.27341169118881226, 0.27644962072372437, 0.2798837721347809, 0.29362040758132935, 0.292959988117218, 0.2926958203315735, 0.2977149784564972, 0.2996962070465088, 0.30101704597473145, 0.308149516582489, 0.3139611780643463, 0.3127724230289459, 0.31197991967201233, 0.32201823592185974, 0.33020737767219543, 0.3241315484046936, 0.3276977837085724, 0.33139610290527344, 0.3377360999584198, 0.3333773612976074, 0.3455289900302887, 0.3465856611728668, 0.3497556447982788, 0.3537181317806244, 0.36402061581611633, 0.3617751896381378, 0.3617751896381378, 0.36705851554870605, 0.3715493381023407, 0.3745872378349304, 0.3704926669597626, 0.3835688829421997, 0.3719455897808075, 0.38422930240631104, 0.38053098320961, 0.38766345381736755, 0.3835688829421997, 0.39466384053230286, 0.39506009221076965, 0.3953242599964142, 0.3949280083179474, 0.40047550201416016, 0.3945317566394806, 0.40589091181755066, 0.40523049235343933, 0.41408005356788635, 0.41011756658554077, 0.4049663245677948, 0.4147404432296753, 0.4167217016220093, 0.42147669196128845, 0.42226919531822205, 0.42649585008621216, 0.4294016659259796, 0.42504292726516724, 0.4262316823005676, 0.42570334672927856, 0.43270373344421387, 0.4345529079437256, 0.43745872378349304, 0.4375908076763153, 0.4443270266056061, 0.44366663694381714, 0.4443270266056061], "val_loss": [1.9691547666277205, 1.9673286165509904, 1.9655027389526367, 1.9636830602373396, 1.961866991860526, 1.9600810323442732, 1.958291871207101, 1.9565142222813197, 1.9547046252659388, 1.9528828348432268, 1.9510771206447057, 1.949260643550328, 1.9474324498857771, 1.9456055504935128, 1.9437766075134277, 1.9419123104640417, 1.9400395665849959, 1.9381251335144043, 1.9362036160060339, 1.9342499460492815, 1.9322873524257116, 1.9303138596670968, 1.928283623286656, 1.9262379237583704, 1.9241773741585868, 1.922058377947126, 1.9199211938040597, 1.917745726449149, 1.915546212877546, 1.9133126395089286, 1.911006314413888, 1.9087014879499162, 1.9063288824898856, 1.9039228984287806, 1.9014599663870675, 1.8989474432809013, 1.8963452747889928, 1.8937200137547083, 1.8910510199410575, 1.888303007398333, 1.8854930741446358, 1.8826092311314173, 1.879685606275286, 1.8766632761274065, 1.8736074992588587, 1.8704916409083776, 1.8672486713954382, 1.8639630590166365, 1.8606060573032923, 1.8571425846644811, 1.8535957336425781, 1.8500197955540247, 1.846273626599993, 1.8424869264875139, 1.8385744094848633, 1.8346267427716936, 1.8305154527936662, 1.8263195582798548, 1.8220484597342355, 1.8176755223955428, 1.813209124973842, 1.8085979052952357, 1.8038645471845354, 1.7990123203822546, 1.7940645899091447, 1.789022581917899, 1.7838725362505232, 1.778601918901716, 1.773188591003418, 1.7676927702767509, 1.7620744705200195, 1.7562942504882812, 1.750377586909703, 1.7443891252790178, 1.7382847922188895, 1.7320451055254256, 1.725632803780692, 1.7190778596060616, 1.7125166143689836, 1.7057671206338065, 1.6988753931862968, 1.6918061801365443, 1.6846534524645125, 1.677396024976458, 1.66998325075422, 1.6623826026916504, 1.6546585219247, 1.6468146528516496, 1.6388347148895264, 1.6307300158909388, 1.6224509988512312, 1.6141258648463659, 1.6057746069771903, 1.597179378782, 1.5885841165270125, 1.5798816680908203, 1.5710440703800745, 1.5620166233607702, 1.5529049464634486, 1.543769427708217], "val_accuracy": [0.050333332270383835, 0.05999999865889549, 0.07233333587646484, 0.08833333104848862, 0.10266666859388351, 0.11566666513681412, 0.1326666623353958, 0.15399999916553497, 0.17466667294502258, 0.19366666674613953, 0.21166667342185974, 0.2240000069141388, 0.24066667258739471, 0.25566667318344116, 0.27000001072883606, 0.28299999237060547, 0.2956666648387909, 0.3109999895095825, 0.3213333189487457, 0.3296666741371155, 0.3370000123977661, 0.34599998593330383, 0.3526666760444641, 0.35733333230018616, 0.36500000953674316, 0.367000013589859, 0.37166666984558105, 0.37533333897590637, 0.3803333342075348, 0.3840000033378601, 0.3883333206176758, 0.390666663646698, 0.3946666717529297, 0.3996666669845581, 0.4009999930858612, 0.406333327293396, 0.4113333225250244, 0.4143333435058594, 0.4176666736602783, 0.4216666519641876, 0.4273333251476288, 0.42933332920074463, 0.4326666593551636, 0.43700000643730164, 0.44066667556762695, 0.4440000057220459, 0.4449999928474426, 0.4449999928474426, 0.4466666579246521, 0.45133334398269653, 0.4533333480358124, 0.4560000002384186, 0.4586666524410248, 0.46000000834465027, 0.46266666054725647, 0.4646666646003723, 0.46799999475479126, 0.4699999988079071, 0.4726666808128357, 0.47699999809265137, 0.48133334517478943, 0.4833333194255829, 0.4860000014305115, 0.4906666576862335, 0.49133333563804626, 0.49399998784065247, 0.4970000088214874, 0.49966666102409363, 0.503333330154419, 0.5090000033378601, 0.5106666684150696, 0.5133333206176758, 0.5180000066757202, 0.5206666588783264, 0.5230000019073486, 0.5256666541099548, 0.5270000100135803, 0.5316666960716248, 0.5329999923706055, 0.5353333353996277, 0.5366666913032532, 0.5373333096504211, 0.5386666655540466, 0.5410000085830688, 0.5429999828338623, 0.5460000038146973, 0.5490000247955322, 0.550000011920929, 0.5516666769981384, 0.5533333420753479, 0.5546666383743286, 0.5559999942779541, 0.5563333630561829, 0.5590000152587891, 0.5606666803359985, 0.562333345413208, 0.5653333067893982, 0.5669999718666077, 0.5693333148956299, 0.5720000267028809]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [76, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 8, 3, 3, 2, 2, 9, 9, 2, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 3, 1, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.42085713148117065, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 6, 6, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), alpha), tf.math.add(beta, grad)), tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.332762070776622, 2.2368098094463034, 2.504926247792615, 2.2915685327376485, 2.272471474366748, 2.3151828155006164], "accuracy": [0.19310526549816132, 0.20604939758777618, 0.12310130894184113, 0.1410645842552185, 0.20499274134635925, 0.10342095047235489], "val_loss": [1.7071729728153773, 2.276700701032366, 1.97290005002703, 1.9732440539768763, 2.0078125, 1.957740374973842], "val_accuracy": [0.4246666729450226, 0.2953333258628845, 0.10100000351667404, 0.09966666996479034, 0.0989999994635582, 0.156333327293396]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 6, 1, 0, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 3, 3, 1, 1, 3, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5, 4, 4], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08889182657003403, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [93, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 2, 6, 1, 8, 4, 3, 8, 3, 3, 2, 2, 1, 3, 2, 0, 1, 7, 1, 2, 2, 2, 8, 2, 2, 9, 6, 9, 1, 3, 0, 2, 9], [0, 3, 3, 1, 1, 1, 3, 3, 1, 2, 3, 1, 3, 0, 3, 2, 3, 1, 2, 2, 4, 1, 4], [15, 2, 78, 38, 8, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [95476.06232102464, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.16589617729187012, 0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1069684883456.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [52, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 3, 2, 2, 6, 5, 3, 1, 3, 3, 2, 6, 1, 0, 9, 8, 4, 7, 8, 1, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 3, 1, 1, 3, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5, 4, 3], [21, 22, 78, 38, 23, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 56, 56, 32, 24, 5, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), grad), grad)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))), tf.math.pow(tf.math.add(beta, alpha), grad)), tf.math.add(tf.math.sqrt(tf.math.add(beta, alpha)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), beta)))), tf.math.subtract(tf.math.divide_no_nan(grad, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.negative(alpha)))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta)))))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3040319099370845, 57886542.90399493, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09140139818191528, 0.09192973375320435, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9828219413757324, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.05433333292603493, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [8, 9, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 6, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 3, 3, 3, 2, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3], [21, 3, 78, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9265.91111146133, 170697.61312904503, 776614.9187854973, 2139412.971899353, 4601729.56452252, 8572415.48831066], "accuracy": [0.10130762308835983, 0.10447761416435242, 0.09959053993225098, 0.09813763201236725, 0.09576013684272766, 0.09945846349000931], "val_loss": [34314.197544642855, 269454.58035714284, 904193.6785714285, 2137300.3571428573, 4167541.0, 7193680.571428572], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [76, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 2, 2, 9, 1, 3, 9, 5, 4, 8, 8, 2, 6, 4, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 2, 1, 3, 3, 0, 1, 3, 1, 3, 3, 3, 2, 3, 1, 1, 2, 4, 0], [76, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 31, 31, 19, 12, 3, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), tf.math.square(tf.math.add(beta, grad))))))))))), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), alpha)))), grad), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 9, 4, 0, 2, 9, 0, 3, 5, 5, 6, 7, 8, 2, 6, 2, 4, 2, 2, 9, 5, 0, 2, 3, 2, 2, 9, 8, 8, 2, 7, 7, 9, 9], [1, 3, 3, 3, 1, 1, 3, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5, 4, 4], [21, 2, 78, 38, 23, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 25, 25, 17, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.negative(grad))))))))), grad)), alpha)), tf.math.multiply(tf.math.square(alpha), tf.math.square(tf.math.add(beta, grad))))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07872143387794495, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [8, 2, 5, 6, 2, 6, 5, 3, 3, 2, 0, 2, 9, 0, 3, 5, 5, 2, 6, 8, 2, 6, 2, 4, 2, 2, 5, 5, 4, 2, 3, 2, 2, 9, 8, 8, 2, 7, 7, 9, 9], [3, 1, 3, 1, 3, 2, 3, 3, 0, 2, 3, 3, 3, 2, 3, 2, 0, 1, 0, 2, 4, 2, 0, 3], [33, 60, 78, 21, 12, 78, 35, 65, 86], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 63, 63, 39, 24, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)))), tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, beta), grad), grad))))))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), grad))))))), beta))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 3, 6, 0, 6, 9, 5, 4, 3, 3, 2, 4, 6, 3, 9, 2, 2, 7, 8, 4, 6, 2, 4, 2, 2, 9, 6, 0, 1, 3, 2, 2, 2, 8, 8, 2, 9, 7, 9, 8], [3, 3, 0, 1, 1, 2, 3, 3, 3, 2, 3, 1, 1, 2, 3, 2, 0, 1, 1, 2, 3, 2, 0, 3], [33, 60, 78, 21, 12, 47, 35, 65, 86], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 9, 9, 4, 5, 1, 2, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 2, 3, 5, 3, 3, 8, 9, 1, 0, 9, 3, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 2, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [25, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 9, 4, 5, 2, 3, 5, 3, 3, 8, 9, 1, 0, 9, 3, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 32, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 30, 30, 21, 9, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), tf.math.add(beta, grad)))))), tf.math.subtract(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 0, 2, 9, 0, 3, 5, 5, 3, 7, 5, 0, 6, 2, 4, 5, 2, 9, 8, 0, 2, 3, 2, 2, 9, 8, 8, 2, 7, 7, 9, 9], [3, 2, 1, 1, 1, 2, 3, 1, 0, 2, 3, 1, 2, 1, 3, 2, 0, 1, 2, 2, 4, 2, 0, 3, 1, 4, 2], [61, 2, 78, 38, 8, 47, 96, 65], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 31, 31, 19, 12, 2, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(alpha)))), tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), beta)), grad)))), alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3017408429293065, 2.3021483360233086, 2.3019289626830823, 2.302078457021002, 2.302093329761542, 2.3027618456951235], "accuracy": [0.09351472556591034, 0.09206181764602661, 0.09628847241401672, 0.09021265059709549, 0.09087307006120682, 0.09008057415485382], "val_loss": [1.9710070746285575, 1.9710073471069336, 1.9710076877049036, 1.9710078239440918, 1.9710081645420618, 1.971008368900844], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [98, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 3, 6, 5, 3, 3, 3, 3, 2, 9, 6, 3, 9, 5, 3, 7, 8, 2, 5, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 2, 1, 1, 1, 3, 2, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 1, 4, 0], [91, 2, 11, 38, 68, 47, 51, 68], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 55, 55, 34, 21, 6, 2, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), alpha)))))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, beta))))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), beta))))), tf.math.square(grad))), tf.math.add(beta, alpha))), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)))), grad)))), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3017408429293065, 2.302148111114381, 2.301928755755532, 2.3020778632576535, 2.3020928933588647, 2.3027614722745042], "accuracy": [0.09351472556591034, 0.09206181764602661, 0.09628847241401672, 0.09021265059709549, 0.09087307006120682, 0.09008057415485382], "val_loss": [1.9710070065089635, 1.9710072789873396, 1.9710074833461217, 1.9710074833461217, 1.97100796018328, 1.97100830078125], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [70, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [8, 2, 3, 6, 0, 8, 2, 3, 3, 3, 3, 2, 4, 6, 1, 2, 2, 3, 3, 8, 4, 6, 2, 4, 2, 3, 2, 6, 0, 2, 3, 2, 4, 0, 8, 8, 2, 1, 7, 0, 9], [3, 3, 3, 1, 1, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 2, 0, 1, 1, 2, 1, 3, 0, 3, 3, 2, 0, 3, 4, 0, 3], [91, 47, 11, 38, 68, 47, 51, 68], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.03142857179045677, "mapping_values": [1, 4, 4, 2, 2, 1, 72, 72, 41, 31, 7, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.multiply(tf.math.sqrt(alpha), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(beta, grad)))))), tf.math.add(beta, alpha)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta)))))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), grad))), tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), beta)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, grad), grad)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))))))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301996091668317, 2.302993642561125, 2.303539282547217, 2.3044306300083535, 2.3054653178935416, 2.3070742838638743], "accuracy": [0.09325055778026581, 0.09140139818191528, 0.09536388516426086, 0.08611807972192764, 0.08492933213710785, 0.08598599582910538], "val_loss": [1.9713733536856515, 1.9721709660121374, 1.9728986876351493, 1.9736722537449427, 1.974316120147705, 1.9751573290143694], "val_accuracy": [0.03566666692495346, 0.03133333474397659, 0.027666667476296425, 0.026333333924412727, 0.023000000044703484, 0.020999999716877937]}}]