[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7965714335441589, "mapping_values": [1, 4, 4, 2, 2, 1, 58, 58, 36, 22, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, alpha), alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), beta))))), tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), beta)), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2579569058600293, 1.8342982617351657, 1.3056627579368951, 0.9175104241581515, 0.8187270678974429, 0.7723974687721531, 0.7096646550057224, 0.6851943200526693, 0.6540921490268936, 0.6184490192064032, 0.5878017100250528, 0.5738399141043594, 0.5385509804570208, 0.523989311436526, 0.5079814343719498, 0.49689435406982024, 0.4807295728243101, 0.4584121430129612, 0.4541047239513004, 0.43995050523243623, 0.4327481431243694, 0.4238888131290489, 0.4069392704582643, 0.3980579573039633, 0.3884139882299516, 0.3811088609082934, 0.36503221135743463, 0.35713547398511525, 0.35231370061317124, 0.34663335402108547, 0.33875021338069194, 0.3252505446744712, 0.32560515865091133, 0.3197040193510125, 0.30327475575203466, 0.3030734283537393], "accuracy": [0.19218069314956665, 0.42491084337234497, 0.5564654469490051, 0.6622639298439026, 0.7014925479888916, 0.7117950320243835, 0.7288337349891663, 0.7454761862754822, 0.7548540234565735, 0.767401933670044, 0.778232753276825, 0.7841764688491821, 0.8001585006713867, 0.8094043135643005, 0.8133667707443237, 0.81548011302948, 0.8241975903511047, 0.8317263126373291, 0.8334434032440186, 0.8364813327789307, 0.8370096683502197, 0.8441421389579773, 0.8488970994949341, 0.8549728989601135, 0.8576145768165588, 0.858671247959137, 0.868049144744873, 0.8702945709228516, 0.8681812286376953, 0.871879518032074, 0.8725399374961853, 0.8770307898521423, 0.8800686597824097, 0.8790120482444763, 0.8897107243537903, 0.887201189994812], "val_loss": [1.8119166237967355, 0.9744453770773751, 0.6992694820676532, 0.6572293554033551, 0.5881229298455375, 0.5664676938738141, 0.5438719987869263, 0.5253369297300067, 0.4995201144899641, 0.4821267809186663, 0.45736874852861675, 0.4409601262637547, 0.4255121094839914, 0.41724068777901785, 0.4033024992261614, 0.4002947381564549, 0.39054534264973234, 0.38828790187835693, 0.3849568452153887, 0.37888369389942717, 0.3696240186691284, 0.3633680599076407, 0.35962252957480295, 0.351673994745527, 0.3490954722676958, 0.3484045352254595, 0.34268530777522493, 0.3388716237885611, 0.3403270925794329, 0.3358798793384007, 0.3259491409574236, 0.3278208715575082, 0.3255353144236973, 0.32569189582552227, 0.3199771557535444, 0.33078084673200336], "val_accuracy": [0.4266666769981384, 0.653333306312561, 0.7083333134651184, 0.7193333506584167, 0.7303333282470703, 0.7483333349227905, 0.7559999823570251, 0.762333333492279, 0.7743333578109741, 0.7820000052452087, 0.7903333306312561, 0.8016666769981384, 0.8146666884422302, 0.8220000267028809, 0.8276666402816772, 0.8270000219345093, 0.8386666774749756, 0.8339999914169312, 0.8403333425521851, 0.8349999785423279, 0.8426666855812073, 0.846666693687439, 0.8496666550636292, 0.8543333411216736, 0.8550000190734863, 0.8573333621025085, 0.856333315372467, 0.8583333492279053, 0.859000027179718, 0.8600000143051147, 0.8679999709129333, 0.8650000095367432, 0.8640000224113464, 0.8646666407585144, 0.8659999966621399, 0.8663333058357239]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 0, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 3, 3, 1, 1, 3, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7885714173316956, "mapping_values": [1, 4, 4, 2, 2, 1, 31, 31, 19, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.subtract(alpha, tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), alpha)))))), tf.math.square(tf.math.add(beta, grad))))), alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), beta), grad))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.286317926151657, 2.2452357665595915, 2.1892891995517285, 2.1035624411064857, 1.975894693433333, 1.7947092216406295, 1.62062363472786, 1.4564542232361515, 1.3197431671558009, 1.2321848867434269, 1.1658189631629503, 1.1148863641608897, 1.0529146088175785, 1.025086418402398, 0.9954563039342064, 0.9674346525875994, 0.9356906857268212, 0.9247344984055321, 0.8957726906523996, 0.8875169888022648, 0.8620299400040629, 0.8553420515375965, 0.8425303872754907, 0.8327463997306289, 0.8144252713346022, 0.8032747386484697, 0.8062147919165854, 0.7875000720152592, 0.794707447003065, 0.7865986135090661, 0.7664001194745196, 0.7662747182378112, 0.7572432222336102, 0.7509679996483929, 0.7498951968799068, 0.7369227101144349, 0.7346686332248789, 0.7303331959768765, 0.722555606301592, 0.7262141233532263, 0.7129033086338, 0.7023801875545868, 0.7104115340577739, 0.6989751981391473, 0.7057494846600835, 0.6947148629325083, 0.69846914592688, 0.6913060795487729, 0.6796320224907325, 0.6806321109148962, 0.676422310739917, 0.6749003961999198, 0.6719611937170566, 0.6644769686560479, 0.6646785883698182, 0.6664745439517579, 0.6675528472661185, 0.6597271671998676, 0.6468606045248958, 0.6476419095460214, 0.6508387650685807, 0.6454739042040757, 0.6444154672178027, 0.6459768864189267, 0.638583441822048, 0.6398596271327333, 0.6433849853059131, 0.6289001661694171, 0.633017229484356, 0.6290077790608102, 0.64014468572836, 0.6227956672842792], "accuracy": [0.13300752639770508, 0.2351076453924179, 0.3121120035648346, 0.3726060092449188, 0.4209483563899994, 0.46387532353401184, 0.48289525508880615, 0.5246334671974182, 0.5625412464141846, 0.5778629183769226, 0.6000528335571289, 0.6070532202720642, 0.629507303237915, 0.6369040012359619, 0.6495839357376099, 0.6520935297012329, 0.6700568199157715, 0.6737551093101501, 0.6767930388450623, 0.6847180128097534, 0.6892088055610657, 0.6894729733467102, 0.698190450668335, 0.6976621150970459, 0.7108704447746277, 0.7077004313468933, 0.7055870890617371, 0.7161537408828735, 0.71100252866745, 0.7124554514884949, 0.7235503792762756, 0.7232862114906311, 0.7243428826332092, 0.7248712182044983, 0.7257958054542542, 0.7363624572753906, 0.7331924438476562, 0.7304186820983887, 0.7372870445251465, 0.7342491149902344, 0.739400327205658, 0.7421740889549255, 0.7396644949913025, 0.7434949278831482, 0.7457403540611267, 0.748249888420105, 0.7452120184898376, 0.7442874312400818, 0.750231146812439, 0.7493065595626831, 0.7473253011703491, 0.750759482383728, 0.7495707273483276, 0.7537974119186401, 0.7586844563484192, 0.7524765729904175, 0.754589855670929, 0.7574957013130188, 0.763967752456665, 0.7593448758125305, 0.7623828053474426, 0.7630431652069092, 0.7644960880279541, 0.7650244235992432, 0.7625148296356201, 0.7609298825263977, 0.7642319202423096, 0.7675340175628662, 0.7664773464202881, 0.7695152759552002, 0.7597411274909973, 0.7703077793121338], "val_loss": [1.9348987170628138, 1.8901587894984655, 1.8229140554155623, 1.7175613130841936, 1.5652588435581751, 1.3735126427241735, 1.1914650372096471, 1.0442630563463484, 0.9377471378871373, 0.8659955603735787, 0.8097520385469709, 0.7688649381910052, 0.7366797413144793, 0.7080855880464826, 0.6872554847172329, 0.6695847511291504, 0.655015196119036, 0.6421118804386684, 0.6281660965510777, 0.6195117916379657, 0.610129748071943, 0.602014456476484, 0.5957026651927403, 0.58405259677342, 0.5805351563862392, 0.5731054714747837, 0.5694896834237235, 0.5626714910779681, 0.5606848682676043, 0.5538787501198905, 0.5493799107415336, 0.5441005059650966, 0.5425314732960292, 0.5385399205344064, 0.5363385847636631, 0.5355381625039237, 0.5266438211713519, 0.5242490087236676, 0.5218425137656075, 0.5172161374773298, 0.515427793775286, 0.5127864735467094, 0.511370130947658, 0.5086465392793927, 0.5049382618495396, 0.5031760931015015, 0.5001694985798427, 0.49656801564352854, 0.4954227549689157, 0.4936129706246512, 0.4927217960357666, 0.4918689898082188, 0.4899816853659494, 0.48769337790352957, 0.4835249696459089, 0.48330375126429964, 0.4790057795388358, 0.4781849043709891, 0.48251450061798096, 0.4779043708528791, 0.4731862885611398, 0.4724793093545096, 0.471785375050136, 0.4709099701472691, 0.46940418652125765, 0.4685964414051601, 0.46789092676980154, 0.4653996229171753, 0.4627904381070818, 0.4659581184387207, 0.46476822240012033, 0.46262000288282124], "val_accuracy": [0.3266666531562805, 0.4129999876022339, 0.47099998593330383, 0.518666684627533, 0.5633333325386047, 0.5943333506584167, 0.6200000047683716, 0.6546666622161865, 0.6683333516120911, 0.6819999814033508, 0.6959999799728394, 0.7056666612625122, 0.7056666612625122, 0.7143333554267883, 0.7260000109672546, 0.7256666421890259, 0.7319999933242798, 0.7296666502952576, 0.7409999966621399, 0.737333357334137, 0.7493333220481873, 0.7426666617393494, 0.7396666407585144, 0.7476666569709778, 0.7549999952316284, 0.7546666860580444, 0.7613333463668823, 0.7546666860580444, 0.7570000290870667, 0.7639999985694885, 0.765999972820282, 0.7636666893959045, 0.7663333415985107, 0.7706666588783264, 0.765666663646698, 0.7730000019073486, 0.7746666669845581, 0.7736666798591614, 0.7680000066757202, 0.7753333449363708, 0.7699999809265137, 0.7766666412353516, 0.7756666541099548, 0.7749999761581421, 0.7733333110809326, 0.7853333353996277, 0.7776666879653931, 0.7846666574478149, 0.7823333144187927, 0.781000018119812, 0.7860000133514404, 0.7839999794960022, 0.7820000052452087, 0.7829999923706055, 0.7826666831970215, 0.7863333225250244, 0.793666660785675, 0.7940000295639038, 0.7886666655540466, 0.7933333516120911, 0.7940000295639038, 0.7919999957084656, 0.7956666946411133, 0.7903333306312561, 0.7933333516120911, 0.7889999747276306, 0.8016666769981384, 0.7976666688919067, 0.7953333258628845, 0.7889999747276306, 0.7953333258628845, 0.7913333177566528]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 0, 6, 5, 3, 3, 3, 3, 2, 4, 6, 3, 9, 2, 3, 7, 8, 4, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 0, 8, 8, 2, 9, 7, 9, 9], [3, 3, 3, 1, 1, 2, 3, 3, 0, 2, 3, 1, 3, 2, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3], [21, 2, 24, 38, 37, 47, 96, 68], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7774285674095154, "mapping_values": [1, 4, 4, 2, 2, 1, 65, 65, 41, 24, 8, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(beta, grad)), grad)))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(beta, grad))), alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, beta))), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(tf.math.add(beta, alpha), beta))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta)))))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.286312744680759, 2.245160407803361, 2.188949883212471, 2.1024053899477564, 1.972906783429812, 1.7889048561459724, 1.6131038491941005, 1.4487883712101952, 1.3129768588712676, 1.2265971507441649, 1.1609420378005673, 1.1106715492521373, 1.048987919439367, 1.0217937787510323, 0.9925235575216321, 0.964970275230254, 0.9333362452358129, 0.9227769722350915, 0.8937748830316247, 0.88596717499786, 0.8604771408422544, 0.8538627654506924, 0.8412298235706193, 0.8316431006404623, 0.8133370855370722, 0.8023737760551255, 0.8054112310123608, 0.786691367177443, 0.79358909754721, 0.7859903570604583, 0.7658875355977487, 0.7656906362002505, 0.7565857698542331, 0.7501419080703517, 0.7494625747400646, 0.7363603975652877, 0.7343073305893474, 0.73000648692142, 0.7222320808159473, 0.7258494808185433, 0.7127116564368496, 0.701975011184719, 0.7101579327561899, 0.6988479527641738, 0.7053595000270052, 0.6943363930256045, 0.6982114612544453, 0.6909409381489571, 0.6795930313695581, 0.6804431080424539, 0.6763049502965403, 0.6748531159156695, 0.6716558473725219], "accuracy": [0.1328754425048828, 0.23497556149959564, 0.31224408745765686, 0.3727380931377411, 0.42108044028282166, 0.4649319648742676, 0.4846123456954956, 0.5262184739112854, 0.5635979175567627, 0.579447865486145, 0.6009774208068848, 0.6081098914146423, 0.6316206455230713, 0.6387531161308289, 0.6505085229873657, 0.6527539491653442, 0.6701889038085938, 0.6756042838096619, 0.6769251227378845, 0.6857746839523315, 0.6897371411323547, 0.6902654767036438, 0.6996433734893799, 0.6980583667755127, 0.7102100253105164, 0.7082287669181824, 0.7069079279899597, 0.7169462442398071, 0.7128516435623169, 0.7132478952407837, 0.7232862114906311, 0.7232862114906311, 0.7240787148475647, 0.7246070504188538, 0.726192057132721, 0.7367587089538574, 0.733588695526123, 0.7302865982055664, 0.7374191284179688, 0.735041618347168, 0.7404569983482361, 0.7434949278831482, 0.7397965788841248, 0.743891179561615, 0.7448157668113708, 0.748249888420105, 0.7452120184898376, 0.7436270117759705, 0.7499669790267944, 0.750231146812439, 0.7478536367416382, 0.750759482383728, 0.7493065595626831], "val_loss": [1.9348673820495605, 1.889984062739781, 1.8222438267299108, 1.7154945305415563, 1.5605488845280238, 1.365610156740461, 1.1824055058615548, 1.0359878540039062, 0.9310204642159599, 0.8606960603169033, 0.8055531638009208, 0.7655117511749268, 0.734108533178057, 0.705916200365339, 0.6853622709001813, 0.6678539684840611, 0.6535243477140155, 0.6406603540693011, 0.6270120995385307, 0.6188217912401471, 0.6092018059321812, 0.6010857139314923, 0.5950110639844622, 0.5833745513643537, 0.5800021205629621, 0.5722916637148175, 0.5690630163465228, 0.5620821373803275, 0.5604099546160016, 0.5534723997116089, 0.5490015234266009, 0.5436400685991559, 0.5423746109008789, 0.53823869568961, 0.5363496031079974, 0.5351811136518206, 0.5266815253666469, 0.5241648980549404, 0.5220390047345843, 0.517277547291347, 0.5151459148951939, 0.5125068937029157, 0.5110851355961391, 0.5086642163140433, 0.5047856228692191, 0.5031090123312814, 0.5000764812741961, 0.49661452429635183, 0.49549923624311176, 0.49346206869397846, 0.4930147613797869, 0.4918421506881714, 0.4900413581303188], "val_accuracy": [0.3266666531562805, 0.4129999876022339, 0.47099998593330383, 0.518666684627533, 0.5646666884422302, 0.5943333506584167, 0.6230000257492065, 0.6553333401679993, 0.6669999957084656, 0.6826666593551636, 0.6933333277702332, 0.7070000171661377, 0.7066666483879089, 0.7160000205039978, 0.7269999980926514, 0.7256666421890259, 0.7326666712760925, 0.731333315372467, 0.7413333058357239, 0.7363333106040955, 0.75, 0.7426666617393494, 0.7393333315849304, 0.7476666569709778, 0.7543333172798157, 0.7546666860580444, 0.762333333492279, 0.7553333044052124, 0.7576666474342346, 0.765333354473114, 0.765999972820282, 0.7646666765213013, 0.7646666765213013, 0.7706666588783264, 0.7663333415985107, 0.7743333578109741, 0.7743333578109741, 0.7739999890327454, 0.7666666507720947, 0.7749999761581421, 0.7710000276565552, 0.7770000100135803, 0.7756666541099548, 0.7760000228881836, 0.7739999890327454, 0.7846666574478149, 0.7773333191871643, 0.7860000133514404, 0.781333327293396, 0.7816666960716248, 0.7856666445732117, 0.7839999794960022, 0.781333327293396]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 2, 2, 9, 1, 3, 9, 5, 3, 9, 8, 2, 6, 2, 4, 4, 0, 9, 6, 8, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 3, 2, 3, 1, 3, 0, 2, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 23, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7639999985694885, "mapping_values": [1, 4, 4, 2, 2, 1, 31, 31, 20, 11, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, alpha)), alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.math.add(beta, grad))), grad), beta), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2985163066900793, 2.276381628246607, 2.233219298200364, 2.163176264855462, 2.039234624515514, 1.8192466235100995, 1.578008983979498, 1.4163151334667596, 1.355982295699391, 1.312037287150801, 1.173775301601877, 0.9957224325323779, 0.9192661325205052, 0.9110722316805682, 0.903046037235658, 0.8714101342965331, 0.8301536966513302, 0.8235513002030712, 0.8007228744107152, 0.7969719314335864, 0.7928312729220931, 0.7675229978520463, 0.7428736126953506, 0.7267785891408319, 0.7160877740268206, 0.7188220963328821, 0.712911103308996, 0.7028590227949495, 0.6901638471077242, 0.6830028662466181, 0.6708502946764707, 0.6672278849707933, 0.6630180969119875, 0.6472552831477462, 0.637069613060317, 0.6233421761865834, 0.6247325588400023, 0.6106688451726029, 0.5971749142302404, 0.6012382263347473, 0.6007197672082228, 0.5820819132631292, 0.5768677242254742, 0.5661469852809404, 0.5663649122145954, 0.5661878113135087, 0.5540702091924833, 0.5439585579258812, 0.5375734436639532, 0.5341224126953726, 0.5253814356186292, 0.5240859111436149, 0.5155201089175906, 0.5105259020047307, 0.516265658764807, 0.5135893831163617, 0.49851830055086666, 0.5021035083493441, 0.4881895457819673, 0.49189141378143225, 0.4885448647401966, 0.4779468358444768, 0.4716484714036195, 0.4749131576889904, 0.46537901337325316, 0.46559983285631346, 0.4602945692283193, 0.4541983619546846, 0.4489101107527378, 0.4423071990640109, 0.44127436851970175, 0.44461343845734114, 0.4396164271109108, 0.4380105598853674, 0.42930660724419456, 0.4372183245288981, 0.42213450574745764, 0.41653382500259395, 0.4148580653320104, 0.41414356845370875, 0.4090010472386977, 0.4007974550543271, 0.3983910816409537, 0.39487445304076024, 0.39424948038646745, 0.3881439744103555, 0.38958177157459856, 0.3793565080331506, 0.3829257426134678, 0.38646811451563634, 0.3818707589963959, 0.3749310304349865, 0.35970781794108925, 0.3739307254981906, 0.3634104128519085, 0.35666356937303645, 0.3518644254780118, 0.36181159094103954, 0.34739361228471766, 0.34506562635993376], "accuracy": [0.1026284471154213, 0.16470743715763092, 0.2646942138671875, 0.3440760672092438, 0.3953242599964142, 0.43891164660453796, 0.4682340621948242, 0.5074626803398132, 0.5367851257324219, 0.5676925182342529, 0.614317774772644, 0.6390172839164734, 0.6551313996315002, 0.6676793098449707, 0.678642213344574, 0.6816800832748413, 0.6917183995246887, 0.6934354901313782, 0.6977941989898682, 0.6926429867744446, 0.7030775547027588, 0.7132478952407837, 0.7226257920265198, 0.7195879220962524, 0.7321357727050781, 0.724739134311676, 0.7298903465270996, 0.7320036888122559, 0.7423061728477478, 0.7467969655990601, 0.7449478507041931, 0.7486461400985718, 0.750231146812439, 0.7574957013130188, 0.7565711140632629, 0.7602694630622864, 0.7637035846710205, 0.7721568942070007, 0.7746664881706238, 0.774798572063446, 0.7736098170280457, 0.7815347909927368, 0.7853652238845825, 0.787082314491272, 0.7865539789199829, 0.791969358921051, 0.7942147850990295, 0.796328067779541, 0.7960638999938965, 0.7979130744934082, 0.8010830879211426, 0.8049134612083435, 0.8024039268493652, 0.8024039268493652, 0.8062343001365662, 0.8058380484580994, 0.8133667707443237, 0.8109893202781677, 0.8178576231002808, 0.81112140417099, 0.8132346868515015, 0.8228767514228821, 0.8215559124946594, 0.8224804997444153, 0.8236692547798157, 0.8278959393501282, 0.8290846943855286, 0.8329150676727295, 0.8280280232429504, 0.8333113193511963, 0.8321225643157959, 0.8356888294219971, 0.837537944316864, 0.8333113193511963, 0.8381983637809753, 0.8392550349235535, 0.8403117060661316, 0.845859169960022, 0.8448025584220886, 0.8455950617790222, 0.8485008478164673, 0.8481045961380005, 0.8549728989601135, 0.8514066934585571, 0.8519350290298462, 0.8548408150672913, 0.8533879518508911, 0.8588033318519592, 0.8598600029945374, 0.852331280708313, 0.8557654023170471, 0.8552370667457581, 0.8664641380310059, 0.8562937378883362, 0.8656716346740723, 0.8628978729248047, 0.8642187118530273, 0.8614450097084045, 0.8679170608520508, 0.8651432991027832], "val_loss": [1.9588168689182825, 1.9269973209926061, 1.8756728853498186, 1.7861424854823522, 1.6187445776803153, 1.3462435517992293, 1.0560973031180245, 0.8653192009244647, 0.7806032385144915, 0.7414541414805821, 0.6991653782980782, 0.6595006159373692, 0.6707576172692435, 0.6852914605821881, 0.6623187065124512, 0.6234835045678275, 0.6018939529146466, 0.5891709838594709, 0.588349734033857, 0.5836540801184518, 0.5688942500523159, 0.5650077887943813, 0.559678452355521, 0.5455583844866071, 0.5427788496017456, 0.5370368787220546, 0.5265728235244751, 0.5192887783050537, 0.5105042116982597, 0.49753832817077637, 0.4880303995949881, 0.48273396492004395, 0.4754953214100429, 0.4689478022711618, 0.4647876535143171, 0.4613284042903355, 0.45689964294433594, 0.4500887223652431, 0.4447564567838396, 0.4420804636819022, 0.4384887048176357, 0.4329620173999241, 0.42989356177193777, 0.4310434120041983, 0.43154603242874146, 0.42787002665655954, 0.42125046253204346, 0.41565134695598055, 0.41166460514068604, 0.4093437279973711, 0.4087356414113726, 0.40992385149002075, 0.41206540380205425, 0.41314949308122906, 0.41214034387043547, 0.40917214325496126, 0.4047429987362453, 0.3991174442427499, 0.39482258898871286, 0.39282333850860596, 0.3911081297057016, 0.38812102590288433, 0.38418225731168476, 0.38134304114750456, 0.37986704281398226, 0.3792966433933803, 0.3783932157925197, 0.37695265667779104, 0.37543709789003643, 0.3735550216266087, 0.3718321067946298, 0.3696669169834682, 0.36780777999332975, 0.3653625420161656, 0.36394175461360384, 0.3631305694580078, 0.36384691510881695, 0.366061840738569, 0.3669565830911909, 0.36638219015938894, 0.36458444595336914, 0.36254073892320904, 0.36058126177106586, 0.35861116647720337, 0.3579262409891401, 0.35729460205350605, 0.35642796754837036, 0.35591323035103933, 0.35330967392240253, 0.35013651847839355, 0.35008364064352854, 0.3501212341444833, 0.3483368584087917, 0.3460524082183838, 0.3448831524167742, 0.3443763681820461, 0.34450940574918476, 0.34353374583380564, 0.3386439255305699, 0.33457509108952116], "val_accuracy": [0.12666666507720947, 0.351666659116745, 0.4076666533946991, 0.4480000138282776, 0.5023333430290222, 0.5653333067893982, 0.625333309173584, 0.6700000166893005, 0.6793333292007446, 0.6959999799728394, 0.7043333053588867, 0.7203333377838135, 0.7170000076293945, 0.7246666550636292, 0.7149999737739563, 0.7233333587646484, 0.7276666760444641, 0.7429999709129333, 0.7429999709129333, 0.7390000224113464, 0.750333309173584, 0.7519999742507935, 0.750333309173584, 0.7526666522026062, 0.753000020980835, 0.7620000243186951, 0.7663333415985107, 0.7696666717529297, 0.7749999761581421, 0.7766666412353516, 0.781333327293396, 0.781333327293396, 0.7883333563804626, 0.7916666865348816, 0.7940000295639038, 0.7929999828338623, 0.7956666946411133, 0.7990000247955322, 0.8006666898727417, 0.8046666383743286, 0.8076666593551636, 0.8103333115577698, 0.809333324432373, 0.8113333582878113, 0.8100000023841858, 0.8086666464805603, 0.8146666884422302, 0.8166666626930237, 0.8230000138282776, 0.8253333568572998, 0.8263333439826965, 0.8203333616256714, 0.8246666789054871, 0.8233333230018616, 0.8246666789054871, 0.8303333520889282, 0.8343333601951599, 0.8370000123977661, 0.8363333344459534, 0.8370000123977661, 0.831333339214325, 0.8333333134651184, 0.8393333554267883, 0.8446666598320007, 0.8450000286102295, 0.843999981880188, 0.8456666469573975, 0.8443333506584167, 0.8429999947547913, 0.8433333039283752, 0.8483333587646484, 0.8476666808128357, 0.8473333120346069, 0.8486666679382324, 0.8503333330154419, 0.8510000109672546, 0.8523333072662354, 0.8519999980926514, 0.8536666631698608, 0.8526666760444641, 0.8556666374206543, 0.8573333621025085, 0.8576666712760925, 0.8553333282470703, 0.8573333621025085, 0.8566666841506958, 0.8566666841506958, 0.8583333492279053, 0.8613333106040955, 0.862333357334137, 0.8610000014305115, 0.8613333106040955, 0.8646666407585144, 0.8653333187103271, 0.8676666617393494, 0.8653333187103271, 0.8686666488647461, 0.8676666617393494, 0.8693333268165588, 0.8679999709129333]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 9, 9, 6, 0, 2, 3, 2, 2, 8, 8, 8, 2], [3, 3, 3, 1, 3, 1, 0, 3, 0, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 2, 4, 2], [21, 2, 98, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303042140760914, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 5, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 1, 6, 5, 3, 6, 1, 3, 8, 2, 1, 3, 9, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 1, 3, 3, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4], [68, 86, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 4, 1, 3, 8, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 0, 1, 3, 3, 3, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 3, 4, 0], [81, 86, 68, 38, 8, 55, 53, 49, 40], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 30, 30, 16, 14, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), alpha)))), tf.math.pow(tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad))), grad), tf.math.add(beta, beta)))), tf.math.add(beta, grad)), tf.math.add(beta, alpha)))))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 4, 1, 6, 4, 3, 5, 3, 3, 2, 1, 1, 3, 2, 0, 8, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 3, 3, 1, 1, 3, 3, 1, 0, 3, 1, 3, 0, 3, 2, 3, 3, 1, 2, 4, 1, 3], [56, 2, 78, 38, 8, 47], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.13736626505851746, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 0, 3, 6, 4, 6, 5, 3, 3, 3, 1, 2, 9, 1, 3, 9, 5, 3, 7, 3, 2, 2, 2, 4, 2, 2, 9, 6, 0, 5, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 0, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 1, 6, 4, 3, 8, 3, 3, 2, 2, 1, 3, 2, 0, 1, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 3, 3, 1, 1, 3, 3, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4], [21, 2, 78, 38, 8, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 2, 2, 1, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [7, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 1, 6, 4, 3, 8, 3, 3, 2, 2, 1, 3, 2, 0, 1, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 1, 1, 3, 3, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4], [68, 86, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1776.5035889428668, 45955.64048208212, 238950.5601431449, 595201.4907995971, 1326363.1256686698, 2324831.589890701], "accuracy": [0.09377889335155487, 0.09774138033390045, 0.09470347315073013, 0.09430722147226334, 0.08691058307886124, 0.10619468986988068], "val_loss": [3610.5770089285716, 42668.69977678572, 81797.80357142857, 40045.72991071428, 83915.43526785714, 68959.48660714286], "val_accuracy": [0.10433333367109299, 0.10433333367109299, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 1, 6, 3, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [87, 58, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 2, 3, 3, 3, 3, 2, 2, 4, 3, 9, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 0, 3, 3, 2, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 95, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 20, 14, 8, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [9, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 2, 1, 3, 9, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [4, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4], [68, 83, 68, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [33, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 0, 2, 9, 4, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 2, 4, 1, 6, 1, 5, 2, 8, 9, 6, 0, 0, 9, 5, 2, 9], [2, 3, 0, 1, 1, 2, 3, 0, 2, 2, 3, 1, 3, 4, 3, 3, 3, 1, 1, 2, 4], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 47, 47, 31, 16, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, beta), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(alpha, beta))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, grad)))))))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))))), grad)), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 6, 0, 2, 9, 6, 3, 2, 3, 9, 4, 3, 1, 0, 0, 0, 2, 7, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 1, 1, 3, 3, 1, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, alpha))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [9, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 1, 0, 4, 9, 6, 3, 2, 3, 9, 4, 3, 1, 0, 0, 0, 2, 7, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3587893552909893, 3.044306991311616, 4.891135308531848, 8.025963095626055, 12.346507529824432, 17.899195300117224, 25.01778840344769], "accuracy": [0.09893012791872025, 0.10342095047235489, 0.10051512718200684, 0.09457138925790787, 0.10685510188341141, 0.10315678268671036, 0.09972262382507324], "val_loss": [2.096665450504848, 2.791003840310233, 4.325421742030552, 6.660703659057617, 9.771140507289342, 13.701074055262975, 18.51035145350865], "val_accuracy": [0.09933333098888397, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 0, 0, 6, 2, 2, 5, 0, 3, 3, 3, 2, 2, 1, 3, 9, 2, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 2, 1, 1, 3, 2, 0, 2, 3, 3, 0, 0, 3, 2, 0, 1, 3, 2, 4, 0, 1], [21, 2, 78, 38, 8, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.08285713940858841, "mapping_values": [1, 4, 4, 2, 2, 0, 4, 4, 3, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3008947843542313, 2.29819655601044, 2.29907026226022, 2.301082070571966, 2.3024629932809675, 2.3026859179274943, 2.3029522621211216, 2.303206279875816, 2.3034712153497607], "accuracy": [0.09721305221319199, 0.10632677376270294, 0.09985470771789551, 0.08717474341392517, 0.09087307006120682, 0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9687291554042272, 1.9692674364362444, 1.9714807101658411, 1.9730158533368791, 1.9737029756818498, 1.974004132407052, 1.9742139407566615, 1.9744541985648019, 1.9747300829206194], "val_accuracy": [0.06599999964237213, 0.10300000011920929, 0.08500000089406967, 0.1080000028014183, 0.0976666659116745, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 1, 3, 2, 9, 3, 9, 2, 3, 9, 9, 3, 1, 0, 0, 3, 2, 7, 8, 1, 6, 1, 8, 2, 5, 9, 9, 0, 0, 3, 0, 2, 9], [3, 2, 3, 2, 1, 1, 3, 3, 0, 2, 3, 3, 0, 0, 3, 2, 0, 1, 3, 2, 4, 0, 1], [21, 2, 7, 38, 8, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.07371428608894348, "mapping_values": [1, 4, 4, 2, 2, 0, 13, 13, 8, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), grad)), beta)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3009829672651048, 2.2988636060051393, 2.2997399468573723, 2.301486884062836, 2.3026100923797443, 2.302775747472773, 2.3030946998863233, 2.3035240891965123, 2.304210157473767], "accuracy": [0.09708096832036972, 0.10368511080741882, 0.09747721254825592, 0.08347642421722412, 0.09113723784685135, 0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9691833087376185, 1.9700383458818709, 1.9718702180044991, 1.9732354709080286, 1.9737918717520577, 1.9740994998386927, 1.974425997052874, 1.9749289921351842, 1.9757159096854073], "val_accuracy": [0.06333333253860474, 0.09333333373069763, 0.08166666328907013, 0.09966666996479034, 0.0976666659116745, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 3, 1, 1, 3, 3, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3019045086710634, 2.301880203170736, 2.3019136433052805, 2.3019750961900276, 2.3025869660609906, 2.304006884709294], "accuracy": [0.0940430611371994, 0.09708096832036972, 0.08928807079792023, 0.08994849026203156, 0.08836349099874496, 0.09351472556591034], "val_loss": [1.9710144996643066, 1.971060003553118, 1.971193517957415, 1.9714720589773995, 1.9719554356166296, 1.9727134023393904], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.036666665226221085, 0.03633333370089531, 0.03333333507180214, 0.02866666577756405]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [28, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 5, 2, 2, 2, 1, 3, 9, 0, 3, 7, 8, 2, 6, 2, 8, 8, 2, 9, 0, 0, 0, 3, 0, 2, 9, 2, 6], [3, 3, 2, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 3, 4, 3, 1], [68, 86, 68, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 47, 47, 30, 17, 4, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(beta)))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(beta, alpha), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), beta)))), tf.math.add(beta, grad))), tf.math.add(alpha, tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, beta))))))))), tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.3019030964243856, 2.301855646529454, 2.3018055817769456, 2.301656065174869, 2.3018491370188894, 2.3026171086124534], "accuracy": [0.0940430611371994, 0.09708096832036972, 0.08994849026203156, 0.08955223858356476, 0.09074098616838455, 0.09615638852119446], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]