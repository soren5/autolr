[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 5, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 2, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 1, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8468571305274963, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9380150226758786, 1.0025180917154008, 0.7725945554389269, 0.6856045804444463, 0.6281818976775136, 0.5843733749479713, 0.5527743495545131, 0.526344830514953, 0.4949931063278555, 0.48153403896571245, 0.4531033786020857, 0.4508952719266814, 0.42724831305270056, 0.41461515427816653, 0.39678309828519287, 0.3829631477598312, 0.374128699361719, 0.3634039345804443, 0.3453287384521377, 0.34325011789586174, 0.3368126082303832, 0.3319679193170142, 0.32543061642346993, 0.3066749998118978, 0.3031625648720106, 0.30039051264079647, 0.29342188799795366, 0.27804725662733915, 0.27394839046834685, 0.2670358060735517], "accuracy": [0.3369435966014862, 0.6369040012359619, 0.7099458575248718, 0.7391361594200134, 0.7536653280258179, 0.7732135653495789, 0.7890635132789612, 0.8013472557067871, 0.8083476424217224, 0.8197067975997925, 0.833179235458374, 0.8289526104927063, 0.8430854678153992, 0.8462554216384888, 0.8532558679580688, 0.8537842035293579, 0.859199583530426, 0.8570862412452698, 0.8730682730674744, 0.8683133125305176, 0.8691058158874512, 0.8754457831382751, 0.8739928603172302, 0.8845595121383667, 0.8825782537460327, 0.8838990926742554, 0.8905032277107239, 0.8926165699958801, 0.8948619961738586, 0.8976356983184814], "val_loss": [0.8863883018493652, 0.6036856855664935, 0.5368786369051252, 0.5222764526094709, 0.46476597445351736, 0.4493239096232823, 0.42437864201409475, 0.4044844252722604, 0.3923972419330052, 0.37284380197525024, 0.3666108080318996, 0.36405702999659945, 0.37000792367117746, 0.3425598740577698, 0.33561179467609953, 0.333982731614794, 0.32678868089403423, 0.3303394062178476, 0.3307520406586783, 0.3205530643463135, 0.31299756254468647, 0.3111054130962917, 0.3211398720741272, 0.3156489985329764, 0.30720451899937223, 0.30429536955697195, 0.30752573694501606, 0.31659294026238577, 0.32446971961430143, 0.3076304623058864], "val_accuracy": [0.574999988079071, 0.7350000143051147, 0.753000020980835, 0.7609999775886536, 0.7896666526794434, 0.796999990940094, 0.8133333325386047, 0.8216666579246521, 0.8243333101272583, 0.8399999737739563, 0.8383333086967468, 0.8426666855812073, 0.8379999995231628, 0.8560000061988831, 0.862333357334137, 0.8636666536331177, 0.8636666536331177, 0.856333315372467, 0.859333336353302, 0.8666666746139526, 0.8663333058357239, 0.8736666440963745, 0.8673333525657654, 0.8703333139419556, 0.8763333559036255, 0.875333309173584, 0.8740000128746033, 0.874666690826416, 0.8709999918937683, 0.875333309173584]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 7, 5, 6, 5, 1, 0, 2, 0, 2, 2, 5, 6, 0, 5, 3, 0, 6, 2, 5, 4, 2, 2, 3, 0, 6, 5, 2, 2, 1, 2, 9, 2, 8, 2, 2, 0, 0, 9, 3, 6, 4, 5, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 1, 2, 2, 3, 0, 2, 0, 2, 2, 0, 0, 0, 1, 1, 1, 3, 0, 2, 3, 4, 2, 3, 3, 2, 3, 2, 3, 0, 3, 2, 4, 0, 3, 0, 5], [86, 21, 78, 87, 37, 47, 96, 35, 50, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8411428332328796, "mapping_values": [1, 4, 4, 2, 2, 1, 65, 65, 41, 24, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(alpha, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.negative(beta), tf.math.add(beta, grad)))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, beta)), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(alpha))))), tf.math.add(beta, alpha))))), tf.math.add(beta, grad))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.negative(beta)))))))), grad)))))))))))), grad))))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9380159668871408, 1.0023785608477045, 0.77283934851868, 0.6879972223324814, 0.6262459537655749, 0.5831020069931634, 0.5548878649222364, 0.5256257548213809, 0.4960449043911808, 0.4837002162770541, 0.4530234509817503, 0.45122745740588444, 0.4302294954663459, 0.41880272760871157, 0.40130047075988723, 0.38260636625587824, 0.37961779069339974, 0.36338347088328565, 0.3513097321596663, 0.3447060054791775, 0.33865256235347907, 0.33252324837231284, 0.32843005070281994, 0.30662890694412526, 0.3072888133918227, 0.3069406950541491, 0.2948626838521147, 0.2830012901080299, 0.2792942521712563, 0.27454915794682555, 0.2615196759107799, 0.26120381084620253, 0.24178120172286724, 0.24496271813062234, 0.23066666950607628, 0.23202449694451024, 0.23114201534953274, 0.21571389107758643, 0.213330872454317, 0.20715962987471376, 0.2018184067058746, 0.2079078435303434, 0.2003686426692336, 0.20667546523434532, 0.19449680629911487], "accuracy": [0.3369435966014862, 0.637432336807251, 0.7096816897392273, 0.7367587089538574, 0.7564390301704407, 0.7737419009208679, 0.7882710099220276, 0.8009510040283203, 0.8062343001365662, 0.8204993009567261, 0.8330471515655518, 0.8284242749214172, 0.8393871188163757, 0.8416325449943542, 0.8499537706375122, 0.8558974862098694, 0.8585391640663147, 0.8623695969581604, 0.8714832663536072, 0.8681812286376953, 0.8704266548156738, 0.8750495314598083, 0.8713511824607849, 0.8837670087814331, 0.8828424215316772, 0.8798044919967651, 0.8887861371040344, 0.8908994793891907, 0.8905032277107239, 0.8961827754974365, 0.8961827754974365, 0.898428201675415, 0.9034473896026611, 0.9085986018180847, 0.9116365313529968, 0.908730685710907, 0.909259021282196, 0.9167877435684204, 0.9140139818191528, 0.9203540086746216, 0.920089840888977, 0.9179764986038208, 0.9208822846412659, 0.9190331697463989, 0.9257693886756897], "val_loss": [0.8864224638257708, 0.6040550129754203, 0.5379784618105207, 0.5225086723055158, 0.4624189649309431, 0.44687676429748535, 0.4244405286652701, 0.4038701057434082, 0.39812209776469637, 0.37398662737437655, 0.37150198221206665, 0.36534292357308523, 0.3772293840135847, 0.3447574462209429, 0.3356682402747018, 0.3331873757498605, 0.3314806308065142, 0.335486786706107, 0.32543552773339407, 0.31999281474522184, 0.31483098438807894, 0.30962744780949186, 0.3134692226137434, 0.31516643932887484, 0.3092788202422006, 0.3047465682029724, 0.3062332102230617, 0.32187564032418386, 0.3199578949383327, 0.3044843929154532, 0.3090235335486276, 0.3056628704071045, 0.300466571535383, 0.3060306651251657, 0.3046345966202872, 0.31062490599496023, 0.31465028864996775, 0.3107230578150068, 0.31780294861112324, 0.30481719970703125, 0.3244354213987078, 0.3131442495754787, 0.3282125847680228, 0.3140942028590611, 0.31059260027749197], "val_accuracy": [0.574999988079071, 0.734666645526886, 0.7509999871253967, 0.7616666555404663, 0.7919999957084656, 0.7940000295639038, 0.8096666932106018, 0.8216666579246521, 0.8216666579246521, 0.8399999737739563, 0.8349999785423279, 0.8410000205039978, 0.8353333473205566, 0.8619999885559082, 0.8600000143051147, 0.8616666793823242, 0.8613333106040955, 0.8569999933242798, 0.8656666874885559, 0.8690000176429749, 0.8663333058357239, 0.8696666955947876, 0.8666666746139526, 0.8666666746139526, 0.8740000128746033, 0.875, 0.8736666440963745, 0.8706666827201843, 0.8703333139419556, 0.875333309173584, 0.8759999871253967, 0.8790000081062317, 0.8796666860580444, 0.8790000081062317, 0.8796666860580444, 0.8820000290870667, 0.8799999952316284, 0.8793333172798157, 0.8793333172798157, 0.8830000162124634, 0.8830000162124634, 0.8740000128746033, 0.8809999823570251, 0.8769999742507935, 0.8816666603088379]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 2, 7, 5, 6, 5, 1, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 0, 1, 2, 9, 2, 8, 2, 2, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 0, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 71, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8391428589820862, "mapping_values": [1, 4, 4, 2, 2, 1, 78, 78, 46, 32, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 101, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(grad, tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), grad))), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(alpha)))), tf.math.add(beta, alpha)))))))))), tf.math.add(beta, alpha))))), grad))))), grad))))), tf.math.add(beta, beta))))), grad))), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(beta, grad), tf.math.divide_no_nan(grad, beta))))))), tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9380152407355076, 1.0025137294521265, 0.7726458131582068, 0.6877146594402513, 0.6280138066746791, 0.5829562667401522, 0.5548657208637806, 0.5272045265162358, 0.49688496975504476, 0.48330606245219887, 0.4532363366937404, 0.45346051967060563, 0.43151364137452153, 0.4174077163605784, 0.40589827242040555, 0.38122485043303117, 0.382263941027784, 0.36532357356347084, 0.34810088200733535, 0.34649475415810116, 0.34105448022715057, 0.3365183489166152, 0.3296133385964546, 0.3160029297153066, 0.3056927841841159, 0.3033547272748006, 0.2896165514800054, 0.2775406733346165, 0.27583661635302126, 0.26812273015939425, 0.25836403719886986, 0.2553041064901406, 0.23853892544753139, 0.2444083034409634, 0.23292482234640932, 0.23172747474761607, 0.2295459041687098, 0.21550171703922907], "accuracy": [0.3369435966014862, 0.6375643610954285, 0.7102100253105164, 0.7376832365989685, 0.7559106945991516, 0.7754589915275574, 0.7880068421363831, 0.7996301651000977, 0.8095363974571228, 0.8181217908859253, 0.8297450542449951, 0.8300092220306396, 0.8388587832450867, 0.8450667262077332, 0.8477083444595337, 0.8544445633888245, 0.8553691506385803, 0.8577466607093811, 0.8714832663536072, 0.8693699836730957, 0.8688416481018066, 0.8729361891746521, 0.8713511824607849, 0.8803328275680542, 0.8833707571029663, 0.8817857503890991, 0.8920882344245911, 0.8944657444953918, 0.894069492816925, 0.8982961177825928, 0.8982961177825928, 0.9041078090667725, 0.9062210917472839, 0.9062210917472839, 0.9080702662467957, 0.910711944103241, 0.9074098467826843, 0.9183727502822876], "val_loss": [0.8863604068756104, 0.6039796216147286, 0.5378600188664028, 0.5242893525532314, 0.46214825766427176, 0.4477184500013079, 0.42757717200687956, 0.4067267520087106, 0.397354645388467, 0.37291175978524344, 0.3764166831970215, 0.36524075269699097, 0.3749584215027945, 0.34560794489724295, 0.3374991502080645, 0.3372572830745152, 0.3287902389253889, 0.33542514698846, 0.3316959398133414, 0.32205255542482647, 0.3110871059553964, 0.3110237547329494, 0.3194952266556876, 0.31346170391355244, 0.30966205256325857, 0.3057870439120701, 0.3096864989825657, 0.31856725897107807, 0.32124437604631695, 0.30891592161996023, 0.30239880084991455, 0.3042495335851397, 0.3053647450038365, 0.3038884997367859, 0.3036688395908901, 0.3088267019816807, 0.31586107185908724, 0.30961550985063824], "val_accuracy": [0.574999988079071, 0.734333336353302, 0.750333309173584, 0.7613333463668823, 0.7889999747276306, 0.7960000038146973, 0.8066666722297668, 0.8190000057220459, 0.8230000138282776, 0.8376666903495789, 0.8333333134651184, 0.843666672706604, 0.8366666436195374, 0.8579999804496765, 0.859666645526886, 0.8653333187103271, 0.8633333444595337, 0.8579999804496765, 0.8629999756813049, 0.8673333525657654, 0.8686666488647461, 0.8669999837875366, 0.8693333268165588, 0.8679999709129333, 0.875333309173584, 0.8736666440963745, 0.8703333139419556, 0.8726666569709778, 0.8743333220481873, 0.8766666650772095, 0.8796666860580444, 0.8799999952316284, 0.8803333044052124, 0.8793333172798157, 0.8790000081062317, 0.8803333044052124, 0.8793333172798157, 0.8799999952316284]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 7, 5, 6, 5, 1, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 1, 0, 6, 5, 2, 0, 1, 2, 9, 6, 8, 2, 2, 6, 0, 8, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 3, 3, 0, 2, 0, 3, 2, 0, 0, 0, 1, 1, 0, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 0, 3, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 71, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8334285616874695, "mapping_values": [1, 4, 4, 2, 2, 1, 75, 75, 44, 31, 10, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 98, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.square(tf.math.subtract(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, alpha))))))))))), tf.math.add(beta, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(beta, beta)))))))))), grad))), grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.multiply(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(grad, beta)))))), tf.math.pow(grad, grad)))))))))))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9380224830895494, 1.0021640469511155, 0.7732397233175485, 0.6859179426256723, 0.6263886231394208, 0.5870647784772723, 0.5558918718774605, 0.5260073844987514, 0.4967200319056246, 0.482871199662675, 0.4515836952959526, 0.4485827267579336, 0.4310437892453545, 0.4158790550802236, 0.40090958633364276, 0.38416771143340256, 0.3783044830257898, 0.365079089032818, 0.3538400590333169, 0.3460736024837925, 0.3350723816844309, 0.3348662444841687, 0.3260031917650686, 0.30799438508667604, 0.30498649899308644, 0.2968361258286338, 0.2889106190317988, 0.2713251474188335, 0.27153980627846896, 0.2622781205233991, 0.25435332583713494, 0.2597417130706144, 0.2340335321621636, 0.2363617163800513, 0.22265286816660723, 0.2248348672104833, 0.22908638800336795, 0.2184436949780116], "accuracy": [0.33681151270866394, 0.6371681690216064, 0.7092854380607605, 0.7375511527061462, 0.7573636174201965, 0.7724210619926453, 0.7889314293861389, 0.7991018295288086, 0.8095363974571228, 0.8193105459213257, 0.8322546482086182, 0.8298771381378174, 0.8359529972076416, 0.8428213000297546, 0.8507462739944458, 0.8533879518508911, 0.8581429123878479, 0.858671247959137, 0.8701624870300293, 0.869502067565918, 0.8720116019248962, 0.8720116019248962, 0.8712190985679626, 0.8802007436752319, 0.8848236799240112, 0.8836349248886108, 0.8923524022102356, 0.8924844861030579, 0.8948619961738586, 0.9006736278533936, 0.8990886211395264, 0.8990886211395264, 0.9083344340324402, 0.9097873568534851, 0.9121648669242859, 0.913617730140686, 0.9079381823539734, 0.9191652536392212], "val_loss": [0.886509827205113, 0.60481515952519, 0.5377866200038365, 0.5204989228929792, 0.46325976508004324, 0.451086163520813, 0.42708425862448557, 0.4046676584652492, 0.39865549973079134, 0.371070785181863, 0.36691928761346, 0.3604618225778852, 0.36924924169267925, 0.34510710409709383, 0.33446901185171946, 0.3399189370019095, 0.32581030470984323, 0.33554487568991526, 0.3272136279514858, 0.31647811617170063, 0.31831990821020945, 0.3129852158682687, 0.3204510041645595, 0.31320652791431974, 0.3070122514452253, 0.30460359369005474, 0.31362277269363403, 0.3203003065926688, 0.32423722743988037, 0.2983375447137015, 0.3066228117261614, 0.3115929194859096, 0.30454797404153006, 0.30246845313480925, 0.30950060061046053, 0.3100770626749311, 0.3269925798688616, 0.31343971831457956], "val_accuracy": [0.574999988079071, 0.7323333621025085, 0.7536666393280029, 0.7620000243186951, 0.7889999747276306, 0.7953333258628845, 0.8069999814033508, 0.8213333487510681, 0.8206666707992554, 0.8386666774749756, 0.8396666646003723, 0.843999981880188, 0.8429999947547913, 0.859333336353302, 0.8613333106040955, 0.8610000014305115, 0.8653333187103271, 0.8539999723434448, 0.8640000224113464, 0.8679999709129333, 0.8669999837875366, 0.871999979019165, 0.8686666488647461, 0.8693333268165588, 0.8759999871253967, 0.875, 0.8706666827201843, 0.8726666569709778, 0.8733333349227905, 0.8769999742507935, 0.8756666779518127, 0.874666690826416, 0.8836666941642761, 0.8820000290870667, 0.8786666393280029, 0.8820000290870667, 0.874666690826416, 0.8766666650772095]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 5, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 2, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 1, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 15, 61, 76, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8188571333885193, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1610137511553025, 1.2712034505072711, 0.8691430539109247, 0.7587946859396145, 0.6959997439082146, 0.6514233396888142, 0.6281423612183206, 0.6145349770583622, 0.5803738516540008, 0.5697407609184169, 0.5472858845360952, 0.5375917133890076, 0.520340403171657, 0.5061013503372866, 0.4909076029362223, 0.4787570794559882, 0.47691875014795115, 0.4570365086436004, 0.4500711672278664, 0.44363028539674093, 0.4302866266325181, 0.4311372931717472, 0.4134578800724167, 0.40325361545358934, 0.3989412708997947, 0.3888542278331615, 0.38830602958674415, 0.37604997650019134, 0.37748615062861884, 0.3672240783061019, 0.3537900143602757, 0.36454912499744724, 0.3431857340150994, 0.34259555827451815, 0.33547968202971856, 0.33638323500030126, 0.3368287181117358, 0.3248409528214902, 0.3188293587695401, 0.3063117435674122, 0.303051824433346, 0.3060056676426584, 0.3124598291028587, 0.30952367989173923, 0.2975933077179162, 0.28428107104076605, 0.27600062349689414, 0.27542829314762685, 0.28004548665302903, 0.2774718998130664], "accuracy": [0.26561880111694336, 0.559371292591095, 0.6758684515953064, 0.7079645991325378, 0.7368907928466797, 0.7477215528488159, 0.7537974119186401, 0.7687227725982666, 0.7770439982414246, 0.7802139520645142, 0.7942147850990295, 0.798309326171875, 0.8042530417442322, 0.81112140417099, 0.8144234418869019, 0.8189142942428589, 0.8207634687423706, 0.83119797706604, 0.8338396549224854, 0.8335754871368408, 0.8401796221733093, 0.8403117060661316, 0.844010055065155, 0.8535200357437134, 0.8499537706375122, 0.8570862412452698, 0.8537842035293579, 0.859199583530426, 0.8595958352088928, 0.8609166741371155, 0.8684453964233398, 0.8602562546730042, 0.8716153502464294, 0.8714832663536072, 0.8708229064941406, 0.8735966086387634, 0.86553955078125, 0.8780874609947205, 0.8803328275680542, 0.8844274282455444, 0.8841632604598999, 0.8820499181747437, 0.8815215826034546, 0.8850878477096558, 0.8869370222091675, 0.8899748921394348, 0.8953903317451477, 0.894069492816925, 0.8916919827461243, 0.8911636471748352], "val_loss": [1.307163851601737, 0.6845214026314872, 0.5815849304199219, 0.5570394652230399, 0.5107274566377912, 0.4932023116520473, 0.4790314095360892, 0.46847283840179443, 0.44942639555249897, 0.4324264015470232, 0.43529111998421804, 0.4152067388807024, 0.41567126342228483, 0.39784230504717144, 0.3906430346625192, 0.3875184484890529, 0.3754718133381435, 0.37505260535648893, 0.371487557888031, 0.3638945392199925, 0.3663616180419922, 0.35327536719185965, 0.35209078448159353, 0.34506847177233013, 0.3417338473456247, 0.34253571714673725, 0.3401545456477574, 0.3384174278804234, 0.34279392446790424, 0.326104964528765, 0.33401227848870413, 0.3270412598337446, 0.3357546159199306, 0.317777795451028, 0.3181040457316807, 0.3185238923345293, 0.3232867888041905, 0.31696763208934237, 0.3225640995161874, 0.31736524615968975, 0.32001930475234985, 0.31450240101133076, 0.31357382025037495, 0.31593639510018484, 0.31280852215630667, 0.3026567442076547, 0.3139272247041975, 0.3066310967717852, 0.3159558176994324, 0.3075565610613142], "val_accuracy": [0.5803333520889282, 0.6930000185966492, 0.731333315372467, 0.7436666488647461, 0.7689999938011169, 0.7736666798591614, 0.7806666493415833, 0.7856666445732117, 0.8023333549499512, 0.8053333163261414, 0.8016666769981384, 0.8143333196640015, 0.815666675567627, 0.8299999833106995, 0.824999988079071, 0.8293333053588867, 0.8399999737739563, 0.8316666483879089, 0.8389999866485596, 0.8376666903495789, 0.8416666388511658, 0.8473333120346069, 0.8503333330154419, 0.8513333201408386, 0.8519999980926514, 0.8536666631698608, 0.8553333282470703, 0.8569999933242798, 0.8513333201408386, 0.862333357334137, 0.859000027179718, 0.8606666922569275, 0.859000027179718, 0.8666666746139526, 0.8690000176429749, 0.8629999756813049, 0.8633333444595337, 0.8679999709129333, 0.8583333492279053, 0.8696666955947876, 0.8666666746139526, 0.8706666827201843, 0.8653333187103271, 0.8683333396911621, 0.8743333220481873, 0.8690000176429749, 0.8669999837875366, 0.8733333349227905, 0.8673333525657654, 0.871666669845581]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 5, 8, 3, 4, 6, 2, 5, 4, 2, 2, 9, 0, 6, 5, 0, 6, 2, 3, 9, 8, 8, 2, 2, 6, 2, 4, 5, 6, 4, 0, 0, 2, 5, 3, 2, 8, 3, 1, 4, 1, 7, 9, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 0, 3, 2, 3, 0, 0, 0, 1, 1, 3, 4, 3, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 71, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.7459999918937683, "mapping_values": [1, 4, 4, 2, 2, 1, 57, 57, 35, 22, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(beta)), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))), tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9410854998423424, 1.137113436897118, 0.8879456154154811, 0.7731559497490378, 0.6882155378733046, 0.63114117480162, 0.6051761844705802, 0.5797612916256506, 0.5829325790150826, 0.5390804614160732, 0.5304692896003532, 0.5408061616897205, 0.6006027617002317, 0.6148195495033592, 0.6552627956815258, 0.6685780858036203], "accuracy": [0.33984941244125366, 0.6001849174499512, 0.6725663542747498, 0.709021270275116, 0.7433628439903259, 0.7664773464202881, 0.7712323069572449, 0.7804781198501587, 0.7843085527420044, 0.7968564033508301, 0.802800178527832, 0.8049134612083435, 0.7827235460281372, 0.7734777331352234, 0.7680623531341553, 0.7514199018478394], "val_loss": [1.0799338817596436, 0.6754432405744281, 0.5872501305171421, 0.5189222608293805, 0.474925024168832, 0.46733098370688303, 0.44853244509015766, 0.47934411253247944, 0.42802901778902325, 0.46999617985316683, 0.43430897167750765, 0.43872020074299406, 0.46995556354522705, 0.4981049469539097, 0.5089168889181954, 0.5434332064219883], "val_accuracy": [0.6150000095367432, 0.715666651725769, 0.753000020980835, 0.7713333368301392, 0.793666660785675, 0.7900000214576721, 0.7993333339691162, 0.8040000200271606, 0.815666675567627, 0.8243333101272583, 0.8309999704360962, 0.8053333163261414, 0.8109999895095825, 0.777999997138977, 0.7996666431427002, 0.8033333420753479]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [78, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 8, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 6, 2, 2, 9, 8, 8, 2, 2, 6, 2, 6, 5, 6, 4, 0, 0, 2, 5, 3, 2, 8, 3, 1, 4, 1, 7, 9, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 1, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 15, 61, 76, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.3637142777442932, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.051372807936945, 2.30573520054513, 2.298411932918673, 2.662052537723854, 2.304760055046953, 2.3036825539114423, 2.3031132804120866, 2.303072514739948], "accuracy": [0.16061286628246307, 0.10302469879388809, 0.14291374385356903, 0.18491612374782562, 0.09708096832036972, 0.09655263274908066, 0.09985470771789551, 0.09140139818191528], "val_loss": [1.9768849100385393, 1.9692023141043526, 1.9439949989318848, 1.9758781705583846, 1.974107333592006, 1.9737518855503626, 1.9736048153468542, 1.9737225941249303], "val_accuracy": [0.10066666454076767, 0.0989999994635582, 0.3186666667461395, 0.10166666656732559, 0.10166666656732559, 0.09799999743700027, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 8, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 6, 2, 2, 9, 8, 8, 2, 2, 6, 2, 6, 5, 6, 4, 0, 0, 2, 5, 3, 2, 8, 3, 1, 4, 1, 7, 9, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 3, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 3, 3, 1, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 73, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 2, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10885713994503021, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3011336640564677, 2.2981729079483206, 2.299782675050426, 2.301408285320616, 2.302154951879078, 2.302422020240404, 2.3026968745066743], "accuracy": [0.09140139818191528, 0.11200633645057678, 0.10011887550354004, 0.10038304328918457, 0.11081759631633759, 0.10117553919553757, 0.09998679161071777], "val_loss": [1.968858105795724, 1.969437939780099, 1.9717399052211217, 1.9730064528329032, 1.9734039306640625, 1.9736871038164412, 1.9739703450884138], "val_accuracy": [0.07900000363588333, 0.11800000071525574, 0.09799999743700027, 0.10766666382551193, 0.10133333504199982, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 9, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 2, 5, 6, 5, 1, 4, 3, 0, 2, 2, 5, 6, 0, 5, 0, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 0, 1, 2, 9, 2, 8, 2, 2, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 3, 2, 3, 3, 0, 2, 2, 3, 1, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 3, 0, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5, 4], [94, 21, 78, 87, 37, 47, 16, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 96, 96, 56, 40, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 77, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.negative(tf.math.add(beta, beta)))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, alpha)), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)))))), tf.math.add(beta, grad))))))), grad)))), tf.math.negative(beta)))))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.divide_no_nan(grad, tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))))), tf.math.add(beta, beta)), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, alpha)), tf.math.add(beta, beta))), grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [6232298.029407949, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.048210274428129196, 0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.090649377888153e+21, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 7, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 5, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 2, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 1, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 15, 61, 76, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 2, 7, 2, 6, 5, 0, 4, 3, 0, 6, 2, 5, 6, 0, 9, 3, 2, 8, 2, 0, 4, 2, 9, 9, 0, 6, 5, 2, 0, 2, 2, 3, 8, 1, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 0, 5, 3, 2, 8, 3, 1, 9, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 2, 0, 3, 3, 2, 3, 3, 0, 2, 0, 3, 3, 3, 3, 0, 3, 1, 1, 3, 4, 3, 0, 4, 2, 4, 3, 2, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 69, 78, 2, 6, 47, 96, 35, 47, 75, 97, 98, 70, 64, 84], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 27, 27, 17, 10, 3, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, alpha), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))))))), tf.math.multiply(tf.math.negative(tf.math.add(beta, beta)), tf.math.divide_no_nan(grad, grad)))), tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 7, 5, 6, 5, 1, 4, 3, 0, 2, 2, 5, 9, 0, 5, 0, 3, 6, 2, 6, 4, 2, 2, 3, 0, 9, 5, 4, 0, 1, 2, 9, 2, 8, 2, 2, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 0, 3, 2, 0, 3, 0, 1, 1, 3, 3, 4, 2, 3, 4, 2, 4, 3, 2, 2, 3, 3, 1, 3, 2, 4, 0, 3, 0, 5], [97, 21, 78, 87, 37, 47, 71, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 63, 63, 40, 23, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), beta)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad)))))))))))), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.multiply(beta, tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(grad, grad)))))))))), tf.math.negative(beta)))))), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.32624489068984985, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [33, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [9, 4, 2, 7, 0, 6, 5, 1, 1, 2, 0, 6, 1, 5, 6, 0, 5, 8, 5, 6, 2, 9, 4, 2, 2, 8, 0, 6, 5, 2, 0, 1, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 1, 3, 0, 3, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 3, 3, 1, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 73, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1263795725.6652641, 23806205121.005943, 111568830208.64246, 307991333501.58234, 660654695716.8226, 1218708442805.442], "accuracy": [0.09959053993225098, 0.10077928751707077, 0.10342095047235489, 0.10249637067317963, 0.1022322028875351, 0.09879804402589798], "val_loss": [4764022784.0, 38100777837.71429, 128577606217.14285, 304762557001.1429, 595218717549.7142, 1028516853467.4286], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [78, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 8, 4, 6, 9, 2, 4, 3, 0, 6, 2, 5, 5, 0, 5, 5, 4, 6, 2, 6, 6, 2, 2, 9, 0, 6, 6, 9, 0, 2, 2, 6, 0, 2, 1, 3, 6, 0, 6, 5, 5, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 3, 0, 2, 0, 2, 2, 3, 0, 3, 1, 3, 2, 0, 0, 3, 3, 1, 2, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 15, 61, 76, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 50, 50, 32, 18, 8, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, beta)), tf.math.divide_no_nan(beta, tf.math.add(tf.math.square(tf.math.square(tf.math.negative(tf.math.add(beta, grad)))), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.divide_no_nan(tf.math.add(grad, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))))))))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3025766496944264, 2.3035579707408074, 2.3034347211207695, 2.3036861383777962, 2.304283491734737, 2.3049793475811997, 2.3053037591535404, 2.3051919931465403, 2.3065840089168406, 2.3049062659412627, 2.308162472802634, 2.3057991569981584, 2.3072439437340186], "accuracy": [0.09602430462837219, 0.09906221181154251, 0.09708096832036972, 0.09774138033390045, 0.09760929644107819, 0.09536388516426086, 0.09906221181154251, 0.09576013684272766, 0.09919429570436478, 0.09879804402589798, 0.09615638852119446, 0.09681680053472519, 0.09747721254825592], "val_loss": [1.973785468510219, 1.9738971165248327, 1.974301815032959, 1.9743024281093053, 1.975461414882115, 1.9744208199637276, 1.9760594367980957, 1.9748452050345284, 1.9769376346043177, 1.976661273411342, 1.97571747643607, 1.9780759130205428, 1.9750894818987166], "val_accuracy": [0.09799999743700027, 0.10066666454076767, 0.10166666656732559, 0.0989999994635582, 0.09833333641290665, 0.10066666454076767, 0.10166666656732559, 0.10433333367109299, 0.09833333641290665, 0.10166666656732559, 0.0989999994635582, 0.09833333641290665, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 2, 2, 7, 5, 2, 5, 5, 4, 3, 2, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 5, 4, 2, 2, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 2, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 2, 0, 1, 0, 2, 2, 3, 1, 2, 3, 3, 3, 0, 3, 0, 3, 1, 1, 3, 4, 3, 3, 4, 2, 4, 3, 2, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5, 2, 0, 2, 1, 3], [94, 0, 78, 87, 37, 15, 61, 76, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 105, 105, 61, 44, 9, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, alpha)))))), tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.add(tf.math.square(tf.math.divide_no_nan(beta, tf.math.negative(tf.math.square(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), grad))))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), grad)), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(grad, beta), tf.math.pow(grad, tf.math.add(beta, grad)))))), tf.math.divide_no_nan(tf.math.negative(beta), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), beta), tf.math.add(beta, grad)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)))))))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, tf.math.square(alpha)), grad))), tf.math.add(beta, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [18, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 5, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 2, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 1, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 15, 61, 76, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 2, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0750231146812439, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 0, 2, 4, 4, 6, 8, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 0, 2, 8, 9, 8, 6, 2, 3, 6, 6, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 0, 3, 2, 0, 0, 0, 1, 1, 3, 3, 4, 2, 3, 3, 2, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 66, 78, 87, 27, 47, 96, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 79, 79, 47, 32, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, beta), beta)))), tf.math.pow(tf.math.add(beta, grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))), beta), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(alpha, alpha)))), tf.math.add(beta, grad)), tf.math.add(beta, grad))))))), tf.math.divide_no_nan(tf.math.add(beta, grad), beta)))))), grad)), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(grad, beta)))), tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(grad))), beta)))), grad)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [815754178.0325723, 5.527493853416281e+28, 5.699526840338948, 11.383421691810891, 18.090065721444574, 25.120823097707667], "accuracy": [0.04807819426059723, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.541711285606899e+29, 3.3491038594927107, 7.541211809430804, 13.075671604701451, 19.027452741350448, 25.129404885428293], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [3, 4, 2, 7, 4, 6, 5, 2, 3, 3, 0, 6, 2, 2, 6, 0, 8, 3, 4, 6, 2, 6, 4, 2, 1, 9, 0, 6, 5, 2, 6, 2, 2, 9, 8, 8, 2, 2, 6, 2, 6, 5, 1, 4, 0, 0, 2, 5, 3, 2, 8, 3, 1, 4, 1, 7, 9, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 1, 0, 2, 0, 2, 3, 3, 0, 2, 0, 3, 2, 2, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 0, 2, 3, 0, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 71, 35, 72, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301898564424466, 2.3015850987558464, 2.302963919407184, 2.3032489328368024, 2.301725447311724, 2.303465178739976], "accuracy": [0.08809932321310043, 0.09391097724437714, 0.08849557489156723, 0.08942015469074249, 0.09457138925790787, 0.09126931428909302], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 5, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 2, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 1, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 73, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 1, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(alpha))", "other_info": {"loss": [2.301898564424466, 2.3015850987558464, 2.302963919407184, 2.3032489328368024, 2.301725447311724, 2.303465178739976], "accuracy": [0.08809932321310043, 0.09391097724437714, 0.08849557489156723, 0.08942015469074249, 0.09457138925790787, 0.09126931428909302], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [3, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.034285712987184525, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))), alpha), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303710443437249, 2.3055216545882935, 2.310038043271439, 2.310665336566563, 2.310068697615102, 2.3129409200023145], "accuracy": [0.08506141602993011, 0.08572183549404144, 0.07000396400690079, 0.07211729139089584, 0.0738343670964241, 0.06907938420772552], "val_loss": [1.9728520938328333, 1.9779339517865862, 1.9786218915666853, 1.9786218915666853, 1.9803109850202287, 1.9803109850202287], "val_accuracy": [0.03500000014901161, 0.02033333294093609, 0.024666666984558105, 0.024666666984558105, 0.023000000044703484, 0.023000000044703484]}}]