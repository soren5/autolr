[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 7, 5, 6, 5, 5, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 2, 5, 2, 2, 1, 2, 1, 2, 8, 2, 4, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 1, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 15, 61, 76, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.847428560256958, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.165185891925352, 1.2858651924001039, 0.8677757531266722, 0.745757983975076, 0.6974842212361084, 0.6509974332864117, 0.6322589144337022, 0.5941257852258431, 0.5868067475688488, 0.5598676712789147, 0.5506479180704695, 0.5293701962158114, 0.5285780330485892, 0.5115021410131373, 0.4909531204314075, 0.4828977304529347, 0.4726483222633982, 0.4597231461592102, 0.4514535288643198, 0.43769707980960226, 0.4333146034789485, 0.41782338743464287, 0.42128677754952626, 0.404459480824582, 0.3908507830832754, 0.387158972106007, 0.3861782545891294, 0.38215367754436896, 0.3647197739850607, 0.36913736637132105, 0.36471245183668843, 0.35384592368633927, 0.3421261497397921, 0.3482132090742499, 0.3400768671273839, 0.32770485480259026, 0.332192896769236, 0.31913105705158823, 0.3113093788888964, 0.31243203554596205, 0.3070585953088689, 0.3020619077768151, 0.3080761119784334, 0.29675367718611445, 0.28155393913642146, 0.29181711976601543, 0.2795965567028455, 0.2754624122090706, 0.27372671978868246, 0.2732961965455922, 0.26402026939590484, 0.2533524679414915, 0.2519123535768121], "accuracy": [0.26826047897338867, 0.5502575635910034, 0.6769251227378845, 0.7143045663833618, 0.7329282760620117, 0.7516840696334839, 0.7588165402412415, 0.7749306559562683, 0.7770439982414246, 0.7848368883132935, 0.7901201844215393, 0.8042530417442322, 0.800818920135498, 0.8079513907432556, 0.8129705190658569, 0.821820080280304, 0.8234050869941711, 0.8278959393501282, 0.8327829837799072, 0.8368775844573975, 0.8337075710296631, 0.8448025584220886, 0.8425571322441101, 0.8467837572097778, 0.8556333184242249, 0.8545766472816467, 0.8568220734596252, 0.8574824929237366, 0.8638224601745605, 0.8603883385658264, 0.8609166741371155, 0.8628978729248047, 0.8702945709228516, 0.870030403137207, 0.8722757697105408, 0.8741249442100525, 0.8712190985679626, 0.8803328275680542, 0.882710337638855, 0.8795403242111206, 0.8829745054244995, 0.883238673210144, 0.8848236799240112, 0.8881257176399231, 0.8920882344245911, 0.8893144726753235, 0.8927486538887024, 0.8920882344245911, 0.8951261639595032, 0.89552241563797, 0.8969752788543701, 0.9021265506744385, 0.9013340473175049], "val_loss": [1.3167253221784319, 0.6894874232155936, 0.5943092959267753, 0.5497889689036778, 0.5230629103524345, 0.5026707819529942, 0.47826528549194336, 0.46465436049870085, 0.4522491012300764, 0.43715002707072664, 0.4333428570202419, 0.4151738626616342, 0.4084973079817636, 0.3987917814935957, 0.38916708741869244, 0.39073180300848825, 0.38441928795405794, 0.3741718019757952, 0.36976382562092375, 0.36805429628917147, 0.36036899260112215, 0.3621961900166103, 0.35301798582077026, 0.3503412774630955, 0.34764006308146883, 0.35060785497937885, 0.347375077860696, 0.3404254657881601, 0.3476007069860186, 0.34316125937870573, 0.3359938774790083, 0.32857062986918856, 0.32751121691295076, 0.3296121869768415, 0.3328017592430115, 0.32474149976457867, 0.3216238532747541, 0.32283989020756315, 0.3251375215394156, 0.31852528878620695, 0.3205002801758902, 0.31846098388944355, 0.3185317005429949, 0.31288554838725496, 0.3244341271264212, 0.30786380597523283, 0.3122131739343916, 0.305777839251927, 0.3076836722237723, 0.3088154537337167, 0.3117546098572867, 0.30780757325036184, 0.3063068985939026], "val_accuracy": [0.5699999928474426, 0.7133333086967468, 0.7260000109672546, 0.7450000047683716, 0.7599999904632568, 0.7693333625793457, 0.7793333530426025, 0.784333348274231, 0.7913333177566528, 0.8040000200271606, 0.8116666674613953, 0.8173333406448364, 0.824999988079071, 0.8299999833106995, 0.8299999833106995, 0.8309999704360962, 0.8320000171661377, 0.8353333473205566, 0.8413333296775818, 0.8399999737739563, 0.8423333168029785, 0.8383333086967468, 0.8483333587646484, 0.8526666760444641, 0.8513333201408386, 0.8473333120346069, 0.8533333539962769, 0.8556666374206543, 0.8610000014305115, 0.8523333072662354, 0.8636666536331177, 0.862333357334137, 0.8669999837875366, 0.8643333315849304, 0.862333357334137, 0.8659999966621399, 0.8673333525657654, 0.8673333525657654, 0.8656666874885559, 0.8686666488647461, 0.8663333058357239, 0.8646666407585144, 0.8709999918937683, 0.8740000128746033, 0.8706666827201843, 0.875, 0.8696666955947876, 0.8786666393280029, 0.8756666779518127, 0.875, 0.871666669845581, 0.8759999871253967, 0.8769999742507935]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 7, 5, 6, 5, 1, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 0, 1, 2, 9, 2, 8, 2, 2, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 0, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 71, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8454285860061646, "mapping_values": [1, 4, 4, 2, 2, 1, 79, 79, 46, 33, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 104, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(grad, tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), grad)), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(alpha)))), tf.math.add(beta, alpha)))))))))), tf.math.add(beta, alpha))))), grad))))))), tf.math.divide_no_nan(tf.math.add(beta, grad), beta)))))), grad)))), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(grad, beta), tf.math.pow(grad, grad)))))), tf.math.divide_no_nan(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9385536514678259, 1.0167802787255364, 0.776396080999169, 0.6741114269000759, 0.6251245197083389, 0.5873845611203065, 0.5643122339324236, 0.5151736100296916, 0.49608971812091784, 0.47768741890172034, 0.4524788539155505, 0.43488311266870766, 0.4344753544438611, 0.41732153287416973, 0.39739064207607333, 0.37866345954105096, 0.37695426550271754, 0.3785244300341515, 0.359856991928645, 0.349788811130137, 0.33812973418917247, 0.33288026258709597, 0.32625308423041666, 0.31903774349633746, 0.29908323257260117, 0.29269217884677545, 0.29572815376108413, 0.2832118237708239, 0.27212565773986097, 0.27396346907951985, 0.2678806267992664, 0.2537162078133884, 0.2421763151580978, 0.2487781053135156, 0.23388797813135132], "accuracy": [0.34526482224464417, 0.6301677227020264, 0.7059833407402039, 0.7420420050621033, 0.7618544697761536, 0.7677981853485107, 0.7836481332778931, 0.8080834746360779, 0.8137630224227905, 0.8171972036361694, 0.8298771381378174, 0.8379341959953308, 0.8334434032440186, 0.8417646288871765, 0.8531237840652466, 0.8578787446022034, 0.8595958352088928, 0.8609166741371155, 0.8656716346740723, 0.8669924736022949, 0.8708229064941406, 0.8746532797813416, 0.8733324408531189, 0.8749174475669861, 0.8840311765670776, 0.8864086866378784, 0.8877294659614563, 0.889050304889679, 0.8971073627471924, 0.8914278149604797, 0.8920882344245911, 0.9017302989959717, 0.9068815112113953, 0.9019944667816162, 0.9078060984611511], "val_loss": [0.8125823225293841, 0.6214053630828857, 0.5466395957129342, 0.5003924880708966, 0.4688786779131208, 0.4614653927939279, 0.41674227373940603, 0.42032509190695627, 0.39071573529924664, 0.37317044394356863, 0.374168906893049, 0.3660986253193447, 0.3502007041658674, 0.3455882583345686, 0.3376270958355495, 0.3350593532834734, 0.33200774874006, 0.3282936045101711, 0.326065046446664, 0.3261293087686811, 0.31467696598597933, 0.323185886655535, 0.32194842611040386, 0.31948183264051166, 0.3101359180041722, 0.312885011945452, 0.3125196950776236, 0.310469993523189, 0.3093668648174831, 0.30735048225947786, 0.30833189828055246, 0.31316574130739483, 0.32129885469164166, 0.31549053532736643, 0.31226909160614014], "val_accuracy": [0.6266666650772095, 0.7073333263397217, 0.7453333139419556, 0.7693333625793457, 0.7893333435058594, 0.7820000052452087, 0.8163333535194397, 0.8090000152587891, 0.8199999928474426, 0.8413333296775818, 0.8379999995231628, 0.846666693687439, 0.8529999852180481, 0.8519999980926514, 0.8629999756813049, 0.8610000014305115, 0.8619999885559082, 0.8646666407585144, 0.8619999885559082, 0.8650000095367432, 0.862666666507721, 0.8650000095367432, 0.8669999837875366, 0.8703333139419556, 0.8773333430290222, 0.8690000176429749, 0.8730000257492065, 0.8733333349227905, 0.8786666393280029, 0.8796666860580444, 0.8790000081062317, 0.8756666779518127, 0.8733333349227905, 0.878000020980835, 0.878333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 0, 2, 4, 4, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 0, 2, 8, 9, 8, 3, 2, 2, 6, 9, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 2, 3, 1, 2, 2, 3, 1, 2, 0, 3, 3, 2, 0, 0, 3, 1, 1, 2, 4, 2, 3, 4, 0, 4, 3, 2, 3, 0, 3, 2, 1, 3, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8334285616874695, "mapping_values": [1, 4, 4, 2, 2, 1, 75, 75, 46, 29, 7, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, beta), grad), alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), beta))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(beta, alpha))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, beta)), grad)))))))))))))))), beta)))), tf.math.add(beta, grad))), grad)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.negative(beta), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.938551219604617, 1.0166026149144372, 0.7757405882356598, 0.6727613275155983, 0.6267010606574408, 0.5872744121067811, 0.5642208379052807, 0.5137329384903032, 0.49600457777877477, 0.4754847257231142, 0.4529232769681006, 0.4314759622010982, 0.43704306479411087, 0.41964564148571354, 0.39486524283201024, 0.3820279064061635, 0.37578222181551085, 0.3721299105946414, 0.3576302966736469, 0.348786076404604, 0.3327299167238852, 0.3234446201664881, 0.31775963579611677, 0.3139047377286822, 0.2987369176119924, 0.28949319375126575, 0.2901668647583906, 0.2761012764812193, 0.27156692074904304, 0.27144610330712415, 0.2650976399971651, 0.250849618336717, 0.2503354159667114, 0.24611142733550231, 0.23800900870184494], "accuracy": [0.34526482224464417, 0.6304318904876709, 0.7054550051689148, 0.7413815855979919, 0.7604015469551086, 0.7700436115264893, 0.7839123010635376, 0.8054417967796326, 0.8125742673873901, 0.8210275769233704, 0.8298771381378174, 0.8368775844573975, 0.8356888294219971, 0.8401796221733093, 0.8527275323867798, 0.8555012345314026, 0.8585391640663147, 0.8646149635314941, 0.8652753829956055, 0.8681812286376953, 0.8698983192443848, 0.878351628780365, 0.8811253309249878, 0.878879964351654, 0.8835028409957886, 0.8861445188522339, 0.8907673954963684, 0.8953903317451477, 0.8951261639595032, 0.89552241563797, 0.8960506916046143, 0.9049002528190613, 0.8971073627471924, 0.9037115573883057, 0.9059569239616394], "val_loss": [0.8125348261424473, 0.6210530996322632, 0.5449317353112357, 0.5007394211632865, 0.4704936572483608, 0.46348919187273296, 0.4187067321368626, 0.4156956161771502, 0.3918483853340149, 0.3752341440745762, 0.3714585985456194, 0.37232026883534025, 0.3506430046898978, 0.3465613807950701, 0.3376625861440386, 0.3384228263582502, 0.33631402254104614, 0.3267021434647696, 0.32580473593303133, 0.32932835817337036, 0.31600609847477507, 0.313011714390346, 0.3178992101124355, 0.31624518973486765, 0.3107064281191145, 0.3103030409131731, 0.31119006872177124, 0.30492864336286274, 0.31043945040021625, 0.3041016800062997, 0.3103212032999311, 0.3192956362451826, 0.31702347312654766, 0.3096816624913897, 0.3097404752458845], "val_accuracy": [0.6266666650772095, 0.7083333134651184, 0.7483333349227905, 0.7676666378974915, 0.7889999747276306, 0.7806666493415833, 0.8116666674613953, 0.8076666593551636, 0.8216666579246521, 0.8413333296775818, 0.8379999995231628, 0.8383333086967468, 0.8550000190734863, 0.8519999980926514, 0.8560000061988831, 0.8579999804496765, 0.8633333444595337, 0.8659999966621399, 0.8619999885559082, 0.8613333106040955, 0.8633333444595337, 0.8700000047683716, 0.8676666617393494, 0.8683333396911621, 0.8790000081062317, 0.8673333525657654, 0.878000020980835, 0.8759999871253967, 0.8813333511352539, 0.8843333125114441, 0.8786666393280029, 0.875333309173584, 0.8743333220481873, 0.875, 0.8799999952316284]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 8, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 6, 2, 2, 9, 8, 8, 2, 2, 6, 2, 6, 5, 6, 4, 0, 0, 2, 5, 3, 2, 8, 3, 1, 4, 1, 7, 9, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 3, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 3, 3, 1, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 73, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8325714468955994, "mapping_values": [1, 4, 4, 2, 2, 1, 95, 95, 56, 39, 10, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 97, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), beta))), tf.math.add(beta, beta))), tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), beta)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad)))), beta)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), grad), tf.math.negative(beta)))))))))), tf.math.add(beta, grad))))))))))), grad))))))), tf.math.negative(beta)))), tf.math.add(beta, grad)), grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, alpha)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9385534534837277, 1.0165557848101894, 0.7754986768920802, 0.6740740170694219, 0.6247549128648926, 0.5853686867105395, 0.5642803646176325, 0.5137137755733896, 0.494739702431722, 0.4784460028109691, 0.4544354602605943, 0.4317140223768645, 0.43876851618628476, 0.42053647355679996, 0.40153288832981165, 0.38913329640210753, 0.37708779222787947, 0.3719239932962334, 0.35589467570246675, 0.3463123416730583, 0.33196902197932426, 0.3192376367459444, 0.3232320735498962, 0.32374286565011, 0.3074480632647012, 0.29665185308585534, 0.29802370752404633, 0.28535153828103704, 0.27549498166390507, 0.2747797409556939, 0.2590344955798043, 0.25037657229687166, 0.24165461953321485, 0.24396152556800665, 0.24182001571881379, 0.22874908808585817], "accuracy": [0.34526482224464417, 0.63096022605896, 0.7055870890617371, 0.7396644949913025, 0.7606657147407532, 0.7701756954193115, 0.7840443849563599, 0.8034605979919434, 0.811649739742279, 0.8193105459213257, 0.8274996876716614, 0.8396512866020203, 0.8363492488861084, 0.8401796221733093, 0.8496896028518677, 0.8532558679580688, 0.8581429123878479, 0.8642187118530273, 0.8664641380310059, 0.8702945709228516, 0.8684453964233398, 0.878879964351654, 0.8771628737449646, 0.8742570281028748, 0.8828424215316772, 0.8841632604598999, 0.8848236799240112, 0.8879936337471008, 0.8945978283882141, 0.8916919827461243, 0.8992207050323486, 0.9062210917472839, 0.9082023501396179, 0.9041078090667725, 0.9027869701385498, 0.9076740145683289], "val_loss": [0.8126661266599383, 0.6209331580570766, 0.5464132172720773, 0.501024740082877, 0.46852098192487446, 0.4627356358936855, 0.4180112566266741, 0.4175942199570792, 0.39230964865003315, 0.37174908603940693, 0.37085606370653423, 0.36469292640686035, 0.35017727102552143, 0.3491856711251395, 0.34155180624553133, 0.3382998194013323, 0.33224103280476164, 0.3261661614690508, 0.31943931749888826, 0.3322564022881644, 0.31459492444992065, 0.3157420754432678, 0.32034094844545635, 0.31477637801851543, 0.31519363607679096, 0.3128072363989694, 0.3155191625867571, 0.3090940884181431, 0.30952909163066317, 0.301705539226532, 0.3091494355882917, 0.31407935278756277, 0.3141049402100699, 0.3122297525405884, 0.3081466385296413, 0.3074233446802412], "val_accuracy": [0.6266666650772095, 0.7076666951179504, 0.7443333268165588, 0.7696666717529297, 0.7893333435058594, 0.7816666960716248, 0.812333345413208, 0.8090000152587891, 0.8199999928474426, 0.8433333039283752, 0.8396666646003723, 0.8453333377838135, 0.8539999723434448, 0.8533333539962769, 0.8576666712760925, 0.8586666584014893, 0.8636666536331177, 0.8640000224113464, 0.8666666746139526, 0.8583333492279053, 0.8613333106040955, 0.8666666746139526, 0.8643333315849304, 0.8673333525657654, 0.8740000128746033, 0.8700000047683716, 0.8736666440963745, 0.871666669845581, 0.8820000290870667, 0.8816666603088379, 0.8830000162124634, 0.878000020980835, 0.8793333172798157, 0.8740000128746033, 0.8790000081062317, 0.8820000290870667]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 7, 4, 6, 9, 2, 4, 3, 0, 6, 2, 5, 5, 0, 5, 5, 4, 6, 2, 6, 6, 2, 2, 9, 0, 6, 6, 9, 0, 2, 2, 9, 8, 2, 2, 2, 6, 0, 6, 5, 5, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 3, 2, 2, 3, 0, 2, 2, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 3, 0, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [86, 21, 78, 87, 37, 47, 96, 35, 50, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8214285969734192, "mapping_values": [1, 4, 4, 2, 2, 1, 60, 60, 38, 22, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, beta)))))))), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), beta)), tf.math.negative(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))))), grad))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9385531769137672, 1.0167103119026228, 0.7762922260424622, 0.6736678273025017, 0.6249485837548809, 0.5840793970222912, 0.5612964581866952, 0.5150827283061585, 0.49848296830147454, 0.4756581809786506, 0.4502658592853186, 0.4335909913425763, 0.4384286677549229, 0.4146254137994874, 0.4005716456130606, 0.3807881526573223, 0.37649845980524055, 0.36997639674315946, 0.3554473474686723, 0.3472393021221725, 0.33608879388095114, 0.32594180193717026, 0.3219326599643152, 0.31651144765938405, 0.2998894887349357, 0.2950859863516236, 0.29230114068526475, 0.28049916484415444, 0.2753843345370952, 0.27055529273653767, 0.2665027021798853, 0.24988574850056952, 0.24304962260548968, 0.24739188523678937, 0.24220735727835324], "accuracy": [0.34526482224464417, 0.6300356388092041, 0.7058512568473816, 0.7415136694908142, 0.7621186375617981, 0.7707040309906006, 0.7829877138137817, 0.8050455451011658, 0.8095363974571228, 0.8203672170639038, 0.8289526104927063, 0.8363492488861084, 0.833179235458374, 0.8409721255302429, 0.852331280708313, 0.8577466607093811, 0.8577466607093811, 0.8658037185668945, 0.8685774803161621, 0.8667283058166504, 0.870030403137207, 0.8836349248886108, 0.8767666220664978, 0.8761062026023865, 0.8845595121383667, 0.8854840993881226, 0.8889182209968567, 0.8927486538887024, 0.8961827754974365, 0.8953903317451477, 0.8938053250312805, 0.9035794734954834, 0.9058248400688171, 0.9027869701385498, 0.9030511379241943], "val_loss": [0.812586954661778, 0.6213356597082955, 0.5459177153451102, 0.4998868022646223, 0.4665069580078125, 0.46058736528669086, 0.4160505873816354, 0.41672209330967497, 0.3967579688344683, 0.3727892892701285, 0.3725901927266802, 0.3627780079841614, 0.350715696811676, 0.3519097736903599, 0.33949109486171175, 0.33387701000486103, 0.33243156330926077, 0.3275491680417742, 0.32646981307438444, 0.33218399967466083, 0.3133114661489214, 0.32049381732940674, 0.3179148180144174, 0.31770555462156025, 0.30933354582105366, 0.30757850408554077, 0.3073330180985587, 0.30453786679676603, 0.31070758615221294, 0.3056324464934213, 0.3080565333366394, 0.3120918018477304, 0.3178129196166992, 0.3047088895525251, 0.3068725722176688], "val_accuracy": [0.6266666650772095, 0.7080000042915344, 0.7473333477973938, 0.7683333158493042, 0.7883333563804626, 0.7846666574478149, 0.8130000233650208, 0.8106666803359985, 0.8190000057220459, 0.840666651725769, 0.8383333086967468, 0.846666693687439, 0.8543333411216736, 0.8453333377838135, 0.8503333330154419, 0.8646666407585144, 0.8619999885559082, 0.8576666712760925, 0.8669999837875366, 0.8613333106040955, 0.8676666617393494, 0.8663333058357239, 0.8643333315849304, 0.8706666827201843, 0.8743333220481873, 0.8726666569709778, 0.8763333559036255, 0.875, 0.8763333559036255, 0.8823333382606506, 0.8766666650772095, 0.8823333382606506, 0.8773333430290222, 0.874666690826416, 0.8776666522026062]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 2, 2, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 4, 2, 0, 2, 2, 9, 8, 5, 2, 2, 6, 2, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 2, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [2, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.7885714173316956, "mapping_values": [1, 4, 4, 2, 2, 1, 70, 70, 41, 29, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, beta)))), tf.math.divide_no_nan(beta, tf.math.add(grad, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))), tf.math.add(beta, beta))))))), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), beta), beta)))), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, grad), beta)))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1611034921792993, 1.5414082238765803, 1.1737229178657527, 1.0676639835359933, 0.9189485485417386, 0.8667154389995357, 0.8033463230002054, 0.7892666595675895, 0.7544672915161152, 0.7329388949392714, 0.7125423329774935, 0.6960239340254124, 0.7079790747239684, 0.6789364145731394, 0.6772154693936691, 0.6602912888377649, 0.6351529796991713, 0.6487360718212171, 0.6080246793674267, 0.6206857566237686], "accuracy": [0.28358209133148193, 0.4702152907848358, 0.5836745500564575, 0.6033549308776855, 0.6660943031311035, 0.6802271604537964, 0.7053229212760925, 0.7111346125602722, 0.7194558382034302, 0.7206445932388306, 0.733060359954834, 0.7424382567405701, 0.7371549606323242, 0.746268630027771, 0.7465327978134155, 0.7539294958114624, 0.7597411274909973, 0.7561748623847961, 0.7792893648147583, 0.7712323069572449], "val_loss": [1.4473579611097063, 0.8960861137935093, 0.8344639199120658, 0.729482821055821, 0.6472069535936628, 0.6001464298793248, 0.5675865922655378, 0.5801931960242135, 0.5754643508366176, 0.5395574910300118, 0.5603253160204206, 0.5301766054970878, 0.5078938858849662, 0.4992362601416452, 0.4805436304637364, 0.48519270760672434, 0.5032111236027309, 0.47823899132864817, 0.46969638551984516, 0.478025027683803], "val_accuracy": [0.5386666655540466, 0.6230000257492065, 0.5993333458900452, 0.659333348274231, 0.7250000238418579, 0.7440000176429749, 0.7580000162124634, 0.7266666889190674, 0.7136666774749756, 0.7586666941642761, 0.7583333253860474, 0.749666690826416, 0.7753333449363708, 0.7760000228881836, 0.7913333177566528, 0.7860000133514404, 0.7706666588783264, 0.7839999794960022, 0.7846666574478149, 0.7673333287239075]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [33, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 4, 2, 7, 0, 6, 5, 1, 1, 2, 0, 6, 1, 5, 6, 0, 5, 3, 4, 6, 2, 9, 4, 2, 2, 8, 0, 6, 5, 2, 0, 1, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 1, 0, 3, 0, 2, 2, 3, 1, 2, 0, 3, 3, 0, 0, 0, 2, 1, 0, 3, 4, 2, 3, 0, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 14, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.7311428785324097, "mapping_values": [1, 4, 4, 2, 2, 1, 37, 37, 22, 15, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(beta, tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(beta, beta))), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), alpha)), beta)))))), tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), grad)))))), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2165802256337654, 1.540474620965714, 1.0303092538531053, 0.8564866254547284, 0.8054683847261096, 0.7652978325926192, 0.7291861092645919, 0.6630922044115516, 0.6426919655966138, 0.6120983604678798, 0.574211900748471, 0.5599558527254551, 0.5471319909565611, 0.5270284017504419, 0.5040639250301462, 0.5089831631086947, 0.48874433760818725, 0.47376141166249286, 0.4627260465813099, 0.4616660270645571, 0.4439602525730836, 0.4424887020251597, 0.43197218785826336, 0.4136028713073713, 0.4142563318130819, 0.3964888570197207, 0.39947138799337456, 0.41506480387708594, 0.3879812300685469, 0.39711392609954366], "accuracy": [0.23840972781181335, 0.4916127324104309, 0.637828528881073, 0.6796988248825073, 0.6926429867744446, 0.7150970697402954, 0.7205125093460083, 0.7489103078842163, 0.754589855670929, 0.7716285586357117, 0.7779685854911804, 0.7847048044204712, 0.7887993454933167, 0.8001585006713867, 0.8070268034934998, 0.8088759779930115, 0.8142913579940796, 0.8187822103500366, 0.8227446675300598, 0.8210275769233704, 0.8296129703521729, 0.8356888294219971, 0.8358209133148193, 0.8445383906364441, 0.8385946154594421, 0.8527275323867798, 0.8459912538528442, 0.8446704745292664, 0.8502179384231567, 0.8407079577445984], "val_loss": [1.5788624627249581, 0.7896320479256767, 0.6684534209115165, 0.5890965291431972, 0.5927950143814087, 0.5343442303793771, 0.4885553462164743, 0.47623819964272635, 0.4611924205507551, 0.4450596400669643, 0.4316538231713431, 0.4220876097679138, 0.4181799122265407, 0.40184708152498516, 0.4079139913831438, 0.39392872367586407, 0.3960982986858913, 0.3858754890305655, 0.39053871801921297, 0.3835405111312866, 0.3813005600656782, 0.37523720945630756, 0.39285194873809814, 0.38549870252609253, 0.3798627427646092, 0.37259734528405325, 0.38539423261369976, 0.4084355745996748, 0.4173313294138227, 0.4038634555680411], "val_accuracy": [0.5266666412353516, 0.690666675567627, 0.7153333425521851, 0.7356666922569275, 0.7586666941642761, 0.7553333044052124, 0.7820000052452087, 0.7866666913032532, 0.7973333597183228, 0.8036666512489319, 0.8149999976158142, 0.8149999976158142, 0.8213333487510681, 0.8266666531562805, 0.8296666741371155, 0.8316666483879089, 0.8326666951179504, 0.8383333086967468, 0.8443333506584167, 0.8376666903495789, 0.8479999899864197, 0.8473333120346069, 0.8443333506584167, 0.8553333282470703, 0.8573333621025085, 0.8513333201408386, 0.8486666679382324, 0.8496666550636292, 0.8479999899864197, 0.8456666469573975]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 0, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 2, 8, 2, 0, 4, 2, 9, 9, 0, 6, 5, 2, 0, 2, 2, 3, 8, 1, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 0, 5, 3, 2, 8, 3, 1, 9, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 2, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 3, 0, 3, 1, 1, 3, 4, 3, 0, 4, 2, 4, 3, 2, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 69, 78, 2, 6, 47, 96, 35, 47, 75, 97, 98, 70, 64, 84], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10285714268684387, "mapping_values": [1, 4, 4, 2, 2, 0, 41, 41, 26, 15, 7, 3, 1, 1, 0, 0, 4, 2, 2, 2], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), beta)))))), tf.math.divide_no_nan(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))))))))), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3017825162358774, 2.3025509177449672, 2.3015905999236685, 2.3020021720506323, 2.301665741643728, 2.3006004155697743, 2.300422412560931, 2.3011075448303364, 2.301439343190322, 2.3005944554516984, 2.3010948185183198, 2.300350574879614, 2.3006130151618915, 2.2997171776468854, 2.300269127049545, 2.3005769280174295, 2.3002870944764684, 2.3014100283490606, 2.300954170356794, 2.3010775138830795, 2.3010926147446327, 2.300934013831003, 2.3011269989487295, 2.301157546348859, 2.301593123331298], "accuracy": [0.0870426595211029, 0.08677849918603897, 0.09325055778026581, 0.08902391046285629, 0.09219389408826828, 0.09470347315073013, 0.10289261490106583, 0.09430722147226334, 0.09509972482919693, 0.09893012791872025, 0.09734513610601425, 0.10077928751707077, 0.09826971590518951, 0.1014397069811821, 0.09509972482919693, 0.10249637067317963, 0.10236428678035736, 0.09972262382507324, 0.09708096832036972, 0.09853387624025345, 0.09919429570436478, 0.09668471664190292, 0.09945846349000931, 0.10038304328918457, 0.10421344637870789], "val_loss": [1.970844336918422, 1.9707014220101493, 1.9705990382603236, 1.9705241067068917, 1.9704773085457938, 1.9704677036830358, 1.9704855510166712, 1.9705257415771484, 1.9705886840820312, 1.9706811223711287, 1.9708096640450614, 1.9709579604012626, 1.9711119106837682, 1.971285138811384, 1.9714507375444685, 1.9716129984174455, 1.9717766216823034, 1.9719315937587194, 1.9720831598554338, 1.9722258022853307, 1.9723657880510603, 1.972496850149972, 1.9726153782435827, 1.9727224622453963, 1.9728168760027205], "val_accuracy": [0.04266666620969772, 0.04500000178813934, 0.04833333194255829, 0.054999999701976776, 0.059333331882953644, 0.06300000101327896, 0.0676666647195816, 0.07233333587646484, 0.07900000363588333, 0.08299999684095383, 0.08366666734218597, 0.08633333444595337, 0.09366666525602341, 0.09733333438634872, 0.09866666793823242, 0.1003333330154419, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10466666519641876, 0.10466666519641876, 0.10333333164453506, 0.10300000011920929, 0.10333333164453506, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [3, 4, 2, 7, 8, 3, 2, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 0, 4, 6, 2, 5, 4, 2, 2, 6, 0, 6, 5, 2, 0, 2, 2, 9, 9, 8, 2, 2, 6, 3, 6, 2, 6, 3, 6, 0, 3, 5, 4, 0, 5, 3, 1, 4, 1, 0, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 1, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 0, 1, 3, 2, 1, 2, 3, 0, 3, 0, 3], [94, 21, 78, 87, 44, 47, 96, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 64, 64, 39, 25, 8, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), grad))))))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), beta)))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019881675177563, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [90, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 8, 6, 4, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 0, 4, 6, 2, 5, 4, 2, 2, 6, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 3, 6, 5, 6, 6, 6, 0, 3, 5, 3, 8, 5, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 2, 2, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 97, 87, 57, 47, 96, 35, 47, 32, 3, 46], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 19, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 21, 21, 11, 10, 3, 3, 2, 1, 1, 0, 3, 1, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(beta, tf.math.add(tf.math.pow(tf.math.multiply(tf.math.add(beta, beta), grad), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.negative(beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3019881675177563, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [90, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 9, 4, 0, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 1, 5, 6, 4, 6, 4, 3, 5, 3, 2, 8, 2, 1, 0, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 2, 2, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3019881045356985, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 8, 2, 4, 3, 9, 6, 2, 5, 6, 0, 5, 3, 4, 8, 4, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 3, 0, 4, 4, 3, 9, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 3, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 1, 1, 4, 0, 3, 0, 5], [94, 21, 76, 87, 37, 68, 96, 35, 28, 57, 66], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, grad)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019881675177563, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 9, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 5, 8, 1, 2, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 0, 4, 6, 2, 5, 4, 2, 2, 6, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 3, 6, 5, 6, 6, 6, 0, 3, 5, 3, 8, 5, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 2, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 3, 0, 3, 1, 1, 3, 4, 3, 3, 4, 2, 4, 3, 2, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 4, 87, 57, 47, 96, 35, 47, 32, 3, 46], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 3, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 37, 37, 22, 15, 5, 3, 1, 1, 0, 0, 5, 2, 3, 2], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, beta)))), tf.math.divide_no_nan(tf.math.add(tf.math.square(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))))), tf.math.pow(beta, tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), grad))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 7, 2, 6, 5, 0, 4, 3, 0, 2, 2, 5, 6, 0, 5, 5, 4, 6, 2, 6, 4, 2, 2, 3, 1, 0, 5, 2, 0, 1, 2, 9, 2, 8, 2, 2, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 1, 2, 2, 2, 0, 2, 0, 2, 3, 0, 0, 0, 3, 1, 1, 0, 4, 2, 3, 2, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 51, 37, 47, 96, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [10631244681.116322, 1.193319380885481e+32, 5.976938277408196, 11.766961095953787, 18.51426439936513, 25.55639790625793], "accuracy": [0.0544181764125824, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [7.650287730870741e+32, 3.5086119515555247, 7.845708847045898, 13.429564339773995, 19.396505083356583, 25.495791843959264], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [33, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 9, 4, 0, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 1, 5, 6, 4, 6, 4, 3, 5, 3, 2, 8, 2, 1, 0, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 2, 2, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 14, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 3, 0, 5, 9, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 5, 2, 2, 9, 8, 8, 2, 2, 6, 9, 6, 5, 6, 4, 6, 0, 6, 5, 3, 2, 8, 3, 1, 4, 2, 7, 4, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [2, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07106062769889832, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3034264953176438, 2.30506531459434, 2.3069736995969103, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08215559273958206, 0.08268392831087112, 0.07924976944923401, 0.0874389111995697, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9728520938328333, 1.9728520938328333, 1.9790513174874442, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.014333332888782024, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 9, 0, 0, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 1, 5, 6, 4, 6, 4, 3, 5, 3, 2, 8, 2, 1, 0, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 3, 3, 0, 3, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 22, 37, 47, 96, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 9, 5, 6, 5, 1, 4, 4, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 5, 4, 2, 9, 2, 8, 2, 2, 6, 6, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 3, 0, 0, 3, 2, 0, 0, 0, 3, 0, 1, 3, 4, 2, 3, 4, 2, 0, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 55, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.06285714358091354, "mapping_values": [1, 4, 4, 2, 2, 0, 78, 78, 46, 32, 11, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 89, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))))))), alpha))))), grad)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, beta)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, grad), beta))))))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.divide_no_nan(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301546473214025, 2.301669548783147, 2.3005570744983177, 2.3007415839945873, 2.300557037496359, 2.299797377833884, 2.29968186817338, 2.2998484482838886, 2.3002297532808793, 2.2996053369116742, 2.300258226429923, 2.2992485298251966, 2.3000099918137233, 2.2992567073210846, 2.3001415360132937], "accuracy": [0.08770307898521423, 0.09060890227556229, 0.09377889335155487, 0.09391097724437714, 0.0936468094587326, 0.1018359512090683, 0.10355303436517715, 0.09708096832036972, 0.09945846349000931, 0.10157178342342377, 0.09708096832036972, 0.10236428678035736, 0.09747721254825592, 0.10038304328918457, 0.09338264167308807], "val_loss": [1.9702084405081612, 1.9695920944213867, 1.9694185256958008, 1.9692483629499162, 1.9693314007350378, 1.9694292885916573, 1.9694136210850306, 1.9692975452968053, 1.9692192077636719, 1.9692937305995397, 1.9694666862487793, 1.969707420894078, 1.9699537413460868, 1.970191478729248, 1.97042635508946], "val_accuracy": [0.04699999839067459, 0.05233333259820938, 0.05966666713356972, 0.06333333253860474, 0.06433333456516266, 0.0689999982714653, 0.07000000029802322, 0.07466666400432587, 0.07433333247900009, 0.07666666805744171, 0.07466666400432587, 0.07433333247900009, 0.07400000095367432, 0.07366666942834854, 0.07333333045244217]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [23, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 8, 6, 2, 2, 4, 3, 0, 2, 0, 5, 6, 0, 5, 0, 4, 6, 2, 5, 4, 2, 2, 6, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 3, 6, 5, 6, 6, 6, 0, 3, 5, 3, 8, 5, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 2, 0, 3, 0, 2, 2, 3, 0, 3, 0, 3, 3, 0, 3, 0, 3, 1, 1, 3, 4, 3, 3, 4, 2, 4, 3, 2, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 97, 87, 57, 47, 96, 35, 47, 32, 3, 46], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 3, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 10, 10, 3, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))", "other_info": {"loss": [2.301916669908059, 2.3030705389298185, 2.3023935757796874, 2.303183794588445, 2.302868848337615, 2.301830190095006], "accuracy": [0.08638224750757217, 0.08651433140039444, 0.08994849026203156, 0.08611807972192764, 0.09087307006120682, 0.09311848133802414], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]