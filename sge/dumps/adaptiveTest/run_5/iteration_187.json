[{"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7942857146263123, "mapping_values": [1, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.square(tf.math.pow(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2847376497682093, 2.232044115735398, 2.1520486555362752, 2.023272627915657, 1.8205342085259764, 1.6064964963649446, 1.4222834649386422, 1.2774059699589724, 1.1799983491262724, 1.1104423718414034, 1.0577688628908288, 1.016846744942706, 0.9693064577685623, 0.9384593525267926, 0.9272661138960179, 0.8993702012203656, 0.8827461633290502, 0.8607719140659943, 0.8365499109183289, 0.8304279166961532, 0.8200729915557552, 0.806822891469015, 0.7966864843488826, 0.7873011231028787, 0.7868453453103895, 0.7711475529076794, 0.7604926285049651, 0.7496256731630647, 0.7529041499289161, 0.7364429144842939, 0.7298694846495, 0.7234939310402997, 0.7273895392296982, 0.7198697278339314, 0.7082007268337668, 0.7050235731773971, 0.7116798401241053, 0.6964215159479181, 0.7001237119933665, 0.6858925179026902, 0.6899954689854345, 0.6818446317101357, 0.6701042632841872, 0.6793525906412782, 0.6694400700139111, 0.6669721431846175, 0.6605883884770035, 0.654836546003291, 0.6574461947515924, 0.6567461545897859, 0.6526189472114469, 0.6493850155686658, 0.6437465284935409, 0.6364577081477117, 0.6389644343571782, 0.6337083170537101, 0.6316102756138853, 0.634078264795416, 0.6262966624938769], "accuracy": [0.1426495909690857, 0.2641659080982208, 0.3465856611728668, 0.39426758885383606, 0.45106327533721924, 0.48989564180374146, 0.5235767960548401, 0.5659754276275635, 0.5918636918067932, 0.6131290197372437, 0.6176198720932007, 0.6428477168083191, 0.6560559868812561, 0.6656980514526367, 0.6688680648803711, 0.6749438643455505, 0.6811517477035522, 0.691850483417511, 0.7049266695976257, 0.698718786239624, 0.7051908373832703, 0.7040021419525146, 0.71100252866745, 0.7136441469192505, 0.7125874757766724, 0.720380425453186, 0.7160216569900513, 0.7298903465270996, 0.7224937081336975, 0.7296261787414551, 0.7342491149902344, 0.735569953918457, 0.7300224304199219, 0.7371549606323242, 0.7380794882774353, 0.7403249144554138, 0.7404569983482361, 0.7450799345970154, 0.7387399077415466, 0.7466648817062378, 0.7471932172775269, 0.7516840696334839, 0.7465327978134155, 0.7493065595626831, 0.7523444890975952, 0.7539294958114624, 0.757099449634552, 0.7569673657417297, 0.7577598690986633, 0.7593448758125305, 0.7637035846710205, 0.7609298825263977, 0.7589486241340637, 0.7703077793121338, 0.7614582180976868, 0.7670056819915771, 0.7683265209197998, 0.7695152759552002, 0.7680623531341553], "val_loss": [1.9268675531659807, 1.866781439099993, 1.7647630827767509, 1.5998321260724748, 1.3762192726135254, 1.1596076147896903, 0.9993362426757812, 0.8901592663356236, 0.8142616748809814, 0.7633234262466431, 0.7240583215441022, 0.6991621766771589, 0.6743461745125907, 0.6535771574292865, 0.641316294670105, 0.6264053583145142, 0.615087458065578, 0.6022588014602661, 0.5949388572147915, 0.5893547024045672, 0.5817422015326363, 0.5782897812979562, 0.5633860145296369, 0.5633503879819598, 0.5567123379026141, 0.5476510013852801, 0.5473228182111468, 0.5396583931786674, 0.538051928792681, 0.5320840392793927, 0.528278044291905, 0.5239799703870501, 0.5226460695266724, 0.5177346127373832, 0.5157433237348285, 0.5115173203604562, 0.5097262859344482, 0.5055408477783203, 0.5018142972673688, 0.5029698610305786, 0.5027822937284198, 0.4947551999773298, 0.4927221025739397, 0.4937619311468942, 0.4869095427649362, 0.4879180022648403, 0.48118320533207487, 0.484514730317252, 0.4762761763163975, 0.4757632187434605, 0.4790471281324114, 0.47331680570329937, 0.47206456320626394, 0.46678037302834646, 0.46857076031821115, 0.46702960559300016, 0.46429288387298584, 0.4645612580435617, 0.4601679359163557], "val_accuracy": [0.3619999885559082, 0.45533332228660583, 0.518666684627533, 0.5659999847412109, 0.6069999933242798, 0.6266666650772095, 0.656333327293396, 0.6796666383743286, 0.7003333568572998, 0.7110000252723694, 0.7096666693687439, 0.7210000157356262, 0.7306666374206543, 0.7306666374206543, 0.7250000238418579, 0.7333333492279053, 0.7436666488647461, 0.7409999966621399, 0.746999979019165, 0.7516666650772095, 0.7536666393280029, 0.7556666731834412, 0.7596666812896729, 0.7490000128746033, 0.7633333206176758, 0.7680000066757202, 0.7646666765213013, 0.7699999809265137, 0.7723333239555359, 0.7689999938011169, 0.7646666765213013, 0.7696666717529297, 0.7689999938011169, 0.7760000228881836, 0.7753333449363708, 0.7736666798591614, 0.7733333110809326, 0.7803333401679993, 0.7826666831970215, 0.778333306312561, 0.784333348274231, 0.7826666831970215, 0.7796666622161865, 0.7803333401679993, 0.7860000133514404, 0.7879999876022339, 0.7886666655540466, 0.7893333435058594, 0.7913333177566528, 0.7983333468437195, 0.7906666398048401, 0.7943333387374878, 0.7889999747276306, 0.8029999732971191, 0.7953333258628845, 0.7906666398048401, 0.7993333339691162, 0.7943333387374878, 0.8019999861717224]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 3, 1, 2, 6, 6, 4, 2, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 1, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 2, 1], [70, 80, 70, 75, 73, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7942857146263123, "mapping_values": [1, 38, 38, 22, 16, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2847376362585576, 2.2320445880063566, 2.152052052001187, 2.023279503525177, 1.820529225842198, 1.6064861696850685, 1.4223156404564519, 1.2774391979856923, 1.1800186943935445, 1.110485601151199, 1.0578256281312461, 1.0169018407413406, 0.9693324892134509, 0.9385335482642194, 0.9272530992363958, 0.8993667474024174, 0.8827560720442466, 0.8606816486455131, 0.8364853801712809, 0.8304056604509072, 0.8199637245508374, 0.8068220822755388, 0.7965970022834886, 0.787304587651395, 0.7869541127652445, 0.7710628726337218, 0.7606074541252146, 0.7497173644264754, 0.752973501936729, 0.7364247446015464, 0.7298382608771812, 0.7235754798699711, 0.7275217432607953, 0.7197930873849562, 0.7082744679194651, 0.7049778914958604, 0.7117553211521274, 0.6963995210467202, 0.700068413699544, 0.6860255473608889, 0.6898436928469318, 0.681595938261773, 0.6699787514037492, 0.6794883136373895, 0.6692715702339045, 0.6669771008330282, 0.6605274893305069, 0.6545963975196313, 0.6572319193050735, 0.6566528832325137, 0.6527769185643013, 0.649393505140649, 0.6435980786815563, 0.6365816361396194, 0.6389353235305466, 0.6337331865426178, 0.6315918298382344, 0.6337312042532092, 0.6264005828102142, 0.6259787940566471, 0.6230514080155055, 0.615846512796636, 0.6161913317286847, 0.6099083865669819, 0.6068438931762298, 0.6113634057694328, 0.603828191954021, 0.6086040503077141], "accuracy": [0.1426495909690857, 0.2641659080982208, 0.3463214933872223, 0.39400342106819153, 0.4511953592300415, 0.490159809589386, 0.5238409638404846, 0.5663716793060303, 0.5919957756996155, 0.6132611036300659, 0.6178840398788452, 0.6424514651298523, 0.6565843224525452, 0.6654338836669922, 0.6688680648803711, 0.6756042838096619, 0.6807554960250854, 0.6917183995246887, 0.7043983340263367, 0.6985867023468018, 0.7053229212760925, 0.7045304179191589, 0.7113987803459167, 0.7136441469192505, 0.7132478952407837, 0.7217012047767639, 0.7162858247756958, 0.7304186820983887, 0.7220974564552307, 0.7296261787414551, 0.7339849472045898, 0.7345132827758789, 0.7301545143127441, 0.7371549606323242, 0.7372870445251465, 0.7403249144554138, 0.7403249144554138, 0.744419515132904, 0.7388719916343689, 0.746268630027771, 0.7470611333847046, 0.7524765729904175, 0.7470611333847046, 0.750231146812439, 0.7518161535263062, 0.7547219395637512, 0.7565711140632629, 0.7572315335273743, 0.7584202885627747, 0.7592127919197083, 0.7637035846710205, 0.7606657147407532, 0.7607977986335754, 0.7705719470977783, 0.7627789974212646, 0.7666094303131104, 0.7668735980987549, 0.7688548564910889, 0.7687227725982666, 0.7737419009208679, 0.7681944370269775, 0.7774402499198914, 0.7681944370269775, 0.778761088848114, 0.7753269076347351, 0.7733456492424011, 0.7726852297782898, 0.7754589915275574], "val_loss": [1.9268675531659807, 1.8667830058506556, 1.7647666931152344, 1.599834884916033, 1.3762079647609167, 1.1596414021083288, 0.9993752752031598, 0.8902067116328648, 0.8142892633165631, 0.7632994481495449, 0.7240829978670392, 0.6992254257202148, 0.6742663724081857, 0.6536202090127128, 0.6412691218512399, 0.6264710085732597, 0.6150539091655186, 0.6023058039801461, 0.5952202422278268, 0.589413046836853, 0.5816999844142369, 0.5783590418951852, 0.5634554965155465, 0.5633393185479301, 0.5568046569824219, 0.5476501669202533, 0.547338570867266, 0.539447580065046, 0.5380230801446098, 0.5321515287671771, 0.5282559565135411, 0.5238936969212123, 0.5227613959993634, 0.5177587951932635, 0.5155884197780064, 0.5118170806339809, 0.5098886660167149, 0.505820631980896, 0.5021769148962838, 0.5029793296541486, 0.5032437188284737, 0.4949061189379011, 0.49272654737745014, 0.4936847005571638, 0.48722403390066965, 0.48804562432425364, 0.4811591250555856, 0.4840829713003976, 0.47642745290483746, 0.4760315588542393, 0.4791663033621652, 0.4734011547906058, 0.47250866889953613, 0.4669798271996634, 0.4684885229383196, 0.4674398899078369, 0.46401236738477436, 0.46433424949645996, 0.46012522493089947, 0.46012483324323383, 0.4589158126286098, 0.4565938540867397, 0.45511731079646517, 0.45377821581704275, 0.4545314311981201, 0.4514375073569162, 0.45231074946267263, 0.4482343707765852], "val_accuracy": [0.3619999885559082, 0.45533332228660583, 0.518666684627533, 0.5659999847412109, 0.6073333621025085, 0.6269999742507935, 0.656333327293396, 0.6796666383743286, 0.7003333568572998, 0.7106666564941406, 0.7089999914169312, 0.721666693687439, 0.7303333282470703, 0.7303333282470703, 0.7253333330154419, 0.7329999804496765, 0.7436666488647461, 0.7406666874885559, 0.7459999918937683, 0.7516666650772095, 0.7536666393280029, 0.7546666860580444, 0.7586666941642761, 0.75, 0.7630000114440918, 0.7680000066757202, 0.7646666765213013, 0.7696666717529297, 0.7703333497047424, 0.7696666717529297, 0.7646666765213013, 0.7696666717529297, 0.7683333158493042, 0.7763333320617676, 0.7756666541099548, 0.7730000019073486, 0.7726666927337646, 0.7799999713897705, 0.7820000052452087, 0.7773333191871643, 0.7846666574478149, 0.7826666831970215, 0.7793333530426025, 0.781000018119812, 0.7860000133514404, 0.7886666655540466, 0.7900000214576721, 0.7900000214576721, 0.7910000085830688, 0.7986666560173035, 0.7900000214576721, 0.7923333048820496, 0.7886666655540466, 0.8019999861717224, 0.7950000166893005, 0.7903333306312561, 0.7990000247955322, 0.7946666479110718, 0.8033333420753479, 0.7976666688919067, 0.7983333468437195, 0.7990000247955322, 0.8069999814033508, 0.8013333082199097, 0.7976666688919067, 0.8033333420753479, 0.8043333292007446, 0.8033333420753479]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 1, 2, 5, 5, 5, 0, 5, 4, 0, 2, 3, 6, 6, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [36, 83, 42, 75, 51, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7934285998344421, "mapping_values": [1, 49, 49, 29, 20, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(alpha)), grad)))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(alpha))))))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.pow(alpha, tf.math.subtract(grad, alpha))))))))))))), grad))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2847376362585576, 2.2320445070429216, 2.1520546298882963, 2.023276242345725, 1.8205081068246025, 1.6064980801904931, 1.4223246232724194, 1.2774488432784328, 1.1800550101786211, 1.1105147783136828, 1.0578304936369065, 1.0168902325812836, 0.9693266271033292, 0.9386378701384105, 0.9275030949175271, 0.8998036949925214, 0.8828054185729882, 0.8607544401586016, 0.8365814769745125, 0.8305130564478395, 0.8199058049044132, 0.8068550874559933, 0.7967181052073291, 0.7872195212423148, 0.7869475452324591, 0.7711923684835781, 0.7607071026913668, 0.7496808886039904, 0.753065858715797, 0.7364776947668058, 0.7299619530957562, 0.7236997841639273, 0.7273178358025097, 0.7198434602850543, 0.708422904394999, 0.7050719919961757, 0.7116590167521611, 0.6963097250236417, 0.700277349952347, 0.6860806139515943, 0.6900477709629753, 0.6820889922999719, 0.670068106237514, 0.6793840346382342, 0.6694204583301552, 0.6669362467891898, 0.6606108326213456, 0.6547720306947199, 0.6574565141255498, 0.6567460695640082, 0.6526991229456618, 0.6492553636492708, 0.6435706082855973, 0.6366391826409705, 0.6392667674511305, 0.633858627442277, 0.6316423033915333, 0.6337876931992127, 0.6263208603027585, 0.6260725619880798, 0.6231060635538117, 0.6158823072319852, 0.6164715474764464, 0.6100454988921749, 0.6069300062290162, 0.6113129185962639, 0.6040012213957386, 0.6086887071995829], "accuracy": [0.1426495909690857, 0.2641659080982208, 0.3463214933872223, 0.39426758885383606, 0.45106327533721924, 0.49029189348220825, 0.5238409638404846, 0.5665037631988525, 0.5921278595924377, 0.6132611036300659, 0.6178840398788452, 0.6429798007011414, 0.6565843224525452, 0.6655659675598145, 0.6690001487731934, 0.6744155287742615, 0.6812838315963745, 0.6910579800605774, 0.7043983340263367, 0.698190450668335, 0.7054550051689148, 0.7042662501335144, 0.71100252866745, 0.7140403985977173, 0.7123233675956726, 0.7209087014198303, 0.7165499925613403, 0.7288337349891663, 0.722757875919342, 0.7297582626342773, 0.7341170310974121, 0.735041618347168, 0.7306828498840332, 0.7363624572753906, 0.7382115721702576, 0.7401928305625916, 0.7403249144554138, 0.7453441023826599, 0.7390040755271912, 0.7471932172775269, 0.746268630027771, 0.752740740776062, 0.7473253011703491, 0.7508915662765503, 0.7526086568832397, 0.7541936039924622, 0.7564390301704407, 0.7574957013130188, 0.7573636174201965, 0.7586844563484192, 0.7635715007781982, 0.76106196641922, 0.7598732113838196, 0.769911527633667, 0.7617223858833313, 0.7655527591705322, 0.7676661014556885, 0.7691190242767334, 0.7691190242767334, 0.7737419009208679, 0.7676661014556885, 0.778232753276825, 0.7693831920623779, 0.7788931727409363, 0.7749306559562683, 0.7718927264213562, 0.7732135653495789, 0.7746664881706238], "val_loss": [1.9268675531659807, 1.8667853900364466, 1.7647668974740165, 1.5998119626726424, 1.3762047290802002, 1.1596226351601737, 0.9993951320648193, 0.8901887961796352, 0.8142493282045636, 0.7633135829653058, 0.7241524628230503, 0.6991842474256244, 0.6743001597268241, 0.6538821629115513, 0.6416127852031163, 0.626597557749067, 0.6151933329445975, 0.6022080523627145, 0.594981142452785, 0.5894124848502023, 0.5817611387797764, 0.5783466611589704, 0.5633941548211234, 0.5636517490659442, 0.5569482360567365, 0.5477618660245623, 0.5475263936179025, 0.5397565535136631, 0.538226842880249, 0.532225387437003, 0.5284774133137294, 0.5239185435431344, 0.5225879635129657, 0.5178972482681274, 0.5156701462609428, 0.5114026921136039, 0.5097548280443464, 0.5058246850967407, 0.5018424987792969, 0.5028562375477382, 0.5032265867505755, 0.4946265050343105, 0.4925863061632429, 0.4935937949589321, 0.48698995794568745, 0.4879863943372454, 0.4811669758387974, 0.48412651675088064, 0.4762693302971976, 0.47569380487714497, 0.4787141595567976, 0.47318523270743235, 0.47238011019570486, 0.46683415344783236, 0.46848390783582416, 0.4670205797467913, 0.4642214264188494, 0.4643927131380354, 0.4600659097943987, 0.46031383105686735, 0.45888423919677734, 0.4566246782030378, 0.45492533275059294, 0.4535043409892491, 0.45431465762002127, 0.45122943605695454, 0.4522738456726074, 0.4480820042746408], "val_accuracy": [0.3619999885559082, 0.45533332228660583, 0.518666684627533, 0.5659999847412109, 0.6066666841506958, 0.6263333559036255, 0.6556666493415833, 0.6793333292007446, 0.7003333568572998, 0.7103333473205566, 0.7083333134651184, 0.722000002861023, 0.7306666374206543, 0.7296666502952576, 0.7256666421890259, 0.7336666584014893, 0.7433333396911621, 0.7403333187103271, 0.7473333477973938, 0.7509999871253967, 0.7536666393280029, 0.7553333044052124, 0.7590000033378601, 0.7490000128746033, 0.7636666893959045, 0.7683333158493042, 0.7646666765213013, 0.7703333497047424, 0.7710000276565552, 0.7696666717529297, 0.7646666765213013, 0.7689999938011169, 0.7670000195503235, 0.7760000228881836, 0.7756666541099548, 0.7733333110809326, 0.7733333110809326, 0.7796666622161865, 0.7823333144187927, 0.7786666750907898, 0.784333348274231, 0.7833333611488342, 0.7789999842643738, 0.781000018119812, 0.7846666574478149, 0.7873333096504211, 0.7889999747276306, 0.7906666398048401, 0.7906666398048401, 0.7986666560173035, 0.7900000214576721, 0.7923333048820496, 0.7889999747276306, 0.8019999861717224, 0.7946666479110718, 0.7896666526794434, 0.800000011920929, 0.7943333387374878, 0.8023333549499512, 0.7979999780654907, 0.7976666688919067, 0.8006666898727417, 0.8069999814033508, 0.8023333549499512, 0.79666668176651, 0.8029999732971191, 0.8046666383743286, 0.8033333420753479]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 0, 0, 0, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7919999957084656, "mapping_values": [1, 30, 30, 20, 10, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), alpha))), grad), alpha), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2847376182771804, 2.232044205736758, 2.15205091404137, 2.0232745485377586, 1.820531577922885, 1.6064841146750015, 1.422269424710685, 1.277400535489149, 1.180004389971601, 1.1105516028520752, 1.0578403714751492, 1.0169097176711037, 0.9693163793084801, 0.9385070179935617, 0.927186180438033, 0.8993759614570093, 0.8827335719403464, 0.8607185355440155, 0.8366667111914124, 0.8301655332473102, 0.8200902592362729, 0.8069103078331379, 0.796527374099353, 0.7872485722674827, 0.7869970343368338, 0.771051590405813, 0.7606004406794612, 0.74959604976483, 0.752988303255616, 0.7362030510967906, 0.7297886277092226, 0.7234295517336092, 0.7274695808357488, 0.7200298710128241, 0.7081775233226288, 0.7046849762585657, 0.711714309361853, 0.6963089776076913, 0.7001362613651652, 0.6858619679281693, 0.6900594712342915, 0.6817421314974881, 0.6699454708657386, 0.6792694487434415, 0.6696079227713672, 0.666743302042962, 0.6604264586073548, 0.6547898207248052, 0.6573242468368486, 0.6565975192956417, 0.6530059475499437, 0.6494186333204855, 0.6435065654999135, 0.6363266822747299, 0.6390379270416414, 0.6338734650230836, 0.6316888033674535, 0.6335496148334407, 0.6262871049430155], "accuracy": [0.1426495909690857, 0.2641659080982208, 0.3463214933872223, 0.39400342106819153, 0.4511953592300415, 0.4900277256965637, 0.5235767960548401, 0.5663716793060303, 0.5919957756996155, 0.6129969358444214, 0.6173557043075562, 0.6427156329154968, 0.6565843224525452, 0.6646413803100586, 0.6688680648803711, 0.6752080321311951, 0.6811517477035522, 0.6917183995246887, 0.7037379741668701, 0.6980583667755127, 0.7046625018119812, 0.7040021419525146, 0.7104741930961609, 0.7129837274551392, 0.7124554514884949, 0.7213049530982971, 0.7160216569900513, 0.7293620109558105, 0.7238145470619202, 0.7294940948486328, 0.7325320243835449, 0.7345132827758789, 0.7297582626342773, 0.7364945411682129, 0.7390040755271912, 0.7409853339195251, 0.7403249144554138, 0.7452120184898376, 0.7390040755271912, 0.7458723783493042, 0.7479857206344604, 0.7526086568832397, 0.7467969655990601, 0.750231146812439, 0.7504953145980835, 0.7539294958114624, 0.7567031979560852, 0.7580240368843079, 0.7581561207771301, 0.7594769597053528, 0.7629110813140869, 0.7605336308479309, 0.7602694630622864, 0.7696473598480225, 0.7618544697761536, 0.7658169269561768, 0.7663452625274658, 0.7695152759552002, 0.7685906887054443], "val_loss": [1.9268676212855749, 1.8667809622628349, 1.7647626740591866, 1.599829844066075, 1.3762181145804269, 1.1596010412488664, 0.9993292604173932, 0.8901213918413434, 0.8142358064651489, 0.7633162055696759, 0.7240841218403408, 0.6991193464824131, 0.674297741481236, 0.6535687276295253, 0.6412497929164341, 0.6264415468488421, 0.6150355168751308, 0.6022417885916573, 0.595093948500497, 0.5894077675683158, 0.5817172697612217, 0.5787116970334735, 0.5634914125714984, 0.5636658327920097, 0.5570147378104073, 0.5477590560913086, 0.547360897064209, 0.5394777911049979, 0.5380917957850865, 0.5320631435939244, 0.5283798319952828, 0.5239403929029193, 0.522671069417681, 0.5180403334753854, 0.5155596051897321, 0.5114199604306903, 0.5092966556549072, 0.5056545904704502, 0.5018870660236904, 0.5028779847281319, 0.5030062539236886, 0.494771020753043, 0.4925811120441982, 0.49365528992244173, 0.48712129252297537, 0.48778012820652555, 0.48113415922437397, 0.4841449090412685, 0.4762905665806362, 0.47581478527614046, 0.4792041267667498, 0.4731344325201852, 0.47227857794080463, 0.4670569045203073, 0.4685323238372803, 0.4671670198440552, 0.4640496628625052, 0.46428416456495014, 0.4601280689239502], "val_accuracy": [0.3619999885559082, 0.45533332228660583, 0.518666684627533, 0.5659999847412109, 0.6073333621025085, 0.6266666650772095, 0.6566666960716248, 0.6796666383743286, 0.7003333568572998, 0.7106666564941406, 0.7086666822433472, 0.7206666469573975, 0.7306666374206543, 0.7300000190734863, 0.7256666421890259, 0.7336666584014893, 0.7440000176429749, 0.7400000095367432, 0.7463333606719971, 0.7506666779518127, 0.7540000081062317, 0.7559999823570251, 0.7599999904632568, 0.749666690826416, 0.762666642665863, 0.7673333287239075, 0.7643333077430725, 0.7703333497047424, 0.7713333368301392, 0.7703333497047424, 0.7643333077430725, 0.7696666717529297, 0.7676666378974915, 0.7760000228881836, 0.7756666541099548, 0.7730000019073486, 0.7743333578109741, 0.7796666622161865, 0.7823333144187927, 0.7786666750907898, 0.7846666574478149, 0.7833333611488342, 0.7796666622161865, 0.781000018119812, 0.7863333225250244, 0.7876666784286499, 0.7893333435058594, 0.7906666398048401, 0.7910000085830688, 0.7976666688919067, 0.7903333306312561, 0.7926666736602783, 0.7886666655540466, 0.8019999861717224, 0.7956666946411133, 0.7896666526794434, 0.7993333339691162, 0.7953333258628845, 0.8016666769981384]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 4, 0, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 42, 55, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7791428565979004, "mapping_values": [1, 42, 42, 25, 17, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.square(tf.math.add(alpha, grad)))), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(alpha))))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2932062501117554, 2.2656558543746783, 2.235333113197354, 2.1991298739715828, 2.1454837919619925, 2.0786789759763273, 1.9894153834995325, 1.8738017287063498, 1.750544478156075, 1.623952027703037, 1.5115296645108436, 1.414701280702831, 1.3294641236744977, 1.2595134703647883, 1.2212135187150812, 1.169158348034496, 1.1299975987958273, 1.0919824220626866, 1.0543162932469623, 1.0338181673874236, 1.0072022989488723, 0.987009274661974, 0.9631446943999817, 0.9445870874769196, 0.947452824074185, 0.923882686773768, 0.9062338130679727, 0.8898072929005062, 0.8915979692712672, 0.8711683264088558, 0.8614887299003571, 0.850069800545558, 0.8497383734648017, 0.8425499304583863, 0.8299168891060259, 0.823051119430143, 0.8245460692728672, 0.8089204556544254, 0.8104814209753511, 0.793650554974538, 0.7963068879055325, 0.7878995773153313, 0.7789286598238443, 0.7817984222735963, 0.7753653859087599, 0.7669696141196248, 0.7601100409334802, 0.7517111144045703, 0.7594024863036521, 0.7563662874212103, 0.7497717044876551, 0.744518486445118, 0.7394629614054959, 0.7284380492438509, 0.7299071417477121, 0.7266800706302485, 0.7249638113473558, 0.7284510350891816, 0.7164488924949428, 0.7140301406863753, 0.7118301484972462, 0.7066317601384047, 0.7036176133133779, 0.6973394711633888, 0.6949903787701845, 0.6979192022980637, 0.6901470498480675, 0.6939327461120238, 0.6999110356061812, 0.6882130074195575, 0.6819384431070609, 0.7008581479873325, 0.6703794325001095, 0.6877009621181067, 0.6856877914021091, 0.6785293361766227, 0.6731218760748267, 0.6667203064907056], "accuracy": [0.11927089840173721, 0.1900673657655716, 0.2518821954727173, 0.29863953590393066, 0.3553031384944916, 0.3829084634780884, 0.40945714712142944, 0.4431383013725281, 0.46572446823120117, 0.4884427487850189, 0.5089156031608582, 0.5322942733764648, 0.5538238286972046, 0.5691454410552979, 0.5723153948783875, 0.594241201877594, 0.6042794585227966, 0.6168273687362671, 0.6310923099517822, 0.6343944072723389, 0.6495839357376099, 0.6535464525222778, 0.657508909702301, 0.6717738509178162, 0.6592260003089905, 0.6704530715942383, 0.6693964004516602, 0.6799629926681519, 0.6760005354881287, 0.6807554960250854, 0.6927750706672668, 0.6955488324165344, 0.6909258961677551, 0.6954167485237122, 0.6934354901313782, 0.6996433734893799, 0.7024171352386475, 0.7063795924186707, 0.7012283802032471, 0.707040011882782, 0.7104741930961609, 0.7156254053115845, 0.7140403985977173, 0.7174745798110962, 0.7152291536331177, 0.7157574892044067, 0.7246070504188538, 0.7256637215614319, 0.7253995537757874, 0.7280412316322327, 0.733588695526123, 0.7320036888122559, 0.7264562249183655, 0.7357020378112793, 0.7388719916343689, 0.7359662055969238, 0.7347774505615234, 0.7408532500267029, 0.7368907928466797, 0.7420420050621033, 0.7413815855979919, 0.7446836829185486, 0.7382115721702576, 0.7475894689559937, 0.744419515132904, 0.7413815855979919, 0.7457403540611267, 0.7417778372764587, 0.7412495017051697, 0.7479857206344604, 0.7503632307052612, 0.7416457533836365, 0.7565711140632629, 0.7465327978134155, 0.7449478507041931, 0.7532690763473511, 0.7495707273483276, 0.7563069462776184], "val_loss": [1.9467644010271346, 1.9206664902823312, 1.8884765080043249, 1.8460124560764857, 1.787726811000279, 1.7105109351021903, 1.6109801701136999, 1.490137951714652, 1.3591241836547852, 1.2331528663635254, 1.12264541217259, 1.0316414492470878, 0.959355081830706, 0.9001654216221401, 0.8567363534654889, 0.8190291949680873, 0.7874871322086879, 0.758757472038269, 0.7377875702721732, 0.7200961623873029, 0.7039138759885516, 0.689633812223162, 0.6741197960717338, 0.6636335849761963, 0.6563898495265416, 0.6446090766361782, 0.6388190473828997, 0.6287576300757272, 0.622991783278329, 0.6154058490480695, 0.6086444684437343, 0.6032337461199079, 0.5991160358701434, 0.5934898683003017, 0.588808536529541, 0.5849302666527885, 0.5804466179439, 0.5763817174094064, 0.5711323533739362, 0.5695612941469465, 0.5659972940172467, 0.5614247151783535, 0.5574290752410889, 0.5563854319708688, 0.5509000676018851, 0.5493796723229545, 0.5449917657034737, 0.5428414685385567, 0.5392861536570958, 0.5365033660616193, 0.536627037184579, 0.5333302872521537, 0.5316805669239589, 0.5267906188964844, 0.5257174117224557, 0.5247176885604858, 0.5213713305337089, 0.5203036069869995, 0.516778826713562, 0.5142084530421666, 0.5140912532806396, 0.5116277592522758, 0.5102725539888654, 0.5077428988048008, 0.5069447244916644, 0.5049536568777901, 0.5039934771401542, 0.5011789287839618, 0.5006463527679443, 0.5003195830753872, 0.4975458724158151, 0.4954178844179426, 0.49453210830688477, 0.4946627105985369, 0.49332148688180105, 0.49006990024021696, 0.48950215748378206, 0.4870020662035261], "val_accuracy": [0.24833333492279053, 0.3723333477973938, 0.4273333251476288, 0.4699999988079071, 0.5109999775886536, 0.5429999828338623, 0.5543333292007446, 0.5756666660308838, 0.5983333587646484, 0.6186666488647461, 0.6399999856948853, 0.6566666960716248, 0.6746666431427002, 0.6823333501815796, 0.6899999976158142, 0.6993333101272583, 0.7049999833106995, 0.7103333473205566, 0.7110000252723694, 0.7173333168029785, 0.718999981880188, 0.7246666550636292, 0.7286666631698608, 0.7243333458900452, 0.7310000061988831, 0.7293333411216736, 0.7306666374206543, 0.7369999885559082, 0.7396666407585144, 0.7366666793823242, 0.7390000224113464, 0.7440000176429749, 0.7406666874885559, 0.746999979019165, 0.7526666522026062, 0.7526666522026062, 0.753000020980835, 0.7583333253860474, 0.7556666731834412, 0.7476666569709778, 0.7609999775886536, 0.7586666941642761, 0.7609999775886536, 0.7616666555404663, 0.7620000243186951, 0.7646666765213013, 0.7696666717529297, 0.7689999938011169, 0.7676666378974915, 0.768666684627533, 0.7699999809265137, 0.7713333368301392, 0.7706666588783264, 0.7723333239555359, 0.7733333110809326, 0.7706666588783264, 0.7756666541099548, 0.7743333578109741, 0.7733333110809326, 0.7766666412353516, 0.7763333320617676, 0.7756666541099548, 0.7756666541099548, 0.7770000100135803, 0.7749999761581421, 0.7770000100135803, 0.7816666960716248, 0.7799999713897705, 0.7836666703224182, 0.7826666831970215, 0.781333327293396, 0.7879999876022339, 0.7913333177566528, 0.7816666960716248, 0.781000018119812, 0.784333348274231, 0.7893333435058594, 0.7850000262260437]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 0, 0, 1, 2, 1, 2, 1], [90, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7620000243186951, "mapping_values": [1, 31, 31, 19, 12, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad))))))), grad)), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2847376497682093, 2.232040103904292, 2.1520318094419055, 2.0232362971880873, 1.820453174551008, 1.6064038509548522, 1.4222636568453397, 1.2774074015568875, 1.1799970969170028, 1.1104726232416076, 1.0578244474538487, 1.0168499460608935, 0.9693467740952111, 0.9386294538539242, 0.9274969457194412, 0.8997999725954612, 0.8827184577108516, 0.8609655141247861, 0.8363346448663896, 0.8304863468987547, 0.8200239792885388, 0.8068798901681745, 0.7966086130021917, 0.7872477072719034, 0.7869659242628745, 0.7710134933858012, 0.760469649186334, 0.7496353045603886, 0.7530036777427184, 0.7364657970231206, 0.7299343149313412, 0.7237623049488252, 0.7273317830453317], "accuracy": [0.1426495909690857, 0.2641659080982208, 0.34645357728004456, 0.39426758885383606, 0.450931191444397, 0.490159809589386, 0.5237088799476624, 0.5655791759490967, 0.5919957756996155, 0.6129969358444214, 0.6180161237716675, 0.6424514651298523, 0.6563201546669006, 0.6653017997741699, 0.6692643165588379, 0.6744155287742615, 0.6812838315963745, 0.6911900639533997, 0.7047945857048035, 0.6977941989898682, 0.7046625018119812, 0.7043983340263367, 0.7103421092033386, 0.7132478952407837, 0.7132478952407837, 0.7202483415603638, 0.7161537408828735, 0.7300224304199219, 0.7226257920265198, 0.7294940948486328, 0.7337207794189453, 0.7345132827758789, 0.7309470176696777], "val_loss": [1.9268674169267928, 1.8667686326163155, 1.7647418975830078, 1.5997678892953056, 1.3761321135929652, 1.1595703874315535, 0.9993147509438651, 0.8901133196694511, 0.8142541817256382, 0.7632652861731393, 0.7241717406681606, 0.6990875516619001, 0.6744076865059989, 0.6539166143962315, 0.6416762386049543, 0.6265111991337368, 0.6153888702392578, 0.6023380756378174, 0.5954217229570661, 0.5903206212180001, 0.5821446861539569, 0.578494497707912, 0.5633440017700195, 0.5634874105453491, 0.5569073302405221, 0.547708443232945, 0.5473560094833374, 0.5395097051348005, 0.5382666417530605, 0.5319476127624512, 0.5283731392451695, 0.5238418408802578, 0.5225589786257062], "val_accuracy": [0.3619999885559082, 0.4556666612625122, 0.518666684627533, 0.5659999847412109, 0.6076666712760925, 0.6263333559036255, 0.656000018119812, 0.6786666512489319, 0.7003333568572998, 0.7106666564941406, 0.7086666822433472, 0.722000002861023, 0.7303333282470703, 0.7300000190734863, 0.7256666421890259, 0.7329999804496765, 0.7433333396911621, 0.7406666874885559, 0.746666669845581, 0.7509999871253967, 0.7536666393280029, 0.7559999823570251, 0.7586666941642761, 0.7483333349227905, 0.7636666893959045, 0.7676666378974915, 0.765333354473114, 0.7699999809265137, 0.7699999809265137, 0.7693333625793457, 0.7643333077430725, 0.7689999938011169, 0.7676666378974915]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 6, 4, 2, 5, 5, 5, 7, 2, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 2, 1], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [0, 4], [4, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.19771428406238556, "mapping_values": [1, 2, 2, 1, 1, 0, 15, 15, 8, 7, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.6766567750456405, 2.3337100615606583, 2.338282814335751, 2.3281340374214112, 2.3168833151847426, 2.318821983755603], "accuracy": [0.1958790123462677, 0.12296922504901886, 0.09879804402589798, 0.0936468094587326, 0.1002509593963623, 0.09853387624025345], "val_loss": [1.9984769821166992, 1.9892636707850866, 1.9932347706386022, 1.9832072939191545, 1.9876324789864677, 1.9916953359331404], "val_accuracy": [0.10866666585206985, 0.0989999994635582, 0.09833333641290665, 0.0989999994635582, 0.09966666996479034, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 6, 4, 2, 5, 5, 5, 6, 5, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 41, 41, 25, 16, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), grad))))))), grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026501404343187, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 2, 1, 2, 6, 5, 2, 2, 5, 5, 5, 7, 8, 4, 0, 1, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 1, 0, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 0, 1, 2, 1, 2, 1], [70, 83, 93, 75, 54, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 20, 10, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.square(alpha))))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))))), grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.subtract(tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026501404343187, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 6, 2, 4, 2, 9, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 8, 9, 3, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), grad))), grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 8, 6, 5, 2, 6, 5, 8, 2, 5, 3, 5, 7, 8, 9, 5, 2, 3, 9, 9, 3, 2, 3, 5, 8, 4, 2, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 2, 1], [70, 83, 4, 92, 41, 36, 4, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 0, 0], [3, 4, 9], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 5, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(grad), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.14053626358509064, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 5, 0, 1, 2, 1, 2, 9, 2, 6, 2, 0, 1, 2, 2, 4, 2, 3, 5, 0, 6, 4, 9, 5, 0, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 79, 23, 75, 51, 80, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 47, 47, 29, 18, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.negative(alpha)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad)), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.pow(alpha, tf.math.subtract(grad, alpha))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 0, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 41, 93, 75, 78, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [0, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 27, 16, 11, 5, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.square(tf.math.square(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.negative(grad)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0812310129404068, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 4, 6, 2, 6, 5, 2, 3, 5, 5, 5, 7, 8, 5, 0, 0, 3, 4, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 4, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), alpha)))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 5, 8, 1, 1, 6, 3, 9, 2, 4, 2, 2, 1, 2, 2, 1, 2, 3, 5, 0, 6, 2, 2, 5, 0, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [4, 4], [4, 2, 1, 5, 3, 4], [84], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 35, 20, 15, 4, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.square(tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, alpha))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.negative(alpha))))), grad))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08228767663240433, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 5, 0, 6, 2, 6, 2, 9, 2, 6, 2, 2, 1, 2, 2, 1, 2, 3, 5, 0, 6, 2, 9, 5, 0, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 1, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 1, 2, 1], [30, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [28], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.08314285427331924, "mapping_values": [1, 4, 4, 3, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 11, 7, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.math.subtract(sigma, tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.3029361706462756, 2.2998233243632136, 2.298359752378412, 2.2985454523300435, 2.296742302945356, 2.2965092177498754, 2.296300019727895, 2.2956726122777917, 2.2966587179136346, 2.2955586268145725, 2.295919103708092, 2.297107665640504, 2.2959003500761437, 2.2963333967859088, 2.296020227762781, 2.2965085775057683, 2.297372973212445], "accuracy": [0.09219389408826828, 0.09602430462837219, 0.10117553919553757, 0.10460969805717468, 0.11055342853069305, 0.11227050423622131, 0.109232597053051, 0.1150442510843277, 0.1138555034995079, 0.12059172987937927, 0.11940298229455948, 0.11200633645057678, 0.1150442510843277, 0.11478008329868317, 0.11570466309785843, 0.11596883088350296, 0.11174217611551285], "val_loss": [1.969060012272426, 1.9679784774780273, 1.9672932624816895, 1.966653823852539, 1.9662121364048548, 1.965851170676095, 1.9658289636884416, 1.965822696685791, 1.9658526693071638, 1.966017586844308, 1.9661657469613212, 1.9663384982517786, 1.9665372031075614, 1.9667335918971471, 1.9669404029846191, 1.9672205107552665, 1.9674551827566964], "val_accuracy": [0.05366666615009308, 0.06233333423733711, 0.07566666603088379, 0.08799999952316284, 0.10166666656732559, 0.1106666699051857, 0.11633333563804626, 0.12099999934434891, 0.12600000202655792, 0.12933333218097687, 0.12933333218097687, 0.1303333342075348, 0.12999999523162842, 0.12966667115688324, 0.12933333218097687, 0.12733332812786102, 0.12933333218097687]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1], [0, 0, 1, 0], [3, 4, 0], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 6, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.negative(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303930047795663, 2.302588903829957, 2.301941621919208, 2.3034302266581563, 2.301950862363282, 2.302642128234841], "accuracy": [0.09126931428909302, 0.09126931428909302, 0.0940430611371994, 0.08928807079792023, 0.0944393053650856, 0.09377889335155487], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 5, 0, 1, 2, 6, 2, 9, 2, 6, 6, 4, 1, 2, 1, 1, 2, 3, 2, 0, 6, 2, 6, 5, 0, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 25, 79, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.negative(grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303930047795663, 2.302588903829957, 2.301941621919208, 2.3034302266581563, 2.301950862363282, 2.302642128234841], "accuracy": [0.09126931428909302, 0.09126931428909302, 0.0940430611371994, 0.08928807079792023, 0.0944393053650856, 0.09377889335155487], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1], [0, 0, 1, 0], [3, 4, 8], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 6, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))))), tf.math.divide_no_nan(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303930047795663, 2.302588903829957, 2.301941621919208, 2.3034302266581563, 2.301950862363282, 2.302642128234841], "accuracy": [0.09126931428909302, 0.09126931428909302, 0.0940430611371994, 0.08928807079792023, 0.0944393053650856, 0.09377889335155487], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 5, 0, 1, 2, 8, 2, 2, 2, 6, 2, 2, 1, 2, 2, 1, 2, 3, 2, 0, 6, 2, 9, 5, 0, 4, 5, 4, 1, 4], [2, 1, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 2, 2, 1, 2, 1], [70, 83, 42, 75, 51, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0], [2, 4, 2], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 41, 41, 23, 18, 5, 1, 1, 0, 1, 0, 7, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), grad))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(sigma, sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303930016304634, 2.302588822866522, 2.301941383500629, 2.303429983767851, 2.3019506059633255, 2.302641763852147], "accuracy": [0.09126931428909302, 0.09126931428909302, 0.0940430611371994, 0.08928807079792023, 0.0944393053650856, 0.09377889335155487], "val_loss": [1.9710068021501814, 1.9710067340305872, 1.9710066659109933, 1.9710063934326172, 1.9710063934326172, 1.9710063934326172], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]