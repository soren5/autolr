[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3], [0, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8417142629623413, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.942553852165317, 0.9755022512482394, 0.7475554294054613, 0.6637810459147669, 0.6131229981722974, 0.5806215094647718, 0.5413041677473086, 0.5159600903849009, 0.5024652309531722, 0.47731886957425795, 0.451404085484919, 0.4371957352266588, 0.42526803659394496, 0.41078050442658964, 0.40194516601721214, 0.39214683572582487, 0.37950694889298614, 0.35807779414810287, 0.35105655656168255, 0.3419314100718407, 0.33291272039442427, 0.3329482088196374, 0.31704214712049605, 0.3085373383251085, 0.30623381775305053, 0.3014122047964073, 0.28375234911391733, 0.28084714165720814, 0.2722396976668144, 0.27047781616138383, 0.2689156329603464, 0.25284197539378467, 0.2509738728276113, 0.2360252241070528, 0.24596247570610097], "accuracy": [0.33562275767326355, 0.6412627100944519, 0.7161537408828735, 0.7466648817062378, 0.7658169269561768, 0.7788931727409363, 0.7964601516723633, 0.802800178527832, 0.8058380484580994, 0.817989706993103, 0.8323867321014404, 0.8352925777435303, 0.8360850811004639, 0.8445383906364441, 0.8471800088882446, 0.8510104417800903, 0.8565579056739807, 0.8651432991027832, 0.8642187118530273, 0.8681812286376953, 0.8717474341392517, 0.8746532797813416, 0.8778232932090759, 0.880729079246521, 0.8841632604598999, 0.8862766027450562, 0.8869370222091675, 0.8928807377815247, 0.8942015767097473, 0.8960506916046143, 0.8930128216743469, 0.8989565372467041, 0.9045040011405945, 0.904768168926239, 0.904768168926239], "val_loss": [0.8008811473846436, 0.6106551545006889, 0.5290534155709403, 0.4894652707236154, 0.47443693024771555, 0.4384057010923113, 0.42589876481464933, 0.4026821681431362, 0.38260153361729216, 0.38766034160341534, 0.37041773966380526, 0.3536268557821001, 0.35289446796689716, 0.3467956781387329, 0.3403684837477548, 0.3449524555887495, 0.3317521555083139, 0.32677929741995676, 0.3255174160003662, 0.332540614264352, 0.32212512833731516, 0.3194559727396284, 0.32274588516780306, 0.3189542123249599, 0.3114000473703657, 0.3135697501046317, 0.31890629870550974, 0.3135055899620056, 0.31318388666425434, 0.30448982545307707, 0.31292492151260376, 0.32360594613211496, 0.31506926672799246, 0.3151958925383432, 0.30291004691805157], "val_accuracy": [0.6539999842643738, 0.7246666550636292, 0.7543333172798157, 0.7726666927337646, 0.7926666736602783, 0.8009999990463257, 0.8056666851043701, 0.8213333487510681, 0.8370000123977661, 0.8330000042915344, 0.8353333473205566, 0.8526666760444641, 0.8513333201408386, 0.856333315372467, 0.8610000014305115, 0.8539999723434448, 0.8663333058357239, 0.8659999966621399, 0.8663333058357239, 0.8636666536331177, 0.862333357334137, 0.8666666746139526, 0.8676666617393494, 0.8676666617393494, 0.8700000047683716, 0.8693333268165588, 0.8683333396911621, 0.8706666827201843, 0.8756666779518127, 0.8776666522026062, 0.8773333430290222, 0.8763333559036255, 0.8766666650772095, 0.8759999871253967, 0.8759999871253967]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 2, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [0, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8379999995231628, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9425529146144072, 0.9757473445949522, 0.7488245535614846, 0.6659883691130565, 0.6143256003877758, 0.580932585019414, 0.5430705588113646, 0.5147816526922867, 0.5024793593009008, 0.478123610738624, 0.4548048756976311, 0.4409478453833429, 0.430540814489941, 0.41396707446347486, 0.4089731065753964, 0.3941876632882903, 0.3771761498194896, 0.3593942622160001, 0.3533041469094429, 0.3432040404980571, 0.3333626772788663, 0.3306359935863348, 0.3125709364946728, 0.3057782897198473, 0.304835746427175, 0.3002723359420803, 0.2821822761544588, 0.2739680228358042, 0.2708757412849306, 0.271907342584803, 0.2649747148055788, 0.2521003373109937], "accuracy": [0.33562275767326355, 0.6399418711662292, 0.7154933214187622, 0.7442874312400818, 0.7700436115264893, 0.7784969210624695, 0.7973847389221191, 0.8059701323509216, 0.805177628993988, 0.8169330358505249, 0.8323867321014404, 0.8327829837799072, 0.8367455005645752, 0.8426892161369324, 0.8451988101005554, 0.8465195894241333, 0.8564258217811584, 0.8651432991027832, 0.8661999702453613, 0.867520809173584, 0.8729361891746521, 0.873860776424408, 0.8813894987106323, 0.8823140859603882, 0.8803328275680542, 0.884691596031189, 0.8886540532112122, 0.8931449055671692, 0.89552241563797, 0.89552241563797, 0.8980319499969482, 0.9014661312103271], "val_loss": [0.8009332077843803, 0.609318699155535, 0.5326811245509556, 0.48830136231013704, 0.4759637117385864, 0.4394398842539106, 0.42750515256609234, 0.4040289691516331, 0.3820878948484148, 0.3878151774406433, 0.37152990273066927, 0.3553944059780666, 0.3540876167161124, 0.35141147886003765, 0.3528212138584682, 0.3418369208063398, 0.33919700554439, 0.3265522973878043, 0.3312911220959255, 0.33534054245267597, 0.32276406458445955, 0.32324928045272827, 0.3234810658863613, 0.3257038337843759, 0.3082385574068342, 0.31199398211070467, 0.313436712537493, 0.30769520146506174, 0.3144409826823643, 0.30375554731913973, 0.324338436126709, 0.3170266662325178], "val_accuracy": [0.6539999842643738, 0.7239999771118164, 0.753333330154419, 0.7763333320617676, 0.7929999828338623, 0.7986666560173035, 0.8009999990463257, 0.8209999799728394, 0.8376666903495789, 0.8296666741371155, 0.8370000123977661, 0.8483333587646484, 0.8473333120346069, 0.8529999852180481, 0.8500000238418579, 0.8513333201408386, 0.8619999885559082, 0.8643333315849304, 0.8669999837875366, 0.8640000224113464, 0.8659999966621399, 0.8703333139419556, 0.8703333139419556, 0.8659999966621399, 0.8730000257492065, 0.8730000257492065, 0.8776666522026062, 0.8706666827201843, 0.8756666779518127, 0.8743333220481873, 0.8730000257492065, 0.8740000128746033]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 9, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [0, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8339999914169312, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9425533976395526, 0.9776750454388086, 0.7500085950511841, 0.663382340959192, 0.6143140987461237, 0.5831967123574143, 0.5462106104697597, 0.516065879748907, 0.5010041385719789, 0.47409311166418666, 0.4518270957243205, 0.43879466563199476, 0.4244983965112013, 0.408776211366205, 0.4040084239742492, 0.3932557951709645, 0.3769024294900573, 0.35675148971564796, 0.3541721272163104, 0.34155291901871104, 0.32849428879586445, 0.3309865451570767, 0.3150109399295581, 0.3013766026059162, 0.30188275777416584, 0.30166308152566984, 0.27962838630351283, 0.2758971955152377, 0.26607231301969114, 0.26766611992911327, 0.26458941569118577, 0.24945097001843433, 0.2413245403295054, 0.23744935170652498, 0.23407440859809164, 0.23393719728281784, 0.22746399304004253, 0.215933185558372], "accuracy": [0.33562275767326355, 0.6395456194877625, 0.7150970697402954, 0.7430986762046814, 0.7687227725982666, 0.7754589915275574, 0.793422281742096, 0.8058380484580994, 0.8045172095298767, 0.8193105459213257, 0.8338396549224854, 0.8348963260650635, 0.8368775844573975, 0.8453308939933777, 0.850350022315979, 0.8506141901016235, 0.8561616539955139, 0.8661999702453613, 0.8644828796386719, 0.8664641380310059, 0.8750495314598083, 0.8702945709228516, 0.8813894987106323, 0.882710337638855, 0.8805969953536987, 0.8849557638168335, 0.8903711438179016, 0.8939374089241028, 0.8975036144256592, 0.8945978283882141, 0.8994848728179932, 0.9027869701385498, 0.9045040011405945, 0.9071456789970398, 0.9096552729606628, 0.913089394569397, 0.91124027967453, 0.9162594079971313], "val_loss": [0.8009670121329171, 0.6069661208561489, 0.5318150860922677, 0.48502637658800396, 0.4773933376584734, 0.4401849593435015, 0.4291024037769863, 0.4051725012915475, 0.3817964366504124, 0.38533397231783184, 0.36758290018354145, 0.35538086720875334, 0.3515687244279044, 0.3483828902244568, 0.34438530036381315, 0.33922808510916574, 0.33964511326381136, 0.32652064732142855, 0.33194289037159513, 0.3365445647920881, 0.31919044256210327, 0.32425745895930697, 0.3163060120173863, 0.32030231612069265, 0.308989201273237, 0.31585523911884855, 0.3085506388119289, 0.31008961371013094, 0.312002216066633, 0.3025956835065569, 0.3147368175642831, 0.3191316894122532, 0.31025237696511404, 0.3113281386239188, 0.31063506432941984, 0.30822119542530607, 0.3109755941799709, 0.30420483010155813], "val_accuracy": [0.6536666750907898, 0.7266666889190674, 0.753000020980835, 0.777999997138977, 0.7900000214576721, 0.7976666688919067, 0.8016666769981384, 0.8186666369438171, 0.8353333473205566, 0.8353333473205566, 0.843666672706604, 0.8476666808128357, 0.8479999899864197, 0.8550000190734863, 0.8539999723434448, 0.8566666841506958, 0.8636666536331177, 0.8646666407585144, 0.8683333396911621, 0.8603333234786987, 0.8679999709129333, 0.8663333058357239, 0.8690000176429749, 0.8713333606719971, 0.871999979019165, 0.8723333477973938, 0.8759999871253967, 0.8733333349227905, 0.875333309173584, 0.8799999952316284, 0.8790000081062317, 0.8723333477973938, 0.8813333511352539, 0.8769999742507935, 0.875333309173584, 0.8790000081062317, 0.8790000081062317, 0.8776666522026062]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 9, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8311428427696228, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.942553285657454, 0.975599008615164, 0.747583116766736, 0.6655026396755939, 0.613862819116444, 0.5812684225014187, 0.5425223008264656, 0.5184960524797471, 0.5002456736397733, 0.4753529330475172, 0.45160018625418114, 0.4381676630187485, 0.4262265069546748, 0.4104155852825823, 0.4088714895443972, 0.392182961612125, 0.3736134831774047, 0.3566258883298333, 0.35067112374819026, 0.3425646947320143, 0.32889612347946473, 0.3293557129893809, 0.30876784705057625, 0.3027936502801051, 0.3056737260103005, 0.29798391170867633, 0.285379758572865, 0.280071200613238, 0.27382651776008443, 0.2765628885142697, 0.2672278858891505, 0.2589602430384661, 0.24472627639494962, 0.23728890100592684, 0.24448810537273008, 0.23591329295716154, 0.2255376131897353, 0.21929391659230382, 0.20909550761809642, 0.21260801859897724, 0.20753636396855504, 0.20660133608863526, 0.19479899037948706, 0.1926558945358012], "accuracy": [0.33562275767326355, 0.6407343745231628, 0.7156254053115845, 0.7442874312400818, 0.7683265209197998, 0.7786290049552917, 0.7947431206703186, 0.802800178527832, 0.8072909712791443, 0.8204993009567261, 0.8317263126373291, 0.8384625315666199, 0.8358209133148193, 0.8413683772087097, 0.8445383906364441, 0.8549728989601135, 0.8584070801734924, 0.8660678863525391, 0.8672566413879395, 0.8650112152099609, 0.8747853636741638, 0.8751816153526306, 0.8835028409957886, 0.8829745054244995, 0.8841632604598999, 0.8873332738876343, 0.8885219693183899, 0.8922203183174133, 0.8947299122810364, 0.8902390599250793, 0.8971073627471924, 0.8986923694610596, 0.9051644206047058, 0.9068815112113953, 0.9041078090667725, 0.9080702662467957, 0.9149385690689087, 0.9115044474601746, 0.9138818979263306, 0.9152027368545532, 0.919561505317688, 0.9182406663894653, 0.9247127175331116, 0.9233918786048889], "val_loss": [0.800873841558184, 0.6107428073883057, 0.5311325788497925, 0.48933461734226774, 0.4748943873814174, 0.4403433118547712, 0.427562347480229, 0.4034792610577175, 0.3810363582202366, 0.3898933615003313, 0.36926636525562834, 0.35338676827294485, 0.35194994722093853, 0.34936786549431936, 0.3408243826457432, 0.3422111102512905, 0.33368076596941265, 0.3266367656844003, 0.3249563149043492, 0.33716120038713726, 0.3266975113323757, 0.319355879511152, 0.31959784030914307, 0.3152535728045872, 0.30853922026497976, 0.31332779782158987, 0.3124433841024126, 0.3113633223942348, 0.31986098630087717, 0.3066276567322867, 0.3197638988494873, 0.3195146747997829, 0.31705528497695923, 0.3131510189601353, 0.30859559774398804, 0.3013087000165667, 0.3167080453463963, 0.3062135577201843, 0.30737542254584177, 0.31805981057030813, 0.30914491415023804, 0.32995569705963135, 0.3176308103970119, 0.31199259417397635], "val_accuracy": [0.6539999842643738, 0.7256666421890259, 0.7486666440963745, 0.7733333110809326, 0.7923333048820496, 0.7976666688919067, 0.8056666851043701, 0.8216666579246521, 0.8393333554267883, 0.82833331823349, 0.8410000205039978, 0.8526666760444641, 0.8476666808128357, 0.8566666841506958, 0.8569999933242798, 0.8523333072662354, 0.8629999756813049, 0.8646666407585144, 0.8690000176429749, 0.8636666536331177, 0.8629999756813049, 0.8666666746139526, 0.8686666488647461, 0.8736666440963745, 0.8703333139419556, 0.8706666827201843, 0.8740000128746033, 0.871666669845581, 0.8776666522026062, 0.8773333430290222, 0.8763333559036255, 0.878333330154419, 0.8773333430290222, 0.878000020980835, 0.8803333044052124, 0.8803333044052124, 0.8806666731834412, 0.8803333044052124, 0.8840000033378601, 0.8813333511352539, 0.878000020980835, 0.8796666860580444, 0.8796666860580444, 0.8833333253860474]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [3, 4, 2, 0, 4, 6, 5, 2, 4, 3, 0, 6, 8, 5, 2, 0, 5, 9, 4, 6, 2, 6, 4, 2, 2, 4, 0, 6, 2, 2, 5, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 2, 6, 4, 6, 0, 3], [1, 2, 0, 3, 3, 0, 2, 3, 0, 2, 0, 3, 3, 3, 0, 0, 3, 1, 1, 3, 4, 2, 3, 1, 2, 4, 3, 2, 3, 0, 3], [94, 21, 85, 87, 97, 47, 96, 35, 47, 32], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.7688571214675903, "mapping_values": [1, 4, 4, 2, 2, 1, 78, 78, 47, 31, 9, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, tf.math.pow(grad, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), beta))))))), tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad)))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, alpha))), alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, beta)), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, alpha), tf.math.add(beta, beta))), tf.math.add(beta, grad)), grad))), tf.math.add(beta, beta)))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1375639058847344, 1.4067716797534044, 1.0974965698337038, 0.9427536753316392, 0.8562124155578895, 0.8196908542115092, 0.7486060552703485, 0.7221743604919898, 0.7044552781515433, 0.6946991169299935, 0.6793245024149522, 0.6544621132777714, 0.6554173030527024, 0.6446106751376706], "accuracy": [0.2995641231536865, 0.5094439387321472, 0.6103553175926208, 0.6605468392372131, 0.6880200505256653, 0.7005679607391357, 0.7248712182044983, 0.7313432693481445, 0.7423061728477478, 0.7434949278831482, 0.7454761862754822, 0.7548540234565735, 0.752212405204773, 0.7569673657417297], "val_loss": [1.3432097094399589, 0.8314925261906215, 0.6928572314126151, 0.649328351020813, 0.6010281017848423, 0.5944442578724453, 0.5564319746834892, 0.5780624151229858, 0.5277055672236851, 0.5651650258472988, 0.5284553936549595, 0.5648193870271955, 0.5510507140840802, 0.5291463306971959], "val_accuracy": [0.5720000267028809, 0.6570000052452087, 0.7179999947547913, 0.7263333201408386, 0.7356666922569275, 0.7203333377838135, 0.750333309173584, 0.7323333621025085, 0.7643333077430725, 0.7513333559036255, 0.762666642665863, 0.7266666889190674, 0.750333309173584, 0.7620000243186951]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [4, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [5, 1, 2, 7, 4, 6, 2, 6, 3, 3, 9, 2, 2, 5, 6, 8, 6, 9, 4, 6, 2, 6, 2, 2, 3, 9, 0, 6, 5, 9, 3, 2, 2, 9, 8, 8, 2, 1, 0, 3, 5, 9, 2, 3], [3, 4, 3, 3, 0, 2, 2, 3, 0, 2, 0, 0, 3, 3, 0, 0, 3, 1, 3, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 21, 78, 87, 37, 47, 96, 96, 47, 32, 18, 49], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [4, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [47, 18, 10, 42]], "fitness": -0.6908571720123291, "mapping_values": [1, 4, 4, 2, 2, 1, 63, 63, 40, 23, 11, 6, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, beta), beta)))), tf.math.add(tf.math.square(grad), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), beta)))), tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), grad)))))))), tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(grad, grad)))))))))))))))), tf.math.add(beta, grad))), tf.math.negative(tf.math.multiply(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302890498167992, 2.301358623243893, 2.298750153370128, 2.290721422236247, 2.2868821023871257, 2.2780608609053026, 2.2674353030127556, 2.2585126098435806, 2.247102311353138, 2.2307713473273023, 2.2192211235204096, 2.200703442167565, 2.1818938769243648, 2.158322031692255, 2.1335719749360997, 2.101346908134004, 2.0676718605602296, 2.0225698829500227, 1.9747792292485196, 1.9128673247940835, 1.8489162726188773, 1.7839945734547051, 1.7191099501903173, 1.668318081588604, 1.6125804263492696, 1.563371711151396, 1.5162202672809737, 1.4634367594897173, 1.4021781855381523, 1.3648260223898574, 1.348202723789807, 1.3257085666082098, 1.2757955010477988, 1.2395129312440436, 1.2017401688606857, 1.1796599060804804, 1.143428790051278, 1.1339548201750551, 1.1325685493131403, 1.1109545972794117], "accuracy": [0.08677849918603897, 0.09391097724437714, 0.10157178342342377, 0.12112006545066833, 0.13115836679935455, 0.15889579057693481, 0.19270901381969452, 0.21674811840057373, 0.24607053399085999, 0.28199708461761475, 0.2946770489215851, 0.3209615647792816, 0.3440760672092438, 0.3609826862812042, 0.36824727058410645, 0.3757759928703308, 0.3809272348880768, 0.39743760228157043, 0.4060229957103729, 0.40245673060417175, 0.4163254499435425, 0.41764628887176514, 0.4241183400154114, 0.4279487431049347, 0.443798691034317, 0.4601770043373108, 0.46849822998046875, 0.4931977391242981, 0.5101043581962585, 0.5254259705543518, 0.5222559571266174, 0.5400871634483337, 0.5571258664131165, 0.5680887699127197, 0.5807687044143677, 0.5843349695205688, 0.5912032723426819, 0.5956941246986389, 0.5987319946289062, 0.5975432395935059], "val_loss": [1.970109462738037, 1.9676243918282645, 1.9635677337646484, 1.9580238206045968, 1.9510720797947474, 1.9428114209856306, 1.9333515848432268, 1.9227853502546037, 1.911196231842041, 1.8984415190560477, 1.8842062950134277, 1.8679558209010534, 1.8490251813616072, 1.8267216001238142, 1.800349508013044, 1.7689448084150041, 1.7313496725899833, 1.6861585889543806, 1.6322217328207833, 1.5693022864205497, 1.4989036151341029, 1.425814458302089, 1.3553250176565987, 1.2886738095964705, 1.2233001164027624, 1.1574506419045585, 1.0932085514068604, 1.0331408977508545, 0.9795583656855992, 0.9354108401707241, 0.899226358958653, 0.8657188415527344, 0.8328246218817574, 0.8013134854180473, 0.7760107006345477, 0.7560015405927386, 0.7406601224626813, 0.7292369433811733, 0.7209096465791974, 0.7148232119424003], "val_accuracy": [0.04466666653752327, 0.057999998331069946, 0.09000000357627869, 0.1379999965429306, 0.21666666865348816, 0.28866666555404663, 0.3373333215713501, 0.35866665840148926, 0.3816666603088379, 0.39533331990242004, 0.40666666626930237, 0.4189999997615814, 0.4300000071525574, 0.4399999976158142, 0.4516666531562805, 0.4596666693687439, 0.4736666679382324, 0.484333336353302, 0.49033331871032715, 0.49966666102409363, 0.5063333511352539, 0.5113333463668823, 0.515999972820282, 0.5270000100135803, 0.5393333435058594, 0.559333324432373, 0.5733333230018616, 0.6046666502952576, 0.6320000290870667, 0.6539999842643738, 0.6696666479110718, 0.6769999861717224, 0.6783333420753479, 0.6806666851043701, 0.6866666674613953, 0.6856666803359985, 0.684333324432373, 0.6833333373069763, 0.6756666898727417, 0.6779999732971191]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [3, 1, 2, 7, 4, 6, 2, 8, 4, 3, 9, 2, 2, 5, 4, 8, 4, 3, 4, 6, 2, 6, 2, 2, 2, 1, 0, 6, 5, 8, 3, 2, 2, 9, 8, 8, 2, 1, 0, 3, 5, 8, 3, 2, 3, 6, 4, 8, 3, 9], [2, 3, 0, 3, 0, 2, 2, 3, 0, 3, 0, 3, 3, 0, 3, 0, 3, 1, 0, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [0, 21, 78, 87, 16, 47, 96, 35, 81, 61, 88, 19, 23], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [47, 18, 10, 42]], "fitness": -0.6897143125534058, "mapping_values": [1, 4, 4, 2, 2, 1, 68, 68, 40, 28, 9, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(beta, grad)))), tf.math.add(tf.math.square(tf.math.pow(tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad)))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))))), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(beta))))), tf.math.add(beta, grad)))))), tf.math.add(tf.math.subtract(tf.math.add(beta, grad), beta), grad)))))), tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.942006940886392, 1.2336379414016638, 0.9250694835316693, 0.7797718832615959, 0.6815413708904746, 0.6402626900058208, 0.624786541706315, 0.5923231593952549, 0.5653070786672891, 0.5571452947403572, 0.5741403168218641, 0.5864666383720865, 0.5912215936106776, 0.5987439666835466, 0.6427835106235595, 0.6800061321576605, 0.7776908093927842, 1.028298000003904], "accuracy": [0.34143441915512085, 0.5930524468421936, 0.6565843224525452, 0.7021529674530029, 0.7452120184898376, 0.7498348951339722, 0.7681944370269775, 0.7779685854911804, 0.78113853931427, 0.7960638999938965, 0.7869502305984497, 0.7868181467056274, 0.7847048044204712, 0.787082314491272, 0.765949010848999, 0.7580240368843079, 0.7433628439903259, 0.6807554960250854], "val_loss": [1.0346224308013916, 0.695176260811942, 0.599642174584525, 0.5115839072636196, 0.47104692459106445, 0.4924215418951852, 0.43984934261866976, 0.4492167489869254, 0.421335118157523, 0.45672855206898283, 0.43894491876874653, 0.45532967363085064, 0.42854524510247366, 0.4787097658429827, 0.5137257746287754, 0.5524306637900216, 0.7100817305701119, 0.6398403474262783], "val_accuracy": [0.606333315372467, 0.6700000166893005, 0.7283333539962769, 0.7693333625793457, 0.7903333306312561, 0.7873333096504211, 0.8103333115577698, 0.7953333258628845, 0.8169999718666077, 0.8153333067893982, 0.8259999752044678, 0.8226666450500488, 0.8306666612625122, 0.8213333487510681, 0.8066666722297668, 0.796999990940094, 0.7673333287239075, 0.7516666650772095]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 2, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.6840000152587891, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.13920570251224, 1.327692760342321, 0.9253408298232946, 0.8420496656910115, 0.7887298050746784, 0.7203701708641476, 0.6718404129936774, 0.6297293182109656, 0.598326076975966, 0.5819776555204184, 0.5557174548465404, 0.5300655976073648, 0.510833231355095, 0.49969630716278757, 0.4973634057718261, 0.482507434731792, 0.47247843861013056, 0.4674896829006395, 0.46314381376123387], "accuracy": [0.28199708461761475, 0.5575221180915833, 0.6709813475608826, 0.6856426000595093, 0.7079645991325378, 0.7268524765968323, 0.7536653280258179, 0.7584202885627747, 0.7751948237419128, 0.7798177003860474, 0.7927618622779846, 0.8033285140991211, 0.809140145778656, 0.8181217908859253, 0.8149517774581909, 0.816008448600769, 0.8232730031013489, 0.8265751004219055, 0.8247259259223938], "val_loss": [1.1536290986197335, 0.7411582810538155, 0.622902512550354, 0.6336200407573155, 0.5241782494953701, 0.4916907719203404, 0.46313679218292236, 0.4574610505785261, 0.43572555269513813, 0.4359229292188372, 0.43056873764310566, 0.4164236273084368, 0.41418246712003437, 0.4001662220273699, 0.3999784163066319, 0.41894228969301495, 0.42931465591703144, 0.4000030755996704, 0.42993004832948956], "val_accuracy": [0.5803333520889282, 0.6896666884422302, 0.7183333039283752, 0.7356666922569275, 0.7513333559036255, 0.7770000100135803, 0.7913333177566528, 0.8069999814033508, 0.8133333325386047, 0.8116666674613953, 0.8183333277702332, 0.8293333053588867, 0.8316666483879089, 0.843999981880188, 0.8416666388511658, 0.831333339214325, 0.8373333215713501, 0.8356666564941406, 0.8386666774749756]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [47, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [6, 1, 2, 7, 4, 6, 5, 2, 4, 3, 0, 3, 2, 5, 6, 0, 5, 6, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 4, 2, 2, 5, 0, 6, 2, 6, 0, 6, 0, 3, 0, 8], [3, 4, 0, 3, 0, 2, 2, 3, 3, 2, 3, 3, 3, 0, 0, 3, 3, 1, 1, 2, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [45, 21, 78, 87, 37, 47, 96, 35, 47, 32], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.22714285552501678, "mapping_values": [1, 4, 4, 2, 2, 1, 80, 80, 49, 31, 6, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, beta)), grad)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(beta, grad))))))))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, beta))), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), grad)), tf.math.add(beta, beta)))))))), grad))))), tf.math.add(beta, grad))), beta)), tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2217077206248983, 2.1434578350774047, 2.6083792607545884, 2.3250589488189077, 2.2591479453491323, 2.304833458210294, 2.303181032510308], "accuracy": [0.28860124945640564, 0.26244881749153137, 0.18491612374782562, 0.1310262829065323, 0.14132875204086304, 0.1014397069811821, 0.1006472036242485], "val_loss": [1.9668527330671037, 2.7883967672075545, 1.9964915003095354, 1.9629188946315221, 1.9764787810189384, 1.9738495690482003, 1.9736309732709612], "val_accuracy": [0.10100000351667404, 0.13966666162014008, 0.10066666454076767, 0.10899999737739563, 0.0989999994635582, 0.0989999994635582, 0.10433333367109299]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 9, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [0, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10285714268684387, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303005931935117, 2.3027639395966113, 2.303093485875672, 2.300286524677793, 2.3024805778084714, 2.3017628419951928, 2.30035025704066, 2.3012633102917324, 2.3014153292339397, 2.2999239464194123, 2.3017212765139043, 2.3009514402420512, 2.3006828547689215, 2.3004669655331407, 2.3008005303823875, 2.300190157437479, 2.3011093114770524, 2.3010868492411145, 2.3010407633800956, 2.3008734952220986, 2.301054635524687, 2.3008299844769784, 2.3010195253893935, 2.3015242474757134, 2.3014033291680294], "accuracy": [0.08770307898521423, 0.09113723784685135, 0.08902391046285629, 0.09576013684272766, 0.08955223858356476, 0.09008057415485382, 0.0940430611371994, 0.09893012791872025, 0.09813763201236725, 0.09602430462837219, 0.09206181764602661, 0.09840179979801178, 0.0944393053650856, 0.09787346422672272, 0.09866596013307571, 0.10513802617788315, 0.09945846349000931, 0.10117553919553757, 0.10117553919553757, 0.10038304328918457, 0.10157178342342377, 0.10038304328918457, 0.10540219396352768, 0.1014397069811821, 0.1018359512090683], "val_loss": [1.970844336918422, 1.9707014220101493, 1.9705990382603236, 1.9705241067068917, 1.9704773085457938, 1.9704677036830358, 1.9704855510166712, 1.9705257415771484, 1.9705886840820312, 1.9706811223711287, 1.9708096640450614, 1.9709579604012626, 1.9711119106837682, 1.971285138811384, 1.9714507375444685, 1.9716129984174455, 1.9717766216823034, 1.9719315937587194, 1.9720831598554338, 1.9722258022853307, 1.9723657880510603, 1.972496850149972, 1.9726153782435827, 1.9727224622453963, 1.9728168760027205], "val_accuracy": [0.04266666620969772, 0.04500000178813934, 0.04833333194255829, 0.054999999701976776, 0.059333331882953644, 0.06300000101327896, 0.0676666647195816, 0.07233333587646484, 0.07900000363588333, 0.08299999684095383, 0.08366666734218597, 0.08633333444595337, 0.09366666525602341, 0.09733333438634872, 0.09866666793823242, 0.1003333330154419, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10466666519641876, 0.10466666519641876, 0.10333333164453506, 0.10300000011920929, 0.10333333164453506, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 9, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [1, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 1, 2, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07687227427959442, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 0, 4, 0, 5, 3, 1, 6, 2, 6, 4, 2, 2, 8, 0, 6, 0, 2, 5, 2, 2, 9, 8, 8, 2, 5, 2, 0, 6, 5, 6, 4, 6, 0, 3, 1, 8], [3, 4, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 3, 0, 3, 1, 2, 2, 4, 3, 2, 4, 2, 4, 3, 2, 3, 3, 3, 5], [94, 21, 78, 87, 99, 47, 31, 2, 13, 38, 14, 62], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 0, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [47, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 81, 81, 49, 32, 7, 2, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 82, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), beta), grad)))), tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(beta, beta)), grad))))))))))))))), tf.math.add(beta, grad)))))), tf.math.pow(beta, grad))), tf.math.add(beta, beta)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(grad))))))), tf.math.multiply(beta, tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(grad))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [159853.7150014664, 2.331102669246917, 2.335904179814784, 2.3137767877025754, 2.310195425009888, 2.3292108586341196, 2.330586855957269, 2.3066797373301444, 2.323480181296614, 2.337566513285236], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09615638852119446, 0.10170386731624603, 0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.09774138033390045, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9902698653084892, 2.009284360068185, 1.9942380360194616, 1.9765683582850866, 1.9869001933506556, 2.000974587031773, 1.981163501739502, 1.9827564784458704, 2.0068612098693848, 1.9999864442007882], "val_accuracy": [0.10066666454076767, 0.0989999994635582, 0.0989999994635582, 0.10166666656732559, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [64, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 9, 4, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [1, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 21, 78, 87, 99, 47, 31, 35, 13, 38, 14, 62], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(beta), tf.math.sqrt(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 7, 4, 2, 9, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 9, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 4, 3, 3, 7, 9, 9, 2, 9], [3, 3, 0, 3, 0, 2, 2, 3, 0, 2, 0, 0, 3, 0, 0, 0, 3, 3, 3, 2, 4, 3, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 66, 95, 87, 37, 47, 96, 35, 47, 32, 96, 60, 16, 62, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 84, 84, 55, 29, 15, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.square(beta))), grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), beta))))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, beta))), tf.math.negative(tf.math.divide_no_nan(tf.math.square(grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, tf.math.negative(grad)))), tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), beta))))))))), tf.math.add(beta, grad)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1994209912.8456016, 7.818784823416458e+29, 5.802523167881873, 11.5248267633914, 18.235597473676602, 25.27749461318996], "accuracy": [0.0478140264749527, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.052176817088794e+30, 3.407473564147949, 7.650748661586216, 13.1949097769601, 19.16172845023019, 25.268185751778738], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 8, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [45, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 4, 2, 7, 4, 6, 6, 2, 9, 4, 9, 2, 9, 5, 6, 2, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 4, 0, 3, 0, 2, 0, 3, 2, 2, 1, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 95, 78, 87, 37, 47, 96, 35], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 6, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.square(tf.math.sqrt(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 4, 2, 7, 8, 6, 6, 9, 3, 3, 5, 2, 2, 5, 6, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 4, 0, 3, 0, 2, 0, 3, 0, 2, 0, 2, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 95, 78, 87, 37, 71, 96, 35], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 5, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 8, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [86, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 9, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 4, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07687227427959442, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 2, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 0, 1, 1, 1, 0, 1, 0, 1], [3, 1, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 1, 2, 2, 1, 1, 0, 5, 2, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 6, 2, 3, 3, 9, 2, 2, 5, 6, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 95, 78, 87, 37, 47, 96, 35], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 0, 1, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 2, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(alpha), beta)", "other_info": {"loss": [2.303139361313636, 2.3032787202009515, 2.3040049198580426, 2.3008732276113357, 2.3038166556549173, 2.3031219292027116], "accuracy": [0.08651433140039444, 0.09021265059709549, 0.08889182657003403, 0.0940430611371994, 0.08981640636920929, 0.08849557489156723], "val_loss": [1.9710067340305872, 1.9710065977913993, 1.971006257193429, 1.971006257193429, 1.971006120954241, 1.9710060528346471], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 9, 5, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [0, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [56, 21, 78, 87, 37, 47, 96, 35], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.03228571265935898, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3032585655646223, 2.304123579219757, 2.306175848559429, 2.304378048807733, 2.309790558991982, 2.3121260695721353], "accuracy": [0.08638224750757217, 0.08796724677085876, 0.08426892012357712, 0.08506141602993011, 0.08070268481969833, 0.07951393723487854], "val_loss": [1.9713850702558244, 1.9721941266741072, 1.9734624453953333, 1.9748642785208566, 1.9766315732683455, 1.978797776358468], "val_accuracy": [0.03633333370089531, 0.03133333474397659, 0.02800000086426735, 0.026000000536441803, 0.023666666820645332, 0.029999999329447746]}}]